
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017cf8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  08017fc8  08017fc8  00027fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080183c8  080183c8  000283c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080183d0  080183d0  000283d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080183d4  080183d4  000283d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000164  24000000  080183d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002f6c  24000164  0801853c  00030164  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  240030d0  0801853c  000330d0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030164  2**0
                  CONTENTS, READONLY
 10 .debug_info   000374c9  00000000  00000000  00030192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005f37  00000000  00000000  0006765b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002a98  00000000  00000000  0006d598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002830  00000000  00000000  00070030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e5d3  00000000  00000000  00072860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003952b  00000000  00000000  000b0e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017d813  00000000  00000000  000ea35e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00267b71  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c158  00000000  00000000  00267bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000164 	.word	0x24000164
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08017fb0 	.word	0x08017fb0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000168 	.word	0x24000168
 800030c:	08017fb0 	.word	0x08017fb0

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b974 	b.w	80006e0 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9d08      	ldr	r5, [sp, #32]
 8000416:	4604      	mov	r4, r0
 8000418:	468e      	mov	lr, r1
 800041a:	2b00      	cmp	r3, #0
 800041c:	d14d      	bne.n	80004ba <__udivmoddi4+0xaa>
 800041e:	428a      	cmp	r2, r1
 8000420:	4694      	mov	ip, r2
 8000422:	d969      	bls.n	80004f8 <__udivmoddi4+0xe8>
 8000424:	fab2 f282 	clz	r2, r2
 8000428:	b152      	cbz	r2, 8000440 <__udivmoddi4+0x30>
 800042a:	fa01 f302 	lsl.w	r3, r1, r2
 800042e:	f1c2 0120 	rsb	r1, r2, #32
 8000432:	fa20 f101 	lsr.w	r1, r0, r1
 8000436:	fa0c fc02 	lsl.w	ip, ip, r2
 800043a:	ea41 0e03 	orr.w	lr, r1, r3
 800043e:	4094      	lsls	r4, r2
 8000440:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000444:	0c21      	lsrs	r1, r4, #16
 8000446:	fbbe f6f8 	udiv	r6, lr, r8
 800044a:	fa1f f78c 	uxth.w	r7, ip
 800044e:	fb08 e316 	mls	r3, r8, r6, lr
 8000452:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000456:	fb06 f107 	mul.w	r1, r6, r7
 800045a:	4299      	cmp	r1, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x64>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f106 30ff 	add.w	r0, r6, #4294967295
 8000466:	f080 811f 	bcs.w	80006a8 <__udivmoddi4+0x298>
 800046a:	4299      	cmp	r1, r3
 800046c:	f240 811c 	bls.w	80006a8 <__udivmoddi4+0x298>
 8000470:	3e02      	subs	r6, #2
 8000472:	4463      	add	r3, ip
 8000474:	1a5b      	subs	r3, r3, r1
 8000476:	b2a4      	uxth	r4, r4
 8000478:	fbb3 f0f8 	udiv	r0, r3, r8
 800047c:	fb08 3310 	mls	r3, r8, r0, r3
 8000480:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000484:	fb00 f707 	mul.w	r7, r0, r7
 8000488:	42a7      	cmp	r7, r4
 800048a:	d90a      	bls.n	80004a2 <__udivmoddi4+0x92>
 800048c:	eb1c 0404 	adds.w	r4, ip, r4
 8000490:	f100 33ff 	add.w	r3, r0, #4294967295
 8000494:	f080 810a 	bcs.w	80006ac <__udivmoddi4+0x29c>
 8000498:	42a7      	cmp	r7, r4
 800049a:	f240 8107 	bls.w	80006ac <__udivmoddi4+0x29c>
 800049e:	4464      	add	r4, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004a6:	1be4      	subs	r4, r4, r7
 80004a8:	2600      	movs	r6, #0
 80004aa:	b11d      	cbz	r5, 80004b4 <__udivmoddi4+0xa4>
 80004ac:	40d4      	lsrs	r4, r2
 80004ae:	2300      	movs	r3, #0
 80004b0:	e9c5 4300 	strd	r4, r3, [r5]
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d909      	bls.n	80004d2 <__udivmoddi4+0xc2>
 80004be:	2d00      	cmp	r5, #0
 80004c0:	f000 80ef 	beq.w	80006a2 <__udivmoddi4+0x292>
 80004c4:	2600      	movs	r6, #0
 80004c6:	e9c5 0100 	strd	r0, r1, [r5]
 80004ca:	4630      	mov	r0, r6
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	fab3 f683 	clz	r6, r3
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	d14a      	bne.n	8000570 <__udivmoddi4+0x160>
 80004da:	428b      	cmp	r3, r1
 80004dc:	d302      	bcc.n	80004e4 <__udivmoddi4+0xd4>
 80004de:	4282      	cmp	r2, r0
 80004e0:	f200 80f9 	bhi.w	80006d6 <__udivmoddi4+0x2c6>
 80004e4:	1a84      	subs	r4, r0, r2
 80004e6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ea:	2001      	movs	r0, #1
 80004ec:	469e      	mov	lr, r3
 80004ee:	2d00      	cmp	r5, #0
 80004f0:	d0e0      	beq.n	80004b4 <__udivmoddi4+0xa4>
 80004f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004f6:	e7dd      	b.n	80004b4 <__udivmoddi4+0xa4>
 80004f8:	b902      	cbnz	r2, 80004fc <__udivmoddi4+0xec>
 80004fa:	deff      	udf	#255	; 0xff
 80004fc:	fab2 f282 	clz	r2, r2
 8000500:	2a00      	cmp	r2, #0
 8000502:	f040 8092 	bne.w	800062a <__udivmoddi4+0x21a>
 8000506:	eba1 010c 	sub.w	r1, r1, ip
 800050a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800050e:	fa1f fe8c 	uxth.w	lr, ip
 8000512:	2601      	movs	r6, #1
 8000514:	0c20      	lsrs	r0, r4, #16
 8000516:	fbb1 f3f7 	udiv	r3, r1, r7
 800051a:	fb07 1113 	mls	r1, r7, r3, r1
 800051e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000522:	fb0e f003 	mul.w	r0, lr, r3
 8000526:	4288      	cmp	r0, r1
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x12c>
 800052a:	eb1c 0101 	adds.w	r1, ip, r1
 800052e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000532:	d202      	bcs.n	800053a <__udivmoddi4+0x12a>
 8000534:	4288      	cmp	r0, r1
 8000536:	f200 80cb 	bhi.w	80006d0 <__udivmoddi4+0x2c0>
 800053a:	4643      	mov	r3, r8
 800053c:	1a09      	subs	r1, r1, r0
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb1 f0f7 	udiv	r0, r1, r7
 8000544:	fb07 1110 	mls	r1, r7, r0, r1
 8000548:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800054c:	fb0e fe00 	mul.w	lr, lr, r0
 8000550:	45a6      	cmp	lr, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x156>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f100 31ff 	add.w	r1, r0, #4294967295
 800055c:	d202      	bcs.n	8000564 <__udivmoddi4+0x154>
 800055e:	45a6      	cmp	lr, r4
 8000560:	f200 80bb 	bhi.w	80006da <__udivmoddi4+0x2ca>
 8000564:	4608      	mov	r0, r1
 8000566:	eba4 040e 	sub.w	r4, r4, lr
 800056a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800056e:	e79c      	b.n	80004aa <__udivmoddi4+0x9a>
 8000570:	f1c6 0720 	rsb	r7, r6, #32
 8000574:	40b3      	lsls	r3, r6
 8000576:	fa22 fc07 	lsr.w	ip, r2, r7
 800057a:	ea4c 0c03 	orr.w	ip, ip, r3
 800057e:	fa20 f407 	lsr.w	r4, r0, r7
 8000582:	fa01 f306 	lsl.w	r3, r1, r6
 8000586:	431c      	orrs	r4, r3
 8000588:	40f9      	lsrs	r1, r7
 800058a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800058e:	fa00 f306 	lsl.w	r3, r0, r6
 8000592:	fbb1 f8f9 	udiv	r8, r1, r9
 8000596:	0c20      	lsrs	r0, r4, #16
 8000598:	fa1f fe8c 	uxth.w	lr, ip
 800059c:	fb09 1118 	mls	r1, r9, r8, r1
 80005a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005a4:	fb08 f00e 	mul.w	r0, r8, lr
 80005a8:	4288      	cmp	r0, r1
 80005aa:	fa02 f206 	lsl.w	r2, r2, r6
 80005ae:	d90b      	bls.n	80005c8 <__udivmoddi4+0x1b8>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80005b8:	f080 8088 	bcs.w	80006cc <__udivmoddi4+0x2bc>
 80005bc:	4288      	cmp	r0, r1
 80005be:	f240 8085 	bls.w	80006cc <__udivmoddi4+0x2bc>
 80005c2:	f1a8 0802 	sub.w	r8, r8, #2
 80005c6:	4461      	add	r1, ip
 80005c8:	1a09      	subs	r1, r1, r0
 80005ca:	b2a4      	uxth	r4, r4
 80005cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80005d0:	fb09 1110 	mls	r1, r9, r0, r1
 80005d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005dc:	458e      	cmp	lr, r1
 80005de:	d908      	bls.n	80005f2 <__udivmoddi4+0x1e2>
 80005e0:	eb1c 0101 	adds.w	r1, ip, r1
 80005e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005e8:	d26c      	bcs.n	80006c4 <__udivmoddi4+0x2b4>
 80005ea:	458e      	cmp	lr, r1
 80005ec:	d96a      	bls.n	80006c4 <__udivmoddi4+0x2b4>
 80005ee:	3802      	subs	r0, #2
 80005f0:	4461      	add	r1, ip
 80005f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005f6:	fba0 9402 	umull	r9, r4, r0, r2
 80005fa:	eba1 010e 	sub.w	r1, r1, lr
 80005fe:	42a1      	cmp	r1, r4
 8000600:	46c8      	mov	r8, r9
 8000602:	46a6      	mov	lr, r4
 8000604:	d356      	bcc.n	80006b4 <__udivmoddi4+0x2a4>
 8000606:	d053      	beq.n	80006b0 <__udivmoddi4+0x2a0>
 8000608:	b15d      	cbz	r5, 8000622 <__udivmoddi4+0x212>
 800060a:	ebb3 0208 	subs.w	r2, r3, r8
 800060e:	eb61 010e 	sbc.w	r1, r1, lr
 8000612:	fa01 f707 	lsl.w	r7, r1, r7
 8000616:	fa22 f306 	lsr.w	r3, r2, r6
 800061a:	40f1      	lsrs	r1, r6
 800061c:	431f      	orrs	r7, r3
 800061e:	e9c5 7100 	strd	r7, r1, [r5]
 8000622:	2600      	movs	r6, #0
 8000624:	4631      	mov	r1, r6
 8000626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	40d8      	lsrs	r0, r3
 8000630:	fa0c fc02 	lsl.w	ip, ip, r2
 8000634:	fa21 f303 	lsr.w	r3, r1, r3
 8000638:	4091      	lsls	r1, r2
 800063a:	4301      	orrs	r1, r0
 800063c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000640:	fa1f fe8c 	uxth.w	lr, ip
 8000644:	fbb3 f0f7 	udiv	r0, r3, r7
 8000648:	fb07 3610 	mls	r6, r7, r0, r3
 800064c:	0c0b      	lsrs	r3, r1, #16
 800064e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000652:	fb00 f60e 	mul.w	r6, r0, lr
 8000656:	429e      	cmp	r6, r3
 8000658:	fa04 f402 	lsl.w	r4, r4, r2
 800065c:	d908      	bls.n	8000670 <__udivmoddi4+0x260>
 800065e:	eb1c 0303 	adds.w	r3, ip, r3
 8000662:	f100 38ff 	add.w	r8, r0, #4294967295
 8000666:	d22f      	bcs.n	80006c8 <__udivmoddi4+0x2b8>
 8000668:	429e      	cmp	r6, r3
 800066a:	d92d      	bls.n	80006c8 <__udivmoddi4+0x2b8>
 800066c:	3802      	subs	r0, #2
 800066e:	4463      	add	r3, ip
 8000670:	1b9b      	subs	r3, r3, r6
 8000672:	b289      	uxth	r1, r1
 8000674:	fbb3 f6f7 	udiv	r6, r3, r7
 8000678:	fb07 3316 	mls	r3, r7, r6, r3
 800067c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000680:	fb06 f30e 	mul.w	r3, r6, lr
 8000684:	428b      	cmp	r3, r1
 8000686:	d908      	bls.n	800069a <__udivmoddi4+0x28a>
 8000688:	eb1c 0101 	adds.w	r1, ip, r1
 800068c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000690:	d216      	bcs.n	80006c0 <__udivmoddi4+0x2b0>
 8000692:	428b      	cmp	r3, r1
 8000694:	d914      	bls.n	80006c0 <__udivmoddi4+0x2b0>
 8000696:	3e02      	subs	r6, #2
 8000698:	4461      	add	r1, ip
 800069a:	1ac9      	subs	r1, r1, r3
 800069c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006a0:	e738      	b.n	8000514 <__udivmoddi4+0x104>
 80006a2:	462e      	mov	r6, r5
 80006a4:	4628      	mov	r0, r5
 80006a6:	e705      	b.n	80004b4 <__udivmoddi4+0xa4>
 80006a8:	4606      	mov	r6, r0
 80006aa:	e6e3      	b.n	8000474 <__udivmoddi4+0x64>
 80006ac:	4618      	mov	r0, r3
 80006ae:	e6f8      	b.n	80004a2 <__udivmoddi4+0x92>
 80006b0:	454b      	cmp	r3, r9
 80006b2:	d2a9      	bcs.n	8000608 <__udivmoddi4+0x1f8>
 80006b4:	ebb9 0802 	subs.w	r8, r9, r2
 80006b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80006bc:	3801      	subs	r0, #1
 80006be:	e7a3      	b.n	8000608 <__udivmoddi4+0x1f8>
 80006c0:	4646      	mov	r6, r8
 80006c2:	e7ea      	b.n	800069a <__udivmoddi4+0x28a>
 80006c4:	4620      	mov	r0, r4
 80006c6:	e794      	b.n	80005f2 <__udivmoddi4+0x1e2>
 80006c8:	4640      	mov	r0, r8
 80006ca:	e7d1      	b.n	8000670 <__udivmoddi4+0x260>
 80006cc:	46d0      	mov	r8, sl
 80006ce:	e77b      	b.n	80005c8 <__udivmoddi4+0x1b8>
 80006d0:	3b02      	subs	r3, #2
 80006d2:	4461      	add	r1, ip
 80006d4:	e732      	b.n	800053c <__udivmoddi4+0x12c>
 80006d6:	4630      	mov	r0, r6
 80006d8:	e709      	b.n	80004ee <__udivmoddi4+0xde>
 80006da:	4464      	add	r4, ip
 80006dc:	3802      	subs	r0, #2
 80006de:	e742      	b.n	8000566 <__udivmoddi4+0x156>

080006e0 <__aeabi_idiv0>:
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop

080006e4 <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	460a      	mov	r2, r1
 80006ee:	71fb      	strb	r3, [r7, #7]
 80006f0:	4613      	mov	r3, r2
 80006f2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 80006f4:	2200      	movs	r2, #0
 80006f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006fa:	480c      	ldr	r0, [pc, #48]	; (800072c <HG2_Write_Register+0x48>)
 80006fc:	f007 fb3c 	bl	8007d78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000700:	1df9      	adds	r1, r7, #7
 8000702:	2364      	movs	r3, #100	; 0x64
 8000704:	2201      	movs	r2, #1
 8000706:	480a      	ldr	r0, [pc, #40]	; (8000730 <HG2_Write_Register+0x4c>)
 8000708:	f00e f8b8 	bl	800e87c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 800070c:	1db9      	adds	r1, r7, #6
 800070e:	2364      	movs	r3, #100	; 0x64
 8000710:	2201      	movs	r2, #1
 8000712:	4807      	ldr	r0, [pc, #28]	; (8000730 <HG2_Write_Register+0x4c>)
 8000714:	f00e f8b2 	bl	800e87c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071e:	4803      	ldr	r0, [pc, #12]	; (800072c <HG2_Write_Register+0x48>)
 8000720:	f007 fb2a 	bl	8007d78 <HAL_GPIO_WritePin>

}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	58020c00 	.word	0x58020c00
 8000730:	24000ed0 	.word	0x24000ed0

08000734 <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000744:	b2db      	uxtb	r3, r3
 8000746:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074e:	480d      	ldr	r0, [pc, #52]	; (8000784 <LG2_Read_Register+0x50>)
 8000750:	f007 fb12 	bl	8007d78 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000754:	1df9      	adds	r1, r7, #7
 8000756:	2364      	movs	r3, #100	; 0x64
 8000758:	2201      	movs	r2, #1
 800075a:	480b      	ldr	r0, [pc, #44]	; (8000788 <LG2_Read_Register+0x54>)
 800075c:	f00e f88e 	bl	800e87c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000760:	f107 010f 	add.w	r1, r7, #15
 8000764:	2364      	movs	r3, #100	; 0x64
 8000766:	2201      	movs	r2, #1
 8000768:	4807      	ldr	r0, [pc, #28]	; (8000788 <LG2_Read_Register+0x54>)
 800076a:	f00e fa83 	bl	800ec74 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000774:	4803      	ldr	r0, [pc, #12]	; (8000784 <LG2_Read_Register+0x50>)
 8000776:	f007 faff 	bl	8007d78 <HAL_GPIO_WritePin>

	return reg_value;
 800077a:	7bfb      	ldrb	r3, [r7, #15]
}
 800077c:	4618      	mov	r0, r3
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	58020c00 	.word	0x58020c00
 8000788:	24000ed0 	.word	0x24000ed0

0800078c <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	460a      	mov	r2, r1
 8000796:	71fb      	strb	r3, [r7, #7]
 8000798:	4613      	mov	r3, r2
 800079a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <LG2_Write_Register+0x48>)
 80007a4:	f007 fae8 	bl	8007d78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80007a8:	1df9      	adds	r1, r7, #7
 80007aa:	2364      	movs	r3, #100	; 0x64
 80007ac:	2201      	movs	r2, #1
 80007ae:	480a      	ldr	r0, [pc, #40]	; (80007d8 <LG2_Write_Register+0x4c>)
 80007b0:	f00e f864 	bl	800e87c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80007b4:	1db9      	adds	r1, r7, #6
 80007b6:	2364      	movs	r3, #100	; 0x64
 80007b8:	2201      	movs	r2, #1
 80007ba:	4807      	ldr	r0, [pc, #28]	; (80007d8 <LG2_Write_Register+0x4c>)
 80007bc:	f00e f85e 	bl	800e87c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c6:	4803      	ldr	r0, [pc, #12]	; (80007d4 <LG2_Write_Register+0x48>)
 80007c8:	f007 fad6 	bl	8007d78 <HAL_GPIO_WritePin>

}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	58020c00 	.word	0x58020c00
 80007d8:	24000ed0 	.word	0x24000ed0

080007dc <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 80007e2:	2022      	movs	r0, #34	; 0x22
 80007e4:	f7ff ffa6 	bl	8000734 <LG2_Read_Register>
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 80007ec:	2023      	movs	r0, #35	; 0x23
 80007ee:	f7ff ffa1 	bl	8000734 <LG2_Read_Register>
 80007f2:	4603      	mov	r3, r0
 80007f4:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80007f6:	79bb      	ldrb	r3, [r7, #6]
 80007f8:	021b      	lsls	r3, r3, #8
 80007fa:	b21a      	sxth	r2, r3
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	b21b      	sxth	r3, r3
 8000800:	4313      	orrs	r3, r2
 8000802:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 8000804:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000808:	ee07 3a90 	vmov	s15, r3
 800080c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000810:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000834 <LG2_Get_Gyro_X+0x58>
 8000814:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000818:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000838 <LG2_Get_Gyro_X+0x5c>
 800081c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000820:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	ee07 3a90 	vmov	s15, r3
}
 800082a:	eeb0 0a67 	vmov.f32	s0, s15
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	46fffe00 	.word	0x46fffe00
 8000838:	437a0000 	.word	0x437a0000

0800083c <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 8000842:	2024      	movs	r0, #36	; 0x24
 8000844:	f7ff ff76 	bl	8000734 <LG2_Read_Register>
 8000848:	4603      	mov	r3, r0
 800084a:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 800084c:	2025      	movs	r0, #37	; 0x25
 800084e:	f7ff ff71 	bl	8000734 <LG2_Read_Register>
 8000852:	4603      	mov	r3, r0
 8000854:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000856:	79bb      	ldrb	r3, [r7, #6]
 8000858:	021b      	lsls	r3, r3, #8
 800085a:	b21a      	sxth	r2, r3
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	b21b      	sxth	r3, r3
 8000860:	4313      	orrs	r3, r2
 8000862:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 8000864:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000868:	ee07 3a90 	vmov	s15, r3
 800086c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000870:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000894 <LG2_Get_Gyro_Y+0x58>
 8000874:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000878:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000898 <LG2_Get_Gyro_Y+0x5c>
 800087c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000880:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	ee07 3a90 	vmov	s15, r3
}
 800088a:	eeb0 0a67 	vmov.f32	s0, s15
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	46fffe00 	.word	0x46fffe00
 8000898:	437a0000 	.word	0x437a0000
 800089c:	00000000 	.word	0x00000000

080008a0 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 80008a6:	2026      	movs	r0, #38	; 0x26
 80008a8:	f7ff ff44 	bl	8000734 <LG2_Read_Register>
 80008ac:	4603      	mov	r3, r0
 80008ae:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 80008b0:	2027      	movs	r0, #39	; 0x27
 80008b2:	f7ff ff3f 	bl	8000734 <LG2_Read_Register>
 80008b6:	4603      	mov	r3, r0
 80008b8:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80008ba:	79bb      	ldrb	r3, [r7, #6]
 80008bc:	021b      	lsls	r3, r3, #8
 80008be:	b21a      	sxth	r2, r3
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	b21b      	sxth	r3, r3
 80008c4:	4313      	orrs	r3, r2
 80008c6:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767.0) * 250.0;
 80008c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008cc:	ee07 3a90 	vmov	s15, r3
 80008d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008d4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008d8:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000900 <LG2_Get_Gyro_Z+0x60>
 80008dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008e0:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000908 <LG2_Get_Gyro_Z+0x68>
 80008e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008ec:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	ee07 3a90 	vmov	s15, r3
}
 80008f6:	eeb0 0a67 	vmov.f32	s0, s15
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	00000000 	.word	0x00000000
 8000904:	40dfffc0 	.word	0x40dfffc0
 8000908:	00000000 	.word	0x00000000
 800090c:	406f4000 	.word	0x406f4000

08000910 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 800091c:	ed97 7a00 	vldr	s14, [r7]
 8000920:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000990 <setServo+0x80>
 8000924:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000928:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000994 <setServo+0x84>
 800092c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000930:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000998 <setServo+0x88>
 8000934:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000938:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800093c:	ee17 3a90 	vmov	r3, s15
 8000940:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	3b01      	subs	r3, #1
 8000946:	2b03      	cmp	r3, #3
 8000948:	d81a      	bhi.n	8000980 <setServo+0x70>
 800094a:	a201      	add	r2, pc, #4	; (adr r2, 8000950 <setServo+0x40>)
 800094c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000950:	08000961 	.word	0x08000961
 8000954:	08000969 	.word	0x08000969
 8000958:	08000971 	.word	0x08000971
 800095c:	08000979 	.word	0x08000979
		case 1:
			TIM4->CCR4 = timerVal;
 8000960:	4a0e      	ldr	r2, [pc, #56]	; (800099c <setServo+0x8c>)
 8000962:	89fb      	ldrh	r3, [r7, #14]
 8000964:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8000966:	e00c      	b.n	8000982 <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8000968:	4a0c      	ldr	r2, [pc, #48]	; (800099c <setServo+0x8c>)
 800096a:	89fb      	ldrh	r3, [r7, #14]
 800096c:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 800096e:	e008      	b.n	8000982 <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 8000970:	4a0a      	ldr	r2, [pc, #40]	; (800099c <setServo+0x8c>)
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 8000976:	e004      	b.n	8000982 <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8000978:	4a08      	ldr	r2, [pc, #32]	; (800099c <setServo+0x8c>)
 800097a:	89fb      	ldrh	r3, [r7, #14]
 800097c:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 800097e:	e000      	b.n	8000982 <setServo+0x72>

		default:
			break;
 8000980:	bf00      	nop
	}
}
 8000982:	bf00      	nop
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	43340000 	.word	0x43340000
 8000994:	457a0000 	.word	0x457a0000
 8000998:	453b8000 	.word	0x453b8000
 800099c:	40000800 	.word	0x40000800

080009a0 <setLEDs>:

void setLEDs(void) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08e      	sub	sp, #56	; 0x38
 80009a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 80009a6:	2300      	movs	r3, #0
 80009a8:	637b      	str	r3, [r7, #52]	; 0x34
 80009aa:	e181      	b.n	8000cb0 <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 80009ac:	4aa1      	ldr	r2, [pc, #644]	; (8000c34 <setLEDs+0x294>)
 80009ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009b4:	2b03      	cmp	r3, #3
 80009b6:	f200 8177 	bhi.w	8000ca8 <setLEDs+0x308>
 80009ba:	a201      	add	r2, pc, #4	; (adr r2, 80009c0 <setLEDs+0x20>)
 80009bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c0:	080009d1 	.word	0x080009d1
 80009c4:	08000a81 	.word	0x08000a81
 80009c8:	08000b31 	.word	0x08000b31
 80009cc:	08000be1 	.word	0x08000be1
		case 0:
			for (int j = 0; j < 3; j++) {
 80009d0:	2300      	movs	r3, #0
 80009d2:	633b      	str	r3, [r7, #48]	; 0x30
 80009d4:	e042      	b.n	8000a5c <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 80009d6:	2300      	movs	r3, #0
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009da:	e039      	b.n	8000a50 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80009dc:	4996      	ldr	r1, [pc, #600]	; (8000c38 <setLEDs+0x298>)
 80009de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009e0:	4613      	mov	r3, r2
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	4413      	add	r3, r2
 80009e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009e8:	4413      	add	r3, r2
 80009ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009ee:	2180      	movs	r1, #128	; 0x80
 80009f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009f2:	fa41 f202 	asr.w	r2, r1, r2
 80009f6:	4013      	ands	r3, r2
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d013      	beq.n	8000a24 <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 80009fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009fe:	00da      	lsls	r2, r3, #3
 8000a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a02:	18d1      	adds	r1, r2, r3
 8000a04:	4a8b      	ldr	r2, [pc, #556]	; (8000c34 <setLEDs+0x294>)
 8000a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a08:	00db      	lsls	r3, r3, #3
 8000a0a:	4413      	add	r3, r2
 8000a0c:	685a      	ldr	r2, [r3, #4]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	4413      	add	r3, r2
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	440b      	add	r3, r1
 8000a18:	3308      	adds	r3, #8
 8000a1a:	4a88      	ldr	r2, [pc, #544]	; (8000c3c <setLEDs+0x29c>)
 8000a1c:	213c      	movs	r1, #60	; 0x3c
 8000a1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a22:	e012      	b.n	8000a4a <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a26:	00da      	lsls	r2, r3, #3
 8000a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a2a:	18d1      	adds	r1, r2, r3
 8000a2c:	4a81      	ldr	r2, [pc, #516]	; (8000c34 <setLEDs+0x294>)
 8000a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	4413      	add	r3, r2
 8000a34:	685a      	ldr	r2, [r3, #4]
 8000a36:	4613      	mov	r3, r2
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	4413      	add	r3, r2
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	440b      	add	r3, r1
 8000a40:	3308      	adds	r3, #8
 8000a42:	4a7e      	ldr	r2, [pc, #504]	; (8000c3c <setLEDs+0x29c>)
 8000a44:	211e      	movs	r1, #30
 8000a46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a52:	2b07      	cmp	r3, #7
 8000a54:	ddc2      	ble.n	80009dc <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a58:	3301      	adds	r3, #1
 8000a5a:	633b      	str	r3, [r7, #48]	; 0x30
 8000a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	ddb9      	ble.n	80009d6 <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a62:	2380      	movs	r3, #128	; 0x80
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a66:	e007      	b.n	8000a78 <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 8000a68:	4a74      	ldr	r2, [pc, #464]	; (8000c3c <setLEDs+0x29c>)
 8000a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a74:	3301      	adds	r3, #1
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a7a:	2bb1      	cmp	r3, #177	; 0xb1
 8000a7c:	ddf4      	ble.n	8000a68 <setLEDs+0xc8>
			}
			break;
 8000a7e:	e114      	b.n	8000caa <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
 8000a84:	e042      	b.n	8000b0c <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
 8000a8a:	e039      	b.n	8000b00 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000a8c:	496a      	ldr	r1, [pc, #424]	; (8000c38 <setLEDs+0x298>)
 8000a8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a90:	4613      	mov	r3, r2
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	4413      	add	r3, r2
 8000a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a98:	4413      	add	r3, r2
 8000a9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a9e:	2180      	movs	r1, #128	; 0x80
 8000aa0:	6a3a      	ldr	r2, [r7, #32]
 8000aa2:	fa41 f202 	asr.w	r2, r1, r2
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d013      	beq.n	8000ad4 <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aae:	00da      	lsls	r2, r3, #3
 8000ab0:	6a3b      	ldr	r3, [r7, #32]
 8000ab2:	18d1      	adds	r1, r2, r3
 8000ab4:	4a5f      	ldr	r2, [pc, #380]	; (8000c34 <setLEDs+0x294>)
 8000ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	4413      	add	r3, r2
 8000abc:	685a      	ldr	r2, [r3, #4]
 8000abe:	4613      	mov	r3, r2
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	4413      	add	r3, r2
 8000ac4:	00db      	lsls	r3, r3, #3
 8000ac6:	440b      	add	r3, r1
 8000ac8:	3308      	adds	r3, #8
 8000aca:	4a5d      	ldr	r2, [pc, #372]	; (8000c40 <setLEDs+0x2a0>)
 8000acc:	213c      	movs	r1, #60	; 0x3c
 8000ace:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000ad2:	e012      	b.n	8000afa <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad6:	00da      	lsls	r2, r3, #3
 8000ad8:	6a3b      	ldr	r3, [r7, #32]
 8000ada:	18d1      	adds	r1, r2, r3
 8000adc:	4a55      	ldr	r2, [pc, #340]	; (8000c34 <setLEDs+0x294>)
 8000ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ae0:	00db      	lsls	r3, r3, #3
 8000ae2:	4413      	add	r3, r2
 8000ae4:	685a      	ldr	r2, [r3, #4]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	4413      	add	r3, r2
 8000aec:	00db      	lsls	r3, r3, #3
 8000aee:	440b      	add	r3, r1
 8000af0:	3308      	adds	r3, #8
 8000af2:	4a53      	ldr	r2, [pc, #332]	; (8000c40 <setLEDs+0x2a0>)
 8000af4:	211e      	movs	r1, #30
 8000af6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000afa:	6a3b      	ldr	r3, [r7, #32]
 8000afc:	3301      	adds	r3, #1
 8000afe:	623b      	str	r3, [r7, #32]
 8000b00:	6a3b      	ldr	r3, [r7, #32]
 8000b02:	2b07      	cmp	r3, #7
 8000b04:	ddc2      	ble.n	8000a8c <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b08:	3301      	adds	r3, #1
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	ddb9      	ble.n	8000a86 <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b12:	2380      	movs	r3, #128	; 0x80
 8000b14:	61fb      	str	r3, [r7, #28]
 8000b16:	e007      	b.n	8000b28 <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 8000b18:	4a49      	ldr	r2, [pc, #292]	; (8000c40 <setLEDs+0x2a0>)
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3301      	adds	r3, #1
 8000b26:	61fb      	str	r3, [r7, #28]
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	2bb1      	cmp	r3, #177	; 0xb1
 8000b2c:	ddf4      	ble.n	8000b18 <setLEDs+0x178>
			}
			break;
 8000b2e:	e0bc      	b.n	8000caa <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000b30:	2300      	movs	r3, #0
 8000b32:	61bb      	str	r3, [r7, #24]
 8000b34:	e042      	b.n	8000bbc <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
 8000b3a:	e039      	b.n	8000bb0 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b3c:	493e      	ldr	r1, [pc, #248]	; (8000c38 <setLEDs+0x298>)
 8000b3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b40:	4613      	mov	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4413      	add	r3, r2
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	4413      	add	r3, r2
 8000b4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b4e:	2180      	movs	r1, #128	; 0x80
 8000b50:	697a      	ldr	r2, [r7, #20]
 8000b52:	fa41 f202 	asr.w	r2, r1, r2
 8000b56:	4013      	ands	r3, r2
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d013      	beq.n	8000b84 <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	00da      	lsls	r2, r3, #3
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	18d1      	adds	r1, r2, r3
 8000b64:	4a33      	ldr	r2, [pc, #204]	; (8000c34 <setLEDs+0x294>)
 8000b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	4413      	add	r3, r2
 8000b6c:	685a      	ldr	r2, [r3, #4]
 8000b6e:	4613      	mov	r3, r2
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	4413      	add	r3, r2
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	440b      	add	r3, r1
 8000b78:	3308      	adds	r3, #8
 8000b7a:	4a32      	ldr	r2, [pc, #200]	; (8000c44 <setLEDs+0x2a4>)
 8000b7c:	213c      	movs	r1, #60	; 0x3c
 8000b7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000b82:	e012      	b.n	8000baa <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	00da      	lsls	r2, r3, #3
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	18d1      	adds	r1, r2, r3
 8000b8c:	4a29      	ldr	r2, [pc, #164]	; (8000c34 <setLEDs+0x294>)
 8000b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	4413      	add	r3, r2
 8000b94:	685a      	ldr	r2, [r3, #4]
 8000b96:	4613      	mov	r3, r2
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	4413      	add	r3, r2
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	440b      	add	r3, r1
 8000ba0:	3308      	adds	r3, #8
 8000ba2:	4a28      	ldr	r2, [pc, #160]	; (8000c44 <setLEDs+0x2a4>)
 8000ba4:	211e      	movs	r1, #30
 8000ba6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	3301      	adds	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	2b07      	cmp	r3, #7
 8000bb4:	ddc2      	ble.n	8000b3c <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	61bb      	str	r3, [r7, #24]
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	ddb9      	ble.n	8000b36 <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bc2:	2338      	movs	r3, #56	; 0x38
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	e007      	b.n	8000bd8 <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 8000bc8:	4a1e      	ldr	r2, [pc, #120]	; (8000c44 <setLEDs+0x2a4>)
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	2100      	movs	r1, #0
 8000bce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	2b69      	cmp	r3, #105	; 0x69
 8000bdc:	ddf4      	ble.n	8000bc8 <setLEDs+0x228>
			}
			break;
 8000bde:	e064      	b.n	8000caa <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	e04e      	b.n	8000c84 <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	e045      	b.n	8000c78 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000bec:	4912      	ldr	r1, [pc, #72]	; (8000c38 <setLEDs+0x298>)
 8000bee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	4413      	add	r3, r2
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bfe:	2180      	movs	r1, #128	; 0x80
 8000c00:	68ba      	ldr	r2, [r7, #8]
 8000c02:	fa41 f202 	asr.w	r2, r1, r2
 8000c06:	4013      	ands	r3, r2
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d01f      	beq.n	8000c4c <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	00da      	lsls	r2, r3, #3
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	18d1      	adds	r1, r2, r3
 8000c14:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <setLEDs+0x294>)
 8000c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	4413      	add	r3, r2
 8000c1c:	685a      	ldr	r2, [r3, #4]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	4413      	add	r3, r2
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	440b      	add	r3, r1
 8000c28:	3308      	adds	r3, #8
 8000c2a:	4a07      	ldr	r2, [pc, #28]	; (8000c48 <setLEDs+0x2a8>)
 8000c2c:	213c      	movs	r1, #60	; 0x3c
 8000c2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c32:	e01e      	b.n	8000c72 <setLEDs+0x2d2>
 8000c34:	08018154 	.word	0x08018154
 8000c38:	24000a60 	.word	0x24000a60
 8000c3c:	24000180 	.word	0x24000180
 8000c40:	24000448 	.word	0x24000448
 8000c44:	24000710 	.word	0x24000710
 8000c48:	240008b8 	.word	0x240008b8
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	00da      	lsls	r2, r3, #3
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	18d1      	adds	r1, r2, r3
 8000c54:	4a26      	ldr	r2, [pc, #152]	; (8000cf0 <setLEDs+0x350>)
 8000c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	4413      	add	r3, r2
 8000c5c:	685a      	ldr	r2, [r3, #4]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	4413      	add	r3, r2
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	440b      	add	r3, r1
 8000c68:	3308      	adds	r3, #8
 8000c6a:	4a22      	ldr	r2, [pc, #136]	; (8000cf4 <setLEDs+0x354>)
 8000c6c:	211e      	movs	r1, #30
 8000c6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	3301      	adds	r3, #1
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	2b07      	cmp	r3, #7
 8000c7c:	ddb6      	ble.n	8000bec <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	3301      	adds	r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	ddad      	ble.n	8000be6 <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c8a:	2338      	movs	r3, #56	; 0x38
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	e007      	b.n	8000ca0 <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 8000c90:	4a18      	ldr	r2, [pc, #96]	; (8000cf4 <setLEDs+0x354>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2100      	movs	r1, #0
 8000c96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b69      	cmp	r3, #105	; 0x69
 8000ca4:	ddf4      	ble.n	8000c90 <setLEDs+0x2f0>
			}
			break;
 8000ca6:	e000      	b.n	8000caa <setLEDs+0x30a>
		default:
			break;
 8000ca8:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8000caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cac:	3301      	adds	r3, #1
 8000cae:	637b      	str	r3, [r7, #52]	; 0x34
 8000cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cb2:	2b0d      	cmp	r3, #13
 8000cb4:	f77f ae7a 	ble.w	80009ac <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 8000cb8:	23b2      	movs	r3, #178	; 0xb2
 8000cba:	4a0f      	ldr	r2, [pc, #60]	; (8000cf8 <setLEDs+0x358>)
 8000cbc:	210c      	movs	r1, #12
 8000cbe:	480f      	ldr	r0, [pc, #60]	; (8000cfc <setLEDs+0x35c>)
 8000cc0:	f00e fbc4 	bl	800f44c <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 8000cc4:	23b2      	movs	r3, #178	; 0xb2
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <setLEDs+0x360>)
 8000cc8:	2108      	movs	r1, #8
 8000cca:	480e      	ldr	r0, [pc, #56]	; (8000d04 <setLEDs+0x364>)
 8000ccc:	f00e fbbe 	bl	800f44c <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 8000cd0:	236a      	movs	r3, #106	; 0x6a
 8000cd2:	4a0d      	ldr	r2, [pc, #52]	; (8000d08 <setLEDs+0x368>)
 8000cd4:	2104      	movs	r1, #4
 8000cd6:	480d      	ldr	r0, [pc, #52]	; (8000d0c <setLEDs+0x36c>)
 8000cd8:	f00e fbb8 	bl	800f44c <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 8000cdc:	236a      	movs	r3, #106	; 0x6a
 8000cde:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <setLEDs+0x354>)
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	480a      	ldr	r0, [pc, #40]	; (8000d0c <setLEDs+0x36c>)
 8000ce4:	f00e fbb2 	bl	800f44c <HAL_TIM_PWM_Start_DMA>

}
 8000ce8:	bf00      	nop
 8000cea:	3738      	adds	r7, #56	; 0x38
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	08018154 	.word	0x08018154
 8000cf4:	240008b8 	.word	0x240008b8
 8000cf8:	24000180 	.word	0x24000180
 8000cfc:	240010c4 	.word	0x240010c4
 8000d00:	24000448 	.word	0x24000448
 8000d04:	24000fe0 	.word	0x24000fe0
 8000d08:	24000710 	.word	0x24000710
 8000d0c:	2400102c 	.word	0x2400102c

08000d10 <LoRA_Read_Register>:
	}
}



uint8_t LoRA_Read_Register(uint8_t addr){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d20:	480d      	ldr	r0, [pc, #52]	; (8000d58 <LoRA_Read_Register+0x48>)
 8000d22:	f007 f829 	bl	8007d78 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d26:	1df9      	adds	r1, r7, #7
 8000d28:	2364      	movs	r3, #100	; 0x64
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	480b      	ldr	r0, [pc, #44]	; (8000d5c <LoRA_Read_Register+0x4c>)
 8000d2e:	f00d fda5 	bl	800e87c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000d32:	f107 010f 	add.w	r1, r7, #15
 8000d36:	2364      	movs	r3, #100	; 0x64
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4808      	ldr	r0, [pc, #32]	; (8000d5c <LoRA_Read_Register+0x4c>)
 8000d3c:	f00d ff9a 	bl	800ec74 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d40:	2201      	movs	r2, #1
 8000d42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d46:	4804      	ldr	r0, [pc, #16]	; (8000d58 <LoRA_Read_Register+0x48>)
 8000d48:	f007 f816 	bl	8007d78 <HAL_GPIO_WritePin>

	return reg_value;
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	58020000 	.word	0x58020000
 8000d5c:	24000f58 	.word	0x24000f58

08000d60 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	460a      	mov	r2, r1
 8000d6a:	71fb      	strb	r3, [r7, #7]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d80:	480c      	ldr	r0, [pc, #48]	; (8000db4 <LoRA_Write_Register+0x54>)
 8000d82:	f006 fff9 	bl	8007d78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d86:	1df9      	adds	r1, r7, #7
 8000d88:	2364      	movs	r3, #100	; 0x64
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	480a      	ldr	r0, [pc, #40]	; (8000db8 <LoRA_Write_Register+0x58>)
 8000d8e:	f00d fd75 	bl	800e87c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000d92:	1db9      	adds	r1, r7, #6
 8000d94:	2364      	movs	r3, #100	; 0x64
 8000d96:	2201      	movs	r2, #1
 8000d98:	4807      	ldr	r0, [pc, #28]	; (8000db8 <LoRA_Write_Register+0x58>)
 8000d9a:	f00d fd6f 	bl	800e87c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000da4:	4803      	ldr	r0, [pc, #12]	; (8000db4 <LoRA_Write_Register+0x54>)
 8000da6:	f006 ffe7 	bl	8007d78 <HAL_GPIO_WritePin>

}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	58020000 	.word	0x58020000
 8000db8:	24000f58 	.word	0x24000f58

08000dbc <LoRA_sleep>:


void LoRA_sleep(void){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000dc0:	2180      	movs	r1, #128	; 0x80
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f7ff ffcc 	bl	8000d60 <LoRA_Write_Register>
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 8000dcc:	b5b0      	push	{r4, r5, r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000dd4:	6879      	ldr	r1, [r7, #4]
 8000dd6:	17c8      	asrs	r0, r1, #31
 8000dd8:	460a      	mov	r2, r1
 8000dda:	4603      	mov	r3, r0
 8000ddc:	1355      	asrs	r5, r2, #13
 8000dde:	04d4      	lsls	r4, r2, #19
 8000de0:	4a18      	ldr	r2, [pc, #96]	; (8000e44 <LoRA_set_frequency+0x78>)
 8000de2:	f04f 0300 	mov.w	r3, #0
 8000de6:	4620      	mov	r0, r4
 8000de8:	4629      	mov	r1, r5
 8000dea:	f7ff faf9 	bl	80003e0 <__aeabi_uldivmod>
 8000dee:	4602      	mov	r2, r0
 8000df0:	460b      	mov	r3, r1
 8000df2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000df6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000dfa:	f04f 0200 	mov.w	r2, #0
 8000dfe:	f04f 0300 	mov.w	r3, #0
 8000e02:	0c02      	lsrs	r2, r0, #16
 8000e04:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e08:	0c0b      	lsrs	r3, r1, #16
 8000e0a:	b2d3      	uxtb	r3, r2
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	2006      	movs	r0, #6
 8000e10:	f7ff ffa6 	bl	8000d60 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000e14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e18:	f04f 0200 	mov.w	r2, #0
 8000e1c:	f04f 0300 	mov.w	r3, #0
 8000e20:	0a02      	lsrs	r2, r0, #8
 8000e22:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000e26:	0a0b      	lsrs	r3, r1, #8
 8000e28:	b2d3      	uxtb	r3, r2
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	2007      	movs	r0, #7
 8000e2e:	f7ff ff97 	bl	8000d60 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000e32:	7a3b      	ldrb	r3, [r7, #8]
 8000e34:	4619      	mov	r1, r3
 8000e36:	2008      	movs	r0, #8
 8000e38:	f7ff ff92 	bl	8000d60 <LoRA_Write_Register>
}
 8000e3c:	bf00      	nop
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bdb0      	pop	{r4, r5, r7, pc}
 8000e44:	01e84800 	.word	0x01e84800

08000e48 <LoRA_idle>:

void LoRA_idle(){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000e4c:	2181      	movs	r1, #129	; 0x81
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f7ff ff86 	bl	8000d60 <LoRA_Write_Register>
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8000e62:	231b      	movs	r3, #27
 8000e64:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	2b78      	cmp	r3, #120	; 0x78
 8000e6a:	d809      	bhi.n	8000e80 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	3b2d      	subs	r3, #45	; 0x2d
 8000e70:	4a11      	ldr	r2, [pc, #68]	; (8000eb8 <LoRA_setOCP+0x60>)
 8000e72:	fb82 1203 	smull	r1, r2, r2, r3
 8000e76:	1052      	asrs	r2, r2, #1
 8000e78:	17db      	asrs	r3, r3, #31
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	73fb      	strb	r3, [r7, #15]
 8000e7e:	e00b      	b.n	8000e98 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	2bf0      	cmp	r3, #240	; 0xf0
 8000e84:	d808      	bhi.n	8000e98 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	331e      	adds	r3, #30
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <LoRA_setOCP+0x60>)
 8000e8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e90:	1092      	asrs	r2, r2, #2
 8000e92:	17db      	asrs	r3, r3, #31
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
 8000e9a:	f003 031f 	and.w	r3, r3, #31
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	f043 0320 	orr.w	r3, r3, #32
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	200b      	movs	r0, #11
 8000eaa:	f7ff ff59 	bl	8000d60 <LoRA_Write_Register>
}
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	66666667 	.word	0x66666667

08000ebc <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b11      	cmp	r3, #17
 8000ec8:	dd0f      	ble.n	8000eea <LoRA_setTxPower+0x2e>
      if (level > 20) {
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b14      	cmp	r3, #20
 8000ece:	dd01      	ble.n	8000ed4 <LoRA_setTxPower+0x18>
        level = 20;
 8000ed0:	2314      	movs	r3, #20
 8000ed2:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b03      	subs	r3, #3
 8000ed8:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 8000eda:	2187      	movs	r1, #135	; 0x87
 8000edc:	204d      	movs	r0, #77	; 0x4d
 8000ede:	f7ff ff3f 	bl	8000d60 <LoRA_Write_Register>
      LoRA_setOCP(140);
 8000ee2:	208c      	movs	r0, #140	; 0x8c
 8000ee4:	f7ff ffb8 	bl	8000e58 <LoRA_setOCP>
 8000ee8:	e00b      	b.n	8000f02 <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	dc01      	bgt.n	8000ef4 <LoRA_setTxPower+0x38>
        level = 2;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 8000ef4:	2184      	movs	r1, #132	; 0x84
 8000ef6:	204d      	movs	r0, #77	; 0x4d
 8000ef8:	f7ff ff32 	bl	8000d60 <LoRA_Write_Register>
      LoRA_setOCP(100);
 8000efc:	2064      	movs	r0, #100	; 0x64
 8000efe:	f7ff ffab 	bl	8000e58 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	3b02      	subs	r3, #2
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	b25b      	sxtb	r3, r3
 8000f0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f10:	b25b      	sxtb	r3, r3
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	4619      	mov	r1, r3
 8000f16:	2009      	movs	r0, #9
 8000f18:	f7ff ff22 	bl	8000d60 <LoRA_Write_Register>
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8000f28:	201d      	movs	r0, #29
 8000f2a:	f7ff fef1 	bl	8000d10 <LoRA_Read_Register>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	f023 0301 	bic.w	r3, r3, #1
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	4619      	mov	r1, r3
 8000f38:	201d      	movs	r0, #29
 8000f3a:	f7ff ff11 	bl	8000d60 <LoRA_Write_Register>
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <LoRA_begin>:

void LoRA_begin(long frequency){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b09c      	sub	sp, #112	; 0x70
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	2101      	movs	r1, #1
 8000f50:	4822      	ldr	r0, [pc, #136]	; (8000fdc <LoRA_begin+0x98>)
 8000f52:	f006 ff11 	bl	8007d78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f56:	2201      	movs	r2, #1
 8000f58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f5c:	4820      	ldr	r0, [pc, #128]	; (8000fe0 <LoRA_begin+0x9c>)
 8000f5e:	f006 ff0b 	bl	8007d78 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8000f62:	2042      	movs	r0, #66	; 0x42
 8000f64:	f7ff fed4 	bl	8000d10 <LoRA_Read_Register>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 8000f6e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000f72:	f107 0308 	add.w	r3, r7, #8
 8000f76:	491b      	ldr	r1, [pc, #108]	; (8000fe4 <LoRA_begin+0xa0>)
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f015 fefd 	bl	8016d78 <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff f9ce 	bl	8000324 <strlen>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f015 fa5d 	bl	8016450 <CDC_Transmit_HS>

	LoRA_sleep();
 8000f96:	f7ff ff11 	bl	8000dbc <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8000f9a:	4813      	ldr	r0, [pc, #76]	; (8000fe8 <LoRA_begin+0xa4>)
 8000f9c:	f7ff ff16 	bl	8000dcc <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	200f      	movs	r0, #15
 8000fa4:	f7ff fedc 	bl	8000d60 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8000fa8:	2100      	movs	r1, #0
 8000faa:	200e      	movs	r0, #14
 8000fac:	f7ff fed8 	bl	8000d60 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8000fb0:	200c      	movs	r0, #12
 8000fb2:	f7ff fead 	bl	8000d10 <LoRA_Read_Register>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	f043 0303 	orr.w	r3, r3, #3
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	200c      	movs	r0, #12
 8000fc2:	f7ff fecd 	bl	8000d60 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8000fc6:	2104      	movs	r1, #4
 8000fc8:	2026      	movs	r0, #38	; 0x26
 8000fca:	f7ff fec9 	bl	8000d60 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8000fce:	2011      	movs	r0, #17
 8000fd0:	f7ff ff74 	bl	8000ebc <LoRA_setTxPower>

}
 8000fd4:	bf00      	nop
 8000fd6:	3770      	adds	r7, #112	; 0x70
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	58020c00 	.word	0x58020c00
 8000fe0:	58020000 	.word	0x58020000
 8000fe4:	08017fc8 	.word	0x08017fc8
 8000fe8:	33bca100 	.word	0x33bca100

08000fec <LoRA_beginPacket>:


void LoRA_beginPacket(){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8000ff0:	f7ff ff98 	bl	8000f24 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	200d      	movs	r0, #13
 8000ff8:	f7ff feb2 	bl	8000d60 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2022      	movs	r0, #34	; 0x22
 8001000:	f7ff feae 	bl	8000d60 <LoRA_Write_Register>
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <LoRA_endPacket>:

void LoRA_endPacket(){
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 800100c:	2183      	movs	r1, #131	; 0x83
 800100e:	2001      	movs	r0, #1
 8001010:	f7ff fea6 	bl	8000d60 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 8001014:	bf00      	nop
 8001016:	2012      	movs	r0, #18
 8001018:	f7ff fe7a 	bl	8000d10 <LoRA_Read_Register>
 800101c:	4603      	mov	r3, r0
 800101e:	f003 0308 	and.w	r3, r3, #8
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0f7      	beq.n	8001016 <LoRA_endPacket+0xe>

	}

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8001026:	2108      	movs	r1, #8
 8001028:	2012      	movs	r0, #18
 800102a:	f7ff fe99 	bl	8000d60 <LoRA_Write_Register>

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}

08001032 <LoRA_parsePacket>:


int LoRA_parsePacket(){
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 800103c:	2012      	movs	r0, #18
 800103e:	f7ff fe67 	bl	8000d10 <LoRA_Read_Register>
 8001042:	4603      	mov	r3, r0
 8001044:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 8001046:	f7ff ff6d 	bl	8000f24 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	4619      	mov	r1, r3
 8001050:	2012      	movs	r0, #18
 8001052:	f7ff fe85 	bl	8000d60 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800105c:	2b00      	cmp	r3, #0
 800105e:	d014      	beq.n	800108a <LoRA_parsePacket+0x58>
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	f003 0320 	and.w	r3, r3, #32
 8001066:	2b00      	cmp	r3, #0
 8001068:	d10f      	bne.n	800108a <LoRA_parsePacket+0x58>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 800106a:	2013      	movs	r0, #19
 800106c:	f7ff fe50 	bl	8000d10 <LoRA_Read_Register>
 8001070:	4603      	mov	r3, r0
 8001072:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 8001074:	2010      	movs	r0, #16
 8001076:	f7ff fe4b 	bl	8000d10 <LoRA_Read_Register>
 800107a:	4603      	mov	r3, r0
 800107c:	4619      	mov	r1, r3
 800107e:	200d      	movs	r0, #13
 8001080:	f7ff fe6e 	bl	8000d60 <LoRA_Write_Register>
		LoRA_idle();
 8001084:	f7ff fee0 	bl	8000e48 <LoRA_idle>
 8001088:	e00d      	b.n	80010a6 <LoRA_parsePacket+0x74>
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
 800108a:	2001      	movs	r0, #1
 800108c:	f7ff fe40 	bl	8000d10 <LoRA_Read_Register>
 8001090:	4603      	mov	r3, r0
 8001092:	2b86      	cmp	r3, #134	; 0x86
 8001094:	d007      	beq.n	80010a6 <LoRA_parsePacket+0x74>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8001096:	2100      	movs	r1, #0
 8001098:	200d      	movs	r0, #13
 800109a:	f7ff fe61 	bl	8000d60 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 800109e:	2186      	movs	r1, #134	; 0x86
 80010a0:	2001      	movs	r0, #1
 80010a2:	f7ff fe5d 	bl	8000d60 <LoRA_Write_Register>
	}
	return packetLenght;
 80010a6:	687b      	ldr	r3, [r7, #4]

}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <LoRA_sendPacket>:

void LoRA_sendPacket(char * data){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
    LoRA_beginPacket();
 80010b8:	f7ff ff98 	bl	8000fec <LoRA_beginPacket>
    for(int i = 0; i < strlen(data); i++){
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	e00a      	b.n	80010d8 <LoRA_sendPacket+0x28>
    	LoRA_Write_Register(REG_FIFO, data[i]);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	4413      	add	r3, r2
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	4619      	mov	r1, r3
 80010cc:	2000      	movs	r0, #0
 80010ce:	f7ff fe47 	bl	8000d60 <LoRA_Write_Register>
    for(int i = 0; i < strlen(data); i++){
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3301      	adds	r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff f923 	bl	8000324 <strlen>
 80010de:	4602      	mov	r2, r0
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d8ed      	bhi.n	80010c2 <LoRA_sendPacket+0x12>
    }
    LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff f91c 	bl	8000324 <strlen>
 80010ec:	4603      	mov	r3, r0
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	4619      	mov	r1, r3
 80010f2:	2022      	movs	r0, #34	; 0x22
 80010f4:	f7ff fe34 	bl	8000d60 <LoRA_Write_Register>
    LoRA_endPacket();
 80010f8:	f7ff ff86 	bl	8001008 <LoRA_endPacket>
}
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	0000      	movs	r0, r0
	...

08001108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001108:	b5b0      	push	{r4, r5, r7, lr}
 800110a:	f5ad 7d70 	sub.w	sp, sp, #960	; 0x3c0
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8001110:	4bcb      	ldr	r3, [pc, #812]	; (8001440 <main+0x338>)
 8001112:	f507 744f 	add.w	r4, r7, #828	; 0x33c
 8001116:	461d      	mov	r5, r3
 8001118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800111a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800111c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001120:	c403      	stmia	r4!, {r0, r1}
 8001122:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001124:	f002 fae2 	bl	80036ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001128:	f000 fbb2 	bl	8001890 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800112c:	f000 fc2c 	bl	8001988 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001130:	f001 f990 	bl	8002454 <MX_GPIO_Init>
  MX_DMA_Init();
 8001134:	f001 f92e 	bl	8002394 <MX_DMA_Init>
  MX_SPI3_Init();
 8001138:	f000 feac 	bl	8001e94 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 800113c:	f000 fd3c 	bl	8001bb8 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8001140:	f001 f8dc 	bl	80022fc <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001144:	f000 fc52 	bl	80019ec <MX_ADC1_Init>
  MX_TIM4_Init();
 8001148:	f000 ffb6 	bl	80020b8 <MX_TIM4_Init>
  MX_ADC3_Init();
 800114c:	f000 fcc6 	bl	8001adc <MX_ADC3_Init>
  MX_SPI2_Init();
 8001150:	f000 fe4a 	bl	8001de8 <MX_SPI2_Init>
  MX_I2C2_Init();
 8001154:	f000 fd94 	bl	8001c80 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001158:	f000 fef2 	bl	8001f40 <MX_TIM2_Init>
  MX_TIM5_Init();
 800115c:	f001 f828 	bl	80021b0 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001160:	f000 ff46 	bl	8001ff0 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8001164:	f015 f8b4 	bl	80162d0 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001168:	f000 fde8 	bl	8001d3c <MX_SPI1_Init>
  MX_UART4_Init();
 800116c:	f001 f87a 	bl	8002264 <MX_UART4_Init>
  MX_FATFS_Init();
 8001170:	f012 fe42 	bl	8013df8 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 8001174:	f000 fdc4 	bl	8001d00 <MX_SDMMC2_SD_Init>
  /* USER CODE BEGIN 2 */

	const int MAX = 50;
 8001178:	2332      	movs	r3, #50	; 0x32
 800117a:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
	const double SPEED = 2.0/2000;
 800117e:	a3ae      	add	r3, pc, #696	; (adr r3, 8001438 <main+0x330>)
 8001180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001184:	e9c7 23e0 	strd	r2, r3, [r7, #896]	; 0x380
	const double r_offset = 0;
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	f04f 0300 	mov.w	r3, #0
 8001190:	e9c7 23de 	strd	r2, r3, [r7, #888]	; 0x378
	const double g_offset = 1;
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	4baa      	ldr	r3, [pc, #680]	; (8001444 <main+0x33c>)
 800119a:	e9c7 23dc 	strd	r2, r3, [r7, #880]	; 0x370
	const double b_offset = 2;
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011a6:	e9c7 23da 	strd	r2, r3, [r7, #872]	; 0x368

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 80011aa:	213c      	movs	r1, #60	; 0x3c
 80011ac:	2010      	movs	r0, #16
 80011ae:	f7ff faed 	bl	800078c <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b00110000); //Gyroscope setup - CTRL2_G
 80011b2:	2130      	movs	r1, #48	; 0x30
 80011b4:	2011      	movs	r0, #17
 80011b6:	f7ff fae9 	bl	800078c <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00000100); //disables I2C - CTRL4_C
 80011ba:	2104      	movs	r1, #4
 80011bc:	2013      	movs	r0, #19
 80011be:	f7ff fae5 	bl	800078c <LG2_Write_Register>

	HAL_Delay(3000);
 80011c2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80011c6:	f002 fb23 	bl	8003810 <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 80011ca:	21bf      	movs	r1, #191	; 0xbf
 80011cc:	201c      	movs	r0, #28
 80011ce:	f7ff fa89 	bl	80006e4 <HG2_Write_Register>
	HAL_Delay(2);
 80011d2:	2002      	movs	r0, #2
 80011d4:	f002 fb1c 	bl	8003810 <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 80011d8:	2158      	movs	r1, #88	; 0x58
 80011da:	201b      	movs	r0, #27
 80011dc:	f7ff fa82 	bl	80006e4 <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 80011e0:	21d8      	movs	r1, #216	; 0xd8
 80011e2:	201b      	movs	r0, #27
 80011e4:	f7ff fa7e 	bl	80006e4 <HG2_Write_Register>

	float rotZ = 0;
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
	uint32_t lastTime = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc

	float calOmegaX = 0;
 80011f6:	f04f 0300 	mov.w	r3, #0
 80011fa:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
	float calOmegaY = 0;
 80011fe:	f04f 0300 	mov.w	r3, #0
 8001202:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
	float calOmegaZ = 0;
 8001206:	f04f 0300 	mov.w	r3, #0
 800120a:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
	//HAL_Delay(2000);
	for(int i = 0; i < 500; i++){
 800120e:	2300      	movs	r3, #0
 8001210:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 8001214:	e022      	b.n	800125c <main+0x154>
		calOmegaX += LG2_Get_Gyro_X();
 8001216:	f7ff fae1 	bl	80007dc <LG2_Get_Gyro_X>
 800121a:	eeb0 7a40 	vmov.f32	s14, s0
 800121e:	edd7 7aee 	vldr	s15, [r7, #952]	; 0x3b8
 8001222:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001226:	edc7 7aee 	vstr	s15, [r7, #952]	; 0x3b8
		calOmegaY += LG2_Get_Gyro_Y();
 800122a:	f7ff fb07 	bl	800083c <LG2_Get_Gyro_Y>
 800122e:	eeb0 7a40 	vmov.f32	s14, s0
 8001232:	edd7 7aed 	vldr	s15, [r7, #948]	; 0x3b4
 8001236:	ee77 7a87 	vadd.f32	s15, s15, s14
 800123a:	edc7 7aed 	vstr	s15, [r7, #948]	; 0x3b4
		calOmegaZ += LG2_Get_Gyro_Z();
 800123e:	f7ff fb2f 	bl	80008a0 <LG2_Get_Gyro_Z>
 8001242:	eeb0 7a40 	vmov.f32	s14, s0
 8001246:	edd7 7aec 	vldr	s15, [r7, #944]	; 0x3b0
 800124a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800124e:	edc7 7aec 	vstr	s15, [r7, #944]	; 0x3b0
	for(int i = 0; i < 500; i++){
 8001252:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8001256:	3301      	adds	r3, #1
 8001258:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 800125c:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8001260:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001264:	dbd7      	blt.n	8001216 <main+0x10e>

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 8001266:	ed97 7aee 	vldr	s14, [r7, #952]	; 0x3b8
 800126a:	eddf 6a77 	vldr	s13, [pc, #476]	; 8001448 <main+0x340>
 800126e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001272:	edc7 7aee 	vstr	s15, [r7, #952]	; 0x3b8
	calOmegaY /= 500;
 8001276:	ed97 7aed 	vldr	s14, [r7, #948]	; 0x3b4
 800127a:	eddf 6a73 	vldr	s13, [pc, #460]	; 8001448 <main+0x340>
 800127e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001282:	edc7 7aed 	vstr	s15, [r7, #948]	; 0x3b4
	calOmegaZ /= 500;
 8001286:	ed97 7aec 	vldr	s14, [r7, #944]	; 0x3b0
 800128a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8001448 <main+0x340>
 800128e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001292:	edc7 7aec 	vstr	s15, [r7, #944]	; 0x3b0

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001296:	2201      	movs	r2, #1
 8001298:	2101      	movs	r1, #1
 800129a:	486c      	ldr	r0, [pc, #432]	; (800144c <main+0x344>)
 800129c:	f006 fd6c 	bl	8007d78 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80012a0:	20c8      	movs	r0, #200	; 0xc8
 80012a2:	f002 fab5 	bl	8003810 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2101      	movs	r1, #1
 80012aa:	4868      	ldr	r0, [pc, #416]	; (800144c <main+0x344>)
 80012ac:	f006 fd64 	bl	8007d78 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80012b0:	20c8      	movs	r0, #200	; 0xc8
 80012b2:	f002 faad 	bl	8003810 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 80012b6:	2201      	movs	r2, #1
 80012b8:	2101      	movs	r1, #1
 80012ba:	4864      	ldr	r0, [pc, #400]	; (800144c <main+0x344>)
 80012bc:	f006 fd5c 	bl	8007d78 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80012c0:	20c8      	movs	r0, #200	; 0xc8
 80012c2:	f002 faa5 	bl	8003810 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 80012c6:	2201      	movs	r2, #1
 80012c8:	2104      	movs	r1, #4
 80012ca:	4861      	ldr	r0, [pc, #388]	; (8001450 <main+0x348>)
 80012cc:	f006 fd54 	bl	8007d78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 80012d0:	2201      	movs	r2, #1
 80012d2:	2108      	movs	r1, #8
 80012d4:	485e      	ldr	r0, [pc, #376]	; (8001450 <main+0x348>)
 80012d6:	f006 fd4f 	bl	8007d78 <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80012da:	2100      	movs	r1, #0
 80012dc:	485d      	ldr	r0, [pc, #372]	; (8001454 <main+0x34c>)
 80012de:	f00d ff99 	bl	800f214 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80012e2:	2104      	movs	r1, #4
 80012e4:	485b      	ldr	r0, [pc, #364]	; (8001454 <main+0x34c>)
 80012e6:	f00d ff95 	bl	800f214 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80012ea:	2108      	movs	r1, #8
 80012ec:	4859      	ldr	r0, [pc, #356]	; (8001454 <main+0x34c>)
 80012ee:	f00d ff91 	bl	800f214 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80012f2:	210c      	movs	r1, #12
 80012f4:	4857      	ldr	r0, [pc, #348]	; (8001454 <main+0x34c>)
 80012f6:	f00d ff8d 	bl	800f214 <HAL_TIM_PWM_Start>

    setServo(1, 90);
 80012fa:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8001458 <main+0x350>
 80012fe:	2001      	movs	r0, #1
 8001300:	f7ff fb06 	bl	8000910 <setServo>
    setServo(2, 180);
 8001304:	ed9f 0a55 	vldr	s0, [pc, #340]	; 800145c <main+0x354>
 8001308:	2002      	movs	r0, #2
 800130a:	f7ff fb01 	bl	8000910 <setServo>
    setServo(3, 0);
 800130e:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8001460 <main+0x358>
 8001312:	2003      	movs	r0, #3
 8001314:	f7ff fafc 	bl	8000910 <setServo>
    setServo(4, 45);
 8001318:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8001464 <main+0x35c>
 800131c:	2004      	movs	r0, #4
 800131e:	f7ff faf7 	bl	8000910 <setServo>

    LoRA_begin(868000000);
 8001322:	4851      	ldr	r0, [pc, #324]	; (8001468 <main+0x360>)
 8001324:	f7ff fe0e 	bl	8000f44 <LoRA_begin>
//    		}
//    	}
//    	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);


	int connected = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
	long last_packet = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
	int ARMED = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
//			LED_Color_Data[i][0] = (uint32_t)MAX*triangle_space(color_offset+r_offset);
//			LED_Color_Data[i][1] = (uint32_t)MAX*triangle_space(color_offset+g_offset);
//			LED_Color_Data[i][2] = (uint32_t)MAX*triangle_space(color_offset+b_offset);
//		}

		float timeElapsed = ((float)(HAL_GetTick() - lastTime)) / 1000;
 800133a:	f002 fa5d 	bl	80037f8 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	ee07 3a90 	vmov	s15, r3
 800134a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800134e:	eddf 6a47 	vldr	s13, [pc, #284]	; 800146c <main+0x364>
 8001352:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001356:	edc7 7ad8 	vstr	s15, [r7, #864]	; 0x360

		//float GyroX = LG2_Get_Gyro_X() - calOmegaX;
		//float GyroY = LG2_Get_Gyro_Y() - calOmegaY;
		//float GyroZ = LG2_Get_Gyro_Z() - calOmegaZ;

		lastTime = HAL_GetTick();
 800135a:	f002 fa4d 	bl	80037f8 <HAL_GetTick>
 800135e:	f8c7 03bc 	str.w	r0, [r7, #956]	; 0x3bc

		//write_EEPROM(1, 1);

	     // Start ADC Conversion
		//HAL_Delay(100);
		if(HAL_GetTick() - last_packet > 1000){
 8001362:	f002 fa49 	bl	80037f8 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001372:	d902      	bls.n	800137a <main+0x272>
			connected = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
		}

		if(connected){
 800137a:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 800137e:	2b00      	cmp	r3, #0
 8001380:	d009      	beq.n	8001396 <main+0x28e>
			LED_Color_Data[2][0] = 255;
 8001382:	4b3b      	ldr	r3, [pc, #236]	; (8001470 <main+0x368>)
 8001384:	22ff      	movs	r2, #255	; 0xff
 8001386:	619a      	str	r2, [r3, #24]
			LED_Color_Data[2][1] = 0;
 8001388:	4b39      	ldr	r3, [pc, #228]	; (8001470 <main+0x368>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
			LED_Color_Data[2][2] = 0;
 800138e:	4b38      	ldr	r3, [pc, #224]	; (8001470 <main+0x368>)
 8001390:	2200      	movs	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
 8001394:	e008      	b.n	80013a8 <main+0x2a0>
		}else{
			LED_Color_Data[2][0] = 120;
 8001396:	4b36      	ldr	r3, [pc, #216]	; (8001470 <main+0x368>)
 8001398:	2278      	movs	r2, #120	; 0x78
 800139a:	619a      	str	r2, [r3, #24]
			LED_Color_Data[2][1] = 255;
 800139c:	4b34      	ldr	r3, [pc, #208]	; (8001470 <main+0x368>)
 800139e:	22ff      	movs	r2, #255	; 0xff
 80013a0:	61da      	str	r2, [r3, #28]
			LED_Color_Data[2][2] = 0;
 80013a2:	4b33      	ldr	r3, [pc, #204]	; (8001470 <main+0x368>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	621a      	str	r2, [r3, #32]
		}

		if(!ARMED){
 80013a8:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d169      	bne.n	8001484 <main+0x37c>
			HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2102      	movs	r1, #2
 80013b4:	482f      	ldr	r0, [pc, #188]	; (8001474 <main+0x36c>)
 80013b6:	f006 fcdf 	bl	8007d78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2104      	movs	r1, #4
 80013be:	482d      	ldr	r0, [pc, #180]	; (8001474 <main+0x36c>)
 80013c0:	f006 fcda 	bl	8007d78 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2102      	movs	r1, #2
 80013c8:	482b      	ldr	r0, [pc, #172]	; (8001478 <main+0x370>)
 80013ca:	f006 fcd5 	bl	8007d78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013d4:	4829      	ldr	r0, [pc, #164]	; (800147c <main+0x374>)
 80013d6:	f006 fccf 	bl	8007d78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 80013da:	2200      	movs	r2, #0
 80013dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013e0:	4826      	ldr	r0, [pc, #152]	; (800147c <main+0x374>)
 80013e2:	f006 fcc9 	bl	8007d78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013ec:	4823      	ldr	r0, [pc, #140]	; (800147c <main+0x374>)
 80013ee:	f006 fcc3 	bl	8007d78 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2102      	movs	r1, #2
 80013f6:	4816      	ldr	r0, [pc, #88]	; (8001450 <main+0x348>)
 80013f8:	f006 fcbe 	bl	8007d78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001402:	481f      	ldr	r0, [pc, #124]	; (8001480 <main+0x378>)
 8001404:	f006 fcb8 	bl	8007d78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800140e:	481c      	ldr	r0, [pc, #112]	; (8001480 <main+0x378>)
 8001410:	f006 fcb2 	bl	8007d78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 8001414:	2200      	movs	r2, #0
 8001416:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800141a:	4819      	ldr	r0, [pc, #100]	; (8001480 <main+0x378>)
 800141c:	f006 fcac 	bl	8007d78 <HAL_GPIO_WritePin>

			LED_Color_Data[7][0] = 255;
 8001420:	4b13      	ldr	r3, [pc, #76]	; (8001470 <main+0x368>)
 8001422:	22ff      	movs	r2, #255	; 0xff
 8001424:	655a      	str	r2, [r3, #84]	; 0x54
			LED_Color_Data[7][1] = 0;
 8001426:	4b12      	ldr	r3, [pc, #72]	; (8001470 <main+0x368>)
 8001428:	2200      	movs	r2, #0
 800142a:	659a      	str	r2, [r3, #88]	; 0x58
			LED_Color_Data[7][2] = 0;
 800142c:	4b10      	ldr	r3, [pc, #64]	; (8001470 <main+0x368>)
 800142e:	2200      	movs	r2, #0
 8001430:	65da      	str	r2, [r3, #92]	; 0x5c
			setLEDs();
 8001432:	f7ff fab5 	bl	80009a0 <setLEDs>
 8001436:	e03a      	b.n	80014ae <main+0x3a6>
 8001438:	d2f1a9fc 	.word	0xd2f1a9fc
 800143c:	3f50624d 	.word	0x3f50624d
 8001440:	080180a0 	.word	0x080180a0
 8001444:	3ff00000 	.word	0x3ff00000
 8001448:	43fa0000 	.word	0x43fa0000
 800144c:	58020c00 	.word	0x58020c00
 8001450:	58021800 	.word	0x58021800
 8001454:	24001078 	.word	0x24001078
 8001458:	42b40000 	.word	0x42b40000
 800145c:	43340000 	.word	0x43340000
 8001460:	00000000 	.word	0x00000000
 8001464:	42340000 	.word	0x42340000
 8001468:	33bca100 	.word	0x33bca100
 800146c:	447a0000 	.word	0x447a0000
 8001470:	24000a60 	.word	0x24000a60
 8001474:	58020000 	.word	0x58020000
 8001478:	58020400 	.word	0x58020400
 800147c:	58021400 	.word	0x58021400
 8001480:	58021000 	.word	0x58021000
		}else{

			HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 1);
 8001484:	2201      	movs	r2, #1
 8001486:	2102      	movs	r1, #2
 8001488:	48d6      	ldr	r0, [pc, #856]	; (80017e4 <main+0x6dc>)
 800148a:	f006 fc75 	bl	8007d78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 1);
 800148e:	2201      	movs	r2, #1
 8001490:	2104      	movs	r1, #4
 8001492:	48d4      	ldr	r0, [pc, #848]	; (80017e4 <main+0x6dc>)
 8001494:	f006 fc70 	bl	8007d78 <HAL_GPIO_WritePin>


			LED_Color_Data[7][0] = 0;
 8001498:	4bd3      	ldr	r3, [pc, #844]	; (80017e8 <main+0x6e0>)
 800149a:	2200      	movs	r2, #0
 800149c:	655a      	str	r2, [r3, #84]	; 0x54
			LED_Color_Data[7][1] = 255;
 800149e:	4bd2      	ldr	r3, [pc, #840]	; (80017e8 <main+0x6e0>)
 80014a0:	22ff      	movs	r2, #255	; 0xff
 80014a2:	659a      	str	r2, [r3, #88]	; 0x58
			LED_Color_Data[7][2] = 0;
 80014a4:	4bd0      	ldr	r3, [pc, #832]	; (80017e8 <main+0x6e0>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	65da      	str	r2, [r3, #92]	; 0x5c
			setLEDs();
 80014aa:	f7ff fa79 	bl	80009a0 <setLEDs>
		}

		int packet_lenght = LoRA_parsePacket();
 80014ae:	f7ff fdc0 	bl	8001032 <LoRA_parsePacket>
 80014b2:	f8c7 035c 	str.w	r0, [r7, #860]	; 0x35c
		char LoRA_data[50];
		if(packet_lenght){
 80014b6:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f43f af3d 	beq.w	800133a <main+0x232>


			connected = 1;
 80014c0:	2301      	movs	r3, #1
 80014c2:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
			last_packet = HAL_GetTick();
 80014c6:	f002 f997 	bl	80037f8 <HAL_GetTick>
 80014ca:	4603      	mov	r3, r0
 80014cc:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
			for(int i = 0; i < packet_lenght; i++){
 80014d0:	2300      	movs	r3, #0
 80014d2:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 80014d6:	e012      	b.n	80014fe <main+0x3f6>
				LoRA_data[i] = LoRA_Read_Register(0x00);
 80014d8:	2000      	movs	r0, #0
 80014da:	f7ff fc19 	bl	8000d10 <LoRA_Read_Register>
 80014de:	4603      	mov	r3, r0
 80014e0:	4619      	mov	r1, r3
 80014e2:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80014e6:	f5a3 7270 	sub.w	r2, r3, #960	; 0x3c0
 80014ea:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 80014ee:	4413      	add	r3, r2
 80014f0:	460a      	mov	r2, r1
 80014f2:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < packet_lenght; i++){
 80014f4:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 80014f8:	3301      	adds	r3, #1
 80014fa:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 80014fe:	f8d7 239c 	ldr.w	r2, [r7, #924]	; 0x39c
 8001502:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8001506:	429a      	cmp	r2, r3
 8001508:	dbe6      	blt.n	80014d8 <main+0x3d0>
			}
			LoRA_data[packet_lenght] = '\0';
 800150a:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 800150e:	f5a3 7270 	sub.w	r2, r3, #960	; 0x3c0
 8001512:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8001516:	4413      	add	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
		    //sprintf( data_gyro,  "%d   %d\n", strlen(LoRA_data), packet_lenght);
		    //CDC_Transmit_HS(data_gyro, strlen(data_gyro));

			//CDC_Transmit_HS(LoRA_data, packet_lenght);

		    if(strcmp(LoRA_data, "ARM") == 0){
 800151c:	463b      	mov	r3, r7
 800151e:	49b3      	ldr	r1, [pc, #716]	; (80017ec <main+0x6e4>)
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe fef5 	bl	8000310 <strcmp>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d107      	bne.n	800153c <main+0x434>
		    	ARMED = 1;
 800152c:	2301      	movs	r3, #1
 800152e:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
		    	setLEDs();
 8001532:	f7ff fa35 	bl	80009a0 <setLEDs>
		    	LoRA_sendPacket("ARM SUCCESS");
 8001536:	48ae      	ldr	r0, [pc, #696]	; (80017f0 <main+0x6e8>)
 8001538:	f7ff fdba 	bl	80010b0 <LoRA_sendPacket>
		    }
		    if(strcmp(LoRA_data, "DISARM") == 0){
 800153c:	463b      	mov	r3, r7
 800153e:	49ad      	ldr	r1, [pc, #692]	; (80017f4 <main+0x6ec>)
 8001540:	4618      	mov	r0, r3
 8001542:	f7fe fee5 	bl	8000310 <strcmp>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d105      	bne.n	8001558 <main+0x450>
		    	ARMED = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
		    	LoRA_sendPacket("DISARM SUCCESS");
 8001552:	48a9      	ldr	r0, [pc, #676]	; (80017f8 <main+0x6f0>)
 8001554:	f7ff fdac 	bl	80010b0 <LoRA_sendPacket>
		    }
		    if(strcmp(LoRA_data, "CONT") == 0){
 8001558:	463b      	mov	r3, r7
 800155a:	49a8      	ldr	r1, [pc, #672]	; (80017fc <main+0x6f4>)
 800155c:	4618      	mov	r0, r3
 800155e:	f7fe fed7 	bl	8000310 <strcmp>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	f040 808f 	bne.w	8001688 <main+0x580>

		    	char cont_str[150];
		    	uint8_t CONTS[8];
		    	CONTS[0] = HAL_GPIO_ReadPin(CONT1_GPIO_Port, CONT1_Pin);
 800156a:	2104      	movs	r1, #4
 800156c:	48a4      	ldr	r0, [pc, #656]	; (8001800 <main+0x6f8>)
 800156e:	f006 fbeb 	bl	8007d48 <HAL_GPIO_ReadPin>
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 800157a:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 800157e:	701a      	strb	r2, [r3, #0]
		    	CONTS[1] = HAL_GPIO_ReadPin(CONT2_GPIO_Port, CONT2_Pin);
 8001580:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001584:	489f      	ldr	r0, [pc, #636]	; (8001804 <main+0x6fc>)
 8001586:	f006 fbdf 	bl	8007d48 <HAL_GPIO_ReadPin>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8001592:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8001596:	705a      	strb	r2, [r3, #1]
		    	CONTS[2] = HAL_GPIO_ReadPin(CONT3_GPIO_Port, CONT3_Pin);
 8001598:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800159c:	4899      	ldr	r0, [pc, #612]	; (8001804 <main+0x6fc>)
 800159e:	f006 fbd3 	bl	8007d48 <HAL_GPIO_ReadPin>
 80015a2:	4603      	mov	r3, r0
 80015a4:	461a      	mov	r2, r3
 80015a6:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80015aa:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 80015ae:	709a      	strb	r2, [r3, #2]
		    	CONTS[3] = HAL_GPIO_ReadPin(CONT4_GPIO_Port, CONT4_Pin);
 80015b0:	2101      	movs	r1, #1
 80015b2:	4895      	ldr	r0, [pc, #596]	; (8001808 <main+0x700>)
 80015b4:	f006 fbc8 	bl	8007d48 <HAL_GPIO_ReadPin>
 80015b8:	4603      	mov	r3, r0
 80015ba:	461a      	mov	r2, r3
 80015bc:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80015c0:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 80015c4:	70da      	strb	r2, [r3, #3]
		    	CONTS[4] = HAL_GPIO_ReadPin(CONT5_GPIO_Port, CONT5_Pin);
 80015c6:	2180      	movs	r1, #128	; 0x80
 80015c8:	4890      	ldr	r0, [pc, #576]	; (800180c <main+0x704>)
 80015ca:	f006 fbbd 	bl	8007d48 <HAL_GPIO_ReadPin>
 80015ce:	4603      	mov	r3, r0
 80015d0:	461a      	mov	r2, r3
 80015d2:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80015d6:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 80015da:	711a      	strb	r2, [r3, #4]
		    	CONTS[5] = HAL_GPIO_ReadPin(CONT6_GPIO_Port, CONT6_Pin);
 80015dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015e0:	488a      	ldr	r0, [pc, #552]	; (800180c <main+0x704>)
 80015e2:	f006 fbb1 	bl	8007d48 <HAL_GPIO_ReadPin>
 80015e6:	4603      	mov	r3, r0
 80015e8:	461a      	mov	r2, r3
 80015ea:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80015ee:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 80015f2:	715a      	strb	r2, [r3, #5]
		    	CONTS[6] = HAL_GPIO_ReadPin(CONT7_GPIO_Port, CONT7_Pin);
 80015f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015f8:	4884      	ldr	r0, [pc, #528]	; (800180c <main+0x704>)
 80015fa:	f006 fba5 	bl	8007d48 <HAL_GPIO_ReadPin>
 80015fe:	4603      	mov	r3, r0
 8001600:	461a      	mov	r2, r3
 8001602:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8001606:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 800160a:	719a      	strb	r2, [r3, #6]
		    	CONTS[7] = HAL_GPIO_ReadPin(CONT8_GPIO_Port, CONT8_Pin);
 800160c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001610:	487e      	ldr	r0, [pc, #504]	; (800180c <main+0x704>)
 8001612:	f006 fb99 	bl	8007d48 <HAL_GPIO_ReadPin>
 8001616:	4603      	mov	r3, r0
 8001618:	461a      	mov	r2, r3
 800161a:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 800161e:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8001622:	71da      	strb	r2, [r3, #7]

	    		char message[100];
		    	for(int i=0; i<8; i++)
 8001624:	2300      	movs	r3, #0
 8001626:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 800162a:	e029      	b.n	8001680 <main+0x578>
		    	{
		    		if(CONTS[i])
 800162c:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8001630:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 8001634:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 8001638:	4413      	add	r3, r2
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d009      	beq.n	8001654 <main+0x54c>
		    		{
		    			sprintf( message,  "PYRO %d DOESN'T HAVE CONTINUITY", i+1);
 8001640:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800164a:	4971      	ldr	r1, [pc, #452]	; (8001810 <main+0x708>)
 800164c:	4618      	mov	r0, r3
 800164e:	f015 fb93 	bl	8016d78 <siprintf>
 8001652:	e008      	b.n	8001666 <main+0x55e>
		    		}
		    		else
		    		{
		    			sprintf( message,  "PYRO %d HAS CONTINUITY", i+1);
 8001654:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 8001658:	1c5a      	adds	r2, r3, #1
 800165a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800165e:	496d      	ldr	r1, [pc, #436]	; (8001814 <main+0x70c>)
 8001660:	4618      	mov	r0, r3
 8001662:	f015 fb89 	bl	8016d78 <siprintf>
		    		}

		    		LoRA_sendPacket(message);
 8001666:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fd20 	bl	80010b0 <LoRA_sendPacket>
		    		HAL_Delay(100);
 8001670:	2064      	movs	r0, #100	; 0x64
 8001672:	f002 f8cd 	bl	8003810 <HAL_Delay>
		    	for(int i=0; i<8; i++)
 8001676:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 800167a:	3301      	adds	r3, #1
 800167c:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 8001680:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 8001684:	2b07      	cmp	r3, #7
 8001686:	ddd1      	ble.n	800162c <main+0x524>


		    }
        

        if(strcmp(LoRA_data, "STATIC_FIRE") == 0)
 8001688:	463b      	mov	r3, r7
 800168a:	4963      	ldr	r1, [pc, #396]	; (8001818 <main+0x710>)
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe fe3f 	bl	8000310 <strcmp>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d15c      	bne.n	8001752 <main+0x64a>
        {
          if(ARMED)
 8001698:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d058      	beq.n	8001752 <main+0x64a>
          {
            LoRA_sendPacket("PYRO 1 FIRED");
 80016a0:	485e      	ldr	r0, [pc, #376]	; (800181c <main+0x714>)
 80016a2:	f7ff fd05 	bl	80010b0 <LoRA_sendPacket>
            //HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 1);
            char LoRA_data[50];
            int logging = 1;
 80016a6:	2301      	movs	r3, #1
 80016a8:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
            while(logging)
 80016ac:	e04d      	b.n	800174a <main+0x642>
            {
            	int packet_lenght;
            	long startTime = HAL_GetTick();
 80016ae:	f002 f8a3 	bl	80037f8 <HAL_GetTick>
 80016b2:	4603      	mov	r3, r0
 80016b4:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
            	while( HAL_GetTick() - startTime < 10){
 80016b8:	e006      	b.n	80016c8 <main+0x5c0>
            		packet_lenght = LoRA_parsePacket();
 80016ba:	f7ff fcba 	bl	8001032 <LoRA_parsePacket>
 80016be:	f8c7 0390 	str.w	r0, [r7, #912]	; 0x390
                	HAL_Delay(0.1);
 80016c2:	2000      	movs	r0, #0
 80016c4:	f002 f8a4 	bl	8003810 <HAL_Delay>
            	while( HAL_GetTick() - startTime < 10){
 80016c8:	f002 f896 	bl	80037f8 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b09      	cmp	r3, #9
 80016d6:	d9f0      	bls.n	80016ba <main+0x5b2>
            }
              if(packet_lenght)
 80016d8:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d031      	beq.n	8001744 <main+0x63c>
              {
                //flush data from buffer
                //last_packet = HAL_GetTick();
                for(int i = 0; i < packet_lenght; i++){
 80016e0:	2300      	movs	r3, #0
 80016e2:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 80016e6:	e012      	b.n	800170e <main+0x606>
                  LoRA_data[i] = LoRA_Read_Register(0x00);
 80016e8:	2000      	movs	r0, #0
 80016ea:	f7ff fb11 	bl	8000d10 <LoRA_Read_Register>
 80016ee:	4603      	mov	r3, r0
 80016f0:	4619      	mov	r1, r3
 80016f2:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80016f6:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 80016fa:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 80016fe:	4413      	add	r3, r2
 8001700:	460a      	mov	r2, r1
 8001702:	701a      	strb	r2, [r3, #0]
                for(int i = 0; i < packet_lenght; i++){
 8001704:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8001708:	3301      	adds	r3, #1
 800170a:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 800170e:	f8d7 238c 	ldr.w	r2, [r7, #908]	; 0x38c
 8001712:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8001716:	429a      	cmp	r2, r3
 8001718:	dbe6      	blt.n	80016e8 <main+0x5e0>
                }
                LoRA_data[packet_lenght] = '\0';
 800171a:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 800171e:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 8001722:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8001726:	4413      	add	r3, r2
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
                if(strcmp(LoRA_data, "STOP") == 0)
 800172c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001730:	493b      	ldr	r1, [pc, #236]	; (8001820 <main+0x718>)
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe fdec 	bl	8000310 <strcmp>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d102      	bne.n	8001744 <main+0x63c>
                {
                  logging=0;
 800173e:	2300      	movs	r3, #0
 8001740:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
                }
              }
              LoRA_sendPacket("Fake data: 21231, 99999");
 8001744:	4837      	ldr	r0, [pc, #220]	; (8001824 <main+0x71c>)
 8001746:	f7ff fcb3 	bl	80010b0 <LoRA_sendPacket>
            while(logging)
 800174a:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1ad      	bne.n	80016ae <main+0x5a6>
        }


		    int channel_num;
		    char fire_data[50];
		    sscanf(LoRA_data, "%s %d", fire_data, &channel_num);
 8001752:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001756:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800175a:	4638      	mov	r0, r7
 800175c:	4932      	ldr	r1, [pc, #200]	; (8001828 <main+0x720>)
 800175e:	f015 fb2b 	bl	8016db8 <siscanf>
		    if(strcmp(fire_data, "FIRE") == 0){
 8001762:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001766:	4931      	ldr	r1, [pc, #196]	; (800182c <main+0x724>)
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe fdd1 	bl	8000310 <strcmp>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	f47f ade2 	bne.w	800133a <main+0x232>
		    	if(ARMED){
 8001776:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d07a      	beq.n	8001874 <main+0x76c>
					switch (channel_num) {
 800177e:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8001782:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	3b01      	subs	r3, #1
 800178a:	2b07      	cmp	r3, #7
 800178c:	d876      	bhi.n	800187c <main+0x774>
 800178e:	a201      	add	r2, pc, #4	; (adr r2, 8001794 <main+0x68c>)
 8001790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001794:	080017b5 	.word	0x080017b5
 8001798:	080017c7 	.word	0x080017c7
 800179c:	080017d5 	.word	0x080017d5
 80017a0:	08001831 	.word	0x08001831
 80017a4:	0800183f 	.word	0x0800183f
 80017a8:	0800184b 	.word	0x0800184b
 80017ac:	08001859 	.word	0x08001859
 80017b0:	08001867 	.word	0x08001867
						case 1:
				    		LoRA_sendPacket("PYRO 1 FIRED");
 80017b4:	4819      	ldr	r0, [pc, #100]	; (800181c <main+0x714>)
 80017b6:	f7ff fc7b 	bl	80010b0 <LoRA_sendPacket>

							HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 1);
 80017ba:	2201      	movs	r2, #1
 80017bc:	2102      	movs	r1, #2
 80017be:	4810      	ldr	r0, [pc, #64]	; (8001800 <main+0x6f8>)
 80017c0:	f006 fada 	bl	8007d78 <HAL_GPIO_WritePin>
							break;
 80017c4:	e05b      	b.n	800187e <main+0x776>
						case 2:
							HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 1);
 80017c6:	2201      	movs	r2, #1
 80017c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017cc:	480d      	ldr	r0, [pc, #52]	; (8001804 <main+0x6fc>)
 80017ce:	f006 fad3 	bl	8007d78 <HAL_GPIO_WritePin>
							break;
 80017d2:	e054      	b.n	800187e <main+0x776>
						case 3:
							HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 1);
 80017d4:	2201      	movs	r2, #1
 80017d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017da:	480a      	ldr	r0, [pc, #40]	; (8001804 <main+0x6fc>)
 80017dc:	f006 facc 	bl	8007d78 <HAL_GPIO_WritePin>
							break;
 80017e0:	e04d      	b.n	800187e <main+0x776>
 80017e2:	bf00      	nop
 80017e4:	58020000 	.word	0x58020000
 80017e8:	24000a60 	.word	0x24000a60
 80017ec:	08017fcc 	.word	0x08017fcc
 80017f0:	08017fd0 	.word	0x08017fd0
 80017f4:	08017fdc 	.word	0x08017fdc
 80017f8:	08017fe4 	.word	0x08017fe4
 80017fc:	08017ff4 	.word	0x08017ff4
 8001800:	58020400 	.word	0x58020400
 8001804:	58021400 	.word	0x58021400
 8001808:	58021800 	.word	0x58021800
 800180c:	58021000 	.word	0x58021000
 8001810:	08017ffc 	.word	0x08017ffc
 8001814:	0801801c 	.word	0x0801801c
 8001818:	08018034 	.word	0x08018034
 800181c:	08018040 	.word	0x08018040
 8001820:	08018050 	.word	0x08018050
 8001824:	08018058 	.word	0x08018058
 8001828:	08018070 	.word	0x08018070
 800182c:	08018078 	.word	0x08018078
						case 4:
							HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 1);
 8001830:	2201      	movs	r2, #1
 8001832:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001836:	4812      	ldr	r0, [pc, #72]	; (8001880 <main+0x778>)
 8001838:	f006 fa9e 	bl	8007d78 <HAL_GPIO_WritePin>
							break;
 800183c:	e01f      	b.n	800187e <main+0x776>

						case 5:
							HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 1);
 800183e:	2201      	movs	r2, #1
 8001840:	2102      	movs	r1, #2
 8001842:	4810      	ldr	r0, [pc, #64]	; (8001884 <main+0x77c>)
 8001844:	f006 fa98 	bl	8007d78 <HAL_GPIO_WritePin>
							break;
 8001848:	e019      	b.n	800187e <main+0x776>
						case 6:
							HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 1);
 800184a:	2201      	movs	r2, #1
 800184c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001850:	480d      	ldr	r0, [pc, #52]	; (8001888 <main+0x780>)
 8001852:	f006 fa91 	bl	8007d78 <HAL_GPIO_WritePin>
							break;
 8001856:	e012      	b.n	800187e <main+0x776>
						case 7:
							HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 1);
 8001858:	2201      	movs	r2, #1
 800185a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800185e:	480a      	ldr	r0, [pc, #40]	; (8001888 <main+0x780>)
 8001860:	f006 fa8a 	bl	8007d78 <HAL_GPIO_WritePin>
							break;
 8001864:	e00b      	b.n	800187e <main+0x776>
						case 8:
							HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 1);
 8001866:	2201      	movs	r2, #1
 8001868:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800186c:	4806      	ldr	r0, [pc, #24]	; (8001888 <main+0x780>)
 800186e:	f006 fa83 	bl	8007d78 <HAL_GPIO_WritePin>
							break;
 8001872:	e004      	b.n	800187e <main+0x776>
						default:
							break;
					}
		    	}else{
		    		LoRA_sendPacket("CANNOT FIRE, BOARD NOT ARMED");
 8001874:	4805      	ldr	r0, [pc, #20]	; (800188c <main+0x784>)
 8001876:	f7ff fc1b 	bl	80010b0 <LoRA_sendPacket>
 800187a:	e55e      	b.n	800133a <main+0x232>
							break;
 800187c:	bf00      	nop
	while (1) {
 800187e:	e55c      	b.n	800133a <main+0x232>
 8001880:	58021400 	.word	0x58021400
 8001884:	58021800 	.word	0x58021800
 8001888:	58021000 	.word	0x58021000
 800188c:	08018080 	.word	0x08018080

08001890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b09c      	sub	sp, #112	; 0x70
 8001894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189a:	224c      	movs	r2, #76	; 0x4c
 800189c:	2100      	movs	r1, #0
 800189e:	4618      	mov	r0, r3
 80018a0:	f015 fa62 	bl	8016d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	2220      	movs	r2, #32
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f015 fa5c 	bl	8016d68 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80018b0:	2002      	movs	r0, #2
 80018b2:	f007 fe5b 	bl	800956c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80018b6:	2300      	movs	r3, #0
 80018b8:	603b      	str	r3, [r7, #0]
 80018ba:	4b32      	ldr	r3, [pc, #200]	; (8001984 <SystemClock_Config+0xf4>)
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018c2:	4a30      	ldr	r2, [pc, #192]	; (8001984 <SystemClock_Config+0xf4>)
 80018c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018c8:	6193      	str	r3, [r2, #24]
 80018ca:	4b2e      	ldr	r3, [pc, #184]	; (8001984 <SystemClock_Config+0xf4>)
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80018d6:	bf00      	nop
 80018d8:	4b2a      	ldr	r3, [pc, #168]	; (8001984 <SystemClock_Config+0xf4>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018e4:	d1f8      	bne.n	80018d8 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80018e6:	2323      	movs	r3, #35	; 0x23
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80018f0:	2301      	movs	r3, #1
 80018f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80018f4:	2340      	movs	r3, #64	; 0x40
 80018f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80018f8:	2301      	movs	r3, #1
 80018fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018fc:	2302      	movs	r3, #2
 80018fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001900:	2300      	movs	r3, #0
 8001902:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001904:	2304      	movs	r3, #4
 8001906:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001908:	230c      	movs	r3, #12
 800190a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800190c:	2301      	movs	r3, #1
 800190e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8001910:	230c      	movs	r3, #12
 8001912:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001914:	2302      	movs	r3, #2
 8001916:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001918:	230c      	movs	r3, #12
 800191a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800191c:	2300      	movs	r3, #0
 800191e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001928:	4618      	mov	r0, r3
 800192a:	f007 fe69 	bl	8009600 <HAL_RCC_OscConfig>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001934:	f000 ff02 	bl	800273c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001938:	233f      	movs	r3, #63	; 0x3f
 800193a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800193c:	2303      	movs	r3, #3
 800193e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001944:	2308      	movs	r3, #8
 8001946:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001948:	2340      	movs	r3, #64	; 0x40
 800194a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800194c:	2340      	movs	r3, #64	; 0x40
 800194e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001954:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001956:	2340      	movs	r3, #64	; 0x40
 8001958:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	2101      	movs	r1, #1
 800195e:	4618      	mov	r0, r3
 8001960:	f008 fa28 	bl	8009db4 <HAL_RCC_ClockConfig>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <SystemClock_Config+0xde>
  {
    Error_Handler();
 800196a:	f000 fee7 	bl	800273c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800196e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001972:	2100      	movs	r1, #0
 8001974:	2000      	movs	r0, #0
 8001976:	f008 fbd3 	bl	800a120 <HAL_RCC_MCOConfig>
}
 800197a:	bf00      	nop
 800197c:	3770      	adds	r7, #112	; 0x70
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	58024800 	.word	0x58024800

08001988 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b0ae      	sub	sp, #184	; 0xb8
 800198c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800198e:	463b      	mov	r3, r7
 8001990:	22b8      	movs	r2, #184	; 0xb8
 8001992:	2100      	movs	r1, #0
 8001994:	4618      	mov	r0, r3
 8001996:	f015 f9e7 	bl	8016d68 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 800199a:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80019a6:	2304      	movs	r3, #4
 80019a8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80019aa:	230c      	movs	r3, #12
 80019ac:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 80019ae:	2304      	movs	r3, #4
 80019b0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80019b2:	2302      	movs	r3, #2
 80019b4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80019b6:	2302      	movs	r3, #2
 80019b8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80019ba:	23c0      	movs	r3, #192	; 0xc0
 80019bc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80019be:	2300      	movs	r3, #0
 80019c0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80019c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019d2:	463b      	mov	r3, r7
 80019d4:	4618      	mov	r0, r3
 80019d6:	f008 fde3 	bl	800a5a0 <HAL_RCCEx_PeriphCLKConfig>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80019e0:	f000 feac 	bl	800273c <Error_Handler>
  }
}
 80019e4:	bf00      	nop
 80019e6:	37b8      	adds	r7, #184	; 0xb8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08c      	sub	sp, #48	; 0x30
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80019f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80019fe:	463b      	mov	r3, r7
 8001a00:	2224      	movs	r2, #36	; 0x24
 8001a02:	2100      	movs	r1, #0
 8001a04:	4618      	mov	r0, r3
 8001a06:	f015 f9af 	bl	8016d68 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a0a:	4b31      	ldr	r3, [pc, #196]	; (8001ad0 <MX_ADC1_Init+0xe4>)
 8001a0c:	4a31      	ldr	r2, [pc, #196]	; (8001ad4 <MX_ADC1_Init+0xe8>)
 8001a0e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001a10:	4b2f      	ldr	r3, [pc, #188]	; (8001ad0 <MX_ADC1_Init+0xe4>)
 8001a12:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001a16:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001a18:	4b2d      	ldr	r3, [pc, #180]	; (8001ad0 <MX_ADC1_Init+0xe4>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a1e:	4b2c      	ldr	r3, [pc, #176]	; (8001ad0 <MX_ADC1_Init+0xe4>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a24:	4b2a      	ldr	r3, [pc, #168]	; (8001ad0 <MX_ADC1_Init+0xe4>)
 8001a26:	2204      	movs	r2, #4
 8001a28:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a2a:	4b29      	ldr	r3, [pc, #164]	; (8001ad0 <MX_ADC1_Init+0xe4>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a30:	4b27      	ldr	r3, [pc, #156]	; (8001ad0 <MX_ADC1_Init+0xe4>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001a36:	4b26      	ldr	r3, [pc, #152]	; (8001ad0 <MX_ADC1_Init+0xe4>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a3c:	4b24      	ldr	r3, [pc, #144]	; (8001ad0 <MX_ADC1_Init+0xe4>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a44:	4b22      	ldr	r3, [pc, #136]	; (8001ad0 <MX_ADC1_Init+0xe4>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a4a:	4b21      	ldr	r3, [pc, #132]	; (8001ad0 <MX_ADC1_Init+0xe4>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001a50:	4b1f      	ldr	r3, [pc, #124]	; (8001ad0 <MX_ADC1_Init+0xe4>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a56:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <MX_ADC1_Init+0xe4>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001a5c:	4b1c      	ldr	r3, [pc, #112]	; (8001ad0 <MX_ADC1_Init+0xe4>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001a62:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <MX_ADC1_Init+0xe4>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a6a:	4819      	ldr	r0, [pc, #100]	; (8001ad0 <MX_ADC1_Init+0xe4>)
 8001a6c:	f002 f950 	bl	8003d10 <HAL_ADC_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001a76:	f000 fe61 	bl	800273c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a82:	4619      	mov	r1, r3
 8001a84:	4812      	ldr	r0, [pc, #72]	; (8001ad0 <MX_ADC1_Init+0xe4>)
 8001a86:	f003 f98b 	bl	8004da0 <HAL_ADCEx_MultiModeConfigChannel>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001a90:	f000 fe54 	bl	800273c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001a94:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <MX_ADC1_Init+0xec>)
 8001a96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a98:	2306      	movs	r3, #6
 8001a9a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001aa0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001aa4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001aa6:	2304      	movs	r3, #4
 8001aa8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ab4:	463b      	mov	r3, r7
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <MX_ADC1_Init+0xe4>)
 8001aba:	f002 fb31 	bl	8004120 <HAL_ADC_ConfigChannel>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001ac4:	f000 fe3a 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ac8:	bf00      	nop
 8001aca:	3730      	adds	r7, #48	; 0x30
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	24000b08 	.word	0x24000b08
 8001ad4:	40022000 	.word	0x40022000
 8001ad8:	2a000400 	.word	0x2a000400

08001adc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	; 0x28
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	2224      	movs	r2, #36	; 0x24
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f015 f93d 	bl	8016d68 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001aee:	4b2f      	ldr	r3, [pc, #188]	; (8001bac <MX_ADC3_Init+0xd0>)
 8001af0:	4a2f      	ldr	r2, [pc, #188]	; (8001bb0 <MX_ADC3_Init+0xd4>)
 8001af2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001af4:	4b2d      	ldr	r3, [pc, #180]	; (8001bac <MX_ADC3_Init+0xd0>)
 8001af6:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001afa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001afc:	4b2b      	ldr	r3, [pc, #172]	; (8001bac <MX_ADC3_Init+0xd0>)
 8001afe:	2208      	movs	r2, #8
 8001b00:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001b02:	4b2a      	ldr	r3, [pc, #168]	; (8001bac <MX_ADC3_Init+0xd0>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b08:	4b28      	ldr	r3, [pc, #160]	; (8001bac <MX_ADC3_Init+0xd0>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b0e:	4b27      	ldr	r3, [pc, #156]	; (8001bac <MX_ADC3_Init+0xd0>)
 8001b10:	2204      	movs	r2, #4
 8001b12:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001b14:	4b25      	ldr	r3, [pc, #148]	; (8001bac <MX_ADC3_Init+0xd0>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001b1a:	4b24      	ldr	r3, [pc, #144]	; (8001bac <MX_ADC3_Init+0xd0>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001b20:	4b22      	ldr	r3, [pc, #136]	; (8001bac <MX_ADC3_Init+0xd0>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001b26:	4b21      	ldr	r3, [pc, #132]	; (8001bac <MX_ADC3_Init+0xd0>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b2e:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <MX_ADC3_Init+0xd0>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b34:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <MX_ADC3_Init+0xd0>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <MX_ADC3_Init+0xd0>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001b42:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <MX_ADC3_Init+0xd0>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001b48:	4b18      	ldr	r3, [pc, #96]	; (8001bac <MX_ADC3_Init+0xd0>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b4e:	4b17      	ldr	r3, [pc, #92]	; (8001bac <MX_ADC3_Init+0xd0>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001b54:	4b15      	ldr	r3, [pc, #84]	; (8001bac <MX_ADC3_Init+0xd0>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001b5a:	4b14      	ldr	r3, [pc, #80]	; (8001bac <MX_ADC3_Init+0xd0>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001b62:	4812      	ldr	r0, [pc, #72]	; (8001bac <MX_ADC3_Init+0xd0>)
 8001b64:	f002 f8d4 	bl	8003d10 <HAL_ADC_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001b6e:	f000 fde5 	bl	800273c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <MX_ADC3_Init+0xd8>)
 8001b74:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b76:	2306      	movs	r3, #6
 8001b78:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b7e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001b82:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b84:	2304      	movs	r3, #4
 8001b86:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	4619      	mov	r1, r3
 8001b94:	4805      	ldr	r0, [pc, #20]	; (8001bac <MX_ADC3_Init+0xd0>)
 8001b96:	f002 fac3 	bl	8004120 <HAL_ADC_ConfigChannel>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001ba0:	f000 fdcc 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001ba4:	bf00      	nop
 8001ba6:	3728      	adds	r7, #40	; 0x28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	24000b78 	.word	0x24000b78
 8001bb0:	58026000 	.word	0x58026000
 8001bb4:	04300002 	.word	0x04300002

08001bb8 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001bbc:	4b2e      	ldr	r3, [pc, #184]	; (8001c78 <MX_FDCAN3_Init+0xc0>)
 8001bbe:	4a2f      	ldr	r2, [pc, #188]	; (8001c7c <MX_FDCAN3_Init+0xc4>)
 8001bc0:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001bc2:	4b2d      	ldr	r3, [pc, #180]	; (8001c78 <MX_FDCAN3_Init+0xc0>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001bc8:	4b2b      	ldr	r3, [pc, #172]	; (8001c78 <MX_FDCAN3_Init+0xc0>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001bce:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <MX_FDCAN3_Init+0xc0>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001bd4:	4b28      	ldr	r3, [pc, #160]	; (8001c78 <MX_FDCAN3_Init+0xc0>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001bda:	4b27      	ldr	r3, [pc, #156]	; (8001c78 <MX_FDCAN3_Init+0xc0>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8001be0:	4b25      	ldr	r3, [pc, #148]	; (8001c78 <MX_FDCAN3_Init+0xc0>)
 8001be2:	2210      	movs	r2, #16
 8001be4:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001be6:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <MX_FDCAN3_Init+0xc0>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001bec:	4b22      	ldr	r3, [pc, #136]	; (8001c78 <MX_FDCAN3_Init+0xc0>)
 8001bee:	2202      	movs	r2, #2
 8001bf0:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8001bf2:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <MX_FDCAN3_Init+0xc0>)
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001bf8:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <MX_FDCAN3_Init+0xc0>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <MX_FDCAN3_Init+0xc0>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001c04:	4b1c      	ldr	r3, [pc, #112]	; (8001c78 <MX_FDCAN3_Init+0xc0>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001c0a:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <MX_FDCAN3_Init+0xc0>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <MX_FDCAN3_Init+0xc0>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <MX_FDCAN3_Init+0xc0>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001c1c:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <MX_FDCAN3_Init+0xc0>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <MX_FDCAN3_Init+0xc0>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001c28:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <MX_FDCAN3_Init+0xc0>)
 8001c2a:	2204      	movs	r2, #4
 8001c2c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001c2e:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <MX_FDCAN3_Init+0xc0>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001c34:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <MX_FDCAN3_Init+0xc0>)
 8001c36:	2204      	movs	r2, #4
 8001c38:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001c3a:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <MX_FDCAN3_Init+0xc0>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001c40:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <MX_FDCAN3_Init+0xc0>)
 8001c42:	2204      	movs	r2, #4
 8001c44:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001c46:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <MX_FDCAN3_Init+0xc0>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <MX_FDCAN3_Init+0xc0>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <MX_FDCAN3_Init+0xc0>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001c58:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <MX_FDCAN3_Init+0xc0>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001c5e:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <MX_FDCAN3_Init+0xc0>)
 8001c60:	2204      	movs	r2, #4
 8001c62:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001c64:	4804      	ldr	r0, [pc, #16]	; (8001c78 <MX_FDCAN3_Init+0xc0>)
 8001c66:	f005 fb63 	bl	8007330 <HAL_FDCAN_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001c70:	f000 fd64 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	24000cd8 	.word	0x24000cd8
 8001c7c:	4000d400 	.word	0x4000d400

08001c80 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c84:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <MX_I2C2_Init+0x74>)
 8001c86:	4a1c      	ldr	r2, [pc, #112]	; (8001cf8 <MX_I2C2_Init+0x78>)
 8001c88:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <MX_I2C2_Init+0x74>)
 8001c8c:	4a1b      	ldr	r2, [pc, #108]	; (8001cfc <MX_I2C2_Init+0x7c>)
 8001c8e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001c90:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <MX_I2C2_Init+0x74>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c96:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <MX_I2C2_Init+0x74>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c9c:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <MX_I2C2_Init+0x74>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001ca2:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <MX_I2C2_Init+0x74>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ca8:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <MX_I2C2_Init+0x74>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cae:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <MX_I2C2_Init+0x74>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cb4:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <MX_I2C2_Init+0x74>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001cba:	480e      	ldr	r0, [pc, #56]	; (8001cf4 <MX_I2C2_Init+0x74>)
 8001cbc:	f006 f876 	bl	8007dac <HAL_I2C_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001cc6:	f000 fd39 	bl	800273c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4809      	ldr	r0, [pc, #36]	; (8001cf4 <MX_I2C2_Init+0x74>)
 8001cce:	f006 f8fd 	bl	8007ecc <HAL_I2CEx_ConfigAnalogFilter>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001cd8:	f000 fd30 	bl	800273c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4805      	ldr	r0, [pc, #20]	; (8001cf4 <MX_I2C2_Init+0x74>)
 8001ce0:	f006 f93f 	bl	8007f62 <HAL_I2CEx_ConfigDigitalFilter>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001cea:	f000 fd27 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	24000d78 	.word	0x24000d78
 8001cf8:	40005800 	.word	0x40005800
 8001cfc:	20303e5d 	.word	0x20303e5d

08001d00 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <MX_SDMMC2_SD_Init+0x34>)
 8001d06:	4a0c      	ldr	r2, [pc, #48]	; (8001d38 <MX_SDMMC2_SD_Init+0x38>)
 8001d08:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <MX_SDMMC2_SD_Init+0x34>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001d10:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <MX_SDMMC2_SD_Init+0x34>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001d16:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <MX_SDMMC2_SD_Init+0x34>)
 8001d18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d1c:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001d1e:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <MX_SDMMC2_SD_Init+0x34>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8001d24:	4b03      	ldr	r3, [pc, #12]	; (8001d34 <MX_SDMMC2_SD_Init+0x34>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	24000dcc 	.word	0x24000dcc
 8001d38:	48022400 	.word	0x48022400

08001d3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d40:	4b27      	ldr	r3, [pc, #156]	; (8001de0 <MX_SPI1_Init+0xa4>)
 8001d42:	4a28      	ldr	r2, [pc, #160]	; (8001de4 <MX_SPI1_Init+0xa8>)
 8001d44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d46:	4b26      	ldr	r3, [pc, #152]	; (8001de0 <MX_SPI1_Init+0xa4>)
 8001d48:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001d4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d4e:	4b24      	ldr	r3, [pc, #144]	; (8001de0 <MX_SPI1_Init+0xa4>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d54:	4b22      	ldr	r3, [pc, #136]	; (8001de0 <MX_SPI1_Init+0xa4>)
 8001d56:	2207      	movs	r2, #7
 8001d58:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d5a:	4b21      	ldr	r3, [pc, #132]	; (8001de0 <MX_SPI1_Init+0xa4>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d60:	4b1f      	ldr	r3, [pc, #124]	; (8001de0 <MX_SPI1_Init+0xa4>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d66:	4b1e      	ldr	r3, [pc, #120]	; (8001de0 <MX_SPI1_Init+0xa4>)
 8001d68:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d6c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001d6e:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <MX_SPI1_Init+0xa4>)
 8001d70:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001d74:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d76:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <MX_SPI1_Init+0xa4>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d7c:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <MX_SPI1_Init+0xa4>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d82:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <MX_SPI1_Init+0xa4>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001d88:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <MX_SPI1_Init+0xa4>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d8e:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <MX_SPI1_Init+0xa4>)
 8001d90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d94:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001d96:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <MX_SPI1_Init+0xa4>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001d9c:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <MX_SPI1_Init+0xa4>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001da2:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <MX_SPI1_Init+0xa4>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001da8:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <MX_SPI1_Init+0xa4>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001dae:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <MX_SPI1_Init+0xa4>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001db4:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <MX_SPI1_Init+0xa4>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <MX_SPI1_Init+0xa4>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001dc0:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <MX_SPI1_Init+0xa4>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <MX_SPI1_Init+0xa4>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001dcc:	4804      	ldr	r0, [pc, #16]	; (8001de0 <MX_SPI1_Init+0xa4>)
 8001dce:	f00c fc31 	bl	800e634 <HAL_SPI_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001dd8:	f000 fcb0 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	24000e48 	.word	0x24000e48
 8001de4:	40013000 	.word	0x40013000

08001de8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001dec:	4b27      	ldr	r3, [pc, #156]	; (8001e8c <MX_SPI2_Init+0xa4>)
 8001dee:	4a28      	ldr	r2, [pc, #160]	; (8001e90 <MX_SPI2_Init+0xa8>)
 8001df0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001df2:	4b26      	ldr	r3, [pc, #152]	; (8001e8c <MX_SPI2_Init+0xa4>)
 8001df4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001df8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001dfa:	4b24      	ldr	r3, [pc, #144]	; (8001e8c <MX_SPI2_Init+0xa4>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e00:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <MX_SPI2_Init+0xa4>)
 8001e02:	2207      	movs	r2, #7
 8001e04:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e06:	4b21      	ldr	r3, [pc, #132]	; (8001e8c <MX_SPI2_Init+0xa4>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e0c:	4b1f      	ldr	r3, [pc, #124]	; (8001e8c <MX_SPI2_Init+0xa4>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e12:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <MX_SPI2_Init+0xa4>)
 8001e14:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e18:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001e1a:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <MX_SPI2_Init+0xa4>)
 8001e1c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001e20:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e22:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <MX_SPI2_Init+0xa4>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e28:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <MX_SPI2_Init+0xa4>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e2e:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <MX_SPI2_Init+0xa4>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001e34:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <MX_SPI2_Init+0xa4>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e3a:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <MX_SPI2_Init+0xa4>)
 8001e3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e40:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001e42:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <MX_SPI2_Init+0xa4>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001e48:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <MX_SPI2_Init+0xa4>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e4e:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <MX_SPI2_Init+0xa4>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e54:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <MX_SPI2_Init+0xa4>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <MX_SPI2_Init+0xa4>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001e60:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <MX_SPI2_Init+0xa4>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <MX_SPI2_Init+0xa4>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001e6c:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <MX_SPI2_Init+0xa4>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <MX_SPI2_Init+0xa4>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e78:	4804      	ldr	r0, [pc, #16]	; (8001e8c <MX_SPI2_Init+0xa4>)
 8001e7a:	f00c fbdb 	bl	800e634 <HAL_SPI_Init>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001e84:	f000 fc5a 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	24000ed0 	.word	0x24000ed0
 8001e90:	40003800 	.word	0x40003800

08001e94 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001e98:	4b27      	ldr	r3, [pc, #156]	; (8001f38 <MX_SPI3_Init+0xa4>)
 8001e9a:	4a28      	ldr	r2, [pc, #160]	; (8001f3c <MX_SPI3_Init+0xa8>)
 8001e9c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001e9e:	4b26      	ldr	r3, [pc, #152]	; (8001f38 <MX_SPI3_Init+0xa4>)
 8001ea0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ea4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001ea6:	4b24      	ldr	r3, [pc, #144]	; (8001f38 <MX_SPI3_Init+0xa4>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001eac:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <MX_SPI3_Init+0xa4>)
 8001eae:	2207      	movs	r2, #7
 8001eb0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eb2:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <MX_SPI3_Init+0xa4>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001eb8:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <MX_SPI3_Init+0xa4>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001ebe:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <MX_SPI3_Init+0xa4>)
 8001ec0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ec4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001ec6:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <MX_SPI3_Init+0xa4>)
 8001ec8:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001ecc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ece:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <MX_SPI3_Init+0xa4>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ed4:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <MX_SPI3_Init+0xa4>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eda:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <MX_SPI3_Init+0xa4>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001ee0:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <MX_SPI3_Init+0xa4>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ee6:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <MX_SPI3_Init+0xa4>)
 8001ee8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eec:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001eee:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <MX_SPI3_Init+0xa4>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001ef4:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <MX_SPI3_Init+0xa4>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001efa:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <MX_SPI3_Init+0xa4>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f00:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <MX_SPI3_Init+0xa4>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001f06:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <MX_SPI3_Init+0xa4>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001f0c:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <MX_SPI3_Init+0xa4>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001f12:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <MX_SPI3_Init+0xa4>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001f18:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <MX_SPI3_Init+0xa4>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <MX_SPI3_Init+0xa4>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001f24:	4804      	ldr	r0, [pc, #16]	; (8001f38 <MX_SPI3_Init+0xa4>)
 8001f26:	f00c fb85 	bl	800e634 <HAL_SPI_Init>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8001f30:	f000 fc04 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	24000f58 	.word	0x24000f58
 8001f3c:	40003c00 	.word	0x40003c00

08001f40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	; 0x28
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f46:	f107 031c 	add.w	r3, r7, #28
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
 8001f50:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f52:	463b      	mov	r3, r7
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
 8001f60:	615a      	str	r2, [r3, #20]
 8001f62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f64:	4b21      	ldr	r3, [pc, #132]	; (8001fec <MX_TIM2_Init+0xac>)
 8001f66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f6c:	4b1f      	ldr	r3, [pc, #124]	; (8001fec <MX_TIM2_Init+0xac>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f72:	4b1e      	ldr	r3, [pc, #120]	; (8001fec <MX_TIM2_Init+0xac>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 8001f78:	4b1c      	ldr	r3, [pc, #112]	; (8001fec <MX_TIM2_Init+0xac>)
 8001f7a:	225a      	movs	r2, #90	; 0x5a
 8001f7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f7e:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <MX_TIM2_Init+0xac>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f84:	4b19      	ldr	r3, [pc, #100]	; (8001fec <MX_TIM2_Init+0xac>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f8a:	4818      	ldr	r0, [pc, #96]	; (8001fec <MX_TIM2_Init+0xac>)
 8001f8c:	f00d f8eb 	bl	800f166 <HAL_TIM_PWM_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001f96:	f000 fbd1 	bl	800273c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fa2:	f107 031c 	add.w	r3, r7, #28
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4810      	ldr	r0, [pc, #64]	; (8001fec <MX_TIM2_Init+0xac>)
 8001faa:	f00e fb71 	bl	8010690 <HAL_TIMEx_MasterConfigSynchronization>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001fb4:	f000 fbc2 	bl	800273c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fb8:	2360      	movs	r3, #96	; 0x60
 8001fba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fc8:	463b      	mov	r3, r7
 8001fca:	2208      	movs	r2, #8
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4807      	ldr	r0, [pc, #28]	; (8001fec <MX_TIM2_Init+0xac>)
 8001fd0:	f00d fd90 	bl	800faf4 <HAL_TIM_PWM_ConfigChannel>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001fda:	f000 fbaf 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001fde:	4803      	ldr	r0, [pc, #12]	; (8001fec <MX_TIM2_Init+0xac>)
 8001fe0:	f001 f8a0 	bl	8003124 <HAL_TIM_MspPostInit>

}
 8001fe4:	bf00      	nop
 8001fe6:	3728      	adds	r7, #40	; 0x28
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	24000fe0 	.word	0x24000fe0

08001ff0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	; 0x28
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff6:	f107 031c 	add.w	r3, r7, #28
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]
 8002000:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002002:	463b      	mov	r3, r7
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
 8002010:	615a      	str	r2, [r3, #20]
 8002012:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002014:	4b26      	ldr	r3, [pc, #152]	; (80020b0 <MX_TIM3_Init+0xc0>)
 8002016:	4a27      	ldr	r2, [pc, #156]	; (80020b4 <MX_TIM3_Init+0xc4>)
 8002018:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800201a:	4b25      	ldr	r3, [pc, #148]	; (80020b0 <MX_TIM3_Init+0xc0>)
 800201c:	2200      	movs	r2, #0
 800201e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002020:	4b23      	ldr	r3, [pc, #140]	; (80020b0 <MX_TIM3_Init+0xc0>)
 8002022:	2200      	movs	r2, #0
 8002024:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 8002026:	4b22      	ldr	r3, [pc, #136]	; (80020b0 <MX_TIM3_Init+0xc0>)
 8002028:	225a      	movs	r2, #90	; 0x5a
 800202a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800202c:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <MX_TIM3_Init+0xc0>)
 800202e:	2200      	movs	r2, #0
 8002030:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002032:	4b1f      	ldr	r3, [pc, #124]	; (80020b0 <MX_TIM3_Init+0xc0>)
 8002034:	2200      	movs	r2, #0
 8002036:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002038:	481d      	ldr	r0, [pc, #116]	; (80020b0 <MX_TIM3_Init+0xc0>)
 800203a:	f00d f894 	bl	800f166 <HAL_TIM_PWM_Init>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002044:	f000 fb7a 	bl	800273c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002048:	2300      	movs	r3, #0
 800204a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	4619      	mov	r1, r3
 8002056:	4816      	ldr	r0, [pc, #88]	; (80020b0 <MX_TIM3_Init+0xc0>)
 8002058:	f00e fb1a 	bl	8010690 <HAL_TIMEx_MasterConfigSynchronization>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002062:	f000 fb6b 	bl	800273c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002066:	2360      	movs	r3, #96	; 0x60
 8002068:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800206e:	2300      	movs	r3, #0
 8002070:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002076:	463b      	mov	r3, r7
 8002078:	2200      	movs	r2, #0
 800207a:	4619      	mov	r1, r3
 800207c:	480c      	ldr	r0, [pc, #48]	; (80020b0 <MX_TIM3_Init+0xc0>)
 800207e:	f00d fd39 	bl	800faf4 <HAL_TIM_PWM_ConfigChannel>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002088:	f000 fb58 	bl	800273c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800208c:	463b      	mov	r3, r7
 800208e:	2204      	movs	r2, #4
 8002090:	4619      	mov	r1, r3
 8002092:	4807      	ldr	r0, [pc, #28]	; (80020b0 <MX_TIM3_Init+0xc0>)
 8002094:	f00d fd2e 	bl	800faf4 <HAL_TIM_PWM_ConfigChannel>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800209e:	f000 fb4d 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80020a2:	4803      	ldr	r0, [pc, #12]	; (80020b0 <MX_TIM3_Init+0xc0>)
 80020a4:	f001 f83e 	bl	8003124 <HAL_TIM_MspPostInit>

}
 80020a8:	bf00      	nop
 80020aa:	3728      	adds	r7, #40	; 0x28
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	2400102c 	.word	0x2400102c
 80020b4:	40000400 	.word	0x40000400

080020b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	; 0x28
 80020bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020be:	f107 031c 	add.w	r3, r7, #28
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	605a      	str	r2, [r3, #4]
 80020c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ca:	463b      	mov	r3, r7
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
 80020d8:	615a      	str	r2, [r3, #20]
 80020da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020dc:	4b32      	ldr	r3, [pc, #200]	; (80021a8 <MX_TIM4_Init+0xf0>)
 80020de:	4a33      	ldr	r2, [pc, #204]	; (80021ac <MX_TIM4_Init+0xf4>)
 80020e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 80020e2:	4b31      	ldr	r3, [pc, #196]	; (80021a8 <MX_TIM4_Init+0xf0>)
 80020e4:	221c      	movs	r2, #28
 80020e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e8:	4b2f      	ldr	r3, [pc, #188]	; (80021a8 <MX_TIM4_Init+0xf0>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80020ee:	4b2e      	ldr	r3, [pc, #184]	; (80021a8 <MX_TIM4_Init+0xf0>)
 80020f0:	f242 720f 	movw	r2, #9999	; 0x270f
 80020f4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020f6:	4b2c      	ldr	r3, [pc, #176]	; (80021a8 <MX_TIM4_Init+0xf0>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020fc:	4b2a      	ldr	r3, [pc, #168]	; (80021a8 <MX_TIM4_Init+0xf0>)
 80020fe:	2200      	movs	r2, #0
 8002100:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002102:	4829      	ldr	r0, [pc, #164]	; (80021a8 <MX_TIM4_Init+0xf0>)
 8002104:	f00d f82f 	bl	800f166 <HAL_TIM_PWM_Init>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800210e:	f000 fb15 	bl	800273c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002116:	2300      	movs	r3, #0
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800211a:	f107 031c 	add.w	r3, r7, #28
 800211e:	4619      	mov	r1, r3
 8002120:	4821      	ldr	r0, [pc, #132]	; (80021a8 <MX_TIM4_Init+0xf0>)
 8002122:	f00e fab5 	bl	8010690 <HAL_TIMEx_MasterConfigSynchronization>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800212c:	f000 fb06 	bl	800273c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002130:	2360      	movs	r3, #96	; 0x60
 8002132:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002138:	2300      	movs	r3, #0
 800213a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800213c:	2300      	movs	r3, #0
 800213e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002140:	463b      	mov	r3, r7
 8002142:	2200      	movs	r2, #0
 8002144:	4619      	mov	r1, r3
 8002146:	4818      	ldr	r0, [pc, #96]	; (80021a8 <MX_TIM4_Init+0xf0>)
 8002148:	f00d fcd4 	bl	800faf4 <HAL_TIM_PWM_ConfigChannel>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002152:	f000 faf3 	bl	800273c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002156:	463b      	mov	r3, r7
 8002158:	2204      	movs	r2, #4
 800215a:	4619      	mov	r1, r3
 800215c:	4812      	ldr	r0, [pc, #72]	; (80021a8 <MX_TIM4_Init+0xf0>)
 800215e:	f00d fcc9 	bl	800faf4 <HAL_TIM_PWM_ConfigChannel>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002168:	f000 fae8 	bl	800273c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800216c:	463b      	mov	r3, r7
 800216e:	2208      	movs	r2, #8
 8002170:	4619      	mov	r1, r3
 8002172:	480d      	ldr	r0, [pc, #52]	; (80021a8 <MX_TIM4_Init+0xf0>)
 8002174:	f00d fcbe 	bl	800faf4 <HAL_TIM_PWM_ConfigChannel>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 800217e:	f000 fadd 	bl	800273c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002182:	463b      	mov	r3, r7
 8002184:	220c      	movs	r2, #12
 8002186:	4619      	mov	r1, r3
 8002188:	4807      	ldr	r0, [pc, #28]	; (80021a8 <MX_TIM4_Init+0xf0>)
 800218a:	f00d fcb3 	bl	800faf4 <HAL_TIM_PWM_ConfigChannel>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8002194:	f000 fad2 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002198:	4803      	ldr	r0, [pc, #12]	; (80021a8 <MX_TIM4_Init+0xf0>)
 800219a:	f000 ffc3 	bl	8003124 <HAL_TIM_MspPostInit>

}
 800219e:	bf00      	nop
 80021a0:	3728      	adds	r7, #40	; 0x28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	24001078 	.word	0x24001078
 80021ac:	40000800 	.word	0x40000800

080021b0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08a      	sub	sp, #40	; 0x28
 80021b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b6:	f107 031c 	add.w	r3, r7, #28
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021c2:	463b      	mov	r3, r7
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
 80021d0:	615a      	str	r2, [r3, #20]
 80021d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80021d4:	4b21      	ldr	r3, [pc, #132]	; (800225c <MX_TIM5_Init+0xac>)
 80021d6:	4a22      	ldr	r2, [pc, #136]	; (8002260 <MX_TIM5_Init+0xb0>)
 80021d8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80021da:	4b20      	ldr	r3, [pc, #128]	; (800225c <MX_TIM5_Init+0xac>)
 80021dc:	2200      	movs	r2, #0
 80021de:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e0:	4b1e      	ldr	r3, [pc, #120]	; (800225c <MX_TIM5_Init+0xac>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 80021e6:	4b1d      	ldr	r3, [pc, #116]	; (800225c <MX_TIM5_Init+0xac>)
 80021e8:	225a      	movs	r2, #90	; 0x5a
 80021ea:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ec:	4b1b      	ldr	r3, [pc, #108]	; (800225c <MX_TIM5_Init+0xac>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f2:	4b1a      	ldr	r3, [pc, #104]	; (800225c <MX_TIM5_Init+0xac>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80021f8:	4818      	ldr	r0, [pc, #96]	; (800225c <MX_TIM5_Init+0xac>)
 80021fa:	f00c ffb4 	bl	800f166 <HAL_TIM_PWM_Init>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002204:	f000 fa9a 	bl	800273c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002208:	2300      	movs	r3, #0
 800220a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800220c:	2300      	movs	r3, #0
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002210:	f107 031c 	add.w	r3, r7, #28
 8002214:	4619      	mov	r1, r3
 8002216:	4811      	ldr	r0, [pc, #68]	; (800225c <MX_TIM5_Init+0xac>)
 8002218:	f00e fa3a 	bl	8010690 <HAL_TIMEx_MasterConfigSynchronization>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002222:	f000 fa8b 	bl	800273c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002226:	2360      	movs	r3, #96	; 0x60
 8002228:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002236:	463b      	mov	r3, r7
 8002238:	220c      	movs	r2, #12
 800223a:	4619      	mov	r1, r3
 800223c:	4807      	ldr	r0, [pc, #28]	; (800225c <MX_TIM5_Init+0xac>)
 800223e:	f00d fc59 	bl	800faf4 <HAL_TIM_PWM_ConfigChannel>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002248:	f000 fa78 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800224c:	4803      	ldr	r0, [pc, #12]	; (800225c <MX_TIM5_Init+0xac>)
 800224e:	f000 ff69 	bl	8003124 <HAL_TIM_MspPostInit>

}
 8002252:	bf00      	nop
 8002254:	3728      	adds	r7, #40	; 0x28
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	240010c4 	.word	0x240010c4
 8002260:	40000c00 	.word	0x40000c00

08002264 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002268:	4b22      	ldr	r3, [pc, #136]	; (80022f4 <MX_UART4_Init+0x90>)
 800226a:	4a23      	ldr	r2, [pc, #140]	; (80022f8 <MX_UART4_Init+0x94>)
 800226c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800226e:	4b21      	ldr	r3, [pc, #132]	; (80022f4 <MX_UART4_Init+0x90>)
 8002270:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002274:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002276:	4b1f      	ldr	r3, [pc, #124]	; (80022f4 <MX_UART4_Init+0x90>)
 8002278:	2200      	movs	r2, #0
 800227a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800227c:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <MX_UART4_Init+0x90>)
 800227e:	2200      	movs	r2, #0
 8002280:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002282:	4b1c      	ldr	r3, [pc, #112]	; (80022f4 <MX_UART4_Init+0x90>)
 8002284:	2200      	movs	r2, #0
 8002286:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002288:	4b1a      	ldr	r3, [pc, #104]	; (80022f4 <MX_UART4_Init+0x90>)
 800228a:	220c      	movs	r2, #12
 800228c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800228e:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <MX_UART4_Init+0x90>)
 8002290:	2200      	movs	r2, #0
 8002292:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002294:	4b17      	ldr	r3, [pc, #92]	; (80022f4 <MX_UART4_Init+0x90>)
 8002296:	2200      	movs	r2, #0
 8002298:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800229a:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <MX_UART4_Init+0x90>)
 800229c:	2200      	movs	r2, #0
 800229e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022a0:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <MX_UART4_Init+0x90>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022a6:	4b13      	ldr	r3, [pc, #76]	; (80022f4 <MX_UART4_Init+0x90>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80022ac:	4811      	ldr	r0, [pc, #68]	; (80022f4 <MX_UART4_Init+0x90>)
 80022ae:	f00e faa9 	bl	8010804 <HAL_UART_Init>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80022b8:	f000 fa40 	bl	800273c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022bc:	2100      	movs	r1, #0
 80022be:	480d      	ldr	r0, [pc, #52]	; (80022f4 <MX_UART4_Init+0x90>)
 80022c0:	f00f fbaf 	bl	8011a22 <HAL_UARTEx_SetTxFifoThreshold>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80022ca:	f000 fa37 	bl	800273c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022ce:	2100      	movs	r1, #0
 80022d0:	4808      	ldr	r0, [pc, #32]	; (80022f4 <MX_UART4_Init+0x90>)
 80022d2:	f00f fbe4 	bl	8011a9e <HAL_UARTEx_SetRxFifoThreshold>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80022dc:	f000 fa2e 	bl	800273c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80022e0:	4804      	ldr	r0, [pc, #16]	; (80022f4 <MX_UART4_Init+0x90>)
 80022e2:	f00f fb65 	bl	80119b0 <HAL_UARTEx_DisableFifoMode>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80022ec:	f000 fa26 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	24001368 	.word	0x24001368
 80022f8:	40004c00 	.word	0x40004c00

080022fc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002300:	4b22      	ldr	r3, [pc, #136]	; (800238c <MX_USART6_UART_Init+0x90>)
 8002302:	4a23      	ldr	r2, [pc, #140]	; (8002390 <MX_USART6_UART_Init+0x94>)
 8002304:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002306:	4b21      	ldr	r3, [pc, #132]	; (800238c <MX_USART6_UART_Init+0x90>)
 8002308:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800230c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800230e:	4b1f      	ldr	r3, [pc, #124]	; (800238c <MX_USART6_UART_Init+0x90>)
 8002310:	2200      	movs	r2, #0
 8002312:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002314:	4b1d      	ldr	r3, [pc, #116]	; (800238c <MX_USART6_UART_Init+0x90>)
 8002316:	2200      	movs	r2, #0
 8002318:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800231a:	4b1c      	ldr	r3, [pc, #112]	; (800238c <MX_USART6_UART_Init+0x90>)
 800231c:	2200      	movs	r2, #0
 800231e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002320:	4b1a      	ldr	r3, [pc, #104]	; (800238c <MX_USART6_UART_Init+0x90>)
 8002322:	220c      	movs	r2, #12
 8002324:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002326:	4b19      	ldr	r3, [pc, #100]	; (800238c <MX_USART6_UART_Init+0x90>)
 8002328:	2200      	movs	r2, #0
 800232a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800232c:	4b17      	ldr	r3, [pc, #92]	; (800238c <MX_USART6_UART_Init+0x90>)
 800232e:	2200      	movs	r2, #0
 8002330:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002332:	4b16      	ldr	r3, [pc, #88]	; (800238c <MX_USART6_UART_Init+0x90>)
 8002334:	2200      	movs	r2, #0
 8002336:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002338:	4b14      	ldr	r3, [pc, #80]	; (800238c <MX_USART6_UART_Init+0x90>)
 800233a:	2200      	movs	r2, #0
 800233c:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800233e:	4b13      	ldr	r3, [pc, #76]	; (800238c <MX_USART6_UART_Init+0x90>)
 8002340:	2200      	movs	r2, #0
 8002342:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002344:	4811      	ldr	r0, [pc, #68]	; (800238c <MX_USART6_UART_Init+0x90>)
 8002346:	f00e fa5d 	bl	8010804 <HAL_UART_Init>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002350:	f000 f9f4 	bl	800273c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002354:	2100      	movs	r1, #0
 8002356:	480d      	ldr	r0, [pc, #52]	; (800238c <MX_USART6_UART_Init+0x90>)
 8002358:	f00f fb63 	bl	8011a22 <HAL_UARTEx_SetTxFifoThreshold>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002362:	f000 f9eb 	bl	800273c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002366:	2100      	movs	r1, #0
 8002368:	4808      	ldr	r0, [pc, #32]	; (800238c <MX_USART6_UART_Init+0x90>)
 800236a:	f00f fb98 	bl	8011a9e <HAL_UARTEx_SetRxFifoThreshold>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002374:	f000 f9e2 	bl	800273c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002378:	4804      	ldr	r0, [pc, #16]	; (800238c <MX_USART6_UART_Init+0x90>)
 800237a:	f00f fb19 	bl	80119b0 <HAL_UARTEx_DisableFifoMode>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002384:	f000 f9da 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}
 800238c:	240013fc 	.word	0x240013fc
 8002390:	40011400 	.word	0x40011400

08002394 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800239a:	4b2d      	ldr	r3, [pc, #180]	; (8002450 <MX_DMA_Init+0xbc>)
 800239c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023a0:	4a2b      	ldr	r2, [pc, #172]	; (8002450 <MX_DMA_Init+0xbc>)
 80023a2:	f043 0301 	orr.w	r3, r3, #1
 80023a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80023aa:	4b29      	ldr	r3, [pc, #164]	; (8002450 <MX_DMA_Init+0xbc>)
 80023ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	607b      	str	r3, [r7, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80023b8:	4b25      	ldr	r3, [pc, #148]	; (8002450 <MX_DMA_Init+0xbc>)
 80023ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023be:	4a24      	ldr	r2, [pc, #144]	; (8002450 <MX_DMA_Init+0xbc>)
 80023c0:	f043 0302 	orr.w	r3, r3, #2
 80023c4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80023c8:	4b21      	ldr	r3, [pc, #132]	; (8002450 <MX_DMA_Init+0xbc>)
 80023ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	603b      	str	r3, [r7, #0]
 80023d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2100      	movs	r1, #0
 80023da:	200b      	movs	r0, #11
 80023dc:	f002 fe9d 	bl	800511a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80023e0:	200b      	movs	r0, #11
 80023e2:	f002 feb4 	bl	800514e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80023e6:	2200      	movs	r2, #0
 80023e8:	2100      	movs	r1, #0
 80023ea:	200c      	movs	r0, #12
 80023ec:	f002 fe95 	bl	800511a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80023f0:	200c      	movs	r0, #12
 80023f2:	f002 feac 	bl	800514e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80023f6:	2200      	movs	r2, #0
 80023f8:	2100      	movs	r1, #0
 80023fa:	200d      	movs	r0, #13
 80023fc:	f002 fe8d 	bl	800511a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002400:	200d      	movs	r0, #13
 8002402:	f002 fea4 	bl	800514e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002406:	2200      	movs	r2, #0
 8002408:	2100      	movs	r1, #0
 800240a:	200e      	movs	r0, #14
 800240c:	f002 fe85 	bl	800511a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002410:	200e      	movs	r0, #14
 8002412:	f002 fe9c 	bl	800514e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002416:	2200      	movs	r2, #0
 8002418:	2100      	movs	r1, #0
 800241a:	200f      	movs	r0, #15
 800241c:	f002 fe7d 	bl	800511a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002420:	200f      	movs	r0, #15
 8002422:	f002 fe94 	bl	800514e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002426:	2200      	movs	r2, #0
 8002428:	2100      	movs	r1, #0
 800242a:	2010      	movs	r0, #16
 800242c:	f002 fe75 	bl	800511a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002430:	2010      	movs	r0, #16
 8002432:	f002 fe8c 	bl	800514e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002436:	2200      	movs	r2, #0
 8002438:	2100      	movs	r1, #0
 800243a:	2046      	movs	r0, #70	; 0x46
 800243c:	f002 fe6d 	bl	800511a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002440:	2046      	movs	r0, #70	; 0x46
 8002442:	f002 fe84 	bl	800514e <HAL_NVIC_EnableIRQ>

}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	58024400 	.word	0x58024400

08002454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08e      	sub	sp, #56	; 0x38
 8002458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	605a      	str	r2, [r3, #4]
 8002464:	609a      	str	r2, [r3, #8]
 8002466:	60da      	str	r2, [r3, #12]
 8002468:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800246a:	4bac      	ldr	r3, [pc, #688]	; (800271c <MX_GPIO_Init+0x2c8>)
 800246c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002470:	4aaa      	ldr	r2, [pc, #680]	; (800271c <MX_GPIO_Init+0x2c8>)
 8002472:	f043 0310 	orr.w	r3, r3, #16
 8002476:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800247a:	4ba8      	ldr	r3, [pc, #672]	; (800271c <MX_GPIO_Init+0x2c8>)
 800247c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002480:	f003 0310 	and.w	r3, r3, #16
 8002484:	623b      	str	r3, [r7, #32]
 8002486:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002488:	4ba4      	ldr	r3, [pc, #656]	; (800271c <MX_GPIO_Init+0x2c8>)
 800248a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800248e:	4aa3      	ldr	r2, [pc, #652]	; (800271c <MX_GPIO_Init+0x2c8>)
 8002490:	f043 0320 	orr.w	r3, r3, #32
 8002494:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002498:	4ba0      	ldr	r3, [pc, #640]	; (800271c <MX_GPIO_Init+0x2c8>)
 800249a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800249e:	f003 0320 	and.w	r3, r3, #32
 80024a2:	61fb      	str	r3, [r7, #28]
 80024a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024a6:	4b9d      	ldr	r3, [pc, #628]	; (800271c <MX_GPIO_Init+0x2c8>)
 80024a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ac:	4a9b      	ldr	r2, [pc, #620]	; (800271c <MX_GPIO_Init+0x2c8>)
 80024ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024b6:	4b99      	ldr	r3, [pc, #612]	; (800271c <MX_GPIO_Init+0x2c8>)
 80024b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c0:	61bb      	str	r3, [r7, #24]
 80024c2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024c4:	4b95      	ldr	r3, [pc, #596]	; (800271c <MX_GPIO_Init+0x2c8>)
 80024c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ca:	4a94      	ldr	r2, [pc, #592]	; (800271c <MX_GPIO_Init+0x2c8>)
 80024cc:	f043 0304 	orr.w	r3, r3, #4
 80024d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024d4:	4b91      	ldr	r3, [pc, #580]	; (800271c <MX_GPIO_Init+0x2c8>)
 80024d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e2:	4b8e      	ldr	r3, [pc, #568]	; (800271c <MX_GPIO_Init+0x2c8>)
 80024e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024e8:	4a8c      	ldr	r2, [pc, #560]	; (800271c <MX_GPIO_Init+0x2c8>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024f2:	4b8a      	ldr	r3, [pc, #552]	; (800271c <MX_GPIO_Init+0x2c8>)
 80024f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002500:	4b86      	ldr	r3, [pc, #536]	; (800271c <MX_GPIO_Init+0x2c8>)
 8002502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002506:	4a85      	ldr	r2, [pc, #532]	; (800271c <MX_GPIO_Init+0x2c8>)
 8002508:	f043 0302 	orr.w	r3, r3, #2
 800250c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002510:	4b82      	ldr	r3, [pc, #520]	; (800271c <MX_GPIO_Init+0x2c8>)
 8002512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800251e:	4b7f      	ldr	r3, [pc, #508]	; (800271c <MX_GPIO_Init+0x2c8>)
 8002520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002524:	4a7d      	ldr	r2, [pc, #500]	; (800271c <MX_GPIO_Init+0x2c8>)
 8002526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800252a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800252e:	4b7b      	ldr	r3, [pc, #492]	; (800271c <MX_GPIO_Init+0x2c8>)
 8002530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800253c:	4b77      	ldr	r3, [pc, #476]	; (800271c <MX_GPIO_Init+0x2c8>)
 800253e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002542:	4a76      	ldr	r2, [pc, #472]	; (800271c <MX_GPIO_Init+0x2c8>)
 8002544:	f043 0308 	orr.w	r3, r3, #8
 8002548:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800254c:	4b73      	ldr	r3, [pc, #460]	; (800271c <MX_GPIO_Init+0x2c8>)
 800254e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	607b      	str	r3, [r7, #4]
 8002558:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 800255a:	2200      	movs	r2, #0
 800255c:	f241 5104 	movw	r1, #5380	; 0x1504
 8002560:	486f      	ldr	r0, [pc, #444]	; (8002720 <MX_GPIO_Init+0x2cc>)
 8002562:	f005 fc09 	bl	8007d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8002566:	2200      	movs	r2, #0
 8002568:	f248 0106 	movw	r1, #32774	; 0x8006
 800256c:	486d      	ldr	r0, [pc, #436]	; (8002724 <MX_GPIO_Init+0x2d0>)
 800256e:	f005 fc03 	bl	8007d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002572:	2200      	movs	r2, #0
 8002574:	2130      	movs	r1, #48	; 0x30
 8002576:	486c      	ldr	r0, [pc, #432]	; (8002728 <MX_GPIO_Init+0x2d4>)
 8002578:	f005 fbfe 	bl	8007d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 800257c:	2200      	movs	r2, #0
 800257e:	2102      	movs	r1, #2
 8002580:	486a      	ldr	r0, [pc, #424]	; (800272c <MX_GPIO_Init+0x2d8>)
 8002582:	f005 fbf9 	bl	8007d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 8002586:	2200      	movs	r2, #0
 8002588:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 800258c:	4868      	ldr	r0, [pc, #416]	; (8002730 <MX_GPIO_Init+0x2dc>)
 800258e:	f005 fbf3 	bl	8007d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002592:	2200      	movs	r2, #0
 8002594:	210e      	movs	r1, #14
 8002596:	4867      	ldr	r0, [pc, #412]	; (8002734 <MX_GPIO_Init+0x2e0>)
 8002598:	f005 fbee 	bl	8007d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0, GPIO_PIN_RESET);
 800259c:	2200      	movs	r2, #0
 800259e:	f240 3101 	movw	r1, #769	; 0x301
 80025a2:	4865      	ldr	r0, [pc, #404]	; (8002738 <MX_GPIO_Init+0x2e4>)
 80025a4:	f005 fbe8 	bl	8007d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 80025a8:	f241 5304 	movw	r3, #5380	; 0x1504
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ae:	2301      	movs	r3, #1
 80025b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b6:	2300      	movs	r3, #0
 80025b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025be:	4619      	mov	r1, r3
 80025c0:	4857      	ldr	r0, [pc, #348]	; (8002720 <MX_GPIO_Init+0x2cc>)
 80025c2:	f005 fa19 	bl	80079f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 80025c6:	f248 0306 	movw	r3, #32774	; 0x8006
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025cc:	2301      	movs	r3, #1
 80025ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d4:	2300      	movs	r3, #0
 80025d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025dc:	4619      	mov	r1, r3
 80025de:	4851      	ldr	r0, [pc, #324]	; (8002724 <MX_GPIO_Init+0x2d0>)
 80025e0:	f005 fa0a 	bl	80079f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80025e4:	2330      	movs	r3, #48	; 0x30
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e8:	2301      	movs	r3, #1
 80025ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f0:	2300      	movs	r3, #0
 80025f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025f8:	4619      	mov	r1, r3
 80025fa:	484b      	ldr	r0, [pc, #300]	; (8002728 <MX_GPIO_Init+0x2d4>)
 80025fc:	f005 f9fc 	bl	80079f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PYRO1_Pin */
  GPIO_InitStruct.Pin = PYRO1_Pin;
 8002600:	2302      	movs	r3, #2
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002604:	2301      	movs	r3, #1
 8002606:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260c:	2300      	movs	r3, #0
 800260e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 8002610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002614:	4619      	mov	r1, r3
 8002616:	4845      	ldr	r0, [pc, #276]	; (800272c <MX_GPIO_Init+0x2d8>)
 8002618:	f005 f9ee 	bl	80079f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 800261c:	2304      	movs	r3, #4
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002620:	2300      	movs	r3, #0
 8002622:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002624:	2301      	movs	r3, #1
 8002626:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8002628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800262c:	4619      	mov	r1, r3
 800262e:	483f      	ldr	r0, [pc, #252]	; (800272c <MX_GPIO_Init+0x2d8>)
 8002630:	f005 f9e2 	bl	80079f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 8002634:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800263a:	2301      	movs	r3, #1
 800263c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002642:	2300      	movs	r3, #0
 8002644:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800264a:	4619      	mov	r1, r3
 800264c:	4838      	ldr	r0, [pc, #224]	; (8002730 <MX_GPIO_Init+0x2dc>)
 800264e:	f005 f9d3 	bl	80079f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 8002652:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002658:	2300      	movs	r3, #0
 800265a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800265c:	2301      	movs	r3, #1
 800265e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002664:	4619      	mov	r1, r3
 8002666:	4832      	ldr	r0, [pc, #200]	; (8002730 <MX_GPIO_Init+0x2dc>)
 8002668:	f005 f9c6 	bl	80079f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 800266c:	2301      	movs	r3, #1
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002670:	2300      	movs	r3, #0
 8002672:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002674:	2301      	movs	r3, #1
 8002676:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8002678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800267c:	4619      	mov	r1, r3
 800267e:	482d      	ldr	r0, [pc, #180]	; (8002734 <MX_GPIO_Init+0x2e0>)
 8002680:	f005 f9ba 	bl	80079f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8002684:	230e      	movs	r3, #14
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002688:	2301      	movs	r3, #1
 800268a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002690:	2300      	movs	r3, #0
 8002692:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002698:	4619      	mov	r1, r3
 800269a:	4826      	ldr	r0, [pc, #152]	; (8002734 <MX_GPIO_Init+0x2e0>)
 800269c:	f005 f9ac 	bl	80079f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 80026a0:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026a6:	2300      	movs	r3, #0
 80026a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026aa:	2301      	movs	r3, #1
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026b2:	4619      	mov	r1, r3
 80026b4:	481a      	ldr	r0, [pc, #104]	; (8002720 <MX_GPIO_Init+0x2cc>)
 80026b6:	f005 f99f 	bl	80079f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0;
 80026ba:	f240 3301 	movw	r3, #769	; 0x301
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c0:	2301      	movs	r3, #1
 80026c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c8:	2300      	movs	r3, #0
 80026ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026d0:	4619      	mov	r1, r3
 80026d2:	4819      	ldr	r0, [pc, #100]	; (8002738 <MX_GPIO_Init+0x2e4>)
 80026d4:	f005 f990 	bl	80079f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 80026d8:	2310      	movs	r3, #16
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026dc:	2300      	movs	r3, #0
 80026de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 80026e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026e8:	4619      	mov	r1, r3
 80026ea:	4812      	ldr	r0, [pc, #72]	; (8002734 <MX_GPIO_Init+0x2e0>)
 80026ec:	f005 f984 	bl	80079f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f6:	2302      	movs	r3, #2
 80026f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fe:	2300      	movs	r3, #0
 8002700:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002702:	2300      	movs	r3, #0
 8002704:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800270a:	4619      	mov	r1, r3
 800270c:	4805      	ldr	r0, [pc, #20]	; (8002724 <MX_GPIO_Init+0x2d0>)
 800270e:	f005 f973 	bl	80079f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002712:	bf00      	nop
 8002714:	3738      	adds	r7, #56	; 0x38
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	58024400 	.word	0x58024400
 8002720:	58021000 	.word	0x58021000
 8002724:	58020000 	.word	0x58020000
 8002728:	58020800 	.word	0x58020800
 800272c:	58020400 	.word	0x58020400
 8002730:	58021400 	.word	0x58021400
 8002734:	58021800 	.word	0x58021800
 8002738:	58020c00 	.word	0x58020c00

0800273c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002740:	b672      	cpsid	i
}
 8002742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002744:	e7fe      	b.n	8002744 <Error_Handler+0x8>
	...

08002748 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274e:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <HAL_MspInit+0x30>)
 8002750:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002754:	4a08      	ldr	r2, [pc, #32]	; (8002778 <HAL_MspInit+0x30>)
 8002756:	f043 0302 	orr.w	r3, r3, #2
 800275a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800275e:	4b06      	ldr	r3, [pc, #24]	; (8002778 <HAL_MspInit+0x30>)
 8002760:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	607b      	str	r3, [r7, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	58024400 	.word	0x58024400

0800277c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08c      	sub	sp, #48	; 0x30
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002784:	f107 031c 	add.w	r3, r7, #28
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a5d      	ldr	r2, [pc, #372]	; (8002910 <HAL_ADC_MspInit+0x194>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d159      	bne.n	8002852 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800279e:	4b5d      	ldr	r3, [pc, #372]	; (8002914 <HAL_ADC_MspInit+0x198>)
 80027a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027a4:	4a5b      	ldr	r2, [pc, #364]	; (8002914 <HAL_ADC_MspInit+0x198>)
 80027a6:	f043 0320 	orr.w	r3, r3, #32
 80027aa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80027ae:	4b59      	ldr	r3, [pc, #356]	; (8002914 <HAL_ADC_MspInit+0x198>)
 80027b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027b4:	f003 0320 	and.w	r3, r3, #32
 80027b8:	61bb      	str	r3, [r7, #24]
 80027ba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027bc:	4b55      	ldr	r3, [pc, #340]	; (8002914 <HAL_ADC_MspInit+0x198>)
 80027be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027c2:	4a54      	ldr	r2, [pc, #336]	; (8002914 <HAL_ADC_MspInit+0x198>)
 80027c4:	f043 0304 	orr.w	r3, r3, #4
 80027c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027cc:	4b51      	ldr	r3, [pc, #324]	; (8002914 <HAL_ADC_MspInit+0x198>)
 80027ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 80027da:	2301      	movs	r3, #1
 80027dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027de:	2303      	movs	r3, #3
 80027e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 80027e6:	f107 031c 	add.w	r3, r7, #28
 80027ea:	4619      	mov	r1, r3
 80027ec:	484a      	ldr	r0, [pc, #296]	; (8002918 <HAL_ADC_MspInit+0x19c>)
 80027ee:	f005 f903 	bl	80079f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 80027f2:	4b4a      	ldr	r3, [pc, #296]	; (800291c <HAL_ADC_MspInit+0x1a0>)
 80027f4:	4a4a      	ldr	r2, [pc, #296]	; (8002920 <HAL_ADC_MspInit+0x1a4>)
 80027f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80027f8:	4b48      	ldr	r3, [pc, #288]	; (800291c <HAL_ADC_MspInit+0x1a0>)
 80027fa:	2209      	movs	r2, #9
 80027fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027fe:	4b47      	ldr	r3, [pc, #284]	; (800291c <HAL_ADC_MspInit+0x1a0>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002804:	4b45      	ldr	r3, [pc, #276]	; (800291c <HAL_ADC_MspInit+0x1a0>)
 8002806:	2200      	movs	r2, #0
 8002808:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800280a:	4b44      	ldr	r3, [pc, #272]	; (800291c <HAL_ADC_MspInit+0x1a0>)
 800280c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002810:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002812:	4b42      	ldr	r3, [pc, #264]	; (800291c <HAL_ADC_MspInit+0x1a0>)
 8002814:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002818:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800281a:	4b40      	ldr	r3, [pc, #256]	; (800291c <HAL_ADC_MspInit+0x1a0>)
 800281c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002820:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002822:	4b3e      	ldr	r3, [pc, #248]	; (800291c <HAL_ADC_MspInit+0x1a0>)
 8002824:	2200      	movs	r2, #0
 8002826:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002828:	4b3c      	ldr	r3, [pc, #240]	; (800291c <HAL_ADC_MspInit+0x1a0>)
 800282a:	2200      	movs	r2, #0
 800282c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800282e:	4b3b      	ldr	r3, [pc, #236]	; (800291c <HAL_ADC_MspInit+0x1a0>)
 8002830:	2200      	movs	r2, #0
 8002832:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002834:	4839      	ldr	r0, [pc, #228]	; (800291c <HAL_ADC_MspInit+0x1a0>)
 8002836:	f002 fca5 	bl	8005184 <HAL_DMA_Init>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002840:	f7ff ff7c 	bl	800273c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a35      	ldr	r2, [pc, #212]	; (800291c <HAL_ADC_MspInit+0x1a0>)
 8002848:	659a      	str	r2, [r3, #88]	; 0x58
 800284a:	4a34      	ldr	r2, [pc, #208]	; (800291c <HAL_ADC_MspInit+0x1a0>)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002850:	e059      	b.n	8002906 <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a33      	ldr	r2, [pc, #204]	; (8002924 <HAL_ADC_MspInit+0x1a8>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d154      	bne.n	8002906 <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800285c:	4b2d      	ldr	r3, [pc, #180]	; (8002914 <HAL_ADC_MspInit+0x198>)
 800285e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002862:	4a2c      	ldr	r2, [pc, #176]	; (8002914 <HAL_ADC_MspInit+0x198>)
 8002864:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002868:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800286c:	4b29      	ldr	r3, [pc, #164]	; (8002914 <HAL_ADC_MspInit+0x198>)
 800286e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002872:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800287a:	4b26      	ldr	r3, [pc, #152]	; (8002914 <HAL_ADC_MspInit+0x198>)
 800287c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002880:	4a24      	ldr	r2, [pc, #144]	; (8002914 <HAL_ADC_MspInit+0x198>)
 8002882:	f043 0304 	orr.w	r3, r3, #4
 8002886:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800288a:	4b22      	ldr	r3, [pc, #136]	; (8002914 <HAL_ADC_MspInit+0x198>)
 800288c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002898:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800289c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80028a0:	f000 ffda 	bl	8003858 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 80028a4:	4b20      	ldr	r3, [pc, #128]	; (8002928 <HAL_ADC_MspInit+0x1ac>)
 80028a6:	4a21      	ldr	r2, [pc, #132]	; (800292c <HAL_ADC_MspInit+0x1b0>)
 80028a8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80028aa:	4b1f      	ldr	r3, [pc, #124]	; (8002928 <HAL_ADC_MspInit+0x1ac>)
 80028ac:	2273      	movs	r2, #115	; 0x73
 80028ae:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028b0:	4b1d      	ldr	r3, [pc, #116]	; (8002928 <HAL_ADC_MspInit+0x1ac>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80028b6:	4b1c      	ldr	r3, [pc, #112]	; (8002928 <HAL_ADC_MspInit+0x1ac>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80028bc:	4b1a      	ldr	r3, [pc, #104]	; (8002928 <HAL_ADC_MspInit+0x1ac>)
 80028be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028c2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028c4:	4b18      	ldr	r3, [pc, #96]	; (8002928 <HAL_ADC_MspInit+0x1ac>)
 80028c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028ca:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028cc:	4b16      	ldr	r3, [pc, #88]	; (8002928 <HAL_ADC_MspInit+0x1ac>)
 80028ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028d2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80028d4:	4b14      	ldr	r3, [pc, #80]	; (8002928 <HAL_ADC_MspInit+0x1ac>)
 80028d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028da:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 80028dc:	4b12      	ldr	r3, [pc, #72]	; (8002928 <HAL_ADC_MspInit+0x1ac>)
 80028de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028e2:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028e4:	4b10      	ldr	r3, [pc, #64]	; (8002928 <HAL_ADC_MspInit+0x1ac>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80028ea:	480f      	ldr	r0, [pc, #60]	; (8002928 <HAL_ADC_MspInit+0x1ac>)
 80028ec:	f002 fc4a 	bl	8005184 <HAL_DMA_Init>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 80028f6:	f7ff ff21 	bl	800273c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a0a      	ldr	r2, [pc, #40]	; (8002928 <HAL_ADC_MspInit+0x1ac>)
 80028fe:	659a      	str	r2, [r3, #88]	; 0x58
 8002900:	4a09      	ldr	r2, [pc, #36]	; (8002928 <HAL_ADC_MspInit+0x1ac>)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002906:	bf00      	nop
 8002908:	3730      	adds	r7, #48	; 0x30
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40022000 	.word	0x40022000
 8002914:	58024400 	.word	0x58024400
 8002918:	58020800 	.word	0x58020800
 800291c:	24000be8 	.word	0x24000be8
 8002920:	40020088 	.word	0x40020088
 8002924:	58026000 	.word	0x58026000
 8002928:	24000c60 	.word	0x24000c60
 800292c:	400204b8 	.word	0x400204b8

08002930 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b0b8      	sub	sp, #224	; 0xe0
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002938:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]
 8002942:	609a      	str	r2, [r3, #8]
 8002944:	60da      	str	r2, [r3, #12]
 8002946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002948:	f107 0310 	add.w	r3, r7, #16
 800294c:	22b8      	movs	r2, #184	; 0xb8
 800294e:	2100      	movs	r1, #0
 8002950:	4618      	mov	r0, r3
 8002952:	f014 fa09 	bl	8016d68 <memset>
  if(hfdcan->Instance==FDCAN3)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a26      	ldr	r2, [pc, #152]	; (80029f4 <HAL_FDCAN_MspInit+0xc4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d144      	bne.n	80029ea <HAL_FDCAN_MspInit+0xba>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002960:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002964:	f04f 0300 	mov.w	r3, #0
 8002968:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800296c:	2300      	movs	r3, #0
 800296e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002970:	f107 0310 	add.w	r3, r7, #16
 8002974:	4618      	mov	r0, r3
 8002976:	f007 fe13 	bl	800a5a0 <HAL_RCCEx_PeriphCLKConfig>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 8002980:	f7ff fedc 	bl	800273c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002984:	4b1c      	ldr	r3, [pc, #112]	; (80029f8 <HAL_FDCAN_MspInit+0xc8>)
 8002986:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800298a:	4a1b      	ldr	r2, [pc, #108]	; (80029f8 <HAL_FDCAN_MspInit+0xc8>)
 800298c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002990:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002994:	4b18      	ldr	r3, [pc, #96]	; (80029f8 <HAL_FDCAN_MspInit+0xc8>)
 8002996:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800299a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80029a2:	4b15      	ldr	r3, [pc, #84]	; (80029f8 <HAL_FDCAN_MspInit+0xc8>)
 80029a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029a8:	4a13      	ldr	r2, [pc, #76]	; (80029f8 <HAL_FDCAN_MspInit+0xc8>)
 80029aa:	f043 0320 	orr.w	r3, r3, #32
 80029ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029b2:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <HAL_FDCAN_MspInit+0xc8>)
 80029b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029b8:	f003 0320 	and.w	r3, r3, #32
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029c0:	23c0      	movs	r3, #192	; 0xc0
 80029c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c6:	2302      	movs	r3, #2
 80029c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d2:	2300      	movs	r3, #0
 80029d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 80029d8:	2302      	movs	r3, #2
 80029da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029de:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029e2:	4619      	mov	r1, r3
 80029e4:	4805      	ldr	r0, [pc, #20]	; (80029fc <HAL_FDCAN_MspInit+0xcc>)
 80029e6:	f005 f807 	bl	80079f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 80029ea:	bf00      	nop
 80029ec:	37e0      	adds	r7, #224	; 0xe0
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	4000d400 	.word	0x4000d400
 80029f8:	58024400 	.word	0x58024400
 80029fc:	58021400 	.word	0x58021400

08002a00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b0b8      	sub	sp, #224	; 0xe0
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a08:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a18:	f107 0310 	add.w	r3, r7, #16
 8002a1c:	22b8      	movs	r2, #184	; 0xb8
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f014 f9a1 	bl	8016d68 <memset>
  if(hi2c->Instance==I2C2)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a26      	ldr	r2, [pc, #152]	; (8002ac4 <HAL_I2C_MspInit+0xc4>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d145      	bne.n	8002abc <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002a30:	f04f 0208 	mov.w	r2, #8
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a42:	f107 0310 	add.w	r3, r7, #16
 8002a46:	4618      	mov	r0, r3
 8002a48:	f007 fdaa 	bl	800a5a0 <HAL_RCCEx_PeriphCLKConfig>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002a52:	f7ff fe73 	bl	800273c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a56:	4b1c      	ldr	r3, [pc, #112]	; (8002ac8 <HAL_I2C_MspInit+0xc8>)
 8002a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a5c:	4a1a      	ldr	r2, [pc, #104]	; (8002ac8 <HAL_I2C_MspInit+0xc8>)
 8002a5e:	f043 0320 	orr.w	r3, r3, #32
 8002a62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a66:	4b18      	ldr	r3, [pc, #96]	; (8002ac8 <HAL_I2C_MspInit+0xc8>)
 8002a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a74:	2303      	movs	r3, #3
 8002a76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a7a:	2312      	movs	r3, #18
 8002a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a86:	2300      	movs	r3, #0
 8002a88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002a8c:	2304      	movs	r3, #4
 8002a8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a92:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a96:	4619      	mov	r1, r3
 8002a98:	480c      	ldr	r0, [pc, #48]	; (8002acc <HAL_I2C_MspInit+0xcc>)
 8002a9a:	f004 ffad 	bl	80079f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ac8 <HAL_I2C_MspInit+0xc8>)
 8002aa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002aa4:	4a08      	ldr	r2, [pc, #32]	; (8002ac8 <HAL_I2C_MspInit+0xc8>)
 8002aa6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002aaa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002aae:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <HAL_I2C_MspInit+0xc8>)
 8002ab0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ab4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002abc:	bf00      	nop
 8002abe:	37e0      	adds	r7, #224	; 0xe0
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40005800 	.word	0x40005800
 8002ac8:	58024400 	.word	0x58024400
 8002acc:	58021400 	.word	0x58021400

08002ad0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b0ba      	sub	sp, #232	; 0xe8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	60da      	str	r2, [r3, #12]
 8002ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ae8:	f107 0318 	add.w	r3, r7, #24
 8002aec:	22b8      	movs	r2, #184	; 0xb8
 8002aee:	2100      	movs	r1, #0
 8002af0:	4618      	mov	r0, r3
 8002af2:	f014 f939 	bl	8016d68 <memset>
  if(hsd->Instance==SDMMC2)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a5d      	ldr	r2, [pc, #372]	; (8002c70 <HAL_SD_MspInit+0x1a0>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	f040 80b3 	bne.w	8002c68 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002b02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b06:	f04f 0300 	mov.w	r3, #0
 8002b0a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b12:	f107 0318 	add.w	r3, r7, #24
 8002b16:	4618      	mov	r0, r3
 8002b18:	f007 fd42 	bl	800a5a0 <HAL_RCCEx_PeriphCLKConfig>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8002b22:	f7ff fe0b 	bl	800273c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002b26:	4b53      	ldr	r3, [pc, #332]	; (8002c74 <HAL_SD_MspInit+0x1a4>)
 8002b28:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002b2c:	4a51      	ldr	r2, [pc, #324]	; (8002c74 <HAL_SD_MspInit+0x1a4>)
 8002b2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b32:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002b36:	4b4f      	ldr	r3, [pc, #316]	; (8002c74 <HAL_SD_MspInit+0x1a4>)
 8002b38:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002b3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b44:	4b4b      	ldr	r3, [pc, #300]	; (8002c74 <HAL_SD_MspInit+0x1a4>)
 8002b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b4a:	4a4a      	ldr	r2, [pc, #296]	; (8002c74 <HAL_SD_MspInit+0x1a4>)
 8002b4c:	f043 0308 	orr.w	r3, r3, #8
 8002b50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b54:	4b47      	ldr	r3, [pc, #284]	; (8002c74 <HAL_SD_MspInit+0x1a4>)
 8002b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b62:	4b44      	ldr	r3, [pc, #272]	; (8002c74 <HAL_SD_MspInit+0x1a4>)
 8002b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b68:	4a42      	ldr	r2, [pc, #264]	; (8002c74 <HAL_SD_MspInit+0x1a4>)
 8002b6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b72:	4b40      	ldr	r3, [pc, #256]	; (8002c74 <HAL_SD_MspInit+0x1a4>)
 8002b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b80:	2340      	movs	r3, #64	; 0x40
 8002b82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b86:	2302      	movs	r3, #2
 8002b88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b92:	2303      	movs	r3, #3
 8002b94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002b98:	230b      	movs	r3, #11
 8002b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b9e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4834      	ldr	r0, [pc, #208]	; (8002c78 <HAL_SD_MspInit+0x1a8>)
 8002ba6:	f004 ff27 	bl	80079f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002baa:	2380      	movs	r3, #128	; 0x80
 8002bac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002bc2:	230b      	movs	r3, #11
 8002bc4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bc8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002bcc:	4619      	mov	r1, r3
 8002bce:	482a      	ldr	r0, [pc, #168]	; (8002c78 <HAL_SD_MspInit+0x1a8>)
 8002bd0:	f004 ff12 	bl	80079f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bd8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002be2:	2301      	movs	r3, #1
 8002be4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be8:	2303      	movs	r3, #3
 8002bea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002bee:	230b      	movs	r3, #11
 8002bf0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bf4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4820      	ldr	r0, [pc, #128]	; (8002c7c <HAL_SD_MspInit+0x1ac>)
 8002bfc:	f004 fefc 	bl	80079f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c14:	2303      	movs	r3, #3
 8002c16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002c1a:	230b      	movs	r3, #11
 8002c1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c20:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c24:	4619      	mov	r1, r3
 8002c26:	4815      	ldr	r0, [pc, #84]	; (8002c7c <HAL_SD_MspInit+0x1ac>)
 8002c28:	f004 fee6 	bl	80079f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002c2c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002c30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c34:	2302      	movs	r3, #2
 8002c36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c40:	2303      	movs	r3, #3
 8002c42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8002c46:	230a      	movs	r3, #10
 8002c48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c4c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c50:	4619      	mov	r1, r3
 8002c52:	480a      	ldr	r0, [pc, #40]	; (8002c7c <HAL_SD_MspInit+0x1ac>)
 8002c54:	f004 fed0 	bl	80079f8 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8002c58:	2200      	movs	r2, #0
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	207c      	movs	r0, #124	; 0x7c
 8002c5e:	f002 fa5c 	bl	800511a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8002c62:	207c      	movs	r0, #124	; 0x7c
 8002c64:	f002 fa73 	bl	800514e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8002c68:	bf00      	nop
 8002c6a:	37e8      	adds	r7, #232	; 0xe8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	48022400 	.word	0x48022400
 8002c74:	58024400 	.word	0x58024400
 8002c78:	58020c00 	.word	0x58020c00
 8002c7c:	58021800 	.word	0x58021800

08002c80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08e      	sub	sp, #56	; 0x38
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a4f      	ldr	r2, [pc, #316]	; (8002ddc <HAL_SPI_MspInit+0x15c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d12e      	bne.n	8002d00 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ca2:	4b4f      	ldr	r3, [pc, #316]	; (8002de0 <HAL_SPI_MspInit+0x160>)
 8002ca4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ca8:	4a4d      	ldr	r2, [pc, #308]	; (8002de0 <HAL_SPI_MspInit+0x160>)
 8002caa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002cb2:	4b4b      	ldr	r3, [pc, #300]	; (8002de0 <HAL_SPI_MspInit+0x160>)
 8002cb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cbc:	623b      	str	r3, [r7, #32]
 8002cbe:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc0:	4b47      	ldr	r3, [pc, #284]	; (8002de0 <HAL_SPI_MspInit+0x160>)
 8002cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cc6:	4a46      	ldr	r2, [pc, #280]	; (8002de0 <HAL_SPI_MspInit+0x160>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cd0:	4b43      	ldr	r3, [pc, #268]	; (8002de0 <HAL_SPI_MspInit+0x160>)
 8002cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	61fb      	str	r3, [r7, #28]
 8002cdc:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002cde:	23e0      	movs	r3, #224	; 0xe0
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cea:	2300      	movs	r3, #0
 8002cec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cee:	2305      	movs	r3, #5
 8002cf0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	483a      	ldr	r0, [pc, #232]	; (8002de4 <HAL_SPI_MspInit+0x164>)
 8002cfa:	f004 fe7d 	bl	80079f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002cfe:	e068      	b.n	8002dd2 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a38      	ldr	r2, [pc, #224]	; (8002de8 <HAL_SPI_MspInit+0x168>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d12f      	bne.n	8002d6a <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d0a:	4b35      	ldr	r3, [pc, #212]	; (8002de0 <HAL_SPI_MspInit+0x160>)
 8002d0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d10:	4a33      	ldr	r2, [pc, #204]	; (8002de0 <HAL_SPI_MspInit+0x160>)
 8002d12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d1a:	4b31      	ldr	r3, [pc, #196]	; (8002de0 <HAL_SPI_MspInit+0x160>)
 8002d1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d24:	61bb      	str	r3, [r7, #24]
 8002d26:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d28:	4b2d      	ldr	r3, [pc, #180]	; (8002de0 <HAL_SPI_MspInit+0x160>)
 8002d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d2e:	4a2c      	ldr	r2, [pc, #176]	; (8002de0 <HAL_SPI_MspInit+0x160>)
 8002d30:	f043 0302 	orr.w	r3, r3, #2
 8002d34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d38:	4b29      	ldr	r3, [pc, #164]	; (8002de0 <HAL_SPI_MspInit+0x160>)
 8002d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002d46:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d54:	2300      	movs	r3, #0
 8002d56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d58:	2305      	movs	r3, #5
 8002d5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d60:	4619      	mov	r1, r3
 8002d62:	4822      	ldr	r0, [pc, #136]	; (8002dec <HAL_SPI_MspInit+0x16c>)
 8002d64:	f004 fe48 	bl	80079f8 <HAL_GPIO_Init>
}
 8002d68:	e033      	b.n	8002dd2 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a20      	ldr	r2, [pc, #128]	; (8002df0 <HAL_SPI_MspInit+0x170>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d12e      	bne.n	8002dd2 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002d74:	4b1a      	ldr	r3, [pc, #104]	; (8002de0 <HAL_SPI_MspInit+0x160>)
 8002d76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d7a:	4a19      	ldr	r2, [pc, #100]	; (8002de0 <HAL_SPI_MspInit+0x160>)
 8002d7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d80:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d84:	4b16      	ldr	r3, [pc, #88]	; (8002de0 <HAL_SPI_MspInit+0x160>)
 8002d86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d8e:	613b      	str	r3, [r7, #16]
 8002d90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d92:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <HAL_SPI_MspInit+0x160>)
 8002d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d98:	4a11      	ldr	r2, [pc, #68]	; (8002de0 <HAL_SPI_MspInit+0x160>)
 8002d9a:	f043 0304 	orr.w	r3, r3, #4
 8002d9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002da2:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <HAL_SPI_MspInit+0x160>)
 8002da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002db0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db6:	2302      	movs	r3, #2
 8002db8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002dc2:	2306      	movs	r3, #6
 8002dc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4809      	ldr	r0, [pc, #36]	; (8002df4 <HAL_SPI_MspInit+0x174>)
 8002dce:	f004 fe13 	bl	80079f8 <HAL_GPIO_Init>
}
 8002dd2:	bf00      	nop
 8002dd4:	3738      	adds	r7, #56	; 0x38
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40013000 	.word	0x40013000
 8002de0:	58024400 	.word	0x58024400
 8002de4:	58020000 	.word	0x58020000
 8002de8:	40003800 	.word	0x40003800
 8002dec:	58020400 	.word	0x58020400
 8002df0:	40003c00 	.word	0x40003c00
 8002df4:	58020800 	.word	0x58020800

08002df8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08c      	sub	sp, #48	; 0x30
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e00:	f107 031c 	add.w	r3, r7, #28
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e18:	d15d      	bne.n	8002ed6 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e1a:	4b8e      	ldr	r3, [pc, #568]	; (8003054 <HAL_TIM_PWM_MspInit+0x25c>)
 8002e1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e20:	4a8c      	ldr	r2, [pc, #560]	; (8003054 <HAL_TIM_PWM_MspInit+0x25c>)
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e2a:	4b8a      	ldr	r3, [pc, #552]	; (8003054 <HAL_TIM_PWM_MspInit+0x25c>)
 8002e2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	61bb      	str	r3, [r7, #24]
 8002e36:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e38:	4b86      	ldr	r3, [pc, #536]	; (8003054 <HAL_TIM_PWM_MspInit+0x25c>)
 8002e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e3e:	4a85      	ldr	r2, [pc, #532]	; (8003054 <HAL_TIM_PWM_MspInit+0x25c>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e48:	4b82      	ldr	r3, [pc, #520]	; (8003054 <HAL_TIM_PWM_MspInit+0x25c>)
 8002e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e56:	2301      	movs	r3, #1
 8002e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e62:	2300      	movs	r3, #0
 8002e64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e66:	2301      	movs	r3, #1
 8002e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e6a:	f107 031c 	add.w	r3, r7, #28
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4879      	ldr	r0, [pc, #484]	; (8003058 <HAL_TIM_PWM_MspInit+0x260>)
 8002e72:	f004 fdc1 	bl	80079f8 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8002e76:	4b79      	ldr	r3, [pc, #484]	; (800305c <HAL_TIM_PWM_MspInit+0x264>)
 8002e78:	4a79      	ldr	r2, [pc, #484]	; (8003060 <HAL_TIM_PWM_MspInit+0x268>)
 8002e7a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8002e7c:	4b77      	ldr	r3, [pc, #476]	; (800305c <HAL_TIM_PWM_MspInit+0x264>)
 8002e7e:	2214      	movs	r2, #20
 8002e80:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e82:	4b76      	ldr	r3, [pc, #472]	; (800305c <HAL_TIM_PWM_MspInit+0x264>)
 8002e84:	2240      	movs	r2, #64	; 0x40
 8002e86:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e88:	4b74      	ldr	r3, [pc, #464]	; (800305c <HAL_TIM_PWM_MspInit+0x264>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002e8e:	4b73      	ldr	r3, [pc, #460]	; (800305c <HAL_TIM_PWM_MspInit+0x264>)
 8002e90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e94:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e96:	4b71      	ldr	r3, [pc, #452]	; (800305c <HAL_TIM_PWM_MspInit+0x264>)
 8002e98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e9c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e9e:	4b6f      	ldr	r3, [pc, #444]	; (800305c <HAL_TIM_PWM_MspInit+0x264>)
 8002ea0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ea4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8002ea6:	4b6d      	ldr	r3, [pc, #436]	; (800305c <HAL_TIM_PWM_MspInit+0x264>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002eac:	4b6b      	ldr	r3, [pc, #428]	; (800305c <HAL_TIM_PWM_MspInit+0x264>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002eb2:	4b6a      	ldr	r3, [pc, #424]	; (800305c <HAL_TIM_PWM_MspInit+0x264>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8002eb8:	4868      	ldr	r0, [pc, #416]	; (800305c <HAL_TIM_PWM_MspInit+0x264>)
 8002eba:	f002 f963 	bl	8005184 <HAL_DMA_Init>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8002ec4:	f7ff fc3a 	bl	800273c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a64      	ldr	r2, [pc, #400]	; (800305c <HAL_TIM_PWM_MspInit+0x264>)
 8002ecc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ece:	4a63      	ldr	r2, [pc, #396]	; (800305c <HAL_TIM_PWM_MspInit+0x264>)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002ed4:	e119      	b.n	800310a <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a62      	ldr	r2, [pc, #392]	; (8003064 <HAL_TIM_PWM_MspInit+0x26c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d16d      	bne.n	8002fbc <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ee0:	4b5c      	ldr	r3, [pc, #368]	; (8003054 <HAL_TIM_PWM_MspInit+0x25c>)
 8002ee2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ee6:	4a5b      	ldr	r2, [pc, #364]	; (8003054 <HAL_TIM_PWM_MspInit+0x25c>)
 8002ee8:	f043 0302 	orr.w	r3, r3, #2
 8002eec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ef0:	4b58      	ldr	r3, [pc, #352]	; (8003054 <HAL_TIM_PWM_MspInit+0x25c>)
 8002ef2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	613b      	str	r3, [r7, #16]
 8002efc:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8002efe:	4b5a      	ldr	r3, [pc, #360]	; (8003068 <HAL_TIM_PWM_MspInit+0x270>)
 8002f00:	4a5a      	ldr	r2, [pc, #360]	; (800306c <HAL_TIM_PWM_MspInit+0x274>)
 8002f02:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8002f04:	4b58      	ldr	r3, [pc, #352]	; (8003068 <HAL_TIM_PWM_MspInit+0x270>)
 8002f06:	2218      	movs	r2, #24
 8002f08:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f0a:	4b57      	ldr	r3, [pc, #348]	; (8003068 <HAL_TIM_PWM_MspInit+0x270>)
 8002f0c:	2240      	movs	r2, #64	; 0x40
 8002f0e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f10:	4b55      	ldr	r3, [pc, #340]	; (8003068 <HAL_TIM_PWM_MspInit+0x270>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002f16:	4b54      	ldr	r3, [pc, #336]	; (8003068 <HAL_TIM_PWM_MspInit+0x270>)
 8002f18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f1c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f1e:	4b52      	ldr	r3, [pc, #328]	; (8003068 <HAL_TIM_PWM_MspInit+0x270>)
 8002f20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f24:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f26:	4b50      	ldr	r3, [pc, #320]	; (8003068 <HAL_TIM_PWM_MspInit+0x270>)
 8002f28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f2c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8002f2e:	4b4e      	ldr	r3, [pc, #312]	; (8003068 <HAL_TIM_PWM_MspInit+0x270>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002f34:	4b4c      	ldr	r3, [pc, #304]	; (8003068 <HAL_TIM_PWM_MspInit+0x270>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f3a:	4b4b      	ldr	r3, [pc, #300]	; (8003068 <HAL_TIM_PWM_MspInit+0x270>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8002f40:	4849      	ldr	r0, [pc, #292]	; (8003068 <HAL_TIM_PWM_MspInit+0x270>)
 8002f42:	f002 f91f 	bl	8005184 <HAL_DMA_Init>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8002f4c:	f7ff fbf6 	bl	800273c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a45      	ldr	r2, [pc, #276]	; (8003068 <HAL_TIM_PWM_MspInit+0x270>)
 8002f54:	629a      	str	r2, [r3, #40]	; 0x28
 8002f56:	4a44      	ldr	r2, [pc, #272]	; (8003068 <HAL_TIM_PWM_MspInit+0x270>)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8002f5c:	4b44      	ldr	r3, [pc, #272]	; (8003070 <HAL_TIM_PWM_MspInit+0x278>)
 8002f5e:	4a45      	ldr	r2, [pc, #276]	; (8003074 <HAL_TIM_PWM_MspInit+0x27c>)
 8002f60:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8002f62:	4b43      	ldr	r3, [pc, #268]	; (8003070 <HAL_TIM_PWM_MspInit+0x278>)
 8002f64:	2217      	movs	r2, #23
 8002f66:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f68:	4b41      	ldr	r3, [pc, #260]	; (8003070 <HAL_TIM_PWM_MspInit+0x278>)
 8002f6a:	2240      	movs	r2, #64	; 0x40
 8002f6c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f6e:	4b40      	ldr	r3, [pc, #256]	; (8003070 <HAL_TIM_PWM_MspInit+0x278>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002f74:	4b3e      	ldr	r3, [pc, #248]	; (8003070 <HAL_TIM_PWM_MspInit+0x278>)
 8002f76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f7a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f7c:	4b3c      	ldr	r3, [pc, #240]	; (8003070 <HAL_TIM_PWM_MspInit+0x278>)
 8002f7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f82:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f84:	4b3a      	ldr	r3, [pc, #232]	; (8003070 <HAL_TIM_PWM_MspInit+0x278>)
 8002f86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f8a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8002f8c:	4b38      	ldr	r3, [pc, #224]	; (8003070 <HAL_TIM_PWM_MspInit+0x278>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002f92:	4b37      	ldr	r3, [pc, #220]	; (8003070 <HAL_TIM_PWM_MspInit+0x278>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f98:	4b35      	ldr	r3, [pc, #212]	; (8003070 <HAL_TIM_PWM_MspInit+0x278>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8002f9e:	4834      	ldr	r0, [pc, #208]	; (8003070 <HAL_TIM_PWM_MspInit+0x278>)
 8002fa0:	f002 f8f0 	bl	8005184 <HAL_DMA_Init>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 8002faa:	f7ff fbc7 	bl	800273c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a2f      	ldr	r2, [pc, #188]	; (8003070 <HAL_TIM_PWM_MspInit+0x278>)
 8002fb2:	625a      	str	r2, [r3, #36]	; 0x24
 8002fb4:	4a2e      	ldr	r2, [pc, #184]	; (8003070 <HAL_TIM_PWM_MspInit+0x278>)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002fba:	e0a6      	b.n	800310a <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a2d      	ldr	r2, [pc, #180]	; (8003078 <HAL_TIM_PWM_MspInit+0x280>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d15e      	bne.n	8003084 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002fc6:	4b23      	ldr	r3, [pc, #140]	; (8003054 <HAL_TIM_PWM_MspInit+0x25c>)
 8002fc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fcc:	4a21      	ldr	r2, [pc, #132]	; (8003054 <HAL_TIM_PWM_MspInit+0x25c>)
 8002fce:	f043 0304 	orr.w	r3, r3, #4
 8002fd2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fd6:	4b1f      	ldr	r3, [pc, #124]	; (8003054 <HAL_TIM_PWM_MspInit+0x25c>)
 8002fd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8002fe4:	4b25      	ldr	r3, [pc, #148]	; (800307c <HAL_TIM_PWM_MspInit+0x284>)
 8002fe6:	4a26      	ldr	r2, [pc, #152]	; (8003080 <HAL_TIM_PWM_MspInit+0x288>)
 8002fe8:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8002fea:	4b24      	ldr	r3, [pc, #144]	; (800307c <HAL_TIM_PWM_MspInit+0x284>)
 8002fec:	221f      	movs	r2, #31
 8002fee:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ff0:	4b22      	ldr	r3, [pc, #136]	; (800307c <HAL_TIM_PWM_MspInit+0x284>)
 8002ff2:	2240      	movs	r2, #64	; 0x40
 8002ff4:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ff6:	4b21      	ldr	r3, [pc, #132]	; (800307c <HAL_TIM_PWM_MspInit+0x284>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002ffc:	4b1f      	ldr	r3, [pc, #124]	; (800307c <HAL_TIM_PWM_MspInit+0x284>)
 8002ffe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003002:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003004:	4b1d      	ldr	r3, [pc, #116]	; (800307c <HAL_TIM_PWM_MspInit+0x284>)
 8003006:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800300a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800300c:	4b1b      	ldr	r3, [pc, #108]	; (800307c <HAL_TIM_PWM_MspInit+0x284>)
 800300e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003012:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8003014:	4b19      	ldr	r3, [pc, #100]	; (800307c <HAL_TIM_PWM_MspInit+0x284>)
 8003016:	2200      	movs	r2, #0
 8003018:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800301a:	4b18      	ldr	r3, [pc, #96]	; (800307c <HAL_TIM_PWM_MspInit+0x284>)
 800301c:	2200      	movs	r2, #0
 800301e:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003020:	4b16      	ldr	r3, [pc, #88]	; (800307c <HAL_TIM_PWM_MspInit+0x284>)
 8003022:	2200      	movs	r2, #0
 8003024:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8003026:	4815      	ldr	r0, [pc, #84]	; (800307c <HAL_TIM_PWM_MspInit+0x284>)
 8003028:	f002 f8ac 	bl	8005184 <HAL_DMA_Init>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 8003032:	f7ff fb83 	bl	800273c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a10      	ldr	r2, [pc, #64]	; (800307c <HAL_TIM_PWM_MspInit+0x284>)
 800303a:	62da      	str	r2, [r3, #44]	; 0x2c
 800303c:	4a0f      	ldr	r2, [pc, #60]	; (800307c <HAL_TIM_PWM_MspInit+0x284>)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003042:	2200      	movs	r2, #0
 8003044:	2100      	movs	r1, #0
 8003046:	201e      	movs	r0, #30
 8003048:	f002 f867 	bl	800511a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800304c:	201e      	movs	r0, #30
 800304e:	f002 f87e 	bl	800514e <HAL_NVIC_EnableIRQ>
}
 8003052:	e05a      	b.n	800310a <HAL_TIM_PWM_MspInit+0x312>
 8003054:	58024400 	.word	0x58024400
 8003058:	58020000 	.word	0x58020000
 800305c:	24001110 	.word	0x24001110
 8003060:	40020028 	.word	0x40020028
 8003064:	40000400 	.word	0x40000400
 8003068:	24001188 	.word	0x24001188
 800306c:	40020058 	.word	0x40020058
 8003070:	24001200 	.word	0x24001200
 8003074:	40020070 	.word	0x40020070
 8003078:	40000800 	.word	0x40000800
 800307c:	24001278 	.word	0x24001278
 8003080:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a22      	ldr	r2, [pc, #136]	; (8003114 <HAL_TIM_PWM_MspInit+0x31c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d13d      	bne.n	800310a <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800308e:	4b22      	ldr	r3, [pc, #136]	; (8003118 <HAL_TIM_PWM_MspInit+0x320>)
 8003090:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003094:	4a20      	ldr	r2, [pc, #128]	; (8003118 <HAL_TIM_PWM_MspInit+0x320>)
 8003096:	f043 0308 	orr.w	r3, r3, #8
 800309a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800309e:	4b1e      	ldr	r3, [pc, #120]	; (8003118 <HAL_TIM_PWM_MspInit+0x320>)
 80030a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	60bb      	str	r3, [r7, #8]
 80030aa:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 80030ac:	4b1b      	ldr	r3, [pc, #108]	; (800311c <HAL_TIM_PWM_MspInit+0x324>)
 80030ae:	4a1c      	ldr	r2, [pc, #112]	; (8003120 <HAL_TIM_PWM_MspInit+0x328>)
 80030b0:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 80030b2:	4b1a      	ldr	r3, [pc, #104]	; (800311c <HAL_TIM_PWM_MspInit+0x324>)
 80030b4:	223a      	movs	r2, #58	; 0x3a
 80030b6:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030b8:	4b18      	ldr	r3, [pc, #96]	; (800311c <HAL_TIM_PWM_MspInit+0x324>)
 80030ba:	2240      	movs	r2, #64	; 0x40
 80030bc:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80030be:	4b17      	ldr	r3, [pc, #92]	; (800311c <HAL_TIM_PWM_MspInit+0x324>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80030c4:	4b15      	ldr	r3, [pc, #84]	; (800311c <HAL_TIM_PWM_MspInit+0x324>)
 80030c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030ca:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030cc:	4b13      	ldr	r3, [pc, #76]	; (800311c <HAL_TIM_PWM_MspInit+0x324>)
 80030ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030d2:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80030d4:	4b11      	ldr	r3, [pc, #68]	; (800311c <HAL_TIM_PWM_MspInit+0x324>)
 80030d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030da:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 80030dc:	4b0f      	ldr	r3, [pc, #60]	; (800311c <HAL_TIM_PWM_MspInit+0x324>)
 80030de:	2200      	movs	r2, #0
 80030e0:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80030e2:	4b0e      	ldr	r3, [pc, #56]	; (800311c <HAL_TIM_PWM_MspInit+0x324>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030e8:	4b0c      	ldr	r3, [pc, #48]	; (800311c <HAL_TIM_PWM_MspInit+0x324>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 80030ee:	480b      	ldr	r0, [pc, #44]	; (800311c <HAL_TIM_PWM_MspInit+0x324>)
 80030f0:	f002 f848 	bl	8005184 <HAL_DMA_Init>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 80030fa:	f7ff fb1f 	bl	800273c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a06      	ldr	r2, [pc, #24]	; (800311c <HAL_TIM_PWM_MspInit+0x324>)
 8003102:	631a      	str	r2, [r3, #48]	; 0x30
 8003104:	4a05      	ldr	r2, [pc, #20]	; (800311c <HAL_TIM_PWM_MspInit+0x324>)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6393      	str	r3, [r2, #56]	; 0x38
}
 800310a:	bf00      	nop
 800310c:	3730      	adds	r7, #48	; 0x30
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40000c00 	.word	0x40000c00
 8003118:	58024400 	.word	0x58024400
 800311c:	240012f0 	.word	0x240012f0
 8003120:	40020040 	.word	0x40020040

08003124 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08c      	sub	sp, #48	; 0x30
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312c:	f107 031c 	add.w	r3, r7, #28
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	605a      	str	r2, [r3, #4]
 8003136:	609a      	str	r2, [r3, #8]
 8003138:	60da      	str	r2, [r3, #12]
 800313a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003144:	d120      	bne.n	8003188 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003146:	4b52      	ldr	r3, [pc, #328]	; (8003290 <HAL_TIM_MspPostInit+0x16c>)
 8003148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800314c:	4a50      	ldr	r2, [pc, #320]	; (8003290 <HAL_TIM_MspPostInit+0x16c>)
 800314e:	f043 0302 	orr.w	r3, r3, #2
 8003152:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003156:	4b4e      	ldr	r3, [pc, #312]	; (8003290 <HAL_TIM_MspPostInit+0x16c>)
 8003158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	61bb      	str	r3, [r7, #24]
 8003162:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003164:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316a:	2302      	movs	r3, #2
 800316c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800316e:	2302      	movs	r3, #2
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003172:	2300      	movs	r3, #0
 8003174:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003176:	2301      	movs	r3, #1
 8003178:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800317a:	f107 031c 	add.w	r3, r7, #28
 800317e:	4619      	mov	r1, r3
 8003180:	4844      	ldr	r0, [pc, #272]	; (8003294 <HAL_TIM_MspPostInit+0x170>)
 8003182:	f004 fc39 	bl	80079f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003186:	e07f      	b.n	8003288 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a42      	ldr	r2, [pc, #264]	; (8003298 <HAL_TIM_MspPostInit+0x174>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d11f      	bne.n	80031d2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003192:	4b3f      	ldr	r3, [pc, #252]	; (8003290 <HAL_TIM_MspPostInit+0x16c>)
 8003194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003198:	4a3d      	ldr	r2, [pc, #244]	; (8003290 <HAL_TIM_MspPostInit+0x16c>)
 800319a:	f043 0302 	orr.w	r3, r3, #2
 800319e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031a2:	4b3b      	ldr	r3, [pc, #236]	; (8003290 <HAL_TIM_MspPostInit+0x16c>)
 80031a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80031b0:	2330      	movs	r3, #48	; 0x30
 80031b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b4:	2302      	movs	r3, #2
 80031b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80031b8:	2302      	movs	r3, #2
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031bc:	2300      	movs	r3, #0
 80031be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031c0:	2302      	movs	r3, #2
 80031c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c4:	f107 031c 	add.w	r3, r7, #28
 80031c8:	4619      	mov	r1, r3
 80031ca:	4832      	ldr	r0, [pc, #200]	; (8003294 <HAL_TIM_MspPostInit+0x170>)
 80031cc:	f004 fc14 	bl	80079f8 <HAL_GPIO_Init>
}
 80031d0:	e05a      	b.n	8003288 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a31      	ldr	r2, [pc, #196]	; (800329c <HAL_TIM_MspPostInit+0x178>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d131      	bne.n	8003240 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031dc:	4b2c      	ldr	r3, [pc, #176]	; (8003290 <HAL_TIM_MspPostInit+0x16c>)
 80031de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031e2:	4a2b      	ldr	r2, [pc, #172]	; (8003290 <HAL_TIM_MspPostInit+0x16c>)
 80031e4:	f043 0308 	orr.w	r3, r3, #8
 80031e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031ec:	4b28      	ldr	r3, [pc, #160]	; (8003290 <HAL_TIM_MspPostInit+0x16c>)
 80031ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031f2:	f003 0308 	and.w	r3, r3, #8
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80031fa:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80031fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003200:	2302      	movs	r3, #2
 8003202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003204:	2300      	movs	r3, #0
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003208:	2300      	movs	r3, #0
 800320a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800320c:	2302      	movs	r3, #2
 800320e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003210:	f107 031c 	add.w	r3, r7, #28
 8003214:	4619      	mov	r1, r3
 8003216:	4822      	ldr	r0, [pc, #136]	; (80032a0 <HAL_TIM_MspPostInit+0x17c>)
 8003218:	f004 fbee 	bl	80079f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800321c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003222:	2302      	movs	r3, #2
 8003224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003226:	2302      	movs	r3, #2
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322a:	2300      	movs	r3, #0
 800322c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800322e:	2302      	movs	r3, #2
 8003230:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003232:	f107 031c 	add.w	r3, r7, #28
 8003236:	4619      	mov	r1, r3
 8003238:	4819      	ldr	r0, [pc, #100]	; (80032a0 <HAL_TIM_MspPostInit+0x17c>)
 800323a:	f004 fbdd 	bl	80079f8 <HAL_GPIO_Init>
}
 800323e:	e023      	b.n	8003288 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a17      	ldr	r2, [pc, #92]	; (80032a4 <HAL_TIM_MspPostInit+0x180>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d11e      	bne.n	8003288 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800324a:	4b11      	ldr	r3, [pc, #68]	; (8003290 <HAL_TIM_MspPostInit+0x16c>)
 800324c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003250:	4a0f      	ldr	r2, [pc, #60]	; (8003290 <HAL_TIM_MspPostInit+0x16c>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800325a:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <HAL_TIM_MspPostInit+0x16c>)
 800325c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003268:	2308      	movs	r3, #8
 800326a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326c:	2302      	movs	r3, #2
 800326e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003270:	2302      	movs	r3, #2
 8003272:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003274:	2300      	movs	r3, #0
 8003276:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003278:	2302      	movs	r3, #2
 800327a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800327c:	f107 031c 	add.w	r3, r7, #28
 8003280:	4619      	mov	r1, r3
 8003282:	4809      	ldr	r0, [pc, #36]	; (80032a8 <HAL_TIM_MspPostInit+0x184>)
 8003284:	f004 fbb8 	bl	80079f8 <HAL_GPIO_Init>
}
 8003288:	bf00      	nop
 800328a:	3730      	adds	r7, #48	; 0x30
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	58024400 	.word	0x58024400
 8003294:	58020400 	.word	0x58020400
 8003298:	40000400 	.word	0x40000400
 800329c:	40000800 	.word	0x40000800
 80032a0:	58020c00 	.word	0x58020c00
 80032a4:	40000c00 	.word	0x40000c00
 80032a8:	58020000 	.word	0x58020000

080032ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b0ba      	sub	sp, #232	; 0xe8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	605a      	str	r2, [r3, #4]
 80032be:	609a      	str	r2, [r3, #8]
 80032c0:	60da      	str	r2, [r3, #12]
 80032c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032c4:	f107 0318 	add.w	r3, r7, #24
 80032c8:	22b8      	movs	r2, #184	; 0xb8
 80032ca:	2100      	movs	r1, #0
 80032cc:	4618      	mov	r0, r3
 80032ce:	f013 fd4b 	bl	8016d68 <memset>
  if(huart->Instance==UART4)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a4d      	ldr	r2, [pc, #308]	; (800340c <HAL_UART_MspInit+0x160>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d147      	bne.n	800336c <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80032dc:	f04f 0202 	mov.w	r2, #2
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80032e8:	2300      	movs	r3, #0
 80032ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032ee:	f107 0318 	add.w	r3, r7, #24
 80032f2:	4618      	mov	r0, r3
 80032f4:	f007 f954 	bl	800a5a0 <HAL_RCCEx_PeriphCLKConfig>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80032fe:	f7ff fa1d 	bl	800273c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003302:	4b43      	ldr	r3, [pc, #268]	; (8003410 <HAL_UART_MspInit+0x164>)
 8003304:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003308:	4a41      	ldr	r2, [pc, #260]	; (8003410 <HAL_UART_MspInit+0x164>)
 800330a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800330e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003312:	4b3f      	ldr	r3, [pc, #252]	; (8003410 <HAL_UART_MspInit+0x164>)
 8003314:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003318:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003320:	4b3b      	ldr	r3, [pc, #236]	; (8003410 <HAL_UART_MspInit+0x164>)
 8003322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003326:	4a3a      	ldr	r2, [pc, #232]	; (8003410 <HAL_UART_MspInit+0x164>)
 8003328:	f043 0302 	orr.w	r3, r3, #2
 800332c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003330:	4b37      	ldr	r3, [pc, #220]	; (8003410 <HAL_UART_MspInit+0x164>)
 8003332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800333e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003342:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003346:	2302      	movs	r3, #2
 8003348:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334c:	2300      	movs	r3, #0
 800334e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003352:	2300      	movs	r3, #0
 8003354:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003358:	2308      	movs	r3, #8
 800335a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800335e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003362:	4619      	mov	r1, r3
 8003364:	482b      	ldr	r0, [pc, #172]	; (8003414 <HAL_UART_MspInit+0x168>)
 8003366:	f004 fb47 	bl	80079f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800336a:	e04a      	b.n	8003402 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a29      	ldr	r2, [pc, #164]	; (8003418 <HAL_UART_MspInit+0x16c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d145      	bne.n	8003402 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003376:	f04f 0201 	mov.w	r2, #1
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003382:	2300      	movs	r3, #0
 8003384:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003388:	f107 0318 	add.w	r3, r7, #24
 800338c:	4618      	mov	r0, r3
 800338e:	f007 f907 	bl	800a5a0 <HAL_RCCEx_PeriphCLKConfig>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003398:	f7ff f9d0 	bl	800273c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800339c:	4b1c      	ldr	r3, [pc, #112]	; (8003410 <HAL_UART_MspInit+0x164>)
 800339e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033a2:	4a1b      	ldr	r2, [pc, #108]	; (8003410 <HAL_UART_MspInit+0x164>)
 80033a4:	f043 0320 	orr.w	r3, r3, #32
 80033a8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80033ac:	4b18      	ldr	r3, [pc, #96]	; (8003410 <HAL_UART_MspInit+0x164>)
 80033ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033b2:	f003 0320 	and.w	r3, r3, #32
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033ba:	4b15      	ldr	r3, [pc, #84]	; (8003410 <HAL_UART_MspInit+0x164>)
 80033bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033c0:	4a13      	ldr	r2, [pc, #76]	; (8003410 <HAL_UART_MspInit+0x164>)
 80033c2:	f043 0304 	orr.w	r3, r3, #4
 80033c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033ca:	4b11      	ldr	r3, [pc, #68]	; (8003410 <HAL_UART_MspInit+0x164>)
 80033cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80033d8:	23c0      	movs	r3, #192	; 0xc0
 80033da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033de:	2302      	movs	r3, #2
 80033e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e4:	2300      	movs	r3, #0
 80033e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ea:	2300      	movs	r3, #0
 80033ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80033f0:	2307      	movs	r3, #7
 80033f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033f6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80033fa:	4619      	mov	r1, r3
 80033fc:	4807      	ldr	r0, [pc, #28]	; (800341c <HAL_UART_MspInit+0x170>)
 80033fe:	f004 fafb 	bl	80079f8 <HAL_GPIO_Init>
}
 8003402:	bf00      	nop
 8003404:	37e8      	adds	r7, #232	; 0xe8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40004c00 	.word	0x40004c00
 8003410:	58024400 	.word	0x58024400
 8003414:	58020400 	.word	0x58020400
 8003418:	40011400 	.word	0x40011400
 800341c:	58020800 	.word	0x58020800

08003420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003424:	e7fe      	b.n	8003424 <NMI_Handler+0x4>

08003426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003426:	b480      	push	{r7}
 8003428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800342a:	e7fe      	b.n	800342a <HardFault_Handler+0x4>

0800342c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003430:	e7fe      	b.n	8003430 <MemManage_Handler+0x4>

08003432 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003432:	b480      	push	{r7}
 8003434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003436:	e7fe      	b.n	8003436 <BusFault_Handler+0x4>

08003438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800343c:	e7fe      	b.n	800343c <UsageFault_Handler+0x4>

0800343e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800343e:	b480      	push	{r7}
 8003440:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003442:	bf00      	nop
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003450:	bf00      	nop
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800345a:	b480      	push	{r7}
 800345c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800345e:	bf00      	nop
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800346c:	f000 f9b0 	bl	80037d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003470:	bf00      	nop
 8003472:	bd80      	pop	{r7, pc}

08003474 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8003478:	4802      	ldr	r0, [pc, #8]	; (8003484 <DMA1_Stream0_IRQHandler+0x10>)
 800347a:	f002 fc47 	bl	8005d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	24001278 	.word	0x24001278

08003488 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 800348c:	4802      	ldr	r0, [pc, #8]	; (8003498 <DMA1_Stream1_IRQHandler+0x10>)
 800348e:	f002 fc3d 	bl	8005d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003492:	bf00      	nop
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	24001110 	.word	0x24001110

0800349c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 80034a0:	4802      	ldr	r0, [pc, #8]	; (80034ac <DMA1_Stream2_IRQHandler+0x10>)
 80034a2:	f002 fc33 	bl	8005d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	240012f0 	.word	0x240012f0

080034b0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 80034b4:	4802      	ldr	r0, [pc, #8]	; (80034c0 <DMA1_Stream3_IRQHandler+0x10>)
 80034b6:	f002 fc29 	bl	8005d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	24001188 	.word	0x24001188

080034c4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 80034c8:	4802      	ldr	r0, [pc, #8]	; (80034d4 <DMA1_Stream4_IRQHandler+0x10>)
 80034ca:	f002 fc1f 	bl	8005d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80034ce:	bf00      	nop
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	24001200 	.word	0x24001200

080034d8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80034dc:	4802      	ldr	r0, [pc, #8]	; (80034e8 <DMA1_Stream5_IRQHandler+0x10>)
 80034de:	f002 fc15 	bl	8005d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80034e2:	bf00      	nop
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	24000be8 	.word	0x24000be8

080034ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80034f0:	4802      	ldr	r0, [pc, #8]	; (80034fc <TIM4_IRQHandler+0x10>)
 80034f2:	f00c f9df 	bl	800f8b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80034f6:	bf00      	nop
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	24001078 	.word	0x24001078

08003500 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003504:	4802      	ldr	r0, [pc, #8]	; (8003510 <DMA2_Stream7_IRQHandler+0x10>)
 8003506:	f002 fc01 	bl	8005d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800350a:	bf00      	nop
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	24000c60 	.word	0x24000c60

08003514 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003518:	4802      	ldr	r0, [pc, #8]	; (8003524 <OTG_HS_IRQHandler+0x10>)
 800351a:	f004 fec7 	bl	80082ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800351e:	bf00      	nop
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	24002994 	.word	0x24002994

08003528 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 800352c:	4802      	ldr	r0, [pc, #8]	; (8003538 <SDMMC2_IRQHandler+0x10>)
 800352e:	f009 fe8d 	bl	800d24c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8003532:	bf00      	nop
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	24000dcc 	.word	0x24000dcc

0800353c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003544:	4a14      	ldr	r2, [pc, #80]	; (8003598 <_sbrk+0x5c>)
 8003546:	4b15      	ldr	r3, [pc, #84]	; (800359c <_sbrk+0x60>)
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003550:	4b13      	ldr	r3, [pc, #76]	; (80035a0 <_sbrk+0x64>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d102      	bne.n	800355e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003558:	4b11      	ldr	r3, [pc, #68]	; (80035a0 <_sbrk+0x64>)
 800355a:	4a12      	ldr	r2, [pc, #72]	; (80035a4 <_sbrk+0x68>)
 800355c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800355e:	4b10      	ldr	r3, [pc, #64]	; (80035a0 <_sbrk+0x64>)
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4413      	add	r3, r2
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	429a      	cmp	r2, r3
 800356a:	d207      	bcs.n	800357c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800356c:	f013 fbc4 	bl	8016cf8 <__errno>
 8003570:	4603      	mov	r3, r0
 8003572:	220c      	movs	r2, #12
 8003574:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003576:	f04f 33ff 	mov.w	r3, #4294967295
 800357a:	e009      	b.n	8003590 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800357c:	4b08      	ldr	r3, [pc, #32]	; (80035a0 <_sbrk+0x64>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003582:	4b07      	ldr	r3, [pc, #28]	; (80035a0 <_sbrk+0x64>)
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4413      	add	r3, r2
 800358a:	4a05      	ldr	r2, [pc, #20]	; (80035a0 <_sbrk+0x64>)
 800358c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800358e:	68fb      	ldr	r3, [r7, #12]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	24050000 	.word	0x24050000
 800359c:	00000800 	.word	0x00000800
 80035a0:	24001490 	.word	0x24001490
 80035a4:	240030d0 	.word	0x240030d0

080035a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80035ac:	4b32      	ldr	r3, [pc, #200]	; (8003678 <SystemInit+0xd0>)
 80035ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b2:	4a31      	ldr	r2, [pc, #196]	; (8003678 <SystemInit+0xd0>)
 80035b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80035bc:	4b2f      	ldr	r3, [pc, #188]	; (800367c <SystemInit+0xd4>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	2b06      	cmp	r3, #6
 80035c6:	d807      	bhi.n	80035d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80035c8:	4b2c      	ldr	r3, [pc, #176]	; (800367c <SystemInit+0xd4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f023 030f 	bic.w	r3, r3, #15
 80035d0:	4a2a      	ldr	r2, [pc, #168]	; (800367c <SystemInit+0xd4>)
 80035d2:	f043 0307 	orr.w	r3, r3, #7
 80035d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80035d8:	4b29      	ldr	r3, [pc, #164]	; (8003680 <SystemInit+0xd8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a28      	ldr	r2, [pc, #160]	; (8003680 <SystemInit+0xd8>)
 80035de:	f043 0301 	orr.w	r3, r3, #1
 80035e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80035e4:	4b26      	ldr	r3, [pc, #152]	; (8003680 <SystemInit+0xd8>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80035ea:	4b25      	ldr	r3, [pc, #148]	; (8003680 <SystemInit+0xd8>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	4924      	ldr	r1, [pc, #144]	; (8003680 <SystemInit+0xd8>)
 80035f0:	4b24      	ldr	r3, [pc, #144]	; (8003684 <SystemInit+0xdc>)
 80035f2:	4013      	ands	r3, r2
 80035f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80035f6:	4b21      	ldr	r3, [pc, #132]	; (800367c <SystemInit+0xd4>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d007      	beq.n	8003612 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003602:	4b1e      	ldr	r3, [pc, #120]	; (800367c <SystemInit+0xd4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f023 030f 	bic.w	r3, r3, #15
 800360a:	4a1c      	ldr	r2, [pc, #112]	; (800367c <SystemInit+0xd4>)
 800360c:	f043 0307 	orr.w	r3, r3, #7
 8003610:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003612:	4b1b      	ldr	r3, [pc, #108]	; (8003680 <SystemInit+0xd8>)
 8003614:	2200      	movs	r2, #0
 8003616:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003618:	4b19      	ldr	r3, [pc, #100]	; (8003680 <SystemInit+0xd8>)
 800361a:	2200      	movs	r2, #0
 800361c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800361e:	4b18      	ldr	r3, [pc, #96]	; (8003680 <SystemInit+0xd8>)
 8003620:	2200      	movs	r2, #0
 8003622:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003624:	4b16      	ldr	r3, [pc, #88]	; (8003680 <SystemInit+0xd8>)
 8003626:	4a18      	ldr	r2, [pc, #96]	; (8003688 <SystemInit+0xe0>)
 8003628:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800362a:	4b15      	ldr	r3, [pc, #84]	; (8003680 <SystemInit+0xd8>)
 800362c:	4a17      	ldr	r2, [pc, #92]	; (800368c <SystemInit+0xe4>)
 800362e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003630:	4b13      	ldr	r3, [pc, #76]	; (8003680 <SystemInit+0xd8>)
 8003632:	4a17      	ldr	r2, [pc, #92]	; (8003690 <SystemInit+0xe8>)
 8003634:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003636:	4b12      	ldr	r3, [pc, #72]	; (8003680 <SystemInit+0xd8>)
 8003638:	2200      	movs	r2, #0
 800363a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800363c:	4b10      	ldr	r3, [pc, #64]	; (8003680 <SystemInit+0xd8>)
 800363e:	4a14      	ldr	r2, [pc, #80]	; (8003690 <SystemInit+0xe8>)
 8003640:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003642:	4b0f      	ldr	r3, [pc, #60]	; (8003680 <SystemInit+0xd8>)
 8003644:	2200      	movs	r2, #0
 8003646:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003648:	4b0d      	ldr	r3, [pc, #52]	; (8003680 <SystemInit+0xd8>)
 800364a:	4a11      	ldr	r2, [pc, #68]	; (8003690 <SystemInit+0xe8>)
 800364c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800364e:	4b0c      	ldr	r3, [pc, #48]	; (8003680 <SystemInit+0xd8>)
 8003650:	2200      	movs	r2, #0
 8003652:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003654:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <SystemInit+0xd8>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a09      	ldr	r2, [pc, #36]	; (8003680 <SystemInit+0xd8>)
 800365a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800365e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003660:	4b07      	ldr	r3, [pc, #28]	; (8003680 <SystemInit+0xd8>)
 8003662:	2200      	movs	r2, #0
 8003664:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003666:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <SystemInit+0xec>)
 8003668:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800366c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800366e:	bf00      	nop
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	e000ed00 	.word	0xe000ed00
 800367c:	52002000 	.word	0x52002000
 8003680:	58024400 	.word	0x58024400
 8003684:	eaf6ed7f 	.word	0xeaf6ed7f
 8003688:	02020200 	.word	0x02020200
 800368c:	01ff0000 	.word	0x01ff0000
 8003690:	01010280 	.word	0x01010280
 8003694:	52004000 	.word	0x52004000

08003698 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003698:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800369c:	f7ff ff84 	bl	80035a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036a0:	480c      	ldr	r0, [pc, #48]	; (80036d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80036a2:	490d      	ldr	r1, [pc, #52]	; (80036d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80036a4:	4a0d      	ldr	r2, [pc, #52]	; (80036dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80036a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036a8:	e002      	b.n	80036b0 <LoopCopyDataInit>

080036aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036ae:	3304      	adds	r3, #4

080036b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036b4:	d3f9      	bcc.n	80036aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036b6:	4a0a      	ldr	r2, [pc, #40]	; (80036e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80036b8:	4c0a      	ldr	r4, [pc, #40]	; (80036e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80036ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036bc:	e001      	b.n	80036c2 <LoopFillZerobss>

080036be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036c0:	3204      	adds	r2, #4

080036c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036c4:	d3fb      	bcc.n	80036be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036c6:	f013 fb1d 	bl	8016d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036ca:	f7fd fd1d 	bl	8001108 <main>
  bx  lr
 80036ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80036d0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80036d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80036d8:	24000164 	.word	0x24000164
  ldr r2, =_sidata
 80036dc:	080183d8 	.word	0x080183d8
  ldr r2, =_sbss
 80036e0:	24000164 	.word	0x24000164
  ldr r4, =_ebss
 80036e4:	240030d0 	.word	0x240030d0

080036e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036e8:	e7fe      	b.n	80036e8 <ADC3_IRQHandler>
	...

080036ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036f2:	2003      	movs	r0, #3
 80036f4:	f001 fd06 	bl	8005104 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80036f8:	f006 fd7c 	bl	800a1f4 <HAL_RCC_GetSysClockFreq>
 80036fc:	4602      	mov	r2, r0
 80036fe:	4b15      	ldr	r3, [pc, #84]	; (8003754 <HAL_Init+0x68>)
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	0a1b      	lsrs	r3, r3, #8
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	4913      	ldr	r1, [pc, #76]	; (8003758 <HAL_Init+0x6c>)
 800370a:	5ccb      	ldrb	r3, [r1, r3]
 800370c:	f003 031f 	and.w	r3, r3, #31
 8003710:	fa22 f303 	lsr.w	r3, r2, r3
 8003714:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003716:	4b0f      	ldr	r3, [pc, #60]	; (8003754 <HAL_Init+0x68>)
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	4a0e      	ldr	r2, [pc, #56]	; (8003758 <HAL_Init+0x6c>)
 8003720:	5cd3      	ldrb	r3, [r2, r3]
 8003722:	f003 031f 	and.w	r3, r3, #31
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	fa22 f303 	lsr.w	r3, r2, r3
 800372c:	4a0b      	ldr	r2, [pc, #44]	; (800375c <HAL_Init+0x70>)
 800372e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003730:	4a0b      	ldr	r2, [pc, #44]	; (8003760 <HAL_Init+0x74>)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003736:	200f      	movs	r0, #15
 8003738:	f000 f814 	bl	8003764 <HAL_InitTick>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e002      	b.n	800374c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003746:	f7fe ffff 	bl	8002748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	58024400 	.word	0x58024400
 8003758:	080181c4 	.word	0x080181c4
 800375c:	24000004 	.word	0x24000004
 8003760:	24000000 	.word	0x24000000

08003764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800376c:	4b15      	ldr	r3, [pc, #84]	; (80037c4 <HAL_InitTick+0x60>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e021      	b.n	80037bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003778:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <HAL_InitTick+0x64>)
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <HAL_InitTick+0x60>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	4619      	mov	r1, r3
 8003782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003786:	fbb3 f3f1 	udiv	r3, r3, r1
 800378a:	fbb2 f3f3 	udiv	r3, r2, r3
 800378e:	4618      	mov	r0, r3
 8003790:	f001 fceb 	bl	800516a <HAL_SYSTICK_Config>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e00e      	b.n	80037bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b0f      	cmp	r3, #15
 80037a2:	d80a      	bhi.n	80037ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037a4:	2200      	movs	r2, #0
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	f04f 30ff 	mov.w	r0, #4294967295
 80037ac:	f001 fcb5 	bl	800511a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037b0:	4a06      	ldr	r2, [pc, #24]	; (80037cc <HAL_InitTick+0x68>)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
 80037b8:	e000      	b.n	80037bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	2400000c 	.word	0x2400000c
 80037c8:	24000000 	.word	0x24000000
 80037cc:	24000008 	.word	0x24000008

080037d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80037d4:	4b06      	ldr	r3, [pc, #24]	; (80037f0 <HAL_IncTick+0x20>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	461a      	mov	r2, r3
 80037da:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <HAL_IncTick+0x24>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4413      	add	r3, r2
 80037e0:	4a04      	ldr	r2, [pc, #16]	; (80037f4 <HAL_IncTick+0x24>)
 80037e2:	6013      	str	r3, [r2, #0]
}
 80037e4:	bf00      	nop
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	2400000c 	.word	0x2400000c
 80037f4:	24001494 	.word	0x24001494

080037f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  return uwTick;
 80037fc:	4b03      	ldr	r3, [pc, #12]	; (800380c <HAL_GetTick+0x14>)
 80037fe:	681b      	ldr	r3, [r3, #0]
}
 8003800:	4618      	mov	r0, r3
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	24001494 	.word	0x24001494

08003810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003818:	f7ff ffee 	bl	80037f8 <HAL_GetTick>
 800381c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003828:	d005      	beq.n	8003836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800382a:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <HAL_Delay+0x44>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4413      	add	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003836:	bf00      	nop
 8003838:	f7ff ffde 	bl	80037f8 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	429a      	cmp	r2, r3
 8003846:	d8f7      	bhi.n	8003838 <HAL_Delay+0x28>
  {
  }
}
 8003848:	bf00      	nop
 800384a:	bf00      	nop
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	2400000c 	.word	0x2400000c

08003858 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003862:	4b07      	ldr	r3, [pc, #28]	; (8003880 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	43db      	mvns	r3, r3
 800386a:	401a      	ands	r2, r3
 800386c:	4904      	ldr	r1, [pc, #16]	; (8003880 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	4313      	orrs	r3, r2
 8003872:	604b      	str	r3, [r1, #4]
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	58000400 	.word	0x58000400

08003884 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	431a      	orrs	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	609a      	str	r2, [r3, #8]
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
 80038b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	609a      	str	r2, [r3, #8]
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
 80038f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	3360      	adds	r3, #96	; 0x60
 80038fe:	461a      	mov	r2, r3
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4a10      	ldr	r2, [pc, #64]	; (800394c <LL_ADC_SetOffset+0x60>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d10b      	bne.n	8003928 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	4313      	orrs	r3, r2
 800391e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003926:	e00b      	b.n	8003940 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	430b      	orrs	r3, r1
 800393a:	431a      	orrs	r2, r3
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	601a      	str	r2, [r3, #0]
}
 8003940:	bf00      	nop
 8003942:	371c      	adds	r7, #28
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	58026000 	.word	0x58026000

08003950 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3360      	adds	r3, #96	; 0x60
 800395e:	461a      	mov	r2, r3
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003970:	4618      	mov	r0, r3
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f003 031f 	and.w	r3, r3, #31
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	fa01 f303 	lsl.w	r3, r1, r3
 800399c:	431a      	orrs	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	611a      	str	r2, [r3, #16]
}
 80039a2:	bf00      	nop
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
	...

080039b0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	4a0c      	ldr	r2, [pc, #48]	; (80039f0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00e      	beq.n	80039e2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	3360      	adds	r3, #96	; 0x60
 80039c8:	461a      	mov	r2, r3
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	431a      	orrs	r2, r3
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	601a      	str	r2, [r3, #0]
  }
}
 80039e2:	bf00      	nop
 80039e4:	371c      	adds	r7, #28
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	58026000 	.word	0x58026000

080039f4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4a0c      	ldr	r2, [pc, #48]	; (8003a34 <LL_ADC_SetOffsetSaturation+0x40>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d10e      	bne.n	8003a26 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	3360      	adds	r3, #96	; 0x60
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	431a      	orrs	r2, r3
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003a26:	bf00      	nop
 8003a28:	371c      	adds	r7, #28
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	58026000 	.word	0x58026000

08003a38 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4a0c      	ldr	r2, [pc, #48]	; (8003a78 <LL_ADC_SetOffsetSign+0x40>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d10e      	bne.n	8003a6a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	3360      	adds	r3, #96	; 0x60
 8003a50:	461a      	mov	r2, r3
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	431a      	orrs	r2, r3
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003a6a:	bf00      	nop
 8003a6c:	371c      	adds	r7, #28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	58026000 	.word	0x58026000

08003a7c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	3360      	adds	r3, #96	; 0x60
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4a0c      	ldr	r2, [pc, #48]	; (8003acc <LL_ADC_SetOffsetState+0x50>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d108      	bne.n	8003ab0 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003aae:	e007      	b.n	8003ac0 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	431a      	orrs	r2, r3
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	601a      	str	r2, [r3, #0]
}
 8003ac0:	bf00      	nop
 8003ac2:	371c      	adds	r7, #28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	58026000 	.word	0x58026000

08003ad0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	3330      	adds	r3, #48	; 0x30
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	0a1b      	lsrs	r3, r3, #8
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	f003 030c 	and.w	r3, r3, #12
 8003aec:	4413      	add	r3, r2
 8003aee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f003 031f 	and.w	r3, r3, #31
 8003afa:	211f      	movs	r1, #31
 8003afc:	fa01 f303 	lsl.w	r3, r1, r3
 8003b00:	43db      	mvns	r3, r3
 8003b02:	401a      	ands	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	0e9b      	lsrs	r3, r3, #26
 8003b08:	f003 011f 	and.w	r1, r3, #31
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f003 031f 	and.w	r3, r3, #31
 8003b12:	fa01 f303 	lsl.w	r3, r1, r3
 8003b16:	431a      	orrs	r2, r3
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b1c:	bf00      	nop
 8003b1e:	371c      	adds	r7, #28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	3314      	adds	r3, #20
 8003b38:	461a      	mov	r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	0e5b      	lsrs	r3, r3, #25
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	4413      	add	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	0d1b      	lsrs	r3, r3, #20
 8003b50:	f003 031f 	and.w	r3, r3, #31
 8003b54:	2107      	movs	r1, #7
 8003b56:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	401a      	ands	r2, r3
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	0d1b      	lsrs	r3, r3, #20
 8003b62:	f003 031f 	and.w	r3, r3, #31
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003b72:	bf00      	nop
 8003b74:	371c      	adds	r7, #28
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
	...

08003b80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4a1a      	ldr	r2, [pc, #104]	; (8003bf8 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d115      	bne.n	8003bc0 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	401a      	ands	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f003 0318 	and.w	r3, r3, #24
 8003baa:	4914      	ldr	r1, [pc, #80]	; (8003bfc <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003bac:	40d9      	lsrs	r1, r3
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	400b      	ands	r3, r1
 8003bb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003bbe:	e014      	b.n	8003bea <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	401a      	ands	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f003 0318 	and.w	r3, r3, #24
 8003bd6:	4909      	ldr	r1, [pc, #36]	; (8003bfc <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003bd8:	40d9      	lsrs	r1, r3
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	400b      	ands	r3, r1
 8003bde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003be2:	431a      	orrs	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003bea:	bf00      	nop
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	58026000 	.word	0x58026000
 8003bfc:	000fffff 	.word	0x000fffff

08003c00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6093      	str	r3, [r2, #8]
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	5fffffc0 	.word	0x5fffffc0

08003c24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c38:	d101      	bne.n	8003c3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <LL_ADC_EnableInternalRegulator+0x24>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	6fffffc0 	.word	0x6fffffc0

08003c74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c88:	d101      	bne.n	8003c8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d101      	bne.n	8003cb4 <LL_ADC_IsEnabled+0x18>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <LL_ADC_IsEnabled+0x1a>
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 0304 	and.w	r3, r3, #4
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d101      	bne.n	8003cda <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d101      	bne.n	8003d00 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e000      	b.n	8003d02 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
	...

08003d10 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d10:	b590      	push	{r4, r7, lr}
 8003d12:	b089      	sub	sp, #36	; 0x24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e1ee      	b.n	8004108 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d109      	bne.n	8003d4c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7fe fd1f 	bl	800277c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff ff67 	bl	8003c24 <LL_ADC_IsDeepPowerDownEnabled>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d004      	beq.n	8003d66 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff ff4d 	bl	8003c00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff ff82 	bl	8003c74 <LL_ADC_IsInternalRegulatorEnabled>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d114      	bne.n	8003da0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff ff66 	bl	8003c4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d80:	4b8e      	ldr	r3, [pc, #568]	; (8003fbc <HAL_ADC_Init+0x2ac>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	099b      	lsrs	r3, r3, #6
 8003d86:	4a8e      	ldr	r2, [pc, #568]	; (8003fc0 <HAL_ADC_Init+0x2b0>)
 8003d88:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8c:	099b      	lsrs	r3, r3, #6
 8003d8e:	3301      	adds	r3, #1
 8003d90:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003d92:	e002      	b.n	8003d9a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1f9      	bne.n	8003d94 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff ff65 	bl	8003c74 <LL_ADC_IsInternalRegulatorEnabled>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10d      	bne.n	8003dcc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db4:	f043 0210 	orr.w	r2, r3, #16
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dc0:	f043 0201 	orr.w	r2, r3, #1
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff ff76 	bl	8003cc2 <LL_ADC_REG_IsConversionOngoing>
 8003dd6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ddc:	f003 0310 	and.w	r3, r3, #16
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f040 8188 	bne.w	80040f6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f040 8184 	bne.w	80040f6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003df2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003df6:	f043 0202 	orr.w	r2, r3, #2
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7ff ff4a 	bl	8003c9c <LL_ADC_IsEnabled>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d136      	bne.n	8003e7c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a6c      	ldr	r2, [pc, #432]	; (8003fc4 <HAL_ADC_Init+0x2b4>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d004      	beq.n	8003e22 <HAL_ADC_Init+0x112>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a6a      	ldr	r2, [pc, #424]	; (8003fc8 <HAL_ADC_Init+0x2b8>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d10e      	bne.n	8003e40 <HAL_ADC_Init+0x130>
 8003e22:	4868      	ldr	r0, [pc, #416]	; (8003fc4 <HAL_ADC_Init+0x2b4>)
 8003e24:	f7ff ff3a 	bl	8003c9c <LL_ADC_IsEnabled>
 8003e28:	4604      	mov	r4, r0
 8003e2a:	4867      	ldr	r0, [pc, #412]	; (8003fc8 <HAL_ADC_Init+0x2b8>)
 8003e2c:	f7ff ff36 	bl	8003c9c <LL_ADC_IsEnabled>
 8003e30:	4603      	mov	r3, r0
 8003e32:	4323      	orrs	r3, r4
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	bf0c      	ite	eq
 8003e38:	2301      	moveq	r3, #1
 8003e3a:	2300      	movne	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	e008      	b.n	8003e52 <HAL_ADC_Init+0x142>
 8003e40:	4862      	ldr	r0, [pc, #392]	; (8003fcc <HAL_ADC_Init+0x2bc>)
 8003e42:	f7ff ff2b 	bl	8003c9c <LL_ADC_IsEnabled>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	bf0c      	ite	eq
 8003e4c:	2301      	moveq	r3, #1
 8003e4e:	2300      	movne	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d012      	beq.n	8003e7c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a5a      	ldr	r2, [pc, #360]	; (8003fc4 <HAL_ADC_Init+0x2b4>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d004      	beq.n	8003e6a <HAL_ADC_Init+0x15a>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a58      	ldr	r2, [pc, #352]	; (8003fc8 <HAL_ADC_Init+0x2b8>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d101      	bne.n	8003e6e <HAL_ADC_Init+0x15e>
 8003e6a:	4a59      	ldr	r2, [pc, #356]	; (8003fd0 <HAL_ADC_Init+0x2c0>)
 8003e6c:	e000      	b.n	8003e70 <HAL_ADC_Init+0x160>
 8003e6e:	4a59      	ldr	r2, [pc, #356]	; (8003fd4 <HAL_ADC_Init+0x2c4>)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	4619      	mov	r1, r3
 8003e76:	4610      	mov	r0, r2
 8003e78:	f7ff fd04 	bl	8003884 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a52      	ldr	r2, [pc, #328]	; (8003fcc <HAL_ADC_Init+0x2bc>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d129      	bne.n	8003eda <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	7e5b      	ldrb	r3, [r3, #25]
 8003e8a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003e90:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003e96:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d013      	beq.n	8003ec8 <HAL_ADC_Init+0x1b8>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	2b0c      	cmp	r3, #12
 8003ea6:	d00d      	beq.n	8003ec4 <HAL_ADC_Init+0x1b4>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	2b1c      	cmp	r3, #28
 8003eae:	d007      	beq.n	8003ec0 <HAL_ADC_Init+0x1b0>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	2b18      	cmp	r3, #24
 8003eb6:	d101      	bne.n	8003ebc <HAL_ADC_Init+0x1ac>
 8003eb8:	2318      	movs	r3, #24
 8003eba:	e006      	b.n	8003eca <HAL_ADC_Init+0x1ba>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	e004      	b.n	8003eca <HAL_ADC_Init+0x1ba>
 8003ec0:	2310      	movs	r3, #16
 8003ec2:	e002      	b.n	8003eca <HAL_ADC_Init+0x1ba>
 8003ec4:	2308      	movs	r3, #8
 8003ec6:	e000      	b.n	8003eca <HAL_ADC_Init+0x1ba>
 8003ec8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003eca:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ed2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
 8003ed8:	e00e      	b.n	8003ef8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	7e5b      	ldrb	r3, [r3, #25]
 8003ede:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ee4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003eea:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ef2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d106      	bne.n	8003f10 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	3b01      	subs	r3, #1
 8003f08:	045b      	lsls	r3, r3, #17
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d009      	beq.n	8003f2c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f24:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a26      	ldr	r2, [pc, #152]	; (8003fcc <HAL_ADC_Init+0x2bc>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d115      	bne.n	8003f62 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	4b26      	ldr	r3, [pc, #152]	; (8003fd8 <HAL_ADC_Init+0x2c8>)
 8003f3e:	4013      	ands	r3, r2
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6812      	ldr	r2, [r2, #0]
 8003f44:	69b9      	ldr	r1, [r7, #24]
 8003f46:	430b      	orrs	r3, r1
 8003f48:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	611a      	str	r2, [r3, #16]
 8003f60:	e009      	b.n	8003f76 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68da      	ldr	r2, [r3, #12]
 8003f68:	4b1c      	ldr	r3, [pc, #112]	; (8003fdc <HAL_ADC_Init+0x2cc>)
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6812      	ldr	r2, [r2, #0]
 8003f70:	69b9      	ldr	r1, [r7, #24]
 8003f72:	430b      	orrs	r3, r1
 8003f74:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff fea1 	bl	8003cc2 <LL_ADC_REG_IsConversionOngoing>
 8003f80:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff feae 	bl	8003ce8 <LL_ADC_INJ_IsConversionOngoing>
 8003f8c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f040 808e 	bne.w	80040b2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f040 808a 	bne.w	80040b2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a0a      	ldr	r2, [pc, #40]	; (8003fcc <HAL_ADC_Init+0x2bc>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d11b      	bne.n	8003fe0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	7e1b      	ldrb	r3, [r3, #24]
 8003fac:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003fb4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	61bb      	str	r3, [r7, #24]
 8003fba:	e018      	b.n	8003fee <HAL_ADC_Init+0x2de>
 8003fbc:	24000000 	.word	0x24000000
 8003fc0:	053e2d63 	.word	0x053e2d63
 8003fc4:	40022000 	.word	0x40022000
 8003fc8:	40022100 	.word	0x40022100
 8003fcc:	58026000 	.word	0x58026000
 8003fd0:	40022300 	.word	0x40022300
 8003fd4:	58026300 	.word	0x58026300
 8003fd8:	fff04007 	.word	0xfff04007
 8003fdc:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	7e1b      	ldrb	r3, [r3, #24]
 8003fe4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8003fea:	4313      	orrs	r3, r2
 8003fec:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	4b46      	ldr	r3, [pc, #280]	; (8004110 <HAL_ADC_Init+0x400>)
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6812      	ldr	r2, [r2, #0]
 8003ffc:	69b9      	ldr	r1, [r7, #24]
 8003ffe:	430b      	orrs	r3, r1
 8004000:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004008:	2b01      	cmp	r3, #1
 800400a:	d137      	bne.n	800407c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004010:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a3f      	ldr	r2, [pc, #252]	; (8004114 <HAL_ADC_Init+0x404>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d116      	bne.n	800404a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691a      	ldr	r2, [r3, #16]
 8004022:	4b3d      	ldr	r3, [pc, #244]	; (8004118 <HAL_ADC_Init+0x408>)
 8004024:	4013      	ands	r3, r2
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800402e:	4311      	orrs	r1, r2
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004034:	4311      	orrs	r1, r2
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800403a:	430a      	orrs	r2, r1
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0201 	orr.w	r2, r2, #1
 8004046:	611a      	str	r2, [r3, #16]
 8004048:	e020      	b.n	800408c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	691a      	ldr	r2, [r3, #16]
 8004050:	4b32      	ldr	r3, [pc, #200]	; (800411c <HAL_ADC_Init+0x40c>)
 8004052:	4013      	ands	r3, r2
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004058:	3a01      	subs	r2, #1
 800405a:	0411      	lsls	r1, r2, #16
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004060:	4311      	orrs	r1, r2
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004066:	4311      	orrs	r1, r2
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800406c:	430a      	orrs	r2, r1
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f042 0201 	orr.w	r2, r2, #1
 8004078:	611a      	str	r2, [r3, #16]
 800407a:	e007      	b.n	800408c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	691a      	ldr	r2, [r3, #16]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0201 	bic.w	r2, r2, #1
 800408a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a1b      	ldr	r2, [pc, #108]	; (8004114 <HAL_ADC_Init+0x404>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d002      	beq.n	80040b2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 fd63 	bl	8004b78 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d10c      	bne.n	80040d4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c0:	f023 010f 	bic.w	r1, r3, #15
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	1e5a      	subs	r2, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	631a      	str	r2, [r3, #48]	; 0x30
 80040d2:	e007      	b.n	80040e4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 020f 	bic.w	r2, r2, #15
 80040e2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e8:	f023 0303 	bic.w	r3, r3, #3
 80040ec:	f043 0201 	orr.w	r2, r3, #1
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	661a      	str	r2, [r3, #96]	; 0x60
 80040f4:	e007      	b.n	8004106 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040fa:	f043 0210 	orr.w	r2, r3, #16
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004106:	7ffb      	ldrb	r3, [r7, #31]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3724      	adds	r7, #36	; 0x24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd90      	pop	{r4, r7, pc}
 8004110:	ffffbffc 	.word	0xffffbffc
 8004114:	58026000 	.word	0x58026000
 8004118:	fc00f81f 	.word	0xfc00f81f
 800411c:	fc00f81e 	.word	0xfc00f81e

08004120 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004120:	b590      	push	{r4, r7, lr}
 8004122:	b0b9      	sub	sp, #228	; 0xe4
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004130:	2300      	movs	r3, #0
 8004132:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800413a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	4aa9      	ldr	r2, [pc, #676]	; (80043e8 <HAL_ADC_ConfigChannel+0x2c8>)
 8004142:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800414a:	2b01      	cmp	r3, #1
 800414c:	d102      	bne.n	8004154 <HAL_ADC_ConfigChannel+0x34>
 800414e:	2302      	movs	r3, #2
 8004150:	f000 bcfa 	b.w	8004b48 <HAL_ADC_ConfigChannel+0xa28>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff fdae 	bl	8003cc2 <LL_ADC_REG_IsConversionOngoing>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	f040 84de 	bne.w	8004b2a <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a9e      	ldr	r2, [pc, #632]	; (80043ec <HAL_ADC_ConfigChannel+0x2cc>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d033      	beq.n	80041e0 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004180:	2b00      	cmp	r3, #0
 8004182:	d108      	bne.n	8004196 <HAL_ADC_ConfigChannel+0x76>
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	0e9b      	lsrs	r3, r3, #26
 800418a:	f003 031f 	and.w	r3, r3, #31
 800418e:	2201      	movs	r2, #1
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	e01d      	b.n	80041d2 <HAL_ADC_ConfigChannel+0xb2>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041a2:	fa93 f3a3 	rbit	r3, r3
 80041a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80041aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80041b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80041ba:	2320      	movs	r3, #32
 80041bc:	e004      	b.n	80041c8 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80041be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80041c2:	fab3 f383 	clz	r3, r3
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	f003 031f 	and.w	r3, r3, #31
 80041cc:	2201      	movs	r2, #1
 80041ce:	fa02 f303 	lsl.w	r3, r2, r3
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6812      	ldr	r2, [r2, #0]
 80041d6:	69d1      	ldr	r1, [r2, #28]
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	6812      	ldr	r2, [r2, #0]
 80041dc:	430b      	orrs	r3, r1
 80041de:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	6859      	ldr	r1, [r3, #4]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	461a      	mov	r2, r3
 80041ee:	f7ff fc6f 	bl	8003ad0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff fd63 	bl	8003cc2 <LL_ADC_REG_IsConversionOngoing>
 80041fc:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff fd6f 	bl	8003ce8 <LL_ADC_INJ_IsConversionOngoing>
 800420a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800420e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004212:	2b00      	cmp	r3, #0
 8004214:	f040 8270 	bne.w	80046f8 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004218:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800421c:	2b00      	cmp	r3, #0
 800421e:	f040 826b 	bne.w	80046f8 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6818      	ldr	r0, [r3, #0]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	6819      	ldr	r1, [r3, #0]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	461a      	mov	r2, r3
 8004230:	f7ff fc7a 	bl	8003b28 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a6c      	ldr	r2, [pc, #432]	; (80043ec <HAL_ADC_ConfigChannel+0x2cc>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d10d      	bne.n	800425a <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	695a      	ldr	r2, [r3, #20]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	08db      	lsrs	r3, r3, #3
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004258:	e032      	b.n	80042c0 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800425a:	4b65      	ldr	r3, [pc, #404]	; (80043f0 <HAL_ADC_ConfigChannel+0x2d0>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004262:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004266:	d10b      	bne.n	8004280 <HAL_ADC_ConfigChannel+0x160>
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	695a      	ldr	r2, [r3, #20]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	089b      	lsrs	r3, r3, #2
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	e01d      	b.n	80042bc <HAL_ADC_ConfigChannel+0x19c>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f003 0310 	and.w	r3, r3, #16
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10b      	bne.n	80042a6 <HAL_ADC_ConfigChannel+0x186>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	695a      	ldr	r2, [r3, #20]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	089b      	lsrs	r3, r3, #2
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	e00a      	b.n	80042bc <HAL_ADC_ConfigChannel+0x19c>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	695a      	ldr	r2, [r3, #20]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	089b      	lsrs	r3, r3, #2
 80042b2:	f003 0304 	and.w	r3, r3, #4
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d048      	beq.n	800435a <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6818      	ldr	r0, [r3, #0]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	6919      	ldr	r1, [r3, #16]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042d8:	f7ff fb08 	bl	80038ec <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a42      	ldr	r2, [pc, #264]	; (80043ec <HAL_ADC_ConfigChannel+0x2cc>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d119      	bne.n	800431a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6818      	ldr	r0, [r3, #0]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	6919      	ldr	r1, [r3, #16]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	461a      	mov	r2, r3
 80042f4:	f7ff fba0 	bl	8003a38 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6818      	ldr	r0, [r3, #0]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	6919      	ldr	r1, [r3, #16]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d102      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x1f0>
 800430a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800430e:	e000      	b.n	8004312 <HAL_ADC_ConfigChannel+0x1f2>
 8004310:	2300      	movs	r3, #0
 8004312:	461a      	mov	r2, r3
 8004314:	f7ff fb6e 	bl	80039f4 <LL_ADC_SetOffsetSaturation>
 8004318:	e1ee      	b.n	80046f8 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	6919      	ldr	r1, [r3, #16]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004328:	2b01      	cmp	r3, #1
 800432a:	d102      	bne.n	8004332 <HAL_ADC_ConfigChannel+0x212>
 800432c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004330:	e000      	b.n	8004334 <HAL_ADC_ConfigChannel+0x214>
 8004332:	2300      	movs	r3, #0
 8004334:	461a      	mov	r2, r3
 8004336:	f7ff fb3b 	bl	80039b0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6818      	ldr	r0, [r3, #0]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	6919      	ldr	r1, [r3, #16]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	7e1b      	ldrb	r3, [r3, #24]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d102      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x230>
 800434a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800434e:	e000      	b.n	8004352 <HAL_ADC_ConfigChannel+0x232>
 8004350:	2300      	movs	r3, #0
 8004352:	461a      	mov	r2, r3
 8004354:	f7ff fb12 	bl	800397c <LL_ADC_SetDataRightShift>
 8004358:	e1ce      	b.n	80046f8 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a23      	ldr	r2, [pc, #140]	; (80043ec <HAL_ADC_ConfigChannel+0x2cc>)
 8004360:	4293      	cmp	r3, r2
 8004362:	f040 8181 	bne.w	8004668 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2100      	movs	r1, #0
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff faef 	bl	8003950 <LL_ADC_GetOffsetChannel>
 8004372:	4603      	mov	r3, r0
 8004374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10a      	bne.n	8004392 <HAL_ADC_ConfigChannel+0x272>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2100      	movs	r1, #0
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff fae4 	bl	8003950 <LL_ADC_GetOffsetChannel>
 8004388:	4603      	mov	r3, r0
 800438a:	0e9b      	lsrs	r3, r3, #26
 800438c:	f003 021f 	and.w	r2, r3, #31
 8004390:	e01e      	b.n	80043d0 <HAL_ADC_ConfigChannel+0x2b0>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2100      	movs	r1, #0
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff fad9 	bl	8003950 <LL_ADC_GetOffsetChannel>
 800439e:	4603      	mov	r3, r0
 80043a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80043a8:	fa93 f3a3 	rbit	r3, r3
 80043ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80043b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80043b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80043b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80043c0:	2320      	movs	r3, #32
 80043c2:	e004      	b.n	80043ce <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80043c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80043c8:	fab3 f383 	clz	r3, r3
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	461a      	mov	r2, r3
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10b      	bne.n	80043f4 <HAL_ADC_ConfigChannel+0x2d4>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	0e9b      	lsrs	r3, r3, #26
 80043e2:	f003 031f 	and.w	r3, r3, #31
 80043e6:	e01e      	b.n	8004426 <HAL_ADC_ConfigChannel+0x306>
 80043e8:	47ff0000 	.word	0x47ff0000
 80043ec:	58026000 	.word	0x58026000
 80043f0:	5c001000 	.word	0x5c001000
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004400:	fa93 f3a3 	rbit	r3, r3
 8004404:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004408:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800440c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004410:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004418:	2320      	movs	r3, #32
 800441a:	e004      	b.n	8004426 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 800441c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004420:	fab3 f383 	clz	r3, r3
 8004424:	b2db      	uxtb	r3, r3
 8004426:	429a      	cmp	r2, r3
 8004428:	d106      	bne.n	8004438 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2200      	movs	r2, #0
 8004430:	2100      	movs	r1, #0
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff fb22 	bl	8003a7c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2101      	movs	r1, #1
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff fa86 	bl	8003950 <LL_ADC_GetOffsetChannel>
 8004444:	4603      	mov	r3, r0
 8004446:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10a      	bne.n	8004464 <HAL_ADC_ConfigChannel+0x344>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2101      	movs	r1, #1
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff fa7b 	bl	8003950 <LL_ADC_GetOffsetChannel>
 800445a:	4603      	mov	r3, r0
 800445c:	0e9b      	lsrs	r3, r3, #26
 800445e:	f003 021f 	and.w	r2, r3, #31
 8004462:	e01e      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x382>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2101      	movs	r1, #1
 800446a:	4618      	mov	r0, r3
 800446c:	f7ff fa70 	bl	8003950 <LL_ADC_GetOffsetChannel>
 8004470:	4603      	mov	r3, r0
 8004472:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004476:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800447a:	fa93 f3a3 	rbit	r3, r3
 800447e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004482:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004486:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800448a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8004492:	2320      	movs	r3, #32
 8004494:	e004      	b.n	80044a0 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8004496:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800449a:	fab3 f383 	clz	r3, r3
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	461a      	mov	r2, r3
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d105      	bne.n	80044ba <HAL_ADC_ConfigChannel+0x39a>
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	0e9b      	lsrs	r3, r3, #26
 80044b4:	f003 031f 	and.w	r3, r3, #31
 80044b8:	e018      	b.n	80044ec <HAL_ADC_ConfigChannel+0x3cc>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80044c6:	fa93 f3a3 	rbit	r3, r3
 80044ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80044ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80044d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80044de:	2320      	movs	r3, #32
 80044e0:	e004      	b.n	80044ec <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80044e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044e6:	fab3 f383 	clz	r3, r3
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d106      	bne.n	80044fe <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2200      	movs	r2, #0
 80044f6:	2101      	movs	r1, #1
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff fabf 	bl	8003a7c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2102      	movs	r1, #2
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff fa23 	bl	8003950 <LL_ADC_GetOffsetChannel>
 800450a:	4603      	mov	r3, r0
 800450c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10a      	bne.n	800452a <HAL_ADC_ConfigChannel+0x40a>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2102      	movs	r1, #2
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff fa18 	bl	8003950 <LL_ADC_GetOffsetChannel>
 8004520:	4603      	mov	r3, r0
 8004522:	0e9b      	lsrs	r3, r3, #26
 8004524:	f003 021f 	and.w	r2, r3, #31
 8004528:	e01e      	b.n	8004568 <HAL_ADC_ConfigChannel+0x448>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2102      	movs	r1, #2
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff fa0d 	bl	8003950 <LL_ADC_GetOffsetChannel>
 8004536:	4603      	mov	r3, r0
 8004538:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004540:	fa93 f3a3 	rbit	r3, r3
 8004544:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004548:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800454c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004550:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004558:	2320      	movs	r3, #32
 800455a:	e004      	b.n	8004566 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 800455c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004560:	fab3 f383 	clz	r3, r3
 8004564:	b2db      	uxtb	r3, r3
 8004566:	461a      	mov	r2, r3
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004570:	2b00      	cmp	r3, #0
 8004572:	d105      	bne.n	8004580 <HAL_ADC_ConfigChannel+0x460>
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	0e9b      	lsrs	r3, r3, #26
 800457a:	f003 031f 	and.w	r3, r3, #31
 800457e:	e014      	b.n	80045aa <HAL_ADC_ConfigChannel+0x48a>
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004586:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004588:	fa93 f3a3 	rbit	r3, r3
 800458c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800458e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004590:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004594:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 800459c:	2320      	movs	r3, #32
 800459e:	e004      	b.n	80045aa <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80045a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045a4:	fab3 f383 	clz	r3, r3
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d106      	bne.n	80045bc <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2200      	movs	r2, #0
 80045b4:	2102      	movs	r1, #2
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff fa60 	bl	8003a7c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2103      	movs	r1, #3
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7ff f9c4 	bl	8003950 <LL_ADC_GetOffsetChannel>
 80045c8:	4603      	mov	r3, r0
 80045ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10a      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x4c8>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2103      	movs	r1, #3
 80045d8:	4618      	mov	r0, r3
 80045da:	f7ff f9b9 	bl	8003950 <LL_ADC_GetOffsetChannel>
 80045de:	4603      	mov	r3, r0
 80045e0:	0e9b      	lsrs	r3, r3, #26
 80045e2:	f003 021f 	and.w	r2, r3, #31
 80045e6:	e017      	b.n	8004618 <HAL_ADC_ConfigChannel+0x4f8>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2103      	movs	r1, #3
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7ff f9ae 	bl	8003950 <LL_ADC_GetOffsetChannel>
 80045f4:	4603      	mov	r3, r0
 80045f6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045fa:	fa93 f3a3 	rbit	r3, r3
 80045fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004602:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800460a:	2320      	movs	r3, #32
 800460c:	e003      	b.n	8004616 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800460e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004610:	fab3 f383 	clz	r3, r3
 8004614:	b2db      	uxtb	r3, r3
 8004616:	461a      	mov	r2, r3
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004620:	2b00      	cmp	r3, #0
 8004622:	d105      	bne.n	8004630 <HAL_ADC_ConfigChannel+0x510>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	0e9b      	lsrs	r3, r3, #26
 800462a:	f003 031f 	and.w	r3, r3, #31
 800462e:	e011      	b.n	8004654 <HAL_ADC_ConfigChannel+0x534>
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004636:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004638:	fa93 f3a3 	rbit	r3, r3
 800463c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800463e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004640:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004642:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004648:	2320      	movs	r3, #32
 800464a:	e003      	b.n	8004654 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 800464c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800464e:	fab3 f383 	clz	r3, r3
 8004652:	b2db      	uxtb	r3, r3
 8004654:	429a      	cmp	r2, r3
 8004656:	d14f      	bne.n	80046f8 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2200      	movs	r2, #0
 800465e:	2103      	movs	r1, #3
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff fa0b 	bl	8003a7c <LL_ADC_SetOffsetState>
 8004666:	e047      	b.n	80046f8 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800466e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	069b      	lsls	r3, r3, #26
 8004678:	429a      	cmp	r2, r3
 800467a:	d107      	bne.n	800468c <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800468a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004692:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	069b      	lsls	r3, r3, #26
 800469c:	429a      	cmp	r2, r3
 800469e:	d107      	bne.n	80046b0 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80046ae:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	069b      	lsls	r3, r3, #26
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d107      	bne.n	80046d4 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80046d2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	069b      	lsls	r3, r3, #26
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d107      	bne.n	80046f8 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80046f6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff facd 	bl	8003c9c <LL_ADC_IsEnabled>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	f040 8219 	bne.w	8004b3c <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	6819      	ldr	r1, [r3, #0]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	461a      	mov	r2, r3
 8004718:	f7ff fa32 	bl	8003b80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	4aa1      	ldr	r2, [pc, #644]	; (80049a8 <HAL_ADC_ConfigChannel+0x888>)
 8004722:	4293      	cmp	r3, r2
 8004724:	f040 812e 	bne.w	8004984 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10b      	bne.n	8004750 <HAL_ADC_ConfigChannel+0x630>
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	0e9b      	lsrs	r3, r3, #26
 800473e:	3301      	adds	r3, #1
 8004740:	f003 031f 	and.w	r3, r3, #31
 8004744:	2b09      	cmp	r3, #9
 8004746:	bf94      	ite	ls
 8004748:	2301      	movls	r3, #1
 800474a:	2300      	movhi	r3, #0
 800474c:	b2db      	uxtb	r3, r3
 800474e:	e019      	b.n	8004784 <HAL_ADC_ConfigChannel+0x664>
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004756:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004758:	fa93 f3a3 	rbit	r3, r3
 800475c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800475e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004760:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004768:	2320      	movs	r3, #32
 800476a:	e003      	b.n	8004774 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 800476c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800476e:	fab3 f383 	clz	r3, r3
 8004772:	b2db      	uxtb	r3, r3
 8004774:	3301      	adds	r3, #1
 8004776:	f003 031f 	and.w	r3, r3, #31
 800477a:	2b09      	cmp	r3, #9
 800477c:	bf94      	ite	ls
 800477e:	2301      	movls	r3, #1
 8004780:	2300      	movhi	r3, #0
 8004782:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004784:	2b00      	cmp	r3, #0
 8004786:	d079      	beq.n	800487c <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004790:	2b00      	cmp	r3, #0
 8004792:	d107      	bne.n	80047a4 <HAL_ADC_ConfigChannel+0x684>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	0e9b      	lsrs	r3, r3, #26
 800479a:	3301      	adds	r3, #1
 800479c:	069b      	lsls	r3, r3, #26
 800479e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047a2:	e015      	b.n	80047d0 <HAL_ADC_ConfigChannel+0x6b0>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ac:	fa93 f3a3 	rbit	r3, r3
 80047b0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80047b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047b4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80047b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80047bc:	2320      	movs	r3, #32
 80047be:	e003      	b.n	80047c8 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80047c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047c2:	fab3 f383 	clz	r3, r3
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	3301      	adds	r3, #1
 80047ca:	069b      	lsls	r3, r3, #26
 80047cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d109      	bne.n	80047f0 <HAL_ADC_ConfigChannel+0x6d0>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	0e9b      	lsrs	r3, r3, #26
 80047e2:	3301      	adds	r3, #1
 80047e4:	f003 031f 	and.w	r3, r3, #31
 80047e8:	2101      	movs	r1, #1
 80047ea:	fa01 f303 	lsl.w	r3, r1, r3
 80047ee:	e017      	b.n	8004820 <HAL_ADC_ConfigChannel+0x700>
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047f8:	fa93 f3a3 	rbit	r3, r3
 80047fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80047fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004800:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004808:	2320      	movs	r3, #32
 800480a:	e003      	b.n	8004814 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 800480c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800480e:	fab3 f383 	clz	r3, r3
 8004812:	b2db      	uxtb	r3, r3
 8004814:	3301      	adds	r3, #1
 8004816:	f003 031f 	and.w	r3, r3, #31
 800481a:	2101      	movs	r1, #1
 800481c:	fa01 f303 	lsl.w	r3, r1, r3
 8004820:	ea42 0103 	orr.w	r1, r2, r3
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10a      	bne.n	8004846 <HAL_ADC_ConfigChannel+0x726>
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	0e9b      	lsrs	r3, r3, #26
 8004836:	3301      	adds	r3, #1
 8004838:	f003 021f 	and.w	r2, r3, #31
 800483c:	4613      	mov	r3, r2
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	4413      	add	r3, r2
 8004842:	051b      	lsls	r3, r3, #20
 8004844:	e018      	b.n	8004878 <HAL_ADC_ConfigChannel+0x758>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800484e:	fa93 f3a3 	rbit	r3, r3
 8004852:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004856:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800485e:	2320      	movs	r3, #32
 8004860:	e003      	b.n	800486a <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004864:	fab3 f383 	clz	r3, r3
 8004868:	b2db      	uxtb	r3, r3
 800486a:	3301      	adds	r3, #1
 800486c:	f003 021f 	and.w	r2, r3, #31
 8004870:	4613      	mov	r3, r2
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	4413      	add	r3, r2
 8004876:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004878:	430b      	orrs	r3, r1
 800487a:	e07e      	b.n	800497a <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004884:	2b00      	cmp	r3, #0
 8004886:	d107      	bne.n	8004898 <HAL_ADC_ConfigChannel+0x778>
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	0e9b      	lsrs	r3, r3, #26
 800488e:	3301      	adds	r3, #1
 8004890:	069b      	lsls	r3, r3, #26
 8004892:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004896:	e015      	b.n	80048c4 <HAL_ADC_ConfigChannel+0x7a4>
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a0:	fa93 f3a3 	rbit	r3, r3
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80048aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80048b0:	2320      	movs	r3, #32
 80048b2:	e003      	b.n	80048bc <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80048b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b6:	fab3 f383 	clz	r3, r3
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	3301      	adds	r3, #1
 80048be:	069b      	lsls	r3, r3, #26
 80048c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d109      	bne.n	80048e4 <HAL_ADC_ConfigChannel+0x7c4>
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	0e9b      	lsrs	r3, r3, #26
 80048d6:	3301      	adds	r3, #1
 80048d8:	f003 031f 	and.w	r3, r3, #31
 80048dc:	2101      	movs	r1, #1
 80048de:	fa01 f303 	lsl.w	r3, r1, r3
 80048e2:	e017      	b.n	8004914 <HAL_ADC_ConfigChannel+0x7f4>
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	fa93 f3a3 	rbit	r3, r3
 80048f0:	61bb      	str	r3, [r7, #24]
  return result;
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80048fc:	2320      	movs	r3, #32
 80048fe:	e003      	b.n	8004908 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	fab3 f383 	clz	r3, r3
 8004906:	b2db      	uxtb	r3, r3
 8004908:	3301      	adds	r3, #1
 800490a:	f003 031f 	and.w	r3, r3, #31
 800490e:	2101      	movs	r1, #1
 8004910:	fa01 f303 	lsl.w	r3, r1, r3
 8004914:	ea42 0103 	orr.w	r1, r2, r3
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10d      	bne.n	8004940 <HAL_ADC_ConfigChannel+0x820>
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	0e9b      	lsrs	r3, r3, #26
 800492a:	3301      	adds	r3, #1
 800492c:	f003 021f 	and.w	r2, r3, #31
 8004930:	4613      	mov	r3, r2
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	4413      	add	r3, r2
 8004936:	3b1e      	subs	r3, #30
 8004938:	051b      	lsls	r3, r3, #20
 800493a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800493e:	e01b      	b.n	8004978 <HAL_ADC_ConfigChannel+0x858>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	fa93 f3a3 	rbit	r3, r3
 800494c:	60fb      	str	r3, [r7, #12]
  return result;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004958:	2320      	movs	r3, #32
 800495a:	e003      	b.n	8004964 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	fab3 f383 	clz	r3, r3
 8004962:	b2db      	uxtb	r3, r3
 8004964:	3301      	adds	r3, #1
 8004966:	f003 021f 	and.w	r2, r3, #31
 800496a:	4613      	mov	r3, r2
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	4413      	add	r3, r2
 8004970:	3b1e      	subs	r3, #30
 8004972:	051b      	lsls	r3, r3, #20
 8004974:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004978:	430b      	orrs	r3, r1
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	6892      	ldr	r2, [r2, #8]
 800497e:	4619      	mov	r1, r3
 8004980:	f7ff f8d2 	bl	8003b28 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	f280 80d7 	bge.w	8004b3c <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a06      	ldr	r2, [pc, #24]	; (80049ac <HAL_ADC_ConfigChannel+0x88c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d004      	beq.n	80049a2 <HAL_ADC_ConfigChannel+0x882>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a04      	ldr	r2, [pc, #16]	; (80049b0 <HAL_ADC_ConfigChannel+0x890>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d10a      	bne.n	80049b8 <HAL_ADC_ConfigChannel+0x898>
 80049a2:	4b04      	ldr	r3, [pc, #16]	; (80049b4 <HAL_ADC_ConfigChannel+0x894>)
 80049a4:	e009      	b.n	80049ba <HAL_ADC_ConfigChannel+0x89a>
 80049a6:	bf00      	nop
 80049a8:	47ff0000 	.word	0x47ff0000
 80049ac:	40022000 	.word	0x40022000
 80049b0:	40022100 	.word	0x40022100
 80049b4:	40022300 	.word	0x40022300
 80049b8:	4b65      	ldr	r3, [pc, #404]	; (8004b50 <HAL_ADC_ConfigChannel+0xa30>)
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fe ff88 	bl	80038d0 <LL_ADC_GetCommonPathInternalCh>
 80049c0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a62      	ldr	r2, [pc, #392]	; (8004b54 <HAL_ADC_ConfigChannel+0xa34>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d004      	beq.n	80049d8 <HAL_ADC_ConfigChannel+0x8b8>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a61      	ldr	r2, [pc, #388]	; (8004b58 <HAL_ADC_ConfigChannel+0xa38>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d10e      	bne.n	80049f6 <HAL_ADC_ConfigChannel+0x8d6>
 80049d8:	485e      	ldr	r0, [pc, #376]	; (8004b54 <HAL_ADC_ConfigChannel+0xa34>)
 80049da:	f7ff f95f 	bl	8003c9c <LL_ADC_IsEnabled>
 80049de:	4604      	mov	r4, r0
 80049e0:	485d      	ldr	r0, [pc, #372]	; (8004b58 <HAL_ADC_ConfigChannel+0xa38>)
 80049e2:	f7ff f95b 	bl	8003c9c <LL_ADC_IsEnabled>
 80049e6:	4603      	mov	r3, r0
 80049e8:	4323      	orrs	r3, r4
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	bf0c      	ite	eq
 80049ee:	2301      	moveq	r3, #1
 80049f0:	2300      	movne	r3, #0
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	e008      	b.n	8004a08 <HAL_ADC_ConfigChannel+0x8e8>
 80049f6:	4859      	ldr	r0, [pc, #356]	; (8004b5c <HAL_ADC_ConfigChannel+0xa3c>)
 80049f8:	f7ff f950 	bl	8003c9c <LL_ADC_IsEnabled>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	bf0c      	ite	eq
 8004a02:	2301      	moveq	r3, #1
 8004a04:	2300      	movne	r3, #0
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 8084 	beq.w	8004b16 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a53      	ldr	r2, [pc, #332]	; (8004b60 <HAL_ADC_ConfigChannel+0xa40>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d132      	bne.n	8004a7e <HAL_ADC_ConfigChannel+0x95e>
 8004a18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d12c      	bne.n	8004a7e <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a4c      	ldr	r2, [pc, #304]	; (8004b5c <HAL_ADC_ConfigChannel+0xa3c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	f040 8086 	bne.w	8004b3c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a47      	ldr	r2, [pc, #284]	; (8004b54 <HAL_ADC_ConfigChannel+0xa34>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d004      	beq.n	8004a44 <HAL_ADC_ConfigChannel+0x924>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a46      	ldr	r2, [pc, #280]	; (8004b58 <HAL_ADC_ConfigChannel+0xa38>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d101      	bne.n	8004a48 <HAL_ADC_ConfigChannel+0x928>
 8004a44:	4a47      	ldr	r2, [pc, #284]	; (8004b64 <HAL_ADC_ConfigChannel+0xa44>)
 8004a46:	e000      	b.n	8004a4a <HAL_ADC_ConfigChannel+0x92a>
 8004a48:	4a41      	ldr	r2, [pc, #260]	; (8004b50 <HAL_ADC_ConfigChannel+0xa30>)
 8004a4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a52:	4619      	mov	r1, r3
 8004a54:	4610      	mov	r0, r2
 8004a56:	f7fe ff28 	bl	80038aa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a5a:	4b43      	ldr	r3, [pc, #268]	; (8004b68 <HAL_ADC_ConfigChannel+0xa48>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	099b      	lsrs	r3, r3, #6
 8004a60:	4a42      	ldr	r2, [pc, #264]	; (8004b6c <HAL_ADC_ConfigChannel+0xa4c>)
 8004a62:	fba2 2303 	umull	r2, r3, r2, r3
 8004a66:	099b      	lsrs	r3, r3, #6
 8004a68:	3301      	adds	r3, #1
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004a6e:	e002      	b.n	8004a76 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f9      	bne.n	8004a70 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a7c:	e05e      	b.n	8004b3c <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a3b      	ldr	r2, [pc, #236]	; (8004b70 <HAL_ADC_ConfigChannel+0xa50>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d120      	bne.n	8004aca <HAL_ADC_ConfigChannel+0x9aa>
 8004a88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d11a      	bne.n	8004aca <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a30      	ldr	r2, [pc, #192]	; (8004b5c <HAL_ADC_ConfigChannel+0xa3c>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d14e      	bne.n	8004b3c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a2c      	ldr	r2, [pc, #176]	; (8004b54 <HAL_ADC_ConfigChannel+0xa34>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d004      	beq.n	8004ab2 <HAL_ADC_ConfigChannel+0x992>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a2a      	ldr	r2, [pc, #168]	; (8004b58 <HAL_ADC_ConfigChannel+0xa38>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d101      	bne.n	8004ab6 <HAL_ADC_ConfigChannel+0x996>
 8004ab2:	4a2c      	ldr	r2, [pc, #176]	; (8004b64 <HAL_ADC_ConfigChannel+0xa44>)
 8004ab4:	e000      	b.n	8004ab8 <HAL_ADC_ConfigChannel+0x998>
 8004ab6:	4a26      	ldr	r2, [pc, #152]	; (8004b50 <HAL_ADC_ConfigChannel+0xa30>)
 8004ab8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004abc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	f7fe fef1 	bl	80038aa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ac8:	e038      	b.n	8004b3c <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a29      	ldr	r2, [pc, #164]	; (8004b74 <HAL_ADC_ConfigChannel+0xa54>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d133      	bne.n	8004b3c <HAL_ADC_ConfigChannel+0xa1c>
 8004ad4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ad8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d12d      	bne.n	8004b3c <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a1d      	ldr	r2, [pc, #116]	; (8004b5c <HAL_ADC_ConfigChannel+0xa3c>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d128      	bne.n	8004b3c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a19      	ldr	r2, [pc, #100]	; (8004b54 <HAL_ADC_ConfigChannel+0xa34>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d004      	beq.n	8004afe <HAL_ADC_ConfigChannel+0x9de>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a17      	ldr	r2, [pc, #92]	; (8004b58 <HAL_ADC_ConfigChannel+0xa38>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d101      	bne.n	8004b02 <HAL_ADC_ConfigChannel+0x9e2>
 8004afe:	4a19      	ldr	r2, [pc, #100]	; (8004b64 <HAL_ADC_ConfigChannel+0xa44>)
 8004b00:	e000      	b.n	8004b04 <HAL_ADC_ConfigChannel+0x9e4>
 8004b02:	4a13      	ldr	r2, [pc, #76]	; (8004b50 <HAL_ADC_ConfigChannel+0xa30>)
 8004b04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4610      	mov	r0, r2
 8004b10:	f7fe fecb 	bl	80038aa <LL_ADC_SetCommonPathInternalCh>
 8004b14:	e012      	b.n	8004b3c <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b1a:	f043 0220 	orr.w	r2, r3, #32
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004b28:	e008      	b.n	8004b3c <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b2e:	f043 0220 	orr.w	r2, r3, #32
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004b44:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	37e4      	adds	r7, #228	; 0xe4
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd90      	pop	{r4, r7, pc}
 8004b50:	58026300 	.word	0x58026300
 8004b54:	40022000 	.word	0x40022000
 8004b58:	40022100 	.word	0x40022100
 8004b5c:	58026000 	.word	0x58026000
 8004b60:	c7520000 	.word	0xc7520000
 8004b64:	40022300 	.word	0x40022300
 8004b68:	24000000 	.word	0x24000000
 8004b6c:	053e2d63 	.word	0x053e2d63
 8004b70:	c3210000 	.word	0xc3210000
 8004b74:	cb840000 	.word	0xcb840000

08004b78 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a6c      	ldr	r2, [pc, #432]	; (8004d38 <ADC_ConfigureBoostMode+0x1c0>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d004      	beq.n	8004b94 <ADC_ConfigureBoostMode+0x1c>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a6b      	ldr	r2, [pc, #428]	; (8004d3c <ADC_ConfigureBoostMode+0x1c4>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d109      	bne.n	8004ba8 <ADC_ConfigureBoostMode+0x30>
 8004b94:	4b6a      	ldr	r3, [pc, #424]	; (8004d40 <ADC_ConfigureBoostMode+0x1c8>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	bf14      	ite	ne
 8004ba0:	2301      	movne	r3, #1
 8004ba2:	2300      	moveq	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	e008      	b.n	8004bba <ADC_ConfigureBoostMode+0x42>
 8004ba8:	4b66      	ldr	r3, [pc, #408]	; (8004d44 <ADC_ConfigureBoostMode+0x1cc>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	bf14      	ite	ne
 8004bb4:	2301      	movne	r3, #1
 8004bb6:	2300      	moveq	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d01c      	beq.n	8004bf8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004bbe:	f005 fc93 	bl	800a4e8 <HAL_RCC_GetHCLKFreq>
 8004bc2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bcc:	d010      	beq.n	8004bf0 <ADC_ConfigureBoostMode+0x78>
 8004bce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bd2:	d873      	bhi.n	8004cbc <ADC_ConfigureBoostMode+0x144>
 8004bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd8:	d002      	beq.n	8004be0 <ADC_ConfigureBoostMode+0x68>
 8004bda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bde:	d16d      	bne.n	8004cbc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	0c1b      	lsrs	r3, r3, #16
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bec:	60fb      	str	r3, [r7, #12]
        break;
 8004bee:	e068      	b.n	8004cc2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	089b      	lsrs	r3, r3, #2
 8004bf4:	60fb      	str	r3, [r7, #12]
        break;
 8004bf6:	e064      	b.n	8004cc2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004bf8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004bfc:	f04f 0100 	mov.w	r1, #0
 8004c00:	f006 fe6e 	bl	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004c04:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004c0e:	d051      	beq.n	8004cb4 <ADC_ConfigureBoostMode+0x13c>
 8004c10:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004c14:	d854      	bhi.n	8004cc0 <ADC_ConfigureBoostMode+0x148>
 8004c16:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004c1a:	d047      	beq.n	8004cac <ADC_ConfigureBoostMode+0x134>
 8004c1c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004c20:	d84e      	bhi.n	8004cc0 <ADC_ConfigureBoostMode+0x148>
 8004c22:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004c26:	d03d      	beq.n	8004ca4 <ADC_ConfigureBoostMode+0x12c>
 8004c28:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004c2c:	d848      	bhi.n	8004cc0 <ADC_ConfigureBoostMode+0x148>
 8004c2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c32:	d033      	beq.n	8004c9c <ADC_ConfigureBoostMode+0x124>
 8004c34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c38:	d842      	bhi.n	8004cc0 <ADC_ConfigureBoostMode+0x148>
 8004c3a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004c3e:	d029      	beq.n	8004c94 <ADC_ConfigureBoostMode+0x11c>
 8004c40:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004c44:	d83c      	bhi.n	8004cc0 <ADC_ConfigureBoostMode+0x148>
 8004c46:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004c4a:	d01a      	beq.n	8004c82 <ADC_ConfigureBoostMode+0x10a>
 8004c4c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004c50:	d836      	bhi.n	8004cc0 <ADC_ConfigureBoostMode+0x148>
 8004c52:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004c56:	d014      	beq.n	8004c82 <ADC_ConfigureBoostMode+0x10a>
 8004c58:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004c5c:	d830      	bhi.n	8004cc0 <ADC_ConfigureBoostMode+0x148>
 8004c5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c62:	d00e      	beq.n	8004c82 <ADC_ConfigureBoostMode+0x10a>
 8004c64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c68:	d82a      	bhi.n	8004cc0 <ADC_ConfigureBoostMode+0x148>
 8004c6a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c6e:	d008      	beq.n	8004c82 <ADC_ConfigureBoostMode+0x10a>
 8004c70:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c74:	d824      	bhi.n	8004cc0 <ADC_ConfigureBoostMode+0x148>
 8004c76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c7a:	d002      	beq.n	8004c82 <ADC_ConfigureBoostMode+0x10a>
 8004c7c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c80:	d11e      	bne.n	8004cc0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	0c9b      	lsrs	r3, r3, #18
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c90:	60fb      	str	r3, [r7, #12]
        break;
 8004c92:	e016      	b.n	8004cc2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	091b      	lsrs	r3, r3, #4
 8004c98:	60fb      	str	r3, [r7, #12]
        break;
 8004c9a:	e012      	b.n	8004cc2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	095b      	lsrs	r3, r3, #5
 8004ca0:	60fb      	str	r3, [r7, #12]
        break;
 8004ca2:	e00e      	b.n	8004cc2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	099b      	lsrs	r3, r3, #6
 8004ca8:	60fb      	str	r3, [r7, #12]
        break;
 8004caa:	e00a      	b.n	8004cc2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	09db      	lsrs	r3, r3, #7
 8004cb0:	60fb      	str	r3, [r7, #12]
        break;
 8004cb2:	e006      	b.n	8004cc2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	0a1b      	lsrs	r3, r3, #8
 8004cb8:	60fb      	str	r3, [r7, #12]
        break;
 8004cba:	e002      	b.n	8004cc2 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004cbc:	bf00      	nop
 8004cbe:	e000      	b.n	8004cc2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004cc0:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	085b      	lsrs	r3, r3, #1
 8004cc6:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4a1f      	ldr	r2, [pc, #124]	; (8004d48 <ADC_ConfigureBoostMode+0x1d0>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d808      	bhi.n	8004ce2 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689a      	ldr	r2, [r3, #8]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004cde:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004ce0:	e025      	b.n	8004d2e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	4a19      	ldr	r2, [pc, #100]	; (8004d4c <ADC_ConfigureBoostMode+0x1d4>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d80a      	bhi.n	8004d00 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cfc:	609a      	str	r2, [r3, #8]
}
 8004cfe:	e016      	b.n	8004d2e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4a13      	ldr	r2, [pc, #76]	; (8004d50 <ADC_ConfigureBoostMode+0x1d8>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d80a      	bhi.n	8004d1e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d1a:	609a      	str	r2, [r3, #8]
}
 8004d1c:	e007      	b.n	8004d2e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004d2c:	609a      	str	r2, [r3, #8]
}
 8004d2e:	bf00      	nop
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	40022000 	.word	0x40022000
 8004d3c:	40022100 	.word	0x40022100
 8004d40:	40022300 	.word	0x40022300
 8004d44:	58026300 	.word	0x58026300
 8004d48:	005f5e10 	.word	0x005f5e10
 8004d4c:	00bebc20 	.word	0x00bebc20
 8004d50:	017d7840 	.word	0x017d7840

08004d54 <LL_ADC_IsEnabled>:
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d101      	bne.n	8004d6c <LL_ADC_IsEnabled+0x18>
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e000      	b.n	8004d6e <LL_ADC_IsEnabled+0x1a>
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <LL_ADC_REG_IsConversionOngoing>:
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b083      	sub	sp, #12
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 0304 	and.w	r3, r3, #4
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	d101      	bne.n	8004d92 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e000      	b.n	8004d94 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004da0:	b590      	push	{r4, r7, lr}
 8004da2:	b0a3      	sub	sp, #140	; 0x8c
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d101      	bne.n	8004dbe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004dba:	2302      	movs	r3, #2
 8004dbc:	e0c1      	b.n	8004f42 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a5e      	ldr	r2, [pc, #376]	; (8004f4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d102      	bne.n	8004dde <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004dd8:	4b5d      	ldr	r3, [pc, #372]	; (8004f50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	e001      	b.n	8004de2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004dde:	2300      	movs	r3, #0
 8004de0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10b      	bne.n	8004e00 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dec:	f043 0220 	orr.w	r2, r3, #32
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e0a0      	b.n	8004f42 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff ffb9 	bl	8004d7a <LL_ADC_REG_IsConversionOngoing>
 8004e08:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7ff ffb2 	bl	8004d7a <LL_ADC_REG_IsConversionOngoing>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f040 8081 	bne.w	8004f20 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004e1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d17c      	bne.n	8004f20 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a48      	ldr	r2, [pc, #288]	; (8004f4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d004      	beq.n	8004e3a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a46      	ldr	r2, [pc, #280]	; (8004f50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d101      	bne.n	8004e3e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004e3a:	4b46      	ldr	r3, [pc, #280]	; (8004f54 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004e3c:	e000      	b.n	8004e40 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004e3e:	4b46      	ldr	r3, [pc, #280]	; (8004f58 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004e40:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d039      	beq.n	8004ebe <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004e4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	431a      	orrs	r2, r3
 8004e58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e5a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a3a      	ldr	r2, [pc, #232]	; (8004f4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d004      	beq.n	8004e70 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a39      	ldr	r2, [pc, #228]	; (8004f50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d10e      	bne.n	8004e8e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004e70:	4836      	ldr	r0, [pc, #216]	; (8004f4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004e72:	f7ff ff6f 	bl	8004d54 <LL_ADC_IsEnabled>
 8004e76:	4604      	mov	r4, r0
 8004e78:	4835      	ldr	r0, [pc, #212]	; (8004f50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004e7a:	f7ff ff6b 	bl	8004d54 <LL_ADC_IsEnabled>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	4323      	orrs	r3, r4
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	bf0c      	ite	eq
 8004e86:	2301      	moveq	r3, #1
 8004e88:	2300      	movne	r3, #0
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	e008      	b.n	8004ea0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004e8e:	4833      	ldr	r0, [pc, #204]	; (8004f5c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004e90:	f7ff ff60 	bl	8004d54 <LL_ADC_IsEnabled>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	bf0c      	ite	eq
 8004e9a:	2301      	moveq	r3, #1
 8004e9c:	2300      	movne	r3, #0
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d047      	beq.n	8004f34 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004ea4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	4b2d      	ldr	r3, [pc, #180]	; (8004f60 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004eaa:	4013      	ands	r3, r2
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	6811      	ldr	r1, [r2, #0]
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	6892      	ldr	r2, [r2, #8]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004eba:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ebc:	e03a      	b.n	8004f34 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004ebe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ec6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ec8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a1f      	ldr	r2, [pc, #124]	; (8004f4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d004      	beq.n	8004ede <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a1d      	ldr	r2, [pc, #116]	; (8004f50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d10e      	bne.n	8004efc <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004ede:	481b      	ldr	r0, [pc, #108]	; (8004f4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ee0:	f7ff ff38 	bl	8004d54 <LL_ADC_IsEnabled>
 8004ee4:	4604      	mov	r4, r0
 8004ee6:	481a      	ldr	r0, [pc, #104]	; (8004f50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ee8:	f7ff ff34 	bl	8004d54 <LL_ADC_IsEnabled>
 8004eec:	4603      	mov	r3, r0
 8004eee:	4323      	orrs	r3, r4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	bf0c      	ite	eq
 8004ef4:	2301      	moveq	r3, #1
 8004ef6:	2300      	movne	r3, #0
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	e008      	b.n	8004f0e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004efc:	4817      	ldr	r0, [pc, #92]	; (8004f5c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004efe:	f7ff ff29 	bl	8004d54 <LL_ADC_IsEnabled>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	bf0c      	ite	eq
 8004f08:	2301      	moveq	r3, #1
 8004f0a:	2300      	movne	r3, #0
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d010      	beq.n	8004f34 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004f12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f14:	689a      	ldr	r2, [r3, #8]
 8004f16:	4b12      	ldr	r3, [pc, #72]	; (8004f60 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004f18:	4013      	ands	r3, r2
 8004f1a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004f1c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f1e:	e009      	b.n	8004f34 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f24:	f043 0220 	orr.w	r2, r3, #32
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8004f32:	e000      	b.n	8004f36 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f34:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004f3e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	378c      	adds	r7, #140	; 0x8c
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd90      	pop	{r4, r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	40022000 	.word	0x40022000
 8004f50:	40022100 	.word	0x40022100
 8004f54:	40022300 	.word	0x40022300
 8004f58:	58026300 	.word	0x58026300
 8004f5c:	58026000 	.word	0x58026000
 8004f60:	fffff0e0 	.word	0xfffff0e0

08004f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f74:	4b0b      	ldr	r3, [pc, #44]	; (8004fa4 <__NVIC_SetPriorityGrouping+0x40>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f80:	4013      	ands	r3, r2
 8004f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004f8c:	4b06      	ldr	r3, [pc, #24]	; (8004fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f92:	4a04      	ldr	r2, [pc, #16]	; (8004fa4 <__NVIC_SetPriorityGrouping+0x40>)
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	60d3      	str	r3, [r2, #12]
}
 8004f98:	bf00      	nop
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	e000ed00 	.word	0xe000ed00
 8004fa8:	05fa0000 	.word	0x05fa0000

08004fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fb0:	4b04      	ldr	r3, [pc, #16]	; (8004fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	0a1b      	lsrs	r3, r3, #8
 8004fb6:	f003 0307 	and.w	r3, r3, #7
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	e000ed00 	.word	0xe000ed00

08004fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	4603      	mov	r3, r0
 8004fd0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004fd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	db0b      	blt.n	8004ff2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fda:	88fb      	ldrh	r3, [r7, #6]
 8004fdc:	f003 021f 	and.w	r2, r3, #31
 8004fe0:	4907      	ldr	r1, [pc, #28]	; (8005000 <__NVIC_EnableIRQ+0x38>)
 8004fe2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fe6:	095b      	lsrs	r3, r3, #5
 8004fe8:	2001      	movs	r0, #1
 8004fea:	fa00 f202 	lsl.w	r2, r0, r2
 8004fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ff2:	bf00      	nop
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	e000e100 	.word	0xe000e100

08005004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	4603      	mov	r3, r0
 800500c:	6039      	str	r1, [r7, #0]
 800500e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005010:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005014:	2b00      	cmp	r3, #0
 8005016:	db0a      	blt.n	800502e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	b2da      	uxtb	r2, r3
 800501c:	490c      	ldr	r1, [pc, #48]	; (8005050 <__NVIC_SetPriority+0x4c>)
 800501e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005022:	0112      	lsls	r2, r2, #4
 8005024:	b2d2      	uxtb	r2, r2
 8005026:	440b      	add	r3, r1
 8005028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800502c:	e00a      	b.n	8005044 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	b2da      	uxtb	r2, r3
 8005032:	4908      	ldr	r1, [pc, #32]	; (8005054 <__NVIC_SetPriority+0x50>)
 8005034:	88fb      	ldrh	r3, [r7, #6]
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	3b04      	subs	r3, #4
 800503c:	0112      	lsls	r2, r2, #4
 800503e:	b2d2      	uxtb	r2, r2
 8005040:	440b      	add	r3, r1
 8005042:	761a      	strb	r2, [r3, #24]
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	e000e100 	.word	0xe000e100
 8005054:	e000ed00 	.word	0xe000ed00

08005058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005058:	b480      	push	{r7}
 800505a:	b089      	sub	sp, #36	; 0x24
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	f1c3 0307 	rsb	r3, r3, #7
 8005072:	2b04      	cmp	r3, #4
 8005074:	bf28      	it	cs
 8005076:	2304      	movcs	r3, #4
 8005078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	3304      	adds	r3, #4
 800507e:	2b06      	cmp	r3, #6
 8005080:	d902      	bls.n	8005088 <NVIC_EncodePriority+0x30>
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	3b03      	subs	r3, #3
 8005086:	e000      	b.n	800508a <NVIC_EncodePriority+0x32>
 8005088:	2300      	movs	r3, #0
 800508a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800508c:	f04f 32ff 	mov.w	r2, #4294967295
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	fa02 f303 	lsl.w	r3, r2, r3
 8005096:	43da      	mvns	r2, r3
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	401a      	ands	r2, r3
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050a0:	f04f 31ff 	mov.w	r1, #4294967295
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	fa01 f303 	lsl.w	r3, r1, r3
 80050aa:	43d9      	mvns	r1, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050b0:	4313      	orrs	r3, r2
         );
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3724      	adds	r7, #36	; 0x24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
	...

080050c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	3b01      	subs	r3, #1
 80050cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050d0:	d301      	bcc.n	80050d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050d2:	2301      	movs	r3, #1
 80050d4:	e00f      	b.n	80050f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050d6:	4a0a      	ldr	r2, [pc, #40]	; (8005100 <SysTick_Config+0x40>)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3b01      	subs	r3, #1
 80050dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050de:	210f      	movs	r1, #15
 80050e0:	f04f 30ff 	mov.w	r0, #4294967295
 80050e4:	f7ff ff8e 	bl	8005004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050e8:	4b05      	ldr	r3, [pc, #20]	; (8005100 <SysTick_Config+0x40>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050ee:	4b04      	ldr	r3, [pc, #16]	; (8005100 <SysTick_Config+0x40>)
 80050f0:	2207      	movs	r2, #7
 80050f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	e000e010 	.word	0xe000e010

08005104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f7ff ff29 	bl	8004f64 <__NVIC_SetPriorityGrouping>
}
 8005112:	bf00      	nop
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b086      	sub	sp, #24
 800511e:	af00      	add	r7, sp, #0
 8005120:	4603      	mov	r3, r0
 8005122:	60b9      	str	r1, [r7, #8]
 8005124:	607a      	str	r2, [r7, #4]
 8005126:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005128:	f7ff ff40 	bl	8004fac <__NVIC_GetPriorityGrouping>
 800512c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	68b9      	ldr	r1, [r7, #8]
 8005132:	6978      	ldr	r0, [r7, #20]
 8005134:	f7ff ff90 	bl	8005058 <NVIC_EncodePriority>
 8005138:	4602      	mov	r2, r0
 800513a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800513e:	4611      	mov	r1, r2
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff ff5f 	bl	8005004 <__NVIC_SetPriority>
}
 8005146:	bf00      	nop
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b082      	sub	sp, #8
 8005152:	af00      	add	r7, sp, #0
 8005154:	4603      	mov	r3, r0
 8005156:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005158:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800515c:	4618      	mov	r0, r3
 800515e:	f7ff ff33 	bl	8004fc8 <__NVIC_EnableIRQ>
}
 8005162:	bf00      	nop
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b082      	sub	sp, #8
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff ffa4 	bl	80050c0 <SysTick_Config>
 8005178:	4603      	mov	r3, r0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
	...

08005184 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800518c:	f7fe fb34 	bl	80037f8 <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e314      	b.n	80057c6 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a66      	ldr	r2, [pc, #408]	; (800533c <HAL_DMA_Init+0x1b8>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d04a      	beq.n	800523c <HAL_DMA_Init+0xb8>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a65      	ldr	r2, [pc, #404]	; (8005340 <HAL_DMA_Init+0x1bc>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d045      	beq.n	800523c <HAL_DMA_Init+0xb8>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a63      	ldr	r2, [pc, #396]	; (8005344 <HAL_DMA_Init+0x1c0>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d040      	beq.n	800523c <HAL_DMA_Init+0xb8>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a62      	ldr	r2, [pc, #392]	; (8005348 <HAL_DMA_Init+0x1c4>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d03b      	beq.n	800523c <HAL_DMA_Init+0xb8>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a60      	ldr	r2, [pc, #384]	; (800534c <HAL_DMA_Init+0x1c8>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d036      	beq.n	800523c <HAL_DMA_Init+0xb8>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a5f      	ldr	r2, [pc, #380]	; (8005350 <HAL_DMA_Init+0x1cc>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d031      	beq.n	800523c <HAL_DMA_Init+0xb8>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a5d      	ldr	r2, [pc, #372]	; (8005354 <HAL_DMA_Init+0x1d0>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d02c      	beq.n	800523c <HAL_DMA_Init+0xb8>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a5c      	ldr	r2, [pc, #368]	; (8005358 <HAL_DMA_Init+0x1d4>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d027      	beq.n	800523c <HAL_DMA_Init+0xb8>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a5a      	ldr	r2, [pc, #360]	; (800535c <HAL_DMA_Init+0x1d8>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d022      	beq.n	800523c <HAL_DMA_Init+0xb8>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a59      	ldr	r2, [pc, #356]	; (8005360 <HAL_DMA_Init+0x1dc>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d01d      	beq.n	800523c <HAL_DMA_Init+0xb8>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a57      	ldr	r2, [pc, #348]	; (8005364 <HAL_DMA_Init+0x1e0>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d018      	beq.n	800523c <HAL_DMA_Init+0xb8>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a56      	ldr	r2, [pc, #344]	; (8005368 <HAL_DMA_Init+0x1e4>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d013      	beq.n	800523c <HAL_DMA_Init+0xb8>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a54      	ldr	r2, [pc, #336]	; (800536c <HAL_DMA_Init+0x1e8>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d00e      	beq.n	800523c <HAL_DMA_Init+0xb8>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a53      	ldr	r2, [pc, #332]	; (8005370 <HAL_DMA_Init+0x1ec>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d009      	beq.n	800523c <HAL_DMA_Init+0xb8>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a51      	ldr	r2, [pc, #324]	; (8005374 <HAL_DMA_Init+0x1f0>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d004      	beq.n	800523c <HAL_DMA_Init+0xb8>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a50      	ldr	r2, [pc, #320]	; (8005378 <HAL_DMA_Init+0x1f4>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d101      	bne.n	8005240 <HAL_DMA_Init+0xbc>
 800523c:	2301      	movs	r3, #1
 800523e:	e000      	b.n	8005242 <HAL_DMA_Init+0xbe>
 8005240:	2300      	movs	r3, #0
 8005242:	2b00      	cmp	r3, #0
 8005244:	f000 813c 	beq.w	80054c0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a37      	ldr	r2, [pc, #220]	; (800533c <HAL_DMA_Init+0x1b8>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d04a      	beq.n	80052f8 <HAL_DMA_Init+0x174>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a36      	ldr	r2, [pc, #216]	; (8005340 <HAL_DMA_Init+0x1bc>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d045      	beq.n	80052f8 <HAL_DMA_Init+0x174>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a34      	ldr	r2, [pc, #208]	; (8005344 <HAL_DMA_Init+0x1c0>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d040      	beq.n	80052f8 <HAL_DMA_Init+0x174>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a33      	ldr	r2, [pc, #204]	; (8005348 <HAL_DMA_Init+0x1c4>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d03b      	beq.n	80052f8 <HAL_DMA_Init+0x174>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a31      	ldr	r2, [pc, #196]	; (800534c <HAL_DMA_Init+0x1c8>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d036      	beq.n	80052f8 <HAL_DMA_Init+0x174>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a30      	ldr	r2, [pc, #192]	; (8005350 <HAL_DMA_Init+0x1cc>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d031      	beq.n	80052f8 <HAL_DMA_Init+0x174>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a2e      	ldr	r2, [pc, #184]	; (8005354 <HAL_DMA_Init+0x1d0>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d02c      	beq.n	80052f8 <HAL_DMA_Init+0x174>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a2d      	ldr	r2, [pc, #180]	; (8005358 <HAL_DMA_Init+0x1d4>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d027      	beq.n	80052f8 <HAL_DMA_Init+0x174>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a2b      	ldr	r2, [pc, #172]	; (800535c <HAL_DMA_Init+0x1d8>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d022      	beq.n	80052f8 <HAL_DMA_Init+0x174>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a2a      	ldr	r2, [pc, #168]	; (8005360 <HAL_DMA_Init+0x1dc>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d01d      	beq.n	80052f8 <HAL_DMA_Init+0x174>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a28      	ldr	r2, [pc, #160]	; (8005364 <HAL_DMA_Init+0x1e0>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d018      	beq.n	80052f8 <HAL_DMA_Init+0x174>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a27      	ldr	r2, [pc, #156]	; (8005368 <HAL_DMA_Init+0x1e4>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d013      	beq.n	80052f8 <HAL_DMA_Init+0x174>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a25      	ldr	r2, [pc, #148]	; (800536c <HAL_DMA_Init+0x1e8>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d00e      	beq.n	80052f8 <HAL_DMA_Init+0x174>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a24      	ldr	r2, [pc, #144]	; (8005370 <HAL_DMA_Init+0x1ec>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d009      	beq.n	80052f8 <HAL_DMA_Init+0x174>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a22      	ldr	r2, [pc, #136]	; (8005374 <HAL_DMA_Init+0x1f0>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d004      	beq.n	80052f8 <HAL_DMA_Init+0x174>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a21      	ldr	r2, [pc, #132]	; (8005378 <HAL_DMA_Init+0x1f4>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d108      	bne.n	800530a <HAL_DMA_Init+0x186>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0201 	bic.w	r2, r2, #1
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	e007      	b.n	800531a <HAL_DMA_Init+0x196>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 0201 	bic.w	r2, r2, #1
 8005318:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800531a:	e02f      	b.n	800537c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800531c:	f7fe fa6c 	bl	80037f8 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b05      	cmp	r3, #5
 8005328:	d928      	bls.n	800537c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2220      	movs	r2, #32
 800532e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2203      	movs	r2, #3
 8005334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e244      	b.n	80057c6 <HAL_DMA_Init+0x642>
 800533c:	40020010 	.word	0x40020010
 8005340:	40020028 	.word	0x40020028
 8005344:	40020040 	.word	0x40020040
 8005348:	40020058 	.word	0x40020058
 800534c:	40020070 	.word	0x40020070
 8005350:	40020088 	.word	0x40020088
 8005354:	400200a0 	.word	0x400200a0
 8005358:	400200b8 	.word	0x400200b8
 800535c:	40020410 	.word	0x40020410
 8005360:	40020428 	.word	0x40020428
 8005364:	40020440 	.word	0x40020440
 8005368:	40020458 	.word	0x40020458
 800536c:	40020470 	.word	0x40020470
 8005370:	40020488 	.word	0x40020488
 8005374:	400204a0 	.word	0x400204a0
 8005378:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1c8      	bne.n	800531c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	4b84      	ldr	r3, [pc, #528]	; (80055a8 <HAL_DMA_Init+0x424>)
 8005396:	4013      	ands	r3, r2
 8005398:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80053a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053ba:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	2b04      	cmp	r3, #4
 80053ce:	d107      	bne.n	80053e0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d8:	4313      	orrs	r3, r2
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	4313      	orrs	r3, r2
 80053de:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	2b28      	cmp	r3, #40	; 0x28
 80053e6:	d903      	bls.n	80053f0 <HAL_DMA_Init+0x26c>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	2b2e      	cmp	r3, #46	; 0x2e
 80053ee:	d91f      	bls.n	8005430 <HAL_DMA_Init+0x2ac>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	2b3e      	cmp	r3, #62	; 0x3e
 80053f6:	d903      	bls.n	8005400 <HAL_DMA_Init+0x27c>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	2b42      	cmp	r3, #66	; 0x42
 80053fe:	d917      	bls.n	8005430 <HAL_DMA_Init+0x2ac>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	2b46      	cmp	r3, #70	; 0x46
 8005406:	d903      	bls.n	8005410 <HAL_DMA_Init+0x28c>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	2b48      	cmp	r3, #72	; 0x48
 800540e:	d90f      	bls.n	8005430 <HAL_DMA_Init+0x2ac>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	2b4e      	cmp	r3, #78	; 0x4e
 8005416:	d903      	bls.n	8005420 <HAL_DMA_Init+0x29c>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	2b52      	cmp	r3, #82	; 0x52
 800541e:	d907      	bls.n	8005430 <HAL_DMA_Init+0x2ac>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	2b73      	cmp	r3, #115	; 0x73
 8005426:	d905      	bls.n	8005434 <HAL_DMA_Init+0x2b0>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	2b77      	cmp	r3, #119	; 0x77
 800542e:	d801      	bhi.n	8005434 <HAL_DMA_Init+0x2b0>
 8005430:	2301      	movs	r3, #1
 8005432:	e000      	b.n	8005436 <HAL_DMA_Init+0x2b2>
 8005434:	2300      	movs	r3, #0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005440:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f023 0307 	bic.w	r3, r3, #7
 8005458:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	4313      	orrs	r3, r2
 8005462:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005468:	2b04      	cmp	r3, #4
 800546a:	d117      	bne.n	800549c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	4313      	orrs	r3, r2
 8005474:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00e      	beq.n	800549c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f001 fdcc 	bl	800701c <DMA_CheckFifoParam>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d008      	beq.n	800549c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2240      	movs	r2, #64	; 0x40
 800548e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e194      	b.n	80057c6 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f001 fd07 	bl	8006eb8 <DMA_CalcBaseAndBitshift>
 80054aa:	4603      	mov	r3, r0
 80054ac:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b2:	f003 031f 	and.w	r3, r3, #31
 80054b6:	223f      	movs	r2, #63	; 0x3f
 80054b8:	409a      	lsls	r2, r3
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	609a      	str	r2, [r3, #8]
 80054be:	e0ca      	b.n	8005656 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a39      	ldr	r2, [pc, #228]	; (80055ac <HAL_DMA_Init+0x428>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d022      	beq.n	8005510 <HAL_DMA_Init+0x38c>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a38      	ldr	r2, [pc, #224]	; (80055b0 <HAL_DMA_Init+0x42c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d01d      	beq.n	8005510 <HAL_DMA_Init+0x38c>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a36      	ldr	r2, [pc, #216]	; (80055b4 <HAL_DMA_Init+0x430>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d018      	beq.n	8005510 <HAL_DMA_Init+0x38c>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a35      	ldr	r2, [pc, #212]	; (80055b8 <HAL_DMA_Init+0x434>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d013      	beq.n	8005510 <HAL_DMA_Init+0x38c>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a33      	ldr	r2, [pc, #204]	; (80055bc <HAL_DMA_Init+0x438>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d00e      	beq.n	8005510 <HAL_DMA_Init+0x38c>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a32      	ldr	r2, [pc, #200]	; (80055c0 <HAL_DMA_Init+0x43c>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d009      	beq.n	8005510 <HAL_DMA_Init+0x38c>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a30      	ldr	r2, [pc, #192]	; (80055c4 <HAL_DMA_Init+0x440>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d004      	beq.n	8005510 <HAL_DMA_Init+0x38c>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a2f      	ldr	r2, [pc, #188]	; (80055c8 <HAL_DMA_Init+0x444>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d101      	bne.n	8005514 <HAL_DMA_Init+0x390>
 8005510:	2301      	movs	r3, #1
 8005512:	e000      	b.n	8005516 <HAL_DMA_Init+0x392>
 8005514:	2300      	movs	r3, #0
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 8094 	beq.w	8005644 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a22      	ldr	r2, [pc, #136]	; (80055ac <HAL_DMA_Init+0x428>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d021      	beq.n	800556a <HAL_DMA_Init+0x3e6>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a21      	ldr	r2, [pc, #132]	; (80055b0 <HAL_DMA_Init+0x42c>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d01c      	beq.n	800556a <HAL_DMA_Init+0x3e6>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a1f      	ldr	r2, [pc, #124]	; (80055b4 <HAL_DMA_Init+0x430>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d017      	beq.n	800556a <HAL_DMA_Init+0x3e6>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a1e      	ldr	r2, [pc, #120]	; (80055b8 <HAL_DMA_Init+0x434>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d012      	beq.n	800556a <HAL_DMA_Init+0x3e6>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a1c      	ldr	r2, [pc, #112]	; (80055bc <HAL_DMA_Init+0x438>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d00d      	beq.n	800556a <HAL_DMA_Init+0x3e6>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a1b      	ldr	r2, [pc, #108]	; (80055c0 <HAL_DMA_Init+0x43c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d008      	beq.n	800556a <HAL_DMA_Init+0x3e6>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a19      	ldr	r2, [pc, #100]	; (80055c4 <HAL_DMA_Init+0x440>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d003      	beq.n	800556a <HAL_DMA_Init+0x3e6>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a18      	ldr	r2, [pc, #96]	; (80055c8 <HAL_DMA_Init+0x444>)
 8005568:	4293      	cmp	r3, r2
 800556a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2202      	movs	r2, #2
 8005570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	4b11      	ldr	r3, [pc, #68]	; (80055cc <HAL_DMA_Init+0x448>)
 8005588:	4013      	ands	r3, r2
 800558a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	2b40      	cmp	r3, #64	; 0x40
 8005592:	d01d      	beq.n	80055d0 <HAL_DMA_Init+0x44c>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	2b80      	cmp	r3, #128	; 0x80
 800559a:	d102      	bne.n	80055a2 <HAL_DMA_Init+0x41e>
 800559c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80055a0:	e017      	b.n	80055d2 <HAL_DMA_Init+0x44e>
 80055a2:	2300      	movs	r3, #0
 80055a4:	e015      	b.n	80055d2 <HAL_DMA_Init+0x44e>
 80055a6:	bf00      	nop
 80055a8:	fe10803f 	.word	0xfe10803f
 80055ac:	58025408 	.word	0x58025408
 80055b0:	5802541c 	.word	0x5802541c
 80055b4:	58025430 	.word	0x58025430
 80055b8:	58025444 	.word	0x58025444
 80055bc:	58025458 	.word	0x58025458
 80055c0:	5802546c 	.word	0x5802546c
 80055c4:	58025480 	.word	0x58025480
 80055c8:	58025494 	.word	0x58025494
 80055cc:	fffe000f 	.word	0xfffe000f
 80055d0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	68d2      	ldr	r2, [r2, #12]
 80055d6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80055d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80055e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80055e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80055f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80055f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005600:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	4313      	orrs	r3, r2
 8005606:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	461a      	mov	r2, r3
 8005616:	4b6e      	ldr	r3, [pc, #440]	; (80057d0 <HAL_DMA_Init+0x64c>)
 8005618:	4413      	add	r3, r2
 800561a:	4a6e      	ldr	r2, [pc, #440]	; (80057d4 <HAL_DMA_Init+0x650>)
 800561c:	fba2 2303 	umull	r2, r3, r2, r3
 8005620:	091b      	lsrs	r3, r3, #4
 8005622:	009a      	lsls	r2, r3, #2
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f001 fc45 	bl	8006eb8 <DMA_CalcBaseAndBitshift>
 800562e:	4603      	mov	r3, r0
 8005630:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005636:	f003 031f 	and.w	r3, r3, #31
 800563a:	2201      	movs	r2, #1
 800563c:	409a      	lsls	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	605a      	str	r2, [r3, #4]
 8005642:	e008      	b.n	8005656 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2240      	movs	r2, #64	; 0x40
 8005648:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2203      	movs	r2, #3
 800564e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e0b7      	b.n	80057c6 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a5f      	ldr	r2, [pc, #380]	; (80057d8 <HAL_DMA_Init+0x654>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d072      	beq.n	8005746 <HAL_DMA_Init+0x5c2>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a5d      	ldr	r2, [pc, #372]	; (80057dc <HAL_DMA_Init+0x658>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d06d      	beq.n	8005746 <HAL_DMA_Init+0x5c2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a5c      	ldr	r2, [pc, #368]	; (80057e0 <HAL_DMA_Init+0x65c>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d068      	beq.n	8005746 <HAL_DMA_Init+0x5c2>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a5a      	ldr	r2, [pc, #360]	; (80057e4 <HAL_DMA_Init+0x660>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d063      	beq.n	8005746 <HAL_DMA_Init+0x5c2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a59      	ldr	r2, [pc, #356]	; (80057e8 <HAL_DMA_Init+0x664>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d05e      	beq.n	8005746 <HAL_DMA_Init+0x5c2>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a57      	ldr	r2, [pc, #348]	; (80057ec <HAL_DMA_Init+0x668>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d059      	beq.n	8005746 <HAL_DMA_Init+0x5c2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a56      	ldr	r2, [pc, #344]	; (80057f0 <HAL_DMA_Init+0x66c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d054      	beq.n	8005746 <HAL_DMA_Init+0x5c2>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a54      	ldr	r2, [pc, #336]	; (80057f4 <HAL_DMA_Init+0x670>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d04f      	beq.n	8005746 <HAL_DMA_Init+0x5c2>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a53      	ldr	r2, [pc, #332]	; (80057f8 <HAL_DMA_Init+0x674>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d04a      	beq.n	8005746 <HAL_DMA_Init+0x5c2>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a51      	ldr	r2, [pc, #324]	; (80057fc <HAL_DMA_Init+0x678>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d045      	beq.n	8005746 <HAL_DMA_Init+0x5c2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a50      	ldr	r2, [pc, #320]	; (8005800 <HAL_DMA_Init+0x67c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d040      	beq.n	8005746 <HAL_DMA_Init+0x5c2>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a4e      	ldr	r2, [pc, #312]	; (8005804 <HAL_DMA_Init+0x680>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d03b      	beq.n	8005746 <HAL_DMA_Init+0x5c2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a4d      	ldr	r2, [pc, #308]	; (8005808 <HAL_DMA_Init+0x684>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d036      	beq.n	8005746 <HAL_DMA_Init+0x5c2>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a4b      	ldr	r2, [pc, #300]	; (800580c <HAL_DMA_Init+0x688>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d031      	beq.n	8005746 <HAL_DMA_Init+0x5c2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a4a      	ldr	r2, [pc, #296]	; (8005810 <HAL_DMA_Init+0x68c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d02c      	beq.n	8005746 <HAL_DMA_Init+0x5c2>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a48      	ldr	r2, [pc, #288]	; (8005814 <HAL_DMA_Init+0x690>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d027      	beq.n	8005746 <HAL_DMA_Init+0x5c2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a47      	ldr	r2, [pc, #284]	; (8005818 <HAL_DMA_Init+0x694>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d022      	beq.n	8005746 <HAL_DMA_Init+0x5c2>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a45      	ldr	r2, [pc, #276]	; (800581c <HAL_DMA_Init+0x698>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d01d      	beq.n	8005746 <HAL_DMA_Init+0x5c2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a44      	ldr	r2, [pc, #272]	; (8005820 <HAL_DMA_Init+0x69c>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d018      	beq.n	8005746 <HAL_DMA_Init+0x5c2>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a42      	ldr	r2, [pc, #264]	; (8005824 <HAL_DMA_Init+0x6a0>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d013      	beq.n	8005746 <HAL_DMA_Init+0x5c2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a41      	ldr	r2, [pc, #260]	; (8005828 <HAL_DMA_Init+0x6a4>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d00e      	beq.n	8005746 <HAL_DMA_Init+0x5c2>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a3f      	ldr	r2, [pc, #252]	; (800582c <HAL_DMA_Init+0x6a8>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d009      	beq.n	8005746 <HAL_DMA_Init+0x5c2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a3e      	ldr	r2, [pc, #248]	; (8005830 <HAL_DMA_Init+0x6ac>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d004      	beq.n	8005746 <HAL_DMA_Init+0x5c2>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a3c      	ldr	r2, [pc, #240]	; (8005834 <HAL_DMA_Init+0x6b0>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d101      	bne.n	800574a <HAL_DMA_Init+0x5c6>
 8005746:	2301      	movs	r3, #1
 8005748:	e000      	b.n	800574c <HAL_DMA_Init+0x5c8>
 800574a:	2300      	movs	r3, #0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d032      	beq.n	80057b6 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f001 fcdf 	bl	8007114 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	2b80      	cmp	r3, #128	; 0x80
 800575c:	d102      	bne.n	8005764 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800576c:	b2d2      	uxtb	r2, r2
 800576e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005778:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d010      	beq.n	80057a4 <HAL_DMA_Init+0x620>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	2b08      	cmp	r3, #8
 8005788:	d80c      	bhi.n	80057a4 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f001 fd5c 	bl	8007248 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80057a0:	605a      	str	r2, [r3, #4]
 80057a2:	e008      	b.n	80057b6 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3718      	adds	r7, #24
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	a7fdabf8 	.word	0xa7fdabf8
 80057d4:	cccccccd 	.word	0xcccccccd
 80057d8:	40020010 	.word	0x40020010
 80057dc:	40020028 	.word	0x40020028
 80057e0:	40020040 	.word	0x40020040
 80057e4:	40020058 	.word	0x40020058
 80057e8:	40020070 	.word	0x40020070
 80057ec:	40020088 	.word	0x40020088
 80057f0:	400200a0 	.word	0x400200a0
 80057f4:	400200b8 	.word	0x400200b8
 80057f8:	40020410 	.word	0x40020410
 80057fc:	40020428 	.word	0x40020428
 8005800:	40020440 	.word	0x40020440
 8005804:	40020458 	.word	0x40020458
 8005808:	40020470 	.word	0x40020470
 800580c:	40020488 	.word	0x40020488
 8005810:	400204a0 	.word	0x400204a0
 8005814:	400204b8 	.word	0x400204b8
 8005818:	58025408 	.word	0x58025408
 800581c:	5802541c 	.word	0x5802541c
 8005820:	58025430 	.word	0x58025430
 8005824:	58025444 	.word	0x58025444
 8005828:	58025458 	.word	0x58025458
 800582c:	5802546c 	.word	0x5802546c
 8005830:	58025480 	.word	0x58025480
 8005834:	58025494 	.word	0x58025494

08005838 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
 8005844:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005846:	2300      	movs	r3, #0
 8005848:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e226      	b.n	8005ca2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800585a:	2b01      	cmp	r3, #1
 800585c:	d101      	bne.n	8005862 <HAL_DMA_Start_IT+0x2a>
 800585e:	2302      	movs	r3, #2
 8005860:	e21f      	b.n	8005ca2 <HAL_DMA_Start_IT+0x46a>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b01      	cmp	r3, #1
 8005874:	f040 820a 	bne.w	8005c8c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a68      	ldr	r2, [pc, #416]	; (8005a2c <HAL_DMA_Start_IT+0x1f4>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d04a      	beq.n	8005926 <HAL_DMA_Start_IT+0xee>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a66      	ldr	r2, [pc, #408]	; (8005a30 <HAL_DMA_Start_IT+0x1f8>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d045      	beq.n	8005926 <HAL_DMA_Start_IT+0xee>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a65      	ldr	r2, [pc, #404]	; (8005a34 <HAL_DMA_Start_IT+0x1fc>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d040      	beq.n	8005926 <HAL_DMA_Start_IT+0xee>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a63      	ldr	r2, [pc, #396]	; (8005a38 <HAL_DMA_Start_IT+0x200>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d03b      	beq.n	8005926 <HAL_DMA_Start_IT+0xee>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a62      	ldr	r2, [pc, #392]	; (8005a3c <HAL_DMA_Start_IT+0x204>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d036      	beq.n	8005926 <HAL_DMA_Start_IT+0xee>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a60      	ldr	r2, [pc, #384]	; (8005a40 <HAL_DMA_Start_IT+0x208>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d031      	beq.n	8005926 <HAL_DMA_Start_IT+0xee>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a5f      	ldr	r2, [pc, #380]	; (8005a44 <HAL_DMA_Start_IT+0x20c>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d02c      	beq.n	8005926 <HAL_DMA_Start_IT+0xee>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a5d      	ldr	r2, [pc, #372]	; (8005a48 <HAL_DMA_Start_IT+0x210>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d027      	beq.n	8005926 <HAL_DMA_Start_IT+0xee>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a5c      	ldr	r2, [pc, #368]	; (8005a4c <HAL_DMA_Start_IT+0x214>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d022      	beq.n	8005926 <HAL_DMA_Start_IT+0xee>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a5a      	ldr	r2, [pc, #360]	; (8005a50 <HAL_DMA_Start_IT+0x218>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d01d      	beq.n	8005926 <HAL_DMA_Start_IT+0xee>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a59      	ldr	r2, [pc, #356]	; (8005a54 <HAL_DMA_Start_IT+0x21c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d018      	beq.n	8005926 <HAL_DMA_Start_IT+0xee>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a57      	ldr	r2, [pc, #348]	; (8005a58 <HAL_DMA_Start_IT+0x220>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d013      	beq.n	8005926 <HAL_DMA_Start_IT+0xee>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a56      	ldr	r2, [pc, #344]	; (8005a5c <HAL_DMA_Start_IT+0x224>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d00e      	beq.n	8005926 <HAL_DMA_Start_IT+0xee>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a54      	ldr	r2, [pc, #336]	; (8005a60 <HAL_DMA_Start_IT+0x228>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d009      	beq.n	8005926 <HAL_DMA_Start_IT+0xee>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a53      	ldr	r2, [pc, #332]	; (8005a64 <HAL_DMA_Start_IT+0x22c>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d004      	beq.n	8005926 <HAL_DMA_Start_IT+0xee>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a51      	ldr	r2, [pc, #324]	; (8005a68 <HAL_DMA_Start_IT+0x230>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d108      	bne.n	8005938 <HAL_DMA_Start_IT+0x100>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 0201 	bic.w	r2, r2, #1
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	e007      	b.n	8005948 <HAL_DMA_Start_IT+0x110>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0201 	bic.w	r2, r2, #1
 8005946:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	68b9      	ldr	r1, [r7, #8]
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f001 f906 	bl	8006b60 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a34      	ldr	r2, [pc, #208]	; (8005a2c <HAL_DMA_Start_IT+0x1f4>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d04a      	beq.n	80059f4 <HAL_DMA_Start_IT+0x1bc>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a33      	ldr	r2, [pc, #204]	; (8005a30 <HAL_DMA_Start_IT+0x1f8>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d045      	beq.n	80059f4 <HAL_DMA_Start_IT+0x1bc>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a31      	ldr	r2, [pc, #196]	; (8005a34 <HAL_DMA_Start_IT+0x1fc>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d040      	beq.n	80059f4 <HAL_DMA_Start_IT+0x1bc>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a30      	ldr	r2, [pc, #192]	; (8005a38 <HAL_DMA_Start_IT+0x200>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d03b      	beq.n	80059f4 <HAL_DMA_Start_IT+0x1bc>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a2e      	ldr	r2, [pc, #184]	; (8005a3c <HAL_DMA_Start_IT+0x204>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d036      	beq.n	80059f4 <HAL_DMA_Start_IT+0x1bc>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a2d      	ldr	r2, [pc, #180]	; (8005a40 <HAL_DMA_Start_IT+0x208>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d031      	beq.n	80059f4 <HAL_DMA_Start_IT+0x1bc>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a2b      	ldr	r2, [pc, #172]	; (8005a44 <HAL_DMA_Start_IT+0x20c>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d02c      	beq.n	80059f4 <HAL_DMA_Start_IT+0x1bc>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a2a      	ldr	r2, [pc, #168]	; (8005a48 <HAL_DMA_Start_IT+0x210>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d027      	beq.n	80059f4 <HAL_DMA_Start_IT+0x1bc>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a28      	ldr	r2, [pc, #160]	; (8005a4c <HAL_DMA_Start_IT+0x214>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d022      	beq.n	80059f4 <HAL_DMA_Start_IT+0x1bc>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a27      	ldr	r2, [pc, #156]	; (8005a50 <HAL_DMA_Start_IT+0x218>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d01d      	beq.n	80059f4 <HAL_DMA_Start_IT+0x1bc>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a25      	ldr	r2, [pc, #148]	; (8005a54 <HAL_DMA_Start_IT+0x21c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d018      	beq.n	80059f4 <HAL_DMA_Start_IT+0x1bc>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a24      	ldr	r2, [pc, #144]	; (8005a58 <HAL_DMA_Start_IT+0x220>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d013      	beq.n	80059f4 <HAL_DMA_Start_IT+0x1bc>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a22      	ldr	r2, [pc, #136]	; (8005a5c <HAL_DMA_Start_IT+0x224>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d00e      	beq.n	80059f4 <HAL_DMA_Start_IT+0x1bc>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a21      	ldr	r2, [pc, #132]	; (8005a60 <HAL_DMA_Start_IT+0x228>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d009      	beq.n	80059f4 <HAL_DMA_Start_IT+0x1bc>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a1f      	ldr	r2, [pc, #124]	; (8005a64 <HAL_DMA_Start_IT+0x22c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d004      	beq.n	80059f4 <HAL_DMA_Start_IT+0x1bc>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a1e      	ldr	r2, [pc, #120]	; (8005a68 <HAL_DMA_Start_IT+0x230>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d101      	bne.n	80059f8 <HAL_DMA_Start_IT+0x1c0>
 80059f4:	2301      	movs	r3, #1
 80059f6:	e000      	b.n	80059fa <HAL_DMA_Start_IT+0x1c2>
 80059f8:	2300      	movs	r3, #0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d036      	beq.n	8005a6c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f023 021e 	bic.w	r2, r3, #30
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f042 0216 	orr.w	r2, r2, #22
 8005a10:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d03e      	beq.n	8005a98 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f042 0208 	orr.w	r2, r2, #8
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	e035      	b.n	8005a98 <HAL_DMA_Start_IT+0x260>
 8005a2c:	40020010 	.word	0x40020010
 8005a30:	40020028 	.word	0x40020028
 8005a34:	40020040 	.word	0x40020040
 8005a38:	40020058 	.word	0x40020058
 8005a3c:	40020070 	.word	0x40020070
 8005a40:	40020088 	.word	0x40020088
 8005a44:	400200a0 	.word	0x400200a0
 8005a48:	400200b8 	.word	0x400200b8
 8005a4c:	40020410 	.word	0x40020410
 8005a50:	40020428 	.word	0x40020428
 8005a54:	40020440 	.word	0x40020440
 8005a58:	40020458 	.word	0x40020458
 8005a5c:	40020470 	.word	0x40020470
 8005a60:	40020488 	.word	0x40020488
 8005a64:	400204a0 	.word	0x400204a0
 8005a68:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f023 020e 	bic.w	r2, r3, #14
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f042 020a 	orr.w	r2, r2, #10
 8005a7e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d007      	beq.n	8005a98 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f042 0204 	orr.w	r2, r2, #4
 8005a96:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a83      	ldr	r2, [pc, #524]	; (8005cac <HAL_DMA_Start_IT+0x474>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d072      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a82      	ldr	r2, [pc, #520]	; (8005cb0 <HAL_DMA_Start_IT+0x478>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d06d      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a80      	ldr	r2, [pc, #512]	; (8005cb4 <HAL_DMA_Start_IT+0x47c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d068      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a7f      	ldr	r2, [pc, #508]	; (8005cb8 <HAL_DMA_Start_IT+0x480>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d063      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a7d      	ldr	r2, [pc, #500]	; (8005cbc <HAL_DMA_Start_IT+0x484>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d05e      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a7c      	ldr	r2, [pc, #496]	; (8005cc0 <HAL_DMA_Start_IT+0x488>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d059      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a7a      	ldr	r2, [pc, #488]	; (8005cc4 <HAL_DMA_Start_IT+0x48c>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d054      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a79      	ldr	r2, [pc, #484]	; (8005cc8 <HAL_DMA_Start_IT+0x490>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d04f      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a77      	ldr	r2, [pc, #476]	; (8005ccc <HAL_DMA_Start_IT+0x494>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d04a      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a76      	ldr	r2, [pc, #472]	; (8005cd0 <HAL_DMA_Start_IT+0x498>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d045      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a74      	ldr	r2, [pc, #464]	; (8005cd4 <HAL_DMA_Start_IT+0x49c>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d040      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a73      	ldr	r2, [pc, #460]	; (8005cd8 <HAL_DMA_Start_IT+0x4a0>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d03b      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a71      	ldr	r2, [pc, #452]	; (8005cdc <HAL_DMA_Start_IT+0x4a4>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d036      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a70      	ldr	r2, [pc, #448]	; (8005ce0 <HAL_DMA_Start_IT+0x4a8>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d031      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a6e      	ldr	r2, [pc, #440]	; (8005ce4 <HAL_DMA_Start_IT+0x4ac>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d02c      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a6d      	ldr	r2, [pc, #436]	; (8005ce8 <HAL_DMA_Start_IT+0x4b0>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d027      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a6b      	ldr	r2, [pc, #428]	; (8005cec <HAL_DMA_Start_IT+0x4b4>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d022      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a6a      	ldr	r2, [pc, #424]	; (8005cf0 <HAL_DMA_Start_IT+0x4b8>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d01d      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a68      	ldr	r2, [pc, #416]	; (8005cf4 <HAL_DMA_Start_IT+0x4bc>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d018      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a67      	ldr	r2, [pc, #412]	; (8005cf8 <HAL_DMA_Start_IT+0x4c0>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d013      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a65      	ldr	r2, [pc, #404]	; (8005cfc <HAL_DMA_Start_IT+0x4c4>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d00e      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a64      	ldr	r2, [pc, #400]	; (8005d00 <HAL_DMA_Start_IT+0x4c8>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d009      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a62      	ldr	r2, [pc, #392]	; (8005d04 <HAL_DMA_Start_IT+0x4cc>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d004      	beq.n	8005b88 <HAL_DMA_Start_IT+0x350>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a61      	ldr	r2, [pc, #388]	; (8005d08 <HAL_DMA_Start_IT+0x4d0>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d101      	bne.n	8005b8c <HAL_DMA_Start_IT+0x354>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e000      	b.n	8005b8e <HAL_DMA_Start_IT+0x356>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d01a      	beq.n	8005bc8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d007      	beq.n	8005bb0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005baa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bae:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d007      	beq.n	8005bc8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bc6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a37      	ldr	r2, [pc, #220]	; (8005cac <HAL_DMA_Start_IT+0x474>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d04a      	beq.n	8005c68 <HAL_DMA_Start_IT+0x430>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a36      	ldr	r2, [pc, #216]	; (8005cb0 <HAL_DMA_Start_IT+0x478>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d045      	beq.n	8005c68 <HAL_DMA_Start_IT+0x430>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a34      	ldr	r2, [pc, #208]	; (8005cb4 <HAL_DMA_Start_IT+0x47c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d040      	beq.n	8005c68 <HAL_DMA_Start_IT+0x430>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a33      	ldr	r2, [pc, #204]	; (8005cb8 <HAL_DMA_Start_IT+0x480>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d03b      	beq.n	8005c68 <HAL_DMA_Start_IT+0x430>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a31      	ldr	r2, [pc, #196]	; (8005cbc <HAL_DMA_Start_IT+0x484>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d036      	beq.n	8005c68 <HAL_DMA_Start_IT+0x430>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a30      	ldr	r2, [pc, #192]	; (8005cc0 <HAL_DMA_Start_IT+0x488>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d031      	beq.n	8005c68 <HAL_DMA_Start_IT+0x430>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a2e      	ldr	r2, [pc, #184]	; (8005cc4 <HAL_DMA_Start_IT+0x48c>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d02c      	beq.n	8005c68 <HAL_DMA_Start_IT+0x430>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a2d      	ldr	r2, [pc, #180]	; (8005cc8 <HAL_DMA_Start_IT+0x490>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d027      	beq.n	8005c68 <HAL_DMA_Start_IT+0x430>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a2b      	ldr	r2, [pc, #172]	; (8005ccc <HAL_DMA_Start_IT+0x494>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d022      	beq.n	8005c68 <HAL_DMA_Start_IT+0x430>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a2a      	ldr	r2, [pc, #168]	; (8005cd0 <HAL_DMA_Start_IT+0x498>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d01d      	beq.n	8005c68 <HAL_DMA_Start_IT+0x430>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a28      	ldr	r2, [pc, #160]	; (8005cd4 <HAL_DMA_Start_IT+0x49c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d018      	beq.n	8005c68 <HAL_DMA_Start_IT+0x430>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a27      	ldr	r2, [pc, #156]	; (8005cd8 <HAL_DMA_Start_IT+0x4a0>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d013      	beq.n	8005c68 <HAL_DMA_Start_IT+0x430>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a25      	ldr	r2, [pc, #148]	; (8005cdc <HAL_DMA_Start_IT+0x4a4>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d00e      	beq.n	8005c68 <HAL_DMA_Start_IT+0x430>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a24      	ldr	r2, [pc, #144]	; (8005ce0 <HAL_DMA_Start_IT+0x4a8>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d009      	beq.n	8005c68 <HAL_DMA_Start_IT+0x430>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a22      	ldr	r2, [pc, #136]	; (8005ce4 <HAL_DMA_Start_IT+0x4ac>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d004      	beq.n	8005c68 <HAL_DMA_Start_IT+0x430>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a21      	ldr	r2, [pc, #132]	; (8005ce8 <HAL_DMA_Start_IT+0x4b0>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d108      	bne.n	8005c7a <HAL_DMA_Start_IT+0x442>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0201 	orr.w	r2, r2, #1
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	e012      	b.n	8005ca0 <HAL_DMA_Start_IT+0x468>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f042 0201 	orr.w	r2, r2, #1
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	e009      	b.n	8005ca0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c92:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3718      	adds	r7, #24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	40020010 	.word	0x40020010
 8005cb0:	40020028 	.word	0x40020028
 8005cb4:	40020040 	.word	0x40020040
 8005cb8:	40020058 	.word	0x40020058
 8005cbc:	40020070 	.word	0x40020070
 8005cc0:	40020088 	.word	0x40020088
 8005cc4:	400200a0 	.word	0x400200a0
 8005cc8:	400200b8 	.word	0x400200b8
 8005ccc:	40020410 	.word	0x40020410
 8005cd0:	40020428 	.word	0x40020428
 8005cd4:	40020440 	.word	0x40020440
 8005cd8:	40020458 	.word	0x40020458
 8005cdc:	40020470 	.word	0x40020470
 8005ce0:	40020488 	.word	0x40020488
 8005ce4:	400204a0 	.word	0x400204a0
 8005ce8:	400204b8 	.word	0x400204b8
 8005cec:	58025408 	.word	0x58025408
 8005cf0:	5802541c 	.word	0x5802541c
 8005cf4:	58025430 	.word	0x58025430
 8005cf8:	58025444 	.word	0x58025444
 8005cfc:	58025458 	.word	0x58025458
 8005d00:	5802546c 	.word	0x5802546c
 8005d04:	58025480 	.word	0x58025480
 8005d08:	58025494 	.word	0x58025494

08005d0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b08a      	sub	sp, #40	; 0x28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005d14:	2300      	movs	r3, #0
 8005d16:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d18:	4b67      	ldr	r3, [pc, #412]	; (8005eb8 <HAL_DMA_IRQHandler+0x1ac>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a67      	ldr	r2, [pc, #412]	; (8005ebc <HAL_DMA_IRQHandler+0x1b0>)
 8005d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d22:	0a9b      	lsrs	r3, r3, #10
 8005d24:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d2a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d30:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a5f      	ldr	r2, [pc, #380]	; (8005ec0 <HAL_DMA_IRQHandler+0x1b4>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d04a      	beq.n	8005dde <HAL_DMA_IRQHandler+0xd2>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a5d      	ldr	r2, [pc, #372]	; (8005ec4 <HAL_DMA_IRQHandler+0x1b8>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d045      	beq.n	8005dde <HAL_DMA_IRQHandler+0xd2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a5c      	ldr	r2, [pc, #368]	; (8005ec8 <HAL_DMA_IRQHandler+0x1bc>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d040      	beq.n	8005dde <HAL_DMA_IRQHandler+0xd2>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a5a      	ldr	r2, [pc, #360]	; (8005ecc <HAL_DMA_IRQHandler+0x1c0>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d03b      	beq.n	8005dde <HAL_DMA_IRQHandler+0xd2>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a59      	ldr	r2, [pc, #356]	; (8005ed0 <HAL_DMA_IRQHandler+0x1c4>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d036      	beq.n	8005dde <HAL_DMA_IRQHandler+0xd2>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a57      	ldr	r2, [pc, #348]	; (8005ed4 <HAL_DMA_IRQHandler+0x1c8>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d031      	beq.n	8005dde <HAL_DMA_IRQHandler+0xd2>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a56      	ldr	r2, [pc, #344]	; (8005ed8 <HAL_DMA_IRQHandler+0x1cc>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d02c      	beq.n	8005dde <HAL_DMA_IRQHandler+0xd2>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a54      	ldr	r2, [pc, #336]	; (8005edc <HAL_DMA_IRQHandler+0x1d0>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d027      	beq.n	8005dde <HAL_DMA_IRQHandler+0xd2>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a53      	ldr	r2, [pc, #332]	; (8005ee0 <HAL_DMA_IRQHandler+0x1d4>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d022      	beq.n	8005dde <HAL_DMA_IRQHandler+0xd2>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a51      	ldr	r2, [pc, #324]	; (8005ee4 <HAL_DMA_IRQHandler+0x1d8>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d01d      	beq.n	8005dde <HAL_DMA_IRQHandler+0xd2>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a50      	ldr	r2, [pc, #320]	; (8005ee8 <HAL_DMA_IRQHandler+0x1dc>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d018      	beq.n	8005dde <HAL_DMA_IRQHandler+0xd2>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a4e      	ldr	r2, [pc, #312]	; (8005eec <HAL_DMA_IRQHandler+0x1e0>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d013      	beq.n	8005dde <HAL_DMA_IRQHandler+0xd2>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a4d      	ldr	r2, [pc, #308]	; (8005ef0 <HAL_DMA_IRQHandler+0x1e4>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d00e      	beq.n	8005dde <HAL_DMA_IRQHandler+0xd2>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a4b      	ldr	r2, [pc, #300]	; (8005ef4 <HAL_DMA_IRQHandler+0x1e8>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d009      	beq.n	8005dde <HAL_DMA_IRQHandler+0xd2>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a4a      	ldr	r2, [pc, #296]	; (8005ef8 <HAL_DMA_IRQHandler+0x1ec>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d004      	beq.n	8005dde <HAL_DMA_IRQHandler+0xd2>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a48      	ldr	r2, [pc, #288]	; (8005efc <HAL_DMA_IRQHandler+0x1f0>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d101      	bne.n	8005de2 <HAL_DMA_IRQHandler+0xd6>
 8005dde:	2301      	movs	r3, #1
 8005de0:	e000      	b.n	8005de4 <HAL_DMA_IRQHandler+0xd8>
 8005de2:	2300      	movs	r3, #0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 842b 	beq.w	8006640 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dee:	f003 031f 	and.w	r3, r3, #31
 8005df2:	2208      	movs	r2, #8
 8005df4:	409a      	lsls	r2, r3
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	4013      	ands	r3, r2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 80a2 	beq.w	8005f44 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a2e      	ldr	r2, [pc, #184]	; (8005ec0 <HAL_DMA_IRQHandler+0x1b4>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d04a      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x194>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a2d      	ldr	r2, [pc, #180]	; (8005ec4 <HAL_DMA_IRQHandler+0x1b8>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d045      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x194>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a2b      	ldr	r2, [pc, #172]	; (8005ec8 <HAL_DMA_IRQHandler+0x1bc>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d040      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x194>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a2a      	ldr	r2, [pc, #168]	; (8005ecc <HAL_DMA_IRQHandler+0x1c0>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d03b      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x194>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a28      	ldr	r2, [pc, #160]	; (8005ed0 <HAL_DMA_IRQHandler+0x1c4>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d036      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x194>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a27      	ldr	r2, [pc, #156]	; (8005ed4 <HAL_DMA_IRQHandler+0x1c8>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d031      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x194>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a25      	ldr	r2, [pc, #148]	; (8005ed8 <HAL_DMA_IRQHandler+0x1cc>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d02c      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x194>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a24      	ldr	r2, [pc, #144]	; (8005edc <HAL_DMA_IRQHandler+0x1d0>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d027      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x194>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a22      	ldr	r2, [pc, #136]	; (8005ee0 <HAL_DMA_IRQHandler+0x1d4>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d022      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x194>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a21      	ldr	r2, [pc, #132]	; (8005ee4 <HAL_DMA_IRQHandler+0x1d8>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d01d      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x194>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a1f      	ldr	r2, [pc, #124]	; (8005ee8 <HAL_DMA_IRQHandler+0x1dc>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d018      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x194>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a1e      	ldr	r2, [pc, #120]	; (8005eec <HAL_DMA_IRQHandler+0x1e0>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d013      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x194>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a1c      	ldr	r2, [pc, #112]	; (8005ef0 <HAL_DMA_IRQHandler+0x1e4>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00e      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x194>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a1b      	ldr	r2, [pc, #108]	; (8005ef4 <HAL_DMA_IRQHandler+0x1e8>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d009      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x194>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a19      	ldr	r2, [pc, #100]	; (8005ef8 <HAL_DMA_IRQHandler+0x1ec>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d004      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x194>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a18      	ldr	r2, [pc, #96]	; (8005efc <HAL_DMA_IRQHandler+0x1f0>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d12f      	bne.n	8005f00 <HAL_DMA_IRQHandler+0x1f4>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0304 	and.w	r3, r3, #4
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	bf14      	ite	ne
 8005eae:	2301      	movne	r3, #1
 8005eb0:	2300      	moveq	r3, #0
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	e02e      	b.n	8005f14 <HAL_DMA_IRQHandler+0x208>
 8005eb6:	bf00      	nop
 8005eb8:	24000000 	.word	0x24000000
 8005ebc:	1b4e81b5 	.word	0x1b4e81b5
 8005ec0:	40020010 	.word	0x40020010
 8005ec4:	40020028 	.word	0x40020028
 8005ec8:	40020040 	.word	0x40020040
 8005ecc:	40020058 	.word	0x40020058
 8005ed0:	40020070 	.word	0x40020070
 8005ed4:	40020088 	.word	0x40020088
 8005ed8:	400200a0 	.word	0x400200a0
 8005edc:	400200b8 	.word	0x400200b8
 8005ee0:	40020410 	.word	0x40020410
 8005ee4:	40020428 	.word	0x40020428
 8005ee8:	40020440 	.word	0x40020440
 8005eec:	40020458 	.word	0x40020458
 8005ef0:	40020470 	.word	0x40020470
 8005ef4:	40020488 	.word	0x40020488
 8005ef8:	400204a0 	.word	0x400204a0
 8005efc:	400204b8 	.word	0x400204b8
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0308 	and.w	r3, r3, #8
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	bf14      	ite	ne
 8005f0e:	2301      	movne	r3, #1
 8005f10:	2300      	moveq	r3, #0
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d015      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 0204 	bic.w	r2, r2, #4
 8005f26:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f2c:	f003 031f 	and.w	r3, r3, #31
 8005f30:	2208      	movs	r2, #8
 8005f32:	409a      	lsls	r2, r3
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3c:	f043 0201 	orr.w	r2, r3, #1
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f48:	f003 031f 	and.w	r3, r3, #31
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d06e      	beq.n	8006038 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a69      	ldr	r2, [pc, #420]	; (8006104 <HAL_DMA_IRQHandler+0x3f8>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d04a      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x2ee>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a67      	ldr	r2, [pc, #412]	; (8006108 <HAL_DMA_IRQHandler+0x3fc>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d045      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x2ee>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a66      	ldr	r2, [pc, #408]	; (800610c <HAL_DMA_IRQHandler+0x400>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d040      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x2ee>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a64      	ldr	r2, [pc, #400]	; (8006110 <HAL_DMA_IRQHandler+0x404>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d03b      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x2ee>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a63      	ldr	r2, [pc, #396]	; (8006114 <HAL_DMA_IRQHandler+0x408>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d036      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x2ee>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a61      	ldr	r2, [pc, #388]	; (8006118 <HAL_DMA_IRQHandler+0x40c>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d031      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x2ee>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a60      	ldr	r2, [pc, #384]	; (800611c <HAL_DMA_IRQHandler+0x410>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d02c      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x2ee>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a5e      	ldr	r2, [pc, #376]	; (8006120 <HAL_DMA_IRQHandler+0x414>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d027      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x2ee>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a5d      	ldr	r2, [pc, #372]	; (8006124 <HAL_DMA_IRQHandler+0x418>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d022      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x2ee>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a5b      	ldr	r2, [pc, #364]	; (8006128 <HAL_DMA_IRQHandler+0x41c>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d01d      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x2ee>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a5a      	ldr	r2, [pc, #360]	; (800612c <HAL_DMA_IRQHandler+0x420>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d018      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x2ee>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a58      	ldr	r2, [pc, #352]	; (8006130 <HAL_DMA_IRQHandler+0x424>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d013      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x2ee>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a57      	ldr	r2, [pc, #348]	; (8006134 <HAL_DMA_IRQHandler+0x428>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d00e      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x2ee>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a55      	ldr	r2, [pc, #340]	; (8006138 <HAL_DMA_IRQHandler+0x42c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d009      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x2ee>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a54      	ldr	r2, [pc, #336]	; (800613c <HAL_DMA_IRQHandler+0x430>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d004      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x2ee>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a52      	ldr	r2, [pc, #328]	; (8006140 <HAL_DMA_IRQHandler+0x434>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d10a      	bne.n	8006010 <HAL_DMA_IRQHandler+0x304>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006004:	2b00      	cmp	r3, #0
 8006006:	bf14      	ite	ne
 8006008:	2301      	movne	r3, #1
 800600a:	2300      	moveq	r3, #0
 800600c:	b2db      	uxtb	r3, r3
 800600e:	e003      	b.n	8006018 <HAL_DMA_IRQHandler+0x30c>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2300      	movs	r3, #0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00d      	beq.n	8006038 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006020:	f003 031f 	and.w	r3, r3, #31
 8006024:	2201      	movs	r2, #1
 8006026:	409a      	lsls	r2, r3
 8006028:	6a3b      	ldr	r3, [r7, #32]
 800602a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006030:	f043 0202 	orr.w	r2, r3, #2
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800603c:	f003 031f 	and.w	r3, r3, #31
 8006040:	2204      	movs	r2, #4
 8006042:	409a      	lsls	r2, r3
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	4013      	ands	r3, r2
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 808f 	beq.w	800616c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a2c      	ldr	r2, [pc, #176]	; (8006104 <HAL_DMA_IRQHandler+0x3f8>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d04a      	beq.n	80060ee <HAL_DMA_IRQHandler+0x3e2>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a2a      	ldr	r2, [pc, #168]	; (8006108 <HAL_DMA_IRQHandler+0x3fc>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d045      	beq.n	80060ee <HAL_DMA_IRQHandler+0x3e2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a29      	ldr	r2, [pc, #164]	; (800610c <HAL_DMA_IRQHandler+0x400>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d040      	beq.n	80060ee <HAL_DMA_IRQHandler+0x3e2>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a27      	ldr	r2, [pc, #156]	; (8006110 <HAL_DMA_IRQHandler+0x404>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d03b      	beq.n	80060ee <HAL_DMA_IRQHandler+0x3e2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a26      	ldr	r2, [pc, #152]	; (8006114 <HAL_DMA_IRQHandler+0x408>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d036      	beq.n	80060ee <HAL_DMA_IRQHandler+0x3e2>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a24      	ldr	r2, [pc, #144]	; (8006118 <HAL_DMA_IRQHandler+0x40c>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d031      	beq.n	80060ee <HAL_DMA_IRQHandler+0x3e2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a23      	ldr	r2, [pc, #140]	; (800611c <HAL_DMA_IRQHandler+0x410>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d02c      	beq.n	80060ee <HAL_DMA_IRQHandler+0x3e2>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a21      	ldr	r2, [pc, #132]	; (8006120 <HAL_DMA_IRQHandler+0x414>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d027      	beq.n	80060ee <HAL_DMA_IRQHandler+0x3e2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a20      	ldr	r2, [pc, #128]	; (8006124 <HAL_DMA_IRQHandler+0x418>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d022      	beq.n	80060ee <HAL_DMA_IRQHandler+0x3e2>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a1e      	ldr	r2, [pc, #120]	; (8006128 <HAL_DMA_IRQHandler+0x41c>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d01d      	beq.n	80060ee <HAL_DMA_IRQHandler+0x3e2>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a1d      	ldr	r2, [pc, #116]	; (800612c <HAL_DMA_IRQHandler+0x420>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d018      	beq.n	80060ee <HAL_DMA_IRQHandler+0x3e2>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a1b      	ldr	r2, [pc, #108]	; (8006130 <HAL_DMA_IRQHandler+0x424>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d013      	beq.n	80060ee <HAL_DMA_IRQHandler+0x3e2>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a1a      	ldr	r2, [pc, #104]	; (8006134 <HAL_DMA_IRQHandler+0x428>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d00e      	beq.n	80060ee <HAL_DMA_IRQHandler+0x3e2>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a18      	ldr	r2, [pc, #96]	; (8006138 <HAL_DMA_IRQHandler+0x42c>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d009      	beq.n	80060ee <HAL_DMA_IRQHandler+0x3e2>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a17      	ldr	r2, [pc, #92]	; (800613c <HAL_DMA_IRQHandler+0x430>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d004      	beq.n	80060ee <HAL_DMA_IRQHandler+0x3e2>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a15      	ldr	r2, [pc, #84]	; (8006140 <HAL_DMA_IRQHandler+0x434>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d12a      	bne.n	8006144 <HAL_DMA_IRQHandler+0x438>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	bf14      	ite	ne
 80060fc:	2301      	movne	r3, #1
 80060fe:	2300      	moveq	r3, #0
 8006100:	b2db      	uxtb	r3, r3
 8006102:	e023      	b.n	800614c <HAL_DMA_IRQHandler+0x440>
 8006104:	40020010 	.word	0x40020010
 8006108:	40020028 	.word	0x40020028
 800610c:	40020040 	.word	0x40020040
 8006110:	40020058 	.word	0x40020058
 8006114:	40020070 	.word	0x40020070
 8006118:	40020088 	.word	0x40020088
 800611c:	400200a0 	.word	0x400200a0
 8006120:	400200b8 	.word	0x400200b8
 8006124:	40020410 	.word	0x40020410
 8006128:	40020428 	.word	0x40020428
 800612c:	40020440 	.word	0x40020440
 8006130:	40020458 	.word	0x40020458
 8006134:	40020470 	.word	0x40020470
 8006138:	40020488 	.word	0x40020488
 800613c:	400204a0 	.word	0x400204a0
 8006140:	400204b8 	.word	0x400204b8
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2300      	movs	r3, #0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00d      	beq.n	800616c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006154:	f003 031f 	and.w	r3, r3, #31
 8006158:	2204      	movs	r2, #4
 800615a:	409a      	lsls	r2, r3
 800615c:	6a3b      	ldr	r3, [r7, #32]
 800615e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006164:	f043 0204 	orr.w	r2, r3, #4
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006170:	f003 031f 	and.w	r3, r3, #31
 8006174:	2210      	movs	r2, #16
 8006176:	409a      	lsls	r2, r3
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	4013      	ands	r3, r2
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 80a6 	beq.w	80062ce <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a85      	ldr	r2, [pc, #532]	; (800639c <HAL_DMA_IRQHandler+0x690>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d04a      	beq.n	8006222 <HAL_DMA_IRQHandler+0x516>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a83      	ldr	r2, [pc, #524]	; (80063a0 <HAL_DMA_IRQHandler+0x694>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d045      	beq.n	8006222 <HAL_DMA_IRQHandler+0x516>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a82      	ldr	r2, [pc, #520]	; (80063a4 <HAL_DMA_IRQHandler+0x698>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d040      	beq.n	8006222 <HAL_DMA_IRQHandler+0x516>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a80      	ldr	r2, [pc, #512]	; (80063a8 <HAL_DMA_IRQHandler+0x69c>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d03b      	beq.n	8006222 <HAL_DMA_IRQHandler+0x516>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a7f      	ldr	r2, [pc, #508]	; (80063ac <HAL_DMA_IRQHandler+0x6a0>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d036      	beq.n	8006222 <HAL_DMA_IRQHandler+0x516>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a7d      	ldr	r2, [pc, #500]	; (80063b0 <HAL_DMA_IRQHandler+0x6a4>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d031      	beq.n	8006222 <HAL_DMA_IRQHandler+0x516>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a7c      	ldr	r2, [pc, #496]	; (80063b4 <HAL_DMA_IRQHandler+0x6a8>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d02c      	beq.n	8006222 <HAL_DMA_IRQHandler+0x516>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a7a      	ldr	r2, [pc, #488]	; (80063b8 <HAL_DMA_IRQHandler+0x6ac>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d027      	beq.n	8006222 <HAL_DMA_IRQHandler+0x516>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a79      	ldr	r2, [pc, #484]	; (80063bc <HAL_DMA_IRQHandler+0x6b0>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d022      	beq.n	8006222 <HAL_DMA_IRQHandler+0x516>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a77      	ldr	r2, [pc, #476]	; (80063c0 <HAL_DMA_IRQHandler+0x6b4>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d01d      	beq.n	8006222 <HAL_DMA_IRQHandler+0x516>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a76      	ldr	r2, [pc, #472]	; (80063c4 <HAL_DMA_IRQHandler+0x6b8>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d018      	beq.n	8006222 <HAL_DMA_IRQHandler+0x516>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a74      	ldr	r2, [pc, #464]	; (80063c8 <HAL_DMA_IRQHandler+0x6bc>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d013      	beq.n	8006222 <HAL_DMA_IRQHandler+0x516>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a73      	ldr	r2, [pc, #460]	; (80063cc <HAL_DMA_IRQHandler+0x6c0>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d00e      	beq.n	8006222 <HAL_DMA_IRQHandler+0x516>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a71      	ldr	r2, [pc, #452]	; (80063d0 <HAL_DMA_IRQHandler+0x6c4>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d009      	beq.n	8006222 <HAL_DMA_IRQHandler+0x516>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a70      	ldr	r2, [pc, #448]	; (80063d4 <HAL_DMA_IRQHandler+0x6c8>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d004      	beq.n	8006222 <HAL_DMA_IRQHandler+0x516>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a6e      	ldr	r2, [pc, #440]	; (80063d8 <HAL_DMA_IRQHandler+0x6cc>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d10a      	bne.n	8006238 <HAL_DMA_IRQHandler+0x52c>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0308 	and.w	r3, r3, #8
 800622c:	2b00      	cmp	r3, #0
 800622e:	bf14      	ite	ne
 8006230:	2301      	movne	r3, #1
 8006232:	2300      	moveq	r3, #0
 8006234:	b2db      	uxtb	r3, r3
 8006236:	e009      	b.n	800624c <HAL_DMA_IRQHandler+0x540>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0304 	and.w	r3, r3, #4
 8006242:	2b00      	cmp	r3, #0
 8006244:	bf14      	ite	ne
 8006246:	2301      	movne	r3, #1
 8006248:	2300      	moveq	r3, #0
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b00      	cmp	r3, #0
 800624e:	d03e      	beq.n	80062ce <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006254:	f003 031f 	and.w	r3, r3, #31
 8006258:	2210      	movs	r2, #16
 800625a:	409a      	lsls	r2, r3
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d018      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d108      	bne.n	800628e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006280:	2b00      	cmp	r3, #0
 8006282:	d024      	beq.n	80062ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	4798      	blx	r3
 800628c:	e01f      	b.n	80062ce <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006292:	2b00      	cmp	r3, #0
 8006294:	d01b      	beq.n	80062ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	4798      	blx	r3
 800629e:	e016      	b.n	80062ce <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d107      	bne.n	80062be <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 0208 	bic.w	r2, r2, #8
 80062bc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d003      	beq.n	80062ce <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d2:	f003 031f 	and.w	r3, r3, #31
 80062d6:	2220      	movs	r2, #32
 80062d8:	409a      	lsls	r2, r3
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	4013      	ands	r3, r2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f000 8110 	beq.w	8006504 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a2c      	ldr	r2, [pc, #176]	; (800639c <HAL_DMA_IRQHandler+0x690>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d04a      	beq.n	8006384 <HAL_DMA_IRQHandler+0x678>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a2b      	ldr	r2, [pc, #172]	; (80063a0 <HAL_DMA_IRQHandler+0x694>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d045      	beq.n	8006384 <HAL_DMA_IRQHandler+0x678>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a29      	ldr	r2, [pc, #164]	; (80063a4 <HAL_DMA_IRQHandler+0x698>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d040      	beq.n	8006384 <HAL_DMA_IRQHandler+0x678>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a28      	ldr	r2, [pc, #160]	; (80063a8 <HAL_DMA_IRQHandler+0x69c>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d03b      	beq.n	8006384 <HAL_DMA_IRQHandler+0x678>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a26      	ldr	r2, [pc, #152]	; (80063ac <HAL_DMA_IRQHandler+0x6a0>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d036      	beq.n	8006384 <HAL_DMA_IRQHandler+0x678>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a25      	ldr	r2, [pc, #148]	; (80063b0 <HAL_DMA_IRQHandler+0x6a4>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d031      	beq.n	8006384 <HAL_DMA_IRQHandler+0x678>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a23      	ldr	r2, [pc, #140]	; (80063b4 <HAL_DMA_IRQHandler+0x6a8>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d02c      	beq.n	8006384 <HAL_DMA_IRQHandler+0x678>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a22      	ldr	r2, [pc, #136]	; (80063b8 <HAL_DMA_IRQHandler+0x6ac>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d027      	beq.n	8006384 <HAL_DMA_IRQHandler+0x678>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a20      	ldr	r2, [pc, #128]	; (80063bc <HAL_DMA_IRQHandler+0x6b0>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d022      	beq.n	8006384 <HAL_DMA_IRQHandler+0x678>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a1f      	ldr	r2, [pc, #124]	; (80063c0 <HAL_DMA_IRQHandler+0x6b4>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d01d      	beq.n	8006384 <HAL_DMA_IRQHandler+0x678>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a1d      	ldr	r2, [pc, #116]	; (80063c4 <HAL_DMA_IRQHandler+0x6b8>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d018      	beq.n	8006384 <HAL_DMA_IRQHandler+0x678>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a1c      	ldr	r2, [pc, #112]	; (80063c8 <HAL_DMA_IRQHandler+0x6bc>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d013      	beq.n	8006384 <HAL_DMA_IRQHandler+0x678>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a1a      	ldr	r2, [pc, #104]	; (80063cc <HAL_DMA_IRQHandler+0x6c0>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d00e      	beq.n	8006384 <HAL_DMA_IRQHandler+0x678>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a19      	ldr	r2, [pc, #100]	; (80063d0 <HAL_DMA_IRQHandler+0x6c4>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d009      	beq.n	8006384 <HAL_DMA_IRQHandler+0x678>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a17      	ldr	r2, [pc, #92]	; (80063d4 <HAL_DMA_IRQHandler+0x6c8>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d004      	beq.n	8006384 <HAL_DMA_IRQHandler+0x678>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a16      	ldr	r2, [pc, #88]	; (80063d8 <HAL_DMA_IRQHandler+0x6cc>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d12b      	bne.n	80063dc <HAL_DMA_IRQHandler+0x6d0>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0310 	and.w	r3, r3, #16
 800638e:	2b00      	cmp	r3, #0
 8006390:	bf14      	ite	ne
 8006392:	2301      	movne	r3, #1
 8006394:	2300      	moveq	r3, #0
 8006396:	b2db      	uxtb	r3, r3
 8006398:	e02a      	b.n	80063f0 <HAL_DMA_IRQHandler+0x6e4>
 800639a:	bf00      	nop
 800639c:	40020010 	.word	0x40020010
 80063a0:	40020028 	.word	0x40020028
 80063a4:	40020040 	.word	0x40020040
 80063a8:	40020058 	.word	0x40020058
 80063ac:	40020070 	.word	0x40020070
 80063b0:	40020088 	.word	0x40020088
 80063b4:	400200a0 	.word	0x400200a0
 80063b8:	400200b8 	.word	0x400200b8
 80063bc:	40020410 	.word	0x40020410
 80063c0:	40020428 	.word	0x40020428
 80063c4:	40020440 	.word	0x40020440
 80063c8:	40020458 	.word	0x40020458
 80063cc:	40020470 	.word	0x40020470
 80063d0:	40020488 	.word	0x40020488
 80063d4:	400204a0 	.word	0x400204a0
 80063d8:	400204b8 	.word	0x400204b8
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	bf14      	ite	ne
 80063ea:	2301      	movne	r3, #1
 80063ec:	2300      	moveq	r3, #0
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 8087 	beq.w	8006504 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063fa:	f003 031f 	and.w	r3, r3, #31
 80063fe:	2220      	movs	r2, #32
 8006400:	409a      	lsls	r2, r3
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b04      	cmp	r3, #4
 8006410:	d139      	bne.n	8006486 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f022 0216 	bic.w	r2, r2, #22
 8006420:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	695a      	ldr	r2, [r3, #20]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006430:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006436:	2b00      	cmp	r3, #0
 8006438:	d103      	bne.n	8006442 <HAL_DMA_IRQHandler+0x736>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800643e:	2b00      	cmp	r3, #0
 8006440:	d007      	beq.n	8006452 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f022 0208 	bic.w	r2, r2, #8
 8006450:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006456:	f003 031f 	and.w	r3, r3, #31
 800645a:	223f      	movs	r2, #63	; 0x3f
 800645c:	409a      	lsls	r2, r3
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 834a 	beq.w	8006b10 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	4798      	blx	r3
          }
          return;
 8006484:	e344      	b.n	8006b10 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d018      	beq.n	80064c6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d108      	bne.n	80064b4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d02c      	beq.n	8006504 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	4798      	blx	r3
 80064b2:	e027      	b.n	8006504 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d023      	beq.n	8006504 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	4798      	blx	r3
 80064c4:	e01e      	b.n	8006504 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10f      	bne.n	80064f4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 0210 	bic.w	r2, r2, #16
 80064e2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 8306 	beq.w	8006b1a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	f000 8088 	beq.w	800662c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2204      	movs	r2, #4
 8006520:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a7a      	ldr	r2, [pc, #488]	; (8006714 <HAL_DMA_IRQHandler+0xa08>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d04a      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x8b8>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a79      	ldr	r2, [pc, #484]	; (8006718 <HAL_DMA_IRQHandler+0xa0c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d045      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x8b8>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a77      	ldr	r2, [pc, #476]	; (800671c <HAL_DMA_IRQHandler+0xa10>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d040      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x8b8>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a76      	ldr	r2, [pc, #472]	; (8006720 <HAL_DMA_IRQHandler+0xa14>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d03b      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x8b8>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a74      	ldr	r2, [pc, #464]	; (8006724 <HAL_DMA_IRQHandler+0xa18>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d036      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x8b8>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a73      	ldr	r2, [pc, #460]	; (8006728 <HAL_DMA_IRQHandler+0xa1c>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d031      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x8b8>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a71      	ldr	r2, [pc, #452]	; (800672c <HAL_DMA_IRQHandler+0xa20>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d02c      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x8b8>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a70      	ldr	r2, [pc, #448]	; (8006730 <HAL_DMA_IRQHandler+0xa24>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d027      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x8b8>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a6e      	ldr	r2, [pc, #440]	; (8006734 <HAL_DMA_IRQHandler+0xa28>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d022      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x8b8>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a6d      	ldr	r2, [pc, #436]	; (8006738 <HAL_DMA_IRQHandler+0xa2c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d01d      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x8b8>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a6b      	ldr	r2, [pc, #428]	; (800673c <HAL_DMA_IRQHandler+0xa30>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d018      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x8b8>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a6a      	ldr	r2, [pc, #424]	; (8006740 <HAL_DMA_IRQHandler+0xa34>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d013      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x8b8>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a68      	ldr	r2, [pc, #416]	; (8006744 <HAL_DMA_IRQHandler+0xa38>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d00e      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x8b8>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a67      	ldr	r2, [pc, #412]	; (8006748 <HAL_DMA_IRQHandler+0xa3c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d009      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x8b8>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a65      	ldr	r2, [pc, #404]	; (800674c <HAL_DMA_IRQHandler+0xa40>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d004      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x8b8>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a64      	ldr	r2, [pc, #400]	; (8006750 <HAL_DMA_IRQHandler+0xa44>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d108      	bne.n	80065d6 <HAL_DMA_IRQHandler+0x8ca>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 0201 	bic.w	r2, r2, #1
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	e007      	b.n	80065e6 <HAL_DMA_IRQHandler+0x8da>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f022 0201 	bic.w	r2, r2, #1
 80065e4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	3301      	adds	r3, #1
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d307      	bcc.n	8006602 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0301 	and.w	r3, r3, #1
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1f2      	bne.n	80065e6 <HAL_DMA_IRQHandler+0x8da>
 8006600:	e000      	b.n	8006604 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006602:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b00      	cmp	r3, #0
 8006610:	d004      	beq.n	800661c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2203      	movs	r2, #3
 8006616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800661a:	e003      	b.n	8006624 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 8272 	beq.w	8006b1a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	4798      	blx	r3
 800663e:	e26c      	b.n	8006b1a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a43      	ldr	r2, [pc, #268]	; (8006754 <HAL_DMA_IRQHandler+0xa48>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d022      	beq.n	8006690 <HAL_DMA_IRQHandler+0x984>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a42      	ldr	r2, [pc, #264]	; (8006758 <HAL_DMA_IRQHandler+0xa4c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d01d      	beq.n	8006690 <HAL_DMA_IRQHandler+0x984>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a40      	ldr	r2, [pc, #256]	; (800675c <HAL_DMA_IRQHandler+0xa50>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d018      	beq.n	8006690 <HAL_DMA_IRQHandler+0x984>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a3f      	ldr	r2, [pc, #252]	; (8006760 <HAL_DMA_IRQHandler+0xa54>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d013      	beq.n	8006690 <HAL_DMA_IRQHandler+0x984>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a3d      	ldr	r2, [pc, #244]	; (8006764 <HAL_DMA_IRQHandler+0xa58>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d00e      	beq.n	8006690 <HAL_DMA_IRQHandler+0x984>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a3c      	ldr	r2, [pc, #240]	; (8006768 <HAL_DMA_IRQHandler+0xa5c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d009      	beq.n	8006690 <HAL_DMA_IRQHandler+0x984>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a3a      	ldr	r2, [pc, #232]	; (800676c <HAL_DMA_IRQHandler+0xa60>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d004      	beq.n	8006690 <HAL_DMA_IRQHandler+0x984>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a39      	ldr	r2, [pc, #228]	; (8006770 <HAL_DMA_IRQHandler+0xa64>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d101      	bne.n	8006694 <HAL_DMA_IRQHandler+0x988>
 8006690:	2301      	movs	r3, #1
 8006692:	e000      	b.n	8006696 <HAL_DMA_IRQHandler+0x98a>
 8006694:	2300      	movs	r3, #0
 8006696:	2b00      	cmp	r3, #0
 8006698:	f000 823f 	beq.w	8006b1a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066a8:	f003 031f 	and.w	r3, r3, #31
 80066ac:	2204      	movs	r2, #4
 80066ae:	409a      	lsls	r2, r3
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	4013      	ands	r3, r2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 80cd 	beq.w	8006854 <HAL_DMA_IRQHandler+0xb48>
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	f003 0304 	and.w	r3, r3, #4
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 80c7 	beq.w	8006854 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ca:	f003 031f 	and.w	r3, r3, #31
 80066ce:	2204      	movs	r2, #4
 80066d0:	409a      	lsls	r2, r3
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d049      	beq.n	8006774 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d109      	bne.n	80066fe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f000 8210 	beq.w	8006b14 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066fc:	e20a      	b.n	8006b14 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006702:	2b00      	cmp	r3, #0
 8006704:	f000 8206 	beq.w	8006b14 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006710:	e200      	b.n	8006b14 <HAL_DMA_IRQHandler+0xe08>
 8006712:	bf00      	nop
 8006714:	40020010 	.word	0x40020010
 8006718:	40020028 	.word	0x40020028
 800671c:	40020040 	.word	0x40020040
 8006720:	40020058 	.word	0x40020058
 8006724:	40020070 	.word	0x40020070
 8006728:	40020088 	.word	0x40020088
 800672c:	400200a0 	.word	0x400200a0
 8006730:	400200b8 	.word	0x400200b8
 8006734:	40020410 	.word	0x40020410
 8006738:	40020428 	.word	0x40020428
 800673c:	40020440 	.word	0x40020440
 8006740:	40020458 	.word	0x40020458
 8006744:	40020470 	.word	0x40020470
 8006748:	40020488 	.word	0x40020488
 800674c:	400204a0 	.word	0x400204a0
 8006750:	400204b8 	.word	0x400204b8
 8006754:	58025408 	.word	0x58025408
 8006758:	5802541c 	.word	0x5802541c
 800675c:	58025430 	.word	0x58025430
 8006760:	58025444 	.word	0x58025444
 8006764:	58025458 	.word	0x58025458
 8006768:	5802546c 	.word	0x5802546c
 800676c:	58025480 	.word	0x58025480
 8006770:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	f003 0320 	and.w	r3, r3, #32
 800677a:	2b00      	cmp	r3, #0
 800677c:	d160      	bne.n	8006840 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a7f      	ldr	r2, [pc, #508]	; (8006980 <HAL_DMA_IRQHandler+0xc74>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d04a      	beq.n	800681e <HAL_DMA_IRQHandler+0xb12>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a7d      	ldr	r2, [pc, #500]	; (8006984 <HAL_DMA_IRQHandler+0xc78>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d045      	beq.n	800681e <HAL_DMA_IRQHandler+0xb12>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a7c      	ldr	r2, [pc, #496]	; (8006988 <HAL_DMA_IRQHandler+0xc7c>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d040      	beq.n	800681e <HAL_DMA_IRQHandler+0xb12>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a7a      	ldr	r2, [pc, #488]	; (800698c <HAL_DMA_IRQHandler+0xc80>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d03b      	beq.n	800681e <HAL_DMA_IRQHandler+0xb12>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a79      	ldr	r2, [pc, #484]	; (8006990 <HAL_DMA_IRQHandler+0xc84>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d036      	beq.n	800681e <HAL_DMA_IRQHandler+0xb12>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a77      	ldr	r2, [pc, #476]	; (8006994 <HAL_DMA_IRQHandler+0xc88>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d031      	beq.n	800681e <HAL_DMA_IRQHandler+0xb12>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a76      	ldr	r2, [pc, #472]	; (8006998 <HAL_DMA_IRQHandler+0xc8c>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d02c      	beq.n	800681e <HAL_DMA_IRQHandler+0xb12>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a74      	ldr	r2, [pc, #464]	; (800699c <HAL_DMA_IRQHandler+0xc90>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d027      	beq.n	800681e <HAL_DMA_IRQHandler+0xb12>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a73      	ldr	r2, [pc, #460]	; (80069a0 <HAL_DMA_IRQHandler+0xc94>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d022      	beq.n	800681e <HAL_DMA_IRQHandler+0xb12>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a71      	ldr	r2, [pc, #452]	; (80069a4 <HAL_DMA_IRQHandler+0xc98>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d01d      	beq.n	800681e <HAL_DMA_IRQHandler+0xb12>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a70      	ldr	r2, [pc, #448]	; (80069a8 <HAL_DMA_IRQHandler+0xc9c>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d018      	beq.n	800681e <HAL_DMA_IRQHandler+0xb12>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a6e      	ldr	r2, [pc, #440]	; (80069ac <HAL_DMA_IRQHandler+0xca0>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d013      	beq.n	800681e <HAL_DMA_IRQHandler+0xb12>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a6d      	ldr	r2, [pc, #436]	; (80069b0 <HAL_DMA_IRQHandler+0xca4>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d00e      	beq.n	800681e <HAL_DMA_IRQHandler+0xb12>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a6b      	ldr	r2, [pc, #428]	; (80069b4 <HAL_DMA_IRQHandler+0xca8>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d009      	beq.n	800681e <HAL_DMA_IRQHandler+0xb12>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a6a      	ldr	r2, [pc, #424]	; (80069b8 <HAL_DMA_IRQHandler+0xcac>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d004      	beq.n	800681e <HAL_DMA_IRQHandler+0xb12>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a68      	ldr	r2, [pc, #416]	; (80069bc <HAL_DMA_IRQHandler+0xcb0>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d108      	bne.n	8006830 <HAL_DMA_IRQHandler+0xb24>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f022 0208 	bic.w	r2, r2, #8
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	e007      	b.n	8006840 <HAL_DMA_IRQHandler+0xb34>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0204 	bic.w	r2, r2, #4
 800683e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 8165 	beq.w	8006b14 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006852:	e15f      	b.n	8006b14 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006858:	f003 031f 	and.w	r3, r3, #31
 800685c:	2202      	movs	r2, #2
 800685e:	409a      	lsls	r2, r3
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	4013      	ands	r3, r2
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 80c5 	beq.w	80069f4 <HAL_DMA_IRQHandler+0xce8>
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f003 0302 	and.w	r3, r3, #2
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 80bf 	beq.w	80069f4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800687a:	f003 031f 	and.w	r3, r3, #31
 800687e:	2202      	movs	r2, #2
 8006880:	409a      	lsls	r2, r3
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d018      	beq.n	80068c2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d109      	bne.n	80068ae <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 813a 	beq.w	8006b18 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068ac:	e134      	b.n	8006b18 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 8130 	beq.w	8006b18 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068c0:	e12a      	b.n	8006b18 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	f003 0320 	and.w	r3, r3, #32
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f040 8089 	bne.w	80069e0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a2b      	ldr	r2, [pc, #172]	; (8006980 <HAL_DMA_IRQHandler+0xc74>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d04a      	beq.n	800696e <HAL_DMA_IRQHandler+0xc62>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a29      	ldr	r2, [pc, #164]	; (8006984 <HAL_DMA_IRQHandler+0xc78>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d045      	beq.n	800696e <HAL_DMA_IRQHandler+0xc62>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a28      	ldr	r2, [pc, #160]	; (8006988 <HAL_DMA_IRQHandler+0xc7c>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d040      	beq.n	800696e <HAL_DMA_IRQHandler+0xc62>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a26      	ldr	r2, [pc, #152]	; (800698c <HAL_DMA_IRQHandler+0xc80>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d03b      	beq.n	800696e <HAL_DMA_IRQHandler+0xc62>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a25      	ldr	r2, [pc, #148]	; (8006990 <HAL_DMA_IRQHandler+0xc84>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d036      	beq.n	800696e <HAL_DMA_IRQHandler+0xc62>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a23      	ldr	r2, [pc, #140]	; (8006994 <HAL_DMA_IRQHandler+0xc88>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d031      	beq.n	800696e <HAL_DMA_IRQHandler+0xc62>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a22      	ldr	r2, [pc, #136]	; (8006998 <HAL_DMA_IRQHandler+0xc8c>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d02c      	beq.n	800696e <HAL_DMA_IRQHandler+0xc62>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a20      	ldr	r2, [pc, #128]	; (800699c <HAL_DMA_IRQHandler+0xc90>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d027      	beq.n	800696e <HAL_DMA_IRQHandler+0xc62>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a1f      	ldr	r2, [pc, #124]	; (80069a0 <HAL_DMA_IRQHandler+0xc94>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d022      	beq.n	800696e <HAL_DMA_IRQHandler+0xc62>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a1d      	ldr	r2, [pc, #116]	; (80069a4 <HAL_DMA_IRQHandler+0xc98>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d01d      	beq.n	800696e <HAL_DMA_IRQHandler+0xc62>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a1c      	ldr	r2, [pc, #112]	; (80069a8 <HAL_DMA_IRQHandler+0xc9c>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d018      	beq.n	800696e <HAL_DMA_IRQHandler+0xc62>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a1a      	ldr	r2, [pc, #104]	; (80069ac <HAL_DMA_IRQHandler+0xca0>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d013      	beq.n	800696e <HAL_DMA_IRQHandler+0xc62>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a19      	ldr	r2, [pc, #100]	; (80069b0 <HAL_DMA_IRQHandler+0xca4>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d00e      	beq.n	800696e <HAL_DMA_IRQHandler+0xc62>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a17      	ldr	r2, [pc, #92]	; (80069b4 <HAL_DMA_IRQHandler+0xca8>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d009      	beq.n	800696e <HAL_DMA_IRQHandler+0xc62>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a16      	ldr	r2, [pc, #88]	; (80069b8 <HAL_DMA_IRQHandler+0xcac>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d004      	beq.n	800696e <HAL_DMA_IRQHandler+0xc62>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a14      	ldr	r2, [pc, #80]	; (80069bc <HAL_DMA_IRQHandler+0xcb0>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d128      	bne.n	80069c0 <HAL_DMA_IRQHandler+0xcb4>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f022 0214 	bic.w	r2, r2, #20
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	e027      	b.n	80069d0 <HAL_DMA_IRQHandler+0xcc4>
 8006980:	40020010 	.word	0x40020010
 8006984:	40020028 	.word	0x40020028
 8006988:	40020040 	.word	0x40020040
 800698c:	40020058 	.word	0x40020058
 8006990:	40020070 	.word	0x40020070
 8006994:	40020088 	.word	0x40020088
 8006998:	400200a0 	.word	0x400200a0
 800699c:	400200b8 	.word	0x400200b8
 80069a0:	40020410 	.word	0x40020410
 80069a4:	40020428 	.word	0x40020428
 80069a8:	40020440 	.word	0x40020440
 80069ac:	40020458 	.word	0x40020458
 80069b0:	40020470 	.word	0x40020470
 80069b4:	40020488 	.word	0x40020488
 80069b8:	400204a0 	.word	0x400204a0
 80069bc:	400204b8 	.word	0x400204b8
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f022 020a 	bic.w	r2, r2, #10
 80069ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 8097 	beq.w	8006b18 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069f2:	e091      	b.n	8006b18 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069f8:	f003 031f 	and.w	r3, r3, #31
 80069fc:	2208      	movs	r2, #8
 80069fe:	409a      	lsls	r2, r3
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	4013      	ands	r3, r2
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 8088 	beq.w	8006b1a <HAL_DMA_IRQHandler+0xe0e>
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	f003 0308 	and.w	r3, r3, #8
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f000 8082 	beq.w	8006b1a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a41      	ldr	r2, [pc, #260]	; (8006b20 <HAL_DMA_IRQHandler+0xe14>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d04a      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0xdaa>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a3f      	ldr	r2, [pc, #252]	; (8006b24 <HAL_DMA_IRQHandler+0xe18>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d045      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0xdaa>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a3e      	ldr	r2, [pc, #248]	; (8006b28 <HAL_DMA_IRQHandler+0xe1c>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d040      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0xdaa>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a3c      	ldr	r2, [pc, #240]	; (8006b2c <HAL_DMA_IRQHandler+0xe20>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d03b      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0xdaa>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a3b      	ldr	r2, [pc, #236]	; (8006b30 <HAL_DMA_IRQHandler+0xe24>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d036      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0xdaa>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a39      	ldr	r2, [pc, #228]	; (8006b34 <HAL_DMA_IRQHandler+0xe28>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d031      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0xdaa>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a38      	ldr	r2, [pc, #224]	; (8006b38 <HAL_DMA_IRQHandler+0xe2c>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d02c      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0xdaa>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a36      	ldr	r2, [pc, #216]	; (8006b3c <HAL_DMA_IRQHandler+0xe30>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d027      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0xdaa>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a35      	ldr	r2, [pc, #212]	; (8006b40 <HAL_DMA_IRQHandler+0xe34>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d022      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0xdaa>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a33      	ldr	r2, [pc, #204]	; (8006b44 <HAL_DMA_IRQHandler+0xe38>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d01d      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0xdaa>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a32      	ldr	r2, [pc, #200]	; (8006b48 <HAL_DMA_IRQHandler+0xe3c>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d018      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0xdaa>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a30      	ldr	r2, [pc, #192]	; (8006b4c <HAL_DMA_IRQHandler+0xe40>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d013      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0xdaa>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a2f      	ldr	r2, [pc, #188]	; (8006b50 <HAL_DMA_IRQHandler+0xe44>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d00e      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0xdaa>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a2d      	ldr	r2, [pc, #180]	; (8006b54 <HAL_DMA_IRQHandler+0xe48>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d009      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0xdaa>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a2c      	ldr	r2, [pc, #176]	; (8006b58 <HAL_DMA_IRQHandler+0xe4c>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d004      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0xdaa>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a2a      	ldr	r2, [pc, #168]	; (8006b5c <HAL_DMA_IRQHandler+0xe50>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d108      	bne.n	8006ac8 <HAL_DMA_IRQHandler+0xdbc>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 021c 	bic.w	r2, r2, #28
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	e007      	b.n	8006ad8 <HAL_DMA_IRQHandler+0xdcc>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f022 020e 	bic.w	r2, r2, #14
 8006ad6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006adc:	f003 031f 	and.w	r3, r3, #31
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	409a      	lsls	r2, r3
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d009      	beq.n	8006b1a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	4798      	blx	r3
 8006b0e:	e004      	b.n	8006b1a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006b10:	bf00      	nop
 8006b12:	e002      	b.n	8006b1a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b14:	bf00      	nop
 8006b16:	e000      	b.n	8006b1a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b18:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006b1a:	3728      	adds	r7, #40	; 0x28
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	40020010 	.word	0x40020010
 8006b24:	40020028 	.word	0x40020028
 8006b28:	40020040 	.word	0x40020040
 8006b2c:	40020058 	.word	0x40020058
 8006b30:	40020070 	.word	0x40020070
 8006b34:	40020088 	.word	0x40020088
 8006b38:	400200a0 	.word	0x400200a0
 8006b3c:	400200b8 	.word	0x400200b8
 8006b40:	40020410 	.word	0x40020410
 8006b44:	40020428 	.word	0x40020428
 8006b48:	40020440 	.word	0x40020440
 8006b4c:	40020458 	.word	0x40020458
 8006b50:	40020470 	.word	0x40020470
 8006b54:	40020488 	.word	0x40020488
 8006b58:	400204a0 	.word	0x400204a0
 8006b5c:	400204b8 	.word	0x400204b8

08006b60 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b087      	sub	sp, #28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
 8006b6c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b72:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b78:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a7f      	ldr	r2, [pc, #508]	; (8006d7c <DMA_SetConfig+0x21c>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d072      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a7d      	ldr	r2, [pc, #500]	; (8006d80 <DMA_SetConfig+0x220>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d06d      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a7c      	ldr	r2, [pc, #496]	; (8006d84 <DMA_SetConfig+0x224>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d068      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a7a      	ldr	r2, [pc, #488]	; (8006d88 <DMA_SetConfig+0x228>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d063      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a79      	ldr	r2, [pc, #484]	; (8006d8c <DMA_SetConfig+0x22c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d05e      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a77      	ldr	r2, [pc, #476]	; (8006d90 <DMA_SetConfig+0x230>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d059      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a76      	ldr	r2, [pc, #472]	; (8006d94 <DMA_SetConfig+0x234>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d054      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a74      	ldr	r2, [pc, #464]	; (8006d98 <DMA_SetConfig+0x238>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d04f      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a73      	ldr	r2, [pc, #460]	; (8006d9c <DMA_SetConfig+0x23c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d04a      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a71      	ldr	r2, [pc, #452]	; (8006da0 <DMA_SetConfig+0x240>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d045      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a70      	ldr	r2, [pc, #448]	; (8006da4 <DMA_SetConfig+0x244>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d040      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a6e      	ldr	r2, [pc, #440]	; (8006da8 <DMA_SetConfig+0x248>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d03b      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a6d      	ldr	r2, [pc, #436]	; (8006dac <DMA_SetConfig+0x24c>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d036      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a6b      	ldr	r2, [pc, #428]	; (8006db0 <DMA_SetConfig+0x250>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d031      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a6a      	ldr	r2, [pc, #424]	; (8006db4 <DMA_SetConfig+0x254>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d02c      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a68      	ldr	r2, [pc, #416]	; (8006db8 <DMA_SetConfig+0x258>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d027      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a67      	ldr	r2, [pc, #412]	; (8006dbc <DMA_SetConfig+0x25c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d022      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a65      	ldr	r2, [pc, #404]	; (8006dc0 <DMA_SetConfig+0x260>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d01d      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a64      	ldr	r2, [pc, #400]	; (8006dc4 <DMA_SetConfig+0x264>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d018      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a62      	ldr	r2, [pc, #392]	; (8006dc8 <DMA_SetConfig+0x268>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d013      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a61      	ldr	r2, [pc, #388]	; (8006dcc <DMA_SetConfig+0x26c>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d00e      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a5f      	ldr	r2, [pc, #380]	; (8006dd0 <DMA_SetConfig+0x270>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d009      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a5e      	ldr	r2, [pc, #376]	; (8006dd4 <DMA_SetConfig+0x274>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d004      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a5c      	ldr	r2, [pc, #368]	; (8006dd8 <DMA_SetConfig+0x278>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d101      	bne.n	8006c6e <DMA_SetConfig+0x10e>
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e000      	b.n	8006c70 <DMA_SetConfig+0x110>
 8006c6e:	2300      	movs	r3, #0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00d      	beq.n	8006c90 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006c7c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d004      	beq.n	8006c90 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006c8e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a39      	ldr	r2, [pc, #228]	; (8006d7c <DMA_SetConfig+0x21c>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d04a      	beq.n	8006d30 <DMA_SetConfig+0x1d0>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a38      	ldr	r2, [pc, #224]	; (8006d80 <DMA_SetConfig+0x220>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d045      	beq.n	8006d30 <DMA_SetConfig+0x1d0>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a36      	ldr	r2, [pc, #216]	; (8006d84 <DMA_SetConfig+0x224>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d040      	beq.n	8006d30 <DMA_SetConfig+0x1d0>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a35      	ldr	r2, [pc, #212]	; (8006d88 <DMA_SetConfig+0x228>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d03b      	beq.n	8006d30 <DMA_SetConfig+0x1d0>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a33      	ldr	r2, [pc, #204]	; (8006d8c <DMA_SetConfig+0x22c>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d036      	beq.n	8006d30 <DMA_SetConfig+0x1d0>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a32      	ldr	r2, [pc, #200]	; (8006d90 <DMA_SetConfig+0x230>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d031      	beq.n	8006d30 <DMA_SetConfig+0x1d0>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a30      	ldr	r2, [pc, #192]	; (8006d94 <DMA_SetConfig+0x234>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d02c      	beq.n	8006d30 <DMA_SetConfig+0x1d0>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a2f      	ldr	r2, [pc, #188]	; (8006d98 <DMA_SetConfig+0x238>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d027      	beq.n	8006d30 <DMA_SetConfig+0x1d0>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a2d      	ldr	r2, [pc, #180]	; (8006d9c <DMA_SetConfig+0x23c>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d022      	beq.n	8006d30 <DMA_SetConfig+0x1d0>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a2c      	ldr	r2, [pc, #176]	; (8006da0 <DMA_SetConfig+0x240>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d01d      	beq.n	8006d30 <DMA_SetConfig+0x1d0>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a2a      	ldr	r2, [pc, #168]	; (8006da4 <DMA_SetConfig+0x244>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d018      	beq.n	8006d30 <DMA_SetConfig+0x1d0>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a29      	ldr	r2, [pc, #164]	; (8006da8 <DMA_SetConfig+0x248>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d013      	beq.n	8006d30 <DMA_SetConfig+0x1d0>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a27      	ldr	r2, [pc, #156]	; (8006dac <DMA_SetConfig+0x24c>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d00e      	beq.n	8006d30 <DMA_SetConfig+0x1d0>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a26      	ldr	r2, [pc, #152]	; (8006db0 <DMA_SetConfig+0x250>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d009      	beq.n	8006d30 <DMA_SetConfig+0x1d0>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a24      	ldr	r2, [pc, #144]	; (8006db4 <DMA_SetConfig+0x254>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d004      	beq.n	8006d30 <DMA_SetConfig+0x1d0>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a23      	ldr	r2, [pc, #140]	; (8006db8 <DMA_SetConfig+0x258>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d101      	bne.n	8006d34 <DMA_SetConfig+0x1d4>
 8006d30:	2301      	movs	r3, #1
 8006d32:	e000      	b.n	8006d36 <DMA_SetConfig+0x1d6>
 8006d34:	2300      	movs	r3, #0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d059      	beq.n	8006dee <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d3e:	f003 031f 	and.w	r3, r3, #31
 8006d42:	223f      	movs	r2, #63	; 0x3f
 8006d44:	409a      	lsls	r2, r3
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d58:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	2b40      	cmp	r3, #64	; 0x40
 8006d68:	d138      	bne.n	8006ddc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006d7a:	e086      	b.n	8006e8a <DMA_SetConfig+0x32a>
 8006d7c:	40020010 	.word	0x40020010
 8006d80:	40020028 	.word	0x40020028
 8006d84:	40020040 	.word	0x40020040
 8006d88:	40020058 	.word	0x40020058
 8006d8c:	40020070 	.word	0x40020070
 8006d90:	40020088 	.word	0x40020088
 8006d94:	400200a0 	.word	0x400200a0
 8006d98:	400200b8 	.word	0x400200b8
 8006d9c:	40020410 	.word	0x40020410
 8006da0:	40020428 	.word	0x40020428
 8006da4:	40020440 	.word	0x40020440
 8006da8:	40020458 	.word	0x40020458
 8006dac:	40020470 	.word	0x40020470
 8006db0:	40020488 	.word	0x40020488
 8006db4:	400204a0 	.word	0x400204a0
 8006db8:	400204b8 	.word	0x400204b8
 8006dbc:	58025408 	.word	0x58025408
 8006dc0:	5802541c 	.word	0x5802541c
 8006dc4:	58025430 	.word	0x58025430
 8006dc8:	58025444 	.word	0x58025444
 8006dcc:	58025458 	.word	0x58025458
 8006dd0:	5802546c 	.word	0x5802546c
 8006dd4:	58025480 	.word	0x58025480
 8006dd8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	60da      	str	r2, [r3, #12]
}
 8006dec:	e04d      	b.n	8006e8a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a29      	ldr	r2, [pc, #164]	; (8006e98 <DMA_SetConfig+0x338>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d022      	beq.n	8006e3e <DMA_SetConfig+0x2de>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a27      	ldr	r2, [pc, #156]	; (8006e9c <DMA_SetConfig+0x33c>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d01d      	beq.n	8006e3e <DMA_SetConfig+0x2de>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a26      	ldr	r2, [pc, #152]	; (8006ea0 <DMA_SetConfig+0x340>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d018      	beq.n	8006e3e <DMA_SetConfig+0x2de>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a24      	ldr	r2, [pc, #144]	; (8006ea4 <DMA_SetConfig+0x344>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d013      	beq.n	8006e3e <DMA_SetConfig+0x2de>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a23      	ldr	r2, [pc, #140]	; (8006ea8 <DMA_SetConfig+0x348>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d00e      	beq.n	8006e3e <DMA_SetConfig+0x2de>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a21      	ldr	r2, [pc, #132]	; (8006eac <DMA_SetConfig+0x34c>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d009      	beq.n	8006e3e <DMA_SetConfig+0x2de>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a20      	ldr	r2, [pc, #128]	; (8006eb0 <DMA_SetConfig+0x350>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d004      	beq.n	8006e3e <DMA_SetConfig+0x2de>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a1e      	ldr	r2, [pc, #120]	; (8006eb4 <DMA_SetConfig+0x354>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d101      	bne.n	8006e42 <DMA_SetConfig+0x2e2>
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e000      	b.n	8006e44 <DMA_SetConfig+0x2e4>
 8006e42:	2300      	movs	r3, #0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d020      	beq.n	8006e8a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e4c:	f003 031f 	and.w	r3, r3, #31
 8006e50:	2201      	movs	r2, #1
 8006e52:	409a      	lsls	r2, r3
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	683a      	ldr	r2, [r7, #0]
 8006e5e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	2b40      	cmp	r3, #64	; 0x40
 8006e66:	d108      	bne.n	8006e7a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	60da      	str	r2, [r3, #12]
}
 8006e78:	e007      	b.n	8006e8a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	60da      	str	r2, [r3, #12]
}
 8006e8a:	bf00      	nop
 8006e8c:	371c      	adds	r7, #28
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	58025408 	.word	0x58025408
 8006e9c:	5802541c 	.word	0x5802541c
 8006ea0:	58025430 	.word	0x58025430
 8006ea4:	58025444 	.word	0x58025444
 8006ea8:	58025458 	.word	0x58025458
 8006eac:	5802546c 	.word	0x5802546c
 8006eb0:	58025480 	.word	0x58025480
 8006eb4:	58025494 	.word	0x58025494

08006eb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a42      	ldr	r2, [pc, #264]	; (8006fd0 <DMA_CalcBaseAndBitshift+0x118>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d04a      	beq.n	8006f60 <DMA_CalcBaseAndBitshift+0xa8>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a41      	ldr	r2, [pc, #260]	; (8006fd4 <DMA_CalcBaseAndBitshift+0x11c>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d045      	beq.n	8006f60 <DMA_CalcBaseAndBitshift+0xa8>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a3f      	ldr	r2, [pc, #252]	; (8006fd8 <DMA_CalcBaseAndBitshift+0x120>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d040      	beq.n	8006f60 <DMA_CalcBaseAndBitshift+0xa8>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a3e      	ldr	r2, [pc, #248]	; (8006fdc <DMA_CalcBaseAndBitshift+0x124>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d03b      	beq.n	8006f60 <DMA_CalcBaseAndBitshift+0xa8>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a3c      	ldr	r2, [pc, #240]	; (8006fe0 <DMA_CalcBaseAndBitshift+0x128>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d036      	beq.n	8006f60 <DMA_CalcBaseAndBitshift+0xa8>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a3b      	ldr	r2, [pc, #236]	; (8006fe4 <DMA_CalcBaseAndBitshift+0x12c>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d031      	beq.n	8006f60 <DMA_CalcBaseAndBitshift+0xa8>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a39      	ldr	r2, [pc, #228]	; (8006fe8 <DMA_CalcBaseAndBitshift+0x130>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d02c      	beq.n	8006f60 <DMA_CalcBaseAndBitshift+0xa8>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a38      	ldr	r2, [pc, #224]	; (8006fec <DMA_CalcBaseAndBitshift+0x134>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d027      	beq.n	8006f60 <DMA_CalcBaseAndBitshift+0xa8>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a36      	ldr	r2, [pc, #216]	; (8006ff0 <DMA_CalcBaseAndBitshift+0x138>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d022      	beq.n	8006f60 <DMA_CalcBaseAndBitshift+0xa8>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a35      	ldr	r2, [pc, #212]	; (8006ff4 <DMA_CalcBaseAndBitshift+0x13c>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d01d      	beq.n	8006f60 <DMA_CalcBaseAndBitshift+0xa8>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a33      	ldr	r2, [pc, #204]	; (8006ff8 <DMA_CalcBaseAndBitshift+0x140>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d018      	beq.n	8006f60 <DMA_CalcBaseAndBitshift+0xa8>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a32      	ldr	r2, [pc, #200]	; (8006ffc <DMA_CalcBaseAndBitshift+0x144>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d013      	beq.n	8006f60 <DMA_CalcBaseAndBitshift+0xa8>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a30      	ldr	r2, [pc, #192]	; (8007000 <DMA_CalcBaseAndBitshift+0x148>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d00e      	beq.n	8006f60 <DMA_CalcBaseAndBitshift+0xa8>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a2f      	ldr	r2, [pc, #188]	; (8007004 <DMA_CalcBaseAndBitshift+0x14c>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d009      	beq.n	8006f60 <DMA_CalcBaseAndBitshift+0xa8>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a2d      	ldr	r2, [pc, #180]	; (8007008 <DMA_CalcBaseAndBitshift+0x150>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d004      	beq.n	8006f60 <DMA_CalcBaseAndBitshift+0xa8>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a2c      	ldr	r2, [pc, #176]	; (800700c <DMA_CalcBaseAndBitshift+0x154>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d101      	bne.n	8006f64 <DMA_CalcBaseAndBitshift+0xac>
 8006f60:	2301      	movs	r3, #1
 8006f62:	e000      	b.n	8006f66 <DMA_CalcBaseAndBitshift+0xae>
 8006f64:	2300      	movs	r3, #0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d024      	beq.n	8006fb4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	3b10      	subs	r3, #16
 8006f72:	4a27      	ldr	r2, [pc, #156]	; (8007010 <DMA_CalcBaseAndBitshift+0x158>)
 8006f74:	fba2 2303 	umull	r2, r3, r2, r3
 8006f78:	091b      	lsrs	r3, r3, #4
 8006f7a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f003 0307 	and.w	r3, r3, #7
 8006f82:	4a24      	ldr	r2, [pc, #144]	; (8007014 <DMA_CalcBaseAndBitshift+0x15c>)
 8006f84:	5cd3      	ldrb	r3, [r2, r3]
 8006f86:	461a      	mov	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2b03      	cmp	r3, #3
 8006f90:	d908      	bls.n	8006fa4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	461a      	mov	r2, r3
 8006f98:	4b1f      	ldr	r3, [pc, #124]	; (8007018 <DMA_CalcBaseAndBitshift+0x160>)
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	1d1a      	adds	r2, r3, #4
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	659a      	str	r2, [r3, #88]	; 0x58
 8006fa2:	e00d      	b.n	8006fc0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	461a      	mov	r2, r3
 8006faa:	4b1b      	ldr	r3, [pc, #108]	; (8007018 <DMA_CalcBaseAndBitshift+0x160>)
 8006fac:	4013      	ands	r3, r2
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	6593      	str	r3, [r2, #88]	; 0x58
 8006fb2:	e005      	b.n	8006fc0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3714      	adds	r7, #20
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr
 8006fd0:	40020010 	.word	0x40020010
 8006fd4:	40020028 	.word	0x40020028
 8006fd8:	40020040 	.word	0x40020040
 8006fdc:	40020058 	.word	0x40020058
 8006fe0:	40020070 	.word	0x40020070
 8006fe4:	40020088 	.word	0x40020088
 8006fe8:	400200a0 	.word	0x400200a0
 8006fec:	400200b8 	.word	0x400200b8
 8006ff0:	40020410 	.word	0x40020410
 8006ff4:	40020428 	.word	0x40020428
 8006ff8:	40020440 	.word	0x40020440
 8006ffc:	40020458 	.word	0x40020458
 8007000:	40020470 	.word	0x40020470
 8007004:	40020488 	.word	0x40020488
 8007008:	400204a0 	.word	0x400204a0
 800700c:	400204b8 	.word	0x400204b8
 8007010:	aaaaaaab 	.word	0xaaaaaaab
 8007014:	080181d4 	.word	0x080181d4
 8007018:	fffffc00 	.word	0xfffffc00

0800701c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007024:	2300      	movs	r3, #0
 8007026:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d120      	bne.n	8007072 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007034:	2b03      	cmp	r3, #3
 8007036:	d858      	bhi.n	80070ea <DMA_CheckFifoParam+0xce>
 8007038:	a201      	add	r2, pc, #4	; (adr r2, 8007040 <DMA_CheckFifoParam+0x24>)
 800703a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703e:	bf00      	nop
 8007040:	08007051 	.word	0x08007051
 8007044:	08007063 	.word	0x08007063
 8007048:	08007051 	.word	0x08007051
 800704c:	080070eb 	.word	0x080070eb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d048      	beq.n	80070ee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007060:	e045      	b.n	80070ee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007066:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800706a:	d142      	bne.n	80070f2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007070:	e03f      	b.n	80070f2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	699b      	ldr	r3, [r3, #24]
 8007076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800707a:	d123      	bne.n	80070c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007080:	2b03      	cmp	r3, #3
 8007082:	d838      	bhi.n	80070f6 <DMA_CheckFifoParam+0xda>
 8007084:	a201      	add	r2, pc, #4	; (adr r2, 800708c <DMA_CheckFifoParam+0x70>)
 8007086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800708a:	bf00      	nop
 800708c:	0800709d 	.word	0x0800709d
 8007090:	080070a3 	.word	0x080070a3
 8007094:	0800709d 	.word	0x0800709d
 8007098:	080070b5 	.word	0x080070b5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	73fb      	strb	r3, [r7, #15]
        break;
 80070a0:	e030      	b.n	8007104 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d025      	beq.n	80070fa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80070b2:	e022      	b.n	80070fa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80070bc:	d11f      	bne.n	80070fe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80070c2:	e01c      	b.n	80070fe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d902      	bls.n	80070d2 <DMA_CheckFifoParam+0xb6>
 80070cc:	2b03      	cmp	r3, #3
 80070ce:	d003      	beq.n	80070d8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80070d0:	e018      	b.n	8007104 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	73fb      	strb	r3, [r7, #15]
        break;
 80070d6:	e015      	b.n	8007104 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00e      	beq.n	8007102 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	73fb      	strb	r3, [r7, #15]
    break;
 80070e8:	e00b      	b.n	8007102 <DMA_CheckFifoParam+0xe6>
        break;
 80070ea:	bf00      	nop
 80070ec:	e00a      	b.n	8007104 <DMA_CheckFifoParam+0xe8>
        break;
 80070ee:	bf00      	nop
 80070f0:	e008      	b.n	8007104 <DMA_CheckFifoParam+0xe8>
        break;
 80070f2:	bf00      	nop
 80070f4:	e006      	b.n	8007104 <DMA_CheckFifoParam+0xe8>
        break;
 80070f6:	bf00      	nop
 80070f8:	e004      	b.n	8007104 <DMA_CheckFifoParam+0xe8>
        break;
 80070fa:	bf00      	nop
 80070fc:	e002      	b.n	8007104 <DMA_CheckFifoParam+0xe8>
        break;
 80070fe:	bf00      	nop
 8007100:	e000      	b.n	8007104 <DMA_CheckFifoParam+0xe8>
    break;
 8007102:	bf00      	nop
    }
  }

  return status;
 8007104:	7bfb      	ldrb	r3, [r7, #15]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop

08007114 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a38      	ldr	r2, [pc, #224]	; (8007208 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d022      	beq.n	8007172 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a36      	ldr	r2, [pc, #216]	; (800720c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d01d      	beq.n	8007172 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a35      	ldr	r2, [pc, #212]	; (8007210 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d018      	beq.n	8007172 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a33      	ldr	r2, [pc, #204]	; (8007214 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d013      	beq.n	8007172 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a32      	ldr	r2, [pc, #200]	; (8007218 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d00e      	beq.n	8007172 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a30      	ldr	r2, [pc, #192]	; (800721c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d009      	beq.n	8007172 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a2f      	ldr	r2, [pc, #188]	; (8007220 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d004      	beq.n	8007172 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a2d      	ldr	r2, [pc, #180]	; (8007224 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d101      	bne.n	8007176 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007172:	2301      	movs	r3, #1
 8007174:	e000      	b.n	8007178 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007176:	2300      	movs	r3, #0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d01a      	beq.n	80071b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	b2db      	uxtb	r3, r3
 8007182:	3b08      	subs	r3, #8
 8007184:	4a28      	ldr	r2, [pc, #160]	; (8007228 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007186:	fba2 2303 	umull	r2, r3, r2, r3
 800718a:	091b      	lsrs	r3, r3, #4
 800718c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	4b26      	ldr	r3, [pc, #152]	; (800722c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007192:	4413      	add	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	461a      	mov	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a24      	ldr	r2, [pc, #144]	; (8007230 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80071a0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f003 031f 	and.w	r3, r3, #31
 80071a8:	2201      	movs	r2, #1
 80071aa:	409a      	lsls	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80071b0:	e024      	b.n	80071fc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	3b10      	subs	r3, #16
 80071ba:	4a1e      	ldr	r2, [pc, #120]	; (8007234 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80071bc:	fba2 2303 	umull	r2, r3, r2, r3
 80071c0:	091b      	lsrs	r3, r3, #4
 80071c2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	4a1c      	ldr	r2, [pc, #112]	; (8007238 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d806      	bhi.n	80071da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	4a1b      	ldr	r2, [pc, #108]	; (800723c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d902      	bls.n	80071da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	3308      	adds	r3, #8
 80071d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	4b18      	ldr	r3, [pc, #96]	; (8007240 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80071de:	4413      	add	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	461a      	mov	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a16      	ldr	r2, [pc, #88]	; (8007244 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80071ec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f003 031f 	and.w	r3, r3, #31
 80071f4:	2201      	movs	r2, #1
 80071f6:	409a      	lsls	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80071fc:	bf00      	nop
 80071fe:	3714      	adds	r7, #20
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr
 8007208:	58025408 	.word	0x58025408
 800720c:	5802541c 	.word	0x5802541c
 8007210:	58025430 	.word	0x58025430
 8007214:	58025444 	.word	0x58025444
 8007218:	58025458 	.word	0x58025458
 800721c:	5802546c 	.word	0x5802546c
 8007220:	58025480 	.word	0x58025480
 8007224:	58025494 	.word	0x58025494
 8007228:	cccccccd 	.word	0xcccccccd
 800722c:	16009600 	.word	0x16009600
 8007230:	58025880 	.word	0x58025880
 8007234:	aaaaaaab 	.word	0xaaaaaaab
 8007238:	400204b8 	.word	0x400204b8
 800723c:	4002040f 	.word	0x4002040f
 8007240:	10008200 	.word	0x10008200
 8007244:	40020880 	.word	0x40020880

08007248 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	b2db      	uxtb	r3, r3
 8007256:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d04a      	beq.n	80072f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2b08      	cmp	r3, #8
 8007262:	d847      	bhi.n	80072f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a25      	ldr	r2, [pc, #148]	; (8007300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d022      	beq.n	80072b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a24      	ldr	r2, [pc, #144]	; (8007304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d01d      	beq.n	80072b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a22      	ldr	r2, [pc, #136]	; (8007308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d018      	beq.n	80072b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a21      	ldr	r2, [pc, #132]	; (800730c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d013      	beq.n	80072b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a1f      	ldr	r2, [pc, #124]	; (8007310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d00e      	beq.n	80072b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a1e      	ldr	r2, [pc, #120]	; (8007314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d009      	beq.n	80072b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a1c      	ldr	r2, [pc, #112]	; (8007318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d004      	beq.n	80072b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a1b      	ldr	r2, [pc, #108]	; (800731c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d101      	bne.n	80072b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80072b4:	2301      	movs	r3, #1
 80072b6:	e000      	b.n	80072ba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80072b8:	2300      	movs	r3, #0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00a      	beq.n	80072d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	4b17      	ldr	r3, [pc, #92]	; (8007320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80072c2:	4413      	add	r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	461a      	mov	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a15      	ldr	r2, [pc, #84]	; (8007324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80072d0:	671a      	str	r2, [r3, #112]	; 0x70
 80072d2:	e009      	b.n	80072e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	4b14      	ldr	r3, [pc, #80]	; (8007328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80072d8:	4413      	add	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	461a      	mov	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a11      	ldr	r2, [pc, #68]	; (800732c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80072e6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	3b01      	subs	r3, #1
 80072ec:	2201      	movs	r2, #1
 80072ee:	409a      	lsls	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80072f4:	bf00      	nop
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr
 8007300:	58025408 	.word	0x58025408
 8007304:	5802541c 	.word	0x5802541c
 8007308:	58025430 	.word	0x58025430
 800730c:	58025444 	.word	0x58025444
 8007310:	58025458 	.word	0x58025458
 8007314:	5802546c 	.word	0x5802546c
 8007318:	58025480 	.word	0x58025480
 800731c:	58025494 	.word	0x58025494
 8007320:	1600963f 	.word	0x1600963f
 8007324:	58025940 	.word	0x58025940
 8007328:	1000823f 	.word	0x1000823f
 800732c:	40020940 	.word	0x40020940

08007330 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b098      	sub	sp, #96	; 0x60
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8007338:	4a84      	ldr	r2, [pc, #528]	; (800754c <HAL_FDCAN_Init+0x21c>)
 800733a:	f107 030c 	add.w	r3, r7, #12
 800733e:	4611      	mov	r1, r2
 8007340:	224c      	movs	r2, #76	; 0x4c
 8007342:	4618      	mov	r0, r3
 8007344:	f00f fd02 	bl	8016d4c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e1c6      	b.n	80076e0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a7e      	ldr	r2, [pc, #504]	; (8007550 <HAL_FDCAN_Init+0x220>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d106      	bne.n	800736a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007364:	461a      	mov	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b00      	cmp	r3, #0
 8007374:	d106      	bne.n	8007384 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7fb fad6 	bl	8002930 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	699a      	ldr	r2, [r3, #24]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f022 0210 	bic.w	r2, r2, #16
 8007392:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007394:	f7fc fa30 	bl	80037f8 <HAL_GetTick>
 8007398:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800739a:	e014      	b.n	80073c6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800739c:	f7fc fa2c 	bl	80037f8 <HAL_GetTick>
 80073a0:	4602      	mov	r2, r0
 80073a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	2b0a      	cmp	r3, #10
 80073a8:	d90d      	bls.n	80073c6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073b0:	f043 0201 	orr.w	r2, r3, #1
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2203      	movs	r2, #3
 80073be:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e18c      	b.n	80076e0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	f003 0308 	and.w	r3, r3, #8
 80073d0:	2b08      	cmp	r3, #8
 80073d2:	d0e3      	beq.n	800739c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	699a      	ldr	r2, [r3, #24]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f042 0201 	orr.w	r2, r2, #1
 80073e2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80073e4:	f7fc fa08 	bl	80037f8 <HAL_GetTick>
 80073e8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80073ea:	e014      	b.n	8007416 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80073ec:	f7fc fa04 	bl	80037f8 <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	2b0a      	cmp	r3, #10
 80073f8:	d90d      	bls.n	8007416 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007400:	f043 0201 	orr.w	r2, r3, #1
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2203      	movs	r2, #3
 800740e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e164      	b.n	80076e0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	2b00      	cmp	r3, #0
 8007422:	d0e3      	beq.n	80073ec <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	699a      	ldr	r2, [r3, #24]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f042 0202 	orr.w	r2, r2, #2
 8007432:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	7c1b      	ldrb	r3, [r3, #16]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d108      	bne.n	800744e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	699a      	ldr	r2, [r3, #24]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800744a:	619a      	str	r2, [r3, #24]
 800744c:	e007      	b.n	800745e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	699a      	ldr	r2, [r3, #24]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800745c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	7c5b      	ldrb	r3, [r3, #17]
 8007462:	2b01      	cmp	r3, #1
 8007464:	d108      	bne.n	8007478 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	699a      	ldr	r2, [r3, #24]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007474:	619a      	str	r2, [r3, #24]
 8007476:	e007      	b.n	8007488 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	699a      	ldr	r2, [r3, #24]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007486:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	7c9b      	ldrb	r3, [r3, #18]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d108      	bne.n	80074a2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	699a      	ldr	r2, [r3, #24]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800749e:	619a      	str	r2, [r3, #24]
 80074a0:	e007      	b.n	80074b2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	699a      	ldr	r2, [r3, #24]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80074b0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	699b      	ldr	r3, [r3, #24]
 80074b8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	689a      	ldr	r2, [r3, #8]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	430a      	orrs	r2, r1
 80074c6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	699a      	ldr	r2, [r3, #24]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80074d6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	691a      	ldr	r2, [r3, #16]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f022 0210 	bic.w	r2, r2, #16
 80074e6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d108      	bne.n	8007502 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	699a      	ldr	r2, [r3, #24]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f042 0204 	orr.w	r2, r2, #4
 80074fe:	619a      	str	r2, [r3, #24]
 8007500:	e030      	b.n	8007564 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d02c      	beq.n	8007564 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	2b02      	cmp	r3, #2
 8007510:	d020      	beq.n	8007554 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	699a      	ldr	r2, [r3, #24]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007520:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	691a      	ldr	r2, [r3, #16]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f042 0210 	orr.w	r2, r2, #16
 8007530:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	2b03      	cmp	r3, #3
 8007538:	d114      	bne.n	8007564 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	699a      	ldr	r2, [r3, #24]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f042 0220 	orr.w	r2, r2, #32
 8007548:	619a      	str	r2, [r3, #24]
 800754a:	e00b      	b.n	8007564 <HAL_FDCAN_Init+0x234>
 800754c:	080180c0 	.word	0x080180c0
 8007550:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	699a      	ldr	r2, [r3, #24]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f042 0220 	orr.w	r2, r2, #32
 8007562:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	3b01      	subs	r3, #1
 800756a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	69db      	ldr	r3, [r3, #28]
 8007570:	3b01      	subs	r3, #1
 8007572:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007574:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a1b      	ldr	r3, [r3, #32]
 800757a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800757c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	695b      	ldr	r3, [r3, #20]
 8007584:	3b01      	subs	r3, #1
 8007586:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800758c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800758e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007598:	d115      	bne.n	80075c6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a4:	3b01      	subs	r3, #1
 80075a6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80075a8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ae:	3b01      	subs	r3, #1
 80075b0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80075b2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ba:	3b01      	subs	r3, #1
 80075bc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80075c2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80075c4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00a      	beq.n	80075e4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	430a      	orrs	r2, r1
 80075e0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075ec:	4413      	add	r3, r2
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d011      	beq.n	8007616 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80075fa:	f023 0107 	bic.w	r1, r3, #7
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	3360      	adds	r3, #96	; 0x60
 8007606:	443b      	add	r3, r7
 8007608:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	430a      	orrs	r2, r1
 8007612:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761a:	2b00      	cmp	r3, #0
 800761c:	d011      	beq.n	8007642 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007626:	f023 0107 	bic.w	r1, r3, #7
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	3360      	adds	r3, #96	; 0x60
 8007632:	443b      	add	r3, r7
 8007634:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	430a      	orrs	r2, r1
 800763e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007646:	2b00      	cmp	r3, #0
 8007648:	d012      	beq.n	8007670 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007652:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	3360      	adds	r3, #96	; 0x60
 800765e:	443b      	add	r3, r7
 8007660:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007664:	011a      	lsls	r2, r3, #4
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	430a      	orrs	r2, r1
 800766c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007674:	2b00      	cmp	r3, #0
 8007676:	d012      	beq.n	800769e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007680:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	3360      	adds	r3, #96	; 0x60
 800768c:	443b      	add	r3, r7
 800768e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007692:	021a      	lsls	r2, r3, #8
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	430a      	orrs	r2, r1
 800769a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a11      	ldr	r2, [pc, #68]	; (80076e8 <HAL_FDCAN_Init+0x3b8>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d107      	bne.n	80076b8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	689a      	ldr	r2, [r3, #8]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f022 0203 	bic.w	r2, r2, #3
 80076b6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f80b 	bl	80076ec <FDCAN_CalcultateRamBlockAddresses>
 80076d6:	4603      	mov	r3, r0
 80076d8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80076dc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3760      	adds	r7, #96	; 0x60
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	4000a000 	.word	0x4000a000

080076ec <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076f8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007702:	4ba7      	ldr	r3, [pc, #668]	; (80079a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007704:	4013      	ands	r3, r2
 8007706:	68ba      	ldr	r2, [r7, #8]
 8007708:	0091      	lsls	r1, r2, #2
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	6812      	ldr	r2, [r2, #0]
 800770e:	430b      	orrs	r3, r1
 8007710:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800771c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007724:	041a      	lsls	r2, r3, #16
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	430a      	orrs	r2, r1
 800772c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	4413      	add	r3, r2
 8007738:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007742:	4b97      	ldr	r3, [pc, #604]	; (80079a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007744:	4013      	ands	r3, r2
 8007746:	68ba      	ldr	r2, [r7, #8]
 8007748:	0091      	lsls	r1, r2, #2
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	6812      	ldr	r2, [r2, #0]
 800774e:	430b      	orrs	r3, r1
 8007750:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800775c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007764:	041a      	lsls	r2, r3, #16
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	430a      	orrs	r2, r1
 800776c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007774:	005b      	lsls	r3, r3, #1
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	4413      	add	r3, r2
 800777a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007784:	4b86      	ldr	r3, [pc, #536]	; (80079a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007786:	4013      	ands	r3, r2
 8007788:	68ba      	ldr	r2, [r7, #8]
 800778a:	0091      	lsls	r1, r2, #2
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	6812      	ldr	r2, [r2, #0]
 8007790:	430b      	orrs	r3, r1
 8007792:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800779e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a6:	041a      	lsls	r2, r3, #16
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	430a      	orrs	r2, r1
 80077ae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80077ba:	fb02 f303 	mul.w	r3, r2, r3
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	4413      	add	r3, r2
 80077c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80077cc:	4b74      	ldr	r3, [pc, #464]	; (80079a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80077ce:	4013      	ands	r3, r2
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	0091      	lsls	r1, r2, #2
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	6812      	ldr	r2, [r2, #0]
 80077d8:	430b      	orrs	r3, r1
 80077da:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80077e6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ee:	041a      	lsls	r2, r3, #16
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	430a      	orrs	r2, r1
 80077f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007802:	fb02 f303 	mul.w	r3, r2, r3
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	4413      	add	r3, r2
 800780a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007814:	4b62      	ldr	r3, [pc, #392]	; (80079a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007816:	4013      	ands	r3, r2
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	0091      	lsls	r1, r2, #2
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	6812      	ldr	r2, [r2, #0]
 8007820:	430b      	orrs	r3, r1
 8007822:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800782e:	fb02 f303 	mul.w	r3, r2, r3
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	4413      	add	r3, r2
 8007836:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007840:	4b57      	ldr	r3, [pc, #348]	; (80079a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007842:	4013      	ands	r3, r2
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	0091      	lsls	r1, r2, #2
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	6812      	ldr	r2, [r2, #0]
 800784c:	430b      	orrs	r3, r1
 800784e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800785a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007862:	041a      	lsls	r2, r3, #16
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	430a      	orrs	r2, r1
 800786a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007872:	005b      	lsls	r3, r3, #1
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	4413      	add	r3, r2
 8007878:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007882:	4b47      	ldr	r3, [pc, #284]	; (80079a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007884:	4013      	ands	r3, r2
 8007886:	68ba      	ldr	r2, [r7, #8]
 8007888:	0091      	lsls	r1, r2, #2
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	6812      	ldr	r2, [r2, #0]
 800788e:	430b      	orrs	r3, r1
 8007890:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800789c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078a4:	041a      	lsls	r2, r3, #16
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	430a      	orrs	r2, r1
 80078ac:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80078b8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078c0:	061a      	lsls	r2, r3, #24
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	430a      	orrs	r2, r1
 80078c8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078d0:	4b34      	ldr	r3, [pc, #208]	; (80079a4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80078d2:	4413      	add	r3, r2
 80078d4:	009a      	lsls	r2, r3, #2
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	441a      	add	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078f2:	00db      	lsls	r3, r3, #3
 80078f4:	441a      	add	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007902:	6879      	ldr	r1, [r7, #4]
 8007904:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007906:	fb01 f303 	mul.w	r3, r1, r3
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	441a      	add	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800791a:	6879      	ldr	r1, [r7, #4]
 800791c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800791e:	fb01 f303 	mul.w	r3, r1, r3
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	441a      	add	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007932:	6879      	ldr	r1, [r7, #4]
 8007934:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007936:	fb01 f303 	mul.w	r3, r1, r3
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	441a      	add	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800794e:	00db      	lsls	r3, r3, #3
 8007950:	441a      	add	r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007962:	6879      	ldr	r1, [r7, #4]
 8007964:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007966:	fb01 f303 	mul.w	r3, r1, r3
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	441a      	add	r2, r3
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800797e:	6879      	ldr	r1, [r7, #4]
 8007980:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007982:	fb01 f303 	mul.w	r3, r1, r3
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	441a      	add	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007996:	4a04      	ldr	r2, [pc, #16]	; (80079a8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d915      	bls.n	80079c8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800799c:	e006      	b.n	80079ac <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800799e:	bf00      	nop
 80079a0:	ffff0003 	.word	0xffff0003
 80079a4:	10002b00 	.word	0x10002b00
 80079a8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079b2:	f043 0220 	orr.w	r2, r3, #32
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2203      	movs	r2, #3
 80079c0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	e010      	b.n	80079ea <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079cc:	60fb      	str	r3, [r7, #12]
 80079ce:	e005      	b.n	80079dc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2200      	movs	r2, #0
 80079d4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	3304      	adds	r3, #4
 80079da:	60fb      	str	r3, [r7, #12]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d3f3      	bcc.n	80079d0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3714      	adds	r7, #20
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop

080079f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b089      	sub	sp, #36	; 0x24
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007a02:	2300      	movs	r3, #0
 8007a04:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007a06:	4b86      	ldr	r3, [pc, #536]	; (8007c20 <HAL_GPIO_Init+0x228>)
 8007a08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007a0a:	e18c      	b.n	8007d26 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	2101      	movs	r1, #1
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	fa01 f303 	lsl.w	r3, r1, r3
 8007a18:	4013      	ands	r3, r2
 8007a1a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f000 817e 	beq.w	8007d20 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	f003 0303 	and.w	r3, r3, #3
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d005      	beq.n	8007a3c <HAL_GPIO_Init+0x44>
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	f003 0303 	and.w	r3, r3, #3
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d130      	bne.n	8007a9e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	005b      	lsls	r3, r3, #1
 8007a46:	2203      	movs	r2, #3
 8007a48:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4c:	43db      	mvns	r3, r3
 8007a4e:	69ba      	ldr	r2, [r7, #24]
 8007a50:	4013      	ands	r3, r2
 8007a52:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	68da      	ldr	r2, [r3, #12]
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	005b      	lsls	r3, r3, #1
 8007a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a60:	69ba      	ldr	r2, [r7, #24]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	69ba      	ldr	r2, [r7, #24]
 8007a6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a72:	2201      	movs	r2, #1
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7a:	43db      	mvns	r3, r3
 8007a7c:	69ba      	ldr	r2, [r7, #24]
 8007a7e:	4013      	ands	r3, r2
 8007a80:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	091b      	lsrs	r3, r3, #4
 8007a88:	f003 0201 	and.w	r2, r3, #1
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a92:	69ba      	ldr	r2, [r7, #24]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	69ba      	ldr	r2, [r7, #24]
 8007a9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	f003 0303 	and.w	r3, r3, #3
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	d017      	beq.n	8007ada <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	005b      	lsls	r3, r3, #1
 8007ab4:	2203      	movs	r2, #3
 8007ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aba:	43db      	mvns	r3, r3
 8007abc:	69ba      	ldr	r2, [r7, #24]
 8007abe:	4013      	ands	r3, r2
 8007ac0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	689a      	ldr	r2, [r3, #8]
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	005b      	lsls	r3, r3, #1
 8007aca:	fa02 f303 	lsl.w	r3, r2, r3
 8007ace:	69ba      	ldr	r2, [r7, #24]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	69ba      	ldr	r2, [r7, #24]
 8007ad8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	f003 0303 	and.w	r3, r3, #3
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d123      	bne.n	8007b2e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	08da      	lsrs	r2, r3, #3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	3208      	adds	r2, #8
 8007aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	f003 0307 	and.w	r3, r3, #7
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	220f      	movs	r2, #15
 8007afe:	fa02 f303 	lsl.w	r3, r2, r3
 8007b02:	43db      	mvns	r3, r3
 8007b04:	69ba      	ldr	r2, [r7, #24]
 8007b06:	4013      	ands	r3, r2
 8007b08:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	691a      	ldr	r2, [r3, #16]
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	f003 0307 	and.w	r3, r3, #7
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	fa02 f303 	lsl.w	r3, r2, r3
 8007b1a:	69ba      	ldr	r2, [r7, #24]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	08da      	lsrs	r2, r3, #3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	3208      	adds	r2, #8
 8007b28:	69b9      	ldr	r1, [r7, #24]
 8007b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	005b      	lsls	r3, r3, #1
 8007b38:	2203      	movs	r2, #3
 8007b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b3e:	43db      	mvns	r3, r3
 8007b40:	69ba      	ldr	r2, [r7, #24]
 8007b42:	4013      	ands	r3, r2
 8007b44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	f003 0203 	and.w	r2, r3, #3
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	005b      	lsls	r3, r3, #1
 8007b52:	fa02 f303 	lsl.w	r3, r2, r3
 8007b56:	69ba      	ldr	r2, [r7, #24]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	69ba      	ldr	r2, [r7, #24]
 8007b60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f000 80d8 	beq.w	8007d20 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b70:	4b2c      	ldr	r3, [pc, #176]	; (8007c24 <HAL_GPIO_Init+0x22c>)
 8007b72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b76:	4a2b      	ldr	r2, [pc, #172]	; (8007c24 <HAL_GPIO_Init+0x22c>)
 8007b78:	f043 0302 	orr.w	r3, r3, #2
 8007b7c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007b80:	4b28      	ldr	r3, [pc, #160]	; (8007c24 <HAL_GPIO_Init+0x22c>)
 8007b82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b86:	f003 0302 	and.w	r3, r3, #2
 8007b8a:	60fb      	str	r3, [r7, #12]
 8007b8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b8e:	4a26      	ldr	r2, [pc, #152]	; (8007c28 <HAL_GPIO_Init+0x230>)
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	089b      	lsrs	r3, r3, #2
 8007b94:	3302      	adds	r3, #2
 8007b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	f003 0303 	and.w	r3, r3, #3
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	220f      	movs	r2, #15
 8007ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8007baa:	43db      	mvns	r3, r3
 8007bac:	69ba      	ldr	r2, [r7, #24]
 8007bae:	4013      	ands	r3, r2
 8007bb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a1d      	ldr	r2, [pc, #116]	; (8007c2c <HAL_GPIO_Init+0x234>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d04a      	beq.n	8007c50 <HAL_GPIO_Init+0x258>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a1c      	ldr	r2, [pc, #112]	; (8007c30 <HAL_GPIO_Init+0x238>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d02b      	beq.n	8007c1a <HAL_GPIO_Init+0x222>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a1b      	ldr	r2, [pc, #108]	; (8007c34 <HAL_GPIO_Init+0x23c>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d025      	beq.n	8007c16 <HAL_GPIO_Init+0x21e>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a1a      	ldr	r2, [pc, #104]	; (8007c38 <HAL_GPIO_Init+0x240>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d01f      	beq.n	8007c12 <HAL_GPIO_Init+0x21a>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a19      	ldr	r2, [pc, #100]	; (8007c3c <HAL_GPIO_Init+0x244>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d019      	beq.n	8007c0e <HAL_GPIO_Init+0x216>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a18      	ldr	r2, [pc, #96]	; (8007c40 <HAL_GPIO_Init+0x248>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d013      	beq.n	8007c0a <HAL_GPIO_Init+0x212>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a17      	ldr	r2, [pc, #92]	; (8007c44 <HAL_GPIO_Init+0x24c>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d00d      	beq.n	8007c06 <HAL_GPIO_Init+0x20e>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a16      	ldr	r2, [pc, #88]	; (8007c48 <HAL_GPIO_Init+0x250>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d007      	beq.n	8007c02 <HAL_GPIO_Init+0x20a>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a15      	ldr	r2, [pc, #84]	; (8007c4c <HAL_GPIO_Init+0x254>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d101      	bne.n	8007bfe <HAL_GPIO_Init+0x206>
 8007bfa:	2309      	movs	r3, #9
 8007bfc:	e029      	b.n	8007c52 <HAL_GPIO_Init+0x25a>
 8007bfe:	230a      	movs	r3, #10
 8007c00:	e027      	b.n	8007c52 <HAL_GPIO_Init+0x25a>
 8007c02:	2307      	movs	r3, #7
 8007c04:	e025      	b.n	8007c52 <HAL_GPIO_Init+0x25a>
 8007c06:	2306      	movs	r3, #6
 8007c08:	e023      	b.n	8007c52 <HAL_GPIO_Init+0x25a>
 8007c0a:	2305      	movs	r3, #5
 8007c0c:	e021      	b.n	8007c52 <HAL_GPIO_Init+0x25a>
 8007c0e:	2304      	movs	r3, #4
 8007c10:	e01f      	b.n	8007c52 <HAL_GPIO_Init+0x25a>
 8007c12:	2303      	movs	r3, #3
 8007c14:	e01d      	b.n	8007c52 <HAL_GPIO_Init+0x25a>
 8007c16:	2302      	movs	r3, #2
 8007c18:	e01b      	b.n	8007c52 <HAL_GPIO_Init+0x25a>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e019      	b.n	8007c52 <HAL_GPIO_Init+0x25a>
 8007c1e:	bf00      	nop
 8007c20:	58000080 	.word	0x58000080
 8007c24:	58024400 	.word	0x58024400
 8007c28:	58000400 	.word	0x58000400
 8007c2c:	58020000 	.word	0x58020000
 8007c30:	58020400 	.word	0x58020400
 8007c34:	58020800 	.word	0x58020800
 8007c38:	58020c00 	.word	0x58020c00
 8007c3c:	58021000 	.word	0x58021000
 8007c40:	58021400 	.word	0x58021400
 8007c44:	58021800 	.word	0x58021800
 8007c48:	58021c00 	.word	0x58021c00
 8007c4c:	58022400 	.word	0x58022400
 8007c50:	2300      	movs	r3, #0
 8007c52:	69fa      	ldr	r2, [r7, #28]
 8007c54:	f002 0203 	and.w	r2, r2, #3
 8007c58:	0092      	lsls	r2, r2, #2
 8007c5a:	4093      	lsls	r3, r2
 8007c5c:	69ba      	ldr	r2, [r7, #24]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c62:	4938      	ldr	r1, [pc, #224]	; (8007d44 <HAL_GPIO_Init+0x34c>)
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	089b      	lsrs	r3, r3, #2
 8007c68:	3302      	adds	r3, #2
 8007c6a:	69ba      	ldr	r2, [r7, #24]
 8007c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	43db      	mvns	r3, r3
 8007c7c:	69ba      	ldr	r2, [r7, #24]
 8007c7e:	4013      	ands	r3, r2
 8007c80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d003      	beq.n	8007c96 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007c8e:	69ba      	ldr	r2, [r7, #24]
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007c96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	43db      	mvns	r3, r3
 8007caa:	69ba      	ldr	r2, [r7, #24]
 8007cac:	4013      	ands	r3, r2
 8007cae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d003      	beq.n	8007cc4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007cbc:	69ba      	ldr	r2, [r7, #24]
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007cc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	43db      	mvns	r3, r3
 8007cd6:	69ba      	ldr	r2, [r7, #24]
 8007cd8:	4013      	ands	r3, r2
 8007cda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d003      	beq.n	8007cf0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007ce8:	69ba      	ldr	r2, [r7, #24]
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	69ba      	ldr	r2, [r7, #24]
 8007cf4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	43db      	mvns	r3, r3
 8007d00:	69ba      	ldr	r2, [r7, #24]
 8007d02:	4013      	ands	r3, r2
 8007d04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d003      	beq.n	8007d1a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007d12:	69ba      	ldr	r2, [r7, #24]
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	69ba      	ldr	r2, [r7, #24]
 8007d1e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	3301      	adds	r3, #1
 8007d24:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f47f ae6b 	bne.w	8007a0c <HAL_GPIO_Init+0x14>
  }
}
 8007d36:	bf00      	nop
 8007d38:	bf00      	nop
 8007d3a:	3724      	adds	r7, #36	; 0x24
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr
 8007d44:	58000400 	.word	0x58000400

08007d48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	460b      	mov	r3, r1
 8007d52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	691a      	ldr	r2, [r3, #16]
 8007d58:	887b      	ldrh	r3, [r7, #2]
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d002      	beq.n	8007d66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007d60:	2301      	movs	r3, #1
 8007d62:	73fb      	strb	r3, [r7, #15]
 8007d64:	e001      	b.n	8007d6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007d66:	2300      	movs	r3, #0
 8007d68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3714      	adds	r7, #20
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	460b      	mov	r3, r1
 8007d82:	807b      	strh	r3, [r7, #2]
 8007d84:	4613      	mov	r3, r2
 8007d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007d88:	787b      	ldrb	r3, [r7, #1]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d003      	beq.n	8007d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007d8e:	887a      	ldrh	r2, [r7, #2]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007d94:	e003      	b.n	8007d9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007d96:	887b      	ldrh	r3, [r7, #2]
 8007d98:	041a      	lsls	r2, r3, #16
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	619a      	str	r2, [r3, #24]
}
 8007d9e:	bf00      	nop
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
	...

08007dac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d101      	bne.n	8007dbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e07f      	b.n	8007ebe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d106      	bne.n	8007dd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f7fa fe14 	bl	8002a00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2224      	movs	r2, #36	; 0x24
 8007ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f022 0201 	bic.w	r2, r2, #1
 8007dee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685a      	ldr	r2, [r3, #4]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007dfc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	689a      	ldr	r2, [r3, #8]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d107      	bne.n	8007e26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	689a      	ldr	r2, [r3, #8]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e22:	609a      	str	r2, [r3, #8]
 8007e24:	e006      	b.n	8007e34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	689a      	ldr	r2, [r3, #8]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007e32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d104      	bne.n	8007e46 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	6859      	ldr	r1, [r3, #4]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	4b1d      	ldr	r3, [pc, #116]	; (8007ec8 <HAL_I2C_Init+0x11c>)
 8007e52:	430b      	orrs	r3, r1
 8007e54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	68da      	ldr	r2, [r3, #12]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	691a      	ldr	r2, [r3, #16]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	430a      	orrs	r2, r1
 8007e7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	69d9      	ldr	r1, [r3, #28]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a1a      	ldr	r2, [r3, #32]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	430a      	orrs	r2, r1
 8007e8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f042 0201 	orr.w	r2, r2, #1
 8007e9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2220      	movs	r2, #32
 8007eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	02008000 	.word	0x02008000

08007ecc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b20      	cmp	r3, #32
 8007ee0:	d138      	bne.n	8007f54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d101      	bne.n	8007ef0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007eec:	2302      	movs	r3, #2
 8007eee:	e032      	b.n	8007f56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2224      	movs	r2, #36	; 0x24
 8007efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f022 0201 	bic.w	r2, r2, #1
 8007f0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6819      	ldr	r1, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	683a      	ldr	r2, [r7, #0]
 8007f2c:	430a      	orrs	r2, r1
 8007f2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f042 0201 	orr.w	r2, r2, #1
 8007f3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2220      	movs	r2, #32
 8007f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	e000      	b.n	8007f56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007f54:	2302      	movs	r3, #2
  }
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	370c      	adds	r7, #12
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr

08007f62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007f62:	b480      	push	{r7}
 8007f64:	b085      	sub	sp, #20
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
 8007f6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	2b20      	cmp	r3, #32
 8007f76:	d139      	bne.n	8007fec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d101      	bne.n	8007f86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007f82:	2302      	movs	r3, #2
 8007f84:	e033      	b.n	8007fee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2224      	movs	r2, #36	; 0x24
 8007f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f022 0201 	bic.w	r2, r2, #1
 8007fa4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007fb4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	021b      	lsls	r3, r3, #8
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f042 0201 	orr.w	r2, r2, #1
 8007fd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2220      	movs	r2, #32
 8007fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	e000      	b.n	8007fee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007fec:	2302      	movs	r3, #2
  }
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3714      	adds	r7, #20
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr

08007ffa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007ffa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ffc:	b08f      	sub	sp, #60	; 0x3c
 8007ffe:	af0a      	add	r7, sp, #40	; 0x28
 8008000:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d101      	bne.n	800800c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	e116      	b.n	800823a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008018:	b2db      	uxtb	r3, r3
 800801a:	2b00      	cmp	r3, #0
 800801c:	d106      	bne.n	800802c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f00e fb5a 	bl	80166e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2203      	movs	r2, #3
 8008030:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800803c:	2b00      	cmp	r3, #0
 800803e:	d102      	bne.n	8008046 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4618      	mov	r0, r3
 800804c:	f00a fc9f 	bl	801298e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	603b      	str	r3, [r7, #0]
 8008056:	687e      	ldr	r6, [r7, #4]
 8008058:	466d      	mov	r5, sp
 800805a:	f106 0410 	add.w	r4, r6, #16
 800805e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008060:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008064:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008066:	e894 0003 	ldmia.w	r4, {r0, r1}
 800806a:	e885 0003 	stmia.w	r5, {r0, r1}
 800806e:	1d33      	adds	r3, r6, #4
 8008070:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008072:	6838      	ldr	r0, [r7, #0]
 8008074:	f00a fb6a 	bl	801274c <USB_CoreInit>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d005      	beq.n	800808a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2202      	movs	r2, #2
 8008082:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e0d7      	b.n	800823a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2100      	movs	r1, #0
 8008090:	4618      	mov	r0, r3
 8008092:	f00a fc8d 	bl	80129b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008096:	2300      	movs	r3, #0
 8008098:	73fb      	strb	r3, [r7, #15]
 800809a:	e04a      	b.n	8008132 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800809c:	7bfa      	ldrb	r2, [r7, #15]
 800809e:	6879      	ldr	r1, [r7, #4]
 80080a0:	4613      	mov	r3, r2
 80080a2:	00db      	lsls	r3, r3, #3
 80080a4:	4413      	add	r3, r2
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	440b      	add	r3, r1
 80080aa:	333d      	adds	r3, #61	; 0x3d
 80080ac:	2201      	movs	r2, #1
 80080ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80080b0:	7bfa      	ldrb	r2, [r7, #15]
 80080b2:	6879      	ldr	r1, [r7, #4]
 80080b4:	4613      	mov	r3, r2
 80080b6:	00db      	lsls	r3, r3, #3
 80080b8:	4413      	add	r3, r2
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	440b      	add	r3, r1
 80080be:	333c      	adds	r3, #60	; 0x3c
 80080c0:	7bfa      	ldrb	r2, [r7, #15]
 80080c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80080c4:	7bfa      	ldrb	r2, [r7, #15]
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
 80080c8:	b298      	uxth	r0, r3
 80080ca:	6879      	ldr	r1, [r7, #4]
 80080cc:	4613      	mov	r3, r2
 80080ce:	00db      	lsls	r3, r3, #3
 80080d0:	4413      	add	r3, r2
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	440b      	add	r3, r1
 80080d6:	3356      	adds	r3, #86	; 0x56
 80080d8:	4602      	mov	r2, r0
 80080da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80080dc:	7bfa      	ldrb	r2, [r7, #15]
 80080de:	6879      	ldr	r1, [r7, #4]
 80080e0:	4613      	mov	r3, r2
 80080e2:	00db      	lsls	r3, r3, #3
 80080e4:	4413      	add	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	440b      	add	r3, r1
 80080ea:	3340      	adds	r3, #64	; 0x40
 80080ec:	2200      	movs	r2, #0
 80080ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80080f0:	7bfa      	ldrb	r2, [r7, #15]
 80080f2:	6879      	ldr	r1, [r7, #4]
 80080f4:	4613      	mov	r3, r2
 80080f6:	00db      	lsls	r3, r3, #3
 80080f8:	4413      	add	r3, r2
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	440b      	add	r3, r1
 80080fe:	3344      	adds	r3, #68	; 0x44
 8008100:	2200      	movs	r2, #0
 8008102:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008104:	7bfa      	ldrb	r2, [r7, #15]
 8008106:	6879      	ldr	r1, [r7, #4]
 8008108:	4613      	mov	r3, r2
 800810a:	00db      	lsls	r3, r3, #3
 800810c:	4413      	add	r3, r2
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	440b      	add	r3, r1
 8008112:	3348      	adds	r3, #72	; 0x48
 8008114:	2200      	movs	r2, #0
 8008116:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008118:	7bfa      	ldrb	r2, [r7, #15]
 800811a:	6879      	ldr	r1, [r7, #4]
 800811c:	4613      	mov	r3, r2
 800811e:	00db      	lsls	r3, r3, #3
 8008120:	4413      	add	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	440b      	add	r3, r1
 8008126:	334c      	adds	r3, #76	; 0x4c
 8008128:	2200      	movs	r2, #0
 800812a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800812c:	7bfb      	ldrb	r3, [r7, #15]
 800812e:	3301      	adds	r3, #1
 8008130:	73fb      	strb	r3, [r7, #15]
 8008132:	7bfa      	ldrb	r2, [r7, #15]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	429a      	cmp	r2, r3
 800813a:	d3af      	bcc.n	800809c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800813c:	2300      	movs	r3, #0
 800813e:	73fb      	strb	r3, [r7, #15]
 8008140:	e044      	b.n	80081cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008142:	7bfa      	ldrb	r2, [r7, #15]
 8008144:	6879      	ldr	r1, [r7, #4]
 8008146:	4613      	mov	r3, r2
 8008148:	00db      	lsls	r3, r3, #3
 800814a:	4413      	add	r3, r2
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	440b      	add	r3, r1
 8008150:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008154:	2200      	movs	r2, #0
 8008156:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008158:	7bfa      	ldrb	r2, [r7, #15]
 800815a:	6879      	ldr	r1, [r7, #4]
 800815c:	4613      	mov	r3, r2
 800815e:	00db      	lsls	r3, r3, #3
 8008160:	4413      	add	r3, r2
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	440b      	add	r3, r1
 8008166:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800816a:	7bfa      	ldrb	r2, [r7, #15]
 800816c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800816e:	7bfa      	ldrb	r2, [r7, #15]
 8008170:	6879      	ldr	r1, [r7, #4]
 8008172:	4613      	mov	r3, r2
 8008174:	00db      	lsls	r3, r3, #3
 8008176:	4413      	add	r3, r2
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	440b      	add	r3, r1
 800817c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008180:	2200      	movs	r2, #0
 8008182:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008184:	7bfa      	ldrb	r2, [r7, #15]
 8008186:	6879      	ldr	r1, [r7, #4]
 8008188:	4613      	mov	r3, r2
 800818a:	00db      	lsls	r3, r3, #3
 800818c:	4413      	add	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	440b      	add	r3, r1
 8008192:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8008196:	2200      	movs	r2, #0
 8008198:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800819a:	7bfa      	ldrb	r2, [r7, #15]
 800819c:	6879      	ldr	r1, [r7, #4]
 800819e:	4613      	mov	r3, r2
 80081a0:	00db      	lsls	r3, r3, #3
 80081a2:	4413      	add	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	440b      	add	r3, r1
 80081a8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80081ac:	2200      	movs	r2, #0
 80081ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80081b0:	7bfa      	ldrb	r2, [r7, #15]
 80081b2:	6879      	ldr	r1, [r7, #4]
 80081b4:	4613      	mov	r3, r2
 80081b6:	00db      	lsls	r3, r3, #3
 80081b8:	4413      	add	r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	440b      	add	r3, r1
 80081be:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80081c2:	2200      	movs	r2, #0
 80081c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80081c6:	7bfb      	ldrb	r3, [r7, #15]
 80081c8:	3301      	adds	r3, #1
 80081ca:	73fb      	strb	r3, [r7, #15]
 80081cc:	7bfa      	ldrb	r2, [r7, #15]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d3b5      	bcc.n	8008142 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	603b      	str	r3, [r7, #0]
 80081dc:	687e      	ldr	r6, [r7, #4]
 80081de:	466d      	mov	r5, sp
 80081e0:	f106 0410 	add.w	r4, r6, #16
 80081e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80081e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80081e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80081ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80081ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80081f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80081f4:	1d33      	adds	r3, r6, #4
 80081f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081f8:	6838      	ldr	r0, [r7, #0]
 80081fa:	f00a fc25 	bl	8012a48 <USB_DevInit>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d005      	beq.n	8008210 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2202      	movs	r2, #2
 8008208:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	e014      	b.n	800823a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008224:	2b01      	cmp	r3, #1
 8008226:	d102      	bne.n	800822e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f001 f96f 	bl	800950c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4618      	mov	r0, r3
 8008234:	f00b fc67 	bl	8013b06 <USB_DevDisconnect>

  return HAL_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008242 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b084      	sub	sp, #16
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008256:	2b01      	cmp	r3, #1
 8008258:	d101      	bne.n	800825e <HAL_PCD_Start+0x1c>
 800825a:	2302      	movs	r3, #2
 800825c:	e022      	b.n	80082a4 <HAL_PCD_Start+0x62>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2201      	movs	r2, #1
 8008262:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800826a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800826e:	2b00      	cmp	r3, #0
 8008270:	d109      	bne.n	8008286 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008276:	2b01      	cmp	r3, #1
 8008278:	d105      	bne.n	8008286 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800827e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4618      	mov	r0, r3
 800828c:	f00a fb6e 	bl	801296c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4618      	mov	r0, r3
 8008296:	f00b fc15 	bl	8013ac4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80082ac:	b590      	push	{r4, r7, lr}
 80082ae:	b08d      	sub	sp, #52	; 0x34
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ba:	6a3b      	ldr	r3, [r7, #32]
 80082bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4618      	mov	r0, r3
 80082c4:	f00b fcd3 	bl	8013c6e <USB_GetMode>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f040 84b7 	bne.w	8008c3e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4618      	mov	r0, r3
 80082d6:	f00b fc37 	bl	8013b48 <USB_ReadInterrupts>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f000 84ad 	beq.w	8008c3c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	0a1b      	lsrs	r3, r3, #8
 80082ec:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4618      	mov	r0, r3
 80082fc:	f00b fc24 	bl	8013b48 <USB_ReadInterrupts>
 8008300:	4603      	mov	r3, r0
 8008302:	f003 0302 	and.w	r3, r3, #2
 8008306:	2b02      	cmp	r3, #2
 8008308:	d107      	bne.n	800831a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	695a      	ldr	r2, [r3, #20]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f002 0202 	and.w	r2, r2, #2
 8008318:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4618      	mov	r0, r3
 8008320:	f00b fc12 	bl	8013b48 <USB_ReadInterrupts>
 8008324:	4603      	mov	r3, r0
 8008326:	f003 0310 	and.w	r3, r3, #16
 800832a:	2b10      	cmp	r3, #16
 800832c:	d161      	bne.n	80083f2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	699a      	ldr	r2, [r3, #24]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f022 0210 	bic.w	r2, r2, #16
 800833c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800833e:	6a3b      	ldr	r3, [r7, #32]
 8008340:	6a1b      	ldr	r3, [r3, #32]
 8008342:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	f003 020f 	and.w	r2, r3, #15
 800834a:	4613      	mov	r3, r2
 800834c:	00db      	lsls	r3, r3, #3
 800834e:	4413      	add	r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	4413      	add	r3, r2
 800835a:	3304      	adds	r3, #4
 800835c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	0c5b      	lsrs	r3, r3, #17
 8008362:	f003 030f 	and.w	r3, r3, #15
 8008366:	2b02      	cmp	r3, #2
 8008368:	d124      	bne.n	80083b4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800836a:	69ba      	ldr	r2, [r7, #24]
 800836c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008370:	4013      	ands	r3, r2
 8008372:	2b00      	cmp	r3, #0
 8008374:	d035      	beq.n	80083e2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	091b      	lsrs	r3, r3, #4
 800837e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008380:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008384:	b29b      	uxth	r3, r3
 8008386:	461a      	mov	r2, r3
 8008388:	6a38      	ldr	r0, [r7, #32]
 800838a:	f00b fa49 	bl	8013820 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	68da      	ldr	r2, [r3, #12]
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	091b      	lsrs	r3, r3, #4
 8008396:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800839a:	441a      	add	r2, r3
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	695a      	ldr	r2, [r3, #20]
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	091b      	lsrs	r3, r3, #4
 80083a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80083ac:	441a      	add	r2, r3
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	615a      	str	r2, [r3, #20]
 80083b2:	e016      	b.n	80083e2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	0c5b      	lsrs	r3, r3, #17
 80083b8:	f003 030f 	and.w	r3, r3, #15
 80083bc:	2b06      	cmp	r3, #6
 80083be:	d110      	bne.n	80083e2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80083c6:	2208      	movs	r2, #8
 80083c8:	4619      	mov	r1, r3
 80083ca:	6a38      	ldr	r0, [r7, #32]
 80083cc:	f00b fa28 	bl	8013820 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	695a      	ldr	r2, [r3, #20]
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	091b      	lsrs	r3, r3, #4
 80083d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80083dc:	441a      	add	r2, r3
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	699a      	ldr	r2, [r3, #24]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f042 0210 	orr.w	r2, r2, #16
 80083f0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4618      	mov	r0, r3
 80083f8:	f00b fba6 	bl	8013b48 <USB_ReadInterrupts>
 80083fc:	4603      	mov	r3, r0
 80083fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008402:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008406:	f040 80a7 	bne.w	8008558 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800840a:	2300      	movs	r3, #0
 800840c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4618      	mov	r0, r3
 8008414:	f00b fbab 	bl	8013b6e <USB_ReadDevAllOutEpInterrupt>
 8008418:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800841a:	e099      	b.n	8008550 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800841c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841e:	f003 0301 	and.w	r3, r3, #1
 8008422:	2b00      	cmp	r3, #0
 8008424:	f000 808e 	beq.w	8008544 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800842e:	b2d2      	uxtb	r2, r2
 8008430:	4611      	mov	r1, r2
 8008432:	4618      	mov	r0, r3
 8008434:	f00b fbcf 	bl	8013bd6 <USB_ReadDevOutEPInterrupt>
 8008438:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00c      	beq.n	800845e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008446:	015a      	lsls	r2, r3, #5
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	4413      	add	r3, r2
 800844c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008450:	461a      	mov	r2, r3
 8008452:	2301      	movs	r3, #1
 8008454:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008456:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fed1 	bl	8009200 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	f003 0308 	and.w	r3, r3, #8
 8008464:	2b00      	cmp	r3, #0
 8008466:	d00c      	beq.n	8008482 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846a:	015a      	lsls	r2, r3, #5
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	4413      	add	r3, r2
 8008470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008474:	461a      	mov	r2, r3
 8008476:	2308      	movs	r3, #8
 8008478:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800847a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 ffa7 	bl	80093d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	f003 0310 	and.w	r3, r3, #16
 8008488:	2b00      	cmp	r3, #0
 800848a:	d008      	beq.n	800849e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800848c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848e:	015a      	lsls	r2, r3, #5
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	4413      	add	r3, r2
 8008494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008498:	461a      	mov	r2, r3
 800849a:	2310      	movs	r3, #16
 800849c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	f003 0302 	and.w	r3, r3, #2
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d030      	beq.n	800850a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80084a8:	6a3b      	ldr	r3, [r7, #32]
 80084aa:	695b      	ldr	r3, [r3, #20]
 80084ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084b0:	2b80      	cmp	r3, #128	; 0x80
 80084b2:	d109      	bne.n	80084c8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	69fa      	ldr	r2, [r7, #28]
 80084be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80084c6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80084c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ca:	4613      	mov	r3, r2
 80084cc:	00db      	lsls	r3, r3, #3
 80084ce:	4413      	add	r3, r2
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	4413      	add	r3, r2
 80084da:	3304      	adds	r3, #4
 80084dc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	78db      	ldrb	r3, [r3, #3]
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d108      	bne.n	80084f8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	2200      	movs	r2, #0
 80084ea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80084ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	4619      	mov	r1, r3
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f00e f9ec 	bl	80168d0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80084f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fa:	015a      	lsls	r2, r3, #5
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	4413      	add	r3, r2
 8008500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008504:	461a      	mov	r2, r3
 8008506:	2302      	movs	r3, #2
 8008508:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	f003 0320 	and.w	r3, r3, #32
 8008510:	2b00      	cmp	r3, #0
 8008512:	d008      	beq.n	8008526 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008516:	015a      	lsls	r2, r3, #5
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	4413      	add	r3, r2
 800851c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008520:	461a      	mov	r2, r3
 8008522:	2320      	movs	r3, #32
 8008524:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800852c:	2b00      	cmp	r3, #0
 800852e:	d009      	beq.n	8008544 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	015a      	lsls	r2, r3, #5
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	4413      	add	r3, r2
 8008538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800853c:	461a      	mov	r2, r3
 800853e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008542:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008546:	3301      	adds	r3, #1
 8008548:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800854a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800854c:	085b      	lsrs	r3, r3, #1
 800854e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008552:	2b00      	cmp	r3, #0
 8008554:	f47f af62 	bne.w	800841c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4618      	mov	r0, r3
 800855e:	f00b faf3 	bl	8013b48 <USB_ReadInterrupts>
 8008562:	4603      	mov	r3, r0
 8008564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008568:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800856c:	f040 80db 	bne.w	8008726 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4618      	mov	r0, r3
 8008576:	f00b fb14 	bl	8013ba2 <USB_ReadDevAllInEpInterrupt>
 800857a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800857c:	2300      	movs	r3, #0
 800857e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008580:	e0cd      	b.n	800871e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008584:	f003 0301 	and.w	r3, r3, #1
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 80c2 	beq.w	8008712 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008594:	b2d2      	uxtb	r2, r2
 8008596:	4611      	mov	r1, r2
 8008598:	4618      	mov	r0, r3
 800859a:	f00b fb3a 	bl	8013c12 <USB_ReadDevInEPInterrupt>
 800859e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	f003 0301 	and.w	r3, r3, #1
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d057      	beq.n	800865a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80085aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ac:	f003 030f 	and.w	r3, r3, #15
 80085b0:	2201      	movs	r2, #1
 80085b2:	fa02 f303 	lsl.w	r3, r2, r3
 80085b6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	43db      	mvns	r3, r3
 80085c4:	69f9      	ldr	r1, [r7, #28]
 80085c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085ca:	4013      	ands	r3, r2
 80085cc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80085ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d0:	015a      	lsls	r2, r3, #5
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	4413      	add	r3, r2
 80085d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085da:	461a      	mov	r2, r3
 80085dc:	2301      	movs	r3, #1
 80085de:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d132      	bne.n	800864e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80085e8:	6879      	ldr	r1, [r7, #4]
 80085ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ec:	4613      	mov	r3, r2
 80085ee:	00db      	lsls	r3, r3, #3
 80085f0:	4413      	add	r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	440b      	add	r3, r1
 80085f6:	3348      	adds	r3, #72	; 0x48
 80085f8:	6819      	ldr	r1, [r3, #0]
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085fe:	4613      	mov	r3, r2
 8008600:	00db      	lsls	r3, r3, #3
 8008602:	4413      	add	r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	4403      	add	r3, r0
 8008608:	3344      	adds	r3, #68	; 0x44
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4419      	add	r1, r3
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008612:	4613      	mov	r3, r2
 8008614:	00db      	lsls	r3, r3, #3
 8008616:	4413      	add	r3, r2
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4403      	add	r3, r0
 800861c:	3348      	adds	r3, #72	; 0x48
 800861e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008622:	2b00      	cmp	r3, #0
 8008624:	d113      	bne.n	800864e <HAL_PCD_IRQHandler+0x3a2>
 8008626:	6879      	ldr	r1, [r7, #4]
 8008628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800862a:	4613      	mov	r3, r2
 800862c:	00db      	lsls	r3, r3, #3
 800862e:	4413      	add	r3, r2
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	440b      	add	r3, r1
 8008634:	334c      	adds	r3, #76	; 0x4c
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d108      	bne.n	800864e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6818      	ldr	r0, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008646:	461a      	mov	r2, r3
 8008648:	2101      	movs	r1, #1
 800864a:	f00b fb43 	bl	8013cd4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800864e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008650:	b2db      	uxtb	r3, r3
 8008652:	4619      	mov	r1, r3
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f00e f8b6 	bl	80167c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	f003 0308 	and.w	r3, r3, #8
 8008660:	2b00      	cmp	r3, #0
 8008662:	d008      	beq.n	8008676 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008666:	015a      	lsls	r2, r3, #5
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	4413      	add	r3, r2
 800866c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008670:	461a      	mov	r2, r3
 8008672:	2308      	movs	r3, #8
 8008674:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	f003 0310 	and.w	r3, r3, #16
 800867c:	2b00      	cmp	r3, #0
 800867e:	d008      	beq.n	8008692 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	015a      	lsls	r2, r3, #5
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	4413      	add	r3, r2
 8008688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800868c:	461a      	mov	r2, r3
 800868e:	2310      	movs	r3, #16
 8008690:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008698:	2b00      	cmp	r3, #0
 800869a:	d008      	beq.n	80086ae <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869e:	015a      	lsls	r2, r3, #5
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	4413      	add	r3, r2
 80086a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086a8:	461a      	mov	r2, r3
 80086aa:	2340      	movs	r3, #64	; 0x40
 80086ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	f003 0302 	and.w	r3, r3, #2
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d023      	beq.n	8008700 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80086b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086ba:	6a38      	ldr	r0, [r7, #32]
 80086bc:	f00a fb22 	bl	8012d04 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80086c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086c2:	4613      	mov	r3, r2
 80086c4:	00db      	lsls	r3, r3, #3
 80086c6:	4413      	add	r3, r2
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	3338      	adds	r3, #56	; 0x38
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	4413      	add	r3, r2
 80086d0:	3304      	adds	r3, #4
 80086d2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	78db      	ldrb	r3, [r3, #3]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d108      	bne.n	80086ee <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	2200      	movs	r2, #0
 80086e0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80086e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	4619      	mov	r1, r3
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f00e f903 	bl	80168f4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80086ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f0:	015a      	lsls	r2, r3, #5
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	4413      	add	r3, r2
 80086f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086fa:	461a      	mov	r2, r3
 80086fc:	2302      	movs	r3, #2
 80086fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008706:	2b00      	cmp	r3, #0
 8008708:	d003      	beq.n	8008712 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800870a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fcea 	bl	80090e6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008714:	3301      	adds	r3, #1
 8008716:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871a:	085b      	lsrs	r3, r3, #1
 800871c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800871e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008720:	2b00      	cmp	r3, #0
 8008722:	f47f af2e 	bne.w	8008582 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4618      	mov	r0, r3
 800872c:	f00b fa0c 	bl	8013b48 <USB_ReadInterrupts>
 8008730:	4603      	mov	r3, r0
 8008732:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008736:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800873a:	d122      	bne.n	8008782 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	69fa      	ldr	r2, [r7, #28]
 8008746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800874a:	f023 0301 	bic.w	r3, r3, #1
 800874e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008756:	2b01      	cmp	r3, #1
 8008758:	d108      	bne.n	800876c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008762:	2100      	movs	r1, #0
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fef5 	bl	8009554 <HAL_PCDEx_LPM_Callback>
 800876a:	e002      	b.n	8008772 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f00e f8a1 	bl	80168b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	695a      	ldr	r2, [r3, #20]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008780:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4618      	mov	r0, r3
 8008788:	f00b f9de 	bl	8013b48 <USB_ReadInterrupts>
 800878c:	4603      	mov	r3, r0
 800878e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008792:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008796:	d112      	bne.n	80087be <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	f003 0301 	and.w	r3, r3, #1
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d102      	bne.n	80087ae <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f00e f85d 	bl	8016868 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	695a      	ldr	r2, [r3, #20]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80087bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4618      	mov	r0, r3
 80087c4:	f00b f9c0 	bl	8013b48 <USB_ReadInterrupts>
 80087c8:	4603      	mov	r3, r0
 80087ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087d2:	d121      	bne.n	8008818 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	695a      	ldr	r2, [r3, #20]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80087e2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d111      	bne.n	8008812 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2201      	movs	r2, #1
 80087f2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087fc:	089b      	lsrs	r3, r3, #2
 80087fe:	f003 020f 	and.w	r2, r3, #15
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008808:	2101      	movs	r1, #1
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 fea2 	bl	8009554 <HAL_PCDEx_LPM_Callback>
 8008810:	e002      	b.n	8008818 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f00e f828 	bl	8016868 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4618      	mov	r0, r3
 800881e:	f00b f993 	bl	8013b48 <USB_ReadInterrupts>
 8008822:	4603      	mov	r3, r0
 8008824:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800882c:	f040 80b7 	bne.w	800899e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	69fa      	ldr	r2, [r7, #28]
 800883a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800883e:	f023 0301 	bic.w	r3, r3, #1
 8008842:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2110      	movs	r1, #16
 800884a:	4618      	mov	r0, r3
 800884c:	f00a fa5a 	bl	8012d04 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008850:	2300      	movs	r3, #0
 8008852:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008854:	e046      	b.n	80088e4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008858:	015a      	lsls	r2, r3, #5
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	4413      	add	r3, r2
 800885e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008862:	461a      	mov	r2, r3
 8008864:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008868:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800886a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800886c:	015a      	lsls	r2, r3, #5
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	4413      	add	r3, r2
 8008872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800887a:	0151      	lsls	r1, r2, #5
 800887c:	69fa      	ldr	r2, [r7, #28]
 800887e:	440a      	add	r2, r1
 8008880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008884:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008888:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800888a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888c:	015a      	lsls	r2, r3, #5
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	4413      	add	r3, r2
 8008892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008896:	461a      	mov	r2, r3
 8008898:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800889c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800889e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a0:	015a      	lsls	r2, r3, #5
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	4413      	add	r3, r2
 80088a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088ae:	0151      	lsls	r1, r2, #5
 80088b0:	69fa      	ldr	r2, [r7, #28]
 80088b2:	440a      	add	r2, r1
 80088b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80088bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80088be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c0:	015a      	lsls	r2, r3, #5
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	4413      	add	r3, r2
 80088c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088ce:	0151      	lsls	r1, r2, #5
 80088d0:	69fa      	ldr	r2, [r7, #28]
 80088d2:	440a      	add	r2, r1
 80088d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80088dc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e0:	3301      	adds	r3, #1
 80088e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d3b3      	bcc.n	8008856 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088f4:	69db      	ldr	r3, [r3, #28]
 80088f6:	69fa      	ldr	r2, [r7, #28]
 80088f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088fc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008900:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008906:	2b00      	cmp	r3, #0
 8008908:	d016      	beq.n	8008938 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008914:	69fa      	ldr	r2, [r7, #28]
 8008916:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800891a:	f043 030b 	orr.w	r3, r3, #11
 800891e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800892a:	69fa      	ldr	r2, [r7, #28]
 800892c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008930:	f043 030b 	orr.w	r3, r3, #11
 8008934:	6453      	str	r3, [r2, #68]	; 0x44
 8008936:	e015      	b.n	8008964 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800893e:	695a      	ldr	r2, [r3, #20]
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008946:	4619      	mov	r1, r3
 8008948:	f242 032b 	movw	r3, #8235	; 0x202b
 800894c:	4313      	orrs	r3, r2
 800894e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	69fa      	ldr	r2, [r7, #28]
 800895a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800895e:	f043 030b 	orr.w	r3, r3, #11
 8008962:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	69fa      	ldr	r2, [r7, #28]
 800896e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008972:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008976:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6818      	ldr	r0, [r3, #0]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008988:	461a      	mov	r2, r3
 800898a:	f00b f9a3 	bl	8013cd4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	695a      	ldr	r2, [r3, #20]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800899c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4618      	mov	r0, r3
 80089a4:	f00b f8d0 	bl	8013b48 <USB_ReadInterrupts>
 80089a8:	4603      	mov	r3, r0
 80089aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80089ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089b2:	d124      	bne.n	80089fe <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4618      	mov	r0, r3
 80089ba:	f00b f967 	bl	8013c8c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f00a fa1b 	bl	8012dfe <USB_GetDevSpeed>
 80089c8:	4603      	mov	r3, r0
 80089ca:	461a      	mov	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681c      	ldr	r4, [r3, #0]
 80089d4:	f001 fd88 	bl	800a4e8 <HAL_RCC_GetHCLKFreq>
 80089d8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	461a      	mov	r2, r3
 80089e2:	4620      	mov	r0, r4
 80089e4:	f009 ff20 	bl	8012828 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f00d ff14 	bl	8016816 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	695a      	ldr	r2, [r3, #20]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80089fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4618      	mov	r0, r3
 8008a04:	f00b f8a0 	bl	8013b48 <USB_ReadInterrupts>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	f003 0308 	and.w	r3, r3, #8
 8008a0e:	2b08      	cmp	r3, #8
 8008a10:	d10a      	bne.n	8008a28 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f00d fef1 	bl	80167fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	695a      	ldr	r2, [r3, #20]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f002 0208 	and.w	r2, r2, #8
 8008a26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f00b f88b 	bl	8013b48 <USB_ReadInterrupts>
 8008a32:	4603      	mov	r3, r0
 8008a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a38:	2b80      	cmp	r3, #128	; 0x80
 8008a3a:	d122      	bne.n	8008a82 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008a3c:	6a3b      	ldr	r3, [r7, #32]
 8008a3e:	699b      	ldr	r3, [r3, #24]
 8008a40:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a44:	6a3b      	ldr	r3, [r7, #32]
 8008a46:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008a48:	2301      	movs	r3, #1
 8008a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8008a4c:	e014      	b.n	8008a78 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008a4e:	6879      	ldr	r1, [r7, #4]
 8008a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a52:	4613      	mov	r3, r2
 8008a54:	00db      	lsls	r3, r3, #3
 8008a56:	4413      	add	r3, r2
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	440b      	add	r3, r1
 8008a5c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d105      	bne.n	8008a72 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 fb09 	bl	8009084 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a74:	3301      	adds	r3, #1
 8008a76:	627b      	str	r3, [r7, #36]	; 0x24
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d3e5      	bcc.n	8008a4e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4618      	mov	r0, r3
 8008a88:	f00b f85e 	bl	8013b48 <USB_ReadInterrupts>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a96:	d13b      	bne.n	8008b10 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008a98:	2301      	movs	r3, #1
 8008a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8008a9c:	e02b      	b.n	8008af6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa0:	015a      	lsls	r2, r3, #5
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008aae:	6879      	ldr	r1, [r7, #4]
 8008ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	00db      	lsls	r3, r3, #3
 8008ab6:	4413      	add	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	440b      	add	r3, r1
 8008abc:	3340      	adds	r3, #64	; 0x40
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d115      	bne.n	8008af0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008ac4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	da12      	bge.n	8008af0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008aca:	6879      	ldr	r1, [r7, #4]
 8008acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ace:	4613      	mov	r3, r2
 8008ad0:	00db      	lsls	r3, r3, #3
 8008ad2:	4413      	add	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	440b      	add	r3, r1
 8008ad8:	333f      	adds	r3, #63	; 0x3f
 8008ada:	2201      	movs	r2, #1
 8008adc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	4619      	mov	r1, r3
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 faca 	bl	8009084 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af2:	3301      	adds	r3, #1
 8008af4:	627b      	str	r3, [r7, #36]	; 0x24
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d3ce      	bcc.n	8008a9e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	695a      	ldr	r2, [r3, #20]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008b0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4618      	mov	r0, r3
 8008b16:	f00b f817 	bl	8013b48 <USB_ReadInterrupts>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b24:	d155      	bne.n	8008bd2 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008b26:	2301      	movs	r3, #1
 8008b28:	627b      	str	r3, [r7, #36]	; 0x24
 8008b2a:	e045      	b.n	8008bb8 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2e:	015a      	lsls	r2, r3, #5
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	4413      	add	r3, r2
 8008b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008b3c:	6879      	ldr	r1, [r7, #4]
 8008b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b40:	4613      	mov	r3, r2
 8008b42:	00db      	lsls	r3, r3, #3
 8008b44:	4413      	add	r3, r2
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	440b      	add	r3, r1
 8008b4a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d12e      	bne.n	8008bb2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008b54:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	da2b      	bge.n	8008bb2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008b66:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d121      	bne.n	8008bb2 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008b6e:	6879      	ldr	r1, [r7, #4]
 8008b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b72:	4613      	mov	r3, r2
 8008b74:	00db      	lsls	r3, r3, #3
 8008b76:	4413      	add	r3, r2
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	440b      	add	r3, r1
 8008b7c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008b80:	2201      	movs	r2, #1
 8008b82:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008b84:	6a3b      	ldr	r3, [r7, #32]
 8008b86:	699b      	ldr	r3, [r3, #24]
 8008b88:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008b8c:	6a3b      	ldr	r3, [r7, #32]
 8008b8e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008b90:	6a3b      	ldr	r3, [r7, #32]
 8008b92:	695b      	ldr	r3, [r3, #20]
 8008b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d10a      	bne.n	8008bb2 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	69fa      	ldr	r2, [r7, #28]
 8008ba6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008baa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008bae:	6053      	str	r3, [r2, #4]
            break;
 8008bb0:	e007      	b.n	8008bc2 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d3b4      	bcc.n	8008b2c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	695a      	ldr	r2, [r3, #20]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008bd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f00a ffb6 	bl	8013b48 <USB_ReadInterrupts>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008be6:	d10a      	bne.n	8008bfe <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f00d fe95 	bl	8016918 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	695a      	ldr	r2, [r3, #20]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008bfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4618      	mov	r0, r3
 8008c04:	f00a ffa0 	bl	8013b48 <USB_ReadInterrupts>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	f003 0304 	and.w	r3, r3, #4
 8008c0e:	2b04      	cmp	r3, #4
 8008c10:	d115      	bne.n	8008c3e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	f003 0304 	and.w	r3, r3, #4
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d002      	beq.n	8008c2a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f00d fe85 	bl	8016934 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	6859      	ldr	r1, [r3, #4]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	69ba      	ldr	r2, [r7, #24]
 8008c36:	430a      	orrs	r2, r1
 8008c38:	605a      	str	r2, [r3, #4]
 8008c3a:	e000      	b.n	8008c3e <HAL_PCD_IRQHandler+0x992>
      return;
 8008c3c:	bf00      	nop
    }
  }
}
 8008c3e:	3734      	adds	r7, #52	; 0x34
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd90      	pop	{r4, r7, pc}

08008c44 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d101      	bne.n	8008c5e <HAL_PCD_SetAddress+0x1a>
 8008c5a:	2302      	movs	r3, #2
 8008c5c:	e013      	b.n	8008c86 <HAL_PCD_SetAddress+0x42>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2201      	movs	r2, #1
 8008c62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	78fa      	ldrb	r2, [r7, #3]
 8008c6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	78fa      	ldrb	r2, [r7, #3]
 8008c74:	4611      	mov	r1, r2
 8008c76:	4618      	mov	r0, r3
 8008c78:	f00a fefe 	bl	8013a78 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b084      	sub	sp, #16
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	4608      	mov	r0, r1
 8008c98:	4611      	mov	r1, r2
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	70fb      	strb	r3, [r7, #3]
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	803b      	strh	r3, [r7, #0]
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008cac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	da0f      	bge.n	8008cd4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008cb4:	78fb      	ldrb	r3, [r7, #3]
 8008cb6:	f003 020f 	and.w	r2, r3, #15
 8008cba:	4613      	mov	r3, r2
 8008cbc:	00db      	lsls	r3, r3, #3
 8008cbe:	4413      	add	r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	3338      	adds	r3, #56	; 0x38
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	3304      	adds	r3, #4
 8008cca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	705a      	strb	r2, [r3, #1]
 8008cd2:	e00f      	b.n	8008cf4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008cd4:	78fb      	ldrb	r3, [r7, #3]
 8008cd6:	f003 020f 	and.w	r2, r3, #15
 8008cda:	4613      	mov	r3, r2
 8008cdc:	00db      	lsls	r3, r3, #3
 8008cde:	4413      	add	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	4413      	add	r3, r2
 8008cea:	3304      	adds	r3, #4
 8008cec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008cf4:	78fb      	ldrb	r3, [r7, #3]
 8008cf6:	f003 030f 	and.w	r3, r3, #15
 8008cfa:	b2da      	uxtb	r2, r3
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008d00:	883a      	ldrh	r2, [r7, #0]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	78ba      	ldrb	r2, [r7, #2]
 8008d0a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	785b      	ldrb	r3, [r3, #1]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d004      	beq.n	8008d1e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	b29a      	uxth	r2, r3
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008d1e:	78bb      	ldrb	r3, [r7, #2]
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d102      	bne.n	8008d2a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2200      	movs	r2, #0
 8008d28:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d101      	bne.n	8008d38 <HAL_PCD_EP_Open+0xaa>
 8008d34:	2302      	movs	r3, #2
 8008d36:	e00e      	b.n	8008d56 <HAL_PCD_EP_Open+0xc8>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68f9      	ldr	r1, [r7, #12]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f00a f87e 	bl	8012e48 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008d54:	7afb      	ldrb	r3, [r7, #11]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b084      	sub	sp, #16
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	460b      	mov	r3, r1
 8008d68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008d6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	da0f      	bge.n	8008d92 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d72:	78fb      	ldrb	r3, [r7, #3]
 8008d74:	f003 020f 	and.w	r2, r3, #15
 8008d78:	4613      	mov	r3, r2
 8008d7a:	00db      	lsls	r3, r3, #3
 8008d7c:	4413      	add	r3, r2
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	3338      	adds	r3, #56	; 0x38
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	4413      	add	r3, r2
 8008d86:	3304      	adds	r3, #4
 8008d88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	705a      	strb	r2, [r3, #1]
 8008d90:	e00f      	b.n	8008db2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d92:	78fb      	ldrb	r3, [r7, #3]
 8008d94:	f003 020f 	and.w	r2, r3, #15
 8008d98:	4613      	mov	r3, r2
 8008d9a:	00db      	lsls	r3, r3, #3
 8008d9c:	4413      	add	r3, r2
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	4413      	add	r3, r2
 8008da8:	3304      	adds	r3, #4
 8008daa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2200      	movs	r2, #0
 8008db0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008db2:	78fb      	ldrb	r3, [r7, #3]
 8008db4:	f003 030f 	and.w	r3, r3, #15
 8008db8:	b2da      	uxtb	r2, r3
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d101      	bne.n	8008dcc <HAL_PCD_EP_Close+0x6e>
 8008dc8:	2302      	movs	r3, #2
 8008dca:	e00e      	b.n	8008dea <HAL_PCD_EP_Close+0x8c>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68f9      	ldr	r1, [r7, #12]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f00a f8bc 	bl	8012f58 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8008de8:	2300      	movs	r3, #0
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3710      	adds	r7, #16
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b086      	sub	sp, #24
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	60f8      	str	r0, [r7, #12]
 8008dfa:	607a      	str	r2, [r7, #4]
 8008dfc:	603b      	str	r3, [r7, #0]
 8008dfe:	460b      	mov	r3, r1
 8008e00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e02:	7afb      	ldrb	r3, [r7, #11]
 8008e04:	f003 020f 	and.w	r2, r3, #15
 8008e08:	4613      	mov	r3, r2
 8008e0a:	00db      	lsls	r3, r3, #3
 8008e0c:	4413      	add	r3, r2
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	4413      	add	r3, r2
 8008e18:	3304      	adds	r3, #4
 8008e1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	683a      	ldr	r2, [r7, #0]
 8008e26:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	2200      	movs	r2, #0
 8008e32:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008e34:	7afb      	ldrb	r3, [r7, #11]
 8008e36:	f003 030f 	and.w	r3, r3, #15
 8008e3a:	b2da      	uxtb	r2, r3
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d102      	bne.n	8008e4e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6818      	ldr	r0, [r3, #0]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	461a      	mov	r2, r3
 8008e5a:	6979      	ldr	r1, [r7, #20]
 8008e5c:	f00a f958 	bl	8013110 <USB_EPStartXfer>

  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3718      	adds	r7, #24
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008e6a:	b480      	push	{r7}
 8008e6c:	b083      	sub	sp, #12
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
 8008e72:	460b      	mov	r3, r1
 8008e74:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008e76:	78fb      	ldrb	r3, [r7, #3]
 8008e78:	f003 020f 	and.w	r2, r3, #15
 8008e7c:	6879      	ldr	r1, [r7, #4]
 8008e7e:	4613      	mov	r3, r2
 8008e80:	00db      	lsls	r3, r3, #3
 8008e82:	4413      	add	r3, r2
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	440b      	add	r3, r1
 8008e88:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8008e8c:	681b      	ldr	r3, [r3, #0]
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	370c      	adds	r7, #12
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr

08008e9a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	b086      	sub	sp, #24
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	60f8      	str	r0, [r7, #12]
 8008ea2:	607a      	str	r2, [r7, #4]
 8008ea4:	603b      	str	r3, [r7, #0]
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008eaa:	7afb      	ldrb	r3, [r7, #11]
 8008eac:	f003 020f 	and.w	r2, r3, #15
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	00db      	lsls	r3, r3, #3
 8008eb4:	4413      	add	r3, r2
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	3338      	adds	r3, #56	; 0x38
 8008eba:	68fa      	ldr	r2, [r7, #12]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	3304      	adds	r3, #4
 8008ec0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	683a      	ldr	r2, [r7, #0]
 8008ecc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008eda:	7afb      	ldrb	r3, [r7, #11]
 8008edc:	f003 030f 	and.w	r3, r3, #15
 8008ee0:	b2da      	uxtb	r2, r3
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d102      	bne.n	8008ef4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6818      	ldr	r0, [r3, #0]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	461a      	mov	r2, r3
 8008f00:	6979      	ldr	r1, [r7, #20]
 8008f02:	f00a f905 	bl	8013110 <USB_EPStartXfer>

  return HAL_OK;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3718      	adds	r7, #24
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	460b      	mov	r3, r1
 8008f1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008f1c:	78fb      	ldrb	r3, [r7, #3]
 8008f1e:	f003 020f 	and.w	r2, r3, #15
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d901      	bls.n	8008f2e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e050      	b.n	8008fd0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008f2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	da0f      	bge.n	8008f56 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f36:	78fb      	ldrb	r3, [r7, #3]
 8008f38:	f003 020f 	and.w	r2, r3, #15
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	00db      	lsls	r3, r3, #3
 8008f40:	4413      	add	r3, r2
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	3338      	adds	r3, #56	; 0x38
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	4413      	add	r3, r2
 8008f4a:	3304      	adds	r3, #4
 8008f4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2201      	movs	r2, #1
 8008f52:	705a      	strb	r2, [r3, #1]
 8008f54:	e00d      	b.n	8008f72 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008f56:	78fa      	ldrb	r2, [r7, #3]
 8008f58:	4613      	mov	r3, r2
 8008f5a:	00db      	lsls	r3, r3, #3
 8008f5c:	4413      	add	r3, r2
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	4413      	add	r3, r2
 8008f68:	3304      	adds	r3, #4
 8008f6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2201      	movs	r2, #1
 8008f76:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f78:	78fb      	ldrb	r3, [r7, #3]
 8008f7a:	f003 030f 	and.w	r3, r3, #15
 8008f7e:	b2da      	uxtb	r2, r3
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d101      	bne.n	8008f92 <HAL_PCD_EP_SetStall+0x82>
 8008f8e:	2302      	movs	r3, #2
 8008f90:	e01e      	b.n	8008fd0 <HAL_PCD_EP_SetStall+0xc0>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2201      	movs	r2, #1
 8008f96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68f9      	ldr	r1, [r7, #12]
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f00a fc95 	bl	80138d0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008fa6:	78fb      	ldrb	r3, [r7, #3]
 8008fa8:	f003 030f 	and.w	r3, r3, #15
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10a      	bne.n	8008fc6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6818      	ldr	r0, [r3, #0]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	b2d9      	uxtb	r1, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	f00a fe87 	bl	8013cd4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008fe4:	78fb      	ldrb	r3, [r7, #3]
 8008fe6:	f003 020f 	and.w	r2, r3, #15
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d901      	bls.n	8008ff6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e042      	b.n	800907c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008ff6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	da0f      	bge.n	800901e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ffe:	78fb      	ldrb	r3, [r7, #3]
 8009000:	f003 020f 	and.w	r2, r3, #15
 8009004:	4613      	mov	r3, r2
 8009006:	00db      	lsls	r3, r3, #3
 8009008:	4413      	add	r3, r2
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	3338      	adds	r3, #56	; 0x38
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	4413      	add	r3, r2
 8009012:	3304      	adds	r3, #4
 8009014:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2201      	movs	r2, #1
 800901a:	705a      	strb	r2, [r3, #1]
 800901c:	e00f      	b.n	800903e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800901e:	78fb      	ldrb	r3, [r7, #3]
 8009020:	f003 020f 	and.w	r2, r3, #15
 8009024:	4613      	mov	r3, r2
 8009026:	00db      	lsls	r3, r3, #3
 8009028:	4413      	add	r3, r2
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	4413      	add	r3, r2
 8009034:	3304      	adds	r3, #4
 8009036:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2200      	movs	r2, #0
 800903c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2200      	movs	r2, #0
 8009042:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009044:	78fb      	ldrb	r3, [r7, #3]
 8009046:	f003 030f 	and.w	r3, r3, #15
 800904a:	b2da      	uxtb	r2, r3
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009056:	2b01      	cmp	r3, #1
 8009058:	d101      	bne.n	800905e <HAL_PCD_EP_ClrStall+0x86>
 800905a:	2302      	movs	r3, #2
 800905c:	e00e      	b.n	800907c <HAL_PCD_EP_ClrStall+0xa4>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2201      	movs	r2, #1
 8009062:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	68f9      	ldr	r1, [r7, #12]
 800906c:	4618      	mov	r0, r3
 800906e:	f00a fc9d 	bl	80139ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	460b      	mov	r3, r1
 800908e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009090:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009094:	2b00      	cmp	r3, #0
 8009096:	da0c      	bge.n	80090b2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009098:	78fb      	ldrb	r3, [r7, #3]
 800909a:	f003 020f 	and.w	r2, r3, #15
 800909e:	4613      	mov	r3, r2
 80090a0:	00db      	lsls	r3, r3, #3
 80090a2:	4413      	add	r3, r2
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	3338      	adds	r3, #56	; 0x38
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	4413      	add	r3, r2
 80090ac:	3304      	adds	r3, #4
 80090ae:	60fb      	str	r3, [r7, #12]
 80090b0:	e00c      	b.n	80090cc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80090b2:	78fb      	ldrb	r3, [r7, #3]
 80090b4:	f003 020f 	and.w	r2, r3, #15
 80090b8:	4613      	mov	r3, r2
 80090ba:	00db      	lsls	r3, r3, #3
 80090bc:	4413      	add	r3, r2
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	4413      	add	r3, r2
 80090c8:	3304      	adds	r3, #4
 80090ca:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	68f9      	ldr	r1, [r7, #12]
 80090d2:	4618      	mov	r0, r3
 80090d4:	f00a fabc 	bl	8013650 <USB_EPStopXfer>
 80090d8:	4603      	mov	r3, r0
 80090da:	72fb      	strb	r3, [r7, #11]

  return ret;
 80090dc:	7afb      	ldrb	r3, [r7, #11]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b08a      	sub	sp, #40	; 0x28
 80090ea:	af02      	add	r7, sp, #8
 80090ec:	6078      	str	r0, [r7, #4]
 80090ee:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80090fa:	683a      	ldr	r2, [r7, #0]
 80090fc:	4613      	mov	r3, r2
 80090fe:	00db      	lsls	r3, r3, #3
 8009100:	4413      	add	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	3338      	adds	r3, #56	; 0x38
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	4413      	add	r3, r2
 800910a:	3304      	adds	r3, #4
 800910c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	695a      	ldr	r2, [r3, #20]
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	429a      	cmp	r2, r3
 8009118:	d901      	bls.n	800911e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	e06c      	b.n	80091f8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	691a      	ldr	r2, [r3, #16]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	695b      	ldr	r3, [r3, #20]
 8009126:	1ad3      	subs	r3, r2, r3
 8009128:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	69fa      	ldr	r2, [r7, #28]
 8009130:	429a      	cmp	r2, r3
 8009132:	d902      	bls.n	800913a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	3303      	adds	r3, #3
 800913e:	089b      	lsrs	r3, r3, #2
 8009140:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009142:	e02b      	b.n	800919c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	691a      	ldr	r2, [r3, #16]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	695b      	ldr	r3, [r3, #20]
 800914c:	1ad3      	subs	r3, r2, r3
 800914e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	69fa      	ldr	r2, [r7, #28]
 8009156:	429a      	cmp	r2, r3
 8009158:	d902      	bls.n	8009160 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	3303      	adds	r3, #3
 8009164:	089b      	lsrs	r3, r3, #2
 8009166:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	68d9      	ldr	r1, [r3, #12]
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	b2da      	uxtb	r2, r3
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009178:	b2db      	uxtb	r3, r3
 800917a:	9300      	str	r3, [sp, #0]
 800917c:	4603      	mov	r3, r0
 800917e:	6978      	ldr	r0, [r7, #20]
 8009180:	f00a fb10 	bl	80137a4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	68da      	ldr	r2, [r3, #12]
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	441a      	add	r2, r3
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	695a      	ldr	r2, [r3, #20]
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	441a      	add	r2, r3
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	015a      	lsls	r2, r3, #5
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	4413      	add	r3, r2
 80091a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a8:	699b      	ldr	r3, [r3, #24]
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	69ba      	ldr	r2, [r7, #24]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d809      	bhi.n	80091c6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	695a      	ldr	r2, [r3, #20]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d203      	bcs.n	80091c6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	691b      	ldr	r3, [r3, #16]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d1be      	bne.n	8009144 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	691a      	ldr	r2, [r3, #16]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	695b      	ldr	r3, [r3, #20]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d811      	bhi.n	80091f6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	f003 030f 	and.w	r3, r3, #15
 80091d8:	2201      	movs	r2, #1
 80091da:	fa02 f303 	lsl.w	r3, r2, r3
 80091de:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	43db      	mvns	r3, r3
 80091ec:	6939      	ldr	r1, [r7, #16]
 80091ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091f2:	4013      	ands	r3, r2
 80091f4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3720      	adds	r7, #32
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b088      	sub	sp, #32
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	333c      	adds	r3, #60	; 0x3c
 8009218:	3304      	adds	r3, #4
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	015a      	lsls	r2, r3, #5
 8009222:	69bb      	ldr	r3, [r7, #24]
 8009224:	4413      	add	r3, r2
 8009226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	2b01      	cmp	r3, #1
 8009234:	d17b      	bne.n	800932e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	f003 0308 	and.w	r3, r3, #8
 800923c:	2b00      	cmp	r3, #0
 800923e:	d015      	beq.n	800926c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	4a61      	ldr	r2, [pc, #388]	; (80093c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009244:	4293      	cmp	r3, r2
 8009246:	f240 80b9 	bls.w	80093bc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009250:	2b00      	cmp	r3, #0
 8009252:	f000 80b3 	beq.w	80093bc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	015a      	lsls	r2, r3, #5
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	4413      	add	r3, r2
 800925e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009262:	461a      	mov	r2, r3
 8009264:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009268:	6093      	str	r3, [r2, #8]
 800926a:	e0a7      	b.n	80093bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	f003 0320 	and.w	r3, r3, #32
 8009272:	2b00      	cmp	r3, #0
 8009274:	d009      	beq.n	800928a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	015a      	lsls	r2, r3, #5
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	4413      	add	r3, r2
 800927e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009282:	461a      	mov	r2, r3
 8009284:	2320      	movs	r3, #32
 8009286:	6093      	str	r3, [r2, #8]
 8009288:	e098      	b.n	80093bc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009290:	2b00      	cmp	r3, #0
 8009292:	f040 8093 	bne.w	80093bc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	4a4b      	ldr	r2, [pc, #300]	; (80093c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d90f      	bls.n	80092be <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00a      	beq.n	80092be <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	015a      	lsls	r2, r3, #5
 80092ac:	69bb      	ldr	r3, [r7, #24]
 80092ae:	4413      	add	r3, r2
 80092b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092b4:	461a      	mov	r2, r3
 80092b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092ba:	6093      	str	r3, [r2, #8]
 80092bc:	e07e      	b.n	80093bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80092be:	683a      	ldr	r2, [r7, #0]
 80092c0:	4613      	mov	r3, r2
 80092c2:	00db      	lsls	r3, r3, #3
 80092c4:	4413      	add	r3, r2
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	4413      	add	r3, r2
 80092d0:	3304      	adds	r3, #4
 80092d2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6a1a      	ldr	r2, [r3, #32]
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	0159      	lsls	r1, r3, #5
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	440b      	add	r3, r1
 80092e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092ea:	1ad2      	subs	r2, r2, r3
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d114      	bne.n	8009320 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d109      	bne.n	8009312 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6818      	ldr	r0, [r3, #0]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009308:	461a      	mov	r2, r3
 800930a:	2101      	movs	r1, #1
 800930c:	f00a fce2 	bl	8013cd4 <USB_EP0_OutStart>
 8009310:	e006      	b.n	8009320 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	68da      	ldr	r2, [r3, #12]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	695b      	ldr	r3, [r3, #20]
 800931a:	441a      	add	r2, r3
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	b2db      	uxtb	r3, r3
 8009324:	4619      	mov	r1, r3
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f00d fa32 	bl	8016790 <HAL_PCD_DataOutStageCallback>
 800932c:	e046      	b.n	80093bc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	4a26      	ldr	r2, [pc, #152]	; (80093cc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d124      	bne.n	8009380 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00a      	beq.n	8009356 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	015a      	lsls	r2, r3, #5
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	4413      	add	r3, r2
 8009348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800934c:	461a      	mov	r2, r3
 800934e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009352:	6093      	str	r3, [r2, #8]
 8009354:	e032      	b.n	80093bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	f003 0320 	and.w	r3, r3, #32
 800935c:	2b00      	cmp	r3, #0
 800935e:	d008      	beq.n	8009372 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	015a      	lsls	r2, r3, #5
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	4413      	add	r3, r2
 8009368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800936c:	461a      	mov	r2, r3
 800936e:	2320      	movs	r3, #32
 8009370:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	b2db      	uxtb	r3, r3
 8009376:	4619      	mov	r1, r3
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f00d fa09 	bl	8016790 <HAL_PCD_DataOutStageCallback>
 800937e:	e01d      	b.n	80093bc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d114      	bne.n	80093b0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8009386:	6879      	ldr	r1, [r7, #4]
 8009388:	683a      	ldr	r2, [r7, #0]
 800938a:	4613      	mov	r3, r2
 800938c:	00db      	lsls	r3, r3, #3
 800938e:	4413      	add	r3, r2
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	440b      	add	r3, r1
 8009394:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d108      	bne.n	80093b0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6818      	ldr	r0, [r3, #0]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80093a8:	461a      	mov	r2, r3
 80093aa:	2100      	movs	r1, #0
 80093ac:	f00a fc92 	bl	8013cd4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	4619      	mov	r1, r3
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f00d f9ea 	bl	8016790 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80093bc:	2300      	movs	r3, #0
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3720      	adds	r7, #32
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	4f54300a 	.word	0x4f54300a
 80093cc:	4f54310a 	.word	0x4f54310a

080093d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b086      	sub	sp, #24
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	333c      	adds	r3, #60	; 0x3c
 80093e8:	3304      	adds	r3, #4
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	015a      	lsls	r2, r3, #5
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	4413      	add	r3, r2
 80093f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	4a15      	ldr	r2, [pc, #84]	; (8009458 <PCD_EP_OutSetupPacket_int+0x88>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d90e      	bls.n	8009424 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800940c:	2b00      	cmp	r3, #0
 800940e:	d009      	beq.n	8009424 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	015a      	lsls	r2, r3, #5
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	4413      	add	r3, r2
 8009418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800941c:	461a      	mov	r2, r3
 800941e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009422:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f00d f9a1 	bl	801676c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	4a0a      	ldr	r2, [pc, #40]	; (8009458 <PCD_EP_OutSetupPacket_int+0x88>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d90c      	bls.n	800944c <PCD_EP_OutSetupPacket_int+0x7c>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	2b01      	cmp	r3, #1
 8009438:	d108      	bne.n	800944c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6818      	ldr	r0, [r3, #0]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009444:	461a      	mov	r2, r3
 8009446:	2101      	movs	r1, #1
 8009448:	f00a fc44 	bl	8013cd4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	3718      	adds	r7, #24
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	4f54300a 	.word	0x4f54300a

0800945c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	460b      	mov	r3, r1
 8009466:	70fb      	strb	r3, [r7, #3]
 8009468:	4613      	mov	r3, r2
 800946a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009472:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009474:	78fb      	ldrb	r3, [r7, #3]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d107      	bne.n	800948a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800947a:	883b      	ldrh	r3, [r7, #0]
 800947c:	0419      	lsls	r1, r3, #16
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68ba      	ldr	r2, [r7, #8]
 8009484:	430a      	orrs	r2, r1
 8009486:	629a      	str	r2, [r3, #40]	; 0x28
 8009488:	e028      	b.n	80094dc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009490:	0c1b      	lsrs	r3, r3, #16
 8009492:	68ba      	ldr	r2, [r7, #8]
 8009494:	4413      	add	r3, r2
 8009496:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009498:	2300      	movs	r3, #0
 800949a:	73fb      	strb	r3, [r7, #15]
 800949c:	e00d      	b.n	80094ba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	7bfb      	ldrb	r3, [r7, #15]
 80094a4:	3340      	adds	r3, #64	; 0x40
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	4413      	add	r3, r2
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	0c1b      	lsrs	r3, r3, #16
 80094ae:	68ba      	ldr	r2, [r7, #8]
 80094b0:	4413      	add	r3, r2
 80094b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80094b4:	7bfb      	ldrb	r3, [r7, #15]
 80094b6:	3301      	adds	r3, #1
 80094b8:	73fb      	strb	r3, [r7, #15]
 80094ba:	7bfa      	ldrb	r2, [r7, #15]
 80094bc:	78fb      	ldrb	r3, [r7, #3]
 80094be:	3b01      	subs	r3, #1
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d3ec      	bcc.n	800949e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80094c4:	883b      	ldrh	r3, [r7, #0]
 80094c6:	0418      	lsls	r0, r3, #16
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6819      	ldr	r1, [r3, #0]
 80094cc:	78fb      	ldrb	r3, [r7, #3]
 80094ce:	3b01      	subs	r3, #1
 80094d0:	68ba      	ldr	r2, [r7, #8]
 80094d2:	4302      	orrs	r2, r0
 80094d4:	3340      	adds	r3, #64	; 0x40
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	440b      	add	r3, r1
 80094da:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3714      	adds	r7, #20
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr

080094ea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80094ea:	b480      	push	{r7}
 80094ec:	b083      	sub	sp, #12
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
 80094f2:	460b      	mov	r3, r1
 80094f4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	887a      	ldrh	r2, [r7, #2]
 80094fc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80094fe:	2300      	movs	r3, #0
}
 8009500:	4618      	mov	r0, r3
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2201      	movs	r2, #1
 800951e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	699b      	ldr	r3, [r3, #24]
 800952e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800953a:	4b05      	ldr	r3, [pc, #20]	; (8009550 <HAL_PCDEx_ActivateLPM+0x44>)
 800953c:	4313      	orrs	r3, r2
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3714      	adds	r7, #20
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr
 8009550:	10000003 	.word	0x10000003

08009554 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	460b      	mov	r3, r1
 800955e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009560:	bf00      	nop
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009574:	4b19      	ldr	r3, [pc, #100]	; (80095dc <HAL_PWREx_ConfigSupply+0x70>)
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	f003 0304 	and.w	r3, r3, #4
 800957c:	2b04      	cmp	r3, #4
 800957e:	d00a      	beq.n	8009596 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009580:	4b16      	ldr	r3, [pc, #88]	; (80095dc <HAL_PWREx_ConfigSupply+0x70>)
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	f003 0307 	and.w	r3, r3, #7
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	429a      	cmp	r2, r3
 800958c:	d001      	beq.n	8009592 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	e01f      	b.n	80095d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009592:	2300      	movs	r3, #0
 8009594:	e01d      	b.n	80095d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009596:	4b11      	ldr	r3, [pc, #68]	; (80095dc <HAL_PWREx_ConfigSupply+0x70>)
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	f023 0207 	bic.w	r2, r3, #7
 800959e:	490f      	ldr	r1, [pc, #60]	; (80095dc <HAL_PWREx_ConfigSupply+0x70>)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4313      	orrs	r3, r2
 80095a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80095a6:	f7fa f927 	bl	80037f8 <HAL_GetTick>
 80095aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80095ac:	e009      	b.n	80095c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80095ae:	f7fa f923 	bl	80037f8 <HAL_GetTick>
 80095b2:	4602      	mov	r2, r0
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	1ad3      	subs	r3, r2, r3
 80095b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095bc:	d901      	bls.n	80095c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	e007      	b.n	80095d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80095c2:	4b06      	ldr	r3, [pc, #24]	; (80095dc <HAL_PWREx_ConfigSupply+0x70>)
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095ce:	d1ee      	bne.n	80095ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3710      	adds	r7, #16
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	58024800 	.word	0x58024800

080095e0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80095e0:	b480      	push	{r7}
 80095e2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80095e4:	4b05      	ldr	r3, [pc, #20]	; (80095fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	4a04      	ldr	r2, [pc, #16]	; (80095fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80095ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80095ee:	60d3      	str	r3, [r2, #12]
}
 80095f0:	bf00      	nop
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr
 80095fa:	bf00      	nop
 80095fc:	58024800 	.word	0x58024800

08009600 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b08c      	sub	sp, #48	; 0x30
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d101      	bne.n	8009612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	e3c8      	b.n	8009da4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f003 0301 	and.w	r3, r3, #1
 800961a:	2b00      	cmp	r3, #0
 800961c:	f000 8087 	beq.w	800972e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009620:	4b88      	ldr	r3, [pc, #544]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 8009622:	691b      	ldr	r3, [r3, #16]
 8009624:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009628:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800962a:	4b86      	ldr	r3, [pc, #536]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 800962c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800962e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009632:	2b10      	cmp	r3, #16
 8009634:	d007      	beq.n	8009646 <HAL_RCC_OscConfig+0x46>
 8009636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009638:	2b18      	cmp	r3, #24
 800963a:	d110      	bne.n	800965e <HAL_RCC_OscConfig+0x5e>
 800963c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963e:	f003 0303 	and.w	r3, r3, #3
 8009642:	2b02      	cmp	r3, #2
 8009644:	d10b      	bne.n	800965e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009646:	4b7f      	ldr	r3, [pc, #508]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800964e:	2b00      	cmp	r3, #0
 8009650:	d06c      	beq.n	800972c <HAL_RCC_OscConfig+0x12c>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d168      	bne.n	800972c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	e3a2      	b.n	8009da4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009666:	d106      	bne.n	8009676 <HAL_RCC_OscConfig+0x76>
 8009668:	4b76      	ldr	r3, [pc, #472]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a75      	ldr	r2, [pc, #468]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 800966e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009672:	6013      	str	r3, [r2, #0]
 8009674:	e02e      	b.n	80096d4 <HAL_RCC_OscConfig+0xd4>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d10c      	bne.n	8009698 <HAL_RCC_OscConfig+0x98>
 800967e:	4b71      	ldr	r3, [pc, #452]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a70      	ldr	r2, [pc, #448]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 8009684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009688:	6013      	str	r3, [r2, #0]
 800968a:	4b6e      	ldr	r3, [pc, #440]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a6d      	ldr	r2, [pc, #436]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 8009690:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009694:	6013      	str	r3, [r2, #0]
 8009696:	e01d      	b.n	80096d4 <HAL_RCC_OscConfig+0xd4>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096a0:	d10c      	bne.n	80096bc <HAL_RCC_OscConfig+0xbc>
 80096a2:	4b68      	ldr	r3, [pc, #416]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a67      	ldr	r2, [pc, #412]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 80096a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80096ac:	6013      	str	r3, [r2, #0]
 80096ae:	4b65      	ldr	r3, [pc, #404]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a64      	ldr	r2, [pc, #400]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 80096b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096b8:	6013      	str	r3, [r2, #0]
 80096ba:	e00b      	b.n	80096d4 <HAL_RCC_OscConfig+0xd4>
 80096bc:	4b61      	ldr	r3, [pc, #388]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4a60      	ldr	r2, [pc, #384]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 80096c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096c6:	6013      	str	r3, [r2, #0]
 80096c8:	4b5e      	ldr	r3, [pc, #376]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a5d      	ldr	r2, [pc, #372]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 80096ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80096d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d013      	beq.n	8009704 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096dc:	f7fa f88c 	bl	80037f8 <HAL_GetTick>
 80096e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80096e2:	e008      	b.n	80096f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80096e4:	f7fa f888 	bl	80037f8 <HAL_GetTick>
 80096e8:	4602      	mov	r2, r0
 80096ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ec:	1ad3      	subs	r3, r2, r3
 80096ee:	2b64      	cmp	r3, #100	; 0x64
 80096f0:	d901      	bls.n	80096f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80096f2:	2303      	movs	r3, #3
 80096f4:	e356      	b.n	8009da4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80096f6:	4b53      	ldr	r3, [pc, #332]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d0f0      	beq.n	80096e4 <HAL_RCC_OscConfig+0xe4>
 8009702:	e014      	b.n	800972e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009704:	f7fa f878 	bl	80037f8 <HAL_GetTick>
 8009708:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800970a:	e008      	b.n	800971e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800970c:	f7fa f874 	bl	80037f8 <HAL_GetTick>
 8009710:	4602      	mov	r2, r0
 8009712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009714:	1ad3      	subs	r3, r2, r3
 8009716:	2b64      	cmp	r3, #100	; 0x64
 8009718:	d901      	bls.n	800971e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800971a:	2303      	movs	r3, #3
 800971c:	e342      	b.n	8009da4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800971e:	4b49      	ldr	r3, [pc, #292]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009726:	2b00      	cmp	r3, #0
 8009728:	d1f0      	bne.n	800970c <HAL_RCC_OscConfig+0x10c>
 800972a:	e000      	b.n	800972e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800972c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f003 0302 	and.w	r3, r3, #2
 8009736:	2b00      	cmp	r3, #0
 8009738:	f000 808c 	beq.w	8009854 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800973c:	4b41      	ldr	r3, [pc, #260]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009744:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009746:	4b3f      	ldr	r3, [pc, #252]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 8009748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800974a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800974c:	6a3b      	ldr	r3, [r7, #32]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d007      	beq.n	8009762 <HAL_RCC_OscConfig+0x162>
 8009752:	6a3b      	ldr	r3, [r7, #32]
 8009754:	2b18      	cmp	r3, #24
 8009756:	d137      	bne.n	80097c8 <HAL_RCC_OscConfig+0x1c8>
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	f003 0303 	and.w	r3, r3, #3
 800975e:	2b00      	cmp	r3, #0
 8009760:	d132      	bne.n	80097c8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009762:	4b38      	ldr	r3, [pc, #224]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f003 0304 	and.w	r3, r3, #4
 800976a:	2b00      	cmp	r3, #0
 800976c:	d005      	beq.n	800977a <HAL_RCC_OscConfig+0x17a>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d101      	bne.n	800977a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009776:	2301      	movs	r3, #1
 8009778:	e314      	b.n	8009da4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800977a:	4b32      	ldr	r3, [pc, #200]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f023 0219 	bic.w	r2, r3, #25
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	492f      	ldr	r1, [pc, #188]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 8009788:	4313      	orrs	r3, r2
 800978a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800978c:	f7fa f834 	bl	80037f8 <HAL_GetTick>
 8009790:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009792:	e008      	b.n	80097a6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009794:	f7fa f830 	bl	80037f8 <HAL_GetTick>
 8009798:	4602      	mov	r2, r0
 800979a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979c:	1ad3      	subs	r3, r2, r3
 800979e:	2b02      	cmp	r3, #2
 80097a0:	d901      	bls.n	80097a6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80097a2:	2303      	movs	r3, #3
 80097a4:	e2fe      	b.n	8009da4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80097a6:	4b27      	ldr	r3, [pc, #156]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f003 0304 	and.w	r3, r3, #4
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d0f0      	beq.n	8009794 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097b2:	4b24      	ldr	r3, [pc, #144]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	061b      	lsls	r3, r3, #24
 80097c0:	4920      	ldr	r1, [pc, #128]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 80097c2:	4313      	orrs	r3, r2
 80097c4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80097c6:	e045      	b.n	8009854 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d026      	beq.n	800981e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80097d0:	4b1c      	ldr	r3, [pc, #112]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f023 0219 	bic.w	r2, r3, #25
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	4919      	ldr	r1, [pc, #100]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 80097de:	4313      	orrs	r3, r2
 80097e0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097e2:	f7fa f809 	bl	80037f8 <HAL_GetTick>
 80097e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80097e8:	e008      	b.n	80097fc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80097ea:	f7fa f805 	bl	80037f8 <HAL_GetTick>
 80097ee:	4602      	mov	r2, r0
 80097f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f2:	1ad3      	subs	r3, r2, r3
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	d901      	bls.n	80097fc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80097f8:	2303      	movs	r3, #3
 80097fa:	e2d3      	b.n	8009da4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80097fc:	4b11      	ldr	r3, [pc, #68]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f003 0304 	and.w	r3, r3, #4
 8009804:	2b00      	cmp	r3, #0
 8009806:	d0f0      	beq.n	80097ea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009808:	4b0e      	ldr	r3, [pc, #56]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	691b      	ldr	r3, [r3, #16]
 8009814:	061b      	lsls	r3, r3, #24
 8009816:	490b      	ldr	r1, [pc, #44]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 8009818:	4313      	orrs	r3, r2
 800981a:	604b      	str	r3, [r1, #4]
 800981c:	e01a      	b.n	8009854 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800981e:	4b09      	ldr	r3, [pc, #36]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a08      	ldr	r2, [pc, #32]	; (8009844 <HAL_RCC_OscConfig+0x244>)
 8009824:	f023 0301 	bic.w	r3, r3, #1
 8009828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800982a:	f7f9 ffe5 	bl	80037f8 <HAL_GetTick>
 800982e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009830:	e00a      	b.n	8009848 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009832:	f7f9 ffe1 	bl	80037f8 <HAL_GetTick>
 8009836:	4602      	mov	r2, r0
 8009838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	2b02      	cmp	r3, #2
 800983e:	d903      	bls.n	8009848 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009840:	2303      	movs	r3, #3
 8009842:	e2af      	b.n	8009da4 <HAL_RCC_OscConfig+0x7a4>
 8009844:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009848:	4b96      	ldr	r3, [pc, #600]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f003 0304 	and.w	r3, r3, #4
 8009850:	2b00      	cmp	r3, #0
 8009852:	d1ee      	bne.n	8009832 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 0310 	and.w	r3, r3, #16
 800985c:	2b00      	cmp	r3, #0
 800985e:	d06a      	beq.n	8009936 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009860:	4b90      	ldr	r3, [pc, #576]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 8009862:	691b      	ldr	r3, [r3, #16]
 8009864:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009868:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800986a:	4b8e      	ldr	r3, [pc, #568]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 800986c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800986e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	2b08      	cmp	r3, #8
 8009874:	d007      	beq.n	8009886 <HAL_RCC_OscConfig+0x286>
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	2b18      	cmp	r3, #24
 800987a:	d11b      	bne.n	80098b4 <HAL_RCC_OscConfig+0x2b4>
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	f003 0303 	and.w	r3, r3, #3
 8009882:	2b01      	cmp	r3, #1
 8009884:	d116      	bne.n	80098b4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009886:	4b87      	ldr	r3, [pc, #540]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800988e:	2b00      	cmp	r3, #0
 8009890:	d005      	beq.n	800989e <HAL_RCC_OscConfig+0x29e>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	69db      	ldr	r3, [r3, #28]
 8009896:	2b80      	cmp	r3, #128	; 0x80
 8009898:	d001      	beq.n	800989e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	e282      	b.n	8009da4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800989e:	4b81      	ldr	r3, [pc, #516]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6a1b      	ldr	r3, [r3, #32]
 80098aa:	061b      	lsls	r3, r3, #24
 80098ac:	497d      	ldr	r1, [pc, #500]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 80098ae:	4313      	orrs	r3, r2
 80098b0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80098b2:	e040      	b.n	8009936 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	69db      	ldr	r3, [r3, #28]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d023      	beq.n	8009904 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80098bc:	4b79      	ldr	r3, [pc, #484]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a78      	ldr	r2, [pc, #480]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 80098c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098c8:	f7f9 ff96 	bl	80037f8 <HAL_GetTick>
 80098cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80098ce:	e008      	b.n	80098e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80098d0:	f7f9 ff92 	bl	80037f8 <HAL_GetTick>
 80098d4:	4602      	mov	r2, r0
 80098d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d8:	1ad3      	subs	r3, r2, r3
 80098da:	2b02      	cmp	r3, #2
 80098dc:	d901      	bls.n	80098e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80098de:	2303      	movs	r3, #3
 80098e0:	e260      	b.n	8009da4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80098e2:	4b70      	ldr	r3, [pc, #448]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d0f0      	beq.n	80098d0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80098ee:	4b6d      	ldr	r3, [pc, #436]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6a1b      	ldr	r3, [r3, #32]
 80098fa:	061b      	lsls	r3, r3, #24
 80098fc:	4969      	ldr	r1, [pc, #420]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 80098fe:	4313      	orrs	r3, r2
 8009900:	60cb      	str	r3, [r1, #12]
 8009902:	e018      	b.n	8009936 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009904:	4b67      	ldr	r3, [pc, #412]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a66      	ldr	r2, [pc, #408]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 800990a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800990e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009910:	f7f9 ff72 	bl	80037f8 <HAL_GetTick>
 8009914:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009916:	e008      	b.n	800992a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009918:	f7f9 ff6e 	bl	80037f8 <HAL_GetTick>
 800991c:	4602      	mov	r2, r0
 800991e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009920:	1ad3      	subs	r3, r2, r3
 8009922:	2b02      	cmp	r3, #2
 8009924:	d901      	bls.n	800992a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009926:	2303      	movs	r3, #3
 8009928:	e23c      	b.n	8009da4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800992a:	4b5e      	ldr	r3, [pc, #376]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1f0      	bne.n	8009918 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f003 0308 	and.w	r3, r3, #8
 800993e:	2b00      	cmp	r3, #0
 8009940:	d036      	beq.n	80099b0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	695b      	ldr	r3, [r3, #20]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d019      	beq.n	800997e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800994a:	4b56      	ldr	r3, [pc, #344]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 800994c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800994e:	4a55      	ldr	r2, [pc, #340]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 8009950:	f043 0301 	orr.w	r3, r3, #1
 8009954:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009956:	f7f9 ff4f 	bl	80037f8 <HAL_GetTick>
 800995a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800995c:	e008      	b.n	8009970 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800995e:	f7f9 ff4b 	bl	80037f8 <HAL_GetTick>
 8009962:	4602      	mov	r2, r0
 8009964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009966:	1ad3      	subs	r3, r2, r3
 8009968:	2b02      	cmp	r3, #2
 800996a:	d901      	bls.n	8009970 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800996c:	2303      	movs	r3, #3
 800996e:	e219      	b.n	8009da4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009970:	4b4c      	ldr	r3, [pc, #304]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 8009972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009974:	f003 0302 	and.w	r3, r3, #2
 8009978:	2b00      	cmp	r3, #0
 800997a:	d0f0      	beq.n	800995e <HAL_RCC_OscConfig+0x35e>
 800997c:	e018      	b.n	80099b0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800997e:	4b49      	ldr	r3, [pc, #292]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 8009980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009982:	4a48      	ldr	r2, [pc, #288]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 8009984:	f023 0301 	bic.w	r3, r3, #1
 8009988:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800998a:	f7f9 ff35 	bl	80037f8 <HAL_GetTick>
 800998e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009990:	e008      	b.n	80099a4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009992:	f7f9 ff31 	bl	80037f8 <HAL_GetTick>
 8009996:	4602      	mov	r2, r0
 8009998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999a:	1ad3      	subs	r3, r2, r3
 800999c:	2b02      	cmp	r3, #2
 800999e:	d901      	bls.n	80099a4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80099a0:	2303      	movs	r3, #3
 80099a2:	e1ff      	b.n	8009da4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80099a4:	4b3f      	ldr	r3, [pc, #252]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 80099a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099a8:	f003 0302 	and.w	r3, r3, #2
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d1f0      	bne.n	8009992 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f003 0320 	and.w	r3, r3, #32
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d036      	beq.n	8009a2a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	699b      	ldr	r3, [r3, #24]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d019      	beq.n	80099f8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80099c4:	4b37      	ldr	r3, [pc, #220]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a36      	ldr	r2, [pc, #216]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 80099ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80099ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80099d0:	f7f9 ff12 	bl	80037f8 <HAL_GetTick>
 80099d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80099d6:	e008      	b.n	80099ea <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80099d8:	f7f9 ff0e 	bl	80037f8 <HAL_GetTick>
 80099dc:	4602      	mov	r2, r0
 80099de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e0:	1ad3      	subs	r3, r2, r3
 80099e2:	2b02      	cmp	r3, #2
 80099e4:	d901      	bls.n	80099ea <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80099e6:	2303      	movs	r3, #3
 80099e8:	e1dc      	b.n	8009da4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80099ea:	4b2e      	ldr	r3, [pc, #184]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d0f0      	beq.n	80099d8 <HAL_RCC_OscConfig+0x3d8>
 80099f6:	e018      	b.n	8009a2a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80099f8:	4b2a      	ldr	r3, [pc, #168]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a29      	ldr	r2, [pc, #164]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 80099fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a02:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009a04:	f7f9 fef8 	bl	80037f8 <HAL_GetTick>
 8009a08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009a0a:	e008      	b.n	8009a1e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009a0c:	f7f9 fef4 	bl	80037f8 <HAL_GetTick>
 8009a10:	4602      	mov	r2, r0
 8009a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a14:	1ad3      	subs	r3, r2, r3
 8009a16:	2b02      	cmp	r3, #2
 8009a18:	d901      	bls.n	8009a1e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009a1a:	2303      	movs	r3, #3
 8009a1c:	e1c2      	b.n	8009da4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009a1e:	4b21      	ldr	r3, [pc, #132]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1f0      	bne.n	8009a0c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f003 0304 	and.w	r3, r3, #4
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f000 8086 	beq.w	8009b44 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009a38:	4b1b      	ldr	r3, [pc, #108]	; (8009aa8 <HAL_RCC_OscConfig+0x4a8>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a1a      	ldr	r2, [pc, #104]	; (8009aa8 <HAL_RCC_OscConfig+0x4a8>)
 8009a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009a44:	f7f9 fed8 	bl	80037f8 <HAL_GetTick>
 8009a48:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a4a:	e008      	b.n	8009a5e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a4c:	f7f9 fed4 	bl	80037f8 <HAL_GetTick>
 8009a50:	4602      	mov	r2, r0
 8009a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	2b64      	cmp	r3, #100	; 0x64
 8009a58:	d901      	bls.n	8009a5e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009a5a:	2303      	movs	r3, #3
 8009a5c:	e1a2      	b.n	8009da4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a5e:	4b12      	ldr	r3, [pc, #72]	; (8009aa8 <HAL_RCC_OscConfig+0x4a8>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d0f0      	beq.n	8009a4c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d106      	bne.n	8009a80 <HAL_RCC_OscConfig+0x480>
 8009a72:	4b0c      	ldr	r3, [pc, #48]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 8009a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a76:	4a0b      	ldr	r2, [pc, #44]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 8009a78:	f043 0301 	orr.w	r3, r3, #1
 8009a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8009a7e:	e032      	b.n	8009ae6 <HAL_RCC_OscConfig+0x4e6>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d111      	bne.n	8009aac <HAL_RCC_OscConfig+0x4ac>
 8009a88:	4b06      	ldr	r3, [pc, #24]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 8009a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a8c:	4a05      	ldr	r2, [pc, #20]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 8009a8e:	f023 0301 	bic.w	r3, r3, #1
 8009a92:	6713      	str	r3, [r2, #112]	; 0x70
 8009a94:	4b03      	ldr	r3, [pc, #12]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 8009a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a98:	4a02      	ldr	r2, [pc, #8]	; (8009aa4 <HAL_RCC_OscConfig+0x4a4>)
 8009a9a:	f023 0304 	bic.w	r3, r3, #4
 8009a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8009aa0:	e021      	b.n	8009ae6 <HAL_RCC_OscConfig+0x4e6>
 8009aa2:	bf00      	nop
 8009aa4:	58024400 	.word	0x58024400
 8009aa8:	58024800 	.word	0x58024800
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	2b05      	cmp	r3, #5
 8009ab2:	d10c      	bne.n	8009ace <HAL_RCC_OscConfig+0x4ce>
 8009ab4:	4b83      	ldr	r3, [pc, #524]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ab8:	4a82      	ldr	r2, [pc, #520]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009aba:	f043 0304 	orr.w	r3, r3, #4
 8009abe:	6713      	str	r3, [r2, #112]	; 0x70
 8009ac0:	4b80      	ldr	r3, [pc, #512]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ac4:	4a7f      	ldr	r2, [pc, #508]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009ac6:	f043 0301 	orr.w	r3, r3, #1
 8009aca:	6713      	str	r3, [r2, #112]	; 0x70
 8009acc:	e00b      	b.n	8009ae6 <HAL_RCC_OscConfig+0x4e6>
 8009ace:	4b7d      	ldr	r3, [pc, #500]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ad2:	4a7c      	ldr	r2, [pc, #496]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009ad4:	f023 0301 	bic.w	r3, r3, #1
 8009ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8009ada:	4b7a      	ldr	r3, [pc, #488]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ade:	4a79      	ldr	r2, [pc, #484]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009ae0:	f023 0304 	bic.w	r3, r3, #4
 8009ae4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d015      	beq.n	8009b1a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009aee:	f7f9 fe83 	bl	80037f8 <HAL_GetTick>
 8009af2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009af4:	e00a      	b.n	8009b0c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009af6:	f7f9 fe7f 	bl	80037f8 <HAL_GetTick>
 8009afa:	4602      	mov	r2, r0
 8009afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afe:	1ad3      	subs	r3, r2, r3
 8009b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d901      	bls.n	8009b0c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009b08:	2303      	movs	r3, #3
 8009b0a:	e14b      	b.n	8009da4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009b0c:	4b6d      	ldr	r3, [pc, #436]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b10:	f003 0302 	and.w	r3, r3, #2
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d0ee      	beq.n	8009af6 <HAL_RCC_OscConfig+0x4f6>
 8009b18:	e014      	b.n	8009b44 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b1a:	f7f9 fe6d 	bl	80037f8 <HAL_GetTick>
 8009b1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009b20:	e00a      	b.n	8009b38 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b22:	f7f9 fe69 	bl	80037f8 <HAL_GetTick>
 8009b26:	4602      	mov	r2, r0
 8009b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2a:	1ad3      	subs	r3, r2, r3
 8009b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d901      	bls.n	8009b38 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009b34:	2303      	movs	r3, #3
 8009b36:	e135      	b.n	8009da4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009b38:	4b62      	ldr	r3, [pc, #392]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b3c:	f003 0302 	and.w	r3, r3, #2
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d1ee      	bne.n	8009b22 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f000 812a 	beq.w	8009da2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009b4e:	4b5d      	ldr	r3, [pc, #372]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b56:	2b18      	cmp	r3, #24
 8009b58:	f000 80ba 	beq.w	8009cd0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	f040 8095 	bne.w	8009c90 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b66:	4b57      	ldr	r3, [pc, #348]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a56      	ldr	r2, [pc, #344]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009b6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b72:	f7f9 fe41 	bl	80037f8 <HAL_GetTick>
 8009b76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b78:	e008      	b.n	8009b8c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b7a:	f7f9 fe3d 	bl	80037f8 <HAL_GetTick>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b82:	1ad3      	subs	r3, r2, r3
 8009b84:	2b02      	cmp	r3, #2
 8009b86:	d901      	bls.n	8009b8c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009b88:	2303      	movs	r3, #3
 8009b8a:	e10b      	b.n	8009da4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b8c:	4b4d      	ldr	r3, [pc, #308]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d1f0      	bne.n	8009b7a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009b98:	4b4a      	ldr	r3, [pc, #296]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009b9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b9c:	4b4a      	ldr	r3, [pc, #296]	; (8009cc8 <HAL_RCC_OscConfig+0x6c8>)
 8009b9e:	4013      	ands	r3, r2
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009ba8:	0112      	lsls	r2, r2, #4
 8009baa:	430a      	orrs	r2, r1
 8009bac:	4945      	ldr	r1, [pc, #276]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	628b      	str	r3, [r1, #40]	; 0x28
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bc0:	3b01      	subs	r3, #1
 8009bc2:	025b      	lsls	r3, r3, #9
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	431a      	orrs	r2, r3
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	041b      	lsls	r3, r3, #16
 8009bd0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009bd4:	431a      	orrs	r2, r3
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	061b      	lsls	r3, r3, #24
 8009bde:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009be2:	4938      	ldr	r1, [pc, #224]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009be4:	4313      	orrs	r3, r2
 8009be6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009be8:	4b36      	ldr	r3, [pc, #216]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bec:	4a35      	ldr	r2, [pc, #212]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009bee:	f023 0301 	bic.w	r3, r3, #1
 8009bf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009bf4:	4b33      	ldr	r3, [pc, #204]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009bf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bf8:	4b34      	ldr	r3, [pc, #208]	; (8009ccc <HAL_RCC_OscConfig+0x6cc>)
 8009bfa:	4013      	ands	r3, r2
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009c00:	00d2      	lsls	r2, r2, #3
 8009c02:	4930      	ldr	r1, [pc, #192]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009c04:	4313      	orrs	r3, r2
 8009c06:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009c08:	4b2e      	ldr	r3, [pc, #184]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c0c:	f023 020c 	bic.w	r2, r3, #12
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c14:	492b      	ldr	r1, [pc, #172]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009c16:	4313      	orrs	r3, r2
 8009c18:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009c1a:	4b2a      	ldr	r3, [pc, #168]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1e:	f023 0202 	bic.w	r2, r3, #2
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c26:	4927      	ldr	r1, [pc, #156]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009c2c:	4b25      	ldr	r3, [pc, #148]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c30:	4a24      	ldr	r2, [pc, #144]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c38:	4b22      	ldr	r3, [pc, #136]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3c:	4a21      	ldr	r2, [pc, #132]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009c44:	4b1f      	ldr	r3, [pc, #124]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c48:	4a1e      	ldr	r2, [pc, #120]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009c4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009c50:	4b1c      	ldr	r3, [pc, #112]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c54:	4a1b      	ldr	r2, [pc, #108]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009c56:	f043 0301 	orr.w	r3, r3, #1
 8009c5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c5c:	4b19      	ldr	r3, [pc, #100]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a18      	ldr	r2, [pc, #96]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009c62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c68:	f7f9 fdc6 	bl	80037f8 <HAL_GetTick>
 8009c6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009c6e:	e008      	b.n	8009c82 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c70:	f7f9 fdc2 	bl	80037f8 <HAL_GetTick>
 8009c74:	4602      	mov	r2, r0
 8009c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c78:	1ad3      	subs	r3, r2, r3
 8009c7a:	2b02      	cmp	r3, #2
 8009c7c:	d901      	bls.n	8009c82 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009c7e:	2303      	movs	r3, #3
 8009c80:	e090      	b.n	8009da4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009c82:	4b10      	ldr	r3, [pc, #64]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d0f0      	beq.n	8009c70 <HAL_RCC_OscConfig+0x670>
 8009c8e:	e088      	b.n	8009da2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c90:	4b0c      	ldr	r3, [pc, #48]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a0b      	ldr	r2, [pc, #44]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009c96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c9c:	f7f9 fdac 	bl	80037f8 <HAL_GetTick>
 8009ca0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009ca2:	e008      	b.n	8009cb6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ca4:	f7f9 fda8 	bl	80037f8 <HAL_GetTick>
 8009ca8:	4602      	mov	r2, r0
 8009caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cac:	1ad3      	subs	r3, r2, r3
 8009cae:	2b02      	cmp	r3, #2
 8009cb0:	d901      	bls.n	8009cb6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009cb2:	2303      	movs	r3, #3
 8009cb4:	e076      	b.n	8009da4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009cb6:	4b03      	ldr	r3, [pc, #12]	; (8009cc4 <HAL_RCC_OscConfig+0x6c4>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d1f0      	bne.n	8009ca4 <HAL_RCC_OscConfig+0x6a4>
 8009cc2:	e06e      	b.n	8009da2 <HAL_RCC_OscConfig+0x7a2>
 8009cc4:	58024400 	.word	0x58024400
 8009cc8:	fffffc0c 	.word	0xfffffc0c
 8009ccc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009cd0:	4b36      	ldr	r3, [pc, #216]	; (8009dac <HAL_RCC_OscConfig+0x7ac>)
 8009cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cd4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009cd6:	4b35      	ldr	r3, [pc, #212]	; (8009dac <HAL_RCC_OscConfig+0x7ac>)
 8009cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cda:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d031      	beq.n	8009d48 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	f003 0203 	and.w	r2, r3, #3
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d12a      	bne.n	8009d48 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	091b      	lsrs	r3, r3, #4
 8009cf6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d122      	bne.n	8009d48 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d0c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d11a      	bne.n	8009d48 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	0a5b      	lsrs	r3, r3, #9
 8009d16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d1e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d111      	bne.n	8009d48 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	0c1b      	lsrs	r3, r3, #16
 8009d28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d30:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d108      	bne.n	8009d48 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	0e1b      	lsrs	r3, r3, #24
 8009d3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d42:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d001      	beq.n	8009d4c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	e02b      	b.n	8009da4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009d4c:	4b17      	ldr	r3, [pc, #92]	; (8009dac <HAL_RCC_OscConfig+0x7ac>)
 8009d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d50:	08db      	lsrs	r3, r3, #3
 8009d52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d56:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d5c:	693a      	ldr	r2, [r7, #16]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d01f      	beq.n	8009da2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009d62:	4b12      	ldr	r3, [pc, #72]	; (8009dac <HAL_RCC_OscConfig+0x7ac>)
 8009d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d66:	4a11      	ldr	r2, [pc, #68]	; (8009dac <HAL_RCC_OscConfig+0x7ac>)
 8009d68:	f023 0301 	bic.w	r3, r3, #1
 8009d6c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009d6e:	f7f9 fd43 	bl	80037f8 <HAL_GetTick>
 8009d72:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009d74:	bf00      	nop
 8009d76:	f7f9 fd3f 	bl	80037f8 <HAL_GetTick>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d0f9      	beq.n	8009d76 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009d82:	4b0a      	ldr	r3, [pc, #40]	; (8009dac <HAL_RCC_OscConfig+0x7ac>)
 8009d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d86:	4b0a      	ldr	r3, [pc, #40]	; (8009db0 <HAL_RCC_OscConfig+0x7b0>)
 8009d88:	4013      	ands	r3, r2
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009d8e:	00d2      	lsls	r2, r2, #3
 8009d90:	4906      	ldr	r1, [pc, #24]	; (8009dac <HAL_RCC_OscConfig+0x7ac>)
 8009d92:	4313      	orrs	r3, r2
 8009d94:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009d96:	4b05      	ldr	r3, [pc, #20]	; (8009dac <HAL_RCC_OscConfig+0x7ac>)
 8009d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9a:	4a04      	ldr	r2, [pc, #16]	; (8009dac <HAL_RCC_OscConfig+0x7ac>)
 8009d9c:	f043 0301 	orr.w	r3, r3, #1
 8009da0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009da2:	2300      	movs	r3, #0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3730      	adds	r7, #48	; 0x30
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	58024400 	.word	0x58024400
 8009db0:	ffff0007 	.word	0xffff0007

08009db4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b086      	sub	sp, #24
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d101      	bne.n	8009dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	e19c      	b.n	800a102 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009dc8:	4b8a      	ldr	r3, [pc, #552]	; (8009ff4 <HAL_RCC_ClockConfig+0x240>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f003 030f 	and.w	r3, r3, #15
 8009dd0:	683a      	ldr	r2, [r7, #0]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d910      	bls.n	8009df8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009dd6:	4b87      	ldr	r3, [pc, #540]	; (8009ff4 <HAL_RCC_ClockConfig+0x240>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f023 020f 	bic.w	r2, r3, #15
 8009dde:	4985      	ldr	r1, [pc, #532]	; (8009ff4 <HAL_RCC_ClockConfig+0x240>)
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	4313      	orrs	r3, r2
 8009de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009de6:	4b83      	ldr	r3, [pc, #524]	; (8009ff4 <HAL_RCC_ClockConfig+0x240>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f003 030f 	and.w	r3, r3, #15
 8009dee:	683a      	ldr	r2, [r7, #0]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d001      	beq.n	8009df8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009df4:	2301      	movs	r3, #1
 8009df6:	e184      	b.n	800a102 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f003 0304 	and.w	r3, r3, #4
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d010      	beq.n	8009e26 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	691a      	ldr	r2, [r3, #16]
 8009e08:	4b7b      	ldr	r3, [pc, #492]	; (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009e0a:	699b      	ldr	r3, [r3, #24]
 8009e0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d908      	bls.n	8009e26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009e14:	4b78      	ldr	r3, [pc, #480]	; (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009e16:	699b      	ldr	r3, [r3, #24]
 8009e18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	4975      	ldr	r1, [pc, #468]	; (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009e22:	4313      	orrs	r3, r2
 8009e24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f003 0308 	and.w	r3, r3, #8
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d010      	beq.n	8009e54 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	695a      	ldr	r2, [r3, #20]
 8009e36:	4b70      	ldr	r3, [pc, #448]	; (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009e38:	69db      	ldr	r3, [r3, #28]
 8009e3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d908      	bls.n	8009e54 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009e42:	4b6d      	ldr	r3, [pc, #436]	; (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009e44:	69db      	ldr	r3, [r3, #28]
 8009e46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	695b      	ldr	r3, [r3, #20]
 8009e4e:	496a      	ldr	r1, [pc, #424]	; (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009e50:	4313      	orrs	r3, r2
 8009e52:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f003 0310 	and.w	r3, r3, #16
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d010      	beq.n	8009e82 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	699a      	ldr	r2, [r3, #24]
 8009e64:	4b64      	ldr	r3, [pc, #400]	; (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009e66:	69db      	ldr	r3, [r3, #28]
 8009e68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d908      	bls.n	8009e82 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009e70:	4b61      	ldr	r3, [pc, #388]	; (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009e72:	69db      	ldr	r3, [r3, #28]
 8009e74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	699b      	ldr	r3, [r3, #24]
 8009e7c:	495e      	ldr	r1, [pc, #376]	; (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f003 0320 	and.w	r3, r3, #32
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d010      	beq.n	8009eb0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	69da      	ldr	r2, [r3, #28]
 8009e92:	4b59      	ldr	r3, [pc, #356]	; (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009e94:	6a1b      	ldr	r3, [r3, #32]
 8009e96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d908      	bls.n	8009eb0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009e9e:	4b56      	ldr	r3, [pc, #344]	; (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009ea0:	6a1b      	ldr	r3, [r3, #32]
 8009ea2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	69db      	ldr	r3, [r3, #28]
 8009eaa:	4953      	ldr	r1, [pc, #332]	; (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009eac:	4313      	orrs	r3, r2
 8009eae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f003 0302 	and.w	r3, r3, #2
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d010      	beq.n	8009ede <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	68da      	ldr	r2, [r3, #12]
 8009ec0:	4b4d      	ldr	r3, [pc, #308]	; (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009ec2:	699b      	ldr	r3, [r3, #24]
 8009ec4:	f003 030f 	and.w	r3, r3, #15
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d908      	bls.n	8009ede <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ecc:	4b4a      	ldr	r3, [pc, #296]	; (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009ece:	699b      	ldr	r3, [r3, #24]
 8009ed0:	f023 020f 	bic.w	r2, r3, #15
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	4947      	ldr	r1, [pc, #284]	; (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009eda:	4313      	orrs	r3, r2
 8009edc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f003 0301 	and.w	r3, r3, #1
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d055      	beq.n	8009f96 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009eea:	4b43      	ldr	r3, [pc, #268]	; (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009eec:	699b      	ldr	r3, [r3, #24]
 8009eee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	4940      	ldr	r1, [pc, #256]	; (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	2b02      	cmp	r3, #2
 8009f02:	d107      	bne.n	8009f14 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009f04:	4b3c      	ldr	r3, [pc, #240]	; (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d121      	bne.n	8009f54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009f10:	2301      	movs	r3, #1
 8009f12:	e0f6      	b.n	800a102 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	2b03      	cmp	r3, #3
 8009f1a:	d107      	bne.n	8009f2c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009f1c:	4b36      	ldr	r3, [pc, #216]	; (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d115      	bne.n	8009f54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e0ea      	b.n	800a102 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d107      	bne.n	8009f44 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009f34:	4b30      	ldr	r3, [pc, #192]	; (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d109      	bne.n	8009f54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009f40:	2301      	movs	r3, #1
 8009f42:	e0de      	b.n	800a102 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f44:	4b2c      	ldr	r3, [pc, #176]	; (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f003 0304 	and.w	r3, r3, #4
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d101      	bne.n	8009f54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009f50:	2301      	movs	r3, #1
 8009f52:	e0d6      	b.n	800a102 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009f54:	4b28      	ldr	r3, [pc, #160]	; (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009f56:	691b      	ldr	r3, [r3, #16]
 8009f58:	f023 0207 	bic.w	r2, r3, #7
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	4925      	ldr	r1, [pc, #148]	; (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009f62:	4313      	orrs	r3, r2
 8009f64:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f66:	f7f9 fc47 	bl	80037f8 <HAL_GetTick>
 8009f6a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f6c:	e00a      	b.n	8009f84 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f6e:	f7f9 fc43 	bl	80037f8 <HAL_GetTick>
 8009f72:	4602      	mov	r2, r0
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	1ad3      	subs	r3, r2, r3
 8009f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d901      	bls.n	8009f84 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009f80:	2303      	movs	r3, #3
 8009f82:	e0be      	b.n	800a102 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f84:	4b1c      	ldr	r3, [pc, #112]	; (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009f86:	691b      	ldr	r3, [r3, #16]
 8009f88:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	00db      	lsls	r3, r3, #3
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d1eb      	bne.n	8009f6e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f003 0302 	and.w	r3, r3, #2
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d010      	beq.n	8009fc4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	68da      	ldr	r2, [r3, #12]
 8009fa6:	4b14      	ldr	r3, [pc, #80]	; (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009fa8:	699b      	ldr	r3, [r3, #24]
 8009faa:	f003 030f 	and.w	r3, r3, #15
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d208      	bcs.n	8009fc4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009fb2:	4b11      	ldr	r3, [pc, #68]	; (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009fb4:	699b      	ldr	r3, [r3, #24]
 8009fb6:	f023 020f 	bic.w	r2, r3, #15
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	490e      	ldr	r1, [pc, #56]	; (8009ff8 <HAL_RCC_ClockConfig+0x244>)
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009fc4:	4b0b      	ldr	r3, [pc, #44]	; (8009ff4 <HAL_RCC_ClockConfig+0x240>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f003 030f 	and.w	r3, r3, #15
 8009fcc:	683a      	ldr	r2, [r7, #0]
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d214      	bcs.n	8009ffc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fd2:	4b08      	ldr	r3, [pc, #32]	; (8009ff4 <HAL_RCC_ClockConfig+0x240>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f023 020f 	bic.w	r2, r3, #15
 8009fda:	4906      	ldr	r1, [pc, #24]	; (8009ff4 <HAL_RCC_ClockConfig+0x240>)
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fe2:	4b04      	ldr	r3, [pc, #16]	; (8009ff4 <HAL_RCC_ClockConfig+0x240>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f003 030f 	and.w	r3, r3, #15
 8009fea:	683a      	ldr	r2, [r7, #0]
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d005      	beq.n	8009ffc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e086      	b.n	800a102 <HAL_RCC_ClockConfig+0x34e>
 8009ff4:	52002000 	.word	0x52002000
 8009ff8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f003 0304 	and.w	r3, r3, #4
 800a004:	2b00      	cmp	r3, #0
 800a006:	d010      	beq.n	800a02a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	691a      	ldr	r2, [r3, #16]
 800a00c:	4b3f      	ldr	r3, [pc, #252]	; (800a10c <HAL_RCC_ClockConfig+0x358>)
 800a00e:	699b      	ldr	r3, [r3, #24]
 800a010:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a014:	429a      	cmp	r2, r3
 800a016:	d208      	bcs.n	800a02a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a018:	4b3c      	ldr	r3, [pc, #240]	; (800a10c <HAL_RCC_ClockConfig+0x358>)
 800a01a:	699b      	ldr	r3, [r3, #24]
 800a01c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	691b      	ldr	r3, [r3, #16]
 800a024:	4939      	ldr	r1, [pc, #228]	; (800a10c <HAL_RCC_ClockConfig+0x358>)
 800a026:	4313      	orrs	r3, r2
 800a028:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f003 0308 	and.w	r3, r3, #8
 800a032:	2b00      	cmp	r3, #0
 800a034:	d010      	beq.n	800a058 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	695a      	ldr	r2, [r3, #20]
 800a03a:	4b34      	ldr	r3, [pc, #208]	; (800a10c <HAL_RCC_ClockConfig+0x358>)
 800a03c:	69db      	ldr	r3, [r3, #28]
 800a03e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a042:	429a      	cmp	r2, r3
 800a044:	d208      	bcs.n	800a058 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a046:	4b31      	ldr	r3, [pc, #196]	; (800a10c <HAL_RCC_ClockConfig+0x358>)
 800a048:	69db      	ldr	r3, [r3, #28]
 800a04a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	695b      	ldr	r3, [r3, #20]
 800a052:	492e      	ldr	r1, [pc, #184]	; (800a10c <HAL_RCC_ClockConfig+0x358>)
 800a054:	4313      	orrs	r3, r2
 800a056:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f003 0310 	and.w	r3, r3, #16
 800a060:	2b00      	cmp	r3, #0
 800a062:	d010      	beq.n	800a086 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	699a      	ldr	r2, [r3, #24]
 800a068:	4b28      	ldr	r3, [pc, #160]	; (800a10c <HAL_RCC_ClockConfig+0x358>)
 800a06a:	69db      	ldr	r3, [r3, #28]
 800a06c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a070:	429a      	cmp	r2, r3
 800a072:	d208      	bcs.n	800a086 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a074:	4b25      	ldr	r3, [pc, #148]	; (800a10c <HAL_RCC_ClockConfig+0x358>)
 800a076:	69db      	ldr	r3, [r3, #28]
 800a078:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	699b      	ldr	r3, [r3, #24]
 800a080:	4922      	ldr	r1, [pc, #136]	; (800a10c <HAL_RCC_ClockConfig+0x358>)
 800a082:	4313      	orrs	r3, r2
 800a084:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f003 0320 	and.w	r3, r3, #32
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d010      	beq.n	800a0b4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	69da      	ldr	r2, [r3, #28]
 800a096:	4b1d      	ldr	r3, [pc, #116]	; (800a10c <HAL_RCC_ClockConfig+0x358>)
 800a098:	6a1b      	ldr	r3, [r3, #32]
 800a09a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d208      	bcs.n	800a0b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a0a2:	4b1a      	ldr	r3, [pc, #104]	; (800a10c <HAL_RCC_ClockConfig+0x358>)
 800a0a4:	6a1b      	ldr	r3, [r3, #32]
 800a0a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	69db      	ldr	r3, [r3, #28]
 800a0ae:	4917      	ldr	r1, [pc, #92]	; (800a10c <HAL_RCC_ClockConfig+0x358>)
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a0b4:	f000 f89e 	bl	800a1f4 <HAL_RCC_GetSysClockFreq>
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	4b14      	ldr	r3, [pc, #80]	; (800a10c <HAL_RCC_ClockConfig+0x358>)
 800a0bc:	699b      	ldr	r3, [r3, #24]
 800a0be:	0a1b      	lsrs	r3, r3, #8
 800a0c0:	f003 030f 	and.w	r3, r3, #15
 800a0c4:	4912      	ldr	r1, [pc, #72]	; (800a110 <HAL_RCC_ClockConfig+0x35c>)
 800a0c6:	5ccb      	ldrb	r3, [r1, r3]
 800a0c8:	f003 031f 	and.w	r3, r3, #31
 800a0cc:	fa22 f303 	lsr.w	r3, r2, r3
 800a0d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a0d2:	4b0e      	ldr	r3, [pc, #56]	; (800a10c <HAL_RCC_ClockConfig+0x358>)
 800a0d4:	699b      	ldr	r3, [r3, #24]
 800a0d6:	f003 030f 	and.w	r3, r3, #15
 800a0da:	4a0d      	ldr	r2, [pc, #52]	; (800a110 <HAL_RCC_ClockConfig+0x35c>)
 800a0dc:	5cd3      	ldrb	r3, [r2, r3]
 800a0de:	f003 031f 	and.w	r3, r3, #31
 800a0e2:	693a      	ldr	r2, [r7, #16]
 800a0e4:	fa22 f303 	lsr.w	r3, r2, r3
 800a0e8:	4a0a      	ldr	r2, [pc, #40]	; (800a114 <HAL_RCC_ClockConfig+0x360>)
 800a0ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a0ec:	4a0a      	ldr	r2, [pc, #40]	; (800a118 <HAL_RCC_ClockConfig+0x364>)
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a0f2:	4b0a      	ldr	r3, [pc, #40]	; (800a11c <HAL_RCC_ClockConfig+0x368>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7f9 fb34 	bl	8003764 <HAL_InitTick>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a100:	7bfb      	ldrb	r3, [r7, #15]
}
 800a102:	4618      	mov	r0, r3
 800a104:	3718      	adds	r7, #24
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	58024400 	.word	0x58024400
 800a110:	080181c4 	.word	0x080181c4
 800a114:	24000004 	.word	0x24000004
 800a118:	24000000 	.word	0x24000000
 800a11c:	24000008 	.word	0x24000008

0800a120 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b08c      	sub	sp, #48	; 0x30
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d12a      	bne.n	800a188 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a132:	4b2d      	ldr	r3, [pc, #180]	; (800a1e8 <HAL_RCC_MCOConfig+0xc8>)
 800a134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a138:	4a2b      	ldr	r2, [pc, #172]	; (800a1e8 <HAL_RCC_MCOConfig+0xc8>)
 800a13a:	f043 0301 	orr.w	r3, r3, #1
 800a13e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a142:	4b29      	ldr	r3, [pc, #164]	; (800a1e8 <HAL_RCC_MCOConfig+0xc8>)
 800a144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a148:	f003 0301 	and.w	r3, r3, #1
 800a14c:	61bb      	str	r3, [r7, #24]
 800a14e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a150:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a154:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a156:	2302      	movs	r3, #2
 800a158:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a15a:	2303      	movs	r3, #3
 800a15c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a15e:	2300      	movs	r3, #0
 800a160:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a162:	2300      	movs	r3, #0
 800a164:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a166:	f107 031c 	add.w	r3, r7, #28
 800a16a:	4619      	mov	r1, r3
 800a16c:	481f      	ldr	r0, [pc, #124]	; (800a1ec <HAL_RCC_MCOConfig+0xcc>)
 800a16e:	f7fd fc43 	bl	80079f8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a172:	4b1d      	ldr	r3, [pc, #116]	; (800a1e8 <HAL_RCC_MCOConfig+0xc8>)
 800a174:	691b      	ldr	r3, [r3, #16]
 800a176:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a17a:	68b9      	ldr	r1, [r7, #8]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	430b      	orrs	r3, r1
 800a180:	4919      	ldr	r1, [pc, #100]	; (800a1e8 <HAL_RCC_MCOConfig+0xc8>)
 800a182:	4313      	orrs	r3, r2
 800a184:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a186:	e02a      	b.n	800a1de <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a188:	4b17      	ldr	r3, [pc, #92]	; (800a1e8 <HAL_RCC_MCOConfig+0xc8>)
 800a18a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a18e:	4a16      	ldr	r2, [pc, #88]	; (800a1e8 <HAL_RCC_MCOConfig+0xc8>)
 800a190:	f043 0304 	orr.w	r3, r3, #4
 800a194:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a198:	4b13      	ldr	r3, [pc, #76]	; (800a1e8 <HAL_RCC_MCOConfig+0xc8>)
 800a19a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a19e:	f003 0304 	and.w	r3, r3, #4
 800a1a2:	617b      	str	r3, [r7, #20]
 800a1a4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a1a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1ac:	2302      	movs	r3, #2
 800a1ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a1b0:	2303      	movs	r3, #3
 800a1b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a1bc:	f107 031c 	add.w	r3, r7, #28
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	480b      	ldr	r0, [pc, #44]	; (800a1f0 <HAL_RCC_MCOConfig+0xd0>)
 800a1c4:	f7fd fc18 	bl	80079f8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a1c8:	4b07      	ldr	r3, [pc, #28]	; (800a1e8 <HAL_RCC_MCOConfig+0xc8>)
 800a1ca:	691b      	ldr	r3, [r3, #16]
 800a1cc:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	01d9      	lsls	r1, r3, #7
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	430b      	orrs	r3, r1
 800a1d8:	4903      	ldr	r1, [pc, #12]	; (800a1e8 <HAL_RCC_MCOConfig+0xc8>)
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	610b      	str	r3, [r1, #16]
}
 800a1de:	bf00      	nop
 800a1e0:	3730      	adds	r7, #48	; 0x30
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	58024400 	.word	0x58024400
 800a1ec:	58020000 	.word	0x58020000
 800a1f0:	58020800 	.word	0x58020800

0800a1f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b089      	sub	sp, #36	; 0x24
 800a1f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a1fa:	4bb3      	ldr	r3, [pc, #716]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1fc:	691b      	ldr	r3, [r3, #16]
 800a1fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a202:	2b18      	cmp	r3, #24
 800a204:	f200 8155 	bhi.w	800a4b2 <HAL_RCC_GetSysClockFreq+0x2be>
 800a208:	a201      	add	r2, pc, #4	; (adr r2, 800a210 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a20e:	bf00      	nop
 800a210:	0800a275 	.word	0x0800a275
 800a214:	0800a4b3 	.word	0x0800a4b3
 800a218:	0800a4b3 	.word	0x0800a4b3
 800a21c:	0800a4b3 	.word	0x0800a4b3
 800a220:	0800a4b3 	.word	0x0800a4b3
 800a224:	0800a4b3 	.word	0x0800a4b3
 800a228:	0800a4b3 	.word	0x0800a4b3
 800a22c:	0800a4b3 	.word	0x0800a4b3
 800a230:	0800a29b 	.word	0x0800a29b
 800a234:	0800a4b3 	.word	0x0800a4b3
 800a238:	0800a4b3 	.word	0x0800a4b3
 800a23c:	0800a4b3 	.word	0x0800a4b3
 800a240:	0800a4b3 	.word	0x0800a4b3
 800a244:	0800a4b3 	.word	0x0800a4b3
 800a248:	0800a4b3 	.word	0x0800a4b3
 800a24c:	0800a4b3 	.word	0x0800a4b3
 800a250:	0800a2a1 	.word	0x0800a2a1
 800a254:	0800a4b3 	.word	0x0800a4b3
 800a258:	0800a4b3 	.word	0x0800a4b3
 800a25c:	0800a4b3 	.word	0x0800a4b3
 800a260:	0800a4b3 	.word	0x0800a4b3
 800a264:	0800a4b3 	.word	0x0800a4b3
 800a268:	0800a4b3 	.word	0x0800a4b3
 800a26c:	0800a4b3 	.word	0x0800a4b3
 800a270:	0800a2a7 	.word	0x0800a2a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a274:	4b94      	ldr	r3, [pc, #592]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f003 0320 	and.w	r3, r3, #32
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d009      	beq.n	800a294 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a280:	4b91      	ldr	r3, [pc, #580]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	08db      	lsrs	r3, r3, #3
 800a286:	f003 0303 	and.w	r3, r3, #3
 800a28a:	4a90      	ldr	r2, [pc, #576]	; (800a4cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a28c:	fa22 f303 	lsr.w	r3, r2, r3
 800a290:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a292:	e111      	b.n	800a4b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a294:	4b8d      	ldr	r3, [pc, #564]	; (800a4cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a296:	61bb      	str	r3, [r7, #24]
      break;
 800a298:	e10e      	b.n	800a4b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a29a:	4b8d      	ldr	r3, [pc, #564]	; (800a4d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a29c:	61bb      	str	r3, [r7, #24]
      break;
 800a29e:	e10b      	b.n	800a4b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a2a0:	4b8c      	ldr	r3, [pc, #560]	; (800a4d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a2a2:	61bb      	str	r3, [r7, #24]
      break;
 800a2a4:	e108      	b.n	800a4b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a2a6:	4b88      	ldr	r3, [pc, #544]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2aa:	f003 0303 	and.w	r3, r3, #3
 800a2ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a2b0:	4b85      	ldr	r3, [pc, #532]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b4:	091b      	lsrs	r3, r3, #4
 800a2b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a2bc:	4b82      	ldr	r3, [pc, #520]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c0:	f003 0301 	and.w	r3, r3, #1
 800a2c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a2c6:	4b80      	ldr	r3, [pc, #512]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2ca:	08db      	lsrs	r3, r3, #3
 800a2cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	fb02 f303 	mul.w	r3, r2, r3
 800a2d6:	ee07 3a90 	vmov	s15, r3
 800a2da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	f000 80e1 	beq.w	800a4ac <HAL_RCC_GetSysClockFreq+0x2b8>
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	2b02      	cmp	r3, #2
 800a2ee:	f000 8083 	beq.w	800a3f8 <HAL_RCC_GetSysClockFreq+0x204>
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	f200 80a1 	bhi.w	800a43c <HAL_RCC_GetSysClockFreq+0x248>
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d003      	beq.n	800a308 <HAL_RCC_GetSysClockFreq+0x114>
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	2b01      	cmp	r3, #1
 800a304:	d056      	beq.n	800a3b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a306:	e099      	b.n	800a43c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a308:	4b6f      	ldr	r3, [pc, #444]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f003 0320 	and.w	r3, r3, #32
 800a310:	2b00      	cmp	r3, #0
 800a312:	d02d      	beq.n	800a370 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a314:	4b6c      	ldr	r3, [pc, #432]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	08db      	lsrs	r3, r3, #3
 800a31a:	f003 0303 	and.w	r3, r3, #3
 800a31e:	4a6b      	ldr	r2, [pc, #428]	; (800a4cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a320:	fa22 f303 	lsr.w	r3, r2, r3
 800a324:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	ee07 3a90 	vmov	s15, r3
 800a32c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	ee07 3a90 	vmov	s15, r3
 800a336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a33a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a33e:	4b62      	ldr	r3, [pc, #392]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a346:	ee07 3a90 	vmov	s15, r3
 800a34a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a34e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a352:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a4d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a35a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a35e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a36a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a36e:	e087      	b.n	800a480 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	ee07 3a90 	vmov	s15, r3
 800a376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a37a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a4dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800a37e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a382:	4b51      	ldr	r3, [pc, #324]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a38a:	ee07 3a90 	vmov	s15, r3
 800a38e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a392:	ed97 6a02 	vldr	s12, [r7, #8]
 800a396:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a4d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a39a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a39e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a3b2:	e065      	b.n	800a480 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	ee07 3a90 	vmov	s15, r3
 800a3ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3be:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a4e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a3c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3c6:	4b40      	ldr	r3, [pc, #256]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3ce:	ee07 3a90 	vmov	s15, r3
 800a3d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a3da:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a4d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a3de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a3f6:	e043      	b.n	800a480 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	ee07 3a90 	vmov	s15, r3
 800a3fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a402:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a4e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a40a:	4b2f      	ldr	r3, [pc, #188]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a40c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a40e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a412:	ee07 3a90 	vmov	s15, r3
 800a416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a41a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a41e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a4d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a42a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a42e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a432:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a436:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a43a:	e021      	b.n	800a480 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	ee07 3a90 	vmov	s15, r3
 800a442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a446:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a4e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a44a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a44e:	4b1e      	ldr	r3, [pc, #120]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a456:	ee07 3a90 	vmov	s15, r3
 800a45a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a45e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a462:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a4d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a46a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a46e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a47a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a47e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a480:	4b11      	ldr	r3, [pc, #68]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a484:	0a5b      	lsrs	r3, r3, #9
 800a486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a48a:	3301      	adds	r3, #1
 800a48c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	ee07 3a90 	vmov	s15, r3
 800a494:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a498:	edd7 6a07 	vldr	s13, [r7, #28]
 800a49c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4a4:	ee17 3a90 	vmov	r3, s15
 800a4a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a4aa:	e005      	b.n	800a4b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	61bb      	str	r3, [r7, #24]
      break;
 800a4b0:	e002      	b.n	800a4b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a4b2:	4b07      	ldr	r3, [pc, #28]	; (800a4d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a4b4:	61bb      	str	r3, [r7, #24]
      break;
 800a4b6:	bf00      	nop
  }

  return sysclockfreq;
 800a4b8:	69bb      	ldr	r3, [r7, #24]
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3724      	adds	r7, #36	; 0x24
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr
 800a4c6:	bf00      	nop
 800a4c8:	58024400 	.word	0x58024400
 800a4cc:	03d09000 	.word	0x03d09000
 800a4d0:	003d0900 	.word	0x003d0900
 800a4d4:	02faf080 	.word	0x02faf080
 800a4d8:	46000000 	.word	0x46000000
 800a4dc:	4c742400 	.word	0x4c742400
 800a4e0:	4a742400 	.word	0x4a742400
 800a4e4:	4c3ebc20 	.word	0x4c3ebc20

0800a4e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a4ee:	f7ff fe81 	bl	800a1f4 <HAL_RCC_GetSysClockFreq>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	4b10      	ldr	r3, [pc, #64]	; (800a538 <HAL_RCC_GetHCLKFreq+0x50>)
 800a4f6:	699b      	ldr	r3, [r3, #24]
 800a4f8:	0a1b      	lsrs	r3, r3, #8
 800a4fa:	f003 030f 	and.w	r3, r3, #15
 800a4fe:	490f      	ldr	r1, [pc, #60]	; (800a53c <HAL_RCC_GetHCLKFreq+0x54>)
 800a500:	5ccb      	ldrb	r3, [r1, r3]
 800a502:	f003 031f 	and.w	r3, r3, #31
 800a506:	fa22 f303 	lsr.w	r3, r2, r3
 800a50a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a50c:	4b0a      	ldr	r3, [pc, #40]	; (800a538 <HAL_RCC_GetHCLKFreq+0x50>)
 800a50e:	699b      	ldr	r3, [r3, #24]
 800a510:	f003 030f 	and.w	r3, r3, #15
 800a514:	4a09      	ldr	r2, [pc, #36]	; (800a53c <HAL_RCC_GetHCLKFreq+0x54>)
 800a516:	5cd3      	ldrb	r3, [r2, r3]
 800a518:	f003 031f 	and.w	r3, r3, #31
 800a51c:	687a      	ldr	r2, [r7, #4]
 800a51e:	fa22 f303 	lsr.w	r3, r2, r3
 800a522:	4a07      	ldr	r2, [pc, #28]	; (800a540 <HAL_RCC_GetHCLKFreq+0x58>)
 800a524:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a526:	4a07      	ldr	r2, [pc, #28]	; (800a544 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a52c:	4b04      	ldr	r3, [pc, #16]	; (800a540 <HAL_RCC_GetHCLKFreq+0x58>)
 800a52e:	681b      	ldr	r3, [r3, #0]
}
 800a530:	4618      	mov	r0, r3
 800a532:	3708      	adds	r7, #8
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	58024400 	.word	0x58024400
 800a53c:	080181c4 	.word	0x080181c4
 800a540:	24000004 	.word	0x24000004
 800a544:	24000000 	.word	0x24000000

0800a548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a54c:	f7ff ffcc 	bl	800a4e8 <HAL_RCC_GetHCLKFreq>
 800a550:	4602      	mov	r2, r0
 800a552:	4b06      	ldr	r3, [pc, #24]	; (800a56c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a554:	69db      	ldr	r3, [r3, #28]
 800a556:	091b      	lsrs	r3, r3, #4
 800a558:	f003 0307 	and.w	r3, r3, #7
 800a55c:	4904      	ldr	r1, [pc, #16]	; (800a570 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a55e:	5ccb      	ldrb	r3, [r1, r3]
 800a560:	f003 031f 	and.w	r3, r3, #31
 800a564:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a568:	4618      	mov	r0, r3
 800a56a:	bd80      	pop	{r7, pc}
 800a56c:	58024400 	.word	0x58024400
 800a570:	080181c4 	.word	0x080181c4

0800a574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a578:	f7ff ffb6 	bl	800a4e8 <HAL_RCC_GetHCLKFreq>
 800a57c:	4602      	mov	r2, r0
 800a57e:	4b06      	ldr	r3, [pc, #24]	; (800a598 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a580:	69db      	ldr	r3, [r3, #28]
 800a582:	0a1b      	lsrs	r3, r3, #8
 800a584:	f003 0307 	and.w	r3, r3, #7
 800a588:	4904      	ldr	r1, [pc, #16]	; (800a59c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a58a:	5ccb      	ldrb	r3, [r1, r3]
 800a58c:	f003 031f 	and.w	r3, r3, #31
 800a590:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a594:	4618      	mov	r0, r3
 800a596:	bd80      	pop	{r7, pc}
 800a598:	58024400 	.word	0x58024400
 800a59c:	080181c4 	.word	0x080181c4

0800a5a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a5a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5a4:	b0c6      	sub	sp, #280	; 0x118
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a5b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a5c4:	2500      	movs	r5, #0
 800a5c6:	ea54 0305 	orrs.w	r3, r4, r5
 800a5ca:	d049      	beq.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a5cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a5d6:	d02f      	beq.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a5d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a5dc:	d828      	bhi.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a5de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a5e2:	d01a      	beq.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a5e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a5e8:	d822      	bhi.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d003      	beq.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a5ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5f2:	d007      	beq.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a5f4:	e01c      	b.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5f6:	4bab      	ldr	r3, [pc, #684]	; (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a5f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5fa:	4aaa      	ldr	r2, [pc, #680]	; (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a5fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a600:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a602:	e01a      	b.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a608:	3308      	adds	r3, #8
 800a60a:	2102      	movs	r1, #2
 800a60c:	4618      	mov	r0, r3
 800a60e:	f002 fa49 	bl	800caa4 <RCCEx_PLL2_Config>
 800a612:	4603      	mov	r3, r0
 800a614:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a618:	e00f      	b.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a61a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a61e:	3328      	adds	r3, #40	; 0x28
 800a620:	2102      	movs	r1, #2
 800a622:	4618      	mov	r0, r3
 800a624:	f002 faf0 	bl	800cc08 <RCCEx_PLL3_Config>
 800a628:	4603      	mov	r3, r0
 800a62a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a62e:	e004      	b.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a630:	2301      	movs	r3, #1
 800a632:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a636:	e000      	b.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a638:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a63a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d10a      	bne.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a642:	4b98      	ldr	r3, [pc, #608]	; (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a646:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a64a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a64e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a650:	4a94      	ldr	r2, [pc, #592]	; (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a652:	430b      	orrs	r3, r1
 800a654:	6513      	str	r3, [r2, #80]	; 0x50
 800a656:	e003      	b.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a658:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a65c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a668:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a66c:	f04f 0900 	mov.w	r9, #0
 800a670:	ea58 0309 	orrs.w	r3, r8, r9
 800a674:	d047      	beq.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a67a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a67c:	2b04      	cmp	r3, #4
 800a67e:	d82a      	bhi.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a680:	a201      	add	r2, pc, #4	; (adr r2, 800a688 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a686:	bf00      	nop
 800a688:	0800a69d 	.word	0x0800a69d
 800a68c:	0800a6ab 	.word	0x0800a6ab
 800a690:	0800a6c1 	.word	0x0800a6c1
 800a694:	0800a6df 	.word	0x0800a6df
 800a698:	0800a6df 	.word	0x0800a6df
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a69c:	4b81      	ldr	r3, [pc, #516]	; (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a69e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a0:	4a80      	ldr	r2, [pc, #512]	; (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a6a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a6a8:	e01a      	b.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a6aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6ae:	3308      	adds	r3, #8
 800a6b0:	2100      	movs	r1, #0
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f002 f9f6 	bl	800caa4 <RCCEx_PLL2_Config>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a6be:	e00f      	b.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a6c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6c4:	3328      	adds	r3, #40	; 0x28
 800a6c6:	2100      	movs	r1, #0
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f002 fa9d 	bl	800cc08 <RCCEx_PLL3_Config>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a6d4:	e004      	b.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a6dc:	e000      	b.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a6de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d10a      	bne.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a6e8:	4b6e      	ldr	r3, [pc, #440]	; (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a6ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6ec:	f023 0107 	bic.w	r1, r3, #7
 800a6f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6f6:	4a6b      	ldr	r2, [pc, #428]	; (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a6f8:	430b      	orrs	r3, r1
 800a6fa:	6513      	str	r3, [r2, #80]	; 0x50
 800a6fc:	e003      	b.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a702:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a706:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800a712:	f04f 0b00 	mov.w	fp, #0
 800a716:	ea5a 030b 	orrs.w	r3, sl, fp
 800a71a:	d05b      	beq.n	800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a71c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a720:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a724:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a728:	d03b      	beq.n	800a7a2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a72a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a72e:	d834      	bhi.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a730:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a734:	d037      	beq.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a736:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a73a:	d82e      	bhi.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a73c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a740:	d033      	beq.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a742:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a746:	d828      	bhi.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a748:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a74c:	d01a      	beq.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a74e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a752:	d822      	bhi.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a754:	2b00      	cmp	r3, #0
 800a756:	d003      	beq.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a758:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a75c:	d007      	beq.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800a75e:	e01c      	b.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a760:	4b50      	ldr	r3, [pc, #320]	; (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a764:	4a4f      	ldr	r2, [pc, #316]	; (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a766:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a76a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a76c:	e01e      	b.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a76e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a772:	3308      	adds	r3, #8
 800a774:	2100      	movs	r1, #0
 800a776:	4618      	mov	r0, r3
 800a778:	f002 f994 	bl	800caa4 <RCCEx_PLL2_Config>
 800a77c:	4603      	mov	r3, r0
 800a77e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a782:	e013      	b.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a788:	3328      	adds	r3, #40	; 0x28
 800a78a:	2100      	movs	r1, #0
 800a78c:	4618      	mov	r0, r3
 800a78e:	f002 fa3b 	bl	800cc08 <RCCEx_PLL3_Config>
 800a792:	4603      	mov	r3, r0
 800a794:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a798:	e008      	b.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a79a:	2301      	movs	r3, #1
 800a79c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a7a0:	e004      	b.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a7a2:	bf00      	nop
 800a7a4:	e002      	b.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a7a6:	bf00      	nop
 800a7a8:	e000      	b.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a7aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d10b      	bne.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a7b4:	4b3b      	ldr	r3, [pc, #236]	; (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a7b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7b8:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800a7bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a7c4:	4a37      	ldr	r2, [pc, #220]	; (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a7c6:	430b      	orrs	r3, r1
 800a7c8:	6593      	str	r3, [r2, #88]	; 0x58
 800a7ca:	e003      	b.n	800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7d0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a7d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7dc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a7e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a7ea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	d05d      	beq.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a7f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a7fc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a800:	d03b      	beq.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a802:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a806:	d834      	bhi.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a808:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a80c:	d037      	beq.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a80e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a812:	d82e      	bhi.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a814:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a818:	d033      	beq.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800a81a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a81e:	d828      	bhi.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a820:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a824:	d01a      	beq.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a826:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a82a:	d822      	bhi.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d003      	beq.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a834:	d007      	beq.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a836:	e01c      	b.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a838:	4b1a      	ldr	r3, [pc, #104]	; (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a83c:	4a19      	ldr	r2, [pc, #100]	; (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a83e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a842:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a844:	e01e      	b.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a84a:	3308      	adds	r3, #8
 800a84c:	2100      	movs	r1, #0
 800a84e:	4618      	mov	r0, r3
 800a850:	f002 f928 	bl	800caa4 <RCCEx_PLL2_Config>
 800a854:	4603      	mov	r3, r0
 800a856:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a85a:	e013      	b.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a85c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a860:	3328      	adds	r3, #40	; 0x28
 800a862:	2100      	movs	r1, #0
 800a864:	4618      	mov	r0, r3
 800a866:	f002 f9cf 	bl	800cc08 <RCCEx_PLL3_Config>
 800a86a:	4603      	mov	r3, r0
 800a86c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a870:	e008      	b.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a872:	2301      	movs	r3, #1
 800a874:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a878:	e004      	b.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a87a:	bf00      	nop
 800a87c:	e002      	b.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a87e:	bf00      	nop
 800a880:	e000      	b.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a882:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a884:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d10d      	bne.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a88c:	4b05      	ldr	r3, [pc, #20]	; (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a88e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a890:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800a894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a898:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a89c:	4a01      	ldr	r2, [pc, #4]	; (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a89e:	430b      	orrs	r3, r1
 800a8a0:	6593      	str	r3, [r2, #88]	; 0x58
 800a8a2:	e005      	b.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a8a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a8b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a8bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a8c6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	d03a      	beq.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a8d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8d6:	2b30      	cmp	r3, #48	; 0x30
 800a8d8:	d01f      	beq.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800a8da:	2b30      	cmp	r3, #48	; 0x30
 800a8dc:	d819      	bhi.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a8de:	2b20      	cmp	r3, #32
 800a8e0:	d00c      	beq.n	800a8fc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a8e2:	2b20      	cmp	r3, #32
 800a8e4:	d815      	bhi.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d019      	beq.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a8ea:	2b10      	cmp	r3, #16
 800a8ec:	d111      	bne.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8ee:	4baa      	ldr	r3, [pc, #680]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a8f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f2:	4aa9      	ldr	r2, [pc, #676]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a8f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a8fa:	e011      	b.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a8fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a900:	3308      	adds	r3, #8
 800a902:	2102      	movs	r1, #2
 800a904:	4618      	mov	r0, r3
 800a906:	f002 f8cd 	bl	800caa4 <RCCEx_PLL2_Config>
 800a90a:	4603      	mov	r3, r0
 800a90c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a910:	e006      	b.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a912:	2301      	movs	r3, #1
 800a914:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a918:	e002      	b.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a91a:	bf00      	nop
 800a91c:	e000      	b.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a91e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a920:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10a      	bne.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a928:	4b9b      	ldr	r3, [pc, #620]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a92a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a92c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800a930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a936:	4a98      	ldr	r2, [pc, #608]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a938:	430b      	orrs	r3, r1
 800a93a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a93c:	e003      	b.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a93e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a942:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800a952:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a956:	2300      	movs	r3, #0
 800a958:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a95c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800a960:	460b      	mov	r3, r1
 800a962:	4313      	orrs	r3, r2
 800a964:	d051      	beq.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a96a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a96c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a970:	d035      	beq.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800a972:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a976:	d82e      	bhi.n	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a978:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a97c:	d031      	beq.n	800a9e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800a97e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a982:	d828      	bhi.n	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a984:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a988:	d01a      	beq.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a98a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a98e:	d822      	bhi.n	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a990:	2b00      	cmp	r3, #0
 800a992:	d003      	beq.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800a994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a998:	d007      	beq.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a99a:	e01c      	b.n	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a99c:	4b7e      	ldr	r3, [pc, #504]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a99e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a0:	4a7d      	ldr	r2, [pc, #500]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a9a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a9a8:	e01c      	b.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9ae:	3308      	adds	r3, #8
 800a9b0:	2100      	movs	r1, #0
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f002 f876 	bl	800caa4 <RCCEx_PLL2_Config>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a9be:	e011      	b.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a9c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9c4:	3328      	adds	r3, #40	; 0x28
 800a9c6:	2100      	movs	r1, #0
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f002 f91d 	bl	800cc08 <RCCEx_PLL3_Config>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a9d4:	e006      	b.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a9dc:	e002      	b.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a9de:	bf00      	nop
 800a9e0:	e000      	b.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a9e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d10a      	bne.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a9ec:	4b6a      	ldr	r3, [pc, #424]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a9ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9f0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a9f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9fa:	4a67      	ldr	r2, [pc, #412]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a9fc:	430b      	orrs	r3, r1
 800a9fe:	6513      	str	r3, [r2, #80]	; 0x50
 800aa00:	e003      	b.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa02:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa06:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800aa0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa12:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800aa16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aa20:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800aa24:	460b      	mov	r3, r1
 800aa26:	4313      	orrs	r3, r2
 800aa28:	d053      	beq.n	800aad2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800aa2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aa34:	d033      	beq.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800aa36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aa3a:	d82c      	bhi.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800aa3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aa40:	d02f      	beq.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800aa42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aa46:	d826      	bhi.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800aa48:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aa4c:	d02b      	beq.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800aa4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aa52:	d820      	bhi.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800aa54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa58:	d012      	beq.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800aa5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa5e:	d81a      	bhi.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d022      	beq.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800aa64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa68:	d115      	bne.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aa6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa6e:	3308      	adds	r3, #8
 800aa70:	2101      	movs	r1, #1
 800aa72:	4618      	mov	r0, r3
 800aa74:	f002 f816 	bl	800caa4 <RCCEx_PLL2_Config>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800aa7e:	e015      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa84:	3328      	adds	r3, #40	; 0x28
 800aa86:	2101      	movs	r1, #1
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f002 f8bd 	bl	800cc08 <RCCEx_PLL3_Config>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800aa94:	e00a      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa96:	2301      	movs	r3, #1
 800aa98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa9c:	e006      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800aa9e:	bf00      	nop
 800aaa0:	e004      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800aaa2:	bf00      	nop
 800aaa4:	e002      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800aaa6:	bf00      	nop
 800aaa8:	e000      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800aaaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aaac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d10a      	bne.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800aab4:	4b38      	ldr	r3, [pc, #224]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aab8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800aabc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aac2:	4a35      	ldr	r2, [pc, #212]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aac4:	430b      	orrs	r3, r1
 800aac6:	6513      	str	r3, [r2, #80]	; 0x50
 800aac8:	e003      	b.n	800aad2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aace:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800aad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aada:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800aade:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aae2:	2300      	movs	r3, #0
 800aae4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800aae8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800aaec:	460b      	mov	r3, r1
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	d058      	beq.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800aaf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaf6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aafa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aafe:	d033      	beq.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800ab00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ab04:	d82c      	bhi.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ab06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab0a:	d02f      	beq.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800ab0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab10:	d826      	bhi.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ab12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ab16:	d02b      	beq.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800ab18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ab1c:	d820      	bhi.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ab1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab22:	d012      	beq.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800ab24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab28:	d81a      	bhi.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d022      	beq.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ab2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab32:	d115      	bne.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ab34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab38:	3308      	adds	r3, #8
 800ab3a:	2101      	movs	r1, #1
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f001 ffb1 	bl	800caa4 <RCCEx_PLL2_Config>
 800ab42:	4603      	mov	r3, r0
 800ab44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ab48:	e015      	b.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ab4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab4e:	3328      	adds	r3, #40	; 0x28
 800ab50:	2101      	movs	r1, #1
 800ab52:	4618      	mov	r0, r3
 800ab54:	f002 f858 	bl	800cc08 <RCCEx_PLL3_Config>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ab5e:	e00a      	b.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ab60:	2301      	movs	r3, #1
 800ab62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab66:	e006      	b.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ab68:	bf00      	nop
 800ab6a:	e004      	b.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ab6c:	bf00      	nop
 800ab6e:	e002      	b.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ab70:	bf00      	nop
 800ab72:	e000      	b.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ab74:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab76:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d10e      	bne.n	800ab9c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ab7e:	4b06      	ldr	r3, [pc, #24]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab82:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ab86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ab8e:	4a02      	ldr	r2, [pc, #8]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab90:	430b      	orrs	r3, r1
 800ab92:	6593      	str	r3, [r2, #88]	; 0x58
 800ab94:	e006      	b.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800ab96:	bf00      	nop
 800ab98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aba0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800aba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abac:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800abb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800abb4:	2300      	movs	r3, #0
 800abb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800abba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800abbe:	460b      	mov	r3, r1
 800abc0:	4313      	orrs	r3, r2
 800abc2:	d037      	beq.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800abc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abce:	d00e      	beq.n	800abee <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800abd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abd4:	d816      	bhi.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d018      	beq.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800abda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abde:	d111      	bne.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abe0:	4bc4      	ldr	r3, [pc, #784]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800abe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe4:	4ac3      	ldr	r2, [pc, #780]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800abe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800abec:	e00f      	b.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800abee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abf2:	3308      	adds	r3, #8
 800abf4:	2101      	movs	r1, #1
 800abf6:	4618      	mov	r0, r3
 800abf8:	f001 ff54 	bl	800caa4 <RCCEx_PLL2_Config>
 800abfc:	4603      	mov	r3, r0
 800abfe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ac02:	e004      	b.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac04:	2301      	movs	r3, #1
 800ac06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac0a:	e000      	b.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800ac0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac0e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d10a      	bne.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ac16:	4bb7      	ldr	r3, [pc, #732]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac1a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ac1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac24:	4ab3      	ldr	r2, [pc, #716]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac26:	430b      	orrs	r3, r1
 800ac28:	6513      	str	r3, [r2, #80]	; 0x50
 800ac2a:	e003      	b.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac30:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ac34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800ac40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ac44:	2300      	movs	r3, #0
 800ac46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ac4a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800ac4e:	460b      	mov	r3, r1
 800ac50:	4313      	orrs	r3, r2
 800ac52:	d039      	beq.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ac54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac5a:	2b03      	cmp	r3, #3
 800ac5c:	d81c      	bhi.n	800ac98 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800ac5e:	a201      	add	r2, pc, #4	; (adr r2, 800ac64 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800ac60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac64:	0800aca1 	.word	0x0800aca1
 800ac68:	0800ac75 	.word	0x0800ac75
 800ac6c:	0800ac83 	.word	0x0800ac83
 800ac70:	0800aca1 	.word	0x0800aca1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac74:	4b9f      	ldr	r3, [pc, #636]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac78:	4a9e      	ldr	r2, [pc, #632]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ac80:	e00f      	b.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ac82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac86:	3308      	adds	r3, #8
 800ac88:	2102      	movs	r1, #2
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f001 ff0a 	bl	800caa4 <RCCEx_PLL2_Config>
 800ac90:	4603      	mov	r3, r0
 800ac92:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ac96:	e004      	b.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac9e:	e000      	b.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800aca0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aca2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d10a      	bne.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800acaa:	4b92      	ldr	r3, [pc, #584]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acae:	f023 0103 	bic.w	r1, r3, #3
 800acb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acb8:	4a8e      	ldr	r2, [pc, #568]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acba:	430b      	orrs	r3, r1
 800acbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800acbe:	e003      	b.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acc0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acc4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800acc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800accc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800acd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800acd8:	2300      	movs	r3, #0
 800acda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800acde:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ace2:	460b      	mov	r3, r1
 800ace4:	4313      	orrs	r3, r2
 800ace6:	f000 8099 	beq.w	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800acea:	4b83      	ldr	r3, [pc, #524]	; (800aef8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4a82      	ldr	r2, [pc, #520]	; (800aef8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800acf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acf4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800acf6:	f7f8 fd7f 	bl	80037f8 <HAL_GetTick>
 800acfa:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800acfe:	e00b      	b.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ad00:	f7f8 fd7a 	bl	80037f8 <HAL_GetTick>
 800ad04:	4602      	mov	r2, r0
 800ad06:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ad0a:	1ad3      	subs	r3, r2, r3
 800ad0c:	2b64      	cmp	r3, #100	; 0x64
 800ad0e:	d903      	bls.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800ad10:	2303      	movs	r3, #3
 800ad12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad16:	e005      	b.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad18:	4b77      	ldr	r3, [pc, #476]	; (800aef8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d0ed      	beq.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800ad24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d173      	bne.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ad2c:	4b71      	ldr	r3, [pc, #452]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ad30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad38:	4053      	eors	r3, r2
 800ad3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d015      	beq.n	800ad6e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ad42:	4b6c      	ldr	r3, [pc, #432]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad4a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ad4e:	4b69      	ldr	r3, [pc, #420]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad52:	4a68      	ldr	r2, [pc, #416]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad58:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ad5a:	4b66      	ldr	r3, [pc, #408]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad5e:	4a65      	ldr	r2, [pc, #404]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad64:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ad66:	4a63      	ldr	r2, [pc, #396]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ad6c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ad6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad7a:	d118      	bne.n	800adae <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad7c:	f7f8 fd3c 	bl	80037f8 <HAL_GetTick>
 800ad80:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad84:	e00d      	b.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad86:	f7f8 fd37 	bl	80037f8 <HAL_GetTick>
 800ad8a:	4602      	mov	r2, r0
 800ad8c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ad90:	1ad2      	subs	r2, r2, r3
 800ad92:	f241 3388 	movw	r3, #5000	; 0x1388
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d903      	bls.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800ad9a:	2303      	movs	r3, #3
 800ad9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800ada0:	e005      	b.n	800adae <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ada2:	4b54      	ldr	r3, [pc, #336]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ada4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ada6:	f003 0302 	and.w	r3, r3, #2
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d0eb      	beq.n	800ad86 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800adae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d129      	bne.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800adb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800adbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800adc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800adc6:	d10e      	bne.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800adc8:	4b4a      	ldr	r3, [pc, #296]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800adca:	691b      	ldr	r3, [r3, #16]
 800adcc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800add0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800add4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800add8:	091a      	lsrs	r2, r3, #4
 800adda:	4b48      	ldr	r3, [pc, #288]	; (800aefc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800addc:	4013      	ands	r3, r2
 800adde:	4a45      	ldr	r2, [pc, #276]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ade0:	430b      	orrs	r3, r1
 800ade2:	6113      	str	r3, [r2, #16]
 800ade4:	e005      	b.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800ade6:	4b43      	ldr	r3, [pc, #268]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ade8:	691b      	ldr	r3, [r3, #16]
 800adea:	4a42      	ldr	r2, [pc, #264]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800adec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800adf0:	6113      	str	r3, [r2, #16]
 800adf2:	4b40      	ldr	r3, [pc, #256]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800adf4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800adf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800adfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae02:	4a3c      	ldr	r2, [pc, #240]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae04:	430b      	orrs	r3, r1
 800ae06:	6713      	str	r3, [r2, #112]	; 0x70
 800ae08:	e008      	b.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ae0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae0e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800ae12:	e003      	b.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae18:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ae1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae24:	f002 0301 	and.w	r3, r2, #1
 800ae28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ae32:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800ae36:	460b      	mov	r3, r1
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	f000 808f 	beq.w	800af5c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ae3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae44:	2b28      	cmp	r3, #40	; 0x28
 800ae46:	d871      	bhi.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800ae48:	a201      	add	r2, pc, #4	; (adr r2, 800ae50 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800ae4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae4e:	bf00      	nop
 800ae50:	0800af35 	.word	0x0800af35
 800ae54:	0800af2d 	.word	0x0800af2d
 800ae58:	0800af2d 	.word	0x0800af2d
 800ae5c:	0800af2d 	.word	0x0800af2d
 800ae60:	0800af2d 	.word	0x0800af2d
 800ae64:	0800af2d 	.word	0x0800af2d
 800ae68:	0800af2d 	.word	0x0800af2d
 800ae6c:	0800af2d 	.word	0x0800af2d
 800ae70:	0800af01 	.word	0x0800af01
 800ae74:	0800af2d 	.word	0x0800af2d
 800ae78:	0800af2d 	.word	0x0800af2d
 800ae7c:	0800af2d 	.word	0x0800af2d
 800ae80:	0800af2d 	.word	0x0800af2d
 800ae84:	0800af2d 	.word	0x0800af2d
 800ae88:	0800af2d 	.word	0x0800af2d
 800ae8c:	0800af2d 	.word	0x0800af2d
 800ae90:	0800af17 	.word	0x0800af17
 800ae94:	0800af2d 	.word	0x0800af2d
 800ae98:	0800af2d 	.word	0x0800af2d
 800ae9c:	0800af2d 	.word	0x0800af2d
 800aea0:	0800af2d 	.word	0x0800af2d
 800aea4:	0800af2d 	.word	0x0800af2d
 800aea8:	0800af2d 	.word	0x0800af2d
 800aeac:	0800af2d 	.word	0x0800af2d
 800aeb0:	0800af35 	.word	0x0800af35
 800aeb4:	0800af2d 	.word	0x0800af2d
 800aeb8:	0800af2d 	.word	0x0800af2d
 800aebc:	0800af2d 	.word	0x0800af2d
 800aec0:	0800af2d 	.word	0x0800af2d
 800aec4:	0800af2d 	.word	0x0800af2d
 800aec8:	0800af2d 	.word	0x0800af2d
 800aecc:	0800af2d 	.word	0x0800af2d
 800aed0:	0800af35 	.word	0x0800af35
 800aed4:	0800af2d 	.word	0x0800af2d
 800aed8:	0800af2d 	.word	0x0800af2d
 800aedc:	0800af2d 	.word	0x0800af2d
 800aee0:	0800af2d 	.word	0x0800af2d
 800aee4:	0800af2d 	.word	0x0800af2d
 800aee8:	0800af2d 	.word	0x0800af2d
 800aeec:	0800af2d 	.word	0x0800af2d
 800aef0:	0800af35 	.word	0x0800af35
 800aef4:	58024400 	.word	0x58024400
 800aef8:	58024800 	.word	0x58024800
 800aefc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af04:	3308      	adds	r3, #8
 800af06:	2101      	movs	r1, #1
 800af08:	4618      	mov	r0, r3
 800af0a:	f001 fdcb 	bl	800caa4 <RCCEx_PLL2_Config>
 800af0e:	4603      	mov	r3, r0
 800af10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800af14:	e00f      	b.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af1a:	3328      	adds	r3, #40	; 0x28
 800af1c:	2101      	movs	r1, #1
 800af1e:	4618      	mov	r0, r3
 800af20:	f001 fe72 	bl	800cc08 <RCCEx_PLL3_Config>
 800af24:	4603      	mov	r3, r0
 800af26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800af2a:	e004      	b.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af2c:	2301      	movs	r3, #1
 800af2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af32:	e000      	b.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800af34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af36:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d10a      	bne.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800af3e:	4bbf      	ldr	r3, [pc, #764]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800af40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af42:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800af46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af4c:	4abb      	ldr	r2, [pc, #748]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800af4e:	430b      	orrs	r3, r1
 800af50:	6553      	str	r3, [r2, #84]	; 0x54
 800af52:	e003      	b.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af58:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800af5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af64:	f002 0302 	and.w	r3, r2, #2
 800af68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800af6c:	2300      	movs	r3, #0
 800af6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800af72:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800af76:	460b      	mov	r3, r1
 800af78:	4313      	orrs	r3, r2
 800af7a:	d041      	beq.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800af7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af82:	2b05      	cmp	r3, #5
 800af84:	d824      	bhi.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800af86:	a201      	add	r2, pc, #4	; (adr r2, 800af8c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800af88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af8c:	0800afd9 	.word	0x0800afd9
 800af90:	0800afa5 	.word	0x0800afa5
 800af94:	0800afbb 	.word	0x0800afbb
 800af98:	0800afd9 	.word	0x0800afd9
 800af9c:	0800afd9 	.word	0x0800afd9
 800afa0:	0800afd9 	.word	0x0800afd9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800afa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afa8:	3308      	adds	r3, #8
 800afaa:	2101      	movs	r1, #1
 800afac:	4618      	mov	r0, r3
 800afae:	f001 fd79 	bl	800caa4 <RCCEx_PLL2_Config>
 800afb2:	4603      	mov	r3, r0
 800afb4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800afb8:	e00f      	b.n	800afda <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800afba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afbe:	3328      	adds	r3, #40	; 0x28
 800afc0:	2101      	movs	r1, #1
 800afc2:	4618      	mov	r0, r3
 800afc4:	f001 fe20 	bl	800cc08 <RCCEx_PLL3_Config>
 800afc8:	4603      	mov	r3, r0
 800afca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800afce:	e004      	b.n	800afda <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800afd0:	2301      	movs	r3, #1
 800afd2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800afd6:	e000      	b.n	800afda <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800afd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afda:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d10a      	bne.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800afe2:	4b96      	ldr	r3, [pc, #600]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800afe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afe6:	f023 0107 	bic.w	r1, r3, #7
 800afea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aff0:	4a92      	ldr	r2, [pc, #584]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aff2:	430b      	orrs	r3, r1
 800aff4:	6553      	str	r3, [r2, #84]	; 0x54
 800aff6:	e003      	b.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aff8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800affc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b008:	f002 0304 	and.w	r3, r2, #4
 800b00c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b010:	2300      	movs	r3, #0
 800b012:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b016:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b01a:	460b      	mov	r3, r1
 800b01c:	4313      	orrs	r3, r2
 800b01e:	d044      	beq.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b020:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b028:	2b05      	cmp	r3, #5
 800b02a:	d825      	bhi.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b02c:	a201      	add	r2, pc, #4	; (adr r2, 800b034 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b032:	bf00      	nop
 800b034:	0800b081 	.word	0x0800b081
 800b038:	0800b04d 	.word	0x0800b04d
 800b03c:	0800b063 	.word	0x0800b063
 800b040:	0800b081 	.word	0x0800b081
 800b044:	0800b081 	.word	0x0800b081
 800b048:	0800b081 	.word	0x0800b081
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b04c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b050:	3308      	adds	r3, #8
 800b052:	2101      	movs	r1, #1
 800b054:	4618      	mov	r0, r3
 800b056:	f001 fd25 	bl	800caa4 <RCCEx_PLL2_Config>
 800b05a:	4603      	mov	r3, r0
 800b05c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b060:	e00f      	b.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b066:	3328      	adds	r3, #40	; 0x28
 800b068:	2101      	movs	r1, #1
 800b06a:	4618      	mov	r0, r3
 800b06c:	f001 fdcc 	bl	800cc08 <RCCEx_PLL3_Config>
 800b070:	4603      	mov	r3, r0
 800b072:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b076:	e004      	b.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b078:	2301      	movs	r3, #1
 800b07a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b07e:	e000      	b.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b080:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b082:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b086:	2b00      	cmp	r3, #0
 800b088:	d10b      	bne.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b08a:	4b6c      	ldr	r3, [pc, #432]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b08c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b08e:	f023 0107 	bic.w	r1, r3, #7
 800b092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b09a:	4a68      	ldr	r2, [pc, #416]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b09c:	430b      	orrs	r3, r1
 800b09e:	6593      	str	r3, [r2, #88]	; 0x58
 800b0a0:	e003      	b.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0a6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b0aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b2:	f002 0320 	and.w	r3, r2, #32
 800b0b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b0c0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b0c4:	460b      	mov	r3, r1
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	d055      	beq.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b0ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b0d6:	d033      	beq.n	800b140 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b0d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b0dc:	d82c      	bhi.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b0de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0e2:	d02f      	beq.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b0e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0e8:	d826      	bhi.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b0ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b0ee:	d02b      	beq.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b0f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b0f4:	d820      	bhi.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b0f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0fa:	d012      	beq.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b0fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b100:	d81a      	bhi.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b102:	2b00      	cmp	r3, #0
 800b104:	d022      	beq.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b106:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b10a:	d115      	bne.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b10c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b110:	3308      	adds	r3, #8
 800b112:	2100      	movs	r1, #0
 800b114:	4618      	mov	r0, r3
 800b116:	f001 fcc5 	bl	800caa4 <RCCEx_PLL2_Config>
 800b11a:	4603      	mov	r3, r0
 800b11c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b120:	e015      	b.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b126:	3328      	adds	r3, #40	; 0x28
 800b128:	2102      	movs	r1, #2
 800b12a:	4618      	mov	r0, r3
 800b12c:	f001 fd6c 	bl	800cc08 <RCCEx_PLL3_Config>
 800b130:	4603      	mov	r3, r0
 800b132:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b136:	e00a      	b.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b138:	2301      	movs	r3, #1
 800b13a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b13e:	e006      	b.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b140:	bf00      	nop
 800b142:	e004      	b.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b144:	bf00      	nop
 800b146:	e002      	b.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b148:	bf00      	nop
 800b14a:	e000      	b.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b14c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b14e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b152:	2b00      	cmp	r3, #0
 800b154:	d10b      	bne.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b156:	4b39      	ldr	r3, [pc, #228]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b15a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b15e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b162:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b166:	4a35      	ldr	r2, [pc, #212]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b168:	430b      	orrs	r3, r1
 800b16a:	6553      	str	r3, [r2, #84]	; 0x54
 800b16c:	e003      	b.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b16e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b172:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b176:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b182:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b186:	2300      	movs	r3, #0
 800b188:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b18c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b190:	460b      	mov	r3, r1
 800b192:	4313      	orrs	r3, r2
 800b194:	d058      	beq.n	800b248 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b19a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b19e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b1a2:	d033      	beq.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b1a4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b1a8:	d82c      	bhi.n	800b204 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b1aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1ae:	d02f      	beq.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b1b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1b4:	d826      	bhi.n	800b204 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b1b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b1ba:	d02b      	beq.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b1bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b1c0:	d820      	bhi.n	800b204 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b1c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1c6:	d012      	beq.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b1c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1cc:	d81a      	bhi.n	800b204 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d022      	beq.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b1d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1d6:	d115      	bne.n	800b204 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b1d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1dc:	3308      	adds	r3, #8
 800b1de:	2100      	movs	r1, #0
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f001 fc5f 	bl	800caa4 <RCCEx_PLL2_Config>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b1ec:	e015      	b.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b1ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1f2:	3328      	adds	r3, #40	; 0x28
 800b1f4:	2102      	movs	r1, #2
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f001 fd06 	bl	800cc08 <RCCEx_PLL3_Config>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b202:	e00a      	b.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b204:	2301      	movs	r3, #1
 800b206:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b20a:	e006      	b.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b20c:	bf00      	nop
 800b20e:	e004      	b.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b210:	bf00      	nop
 800b212:	e002      	b.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b214:	bf00      	nop
 800b216:	e000      	b.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b218:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b21a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d10e      	bne.n	800b240 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b222:	4b06      	ldr	r3, [pc, #24]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b226:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b22a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b22e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b232:	4a02      	ldr	r2, [pc, #8]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b234:	430b      	orrs	r3, r1
 800b236:	6593      	str	r3, [r2, #88]	; 0x58
 800b238:	e006      	b.n	800b248 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b23a:	bf00      	nop
 800b23c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b240:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b244:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b250:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b254:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b258:	2300      	movs	r3, #0
 800b25a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b25e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b262:	460b      	mov	r3, r1
 800b264:	4313      	orrs	r3, r2
 800b266:	d055      	beq.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b26c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b270:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b274:	d033      	beq.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b276:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b27a:	d82c      	bhi.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b27c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b280:	d02f      	beq.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b286:	d826      	bhi.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b288:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b28c:	d02b      	beq.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b28e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b292:	d820      	bhi.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b298:	d012      	beq.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b29a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b29e:	d81a      	bhi.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d022      	beq.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b2a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2a8:	d115      	bne.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b2aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ae:	3308      	adds	r3, #8
 800b2b0:	2100      	movs	r1, #0
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f001 fbf6 	bl	800caa4 <RCCEx_PLL2_Config>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b2be:	e015      	b.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b2c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2c4:	3328      	adds	r3, #40	; 0x28
 800b2c6:	2102      	movs	r1, #2
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f001 fc9d 	bl	800cc08 <RCCEx_PLL3_Config>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b2d4:	e00a      	b.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b2dc:	e006      	b.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b2de:	bf00      	nop
 800b2e0:	e004      	b.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b2e2:	bf00      	nop
 800b2e4:	e002      	b.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b2e6:	bf00      	nop
 800b2e8:	e000      	b.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b2ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d10b      	bne.n	800b30c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b2f4:	4ba0      	ldr	r3, [pc, #640]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b2f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2f8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b2fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b300:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b304:	4a9c      	ldr	r2, [pc, #624]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b306:	430b      	orrs	r3, r1
 800b308:	6593      	str	r3, [r2, #88]	; 0x58
 800b30a:	e003      	b.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b30c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b310:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b314:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31c:	f002 0308 	and.w	r3, r2, #8
 800b320:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b324:	2300      	movs	r3, #0
 800b326:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b32a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b32e:	460b      	mov	r3, r1
 800b330:	4313      	orrs	r3, r2
 800b332:	d01e      	beq.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b338:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b33c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b340:	d10c      	bne.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b346:	3328      	adds	r3, #40	; 0x28
 800b348:	2102      	movs	r1, #2
 800b34a:	4618      	mov	r0, r3
 800b34c:	f001 fc5c 	bl	800cc08 <RCCEx_PLL3_Config>
 800b350:	4603      	mov	r3, r0
 800b352:	2b00      	cmp	r3, #0
 800b354:	d002      	beq.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b356:	2301      	movs	r3, #1
 800b358:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b35c:	4b86      	ldr	r3, [pc, #536]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b35e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b360:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b368:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b36c:	4a82      	ldr	r2, [pc, #520]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b36e:	430b      	orrs	r3, r1
 800b370:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37a:	f002 0310 	and.w	r3, r2, #16
 800b37e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b382:	2300      	movs	r3, #0
 800b384:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b388:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b38c:	460b      	mov	r3, r1
 800b38e:	4313      	orrs	r3, r2
 800b390:	d01e      	beq.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b396:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b39a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b39e:	d10c      	bne.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b3a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3a4:	3328      	adds	r3, #40	; 0x28
 800b3a6:	2102      	movs	r1, #2
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f001 fc2d 	bl	800cc08 <RCCEx_PLL3_Config>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d002      	beq.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b3ba:	4b6f      	ldr	r3, [pc, #444]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b3bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b3c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b3ca:	4a6b      	ldr	r2, [pc, #428]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b3cc:	430b      	orrs	r3, r1
 800b3ce:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b3d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b3dc:	67bb      	str	r3, [r7, #120]	; 0x78
 800b3de:	2300      	movs	r3, #0
 800b3e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b3e2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b3e6:	460b      	mov	r3, r1
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	d03e      	beq.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b3ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b3f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3f8:	d022      	beq.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b3fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3fe:	d81b      	bhi.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b400:	2b00      	cmp	r3, #0
 800b402:	d003      	beq.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b408:	d00b      	beq.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b40a:	e015      	b.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b40c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b410:	3308      	adds	r3, #8
 800b412:	2100      	movs	r1, #0
 800b414:	4618      	mov	r0, r3
 800b416:	f001 fb45 	bl	800caa4 <RCCEx_PLL2_Config>
 800b41a:	4603      	mov	r3, r0
 800b41c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b420:	e00f      	b.n	800b442 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b426:	3328      	adds	r3, #40	; 0x28
 800b428:	2102      	movs	r1, #2
 800b42a:	4618      	mov	r0, r3
 800b42c:	f001 fbec 	bl	800cc08 <RCCEx_PLL3_Config>
 800b430:	4603      	mov	r3, r0
 800b432:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b436:	e004      	b.n	800b442 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b438:	2301      	movs	r3, #1
 800b43a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b43e:	e000      	b.n	800b442 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b440:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b442:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b446:	2b00      	cmp	r3, #0
 800b448:	d10b      	bne.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b44a:	4b4b      	ldr	r3, [pc, #300]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b44c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b44e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b452:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b456:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b45a:	4a47      	ldr	r2, [pc, #284]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b45c:	430b      	orrs	r3, r1
 800b45e:	6593      	str	r3, [r2, #88]	; 0x58
 800b460:	e003      	b.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b462:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b466:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b46a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b472:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b476:	673b      	str	r3, [r7, #112]	; 0x70
 800b478:	2300      	movs	r3, #0
 800b47a:	677b      	str	r3, [r7, #116]	; 0x74
 800b47c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b480:	460b      	mov	r3, r1
 800b482:	4313      	orrs	r3, r2
 800b484:	d03b      	beq.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b48a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b48e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b492:	d01f      	beq.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b494:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b498:	d818      	bhi.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b49a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b49e:	d003      	beq.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b4a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b4a4:	d007      	beq.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b4a6:	e011      	b.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4a8:	4b33      	ldr	r3, [pc, #204]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ac:	4a32      	ldr	r2, [pc, #200]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b4ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b4b4:	e00f      	b.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b4b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ba:	3328      	adds	r3, #40	; 0x28
 800b4bc:	2101      	movs	r1, #1
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f001 fba2 	bl	800cc08 <RCCEx_PLL3_Config>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b4ca:	e004      	b.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b4d2:	e000      	b.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b4d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d10b      	bne.n	800b4f6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b4de:	4b26      	ldr	r3, [pc, #152]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b4e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4e2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b4e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4ee:	4a22      	ldr	r2, [pc, #136]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b4f0:	430b      	orrs	r3, r1
 800b4f2:	6553      	str	r3, [r2, #84]	; 0x54
 800b4f4:	e003      	b.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4fa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b4fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b506:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b50a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b50c:	2300      	movs	r3, #0
 800b50e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b510:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b514:	460b      	mov	r3, r1
 800b516:	4313      	orrs	r3, r2
 800b518:	d034      	beq.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b51a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b51e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b520:	2b00      	cmp	r3, #0
 800b522:	d003      	beq.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b528:	d007      	beq.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b52a:	e011      	b.n	800b550 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b52c:	4b12      	ldr	r3, [pc, #72]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b530:	4a11      	ldr	r2, [pc, #68]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b536:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b538:	e00e      	b.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b53a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b53e:	3308      	adds	r3, #8
 800b540:	2102      	movs	r1, #2
 800b542:	4618      	mov	r0, r3
 800b544:	f001 faae 	bl	800caa4 <RCCEx_PLL2_Config>
 800b548:	4603      	mov	r3, r0
 800b54a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b54e:	e003      	b.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b550:	2301      	movs	r3, #1
 800b552:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b556:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b558:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d10d      	bne.n	800b57c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b560:	4b05      	ldr	r3, [pc, #20]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b564:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b56c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b56e:	4a02      	ldr	r2, [pc, #8]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b570:	430b      	orrs	r3, r1
 800b572:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b574:	e006      	b.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b576:	bf00      	nop
 800b578:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b57c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b580:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b590:	663b      	str	r3, [r7, #96]	; 0x60
 800b592:	2300      	movs	r3, #0
 800b594:	667b      	str	r3, [r7, #100]	; 0x64
 800b596:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b59a:	460b      	mov	r3, r1
 800b59c:	4313      	orrs	r3, r2
 800b59e:	d00c      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b5a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5a4:	3328      	adds	r3, #40	; 0x28
 800b5a6:	2102      	movs	r1, #2
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f001 fb2d 	bl	800cc08 <RCCEx_PLL3_Config>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d002      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b5ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b5c6:	65bb      	str	r3, [r7, #88]	; 0x58
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b5cc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	d036      	beq.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b5d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5e0:	d018      	beq.n	800b614 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b5e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5e6:	d811      	bhi.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b5e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5ec:	d014      	beq.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b5ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5f2:	d80b      	bhi.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d011      	beq.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b5f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5fc:	d106      	bne.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5fe:	4bb7      	ldr	r3, [pc, #732]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b602:	4ab6      	ldr	r2, [pc, #728]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b608:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b60a:	e008      	b.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b60c:	2301      	movs	r3, #1
 800b60e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b612:	e004      	b.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b614:	bf00      	nop
 800b616:	e002      	b.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b618:	bf00      	nop
 800b61a:	e000      	b.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b61c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b61e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b622:	2b00      	cmp	r3, #0
 800b624:	d10a      	bne.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b626:	4bad      	ldr	r3, [pc, #692]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b62a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b62e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b632:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b634:	4aa9      	ldr	r2, [pc, #676]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b636:	430b      	orrs	r3, r1
 800b638:	6553      	str	r3, [r2, #84]	; 0x54
 800b63a:	e003      	b.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b63c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b640:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b650:	653b      	str	r3, [r7, #80]	; 0x50
 800b652:	2300      	movs	r3, #0
 800b654:	657b      	str	r3, [r7, #84]	; 0x54
 800b656:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b65a:	460b      	mov	r3, r1
 800b65c:	4313      	orrs	r3, r2
 800b65e:	d009      	beq.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b660:	4b9e      	ldr	r3, [pc, #632]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b664:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b66c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b66e:	4a9b      	ldr	r2, [pc, #620]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b670:	430b      	orrs	r3, r1
 800b672:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b680:	64bb      	str	r3, [r7, #72]	; 0x48
 800b682:	2300      	movs	r3, #0
 800b684:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b686:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b68a:	460b      	mov	r3, r1
 800b68c:	4313      	orrs	r3, r2
 800b68e:	d009      	beq.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b690:	4b92      	ldr	r3, [pc, #584]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b694:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b69c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b69e:	4a8f      	ldr	r2, [pc, #572]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b6a0:	430b      	orrs	r3, r1
 800b6a2:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b6a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ac:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b6b0:	643b      	str	r3, [r7, #64]	; 0x40
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	647b      	str	r3, [r7, #68]	; 0x44
 800b6b6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	4313      	orrs	r3, r2
 800b6be:	d00e      	beq.n	800b6de <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b6c0:	4b86      	ldr	r3, [pc, #536]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b6c2:	691b      	ldr	r3, [r3, #16]
 800b6c4:	4a85      	ldr	r2, [pc, #532]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b6c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b6ca:	6113      	str	r3, [r2, #16]
 800b6cc:	4b83      	ldr	r3, [pc, #524]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b6ce:	6919      	ldr	r1, [r3, #16]
 800b6d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b6d8:	4a80      	ldr	r2, [pc, #512]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b6da:	430b      	orrs	r3, r1
 800b6dc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b6de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b6ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6f0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b6f4:	460b      	mov	r3, r1
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	d009      	beq.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b6fa:	4b78      	ldr	r3, [pc, #480]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b6fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6fe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b708:	4a74      	ldr	r2, [pc, #464]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b70a:	430b      	orrs	r3, r1
 800b70c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b70e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b716:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b71a:	633b      	str	r3, [r7, #48]	; 0x30
 800b71c:	2300      	movs	r3, #0
 800b71e:	637b      	str	r3, [r7, #52]	; 0x34
 800b720:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b724:	460b      	mov	r3, r1
 800b726:	4313      	orrs	r3, r2
 800b728:	d00a      	beq.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b72a:	4b6c      	ldr	r3, [pc, #432]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b72c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b72e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b732:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b73a:	4a68      	ldr	r2, [pc, #416]	; (800b8dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b73c:	430b      	orrs	r3, r1
 800b73e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b748:	2100      	movs	r1, #0
 800b74a:	62b9      	str	r1, [r7, #40]	; 0x28
 800b74c:	f003 0301 	and.w	r3, r3, #1
 800b750:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b752:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b756:	460b      	mov	r3, r1
 800b758:	4313      	orrs	r3, r2
 800b75a:	d011      	beq.n	800b780 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b75c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b760:	3308      	adds	r3, #8
 800b762:	2100      	movs	r1, #0
 800b764:	4618      	mov	r0, r3
 800b766:	f001 f99d 	bl	800caa4 <RCCEx_PLL2_Config>
 800b76a:	4603      	mov	r3, r0
 800b76c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b770:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b774:	2b00      	cmp	r3, #0
 800b776:	d003      	beq.n	800b780 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b778:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b77c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b788:	2100      	movs	r1, #0
 800b78a:	6239      	str	r1, [r7, #32]
 800b78c:	f003 0302 	and.w	r3, r3, #2
 800b790:	627b      	str	r3, [r7, #36]	; 0x24
 800b792:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b796:	460b      	mov	r3, r1
 800b798:	4313      	orrs	r3, r2
 800b79a:	d011      	beq.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b79c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7a0:	3308      	adds	r3, #8
 800b7a2:	2101      	movs	r1, #1
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f001 f97d 	bl	800caa4 <RCCEx_PLL2_Config>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b7b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d003      	beq.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b7c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c8:	2100      	movs	r1, #0
 800b7ca:	61b9      	str	r1, [r7, #24]
 800b7cc:	f003 0304 	and.w	r3, r3, #4
 800b7d0:	61fb      	str	r3, [r7, #28]
 800b7d2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	d011      	beq.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b7dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7e0:	3308      	adds	r3, #8
 800b7e2:	2102      	movs	r1, #2
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f001 f95d 	bl	800caa4 <RCCEx_PLL2_Config>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b7f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d003      	beq.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b808:	2100      	movs	r1, #0
 800b80a:	6139      	str	r1, [r7, #16]
 800b80c:	f003 0308 	and.w	r3, r3, #8
 800b810:	617b      	str	r3, [r7, #20]
 800b812:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b816:	460b      	mov	r3, r1
 800b818:	4313      	orrs	r3, r2
 800b81a:	d011      	beq.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b81c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b820:	3328      	adds	r3, #40	; 0x28
 800b822:	2100      	movs	r1, #0
 800b824:	4618      	mov	r0, r3
 800b826:	f001 f9ef 	bl	800cc08 <RCCEx_PLL3_Config>
 800b82a:	4603      	mov	r3, r0
 800b82c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800b830:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b834:	2b00      	cmp	r3, #0
 800b836:	d003      	beq.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b838:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b83c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b848:	2100      	movs	r1, #0
 800b84a:	60b9      	str	r1, [r7, #8]
 800b84c:	f003 0310 	and.w	r3, r3, #16
 800b850:	60fb      	str	r3, [r7, #12]
 800b852:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b856:	460b      	mov	r3, r1
 800b858:	4313      	orrs	r3, r2
 800b85a:	d011      	beq.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b85c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b860:	3328      	adds	r3, #40	; 0x28
 800b862:	2101      	movs	r1, #1
 800b864:	4618      	mov	r0, r3
 800b866:	f001 f9cf 	bl	800cc08 <RCCEx_PLL3_Config>
 800b86a:	4603      	mov	r3, r0
 800b86c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b870:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b874:	2b00      	cmp	r3, #0
 800b876:	d003      	beq.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b878:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b87c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b888:	2100      	movs	r1, #0
 800b88a:	6039      	str	r1, [r7, #0]
 800b88c:	f003 0320 	and.w	r3, r3, #32
 800b890:	607b      	str	r3, [r7, #4]
 800b892:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b896:	460b      	mov	r3, r1
 800b898:	4313      	orrs	r3, r2
 800b89a:	d011      	beq.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b89c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8a0:	3328      	adds	r3, #40	; 0x28
 800b8a2:	2102      	movs	r1, #2
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f001 f9af 	bl	800cc08 <RCCEx_PLL3_Config>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b8b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d003      	beq.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800b8c0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d101      	bne.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	e000      	b.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800b8cc:	2301      	movs	r3, #1
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b8da:	bf00      	nop
 800b8dc:	58024400 	.word	0x58024400

0800b8e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b090      	sub	sp, #64	; 0x40
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b8ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8ee:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800b8f2:	430b      	orrs	r3, r1
 800b8f4:	f040 8094 	bne.w	800ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b8f8:	4b9b      	ldr	r3, [pc, #620]	; (800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b8fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8fc:	f003 0307 	and.w	r3, r3, #7
 800b900:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b904:	2b04      	cmp	r3, #4
 800b906:	f200 8087 	bhi.w	800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b90a:	a201      	add	r2, pc, #4	; (adr r2, 800b910 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b90c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b910:	0800b925 	.word	0x0800b925
 800b914:	0800b94d 	.word	0x0800b94d
 800b918:	0800b975 	.word	0x0800b975
 800b91c:	0800ba11 	.word	0x0800ba11
 800b920:	0800b99d 	.word	0x0800b99d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b924:	4b90      	ldr	r3, [pc, #576]	; (800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b92c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b930:	d108      	bne.n	800b944 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b936:	4618      	mov	r0, r3
 800b938:	f000 ff62 	bl	800c800 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b93e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b940:	f000 bc93 	b.w	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b944:	2300      	movs	r3, #0
 800b946:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b948:	f000 bc8f 	b.w	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b94c:	4b86      	ldr	r3, [pc, #536]	; (800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b954:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b958:	d108      	bne.n	800b96c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b95a:	f107 0318 	add.w	r3, r7, #24
 800b95e:	4618      	mov	r0, r3
 800b960:	f000 fca6 	bl	800c2b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b964:	69bb      	ldr	r3, [r7, #24]
 800b966:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b968:	f000 bc7f 	b.w	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b96c:	2300      	movs	r3, #0
 800b96e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b970:	f000 bc7b 	b.w	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b974:	4b7c      	ldr	r3, [pc, #496]	; (800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b97c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b980:	d108      	bne.n	800b994 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b982:	f107 030c 	add.w	r3, r7, #12
 800b986:	4618      	mov	r0, r3
 800b988:	f000 fde6 	bl	800c558 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b990:	f000 bc6b 	b.w	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b994:	2300      	movs	r3, #0
 800b996:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b998:	f000 bc67 	b.w	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b99c:	4b72      	ldr	r3, [pc, #456]	; (800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b99e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b9a4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b9a6:	4b70      	ldr	r3, [pc, #448]	; (800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f003 0304 	and.w	r3, r3, #4
 800b9ae:	2b04      	cmp	r3, #4
 800b9b0:	d10c      	bne.n	800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b9b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d109      	bne.n	800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b9b8:	4b6b      	ldr	r3, [pc, #428]	; (800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	08db      	lsrs	r3, r3, #3
 800b9be:	f003 0303 	and.w	r3, r3, #3
 800b9c2:	4a6a      	ldr	r2, [pc, #424]	; (800bb6c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b9c4:	fa22 f303 	lsr.w	r3, r2, r3
 800b9c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9ca:	e01f      	b.n	800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b9cc:	4b66      	ldr	r3, [pc, #408]	; (800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9d8:	d106      	bne.n	800b9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b9da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b9e0:	d102      	bne.n	800b9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b9e2:	4b63      	ldr	r3, [pc, #396]	; (800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9e6:	e011      	b.n	800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b9e8:	4b5f      	ldr	r3, [pc, #380]	; (800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9f4:	d106      	bne.n	800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b9f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9fc:	d102      	bne.n	800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b9fe:	4b5d      	ldr	r3, [pc, #372]	; (800bb74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ba00:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba02:	e003      	b.n	800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ba04:	2300      	movs	r3, #0
 800ba06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ba08:	f000 bc2f 	b.w	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ba0c:	f000 bc2d 	b.w	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ba10:	4b59      	ldr	r3, [pc, #356]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ba12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba14:	f000 bc29 	b.w	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba1c:	f000 bc25 	b.w	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ba20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba24:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800ba28:	430b      	orrs	r3, r1
 800ba2a:	f040 80a7 	bne.w	800bb7c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ba2e:	4b4e      	ldr	r3, [pc, #312]	; (800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ba30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba32:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800ba36:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ba38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ba3e:	d054      	beq.n	800baea <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800ba40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ba46:	f200 808b 	bhi.w	800bb60 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ba4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ba50:	f000 8083 	beq.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800ba54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba56:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ba5a:	f200 8081 	bhi.w	800bb60 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ba5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba64:	d02f      	beq.n	800bac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ba66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba6c:	d878      	bhi.n	800bb60 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ba6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d004      	beq.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800ba74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba7a:	d012      	beq.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800ba7c:	e070      	b.n	800bb60 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ba7e:	4b3a      	ldr	r3, [pc, #232]	; (800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba8a:	d107      	bne.n	800ba9c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba90:	4618      	mov	r0, r3
 800ba92:	f000 feb5 	bl	800c800 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba9a:	e3e6      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800baa0:	e3e3      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800baa2:	4b31      	ldr	r3, [pc, #196]	; (800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800baaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800baae:	d107      	bne.n	800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bab0:	f107 0318 	add.w	r3, r7, #24
 800bab4:	4618      	mov	r0, r3
 800bab6:	f000 fbfb 	bl	800c2b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800baba:	69bb      	ldr	r3, [r7, #24]
 800babc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800babe:	e3d4      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bac0:	2300      	movs	r3, #0
 800bac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bac4:	e3d1      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bac6:	4b28      	ldr	r3, [pc, #160]	; (800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bace:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bad2:	d107      	bne.n	800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bad4:	f107 030c 	add.w	r3, r7, #12
 800bad8:	4618      	mov	r0, r3
 800bada:	f000 fd3d 	bl	800c558 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bae2:	e3c2      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bae4:	2300      	movs	r3, #0
 800bae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bae8:	e3bf      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800baea:	4b1f      	ldr	r3, [pc, #124]	; (800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800baec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800baf2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800baf4:	4b1c      	ldr	r3, [pc, #112]	; (800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f003 0304 	and.w	r3, r3, #4
 800bafc:	2b04      	cmp	r3, #4
 800bafe:	d10c      	bne.n	800bb1a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800bb00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d109      	bne.n	800bb1a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb06:	4b18      	ldr	r3, [pc, #96]	; (800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	08db      	lsrs	r3, r3, #3
 800bb0c:	f003 0303 	and.w	r3, r3, #3
 800bb10:	4a16      	ldr	r2, [pc, #88]	; (800bb6c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bb12:	fa22 f303 	lsr.w	r3, r2, r3
 800bb16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb18:	e01e      	b.n	800bb58 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bb1a:	4b13      	ldr	r3, [pc, #76]	; (800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb26:	d106      	bne.n	800bb36 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800bb28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb2e:	d102      	bne.n	800bb36 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bb30:	4b0f      	ldr	r3, [pc, #60]	; (800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bb32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb34:	e010      	b.n	800bb58 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bb36:	4b0c      	ldr	r3, [pc, #48]	; (800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb42:	d106      	bne.n	800bb52 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800bb44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb4a:	d102      	bne.n	800bb52 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bb4c:	4b09      	ldr	r3, [pc, #36]	; (800bb74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb50:	e002      	b.n	800bb58 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bb52:	2300      	movs	r3, #0
 800bb54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bb56:	e388      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bb58:	e387      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bb5a:	4b07      	ldr	r3, [pc, #28]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bb5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb5e:	e384      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bb60:	2300      	movs	r3, #0
 800bb62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb64:	e381      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bb66:	bf00      	nop
 800bb68:	58024400 	.word	0x58024400
 800bb6c:	03d09000 	.word	0x03d09000
 800bb70:	003d0900 	.word	0x003d0900
 800bb74:	02faf080 	.word	0x02faf080
 800bb78:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800bb7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb80:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800bb84:	430b      	orrs	r3, r1
 800bb86:	f040 809c 	bne.w	800bcc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800bb8a:	4b9e      	ldr	r3, [pc, #632]	; (800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bb8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb8e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800bb92:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bb9a:	d054      	beq.n	800bc46 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800bb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bba2:	f200 808b 	bhi.w	800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bbac:	f000 8083 	beq.w	800bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800bbb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bbb6:	f200 8081 	bhi.w	800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bbc0:	d02f      	beq.n	800bc22 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800bbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bbc8:	d878      	bhi.n	800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d004      	beq.n	800bbda <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800bbd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bbd6:	d012      	beq.n	800bbfe <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800bbd8:	e070      	b.n	800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bbda:	4b8a      	ldr	r3, [pc, #552]	; (800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbe2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bbe6:	d107      	bne.n	800bbf8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bbe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bbec:	4618      	mov	r0, r3
 800bbee:	f000 fe07 	bl	800c800 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbf6:	e338      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbfc:	e335      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bbfe:	4b81      	ldr	r3, [pc, #516]	; (800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc0a:	d107      	bne.n	800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc0c:	f107 0318 	add.w	r3, r7, #24
 800bc10:	4618      	mov	r0, r3
 800bc12:	f000 fb4d 	bl	800c2b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bc16:	69bb      	ldr	r3, [r7, #24]
 800bc18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc1a:	e326      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc20:	e323      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc22:	4b78      	ldr	r3, [pc, #480]	; (800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc2e:	d107      	bne.n	800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc30:	f107 030c 	add.w	r3, r7, #12
 800bc34:	4618      	mov	r0, r3
 800bc36:	f000 fc8f 	bl	800c558 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc3e:	e314      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc40:	2300      	movs	r3, #0
 800bc42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc44:	e311      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bc46:	4b6f      	ldr	r3, [pc, #444]	; (800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bc4e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc50:	4b6c      	ldr	r3, [pc, #432]	; (800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f003 0304 	and.w	r3, r3, #4
 800bc58:	2b04      	cmp	r3, #4
 800bc5a:	d10c      	bne.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800bc5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d109      	bne.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc62:	4b68      	ldr	r3, [pc, #416]	; (800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	08db      	lsrs	r3, r3, #3
 800bc68:	f003 0303 	and.w	r3, r3, #3
 800bc6c:	4a66      	ldr	r2, [pc, #408]	; (800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bc6e:	fa22 f303 	lsr.w	r3, r2, r3
 800bc72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc74:	e01e      	b.n	800bcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bc76:	4b63      	ldr	r3, [pc, #396]	; (800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc82:	d106      	bne.n	800bc92 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800bc84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc8a:	d102      	bne.n	800bc92 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bc8c:	4b5f      	ldr	r3, [pc, #380]	; (800be0c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800bc8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc90:	e010      	b.n	800bcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc92:	4b5c      	ldr	r3, [pc, #368]	; (800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc9e:	d106      	bne.n	800bcae <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800bca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bca2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bca6:	d102      	bne.n	800bcae <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bca8:	4b59      	ldr	r3, [pc, #356]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bcaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcac:	e002      	b.n	800bcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bcb2:	e2da      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bcb4:	e2d9      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bcb6:	4b57      	ldr	r3, [pc, #348]	; (800be14 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bcb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcba:	e2d6      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcc0:	e2d3      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bcc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcc6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800bcca:	430b      	orrs	r3, r1
 800bccc:	f040 80a7 	bne.w	800be1e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800bcd0:	4b4c      	ldr	r3, [pc, #304]	; (800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bcd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcd4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bcd8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bcda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bce0:	d055      	beq.n	800bd8e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800bce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bce8:	f200 8096 	bhi.w	800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bcec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bcf2:	f000 8084 	beq.w	800bdfe <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800bcf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bcfc:	f200 808c 	bhi.w	800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bd00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd06:	d030      	beq.n	800bd6a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800bd08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd0e:	f200 8083 	bhi.w	800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d004      	beq.n	800bd22 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800bd18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd1e:	d012      	beq.n	800bd46 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800bd20:	e07a      	b.n	800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd22:	4b38      	ldr	r3, [pc, #224]	; (800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd2e:	d107      	bne.n	800bd40 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd34:	4618      	mov	r0, r3
 800bd36:	f000 fd63 	bl	800c800 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd3e:	e294      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd40:	2300      	movs	r3, #0
 800bd42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd44:	e291      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd46:	4b2f      	ldr	r3, [pc, #188]	; (800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd52:	d107      	bne.n	800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd54:	f107 0318 	add.w	r3, r7, #24
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f000 faa9 	bl	800c2b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bd5e:	69bb      	ldr	r3, [r7, #24]
 800bd60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd62:	e282      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd64:	2300      	movs	r3, #0
 800bd66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd68:	e27f      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bd6a:	4b26      	ldr	r3, [pc, #152]	; (800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd76:	d107      	bne.n	800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd78:	f107 030c 	add.w	r3, r7, #12
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f000 fbeb 	bl	800c558 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd86:	e270      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd8c:	e26d      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bd8e:	4b1d      	ldr	r3, [pc, #116]	; (800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bd96:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd98:	4b1a      	ldr	r3, [pc, #104]	; (800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f003 0304 	and.w	r3, r3, #4
 800bda0:	2b04      	cmp	r3, #4
 800bda2:	d10c      	bne.n	800bdbe <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800bda4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d109      	bne.n	800bdbe <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bdaa:	4b16      	ldr	r3, [pc, #88]	; (800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	08db      	lsrs	r3, r3, #3
 800bdb0:	f003 0303 	and.w	r3, r3, #3
 800bdb4:	4a14      	ldr	r2, [pc, #80]	; (800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bdb6:	fa22 f303 	lsr.w	r3, r2, r3
 800bdba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdbc:	e01e      	b.n	800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bdbe:	4b11      	ldr	r3, [pc, #68]	; (800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdca:	d106      	bne.n	800bdda <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800bdcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bdd2:	d102      	bne.n	800bdda <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bdd4:	4b0d      	ldr	r3, [pc, #52]	; (800be0c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800bdd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdd8:	e010      	b.n	800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bdda:	4b0a      	ldr	r3, [pc, #40]	; (800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bde2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bde6:	d106      	bne.n	800bdf6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800bde8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdee:	d102      	bne.n	800bdf6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bdf0:	4b07      	ldr	r3, [pc, #28]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bdf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdf4:	e002      	b.n	800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bdfa:	e236      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bdfc:	e235      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bdfe:	4b05      	ldr	r3, [pc, #20]	; (800be14 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800be00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be02:	e232      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800be04:	58024400 	.word	0x58024400
 800be08:	03d09000 	.word	0x03d09000
 800be0c:	003d0900 	.word	0x003d0900
 800be10:	02faf080 	.word	0x02faf080
 800be14:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800be18:	2300      	movs	r3, #0
 800be1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be1c:	e225      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800be1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be22:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800be26:	430b      	orrs	r3, r1
 800be28:	f040 8085 	bne.w	800bf36 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800be2c:	4b9c      	ldr	r3, [pc, #624]	; (800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800be2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be30:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800be34:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800be36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800be3c:	d06b      	beq.n	800bf16 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800be3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800be44:	d874      	bhi.n	800bf30 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800be46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800be4c:	d056      	beq.n	800befc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800be4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800be54:	d86c      	bhi.n	800bf30 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800be56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800be5c:	d03b      	beq.n	800bed6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800be5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800be64:	d864      	bhi.n	800bf30 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800be66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be6c:	d021      	beq.n	800beb2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800be6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be74:	d85c      	bhi.n	800bf30 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800be76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d004      	beq.n	800be86 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800be7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be82:	d004      	beq.n	800be8e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800be84:	e054      	b.n	800bf30 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800be86:	f7fe fb5f 	bl	800a548 <HAL_RCC_GetPCLK1Freq>
 800be8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800be8c:	e1ed      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be8e:	4b84      	ldr	r3, [pc, #528]	; (800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be9a:	d107      	bne.n	800beac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be9c:	f107 0318 	add.w	r3, r7, #24
 800bea0:	4618      	mov	r0, r3
 800bea2:	f000 fa05 	bl	800c2b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bea6:	69fb      	ldr	r3, [r7, #28]
 800bea8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800beaa:	e1de      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800beac:	2300      	movs	r3, #0
 800beae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800beb0:	e1db      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800beb2:	4b7b      	ldr	r3, [pc, #492]	; (800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800beba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bebe:	d107      	bne.n	800bed0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bec0:	f107 030c 	add.w	r3, r7, #12
 800bec4:	4618      	mov	r0, r3
 800bec6:	f000 fb47 	bl	800c558 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800beca:	693b      	ldr	r3, [r7, #16]
 800becc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bece:	e1cc      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bed0:	2300      	movs	r3, #0
 800bed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bed4:	e1c9      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bed6:	4b72      	ldr	r3, [pc, #456]	; (800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f003 0304 	and.w	r3, r3, #4
 800bede:	2b04      	cmp	r3, #4
 800bee0:	d109      	bne.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bee2:	4b6f      	ldr	r3, [pc, #444]	; (800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	08db      	lsrs	r3, r3, #3
 800bee8:	f003 0303 	and.w	r3, r3, #3
 800beec:	4a6d      	ldr	r2, [pc, #436]	; (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800beee:	fa22 f303 	lsr.w	r3, r2, r3
 800bef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bef4:	e1b9      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bef6:	2300      	movs	r3, #0
 800bef8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800befa:	e1b6      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800befc:	4b68      	ldr	r3, [pc, #416]	; (800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf08:	d102      	bne.n	800bf10 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800bf0a:	4b67      	ldr	r3, [pc, #412]	; (800c0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800bf0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf0e:	e1ac      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf10:	2300      	movs	r3, #0
 800bf12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf14:	e1a9      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bf16:	4b62      	ldr	r3, [pc, #392]	; (800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf22:	d102      	bne.n	800bf2a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800bf24:	4b61      	ldr	r3, [pc, #388]	; (800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800bf26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf28:	e19f      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf2e:	e19c      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bf30:	2300      	movs	r3, #0
 800bf32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf34:	e199      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800bf36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf3a:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800bf3e:	430b      	orrs	r3, r1
 800bf40:	d173      	bne.n	800c02a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800bf42:	4b57      	ldr	r3, [pc, #348]	; (800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bf44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bf4a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bf4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf52:	d02f      	beq.n	800bfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800bf54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf5a:	d863      	bhi.n	800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800bf5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d004      	beq.n	800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800bf62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf68:	d012      	beq.n	800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800bf6a:	e05b      	b.n	800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf6c:	4b4c      	ldr	r3, [pc, #304]	; (800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf78:	d107      	bne.n	800bf8a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf7a:	f107 0318 	add.w	r3, r7, #24
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f000 f996 	bl	800c2b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf84:	69bb      	ldr	r3, [r7, #24]
 800bf86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf88:	e16f      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf8e:	e16c      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf90:	4b43      	ldr	r3, [pc, #268]	; (800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf9c:	d107      	bne.n	800bfae <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf9e:	f107 030c 	add.w	r3, r7, #12
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f000 fad8 	bl	800c558 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfac:	e15d      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfb2:	e15a      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bfb4:	4b3a      	ldr	r3, [pc, #232]	; (800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bfb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bfbc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bfbe:	4b38      	ldr	r3, [pc, #224]	; (800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f003 0304 	and.w	r3, r3, #4
 800bfc6:	2b04      	cmp	r3, #4
 800bfc8:	d10c      	bne.n	800bfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800bfca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d109      	bne.n	800bfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bfd0:	4b33      	ldr	r3, [pc, #204]	; (800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	08db      	lsrs	r3, r3, #3
 800bfd6:	f003 0303 	and.w	r3, r3, #3
 800bfda:	4a32      	ldr	r2, [pc, #200]	; (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800bfdc:	fa22 f303 	lsr.w	r3, r2, r3
 800bfe0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfe2:	e01e      	b.n	800c022 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bfe4:	4b2e      	ldr	r3, [pc, #184]	; (800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bff0:	d106      	bne.n	800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800bff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bff4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bff8:	d102      	bne.n	800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bffa:	4b2b      	ldr	r3, [pc, #172]	; (800c0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800bffc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bffe:	e010      	b.n	800c022 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c000:	4b27      	ldr	r3, [pc, #156]	; (800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c008:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c00c:	d106      	bne.n	800c01c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c00e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c014:	d102      	bne.n	800c01c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c016:	4b25      	ldr	r3, [pc, #148]	; (800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c01a:	e002      	b.n	800c022 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c01c:	2300      	movs	r3, #0
 800c01e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c020:	e123      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c022:	e122      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c024:	2300      	movs	r3, #0
 800c026:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c028:	e11f      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c02a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c02e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c032:	430b      	orrs	r3, r1
 800c034:	d13c      	bne.n	800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c036:	4b1a      	ldr	r3, [pc, #104]	; (800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c03a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c03e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c042:	2b00      	cmp	r3, #0
 800c044:	d004      	beq.n	800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c04c:	d012      	beq.n	800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c04e:	e023      	b.n	800c098 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c050:	4b13      	ldr	r3, [pc, #76]	; (800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c058:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c05c:	d107      	bne.n	800c06e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c05e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c062:	4618      	mov	r0, r3
 800c064:	f000 fbcc 	bl	800c800 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c06a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c06c:	e0fd      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c06e:	2300      	movs	r3, #0
 800c070:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c072:	e0fa      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c074:	4b0a      	ldr	r3, [pc, #40]	; (800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c07c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c080:	d107      	bne.n	800c092 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c082:	f107 0318 	add.w	r3, r7, #24
 800c086:	4618      	mov	r0, r3
 800c088:	f000 f912 	bl	800c2b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c08c:	6a3b      	ldr	r3, [r7, #32]
 800c08e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c090:	e0eb      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c092:	2300      	movs	r3, #0
 800c094:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c096:	e0e8      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c098:	2300      	movs	r3, #0
 800c09a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c09c:	e0e5      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c09e:	bf00      	nop
 800c0a0:	58024400 	.word	0x58024400
 800c0a4:	03d09000 	.word	0x03d09000
 800c0a8:	003d0900 	.word	0x003d0900
 800c0ac:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c0b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0b4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c0b8:	430b      	orrs	r3, r1
 800c0ba:	f040 8085 	bne.w	800c1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c0be:	4b6d      	ldr	r3, [pc, #436]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c0c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0c2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c0c6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c0ce:	d06b      	beq.n	800c1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c0d6:	d874      	bhi.n	800c1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0de:	d056      	beq.n	800c18e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0e6:	d86c      	bhi.n	800c1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c0ee:	d03b      	beq.n	800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c0f6:	d864      	bhi.n	800c1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0fe:	d021      	beq.n	800c144 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c102:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c106:	d85c      	bhi.n	800c1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d004      	beq.n	800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c110:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c114:	d004      	beq.n	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c116:	e054      	b.n	800c1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c118:	f000 f8b4 	bl	800c284 <HAL_RCCEx_GetD3PCLK1Freq>
 800c11c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c11e:	e0a4      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c120:	4b54      	ldr	r3, [pc, #336]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c128:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c12c:	d107      	bne.n	800c13e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c12e:	f107 0318 	add.w	r3, r7, #24
 800c132:	4618      	mov	r0, r3
 800c134:	f000 f8bc 	bl	800c2b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c138:	69fb      	ldr	r3, [r7, #28]
 800c13a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c13c:	e095      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c13e:	2300      	movs	r3, #0
 800c140:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c142:	e092      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c144:	4b4b      	ldr	r3, [pc, #300]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c14c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c150:	d107      	bne.n	800c162 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c152:	f107 030c 	add.w	r3, r7, #12
 800c156:	4618      	mov	r0, r3
 800c158:	f000 f9fe 	bl	800c558 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c160:	e083      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c162:	2300      	movs	r3, #0
 800c164:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c166:	e080      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c168:	4b42      	ldr	r3, [pc, #264]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f003 0304 	and.w	r3, r3, #4
 800c170:	2b04      	cmp	r3, #4
 800c172:	d109      	bne.n	800c188 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c174:	4b3f      	ldr	r3, [pc, #252]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	08db      	lsrs	r3, r3, #3
 800c17a:	f003 0303 	and.w	r3, r3, #3
 800c17e:	4a3e      	ldr	r2, [pc, #248]	; (800c278 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c180:	fa22 f303 	lsr.w	r3, r2, r3
 800c184:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c186:	e070      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c188:	2300      	movs	r3, #0
 800c18a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c18c:	e06d      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c18e:	4b39      	ldr	r3, [pc, #228]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c19a:	d102      	bne.n	800c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c19c:	4b37      	ldr	r3, [pc, #220]	; (800c27c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c19e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1a0:	e063      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1a6:	e060      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c1a8:	4b32      	ldr	r3, [pc, #200]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1b4:	d102      	bne.n	800c1bc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c1b6:	4b32      	ldr	r3, [pc, #200]	; (800c280 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c1b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1ba:	e056      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1c0:	e053      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1c6:	e050      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c1c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1cc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c1d0:	430b      	orrs	r3, r1
 800c1d2:	d148      	bne.n	800c266 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c1d4:	4b27      	ldr	r3, [pc, #156]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c1d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c1dc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1e4:	d02a      	beq.n	800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1ec:	d838      	bhi.n	800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d004      	beq.n	800c1fe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1fa:	d00d      	beq.n	800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c1fc:	e030      	b.n	800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c1fe:	4b1d      	ldr	r3, [pc, #116]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c206:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c20a:	d102      	bne.n	800c212 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c20c:	4b1c      	ldr	r3, [pc, #112]	; (800c280 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c20e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c210:	e02b      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c212:	2300      	movs	r3, #0
 800c214:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c216:	e028      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c218:	4b16      	ldr	r3, [pc, #88]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c220:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c224:	d107      	bne.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c22a:	4618      	mov	r0, r3
 800c22c:	f000 fae8 	bl	800c800 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c232:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c234:	e019      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c236:	2300      	movs	r3, #0
 800c238:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c23a:	e016      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c23c:	4b0d      	ldr	r3, [pc, #52]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c244:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c248:	d107      	bne.n	800c25a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c24a:	f107 0318 	add.w	r3, r7, #24
 800c24e:	4618      	mov	r0, r3
 800c250:	f000 f82e 	bl	800c2b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c254:	69fb      	ldr	r3, [r7, #28]
 800c256:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c258:	e007      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c25a:	2300      	movs	r3, #0
 800c25c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c25e:	e004      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c260:	2300      	movs	r3, #0
 800c262:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c264:	e001      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c266:	2300      	movs	r3, #0
 800c268:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c26a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	3740      	adds	r7, #64	; 0x40
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}
 800c274:	58024400 	.word	0x58024400
 800c278:	03d09000 	.word	0x03d09000
 800c27c:	003d0900 	.word	0x003d0900
 800c280:	02faf080 	.word	0x02faf080

0800c284 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c288:	f7fe f92e 	bl	800a4e8 <HAL_RCC_GetHCLKFreq>
 800c28c:	4602      	mov	r2, r0
 800c28e:	4b06      	ldr	r3, [pc, #24]	; (800c2a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c290:	6a1b      	ldr	r3, [r3, #32]
 800c292:	091b      	lsrs	r3, r3, #4
 800c294:	f003 0307 	and.w	r3, r3, #7
 800c298:	4904      	ldr	r1, [pc, #16]	; (800c2ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c29a:	5ccb      	ldrb	r3, [r1, r3]
 800c29c:	f003 031f 	and.w	r3, r3, #31
 800c2a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	bd80      	pop	{r7, pc}
 800c2a8:	58024400 	.word	0x58024400
 800c2ac:	080181c4 	.word	0x080181c4

0800c2b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b089      	sub	sp, #36	; 0x24
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c2b8:	4ba1      	ldr	r3, [pc, #644]	; (800c540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2bc:	f003 0303 	and.w	r3, r3, #3
 800c2c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c2c2:	4b9f      	ldr	r3, [pc, #636]	; (800c540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2c6:	0b1b      	lsrs	r3, r3, #12
 800c2c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c2cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c2ce:	4b9c      	ldr	r3, [pc, #624]	; (800c540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2d2:	091b      	lsrs	r3, r3, #4
 800c2d4:	f003 0301 	and.w	r3, r3, #1
 800c2d8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c2da:	4b99      	ldr	r3, [pc, #612]	; (800c540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2de:	08db      	lsrs	r3, r3, #3
 800c2e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c2e4:	693a      	ldr	r2, [r7, #16]
 800c2e6:	fb02 f303 	mul.w	r3, r2, r3
 800c2ea:	ee07 3a90 	vmov	s15, r3
 800c2ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	f000 8111 	beq.w	800c520 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c2fe:	69bb      	ldr	r3, [r7, #24]
 800c300:	2b02      	cmp	r3, #2
 800c302:	f000 8083 	beq.w	800c40c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c306:	69bb      	ldr	r3, [r7, #24]
 800c308:	2b02      	cmp	r3, #2
 800c30a:	f200 80a1 	bhi.w	800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c30e:	69bb      	ldr	r3, [r7, #24]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d003      	beq.n	800c31c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c314:	69bb      	ldr	r3, [r7, #24]
 800c316:	2b01      	cmp	r3, #1
 800c318:	d056      	beq.n	800c3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c31a:	e099      	b.n	800c450 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c31c:	4b88      	ldr	r3, [pc, #544]	; (800c540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f003 0320 	and.w	r3, r3, #32
 800c324:	2b00      	cmp	r3, #0
 800c326:	d02d      	beq.n	800c384 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c328:	4b85      	ldr	r3, [pc, #532]	; (800c540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	08db      	lsrs	r3, r3, #3
 800c32e:	f003 0303 	and.w	r3, r3, #3
 800c332:	4a84      	ldr	r2, [pc, #528]	; (800c544 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c334:	fa22 f303 	lsr.w	r3, r2, r3
 800c338:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	ee07 3a90 	vmov	s15, r3
 800c340:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	ee07 3a90 	vmov	s15, r3
 800c34a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c34e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c352:	4b7b      	ldr	r3, [pc, #492]	; (800c540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c35a:	ee07 3a90 	vmov	s15, r3
 800c35e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c362:	ed97 6a03 	vldr	s12, [r7, #12]
 800c366:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c548 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c36a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c36e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c37a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c37e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c382:	e087      	b.n	800c494 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	ee07 3a90 	vmov	s15, r3
 800c38a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c38e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c54c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c396:	4b6a      	ldr	r3, [pc, #424]	; (800c540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c39a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c39e:	ee07 3a90 	vmov	s15, r3
 800c3a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c548 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c3ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c3c6:	e065      	b.n	800c494 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	ee07 3a90 	vmov	s15, r3
 800c3ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c550 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c3d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3da:	4b59      	ldr	r3, [pc, #356]	; (800c540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3e2:	ee07 3a90 	vmov	s15, r3
 800c3e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c548 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c3f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c402:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c40a:	e043      	b.n	800c494 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	ee07 3a90 	vmov	s15, r3
 800c412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c416:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c554 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c41a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c41e:	4b48      	ldr	r3, [pc, #288]	; (800c540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c426:	ee07 3a90 	vmov	s15, r3
 800c42a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c42e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c432:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c548 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c43a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c43e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c44a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c44e:	e021      	b.n	800c494 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	ee07 3a90 	vmov	s15, r3
 800c456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c45a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c550 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c45e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c462:	4b37      	ldr	r3, [pc, #220]	; (800c540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c46a:	ee07 3a90 	vmov	s15, r3
 800c46e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c472:	ed97 6a03 	vldr	s12, [r7, #12]
 800c476:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c548 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c47a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c47e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c48a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c48e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c492:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c494:	4b2a      	ldr	r3, [pc, #168]	; (800c540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c498:	0a5b      	lsrs	r3, r3, #9
 800c49a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c49e:	ee07 3a90 	vmov	s15, r3
 800c4a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c4ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4ba:	ee17 2a90 	vmov	r2, s15
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c4c2:	4b1f      	ldr	r3, [pc, #124]	; (800c540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4c6:	0c1b      	lsrs	r3, r3, #16
 800c4c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4cc:	ee07 3a90 	vmov	s15, r3
 800c4d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c4dc:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4e8:	ee17 2a90 	vmov	r2, s15
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c4f0:	4b13      	ldr	r3, [pc, #76]	; (800c540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4f4:	0e1b      	lsrs	r3, r3, #24
 800c4f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4fa:	ee07 3a90 	vmov	s15, r3
 800c4fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c502:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c506:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c50a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c50e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c516:	ee17 2a90 	vmov	r2, s15
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c51e:	e008      	b.n	800c532 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2200      	movs	r2, #0
 800c524:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2200      	movs	r2, #0
 800c52a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2200      	movs	r2, #0
 800c530:	609a      	str	r2, [r3, #8]
}
 800c532:	bf00      	nop
 800c534:	3724      	adds	r7, #36	; 0x24
 800c536:	46bd      	mov	sp, r7
 800c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53c:	4770      	bx	lr
 800c53e:	bf00      	nop
 800c540:	58024400 	.word	0x58024400
 800c544:	03d09000 	.word	0x03d09000
 800c548:	46000000 	.word	0x46000000
 800c54c:	4c742400 	.word	0x4c742400
 800c550:	4a742400 	.word	0x4a742400
 800c554:	4c3ebc20 	.word	0x4c3ebc20

0800c558 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c558:	b480      	push	{r7}
 800c55a:	b089      	sub	sp, #36	; 0x24
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c560:	4ba1      	ldr	r3, [pc, #644]	; (800c7e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c564:	f003 0303 	and.w	r3, r3, #3
 800c568:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c56a:	4b9f      	ldr	r3, [pc, #636]	; (800c7e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c56c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c56e:	0d1b      	lsrs	r3, r3, #20
 800c570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c574:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c576:	4b9c      	ldr	r3, [pc, #624]	; (800c7e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c57a:	0a1b      	lsrs	r3, r3, #8
 800c57c:	f003 0301 	and.w	r3, r3, #1
 800c580:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c582:	4b99      	ldr	r3, [pc, #612]	; (800c7e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c586:	08db      	lsrs	r3, r3, #3
 800c588:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c58c:	693a      	ldr	r2, [r7, #16]
 800c58e:	fb02 f303 	mul.w	r3, r2, r3
 800c592:	ee07 3a90 	vmov	s15, r3
 800c596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c59a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	f000 8111 	beq.w	800c7c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c5a6:	69bb      	ldr	r3, [r7, #24]
 800c5a8:	2b02      	cmp	r3, #2
 800c5aa:	f000 8083 	beq.w	800c6b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c5ae:	69bb      	ldr	r3, [r7, #24]
 800c5b0:	2b02      	cmp	r3, #2
 800c5b2:	f200 80a1 	bhi.w	800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c5b6:	69bb      	ldr	r3, [r7, #24]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d003      	beq.n	800c5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c5bc:	69bb      	ldr	r3, [r7, #24]
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	d056      	beq.n	800c670 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c5c2:	e099      	b.n	800c6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c5c4:	4b88      	ldr	r3, [pc, #544]	; (800c7e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f003 0320 	and.w	r3, r3, #32
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d02d      	beq.n	800c62c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5d0:	4b85      	ldr	r3, [pc, #532]	; (800c7e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	08db      	lsrs	r3, r3, #3
 800c5d6:	f003 0303 	and.w	r3, r3, #3
 800c5da:	4a84      	ldr	r2, [pc, #528]	; (800c7ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c5dc:	fa22 f303 	lsr.w	r3, r2, r3
 800c5e0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	ee07 3a90 	vmov	s15, r3
 800c5e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	ee07 3a90 	vmov	s15, r3
 800c5f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5fa:	4b7b      	ldr	r3, [pc, #492]	; (800c7e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c602:	ee07 3a90 	vmov	s15, r3
 800c606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c60a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c60e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c7f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c61a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c61e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c622:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c626:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c62a:	e087      	b.n	800c73c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	ee07 3a90 	vmov	s15, r3
 800c632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c636:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c7f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c63a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c63e:	4b6a      	ldr	r3, [pc, #424]	; (800c7e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c646:	ee07 3a90 	vmov	s15, r3
 800c64a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c64e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c652:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c7f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c65a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c65e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c66a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c66e:	e065      	b.n	800c73c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	ee07 3a90 	vmov	s15, r3
 800c676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c67a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c7f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c67e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c682:	4b59      	ldr	r3, [pc, #356]	; (800c7e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c68a:	ee07 3a90 	vmov	s15, r3
 800c68e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c692:	ed97 6a03 	vldr	s12, [r7, #12]
 800c696:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c7f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c69a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c69e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6b2:	e043      	b.n	800c73c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	ee07 3a90 	vmov	s15, r3
 800c6ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c7fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c6c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6c6:	4b48      	ldr	r3, [pc, #288]	; (800c7e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c6c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6ce:	ee07 3a90 	vmov	s15, r3
 800c6d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6da:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c7f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c6de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6f6:	e021      	b.n	800c73c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	ee07 3a90 	vmov	s15, r3
 800c6fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c702:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c7f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c70a:	4b37      	ldr	r3, [pc, #220]	; (800c7e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c70c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c70e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c712:	ee07 3a90 	vmov	s15, r3
 800c716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c71a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c71e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c7f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c72a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c72e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c732:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c736:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c73a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c73c:	4b2a      	ldr	r3, [pc, #168]	; (800c7e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c73e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c740:	0a5b      	lsrs	r3, r3, #9
 800c742:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c746:	ee07 3a90 	vmov	s15, r3
 800c74a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c74e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c752:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c756:	edd7 6a07 	vldr	s13, [r7, #28]
 800c75a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c75e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c762:	ee17 2a90 	vmov	r2, s15
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c76a:	4b1f      	ldr	r3, [pc, #124]	; (800c7e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c76c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c76e:	0c1b      	lsrs	r3, r3, #16
 800c770:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c774:	ee07 3a90 	vmov	s15, r3
 800c778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c77c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c780:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c784:	edd7 6a07 	vldr	s13, [r7, #28]
 800c788:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c78c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c790:	ee17 2a90 	vmov	r2, s15
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c798:	4b13      	ldr	r3, [pc, #76]	; (800c7e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c79a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c79c:	0e1b      	lsrs	r3, r3, #24
 800c79e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7a2:	ee07 3a90 	vmov	s15, r3
 800c7a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c7ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c7b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c7b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7be:	ee17 2a90 	vmov	r2, s15
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c7c6:	e008      	b.n	800c7da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	609a      	str	r2, [r3, #8]
}
 800c7da:	bf00      	nop
 800c7dc:	3724      	adds	r7, #36	; 0x24
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e4:	4770      	bx	lr
 800c7e6:	bf00      	nop
 800c7e8:	58024400 	.word	0x58024400
 800c7ec:	03d09000 	.word	0x03d09000
 800c7f0:	46000000 	.word	0x46000000
 800c7f4:	4c742400 	.word	0x4c742400
 800c7f8:	4a742400 	.word	0x4a742400
 800c7fc:	4c3ebc20 	.word	0x4c3ebc20

0800c800 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c800:	b480      	push	{r7}
 800c802:	b089      	sub	sp, #36	; 0x24
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c808:	4ba0      	ldr	r3, [pc, #640]	; (800ca8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c80a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c80c:	f003 0303 	and.w	r3, r3, #3
 800c810:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c812:	4b9e      	ldr	r3, [pc, #632]	; (800ca8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c816:	091b      	lsrs	r3, r3, #4
 800c818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c81c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c81e:	4b9b      	ldr	r3, [pc, #620]	; (800ca8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c822:	f003 0301 	and.w	r3, r3, #1
 800c826:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c828:	4b98      	ldr	r3, [pc, #608]	; (800ca8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c82a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c82c:	08db      	lsrs	r3, r3, #3
 800c82e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c832:	693a      	ldr	r2, [r7, #16]
 800c834:	fb02 f303 	mul.w	r3, r2, r3
 800c838:	ee07 3a90 	vmov	s15, r3
 800c83c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c840:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	2b00      	cmp	r3, #0
 800c848:	f000 8111 	beq.w	800ca6e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c84c:	69bb      	ldr	r3, [r7, #24]
 800c84e:	2b02      	cmp	r3, #2
 800c850:	f000 8083 	beq.w	800c95a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c854:	69bb      	ldr	r3, [r7, #24]
 800c856:	2b02      	cmp	r3, #2
 800c858:	f200 80a1 	bhi.w	800c99e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c85c:	69bb      	ldr	r3, [r7, #24]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d003      	beq.n	800c86a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c862:	69bb      	ldr	r3, [r7, #24]
 800c864:	2b01      	cmp	r3, #1
 800c866:	d056      	beq.n	800c916 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c868:	e099      	b.n	800c99e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c86a:	4b88      	ldr	r3, [pc, #544]	; (800ca8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f003 0320 	and.w	r3, r3, #32
 800c872:	2b00      	cmp	r3, #0
 800c874:	d02d      	beq.n	800c8d2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c876:	4b85      	ldr	r3, [pc, #532]	; (800ca8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	08db      	lsrs	r3, r3, #3
 800c87c:	f003 0303 	and.w	r3, r3, #3
 800c880:	4a83      	ldr	r2, [pc, #524]	; (800ca90 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c882:	fa22 f303 	lsr.w	r3, r2, r3
 800c886:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	ee07 3a90 	vmov	s15, r3
 800c88e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	ee07 3a90 	vmov	s15, r3
 800c898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c89c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8a0:	4b7a      	ldr	r3, [pc, #488]	; (800ca8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8a8:	ee07 3a90 	vmov	s15, r3
 800c8ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8b4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ca94 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c8b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8cc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c8d0:	e087      	b.n	800c9e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	ee07 3a90 	vmov	s15, r3
 800c8d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8dc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ca98 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c8e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8e4:	4b69      	ldr	r3, [pc, #420]	; (800ca8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8ec:	ee07 3a90 	vmov	s15, r3
 800c8f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8f8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ca94 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c8fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c900:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c904:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c908:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c90c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c910:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c914:	e065      	b.n	800c9e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	ee07 3a90 	vmov	s15, r3
 800c91c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c920:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ca9c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c924:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c928:	4b58      	ldr	r3, [pc, #352]	; (800ca8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c92a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c92c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c930:	ee07 3a90 	vmov	s15, r3
 800c934:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c938:	ed97 6a03 	vldr	s12, [r7, #12]
 800c93c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ca94 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c940:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c944:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c948:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c94c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c950:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c954:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c958:	e043      	b.n	800c9e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	ee07 3a90 	vmov	s15, r3
 800c960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c964:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800caa0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c968:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c96c:	4b47      	ldr	r3, [pc, #284]	; (800ca8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c96e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c974:	ee07 3a90 	vmov	s15, r3
 800c978:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c97c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c980:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ca94 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c984:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c988:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c98c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c990:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c994:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c998:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c99c:	e021      	b.n	800c9e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	ee07 3a90 	vmov	s15, r3
 800c9a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9a8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ca98 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c9ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9b0:	4b36      	ldr	r3, [pc, #216]	; (800ca8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9b8:	ee07 3a90 	vmov	s15, r3
 800c9bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9c0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9c4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ca94 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c9c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9e0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c9e2:	4b2a      	ldr	r3, [pc, #168]	; (800ca8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9e6:	0a5b      	lsrs	r3, r3, #9
 800c9e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9ec:	ee07 3a90 	vmov	s15, r3
 800c9f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca08:	ee17 2a90 	vmov	r2, s15
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ca10:	4b1e      	ldr	r3, [pc, #120]	; (800ca8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca14:	0c1b      	lsrs	r3, r3, #16
 800ca16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca1a:	ee07 3a90 	vmov	s15, r3
 800ca1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca26:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca2a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca36:	ee17 2a90 	vmov	r2, s15
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ca3e:	4b13      	ldr	r3, [pc, #76]	; (800ca8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca42:	0e1b      	lsrs	r3, r3, #24
 800ca44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca48:	ee07 3a90 	vmov	s15, r3
 800ca4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca54:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca58:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca64:	ee17 2a90 	vmov	r2, s15
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ca6c:	e008      	b.n	800ca80 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2200      	movs	r2, #0
 800ca72:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2200      	movs	r2, #0
 800ca78:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	609a      	str	r2, [r3, #8]
}
 800ca80:	bf00      	nop
 800ca82:	3724      	adds	r7, #36	; 0x24
 800ca84:	46bd      	mov	sp, r7
 800ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8a:	4770      	bx	lr
 800ca8c:	58024400 	.word	0x58024400
 800ca90:	03d09000 	.word	0x03d09000
 800ca94:	46000000 	.word	0x46000000
 800ca98:	4c742400 	.word	0x4c742400
 800ca9c:	4a742400 	.word	0x4a742400
 800caa0:	4c3ebc20 	.word	0x4c3ebc20

0800caa4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b084      	sub	sp, #16
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
 800caac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800caae:	2300      	movs	r3, #0
 800cab0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cab2:	4b53      	ldr	r3, [pc, #332]	; (800cc00 <RCCEx_PLL2_Config+0x15c>)
 800cab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cab6:	f003 0303 	and.w	r3, r3, #3
 800caba:	2b03      	cmp	r3, #3
 800cabc:	d101      	bne.n	800cac2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cabe:	2301      	movs	r3, #1
 800cac0:	e099      	b.n	800cbf6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cac2:	4b4f      	ldr	r3, [pc, #316]	; (800cc00 <RCCEx_PLL2_Config+0x15c>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4a4e      	ldr	r2, [pc, #312]	; (800cc00 <RCCEx_PLL2_Config+0x15c>)
 800cac8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cacc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cace:	f7f6 fe93 	bl	80037f8 <HAL_GetTick>
 800cad2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cad4:	e008      	b.n	800cae8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cad6:	f7f6 fe8f 	bl	80037f8 <HAL_GetTick>
 800cada:	4602      	mov	r2, r0
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	1ad3      	subs	r3, r2, r3
 800cae0:	2b02      	cmp	r3, #2
 800cae2:	d901      	bls.n	800cae8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cae4:	2303      	movs	r3, #3
 800cae6:	e086      	b.n	800cbf6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cae8:	4b45      	ldr	r3, [pc, #276]	; (800cc00 <RCCEx_PLL2_Config+0x15c>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d1f0      	bne.n	800cad6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800caf4:	4b42      	ldr	r3, [pc, #264]	; (800cc00 <RCCEx_PLL2_Config+0x15c>)
 800caf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caf8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	031b      	lsls	r3, r3, #12
 800cb02:	493f      	ldr	r1, [pc, #252]	; (800cc00 <RCCEx_PLL2_Config+0x15c>)
 800cb04:	4313      	orrs	r3, r2
 800cb06:	628b      	str	r3, [r1, #40]	; 0x28
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	685b      	ldr	r3, [r3, #4]
 800cb0c:	3b01      	subs	r3, #1
 800cb0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	689b      	ldr	r3, [r3, #8]
 800cb16:	3b01      	subs	r3, #1
 800cb18:	025b      	lsls	r3, r3, #9
 800cb1a:	b29b      	uxth	r3, r3
 800cb1c:	431a      	orrs	r2, r3
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	68db      	ldr	r3, [r3, #12]
 800cb22:	3b01      	subs	r3, #1
 800cb24:	041b      	lsls	r3, r3, #16
 800cb26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cb2a:	431a      	orrs	r2, r3
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	691b      	ldr	r3, [r3, #16]
 800cb30:	3b01      	subs	r3, #1
 800cb32:	061b      	lsls	r3, r3, #24
 800cb34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cb38:	4931      	ldr	r1, [pc, #196]	; (800cc00 <RCCEx_PLL2_Config+0x15c>)
 800cb3a:	4313      	orrs	r3, r2
 800cb3c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cb3e:	4b30      	ldr	r3, [pc, #192]	; (800cc00 <RCCEx_PLL2_Config+0x15c>)
 800cb40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	695b      	ldr	r3, [r3, #20]
 800cb4a:	492d      	ldr	r1, [pc, #180]	; (800cc00 <RCCEx_PLL2_Config+0x15c>)
 800cb4c:	4313      	orrs	r3, r2
 800cb4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cb50:	4b2b      	ldr	r3, [pc, #172]	; (800cc00 <RCCEx_PLL2_Config+0x15c>)
 800cb52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb54:	f023 0220 	bic.w	r2, r3, #32
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	699b      	ldr	r3, [r3, #24]
 800cb5c:	4928      	ldr	r1, [pc, #160]	; (800cc00 <RCCEx_PLL2_Config+0x15c>)
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cb62:	4b27      	ldr	r3, [pc, #156]	; (800cc00 <RCCEx_PLL2_Config+0x15c>)
 800cb64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb66:	4a26      	ldr	r2, [pc, #152]	; (800cc00 <RCCEx_PLL2_Config+0x15c>)
 800cb68:	f023 0310 	bic.w	r3, r3, #16
 800cb6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cb6e:	4b24      	ldr	r3, [pc, #144]	; (800cc00 <RCCEx_PLL2_Config+0x15c>)
 800cb70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb72:	4b24      	ldr	r3, [pc, #144]	; (800cc04 <RCCEx_PLL2_Config+0x160>)
 800cb74:	4013      	ands	r3, r2
 800cb76:	687a      	ldr	r2, [r7, #4]
 800cb78:	69d2      	ldr	r2, [r2, #28]
 800cb7a:	00d2      	lsls	r2, r2, #3
 800cb7c:	4920      	ldr	r1, [pc, #128]	; (800cc00 <RCCEx_PLL2_Config+0x15c>)
 800cb7e:	4313      	orrs	r3, r2
 800cb80:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cb82:	4b1f      	ldr	r3, [pc, #124]	; (800cc00 <RCCEx_PLL2_Config+0x15c>)
 800cb84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb86:	4a1e      	ldr	r2, [pc, #120]	; (800cc00 <RCCEx_PLL2_Config+0x15c>)
 800cb88:	f043 0310 	orr.w	r3, r3, #16
 800cb8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d106      	bne.n	800cba2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cb94:	4b1a      	ldr	r3, [pc, #104]	; (800cc00 <RCCEx_PLL2_Config+0x15c>)
 800cb96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb98:	4a19      	ldr	r2, [pc, #100]	; (800cc00 <RCCEx_PLL2_Config+0x15c>)
 800cb9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cb9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cba0:	e00f      	b.n	800cbc2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	d106      	bne.n	800cbb6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cba8:	4b15      	ldr	r3, [pc, #84]	; (800cc00 <RCCEx_PLL2_Config+0x15c>)
 800cbaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbac:	4a14      	ldr	r2, [pc, #80]	; (800cc00 <RCCEx_PLL2_Config+0x15c>)
 800cbae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cbb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cbb4:	e005      	b.n	800cbc2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cbb6:	4b12      	ldr	r3, [pc, #72]	; (800cc00 <RCCEx_PLL2_Config+0x15c>)
 800cbb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbba:	4a11      	ldr	r2, [pc, #68]	; (800cc00 <RCCEx_PLL2_Config+0x15c>)
 800cbbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cbc0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cbc2:	4b0f      	ldr	r3, [pc, #60]	; (800cc00 <RCCEx_PLL2_Config+0x15c>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	4a0e      	ldr	r2, [pc, #56]	; (800cc00 <RCCEx_PLL2_Config+0x15c>)
 800cbc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cbcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cbce:	f7f6 fe13 	bl	80037f8 <HAL_GetTick>
 800cbd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cbd4:	e008      	b.n	800cbe8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cbd6:	f7f6 fe0f 	bl	80037f8 <HAL_GetTick>
 800cbda:	4602      	mov	r2, r0
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	1ad3      	subs	r3, r2, r3
 800cbe0:	2b02      	cmp	r3, #2
 800cbe2:	d901      	bls.n	800cbe8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cbe4:	2303      	movs	r3, #3
 800cbe6:	e006      	b.n	800cbf6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cbe8:	4b05      	ldr	r3, [pc, #20]	; (800cc00 <RCCEx_PLL2_Config+0x15c>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d0f0      	beq.n	800cbd6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cbf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3710      	adds	r7, #16
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	58024400 	.word	0x58024400
 800cc04:	ffff0007 	.word	0xffff0007

0800cc08 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b084      	sub	sp, #16
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
 800cc10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cc12:	2300      	movs	r3, #0
 800cc14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cc16:	4b53      	ldr	r3, [pc, #332]	; (800cd64 <RCCEx_PLL3_Config+0x15c>)
 800cc18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc1a:	f003 0303 	and.w	r3, r3, #3
 800cc1e:	2b03      	cmp	r3, #3
 800cc20:	d101      	bne.n	800cc26 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cc22:	2301      	movs	r3, #1
 800cc24:	e099      	b.n	800cd5a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cc26:	4b4f      	ldr	r3, [pc, #316]	; (800cd64 <RCCEx_PLL3_Config+0x15c>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4a4e      	ldr	r2, [pc, #312]	; (800cd64 <RCCEx_PLL3_Config+0x15c>)
 800cc2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cc30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc32:	f7f6 fde1 	bl	80037f8 <HAL_GetTick>
 800cc36:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cc38:	e008      	b.n	800cc4c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cc3a:	f7f6 fddd 	bl	80037f8 <HAL_GetTick>
 800cc3e:	4602      	mov	r2, r0
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	1ad3      	subs	r3, r2, r3
 800cc44:	2b02      	cmp	r3, #2
 800cc46:	d901      	bls.n	800cc4c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cc48:	2303      	movs	r3, #3
 800cc4a:	e086      	b.n	800cd5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cc4c:	4b45      	ldr	r3, [pc, #276]	; (800cd64 <RCCEx_PLL3_Config+0x15c>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d1f0      	bne.n	800cc3a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cc58:	4b42      	ldr	r3, [pc, #264]	; (800cd64 <RCCEx_PLL3_Config+0x15c>)
 800cc5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc5c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	051b      	lsls	r3, r3, #20
 800cc66:	493f      	ldr	r1, [pc, #252]	; (800cd64 <RCCEx_PLL3_Config+0x15c>)
 800cc68:	4313      	orrs	r3, r2
 800cc6a:	628b      	str	r3, [r1, #40]	; 0x28
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	685b      	ldr	r3, [r3, #4]
 800cc70:	3b01      	subs	r3, #1
 800cc72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	689b      	ldr	r3, [r3, #8]
 800cc7a:	3b01      	subs	r3, #1
 800cc7c:	025b      	lsls	r3, r3, #9
 800cc7e:	b29b      	uxth	r3, r3
 800cc80:	431a      	orrs	r2, r3
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	68db      	ldr	r3, [r3, #12]
 800cc86:	3b01      	subs	r3, #1
 800cc88:	041b      	lsls	r3, r3, #16
 800cc8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cc8e:	431a      	orrs	r2, r3
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	691b      	ldr	r3, [r3, #16]
 800cc94:	3b01      	subs	r3, #1
 800cc96:	061b      	lsls	r3, r3, #24
 800cc98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cc9c:	4931      	ldr	r1, [pc, #196]	; (800cd64 <RCCEx_PLL3_Config+0x15c>)
 800cc9e:	4313      	orrs	r3, r2
 800cca0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cca2:	4b30      	ldr	r3, [pc, #192]	; (800cd64 <RCCEx_PLL3_Config+0x15c>)
 800cca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cca6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	695b      	ldr	r3, [r3, #20]
 800ccae:	492d      	ldr	r1, [pc, #180]	; (800cd64 <RCCEx_PLL3_Config+0x15c>)
 800ccb0:	4313      	orrs	r3, r2
 800ccb2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ccb4:	4b2b      	ldr	r3, [pc, #172]	; (800cd64 <RCCEx_PLL3_Config+0x15c>)
 800ccb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccb8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	699b      	ldr	r3, [r3, #24]
 800ccc0:	4928      	ldr	r1, [pc, #160]	; (800cd64 <RCCEx_PLL3_Config+0x15c>)
 800ccc2:	4313      	orrs	r3, r2
 800ccc4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ccc6:	4b27      	ldr	r3, [pc, #156]	; (800cd64 <RCCEx_PLL3_Config+0x15c>)
 800ccc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccca:	4a26      	ldr	r2, [pc, #152]	; (800cd64 <RCCEx_PLL3_Config+0x15c>)
 800cccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ccd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ccd2:	4b24      	ldr	r3, [pc, #144]	; (800cd64 <RCCEx_PLL3_Config+0x15c>)
 800ccd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ccd6:	4b24      	ldr	r3, [pc, #144]	; (800cd68 <RCCEx_PLL3_Config+0x160>)
 800ccd8:	4013      	ands	r3, r2
 800ccda:	687a      	ldr	r2, [r7, #4]
 800ccdc:	69d2      	ldr	r2, [r2, #28]
 800ccde:	00d2      	lsls	r2, r2, #3
 800cce0:	4920      	ldr	r1, [pc, #128]	; (800cd64 <RCCEx_PLL3_Config+0x15c>)
 800cce2:	4313      	orrs	r3, r2
 800cce4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cce6:	4b1f      	ldr	r3, [pc, #124]	; (800cd64 <RCCEx_PLL3_Config+0x15c>)
 800cce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccea:	4a1e      	ldr	r2, [pc, #120]	; (800cd64 <RCCEx_PLL3_Config+0x15c>)
 800ccec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ccf0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d106      	bne.n	800cd06 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ccf8:	4b1a      	ldr	r3, [pc, #104]	; (800cd64 <RCCEx_PLL3_Config+0x15c>)
 800ccfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccfc:	4a19      	ldr	r2, [pc, #100]	; (800cd64 <RCCEx_PLL3_Config+0x15c>)
 800ccfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cd02:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cd04:	e00f      	b.n	800cd26 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	2b01      	cmp	r3, #1
 800cd0a:	d106      	bne.n	800cd1a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cd0c:	4b15      	ldr	r3, [pc, #84]	; (800cd64 <RCCEx_PLL3_Config+0x15c>)
 800cd0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd10:	4a14      	ldr	r2, [pc, #80]	; (800cd64 <RCCEx_PLL3_Config+0x15c>)
 800cd12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cd16:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cd18:	e005      	b.n	800cd26 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cd1a:	4b12      	ldr	r3, [pc, #72]	; (800cd64 <RCCEx_PLL3_Config+0x15c>)
 800cd1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd1e:	4a11      	ldr	r2, [pc, #68]	; (800cd64 <RCCEx_PLL3_Config+0x15c>)
 800cd20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cd24:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cd26:	4b0f      	ldr	r3, [pc, #60]	; (800cd64 <RCCEx_PLL3_Config+0x15c>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	4a0e      	ldr	r2, [pc, #56]	; (800cd64 <RCCEx_PLL3_Config+0x15c>)
 800cd2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd32:	f7f6 fd61 	bl	80037f8 <HAL_GetTick>
 800cd36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cd38:	e008      	b.n	800cd4c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cd3a:	f7f6 fd5d 	bl	80037f8 <HAL_GetTick>
 800cd3e:	4602      	mov	r2, r0
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	1ad3      	subs	r3, r2, r3
 800cd44:	2b02      	cmp	r3, #2
 800cd46:	d901      	bls.n	800cd4c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cd48:	2303      	movs	r3, #3
 800cd4a:	e006      	b.n	800cd5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cd4c:	4b05      	ldr	r3, [pc, #20]	; (800cd64 <RCCEx_PLL3_Config+0x15c>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d0f0      	beq.n	800cd3a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cd58:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3710      	adds	r7, #16
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}
 800cd62:	bf00      	nop
 800cd64:	58024400 	.word	0x58024400
 800cd68:	ffff0007 	.word	0xffff0007

0800cd6c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b08a      	sub	sp, #40	; 0x28
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d101      	bne.n	800cd7e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	e075      	b.n	800ce6a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd84:	b2db      	uxtb	r3, r3
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d105      	bne.n	800cd96 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f7f5 fe9d 	bl	8002ad0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2204      	movs	r2, #4
 800cd9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f000 f868 	bl	800ce74 <HAL_SD_InitCard>
 800cda4:	4603      	mov	r3, r0
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d001      	beq.n	800cdae <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cdaa:	2301      	movs	r3, #1
 800cdac:	e05d      	b.n	800ce6a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800cdae:	f107 0308 	add.w	r3, r7, #8
 800cdb2:	4619      	mov	r1, r3
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f000 fdaf 	bl	800d918 <HAL_SD_GetCardStatus>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d001      	beq.n	800cdc4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	e052      	b.n	800ce6a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800cdc4:	7e3b      	ldrb	r3, [r7, #24]
 800cdc6:	b2db      	uxtb	r3, r3
 800cdc8:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800cdca:	7e7b      	ldrb	r3, [r7, #25]
 800cdcc:	b2db      	uxtb	r3, r3
 800cdce:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d10a      	bne.n	800cdee <HAL_SD_Init+0x82>
 800cdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d102      	bne.n	800cde4 <HAL_SD_Init+0x78>
 800cdde:	6a3b      	ldr	r3, [r7, #32]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d004      	beq.n	800cdee <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cdea:	659a      	str	r2, [r3, #88]	; 0x58
 800cdec:	e00b      	b.n	800ce06 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdf2:	2b01      	cmp	r3, #1
 800cdf4:	d104      	bne.n	800ce00 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cdfc:	659a      	str	r2, [r3, #88]	; 0x58
 800cdfe:	e002      	b.n	800ce06 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2200      	movs	r2, #0
 800ce04:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	68db      	ldr	r3, [r3, #12]
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f000 fe6d 	bl	800daec <HAL_SD_ConfigWideBusOperation>
 800ce12:	4603      	mov	r3, r0
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d001      	beq.n	800ce1c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800ce18:	2301      	movs	r3, #1
 800ce1a:	e026      	b.n	800ce6a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800ce1c:	f7f6 fcec 	bl	80037f8 <HAL_GetTick>
 800ce20:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800ce22:	e011      	b.n	800ce48 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ce24:	f7f6 fce8 	bl	80037f8 <HAL_GetTick>
 800ce28:	4602      	mov	r2, r0
 800ce2a:	69fb      	ldr	r3, [r7, #28]
 800ce2c:	1ad3      	subs	r3, r2, r3
 800ce2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce32:	d109      	bne.n	800ce48 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ce3a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2201      	movs	r2, #1
 800ce40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800ce44:	2303      	movs	r3, #3
 800ce46:	e010      	b.n	800ce6a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f000 ff61 	bl	800dd10 <HAL_SD_GetCardState>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2b04      	cmp	r3, #4
 800ce52:	d1e7      	bne.n	800ce24 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2200      	movs	r2, #0
 800ce58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2201      	movs	r2, #1
 800ce64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800ce68:	2300      	movs	r3, #0
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3728      	adds	r7, #40	; 0x28
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
	...

0800ce74 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ce74:	b590      	push	{r4, r7, lr}
 800ce76:	b08d      	sub	sp, #52	; 0x34
 800ce78:	af02      	add	r7, sp, #8
 800ce7a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800ce80:	2300      	movs	r3, #0
 800ce82:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800ce84:	2300      	movs	r3, #0
 800ce86:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800ce88:	2300      	movs	r3, #0
 800ce8a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ce8c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ce90:	f04f 0100 	mov.w	r1, #0
 800ce94:	f7fe fd24 	bl	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq>
 800ce98:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800ce9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d109      	bne.n	800ceb4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2201      	movs	r2, #1
 800cea4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ceae:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	e070      	b.n	800cf96 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800ceb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb6:	0a1b      	lsrs	r3, r3, #8
 800ceb8:	4a39      	ldr	r2, [pc, #228]	; (800cfa0 <HAL_SD_InitCard+0x12c>)
 800ceba:	fba2 2303 	umull	r2, r3, r2, r3
 800cebe:	091b      	lsrs	r3, r3, #4
 800cec0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681c      	ldr	r4, [r3, #0]
 800cec6:	466a      	mov	r2, sp
 800cec8:	f107 0318 	add.w	r3, r7, #24
 800cecc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ced0:	e882 0003 	stmia.w	r2, {r0, r1}
 800ced4:	f107 030c 	add.w	r3, r7, #12
 800ced8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ceda:	4620      	mov	r0, r4
 800cedc:	f004 fe6c 	bl	8011bb8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4618      	mov	r0, r3
 800cee6:	f004 feaf 	bl	8011c48 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800ceea:	69fb      	ldr	r3, [r7, #28]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d005      	beq.n	800cefc <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800cef0:	69fb      	ldr	r3, [r7, #28]
 800cef2:	005b      	lsls	r3, r3, #1
 800cef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cef6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cefa:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800cefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d007      	beq.n	800cf12 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800cf02:	4a28      	ldr	r2, [pc, #160]	; (800cfa4 <HAL_SD_InitCard+0x130>)
 800cf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf06:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf0a:	3301      	adds	r3, #1
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f7f6 fc7f 	bl	8003810 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f000 ffea 	bl	800deec <SD_PowerON>
 800cf18:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cf1a:	6a3b      	ldr	r3, [r7, #32]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d00b      	beq.n	800cf38 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2201      	movs	r2, #1
 800cf24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf2c:	6a3b      	ldr	r3, [r7, #32]
 800cf2e:	431a      	orrs	r2, r3
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cf34:	2301      	movs	r3, #1
 800cf36:	e02e      	b.n	800cf96 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f000 ff09 	bl	800dd50 <SD_InitCard>
 800cf3e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cf40:	6a3b      	ldr	r3, [r7, #32]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d00b      	beq.n	800cf5e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2201      	movs	r2, #1
 800cf4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf52:	6a3b      	ldr	r3, [r7, #32]
 800cf54:	431a      	orrs	r2, r3
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	e01b      	b.n	800cf96 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cf66:	4618      	mov	r0, r3
 800cf68:	f004 ff04 	bl	8011d74 <SDMMC_CmdBlockLength>
 800cf6c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cf6e:	6a3b      	ldr	r3, [r7, #32]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d00f      	beq.n	800cf94 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	4a0b      	ldr	r2, [pc, #44]	; (800cfa8 <HAL_SD_InitCard+0x134>)
 800cf7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf80:	6a3b      	ldr	r3, [r7, #32]
 800cf82:	431a      	orrs	r2, r3
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800cf90:	2301      	movs	r3, #1
 800cf92:	e000      	b.n	800cf96 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800cf94:	2300      	movs	r3, #0
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	372c      	adds	r7, #44	; 0x2c
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd90      	pop	{r4, r7, pc}
 800cf9e:	bf00      	nop
 800cfa0:	014f8b59 	.word	0x014f8b59
 800cfa4:	00012110 	.word	0x00012110
 800cfa8:	1fe00fff 	.word	0x1fe00fff

0800cfac <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b08c      	sub	sp, #48	; 0x30
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	60f8      	str	r0, [r7, #12]
 800cfb4:	60b9      	str	r1, [r7, #8]
 800cfb6:	607a      	str	r2, [r7, #4]
 800cfb8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d107      	bne.n	800cfd4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfc8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	e08d      	b.n	800d0f0 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	f040 8086 	bne.w	800d0ee <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cfe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	441a      	add	r2, r3
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d907      	bls.n	800d006 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cffa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d002:	2301      	movs	r3, #1
 800d004:	e074      	b.n	800d0f0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	2203      	movs	r2, #3
 800d00a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	2200      	movs	r2, #0
 800d014:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	68ba      	ldr	r2, [r7, #8]
 800d01a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	025a      	lsls	r2, r3, #9
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d028:	2b01      	cmp	r3, #1
 800d02a:	d002      	beq.n	800d032 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d02e:	025b      	lsls	r3, r3, #9
 800d030:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d032:	f04f 33ff 	mov.w	r3, #4294967295
 800d036:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	025b      	lsls	r3, r3, #9
 800d03c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d03e:	2390      	movs	r3, #144	; 0x90
 800d040:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d042:	2302      	movs	r3, #2
 800d044:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d046:	2300      	movs	r3, #0
 800d048:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d04a:	2300      	movs	r3, #0
 800d04c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	f107 0210 	add.w	r2, r7, #16
 800d056:	4611      	mov	r1, r2
 800d058:	4618      	mov	r0, r3
 800d05a:	f004 fe5f 	bl	8011d1c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	68da      	ldr	r2, [r3, #12]
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d06c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	68ba      	ldr	r2, [r7, #8]
 800d074:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	2201      	movs	r2, #1
 800d07c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	2b01      	cmp	r3, #1
 800d082:	d90a      	bls.n	800d09a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	2282      	movs	r2, #130	; 0x82
 800d088:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d090:	4618      	mov	r0, r3
 800d092:	f004 feb5 	bl	8011e00 <SDMMC_CmdReadMultiBlock>
 800d096:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d098:	e009      	b.n	800d0ae <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	2281      	movs	r2, #129	; 0x81
 800d09e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f004 fe87 	bl	8011dba <SDMMC_CmdReadSingleBlock>
 800d0ac:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d012      	beq.n	800d0da <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4a0f      	ldr	r2, [pc, #60]	; (800d0f8 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d0ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c2:	431a      	orrs	r2, r3
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	e00a      	b.n	800d0f0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d0e8:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	e000      	b.n	800d0f0 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d0ee:	2302      	movs	r3, #2
  }
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3730      	adds	r7, #48	; 0x30
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}
 800d0f8:	1fe00fff 	.word	0x1fe00fff

0800d0fc <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b08c      	sub	sp, #48	; 0x30
 800d100:	af00      	add	r7, sp, #0
 800d102:	60f8      	str	r0, [r7, #12]
 800d104:	60b9      	str	r1, [r7, #8]
 800d106:	607a      	str	r2, [r7, #4]
 800d108:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d107      	bne.n	800d124 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d118:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d120:	2301      	movs	r3, #1
 800d122:	e08d      	b.n	800d240 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	f040 8086 	bne.w	800d23e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2200      	movs	r2, #0
 800d136:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	441a      	add	r2, r3
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d142:	429a      	cmp	r2, r3
 800d144:	d907      	bls.n	800d156 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d14a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d152:	2301      	movs	r3, #1
 800d154:	e074      	b.n	800d240 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2203      	movs	r2, #3
 800d15a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	2200      	movs	r2, #0
 800d164:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	68ba      	ldr	r2, [r7, #8]
 800d16a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	025a      	lsls	r2, r3, #9
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d178:	2b01      	cmp	r3, #1
 800d17a:	d002      	beq.n	800d182 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d17e:	025b      	lsls	r3, r3, #9
 800d180:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d182:	f04f 33ff 	mov.w	r3, #4294967295
 800d186:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	025b      	lsls	r3, r3, #9
 800d18c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d18e:	2390      	movs	r3, #144	; 0x90
 800d190:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d192:	2300      	movs	r3, #0
 800d194:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d196:	2300      	movs	r3, #0
 800d198:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d19a:	2300      	movs	r3, #0
 800d19c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f107 0210 	add.w	r2, r7, #16
 800d1a6:	4611      	mov	r1, r2
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f004 fdb7 	bl	8011d1c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	68da      	ldr	r2, [r3, #12]
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d1bc:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	68ba      	ldr	r2, [r7, #8]
 800d1c4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	2201      	movs	r2, #1
 800d1cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	2b01      	cmp	r3, #1
 800d1d2:	d90a      	bls.n	800d1ea <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	22a0      	movs	r2, #160	; 0xa0
 800d1d8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f004 fe53 	bl	8011e8c <SDMMC_CmdWriteMultiBlock>
 800d1e6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d1e8:	e009      	b.n	800d1fe <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	2290      	movs	r2, #144	; 0x90
 800d1ee:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f004 fe25 	bl	8011e46 <SDMMC_CmdWriteSingleBlock>
 800d1fc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d200:	2b00      	cmp	r3, #0
 800d202:	d012      	beq.n	800d22a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	4a0f      	ldr	r2, [pc, #60]	; (800d248 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d20a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d212:	431a      	orrs	r2, r3
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	2201      	movs	r2, #1
 800d21c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2200      	movs	r2, #0
 800d224:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d226:	2301      	movs	r3, #1
 800d228:	e00a      	b.n	800d240 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d238:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d23a:	2300      	movs	r3, #0
 800d23c:	e000      	b.n	800d240 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d23e:	2302      	movs	r3, #2
  }
}
 800d240:	4618      	mov	r0, r3
 800d242:	3730      	adds	r7, #48	; 0x30
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}
 800d248:	1fe00fff 	.word	0x1fe00fff

0800d24c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b084      	sub	sp, #16
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d258:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d264:	2b00      	cmp	r3, #0
 800d266:	d008      	beq.n	800d27a <HAL_SD_IRQHandler+0x2e>
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f003 0308 	and.w	r3, r3, #8
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d003      	beq.n	800d27a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f001 f926 	bl	800e4c4 <SD_Read_IT>
 800d278:	e19a      	b.n	800d5b0 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d284:	2b00      	cmp	r3, #0
 800d286:	f000 80ac 	beq.w	800d3e2 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d292:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681a      	ldr	r2, [r3, #0]
 800d29e:	4b59      	ldr	r3, [pc, #356]	; (800d404 <HAL_SD_IRQHandler+0x1b8>)
 800d2a0:	400b      	ands	r3, r1
 800d2a2:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d2b2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	68da      	ldr	r2, [r3, #12]
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d2c2:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	f003 0308 	and.w	r3, r3, #8
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d038      	beq.n	800d340 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	f003 0302 	and.w	r3, r3, #2
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d104      	bne.n	800d2e2 <HAL_SD_IRQHandler+0x96>
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	f003 0320 	and.w	r3, r3, #32
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d011      	beq.n	800d306 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f004 fdf4 	bl	8011ed4 <SDMMC_CmdStopTransfer>
 800d2ec:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d008      	beq.n	800d306 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	431a      	orrs	r2, r3
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f000 f95b 	bl	800d5bc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	4a3f      	ldr	r2, [pc, #252]	; (800d408 <HAL_SD_IRQHandler+0x1bc>)
 800d30c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2201      	movs	r2, #1
 800d312:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2200      	movs	r2, #0
 800d31a:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f003 0301 	and.w	r3, r3, #1
 800d322:	2b00      	cmp	r3, #0
 800d324:	d104      	bne.n	800d330 <HAL_SD_IRQHandler+0xe4>
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	f003 0302 	and.w	r3, r3, #2
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d003      	beq.n	800d338 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f006 fdf5 	bl	8013f20 <HAL_SD_RxCpltCallback>
 800d336:	e13b      	b.n	800d5b0 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f006 fde7 	bl	8013f0c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d33e:	e137      	b.n	800d5b0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d346:	2b00      	cmp	r3, #0
 800d348:	f000 8132 	beq.w	800d5b0 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	2200      	movs	r2, #0
 800d352:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	2200      	movs	r2, #0
 800d35a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	2200      	movs	r2, #0
 800d362:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	f003 0302 	and.w	r3, r3, #2
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d104      	bne.n	800d378 <HAL_SD_IRQHandler+0x12c>
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	f003 0320 	and.w	r3, r3, #32
 800d374:	2b00      	cmp	r3, #0
 800d376:	d011      	beq.n	800d39c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	4618      	mov	r0, r3
 800d37e:	f004 fda9 	bl	8011ed4 <SDMMC_CmdStopTransfer>
 800d382:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d008      	beq.n	800d39c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	431a      	orrs	r2, r3
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f000 f910 	bl	800d5bc <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2201      	movs	r2, #1
 800d3a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	f003 0310 	and.w	r3, r3, #16
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d104      	bne.n	800d3be <HAL_SD_IRQHandler+0x172>
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	f003 0320 	and.w	r3, r3, #32
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d002      	beq.n	800d3c4 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f006 fda4 	bl	8013f0c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	f003 0301 	and.w	r3, r3, #1
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d105      	bne.n	800d3da <HAL_SD_IRQHandler+0x18e>
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	f003 0302 	and.w	r3, r3, #2
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	f000 80eb 	beq.w	800d5b0 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f006 fda0 	bl	8013f20 <HAL_SD_RxCpltCallback>
}
 800d3e0:	e0e6      	b.n	800d5b0 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d00d      	beq.n	800d40c <HAL_SD_IRQHandler+0x1c0>
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	f003 0308 	and.w	r3, r3, #8
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d008      	beq.n	800d40c <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f001 f8a8 	bl	800e550 <SD_Write_IT>
 800d400:	e0d6      	b.n	800d5b0 <HAL_SD_IRQHandler+0x364>
 800d402:	bf00      	nop
 800d404:	ffff3ec5 	.word	0xffff3ec5
 800d408:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d412:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d416:	2b00      	cmp	r3, #0
 800d418:	f000 809d 	beq.w	800d556 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d422:	f003 0302 	and.w	r3, r3, #2
 800d426:	2b00      	cmp	r3, #0
 800d428:	d005      	beq.n	800d436 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d42e:	f043 0202 	orr.w	r2, r3, #2
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d43c:	f003 0308 	and.w	r3, r3, #8
 800d440:	2b00      	cmp	r3, #0
 800d442:	d005      	beq.n	800d450 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d448:	f043 0208 	orr.w	r2, r3, #8
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d456:	f003 0320 	and.w	r3, r3, #32
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d005      	beq.n	800d46a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d462:	f043 0220 	orr.w	r2, r3, #32
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d470:	f003 0310 	and.w	r3, r3, #16
 800d474:	2b00      	cmp	r3, #0
 800d476:	d005      	beq.n	800d484 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d47c:	f043 0210 	orr.w	r2, r3, #16
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	4a4b      	ldr	r2, [pc, #300]	; (800d5b8 <HAL_SD_IRQHandler+0x36c>)
 800d48a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d49a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	68da      	ldr	r2, [r3, #12]
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d4aa:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d4ba:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	68da      	ldr	r2, [r3, #12]
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d4ca:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f004 fcff 	bl	8011ed4 <SDMMC_CmdStopTransfer>
 800d4d6:	4602      	mov	r2, r0
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4dc:	431a      	orrs	r2, r3
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	68da      	ldr	r2, [r3, #12]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d4f0:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d4fa:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	f003 0308 	and.w	r3, r3, #8
 800d502:	2b00      	cmp	r3, #0
 800d504:	d00a      	beq.n	800d51c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2201      	movs	r2, #1
 800d50a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2200      	movs	r2, #0
 800d512:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f000 f851 	bl	800d5bc <HAL_SD_ErrorCallback>
}
 800d51a:	e049      	b.n	800d5b0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d522:	2b00      	cmp	r3, #0
 800d524:	d044      	beq.n	800d5b0 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d040      	beq.n	800d5b0 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d53c:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	2200      	movs	r2, #0
 800d544:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2201      	movs	r2, #1
 800d54a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f000 f834 	bl	800d5bc <HAL_SD_ErrorCallback>
}
 800d554:	e02c      	b.n	800d5b0 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d55c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d560:	2b00      	cmp	r3, #0
 800d562:	d025      	beq.n	800d5b0 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d56c:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d574:	f003 0304 	and.w	r3, r3, #4
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d10c      	bne.n	800d596 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	f003 0320 	and.w	r3, r3, #32
 800d582:	2b00      	cmp	r3, #0
 800d584:	d003      	beq.n	800d58e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f001 f84a 	bl	800e620 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d58c:	e010      	b.n	800d5b0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f001 f832 	bl	800e5f8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d594:	e00c      	b.n	800d5b0 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	f003 0320 	and.w	r3, r3, #32
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d003      	beq.n	800d5a8 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f001 f833 	bl	800e60c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d5a6:	e003      	b.n	800d5b0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f001 f81b 	bl	800e5e4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d5ae:	e7ff      	b.n	800d5b0 <HAL_SD_IRQHandler+0x364>
 800d5b0:	bf00      	nop
 800d5b2:	3710      	adds	r7, #16
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}
 800d5b8:	18000f3a 	.word	0x18000f3a

0800d5bc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d5bc:	b480      	push	{r7}
 800d5be:	b083      	sub	sp, #12
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d5c4:	bf00      	nop
 800d5c6:	370c      	adds	r7, #12
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ce:	4770      	bx	lr

0800d5d0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b083      	sub	sp, #12
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d5de:	0f9b      	lsrs	r3, r3, #30
 800d5e0:	b2da      	uxtb	r2, r3
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d5ea:	0e9b      	lsrs	r3, r3, #26
 800d5ec:	b2db      	uxtb	r3, r3
 800d5ee:	f003 030f 	and.w	r3, r3, #15
 800d5f2:	b2da      	uxtb	r2, r3
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d5fc:	0e1b      	lsrs	r3, r3, #24
 800d5fe:	b2db      	uxtb	r3, r3
 800d600:	f003 0303 	and.w	r3, r3, #3
 800d604:	b2da      	uxtb	r2, r3
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d60e:	0c1b      	lsrs	r3, r3, #16
 800d610:	b2da      	uxtb	r2, r3
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d61a:	0a1b      	lsrs	r3, r3, #8
 800d61c:	b2da      	uxtb	r2, r3
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d626:	b2da      	uxtb	r2, r3
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d630:	0d1b      	lsrs	r3, r3, #20
 800d632:	b29a      	uxth	r2, r3
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d63c:	0c1b      	lsrs	r3, r3, #16
 800d63e:	b2db      	uxtb	r3, r3
 800d640:	f003 030f 	and.w	r3, r3, #15
 800d644:	b2da      	uxtb	r2, r3
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d64e:	0bdb      	lsrs	r3, r3, #15
 800d650:	b2db      	uxtb	r3, r3
 800d652:	f003 0301 	and.w	r3, r3, #1
 800d656:	b2da      	uxtb	r2, r3
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d660:	0b9b      	lsrs	r3, r3, #14
 800d662:	b2db      	uxtb	r3, r3
 800d664:	f003 0301 	and.w	r3, r3, #1
 800d668:	b2da      	uxtb	r2, r3
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d672:	0b5b      	lsrs	r3, r3, #13
 800d674:	b2db      	uxtb	r3, r3
 800d676:	f003 0301 	and.w	r3, r3, #1
 800d67a:	b2da      	uxtb	r2, r3
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d684:	0b1b      	lsrs	r3, r3, #12
 800d686:	b2db      	uxtb	r3, r3
 800d688:	f003 0301 	and.w	r3, r3, #1
 800d68c:	b2da      	uxtb	r2, r3
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	2200      	movs	r2, #0
 800d696:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d163      	bne.n	800d768 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d6a4:	009a      	lsls	r2, r3, #2
 800d6a6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d6aa:	4013      	ands	r3, r2
 800d6ac:	687a      	ldr	r2, [r7, #4]
 800d6ae:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800d6b0:	0f92      	lsrs	r2, r2, #30
 800d6b2:	431a      	orrs	r2, r3
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6bc:	0edb      	lsrs	r3, r3, #27
 800d6be:	b2db      	uxtb	r3, r3
 800d6c0:	f003 0307 	and.w	r3, r3, #7
 800d6c4:	b2da      	uxtb	r2, r3
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6ce:	0e1b      	lsrs	r3, r3, #24
 800d6d0:	b2db      	uxtb	r3, r3
 800d6d2:	f003 0307 	and.w	r3, r3, #7
 800d6d6:	b2da      	uxtb	r2, r3
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6e0:	0d5b      	lsrs	r3, r3, #21
 800d6e2:	b2db      	uxtb	r3, r3
 800d6e4:	f003 0307 	and.w	r3, r3, #7
 800d6e8:	b2da      	uxtb	r2, r3
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6f2:	0c9b      	lsrs	r3, r3, #18
 800d6f4:	b2db      	uxtb	r3, r3
 800d6f6:	f003 0307 	and.w	r3, r3, #7
 800d6fa:	b2da      	uxtb	r2, r3
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d704:	0bdb      	lsrs	r3, r3, #15
 800d706:	b2db      	uxtb	r3, r3
 800d708:	f003 0307 	and.w	r3, r3, #7
 800d70c:	b2da      	uxtb	r2, r3
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	691b      	ldr	r3, [r3, #16]
 800d716:	1c5a      	adds	r2, r3, #1
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	7e1b      	ldrb	r3, [r3, #24]
 800d720:	b2db      	uxtb	r3, r3
 800d722:	f003 0307 	and.w	r3, r3, #7
 800d726:	3302      	adds	r3, #2
 800d728:	2201      	movs	r2, #1
 800d72a:	fa02 f303 	lsl.w	r3, r2, r3
 800d72e:	687a      	ldr	r2, [r7, #4]
 800d730:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d732:	fb03 f202 	mul.w	r2, r3, r2
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	7a1b      	ldrb	r3, [r3, #8]
 800d73e:	b2db      	uxtb	r3, r3
 800d740:	f003 030f 	and.w	r3, r3, #15
 800d744:	2201      	movs	r2, #1
 800d746:	409a      	lsls	r2, r3
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d750:	687a      	ldr	r2, [r7, #4]
 800d752:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d754:	0a52      	lsrs	r2, r2, #9
 800d756:	fb03 f202 	mul.w	r2, r3, r2
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d764:	655a      	str	r2, [r3, #84]	; 0x54
 800d766:	e031      	b.n	800d7cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d76c:	2b01      	cmp	r3, #1
 800d76e:	d11d      	bne.n	800d7ac <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d774:	041b      	lsls	r3, r3, #16
 800d776:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d77e:	0c1b      	lsrs	r3, r3, #16
 800d780:	431a      	orrs	r2, r3
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	691b      	ldr	r3, [r3, #16]
 800d78a:	3301      	adds	r3, #1
 800d78c:	029a      	lsls	r2, r3, #10
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d7a0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	655a      	str	r2, [r3, #84]	; 0x54
 800d7aa:	e00f      	b.n	800d7cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	4a58      	ldr	r2, [pc, #352]	; (800d914 <HAL_SD_GetCardCSD+0x344>)
 800d7b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2201      	movs	r2, #1
 800d7c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	e09d      	b.n	800d908 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7d0:	0b9b      	lsrs	r3, r3, #14
 800d7d2:	b2db      	uxtb	r3, r3
 800d7d4:	f003 0301 	and.w	r3, r3, #1
 800d7d8:	b2da      	uxtb	r2, r3
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7e2:	09db      	lsrs	r3, r3, #7
 800d7e4:	b2db      	uxtb	r3, r3
 800d7e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7ea:	b2da      	uxtb	r2, r3
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7f4:	b2db      	uxtb	r3, r3
 800d7f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7fa:	b2da      	uxtb	r2, r3
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d804:	0fdb      	lsrs	r3, r3, #31
 800d806:	b2da      	uxtb	r2, r3
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d810:	0f5b      	lsrs	r3, r3, #29
 800d812:	b2db      	uxtb	r3, r3
 800d814:	f003 0303 	and.w	r3, r3, #3
 800d818:	b2da      	uxtb	r2, r3
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d822:	0e9b      	lsrs	r3, r3, #26
 800d824:	b2db      	uxtb	r3, r3
 800d826:	f003 0307 	and.w	r3, r3, #7
 800d82a:	b2da      	uxtb	r2, r3
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d834:	0d9b      	lsrs	r3, r3, #22
 800d836:	b2db      	uxtb	r3, r3
 800d838:	f003 030f 	and.w	r3, r3, #15
 800d83c:	b2da      	uxtb	r2, r3
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d846:	0d5b      	lsrs	r3, r3, #21
 800d848:	b2db      	uxtb	r3, r3
 800d84a:	f003 0301 	and.w	r3, r3, #1
 800d84e:	b2da      	uxtb	r2, r3
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	2200      	movs	r2, #0
 800d85a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d862:	0c1b      	lsrs	r3, r3, #16
 800d864:	b2db      	uxtb	r3, r3
 800d866:	f003 0301 	and.w	r3, r3, #1
 800d86a:	b2da      	uxtb	r2, r3
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d876:	0bdb      	lsrs	r3, r3, #15
 800d878:	b2db      	uxtb	r3, r3
 800d87a:	f003 0301 	and.w	r3, r3, #1
 800d87e:	b2da      	uxtb	r2, r3
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d88a:	0b9b      	lsrs	r3, r3, #14
 800d88c:	b2db      	uxtb	r3, r3
 800d88e:	f003 0301 	and.w	r3, r3, #1
 800d892:	b2da      	uxtb	r2, r3
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d89e:	0b5b      	lsrs	r3, r3, #13
 800d8a0:	b2db      	uxtb	r3, r3
 800d8a2:	f003 0301 	and.w	r3, r3, #1
 800d8a6:	b2da      	uxtb	r2, r3
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8b2:	0b1b      	lsrs	r3, r3, #12
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	f003 0301 	and.w	r3, r3, #1
 800d8ba:	b2da      	uxtb	r2, r3
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8c6:	0a9b      	lsrs	r3, r3, #10
 800d8c8:	b2db      	uxtb	r3, r3
 800d8ca:	f003 0303 	and.w	r3, r3, #3
 800d8ce:	b2da      	uxtb	r2, r3
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8da:	0a1b      	lsrs	r3, r3, #8
 800d8dc:	b2db      	uxtb	r3, r3
 800d8de:	f003 0303 	and.w	r3, r3, #3
 800d8e2:	b2da      	uxtb	r2, r3
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8ee:	085b      	lsrs	r3, r3, #1
 800d8f0:	b2db      	uxtb	r3, r3
 800d8f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8f6:	b2da      	uxtb	r2, r3
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	2201      	movs	r2, #1
 800d902:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d906:	2300      	movs	r3, #0
}
 800d908:	4618      	mov	r0, r3
 800d90a:	370c      	adds	r7, #12
 800d90c:	46bd      	mov	sp, r7
 800d90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d912:	4770      	bx	lr
 800d914:	1fe00fff 	.word	0x1fe00fff

0800d918 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b094      	sub	sp, #80	; 0x50
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d922:	2300      	movs	r3, #0
 800d924:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d92e:	b2db      	uxtb	r3, r3
 800d930:	2b03      	cmp	r3, #3
 800d932:	d101      	bne.n	800d938 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800d934:	2301      	movs	r3, #1
 800d936:	e0a7      	b.n	800da88 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800d938:	f107 0308 	add.w	r3, r7, #8
 800d93c:	4619      	mov	r1, r3
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f000 fb62 	bl	800e008 <SD_SendSDStatus>
 800d944:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d011      	beq.n	800d970 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4a4f      	ldr	r2, [pc, #316]	; (800da90 <HAL_SD_GetCardStatus+0x178>)
 800d952:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d95a:	431a      	orrs	r2, r3
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2201      	movs	r2, #1
 800d964:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800d968:	2301      	movs	r3, #1
 800d96a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d96e:	e070      	b.n	800da52 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	099b      	lsrs	r3, r3, #6
 800d974:	b2db      	uxtb	r3, r3
 800d976:	f003 0303 	and.w	r3, r3, #3
 800d97a:	b2da      	uxtb	r2, r3
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	095b      	lsrs	r3, r3, #5
 800d984:	b2db      	uxtb	r3, r3
 800d986:	f003 0301 	and.w	r3, r3, #1
 800d98a:	b2da      	uxtb	r2, r3
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	0a1b      	lsrs	r3, r3, #8
 800d994:	b29b      	uxth	r3, r3
 800d996:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d99a:	b29a      	uxth	r2, r3
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	0e1b      	lsrs	r3, r3, #24
 800d9a0:	b29b      	uxth	r3, r3
 800d9a2:	4313      	orrs	r3, r2
 800d9a4:	b29a      	uxth	r2, r3
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	061a      	lsls	r2, r3, #24
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	021b      	lsls	r3, r3, #8
 800d9b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d9b6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	0a1b      	lsrs	r3, r3, #8
 800d9bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d9c0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	0e1b      	lsrs	r3, r3, #24
 800d9c6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800d9cc:	693b      	ldr	r3, [r7, #16]
 800d9ce:	b2da      	uxtb	r2, r3
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	0a1b      	lsrs	r3, r3, #8
 800d9d8:	b2da      	uxtb	r2, r3
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800d9de:	693b      	ldr	r3, [r7, #16]
 800d9e0:	0d1b      	lsrs	r3, r3, #20
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	f003 030f 	and.w	r3, r3, #15
 800d9e8:	b2da      	uxtb	r2, r3
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800d9ee:	693b      	ldr	r3, [r7, #16]
 800d9f0:	0c1b      	lsrs	r3, r3, #16
 800d9f2:	b29b      	uxth	r3, r3
 800d9f4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d9f8:	b29a      	uxth	r2, r3
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	b29b      	uxth	r3, r3
 800d9fe:	b2db      	uxtb	r3, r3
 800da00:	b29b      	uxth	r3, r3
 800da02:	4313      	orrs	r3, r2
 800da04:	b29a      	uxth	r2, r3
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	0a9b      	lsrs	r3, r3, #10
 800da0e:	b2db      	uxtb	r3, r3
 800da10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da14:	b2da      	uxtb	r2, r3
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	0a1b      	lsrs	r3, r3, #8
 800da1e:	b2db      	uxtb	r3, r3
 800da20:	f003 0303 	and.w	r3, r3, #3
 800da24:	b2da      	uxtb	r2, r3
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	091b      	lsrs	r3, r3, #4
 800da2e:	b2db      	uxtb	r3, r3
 800da30:	f003 030f 	and.w	r3, r3, #15
 800da34:	b2da      	uxtb	r2, r3
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	b2db      	uxtb	r3, r3
 800da3e:	f003 030f 	and.w	r3, r3, #15
 800da42:	b2da      	uxtb	r2, r3
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800da48:	69bb      	ldr	r3, [r7, #24]
 800da4a:	0e1b      	lsrs	r3, r3, #24
 800da4c:	b2da      	uxtb	r2, r3
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f44f 7100 	mov.w	r1, #512	; 0x200
 800da5a:	4618      	mov	r0, r3
 800da5c:	f004 f98a 	bl	8011d74 <SDMMC_CmdBlockLength>
 800da60:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800da62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da64:	2b00      	cmp	r3, #0
 800da66:	d00d      	beq.n	800da84 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	4a08      	ldr	r2, [pc, #32]	; (800da90 <HAL_SD_GetCardStatus+0x178>)
 800da6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da74:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2201      	movs	r2, #1
 800da7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800da7e:	2301      	movs	r3, #1
 800da80:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800da84:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3750      	adds	r7, #80	; 0x50
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}
 800da90:	1fe00fff 	.word	0x1fe00fff

0800da94 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800da94:	b480      	push	{r7}
 800da96:	b083      	sub	sp, #12
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
 800da9c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dade:	2300      	movs	r3, #0
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	370c      	adds	r7, #12
 800dae4:	46bd      	mov	sp, r7
 800dae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daea:	4770      	bx	lr

0800daec <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800daec:	b590      	push	{r4, r7, lr}
 800daee:	b08d      	sub	sp, #52	; 0x34
 800daf0:	af02      	add	r7, sp, #8
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800daf6:	2300      	movs	r3, #0
 800daf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2203      	movs	r2, #3
 800db00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db08:	2b03      	cmp	r3, #3
 800db0a:	d02e      	beq.n	800db6a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800db12:	d106      	bne.n	800db22 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	635a      	str	r2, [r3, #52]	; 0x34
 800db20:	e029      	b.n	800db76 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800db28:	d10a      	bne.n	800db40 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f000 fb64 	bl	800e1f8 <SD_WideBus_Enable>
 800db30:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db36:	6a3b      	ldr	r3, [r7, #32]
 800db38:	431a      	orrs	r2, r3
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	635a      	str	r2, [r3, #52]	; 0x34
 800db3e:	e01a      	b.n	800db76 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d10a      	bne.n	800db5c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f000 fba1 	bl	800e28e <SD_WideBus_Disable>
 800db4c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db52:	6a3b      	ldr	r3, [r7, #32]
 800db54:	431a      	orrs	r2, r3
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	635a      	str	r2, [r3, #52]	; 0x34
 800db5a:	e00c      	b.n	800db76 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db60:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	635a      	str	r2, [r3, #52]	; 0x34
 800db68:	e005      	b.n	800db76 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db6e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d007      	beq.n	800db8e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	4a5f      	ldr	r2, [pc, #380]	; (800dd00 <HAL_SD_ConfigWideBusOperation+0x214>)
 800db84:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800db86:	2301      	movs	r3, #1
 800db88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800db8c:	e096      	b.n	800dcbc <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800db8e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800db92:	f04f 0100 	mov.w	r1, #0
 800db96:	f7fd fea3 	bl	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq>
 800db9a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800db9c:	69fb      	ldr	r3, [r7, #28]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	f000 8083 	beq.w	800dcaa <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	685b      	ldr	r3, [r3, #4]
 800dba8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	689b      	ldr	r3, [r3, #8]
 800dbae:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	691b      	ldr	r3, [r3, #16]
 800dbb8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	695a      	ldr	r2, [r3, #20]
 800dbbe:	69fb      	ldr	r3, [r7, #28]
 800dbc0:	4950      	ldr	r1, [pc, #320]	; (800dd04 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dbc2:	fba1 1303 	umull	r1, r3, r1, r3
 800dbc6:	0e1b      	lsrs	r3, r3, #24
 800dbc8:	429a      	cmp	r2, r3
 800dbca:	d303      	bcc.n	800dbd4 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	695b      	ldr	r3, [r3, #20]
 800dbd0:	61bb      	str	r3, [r7, #24]
 800dbd2:	e05a      	b.n	800dc8a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dbdc:	d103      	bne.n	800dbe6 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	695b      	ldr	r3, [r3, #20]
 800dbe2:	61bb      	str	r3, [r7, #24]
 800dbe4:	e051      	b.n	800dc8a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dbee:	d126      	bne.n	800dc3e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	695b      	ldr	r3, [r3, #20]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d10e      	bne.n	800dc16 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800dbf8:	69fb      	ldr	r3, [r7, #28]
 800dbfa:	4a43      	ldr	r2, [pc, #268]	; (800dd08 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	d906      	bls.n	800dc0e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800dc00:	69fb      	ldr	r3, [r7, #28]
 800dc02:	4a40      	ldr	r2, [pc, #256]	; (800dd04 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dc04:	fba2 2303 	umull	r2, r3, r2, r3
 800dc08:	0e5b      	lsrs	r3, r3, #25
 800dc0a:	61bb      	str	r3, [r7, #24]
 800dc0c:	e03d      	b.n	800dc8a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	695b      	ldr	r3, [r3, #20]
 800dc12:	61bb      	str	r3, [r7, #24]
 800dc14:	e039      	b.n	800dc8a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	695b      	ldr	r3, [r3, #20]
 800dc1a:	005b      	lsls	r3, r3, #1
 800dc1c:	69fa      	ldr	r2, [r7, #28]
 800dc1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc22:	4a39      	ldr	r2, [pc, #228]	; (800dd08 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800dc24:	4293      	cmp	r3, r2
 800dc26:	d906      	bls.n	800dc36 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800dc28:	69fb      	ldr	r3, [r7, #28]
 800dc2a:	4a36      	ldr	r2, [pc, #216]	; (800dd04 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dc2c:	fba2 2303 	umull	r2, r3, r2, r3
 800dc30:	0e5b      	lsrs	r3, r3, #25
 800dc32:	61bb      	str	r3, [r7, #24]
 800dc34:	e029      	b.n	800dc8a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	695b      	ldr	r3, [r3, #20]
 800dc3a:	61bb      	str	r3, [r7, #24]
 800dc3c:	e025      	b.n	800dc8a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	695b      	ldr	r3, [r3, #20]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d10e      	bne.n	800dc64 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800dc46:	69fb      	ldr	r3, [r7, #28]
 800dc48:	4a30      	ldr	r2, [pc, #192]	; (800dd0c <HAL_SD_ConfigWideBusOperation+0x220>)
 800dc4a:	4293      	cmp	r3, r2
 800dc4c:	d906      	bls.n	800dc5c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800dc4e:	69fb      	ldr	r3, [r7, #28]
 800dc50:	4a2c      	ldr	r2, [pc, #176]	; (800dd04 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dc52:	fba2 2303 	umull	r2, r3, r2, r3
 800dc56:	0e1b      	lsrs	r3, r3, #24
 800dc58:	61bb      	str	r3, [r7, #24]
 800dc5a:	e016      	b.n	800dc8a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	695b      	ldr	r3, [r3, #20]
 800dc60:	61bb      	str	r3, [r7, #24]
 800dc62:	e012      	b.n	800dc8a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	695b      	ldr	r3, [r3, #20]
 800dc68:	005b      	lsls	r3, r3, #1
 800dc6a:	69fa      	ldr	r2, [r7, #28]
 800dc6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc70:	4a26      	ldr	r2, [pc, #152]	; (800dd0c <HAL_SD_ConfigWideBusOperation+0x220>)
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d906      	bls.n	800dc84 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800dc76:	69fb      	ldr	r3, [r7, #28]
 800dc78:	4a22      	ldr	r2, [pc, #136]	; (800dd04 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dc7a:	fba2 2303 	umull	r2, r3, r2, r3
 800dc7e:	0e1b      	lsrs	r3, r3, #24
 800dc80:	61bb      	str	r3, [r7, #24]
 800dc82:	e002      	b.n	800dc8a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	695b      	ldr	r3, [r3, #20]
 800dc88:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681c      	ldr	r4, [r3, #0]
 800dc8e:	466a      	mov	r2, sp
 800dc90:	f107 0314 	add.w	r3, r7, #20
 800dc94:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dc98:	e882 0003 	stmia.w	r2, {r0, r1}
 800dc9c:	f107 0308 	add.w	r3, r7, #8
 800dca0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dca2:	4620      	mov	r0, r4
 800dca4:	f003 ff88 	bl	8011bb8 <SDMMC_Init>
 800dca8:	e008      	b.n	800dcbc <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800dcb6:	2301      	movs	r3, #1
 800dcb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f004 f855 	bl	8011d74 <SDMMC_CmdBlockLength>
 800dcca:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dccc:	6a3b      	ldr	r3, [r7, #32]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d00c      	beq.n	800dcec <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	4a0a      	ldr	r2, [pc, #40]	; (800dd00 <HAL_SD_ConfigWideBusOperation+0x214>)
 800dcd8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dcde:	6a3b      	ldr	r3, [r7, #32]
 800dce0:	431a      	orrs	r2, r3
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800dce6:	2301      	movs	r3, #1
 800dce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2201      	movs	r2, #1
 800dcf0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800dcf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	372c      	adds	r7, #44	; 0x2c
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd90      	pop	{r4, r7, pc}
 800dd00:	1fe00fff 	.word	0x1fe00fff
 800dd04:	55e63b89 	.word	0x55e63b89
 800dd08:	02faf080 	.word	0x02faf080
 800dd0c:	017d7840 	.word	0x017d7840

0800dd10 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b086      	sub	sp, #24
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800dd18:	2300      	movs	r3, #0
 800dd1a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800dd1c:	f107 030c 	add.w	r3, r7, #12
 800dd20:	4619      	mov	r1, r3
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f000 fa40 	bl	800e1a8 <SD_SendStatus>
 800dd28:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d005      	beq.n	800dd3c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	431a      	orrs	r2, r3
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	0a5b      	lsrs	r3, r3, #9
 800dd40:	f003 030f 	and.w	r3, r3, #15
 800dd44:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800dd46:	693b      	ldr	r3, [r7, #16]
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	3718      	adds	r7, #24
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}

0800dd50 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b090      	sub	sp, #64	; 0x40
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800dd58:	2300      	movs	r3, #0
 800dd5a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800dd5c:	f7f5 fd4c 	bl	80037f8 <HAL_GetTick>
 800dd60:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	4618      	mov	r0, r3
 800dd68:	f003 ff7f 	bl	8011c6a <SDMMC_GetPowerState>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d102      	bne.n	800dd78 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dd72:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800dd76:	e0b5      	b.n	800dee4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd7c:	2b03      	cmp	r3, #3
 800dd7e:	d02e      	beq.n	800ddde <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	4618      	mov	r0, r3
 800dd86:	f004 f9ca 	bl	801211e <SDMMC_CmdSendCID>
 800dd8a:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800dd8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d001      	beq.n	800dd96 <SD_InitCard+0x46>
    {
      return errorstate;
 800dd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd94:	e0a6      	b.n	800dee4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	2100      	movs	r1, #0
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f003 ffaa 	bl	8011cf6 <SDMMC_GetResponse>
 800dda2:	4602      	mov	r2, r0
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	2104      	movs	r1, #4
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f003 ffa1 	bl	8011cf6 <SDMMC_GetResponse>
 800ddb4:	4602      	mov	r2, r0
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	2108      	movs	r1, #8
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f003 ff98 	bl	8011cf6 <SDMMC_GetResponse>
 800ddc6:	4602      	mov	r2, r0
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	210c      	movs	r1, #12
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f003 ff8f 	bl	8011cf6 <SDMMC_GetResponse>
 800ddd8:	4602      	mov	r2, r0
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dde2:	2b03      	cmp	r3, #3
 800dde4:	d01d      	beq.n	800de22 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800dde6:	e019      	b.n	800de1c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	f107 020a 	add.w	r2, r7, #10
 800ddf0:	4611      	mov	r1, r2
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f004 f9d2 	bl	801219c <SDMMC_CmdSetRelAdd>
 800ddf8:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800ddfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d001      	beq.n	800de04 <SD_InitCard+0xb4>
      {
        return errorstate;
 800de00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de02:	e06f      	b.n	800dee4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800de04:	f7f5 fcf8 	bl	80037f8 <HAL_GetTick>
 800de08:	4602      	mov	r2, r0
 800de0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de0c:	1ad3      	subs	r3, r2, r3
 800de0e:	f241 3287 	movw	r2, #4999	; 0x1387
 800de12:	4293      	cmp	r3, r2
 800de14:	d902      	bls.n	800de1c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800de16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800de1a:	e063      	b.n	800dee4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800de1c:	897b      	ldrh	r3, [r7, #10]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d0e2      	beq.n	800dde8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de26:	2b03      	cmp	r3, #3
 800de28:	d036      	beq.n	800de98 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800de2a:	897b      	ldrh	r3, [r7, #10]
 800de2c:	461a      	mov	r2, r3
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681a      	ldr	r2, [r3, #0]
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de3a:	041b      	lsls	r3, r3, #16
 800de3c:	4619      	mov	r1, r3
 800de3e:	4610      	mov	r0, r2
 800de40:	f004 f98c 	bl	801215c <SDMMC_CmdSendCSD>
 800de44:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800de46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d001      	beq.n	800de50 <SD_InitCard+0x100>
    {
      return errorstate;
 800de4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de4e:	e049      	b.n	800dee4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	2100      	movs	r1, #0
 800de56:	4618      	mov	r0, r3
 800de58:	f003 ff4d 	bl	8011cf6 <SDMMC_GetResponse>
 800de5c:	4602      	mov	r2, r0
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	2104      	movs	r1, #4
 800de68:	4618      	mov	r0, r3
 800de6a:	f003 ff44 	bl	8011cf6 <SDMMC_GetResponse>
 800de6e:	4602      	mov	r2, r0
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	2108      	movs	r1, #8
 800de7a:	4618      	mov	r0, r3
 800de7c:	f003 ff3b 	bl	8011cf6 <SDMMC_GetResponse>
 800de80:	4602      	mov	r2, r0
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	210c      	movs	r1, #12
 800de8c:	4618      	mov	r0, r3
 800de8e:	f003 ff32 	bl	8011cf6 <SDMMC_GetResponse>
 800de92:	4602      	mov	r2, r0
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	2104      	movs	r1, #4
 800de9e:	4618      	mov	r0, r3
 800dea0:	f003 ff29 	bl	8011cf6 <SDMMC_GetResponse>
 800dea4:	4603      	mov	r3, r0
 800dea6:	0d1a      	lsrs	r2, r3, #20
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800deac:	f107 030c 	add.w	r3, r7, #12
 800deb0:	4619      	mov	r1, r3
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f7ff fb8c 	bl	800d5d0 <HAL_SD_GetCardCSD>
 800deb8:	4603      	mov	r3, r0
 800deba:	2b00      	cmp	r3, #0
 800debc:	d002      	beq.n	800dec4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800debe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dec2:	e00f      	b.n	800dee4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681a      	ldr	r2, [r3, #0]
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800decc:	041b      	lsls	r3, r3, #16
 800dece:	4619      	mov	r1, r3
 800ded0:	4610      	mov	r0, r2
 800ded2:	f004 f83b 	bl	8011f4c <SDMMC_CmdSelDesel>
 800ded6:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800ded8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d001      	beq.n	800dee2 <SD_InitCard+0x192>
  {
    return errorstate;
 800dede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dee0:	e000      	b.n	800dee4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800dee2:	2300      	movs	r3, #0
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3740      	adds	r7, #64	; 0x40
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}

0800deec <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b086      	sub	sp, #24
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800def4:	2300      	movs	r3, #0
 800def6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800def8:	2300      	movs	r3, #0
 800defa:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800defc:	2300      	movs	r3, #0
 800defe:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	4618      	mov	r0, r3
 800df06:	f004 f844 	bl	8011f92 <SDMMC_CmdGoIdleState>
 800df0a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d001      	beq.n	800df16 <SD_PowerON+0x2a>
  {
    return errorstate;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	e072      	b.n	800dffc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	4618      	mov	r0, r3
 800df1c:	f004 f857 	bl	8011fce <SDMMC_CmdOperCond>
 800df20:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800df28:	d10d      	bne.n	800df46 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2200      	movs	r2, #0
 800df2e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	4618      	mov	r0, r3
 800df36:	f004 f82c 	bl	8011f92 <SDMMC_CmdGoIdleState>
 800df3a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d004      	beq.n	800df4c <SD_PowerON+0x60>
    {
      return errorstate;
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	e05a      	b.n	800dffc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2201      	movs	r2, #1
 800df4a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df50:	2b01      	cmp	r3, #1
 800df52:	d137      	bne.n	800dfc4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	2100      	movs	r1, #0
 800df5a:	4618      	mov	r0, r3
 800df5c:	f004 f857 	bl	801200e <SDMMC_CmdAppCommand>
 800df60:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d02d      	beq.n	800dfc4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800df68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800df6c:	e046      	b.n	800dffc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	2100      	movs	r1, #0
 800df74:	4618      	mov	r0, r3
 800df76:	f004 f84a 	bl	801200e <SDMMC_CmdAppCommand>
 800df7a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d001      	beq.n	800df86 <SD_PowerON+0x9a>
    {
      return errorstate;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	e03a      	b.n	800dffc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	491e      	ldr	r1, [pc, #120]	; (800e004 <SD_PowerON+0x118>)
 800df8c:	4618      	mov	r0, r3
 800df8e:	f004 f861 	bl	8012054 <SDMMC_CmdAppOperCommand>
 800df92:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d002      	beq.n	800dfa0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800df9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800df9e:	e02d      	b.n	800dffc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	2100      	movs	r1, #0
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f003 fea5 	bl	8011cf6 <SDMMC_GetResponse>
 800dfac:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	0fdb      	lsrs	r3, r3, #31
 800dfb2:	2b01      	cmp	r3, #1
 800dfb4:	d101      	bne.n	800dfba <SD_PowerON+0xce>
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	e000      	b.n	800dfbc <SD_PowerON+0xd0>
 800dfba:	2300      	movs	r3, #0
 800dfbc:	613b      	str	r3, [r7, #16]

    count++;
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	3301      	adds	r3, #1
 800dfc2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dfca:	4293      	cmp	r3, r2
 800dfcc:	d802      	bhi.n	800dfd4 <SD_PowerON+0xe8>
 800dfce:	693b      	ldr	r3, [r7, #16]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d0cc      	beq.n	800df6e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dfda:	4293      	cmp	r3, r2
 800dfdc:	d902      	bls.n	800dfe4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800dfde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dfe2:	e00b      	b.n	800dffc <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d002      	beq.n	800dffa <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2201      	movs	r2, #1
 800dff8:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800dffa:	2300      	movs	r3, #0
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3718      	adds	r7, #24
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}
 800e004:	c1100000 	.word	0xc1100000

0800e008 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b08c      	sub	sp, #48	; 0x30
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e012:	f7f5 fbf1 	bl	80037f8 <HAL_GetTick>
 800e016:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	2100      	movs	r1, #0
 800e022:	4618      	mov	r0, r3
 800e024:	f003 fe67 	bl	8011cf6 <SDMMC_GetResponse>
 800e028:	4603      	mov	r3, r0
 800e02a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e02e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e032:	d102      	bne.n	800e03a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e034:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e038:	e0b0      	b.n	800e19c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	2140      	movs	r1, #64	; 0x40
 800e040:	4618      	mov	r0, r3
 800e042:	f003 fe97 	bl	8011d74 <SDMMC_CmdBlockLength>
 800e046:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e048:	6a3b      	ldr	r3, [r7, #32]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d005      	beq.n	800e05a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e056:	6a3b      	ldr	r3, [r7, #32]
 800e058:	e0a0      	b.n	800e19c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681a      	ldr	r2, [r3, #0]
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e062:	041b      	lsls	r3, r3, #16
 800e064:	4619      	mov	r1, r3
 800e066:	4610      	mov	r0, r2
 800e068:	f003 ffd1 	bl	801200e <SDMMC_CmdAppCommand>
 800e06c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e06e:	6a3b      	ldr	r3, [r7, #32]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d005      	beq.n	800e080 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e07c:	6a3b      	ldr	r3, [r7, #32]
 800e07e:	e08d      	b.n	800e19c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e080:	f04f 33ff 	mov.w	r3, #4294967295
 800e084:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e086:	2340      	movs	r3, #64	; 0x40
 800e088:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e08a:	2360      	movs	r3, #96	; 0x60
 800e08c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e08e:	2302      	movs	r3, #2
 800e090:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e092:	2300      	movs	r3, #0
 800e094:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e096:	2301      	movs	r3, #1
 800e098:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	f107 0208 	add.w	r2, r7, #8
 800e0a2:	4611      	mov	r1, r2
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f003 fe39 	bl	8011d1c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f004 f8b9 	bl	8012226 <SDMMC_CmdStatusRegister>
 800e0b4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e0b6:	6a3b      	ldr	r3, [r7, #32]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d02b      	beq.n	800e114 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e0c4:	6a3b      	ldr	r3, [r7, #32]
 800e0c6:	e069      	b.n	800e19c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d013      	beq.n	800e0fe <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0da:	e00d      	b.n	800e0f8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f003 fd93 	bl	8011c0c <SDMMC_ReadFIFO>
 800e0e6:	4602      	mov	r2, r0
 800e0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ea:	601a      	str	r2, [r3, #0]
        pData++;
 800e0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ee:	3304      	adds	r3, #4
 800e0f0:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f4:	3301      	adds	r3, #1
 800e0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0fa:	2b07      	cmp	r3, #7
 800e0fc:	d9ee      	bls.n	800e0dc <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e0fe:	f7f5 fb7b 	bl	80037f8 <HAL_GetTick>
 800e102:	4602      	mov	r2, r0
 800e104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e106:	1ad3      	subs	r3, r2, r3
 800e108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e10c:	d102      	bne.n	800e114 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e10e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e112:	e043      	b.n	800e19c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e11a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d0d2      	beq.n	800e0c8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e128:	f003 0308 	and.w	r3, r3, #8
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d001      	beq.n	800e134 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e130:	2308      	movs	r3, #8
 800e132:	e033      	b.n	800e19c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e13a:	f003 0302 	and.w	r3, r3, #2
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d001      	beq.n	800e146 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e142:	2302      	movs	r3, #2
 800e144:	e02a      	b.n	800e19c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e14c:	f003 0320 	and.w	r3, r3, #32
 800e150:	2b00      	cmp	r3, #0
 800e152:	d017      	beq.n	800e184 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e154:	2320      	movs	r3, #32
 800e156:	e021      	b.n	800e19c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	4618      	mov	r0, r3
 800e15e:	f003 fd55 	bl	8011c0c <SDMMC_ReadFIFO>
 800e162:	4602      	mov	r2, r0
 800e164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e166:	601a      	str	r2, [r3, #0]
    pData++;
 800e168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e16a:	3304      	adds	r3, #4
 800e16c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e16e:	f7f5 fb43 	bl	80037f8 <HAL_GetTick>
 800e172:	4602      	mov	r2, r0
 800e174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e176:	1ad3      	subs	r3, r2, r3
 800e178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e17c:	d102      	bne.n	800e184 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e17e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e182:	e00b      	b.n	800e19c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e18a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d1e2      	bne.n	800e158 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	4a03      	ldr	r2, [pc, #12]	; (800e1a4 <SD_SendSDStatus+0x19c>)
 800e198:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e19a:	2300      	movs	r3, #0
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	3730      	adds	r7, #48	; 0x30
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}
 800e1a4:	18000f3a 	.word	0x18000f3a

0800e1a8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b084      	sub	sp, #16
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d102      	bne.n	800e1be <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e1b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e1bc:	e018      	b.n	800e1f0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681a      	ldr	r2, [r3, #0]
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1c6:	041b      	lsls	r3, r3, #16
 800e1c8:	4619      	mov	r1, r3
 800e1ca:	4610      	mov	r0, r2
 800e1cc:	f004 f808 	bl	80121e0 <SDMMC_CmdSendStatus>
 800e1d0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d001      	beq.n	800e1dc <SD_SendStatus+0x34>
  {
    return errorstate;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	e009      	b.n	800e1f0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	2100      	movs	r1, #0
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f003 fd87 	bl	8011cf6 <SDMMC_GetResponse>
 800e1e8:	4602      	mov	r2, r0
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e1ee:	2300      	movs	r3, #0
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3710      	adds	r7, #16
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}

0800e1f8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b086      	sub	sp, #24
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e200:	2300      	movs	r3, #0
 800e202:	60fb      	str	r3, [r7, #12]
 800e204:	2300      	movs	r3, #0
 800e206:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	2100      	movs	r1, #0
 800e20e:	4618      	mov	r0, r3
 800e210:	f003 fd71 	bl	8011cf6 <SDMMC_GetResponse>
 800e214:	4603      	mov	r3, r0
 800e216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e21a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e21e:	d102      	bne.n	800e226 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e220:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e224:	e02f      	b.n	800e286 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e226:	f107 030c 	add.w	r3, r7, #12
 800e22a:	4619      	mov	r1, r3
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	f000 f879 	bl	800e324 <SD_FindSCR>
 800e232:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d001      	beq.n	800e23e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	e023      	b.n	800e286 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e244:	2b00      	cmp	r3, #0
 800e246:	d01c      	beq.n	800e282 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681a      	ldr	r2, [r3, #0]
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e250:	041b      	lsls	r3, r3, #16
 800e252:	4619      	mov	r1, r3
 800e254:	4610      	mov	r0, r2
 800e256:	f003 feda 	bl	801200e <SDMMC_CmdAppCommand>
 800e25a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d001      	beq.n	800e266 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	e00f      	b.n	800e286 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	2102      	movs	r1, #2
 800e26c:	4618      	mov	r0, r3
 800e26e:	f003 ff11 	bl	8012094 <SDMMC_CmdBusWidth>
 800e272:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e274:	697b      	ldr	r3, [r7, #20]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d001      	beq.n	800e27e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	e003      	b.n	800e286 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e27e:	2300      	movs	r3, #0
 800e280:	e001      	b.n	800e286 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e282:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e286:	4618      	mov	r0, r3
 800e288:	3718      	adds	r7, #24
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}

0800e28e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e28e:	b580      	push	{r7, lr}
 800e290:	b086      	sub	sp, #24
 800e292:	af00      	add	r7, sp, #0
 800e294:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e296:	2300      	movs	r3, #0
 800e298:	60fb      	str	r3, [r7, #12]
 800e29a:	2300      	movs	r3, #0
 800e29c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	2100      	movs	r1, #0
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	f003 fd26 	bl	8011cf6 <SDMMC_GetResponse>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e2b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e2b4:	d102      	bne.n	800e2bc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e2b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e2ba:	e02f      	b.n	800e31c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e2bc:	f107 030c 	add.w	r3, r7, #12
 800e2c0:	4619      	mov	r1, r3
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f000 f82e 	bl	800e324 <SD_FindSCR>
 800e2c8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d001      	beq.n	800e2d4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e2d0:	697b      	ldr	r3, [r7, #20]
 800e2d2:	e023      	b.n	800e31c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d01c      	beq.n	800e318 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681a      	ldr	r2, [r3, #0]
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2e6:	041b      	lsls	r3, r3, #16
 800e2e8:	4619      	mov	r1, r3
 800e2ea:	4610      	mov	r0, r2
 800e2ec:	f003 fe8f 	bl	801200e <SDMMC_CmdAppCommand>
 800e2f0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d001      	beq.n	800e2fc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e2f8:	697b      	ldr	r3, [r7, #20]
 800e2fa:	e00f      	b.n	800e31c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	2100      	movs	r1, #0
 800e302:	4618      	mov	r0, r3
 800e304:	f003 fec6 	bl	8012094 <SDMMC_CmdBusWidth>
 800e308:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d001      	beq.n	800e314 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e310:	697b      	ldr	r3, [r7, #20]
 800e312:	e003      	b.n	800e31c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e314:	2300      	movs	r3, #0
 800e316:	e001      	b.n	800e31c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e318:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e31c:	4618      	mov	r0, r3
 800e31e:	3718      	adds	r7, #24
 800e320:	46bd      	mov	sp, r7
 800e322:	bd80      	pop	{r7, pc}

0800e324 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b08e      	sub	sp, #56	; 0x38
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e32e:	f7f5 fa63 	bl	80037f8 <HAL_GetTick>
 800e332:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e334:	2300      	movs	r3, #0
 800e336:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e338:	2300      	movs	r3, #0
 800e33a:	60bb      	str	r3, [r7, #8]
 800e33c:	2300      	movs	r3, #0
 800e33e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	2108      	movs	r1, #8
 800e34a:	4618      	mov	r0, r3
 800e34c:	f003 fd12 	bl	8011d74 <SDMMC_CmdBlockLength>
 800e350:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e354:	2b00      	cmp	r3, #0
 800e356:	d001      	beq.n	800e35c <SD_FindSCR+0x38>
  {
    return errorstate;
 800e358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e35a:	e0ad      	b.n	800e4b8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681a      	ldr	r2, [r3, #0]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e364:	041b      	lsls	r3, r3, #16
 800e366:	4619      	mov	r1, r3
 800e368:	4610      	mov	r0, r2
 800e36a:	f003 fe50 	bl	801200e <SDMMC_CmdAppCommand>
 800e36e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e372:	2b00      	cmp	r3, #0
 800e374:	d001      	beq.n	800e37a <SD_FindSCR+0x56>
  {
    return errorstate;
 800e376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e378:	e09e      	b.n	800e4b8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e37a:	f04f 33ff 	mov.w	r3, #4294967295
 800e37e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e380:	2308      	movs	r3, #8
 800e382:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e384:	2330      	movs	r3, #48	; 0x30
 800e386:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e388:	2302      	movs	r3, #2
 800e38a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e38c:	2300      	movs	r3, #0
 800e38e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e390:	2301      	movs	r3, #1
 800e392:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	f107 0210 	add.w	r2, r7, #16
 800e39c:	4611      	mov	r1, r2
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f003 fcbc 	bl	8011d1c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f003 fe96 	bl	80120da <SDMMC_CmdSendSCR>
 800e3ae:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d027      	beq.n	800e406 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b8:	e07e      	b.n	800e4b8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d113      	bne.n	800e3f0 <SD_FindSCR+0xcc>
 800e3c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d110      	bne.n	800e3f0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f003 fc1a 	bl	8011c0c <SDMMC_ReadFIFO>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f003 fc13 	bl	8011c0c <SDMMC_ReadFIFO>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	60fb      	str	r3, [r7, #12]
      index++;
 800e3ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3ec:	3301      	adds	r3, #1
 800e3ee:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e3f0:	f7f5 fa02 	bl	80037f8 <HAL_GetTick>
 800e3f4:	4602      	mov	r2, r0
 800e3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3f8:	1ad3      	subs	r3, r2, r3
 800e3fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3fe:	d102      	bne.n	800e406 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e400:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e404:	e058      	b.n	800e4b8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e40c:	f240 532a 	movw	r3, #1322	; 0x52a
 800e410:	4013      	ands	r3, r2
 800e412:	2b00      	cmp	r3, #0
 800e414:	d0d1      	beq.n	800e3ba <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e41c:	f003 0308 	and.w	r3, r3, #8
 800e420:	2b00      	cmp	r3, #0
 800e422:	d005      	beq.n	800e430 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	2208      	movs	r2, #8
 800e42a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e42c:	2308      	movs	r3, #8
 800e42e:	e043      	b.n	800e4b8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e436:	f003 0302 	and.w	r3, r3, #2
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d005      	beq.n	800e44a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	2202      	movs	r2, #2
 800e444:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e446:	2302      	movs	r3, #2
 800e448:	e036      	b.n	800e4b8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e450:	f003 0320 	and.w	r3, r3, #32
 800e454:	2b00      	cmp	r3, #0
 800e456:	d005      	beq.n	800e464 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	2220      	movs	r2, #32
 800e45e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e460:	2320      	movs	r3, #32
 800e462:	e029      	b.n	800e4b8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	4a15      	ldr	r2, [pc, #84]	; (800e4c0 <SD_FindSCR+0x19c>)
 800e46a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	061a      	lsls	r2, r3, #24
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	021b      	lsls	r3, r3, #8
 800e474:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e478:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	0a1b      	lsrs	r3, r3, #8
 800e47e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e482:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	0e1b      	lsrs	r3, r3, #24
 800e488:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e48c:	601a      	str	r2, [r3, #0]
    scr++;
 800e48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e490:	3304      	adds	r3, #4
 800e492:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	061a      	lsls	r2, r3, #24
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	021b      	lsls	r3, r3, #8
 800e49c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e4a0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	0a1b      	lsrs	r3, r3, #8
 800e4a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e4aa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	0e1b      	lsrs	r3, r3, #24
 800e4b0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4b4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e4b6:	2300      	movs	r3, #0
}
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	3738      	adds	r7, #56	; 0x38
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}
 800e4c0:	18000f3a 	.word	0x18000f3a

0800e4c4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b086      	sub	sp, #24
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4d0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4d6:	2b1f      	cmp	r3, #31
 800e4d8:	d936      	bls.n	800e548 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800e4da:	2300      	movs	r3, #0
 800e4dc:	617b      	str	r3, [r7, #20]
 800e4de:	e027      	b.n	800e530 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f003 fb91 	bl	8011c0c <SDMMC_ReadFIFO>
 800e4ea:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	b2da      	uxtb	r2, r3
 800e4f0:	693b      	ldr	r3, [r7, #16]
 800e4f2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e4f4:	693b      	ldr	r3, [r7, #16]
 800e4f6:	3301      	adds	r3, #1
 800e4f8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	0a1b      	lsrs	r3, r3, #8
 800e4fe:	b2da      	uxtb	r2, r3
 800e500:	693b      	ldr	r3, [r7, #16]
 800e502:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e504:	693b      	ldr	r3, [r7, #16]
 800e506:	3301      	adds	r3, #1
 800e508:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	0c1b      	lsrs	r3, r3, #16
 800e50e:	b2da      	uxtb	r2, r3
 800e510:	693b      	ldr	r3, [r7, #16]
 800e512:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e514:	693b      	ldr	r3, [r7, #16]
 800e516:	3301      	adds	r3, #1
 800e518:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	0e1b      	lsrs	r3, r3, #24
 800e51e:	b2da      	uxtb	r2, r3
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e524:	693b      	ldr	r3, [r7, #16]
 800e526:	3301      	adds	r3, #1
 800e528:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	3301      	adds	r3, #1
 800e52e:	617b      	str	r3, [r7, #20]
 800e530:	697b      	ldr	r3, [r7, #20]
 800e532:	2b07      	cmp	r3, #7
 800e534:	d9d4      	bls.n	800e4e0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	693a      	ldr	r2, [r7, #16]
 800e53a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e540:	f1a3 0220 	sub.w	r2, r3, #32
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800e548:	bf00      	nop
 800e54a:	3718      	adds	r7, #24
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}

0800e550 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b086      	sub	sp, #24
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	69db      	ldr	r3, [r3, #28]
 800e55c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6a1b      	ldr	r3, [r3, #32]
 800e562:	2b1f      	cmp	r3, #31
 800e564:	d93a      	bls.n	800e5dc <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800e566:	2300      	movs	r3, #0
 800e568:	617b      	str	r3, [r7, #20]
 800e56a:	e02b      	b.n	800e5c4 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	781b      	ldrb	r3, [r3, #0]
 800e570:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	3301      	adds	r3, #1
 800e576:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e578:	693b      	ldr	r3, [r7, #16]
 800e57a:	781b      	ldrb	r3, [r3, #0]
 800e57c:	021a      	lsls	r2, r3, #8
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	4313      	orrs	r3, r2
 800e582:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e584:	693b      	ldr	r3, [r7, #16]
 800e586:	3301      	adds	r3, #1
 800e588:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e58a:	693b      	ldr	r3, [r7, #16]
 800e58c:	781b      	ldrb	r3, [r3, #0]
 800e58e:	041a      	lsls	r2, r3, #16
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	4313      	orrs	r3, r2
 800e594:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	3301      	adds	r3, #1
 800e59a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e59c:	693b      	ldr	r3, [r7, #16]
 800e59e:	781b      	ldrb	r3, [r3, #0]
 800e5a0:	061a      	lsls	r2, r3, #24
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	4313      	orrs	r3, r2
 800e5a6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e5a8:	693b      	ldr	r3, [r7, #16]
 800e5aa:	3301      	adds	r3, #1
 800e5ac:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	f107 020c 	add.w	r2, r7, #12
 800e5b6:	4611      	mov	r1, r2
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f003 fb34 	bl	8011c26 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	3301      	adds	r3, #1
 800e5c2:	617b      	str	r3, [r7, #20]
 800e5c4:	697b      	ldr	r3, [r7, #20]
 800e5c6:	2b07      	cmp	r3, #7
 800e5c8:	d9d0      	bls.n	800e56c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	693a      	ldr	r2, [r7, #16]
 800e5ce:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	6a1b      	ldr	r3, [r3, #32]
 800e5d4:	f1a3 0220 	sub.w	r2, r3, #32
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	621a      	str	r2, [r3, #32]
  }
}
 800e5dc:	bf00      	nop
 800e5de:	3718      	adds	r7, #24
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}

0800e5e4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e5e4:	b480      	push	{r7}
 800e5e6:	b083      	sub	sp, #12
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e5ec:	bf00      	nop
 800e5ee:	370c      	adds	r7, #12
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f6:	4770      	bx	lr

0800e5f8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e5f8:	b480      	push	{r7}
 800e5fa:	b083      	sub	sp, #12
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e600:	bf00      	nop
 800e602:	370c      	adds	r7, #12
 800e604:	46bd      	mov	sp, r7
 800e606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60a:	4770      	bx	lr

0800e60c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e60c:	b480      	push	{r7}
 800e60e:	b083      	sub	sp, #12
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e614:	bf00      	nop
 800e616:	370c      	adds	r7, #12
 800e618:	46bd      	mov	sp, r7
 800e61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61e:	4770      	bx	lr

0800e620 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e620:	b480      	push	{r7}
 800e622:	b083      	sub	sp, #12
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e628:	bf00      	nop
 800e62a:	370c      	adds	r7, #12
 800e62c:	46bd      	mov	sp, r7
 800e62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e632:	4770      	bx	lr

0800e634 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b084      	sub	sp, #16
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d101      	bne.n	800e646 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e642:	2301      	movs	r3, #1
 800e644:	e10f      	b.n	800e866 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2200      	movs	r2, #0
 800e64a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	4a87      	ldr	r2, [pc, #540]	; (800e870 <HAL_SPI_Init+0x23c>)
 800e652:	4293      	cmp	r3, r2
 800e654:	d00f      	beq.n	800e676 <HAL_SPI_Init+0x42>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	4a86      	ldr	r2, [pc, #536]	; (800e874 <HAL_SPI_Init+0x240>)
 800e65c:	4293      	cmp	r3, r2
 800e65e:	d00a      	beq.n	800e676 <HAL_SPI_Init+0x42>
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	4a84      	ldr	r2, [pc, #528]	; (800e878 <HAL_SPI_Init+0x244>)
 800e666:	4293      	cmp	r3, r2
 800e668:	d005      	beq.n	800e676 <HAL_SPI_Init+0x42>
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	68db      	ldr	r3, [r3, #12]
 800e66e:	2b0f      	cmp	r3, #15
 800e670:	d901      	bls.n	800e676 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e672:	2301      	movs	r3, #1
 800e674:	e0f7      	b.n	800e866 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	f000 fd5a 	bl	800f130 <SPI_GetPacketSize>
 800e67c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	4a7b      	ldr	r2, [pc, #492]	; (800e870 <HAL_SPI_Init+0x23c>)
 800e684:	4293      	cmp	r3, r2
 800e686:	d00c      	beq.n	800e6a2 <HAL_SPI_Init+0x6e>
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	4a79      	ldr	r2, [pc, #484]	; (800e874 <HAL_SPI_Init+0x240>)
 800e68e:	4293      	cmp	r3, r2
 800e690:	d007      	beq.n	800e6a2 <HAL_SPI_Init+0x6e>
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	4a78      	ldr	r2, [pc, #480]	; (800e878 <HAL_SPI_Init+0x244>)
 800e698:	4293      	cmp	r3, r2
 800e69a:	d002      	beq.n	800e6a2 <HAL_SPI_Init+0x6e>
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	2b08      	cmp	r3, #8
 800e6a0:	d811      	bhi.n	800e6c6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e6a6:	4a72      	ldr	r2, [pc, #456]	; (800e870 <HAL_SPI_Init+0x23c>)
 800e6a8:	4293      	cmp	r3, r2
 800e6aa:	d009      	beq.n	800e6c0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	4a70      	ldr	r2, [pc, #448]	; (800e874 <HAL_SPI_Init+0x240>)
 800e6b2:	4293      	cmp	r3, r2
 800e6b4:	d004      	beq.n	800e6c0 <HAL_SPI_Init+0x8c>
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	4a6f      	ldr	r2, [pc, #444]	; (800e878 <HAL_SPI_Init+0x244>)
 800e6bc:	4293      	cmp	r3, r2
 800e6be:	d104      	bne.n	800e6ca <HAL_SPI_Init+0x96>
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	2b10      	cmp	r3, #16
 800e6c4:	d901      	bls.n	800e6ca <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	e0cd      	b.n	800e866 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e6d0:	b2db      	uxtb	r3, r3
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d106      	bne.n	800e6e4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	2200      	movs	r2, #0
 800e6da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	f7f4 face 	bl	8002c80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2202      	movs	r2, #2
 800e6e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	681a      	ldr	r2, [r3, #0]
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	f022 0201 	bic.w	r2, r2, #1
 800e6fa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	689b      	ldr	r3, [r3, #8]
 800e702:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e706:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	699b      	ldr	r3, [r3, #24]
 800e70c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e710:	d119      	bne.n	800e746 <HAL_SPI_Init+0x112>
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	685b      	ldr	r3, [r3, #4]
 800e716:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e71a:	d103      	bne.n	800e724 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e720:	2b00      	cmp	r3, #0
 800e722:	d008      	beq.n	800e736 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d10c      	bne.n	800e746 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e730:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e734:	d107      	bne.n	800e746 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	681a      	ldr	r2, [r3, #0]
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e744:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	685b      	ldr	r3, [r3, #4]
 800e74a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d00f      	beq.n	800e772 <HAL_SPI_Init+0x13e>
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	68db      	ldr	r3, [r3, #12]
 800e756:	2b06      	cmp	r3, #6
 800e758:	d90b      	bls.n	800e772 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	430a      	orrs	r2, r1
 800e76e:	601a      	str	r2, [r3, #0]
 800e770:	e007      	b.n	800e782 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	681a      	ldr	r2, [r3, #0]
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e780:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	69da      	ldr	r2, [r3, #28]
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e78a:	431a      	orrs	r2, r3
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	431a      	orrs	r2, r3
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e794:	ea42 0103 	orr.w	r1, r2, r3
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	68da      	ldr	r2, [r3, #12]
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	430a      	orrs	r2, r1
 800e7a2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ac:	431a      	orrs	r2, r3
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7b2:	431a      	orrs	r2, r3
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	699b      	ldr	r3, [r3, #24]
 800e7b8:	431a      	orrs	r2, r3
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	691b      	ldr	r3, [r3, #16]
 800e7be:	431a      	orrs	r2, r3
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	695b      	ldr	r3, [r3, #20]
 800e7c4:	431a      	orrs	r2, r3
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	6a1b      	ldr	r3, [r3, #32]
 800e7ca:	431a      	orrs	r2, r3
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	685b      	ldr	r3, [r3, #4]
 800e7d0:	431a      	orrs	r2, r3
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e7d6:	431a      	orrs	r2, r3
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	689b      	ldr	r3, [r3, #8]
 800e7dc:	431a      	orrs	r2, r3
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e7e2:	ea42 0103 	orr.w	r1, r2, r3
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	430a      	orrs	r2, r1
 800e7f0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	685b      	ldr	r3, [r3, #4]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d113      	bne.n	800e822 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	689b      	ldr	r3, [r3, #8]
 800e800:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e80c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	689b      	ldr	r3, [r3, #8]
 800e814:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e820:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	f022 0201 	bic.w	r2, r2, #1
 800e830:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	685b      	ldr	r3, [r3, #4]
 800e836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d00a      	beq.n	800e854 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	68db      	ldr	r3, [r3, #12]
 800e844:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	430a      	orrs	r2, r1
 800e852:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	2200      	movs	r2, #0
 800e858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2201      	movs	r2, #1
 800e860:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e864:	2300      	movs	r3, #0
}
 800e866:	4618      	mov	r0, r3
 800e868:	3710      	adds	r7, #16
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}
 800e86e:	bf00      	nop
 800e870:	40013000 	.word	0x40013000
 800e874:	40003800 	.word	0x40003800
 800e878:	40003c00 	.word	0x40003c00

0800e87c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b08a      	sub	sp, #40	; 0x28
 800e880:	af02      	add	r7, sp, #8
 800e882:	60f8      	str	r0, [r7, #12]
 800e884:	60b9      	str	r1, [r7, #8]
 800e886:	603b      	str	r3, [r7, #0]
 800e888:	4613      	mov	r3, r2
 800e88a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	3320      	adds	r3, #32
 800e892:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e894:	2300      	movs	r3, #0
 800e896:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e89e:	2b01      	cmp	r3, #1
 800e8a0:	d101      	bne.n	800e8a6 <HAL_SPI_Transmit+0x2a>
 800e8a2:	2302      	movs	r3, #2
 800e8a4:	e1e1      	b.n	800ec6a <HAL_SPI_Transmit+0x3ee>
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	2201      	movs	r2, #1
 800e8aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e8ae:	f7f4 ffa3 	bl	80037f8 <HAL_GetTick>
 800e8b2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e8ba:	b2db      	uxtb	r3, r3
 800e8bc:	2b01      	cmp	r3, #1
 800e8be:	d007      	beq.n	800e8d0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800e8c0:	2302      	movs	r3, #2
 800e8c2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e8cc:	7efb      	ldrb	r3, [r7, #27]
 800e8ce:	e1cc      	b.n	800ec6a <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e8d0:	68bb      	ldr	r3, [r7, #8]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d002      	beq.n	800e8dc <HAL_SPI_Transmit+0x60>
 800e8d6:	88fb      	ldrh	r3, [r7, #6]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d107      	bne.n	800e8ec <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800e8dc:	2301      	movs	r3, #1
 800e8de:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e8e8:	7efb      	ldrb	r3, [r7, #27]
 800e8ea:	e1be      	b.n	800ec6a <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	2203      	movs	r2, #3
 800e8f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	68ba      	ldr	r2, [r7, #8]
 800e900:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	88fa      	ldrh	r2, [r7, #6]
 800e906:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	88fa      	ldrh	r2, [r7, #6]
 800e90e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	2200      	movs	r2, #0
 800e916:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	2200      	movs	r2, #0
 800e91c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	2200      	movs	r2, #0
 800e924:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	2200      	movs	r2, #0
 800e92c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	2200      	movs	r2, #0
 800e932:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	689b      	ldr	r3, [r3, #8]
 800e938:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e93c:	d108      	bne.n	800e950 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	681a      	ldr	r2, [r3, #0]
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e94c:	601a      	str	r2, [r3, #0]
 800e94e:	e009      	b.n	800e964 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	68db      	ldr	r3, [r3, #12]
 800e956:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e962:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	685a      	ldr	r2, [r3, #4]
 800e96a:	4b96      	ldr	r3, [pc, #600]	; (800ebc4 <HAL_SPI_Transmit+0x348>)
 800e96c:	4013      	ands	r3, r2
 800e96e:	88f9      	ldrh	r1, [r7, #6]
 800e970:	68fa      	ldr	r2, [r7, #12]
 800e972:	6812      	ldr	r2, [r2, #0]
 800e974:	430b      	orrs	r3, r1
 800e976:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	681a      	ldr	r2, [r3, #0]
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	f042 0201 	orr.w	r2, r2, #1
 800e986:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	685b      	ldr	r3, [r3, #4]
 800e98c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e990:	d107      	bne.n	800e9a2 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	681a      	ldr	r2, [r3, #0]
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e9a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	68db      	ldr	r3, [r3, #12]
 800e9a6:	2b0f      	cmp	r3, #15
 800e9a8:	d947      	bls.n	800ea3a <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e9aa:	e03f      	b.n	800ea2c <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	695b      	ldr	r3, [r3, #20]
 800e9b2:	f003 0302 	and.w	r3, r3, #2
 800e9b6:	2b02      	cmp	r3, #2
 800e9b8:	d114      	bne.n	800e9e4 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	6812      	ldr	r2, [r2, #0]
 800e9c4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e9ca:	1d1a      	adds	r2, r3, #4
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e9d6:	b29b      	uxth	r3, r3
 800e9d8:	3b01      	subs	r3, #1
 800e9da:	b29a      	uxth	r2, r3
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e9e2:	e023      	b.n	800ea2c <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e9e4:	f7f4 ff08 	bl	80037f8 <HAL_GetTick>
 800e9e8:	4602      	mov	r2, r0
 800e9ea:	697b      	ldr	r3, [r7, #20]
 800e9ec:	1ad3      	subs	r3, r2, r3
 800e9ee:	683a      	ldr	r2, [r7, #0]
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	d803      	bhi.n	800e9fc <HAL_SPI_Transmit+0x180>
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9fa:	d102      	bne.n	800ea02 <HAL_SPI_Transmit+0x186>
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d114      	bne.n	800ea2c <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ea02:	68f8      	ldr	r0, [r7, #12]
 800ea04:	f000 fac6 	bl	800ef94 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	2201      	movs	r2, #1
 800ea24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ea28:	2303      	movs	r3, #3
 800ea2a:	e11e      	b.n	800ec6a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ea32:	b29b      	uxth	r3, r3
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d1b9      	bne.n	800e9ac <HAL_SPI_Transmit+0x130>
 800ea38:	e0f1      	b.n	800ec1e <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	68db      	ldr	r3, [r3, #12]
 800ea3e:	2b07      	cmp	r3, #7
 800ea40:	f240 80e6 	bls.w	800ec10 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ea44:	e05d      	b.n	800eb02 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	695b      	ldr	r3, [r3, #20]
 800ea4c:	f003 0302 	and.w	r3, r3, #2
 800ea50:	2b02      	cmp	r3, #2
 800ea52:	d132      	bne.n	800eaba <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ea5a:	b29b      	uxth	r3, r3
 800ea5c:	2b01      	cmp	r3, #1
 800ea5e:	d918      	bls.n	800ea92 <HAL_SPI_Transmit+0x216>
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d014      	beq.n	800ea92 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	6812      	ldr	r2, [r2, #0]
 800ea72:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ea78:	1d1a      	adds	r2, r3, #4
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ea84:	b29b      	uxth	r3, r3
 800ea86:	3b02      	subs	r3, #2
 800ea88:	b29a      	uxth	r2, r3
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ea90:	e037      	b.n	800eb02 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ea96:	881a      	ldrh	r2, [r3, #0]
 800ea98:	69fb      	ldr	r3, [r7, #28]
 800ea9a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eaa0:	1c9a      	adds	r2, r3, #2
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eaac:	b29b      	uxth	r3, r3
 800eaae:	3b01      	subs	r3, #1
 800eab0:	b29a      	uxth	r2, r3
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800eab8:	e023      	b.n	800eb02 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eaba:	f7f4 fe9d 	bl	80037f8 <HAL_GetTick>
 800eabe:	4602      	mov	r2, r0
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	1ad3      	subs	r3, r2, r3
 800eac4:	683a      	ldr	r2, [r7, #0]
 800eac6:	429a      	cmp	r2, r3
 800eac8:	d803      	bhi.n	800ead2 <HAL_SPI_Transmit+0x256>
 800eaca:	683b      	ldr	r3, [r7, #0]
 800eacc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ead0:	d102      	bne.n	800ead8 <HAL_SPI_Transmit+0x25c>
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d114      	bne.n	800eb02 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ead8:	68f8      	ldr	r0, [r7, #12]
 800eada:	f000 fa5b 	bl	800ef94 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	2200      	movs	r2, #0
 800eae2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eaec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	2201      	movs	r2, #1
 800eafa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800eafe:	2303      	movs	r3, #3
 800eb00:	e0b3      	b.n	800ec6a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb08:	b29b      	uxth	r3, r3
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d19b      	bne.n	800ea46 <HAL_SPI_Transmit+0x1ca>
 800eb0e:	e086      	b.n	800ec1e <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	695b      	ldr	r3, [r3, #20]
 800eb16:	f003 0302 	and.w	r3, r3, #2
 800eb1a:	2b02      	cmp	r3, #2
 800eb1c:	d154      	bne.n	800ebc8 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb24:	b29b      	uxth	r3, r3
 800eb26:	2b03      	cmp	r3, #3
 800eb28:	d918      	bls.n	800eb5c <HAL_SPI_Transmit+0x2e0>
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb2e:	2b40      	cmp	r3, #64	; 0x40
 800eb30:	d914      	bls.n	800eb5c <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	6812      	ldr	r2, [r2, #0]
 800eb3c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb42:	1d1a      	adds	r2, r3, #4
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb4e:	b29b      	uxth	r3, r3
 800eb50:	3b04      	subs	r3, #4
 800eb52:	b29a      	uxth	r2, r3
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800eb5a:	e059      	b.n	800ec10 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb62:	b29b      	uxth	r3, r3
 800eb64:	2b01      	cmp	r3, #1
 800eb66:	d917      	bls.n	800eb98 <HAL_SPI_Transmit+0x31c>
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d013      	beq.n	800eb98 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb74:	881a      	ldrh	r2, [r3, #0]
 800eb76:	69fb      	ldr	r3, [r7, #28]
 800eb78:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb7e:	1c9a      	adds	r2, r3, #2
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb8a:	b29b      	uxth	r3, r3
 800eb8c:	3b02      	subs	r3, #2
 800eb8e:	b29a      	uxth	r2, r3
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800eb96:	e03b      	b.n	800ec10 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	3320      	adds	r3, #32
 800eba2:	7812      	ldrb	r2, [r2, #0]
 800eba4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ebaa:	1c5a      	adds	r2, r3, #1
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ebb6:	b29b      	uxth	r3, r3
 800ebb8:	3b01      	subs	r3, #1
 800ebba:	b29a      	uxth	r2, r3
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ebc2:	e025      	b.n	800ec10 <HAL_SPI_Transmit+0x394>
 800ebc4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ebc8:	f7f4 fe16 	bl	80037f8 <HAL_GetTick>
 800ebcc:	4602      	mov	r2, r0
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	1ad3      	subs	r3, r2, r3
 800ebd2:	683a      	ldr	r2, [r7, #0]
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d803      	bhi.n	800ebe0 <HAL_SPI_Transmit+0x364>
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebde:	d102      	bne.n	800ebe6 <HAL_SPI_Transmit+0x36a>
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d114      	bne.n	800ec10 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ebe6:	68f8      	ldr	r0, [r7, #12]
 800ebe8:	f000 f9d4 	bl	800ef94 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	2200      	movs	r2, #0
 800ebf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ebfa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	2201      	movs	r2, #1
 800ec08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ec0c:	2303      	movs	r3, #3
 800ec0e:	e02c      	b.n	800ec6a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec16:	b29b      	uxth	r3, r3
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	f47f af79 	bne.w	800eb10 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	9300      	str	r3, [sp, #0]
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	2200      	movs	r2, #0
 800ec26:	2108      	movs	r1, #8
 800ec28:	68f8      	ldr	r0, [r7, #12]
 800ec2a:	f000 fa53 	bl	800f0d4 <SPI_WaitOnFlagUntilTimeout>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d007      	beq.n	800ec44 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec3a:	f043 0220 	orr.w	r2, r3, #32
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ec44:	68f8      	ldr	r0, [r7, #12]
 800ec46:	f000 f9a5 	bl	800ef94 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	2201      	movs	r2, #1
 800ec56:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d001      	beq.n	800ec68 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800ec64:	2301      	movs	r3, #1
 800ec66:	e000      	b.n	800ec6a <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800ec68:	7efb      	ldrb	r3, [r7, #27]
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3720      	adds	r7, #32
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}
 800ec72:	bf00      	nop

0800ec74 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b088      	sub	sp, #32
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	60f8      	str	r0, [r7, #12]
 800ec7c:	60b9      	str	r1, [r7, #8]
 800ec7e:	603b      	str	r3, [r7, #0]
 800ec80:	4613      	mov	r3, r2
 800ec82:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ec84:	2300      	movs	r3, #0
 800ec86:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	3330      	adds	r3, #48	; 0x30
 800ec8e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec96:	2b01      	cmp	r3, #1
 800ec98:	d101      	bne.n	800ec9e <HAL_SPI_Receive+0x2a>
 800ec9a:	2302      	movs	r3, #2
 800ec9c:	e173      	b.n	800ef86 <HAL_SPI_Receive+0x312>
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	2201      	movs	r2, #1
 800eca2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eca6:	f7f4 fda7 	bl	80037f8 <HAL_GetTick>
 800ecaa:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ecb2:	b2db      	uxtb	r3, r3
 800ecb4:	2b01      	cmp	r3, #1
 800ecb6:	d007      	beq.n	800ecc8 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800ecb8:	2302      	movs	r3, #2
 800ecba:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ecc4:	7ffb      	ldrb	r3, [r7, #31]
 800ecc6:	e15e      	b.n	800ef86 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d002      	beq.n	800ecd4 <HAL_SPI_Receive+0x60>
 800ecce:	88fb      	ldrh	r3, [r7, #6]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d107      	bne.n	800ece4 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800ecd4:	2301      	movs	r3, #1
 800ecd6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	2200      	movs	r2, #0
 800ecdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ece0:	7ffb      	ldrb	r3, [r7, #31]
 800ece2:	e150      	b.n	800ef86 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	2204      	movs	r2, #4
 800ece8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	2200      	movs	r2, #0
 800ecf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	68ba      	ldr	r2, [r7, #8]
 800ecf8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	88fa      	ldrh	r2, [r7, #6]
 800ecfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	88fa      	ldrh	r2, [r7, #6]
 800ed06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	2200      	movs	r2, #0
 800ed14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	2200      	movs	r2, #0
 800ed24:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	2200      	movs	r2, #0
 800ed2a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	689b      	ldr	r3, [r3, #8]
 800ed30:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ed34:	d108      	bne.n	800ed48 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	681a      	ldr	r2, [r3, #0]
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ed44:	601a      	str	r2, [r3, #0]
 800ed46:	e009      	b.n	800ed5c <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	68db      	ldr	r3, [r3, #12]
 800ed4e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ed5a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	685a      	ldr	r2, [r3, #4]
 800ed62:	4b8b      	ldr	r3, [pc, #556]	; (800ef90 <HAL_SPI_Receive+0x31c>)
 800ed64:	4013      	ands	r3, r2
 800ed66:	88f9      	ldrh	r1, [r7, #6]
 800ed68:	68fa      	ldr	r2, [r7, #12]
 800ed6a:	6812      	ldr	r2, [r2, #0]
 800ed6c:	430b      	orrs	r3, r1
 800ed6e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	681a      	ldr	r2, [r3, #0]
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	f042 0201 	orr.w	r2, r2, #1
 800ed7e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	685b      	ldr	r3, [r3, #4]
 800ed84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ed88:	d107      	bne.n	800ed9a <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	681a      	ldr	r2, [r3, #0]
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ed98:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	68db      	ldr	r3, [r3, #12]
 800ed9e:	2b0f      	cmp	r3, #15
 800eda0:	d948      	bls.n	800ee34 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800eda2:	e040      	b.n	800ee26 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	695a      	ldr	r2, [r3, #20]
 800edaa:	f248 0308 	movw	r3, #32776	; 0x8008
 800edae:	4013      	ands	r3, r2
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d014      	beq.n	800edde <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	681a      	ldr	r2, [r3, #0]
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800edbc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800edbe:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800edc4:	1d1a      	adds	r2, r3, #4
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800edd0:	b29b      	uxth	r3, r3
 800edd2:	3b01      	subs	r3, #1
 800edd4:	b29a      	uxth	r2, r3
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800eddc:	e023      	b.n	800ee26 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800edde:	f7f4 fd0b 	bl	80037f8 <HAL_GetTick>
 800ede2:	4602      	mov	r2, r0
 800ede4:	697b      	ldr	r3, [r7, #20]
 800ede6:	1ad3      	subs	r3, r2, r3
 800ede8:	683a      	ldr	r2, [r7, #0]
 800edea:	429a      	cmp	r2, r3
 800edec:	d803      	bhi.n	800edf6 <HAL_SPI_Receive+0x182>
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edf4:	d102      	bne.n	800edfc <HAL_SPI_Receive+0x188>
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d114      	bne.n	800ee26 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800edfc:	68f8      	ldr	r0, [r7, #12]
 800edfe:	f000 f8c9 	bl	800ef94 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	2200      	movs	r2, #0
 800ee06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	2201      	movs	r2, #1
 800ee1e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ee22:	2303      	movs	r3, #3
 800ee24:	e0af      	b.n	800ef86 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ee2c:	b29b      	uxth	r3, r3
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d1b8      	bne.n	800eda4 <HAL_SPI_Receive+0x130>
 800ee32:	e095      	b.n	800ef60 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	68db      	ldr	r3, [r3, #12]
 800ee38:	2b07      	cmp	r3, #7
 800ee3a:	f240 808b 	bls.w	800ef54 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ee3e:	e03f      	b.n	800eec0 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	695b      	ldr	r3, [r3, #20]
 800ee46:	f003 0301 	and.w	r3, r3, #1
 800ee4a:	2b01      	cmp	r3, #1
 800ee4c:	d114      	bne.n	800ee78 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee52:	69ba      	ldr	r2, [r7, #24]
 800ee54:	8812      	ldrh	r2, [r2, #0]
 800ee56:	b292      	uxth	r2, r2
 800ee58:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee5e:	1c9a      	adds	r2, r3, #2
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ee6a:	b29b      	uxth	r3, r3
 800ee6c:	3b01      	subs	r3, #1
 800ee6e:	b29a      	uxth	r2, r3
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ee76:	e023      	b.n	800eec0 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ee78:	f7f4 fcbe 	bl	80037f8 <HAL_GetTick>
 800ee7c:	4602      	mov	r2, r0
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	1ad3      	subs	r3, r2, r3
 800ee82:	683a      	ldr	r2, [r7, #0]
 800ee84:	429a      	cmp	r2, r3
 800ee86:	d803      	bhi.n	800ee90 <HAL_SPI_Receive+0x21c>
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee8e:	d102      	bne.n	800ee96 <HAL_SPI_Receive+0x222>
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d114      	bne.n	800eec0 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ee96:	68f8      	ldr	r0, [r7, #12]
 800ee98:	f000 f87c 	bl	800ef94 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eeaa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	2201      	movs	r2, #1
 800eeb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800eebc:	2303      	movs	r3, #3
 800eebe:	e062      	b.n	800ef86 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eec6:	b29b      	uxth	r3, r3
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d1b9      	bne.n	800ee40 <HAL_SPI_Receive+0x1cc>
 800eecc:	e048      	b.n	800ef60 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	695b      	ldr	r3, [r3, #20]
 800eed4:	f003 0301 	and.w	r3, r3, #1
 800eed8:	2b01      	cmp	r3, #1
 800eeda:	d117      	bne.n	800ef0c <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eee8:	7812      	ldrb	r2, [r2, #0]
 800eeea:	b2d2      	uxtb	r2, r2
 800eeec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eef2:	1c5a      	adds	r2, r3, #1
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eefe:	b29b      	uxth	r3, r3
 800ef00:	3b01      	subs	r3, #1
 800ef02:	b29a      	uxth	r2, r3
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ef0a:	e023      	b.n	800ef54 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ef0c:	f7f4 fc74 	bl	80037f8 <HAL_GetTick>
 800ef10:	4602      	mov	r2, r0
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	1ad3      	subs	r3, r2, r3
 800ef16:	683a      	ldr	r2, [r7, #0]
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	d803      	bhi.n	800ef24 <HAL_SPI_Receive+0x2b0>
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef22:	d102      	bne.n	800ef2a <HAL_SPI_Receive+0x2b6>
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d114      	bne.n	800ef54 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ef2a:	68f8      	ldr	r0, [r7, #12]
 800ef2c:	f000 f832 	bl	800ef94 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	2200      	movs	r2, #0
 800ef34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	2201      	movs	r2, #1
 800ef4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ef50:	2303      	movs	r3, #3
 800ef52:	e018      	b.n	800ef86 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ef5a:	b29b      	uxth	r3, r3
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d1b6      	bne.n	800eece <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ef60:	68f8      	ldr	r0, [r7, #12]
 800ef62:	f000 f817 	bl	800ef94 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	2200      	movs	r2, #0
 800ef6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	2201      	movs	r2, #1
 800ef72:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d001      	beq.n	800ef84 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800ef80:	2301      	movs	r3, #1
 800ef82:	e000      	b.n	800ef86 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800ef84:	7ffb      	ldrb	r3, [r7, #31]
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3720      	adds	r7, #32
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}
 800ef8e:	bf00      	nop
 800ef90:	ffff0000 	.word	0xffff0000

0800ef94 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ef94:	b480      	push	{r7}
 800ef96:	b085      	sub	sp, #20
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	695b      	ldr	r3, [r3, #20]
 800efa2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	699a      	ldr	r2, [r3, #24]
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	f042 0208 	orr.w	r2, r2, #8
 800efb2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	699a      	ldr	r2, [r3, #24]
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	f042 0210 	orr.w	r2, r2, #16
 800efc2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	681a      	ldr	r2, [r3, #0]
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	f022 0201 	bic.w	r2, r2, #1
 800efd2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	6919      	ldr	r1, [r3, #16]
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681a      	ldr	r2, [r3, #0]
 800efde:	4b3c      	ldr	r3, [pc, #240]	; (800f0d0 <SPI_CloseTransfer+0x13c>)
 800efe0:	400b      	ands	r3, r1
 800efe2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	689a      	ldr	r2, [r3, #8]
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800eff2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800effa:	b2db      	uxtb	r3, r3
 800effc:	2b04      	cmp	r3, #4
 800effe:	d014      	beq.n	800f02a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	f003 0320 	and.w	r3, r3, #32
 800f006:	2b00      	cmp	r3, #0
 800f008:	d00f      	beq.n	800f02a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f010:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	699a      	ldr	r2, [r3, #24]
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	f042 0220 	orr.w	r2, r2, #32
 800f028:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f030:	b2db      	uxtb	r3, r3
 800f032:	2b03      	cmp	r3, #3
 800f034:	d014      	beq.n	800f060 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d00f      	beq.n	800f060 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f046:	f043 0204 	orr.w	r2, r3, #4
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	699a      	ldr	r2, [r3, #24]
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f05e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f066:	2b00      	cmp	r3, #0
 800f068:	d00f      	beq.n	800f08a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f070:	f043 0201 	orr.w	r2, r3, #1
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	699a      	ldr	r2, [r3, #24]
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f088:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f090:	2b00      	cmp	r3, #0
 800f092:	d00f      	beq.n	800f0b4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f09a:	f043 0208 	orr.w	r2, r3, #8
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	699a      	ldr	r2, [r3, #24]
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f0b2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2200      	movs	r2, #0
 800f0c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f0c4:	bf00      	nop
 800f0c6:	3714      	adds	r7, #20
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ce:	4770      	bx	lr
 800f0d0:	fffffc90 	.word	0xfffffc90

0800f0d4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b084      	sub	sp, #16
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	60f8      	str	r0, [r7, #12]
 800f0dc:	60b9      	str	r1, [r7, #8]
 800f0de:	603b      	str	r3, [r7, #0]
 800f0e0:	4613      	mov	r3, r2
 800f0e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f0e4:	e010      	b.n	800f108 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f0e6:	f7f4 fb87 	bl	80037f8 <HAL_GetTick>
 800f0ea:	4602      	mov	r2, r0
 800f0ec:	69bb      	ldr	r3, [r7, #24]
 800f0ee:	1ad3      	subs	r3, r2, r3
 800f0f0:	683a      	ldr	r2, [r7, #0]
 800f0f2:	429a      	cmp	r2, r3
 800f0f4:	d803      	bhi.n	800f0fe <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0fc:	d102      	bne.n	800f104 <SPI_WaitOnFlagUntilTimeout+0x30>
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d101      	bne.n	800f108 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f104:	2303      	movs	r3, #3
 800f106:	e00f      	b.n	800f128 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	695a      	ldr	r2, [r3, #20]
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	4013      	ands	r3, r2
 800f112:	68ba      	ldr	r2, [r7, #8]
 800f114:	429a      	cmp	r2, r3
 800f116:	bf0c      	ite	eq
 800f118:	2301      	moveq	r3, #1
 800f11a:	2300      	movne	r3, #0
 800f11c:	b2db      	uxtb	r3, r3
 800f11e:	461a      	mov	r2, r3
 800f120:	79fb      	ldrb	r3, [r7, #7]
 800f122:	429a      	cmp	r2, r3
 800f124:	d0df      	beq.n	800f0e6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f126:	2300      	movs	r3, #0
}
 800f128:	4618      	mov	r0, r3
 800f12a:	3710      	adds	r7, #16
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}

0800f130 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f130:	b480      	push	{r7}
 800f132:	b085      	sub	sp, #20
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f13c:	095b      	lsrs	r3, r3, #5
 800f13e:	3301      	adds	r3, #1
 800f140:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	68db      	ldr	r3, [r3, #12]
 800f146:	3301      	adds	r3, #1
 800f148:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	3307      	adds	r3, #7
 800f14e:	08db      	lsrs	r3, r3, #3
 800f150:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f152:	68bb      	ldr	r3, [r7, #8]
 800f154:	68fa      	ldr	r2, [r7, #12]
 800f156:	fb02 f303 	mul.w	r3, r2, r3
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3714      	adds	r7, #20
 800f15e:	46bd      	mov	sp, r7
 800f160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f164:	4770      	bx	lr

0800f166 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f166:	b580      	push	{r7, lr}
 800f168:	b082      	sub	sp, #8
 800f16a:	af00      	add	r7, sp, #0
 800f16c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d101      	bne.n	800f178 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f174:	2301      	movs	r3, #1
 800f176:	e049      	b.n	800f20c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f17e:	b2db      	uxtb	r3, r3
 800f180:	2b00      	cmp	r3, #0
 800f182:	d106      	bne.n	800f192 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2200      	movs	r2, #0
 800f188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f18c:	6878      	ldr	r0, [r7, #4]
 800f18e:	f7f3 fe33 	bl	8002df8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	2202      	movs	r2, #2
 800f196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681a      	ldr	r2, [r3, #0]
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	3304      	adds	r3, #4
 800f1a2:	4619      	mov	r1, r3
 800f1a4:	4610      	mov	r0, r2
 800f1a6:	f000 fed1 	bl	800ff4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	2201      	movs	r2, #1
 800f1ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2201      	movs	r2, #1
 800f1b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2201      	movs	r2, #1
 800f1be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	2201      	movs	r2, #1
 800f1c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2201      	movs	r2, #1
 800f1ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	2201      	movs	r2, #1
 800f1d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	2201      	movs	r2, #1
 800f1de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2201      	movs	r2, #1
 800f1e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	2201      	movs	r2, #1
 800f1ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	2201      	movs	r2, #1
 800f1f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2201      	movs	r2, #1
 800f1fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	2201      	movs	r2, #1
 800f206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f20a:	2300      	movs	r3, #0
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3708      	adds	r7, #8
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}

0800f214 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b084      	sub	sp, #16
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
 800f21c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d109      	bne.n	800f238 <HAL_TIM_PWM_Start+0x24>
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f22a:	b2db      	uxtb	r3, r3
 800f22c:	2b01      	cmp	r3, #1
 800f22e:	bf14      	ite	ne
 800f230:	2301      	movne	r3, #1
 800f232:	2300      	moveq	r3, #0
 800f234:	b2db      	uxtb	r3, r3
 800f236:	e03c      	b.n	800f2b2 <HAL_TIM_PWM_Start+0x9e>
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	2b04      	cmp	r3, #4
 800f23c:	d109      	bne.n	800f252 <HAL_TIM_PWM_Start+0x3e>
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f244:	b2db      	uxtb	r3, r3
 800f246:	2b01      	cmp	r3, #1
 800f248:	bf14      	ite	ne
 800f24a:	2301      	movne	r3, #1
 800f24c:	2300      	moveq	r3, #0
 800f24e:	b2db      	uxtb	r3, r3
 800f250:	e02f      	b.n	800f2b2 <HAL_TIM_PWM_Start+0x9e>
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	2b08      	cmp	r3, #8
 800f256:	d109      	bne.n	800f26c <HAL_TIM_PWM_Start+0x58>
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f25e:	b2db      	uxtb	r3, r3
 800f260:	2b01      	cmp	r3, #1
 800f262:	bf14      	ite	ne
 800f264:	2301      	movne	r3, #1
 800f266:	2300      	moveq	r3, #0
 800f268:	b2db      	uxtb	r3, r3
 800f26a:	e022      	b.n	800f2b2 <HAL_TIM_PWM_Start+0x9e>
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	2b0c      	cmp	r3, #12
 800f270:	d109      	bne.n	800f286 <HAL_TIM_PWM_Start+0x72>
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f278:	b2db      	uxtb	r3, r3
 800f27a:	2b01      	cmp	r3, #1
 800f27c:	bf14      	ite	ne
 800f27e:	2301      	movne	r3, #1
 800f280:	2300      	moveq	r3, #0
 800f282:	b2db      	uxtb	r3, r3
 800f284:	e015      	b.n	800f2b2 <HAL_TIM_PWM_Start+0x9e>
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	2b10      	cmp	r3, #16
 800f28a:	d109      	bne.n	800f2a0 <HAL_TIM_PWM_Start+0x8c>
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f292:	b2db      	uxtb	r3, r3
 800f294:	2b01      	cmp	r3, #1
 800f296:	bf14      	ite	ne
 800f298:	2301      	movne	r3, #1
 800f29a:	2300      	moveq	r3, #0
 800f29c:	b2db      	uxtb	r3, r3
 800f29e:	e008      	b.n	800f2b2 <HAL_TIM_PWM_Start+0x9e>
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f2a6:	b2db      	uxtb	r3, r3
 800f2a8:	2b01      	cmp	r3, #1
 800f2aa:	bf14      	ite	ne
 800f2ac:	2301      	movne	r3, #1
 800f2ae:	2300      	moveq	r3, #0
 800f2b0:	b2db      	uxtb	r3, r3
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d001      	beq.n	800f2ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f2b6:	2301      	movs	r3, #1
 800f2b8:	e0ab      	b.n	800f412 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d104      	bne.n	800f2ca <HAL_TIM_PWM_Start+0xb6>
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2202      	movs	r2, #2
 800f2c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f2c8:	e023      	b.n	800f312 <HAL_TIM_PWM_Start+0xfe>
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	2b04      	cmp	r3, #4
 800f2ce:	d104      	bne.n	800f2da <HAL_TIM_PWM_Start+0xc6>
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2202      	movs	r2, #2
 800f2d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f2d8:	e01b      	b.n	800f312 <HAL_TIM_PWM_Start+0xfe>
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	2b08      	cmp	r3, #8
 800f2de:	d104      	bne.n	800f2ea <HAL_TIM_PWM_Start+0xd6>
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	2202      	movs	r2, #2
 800f2e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f2e8:	e013      	b.n	800f312 <HAL_TIM_PWM_Start+0xfe>
 800f2ea:	683b      	ldr	r3, [r7, #0]
 800f2ec:	2b0c      	cmp	r3, #12
 800f2ee:	d104      	bne.n	800f2fa <HAL_TIM_PWM_Start+0xe6>
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	2202      	movs	r2, #2
 800f2f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f2f8:	e00b      	b.n	800f312 <HAL_TIM_PWM_Start+0xfe>
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	2b10      	cmp	r3, #16
 800f2fe:	d104      	bne.n	800f30a <HAL_TIM_PWM_Start+0xf6>
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2202      	movs	r2, #2
 800f304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f308:	e003      	b.n	800f312 <HAL_TIM_PWM_Start+0xfe>
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2202      	movs	r2, #2
 800f30e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	2201      	movs	r2, #1
 800f318:	6839      	ldr	r1, [r7, #0]
 800f31a:	4618      	mov	r0, r3
 800f31c:	f001 f992 	bl	8010644 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	4a3d      	ldr	r2, [pc, #244]	; (800f41c <HAL_TIM_PWM_Start+0x208>)
 800f326:	4293      	cmp	r3, r2
 800f328:	d013      	beq.n	800f352 <HAL_TIM_PWM_Start+0x13e>
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	4a3c      	ldr	r2, [pc, #240]	; (800f420 <HAL_TIM_PWM_Start+0x20c>)
 800f330:	4293      	cmp	r3, r2
 800f332:	d00e      	beq.n	800f352 <HAL_TIM_PWM_Start+0x13e>
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	4a3a      	ldr	r2, [pc, #232]	; (800f424 <HAL_TIM_PWM_Start+0x210>)
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d009      	beq.n	800f352 <HAL_TIM_PWM_Start+0x13e>
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	4a39      	ldr	r2, [pc, #228]	; (800f428 <HAL_TIM_PWM_Start+0x214>)
 800f344:	4293      	cmp	r3, r2
 800f346:	d004      	beq.n	800f352 <HAL_TIM_PWM_Start+0x13e>
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	4a37      	ldr	r2, [pc, #220]	; (800f42c <HAL_TIM_PWM_Start+0x218>)
 800f34e:	4293      	cmp	r3, r2
 800f350:	d101      	bne.n	800f356 <HAL_TIM_PWM_Start+0x142>
 800f352:	2301      	movs	r3, #1
 800f354:	e000      	b.n	800f358 <HAL_TIM_PWM_Start+0x144>
 800f356:	2300      	movs	r3, #0
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d007      	beq.n	800f36c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f36a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	4a2a      	ldr	r2, [pc, #168]	; (800f41c <HAL_TIM_PWM_Start+0x208>)
 800f372:	4293      	cmp	r3, r2
 800f374:	d02c      	beq.n	800f3d0 <HAL_TIM_PWM_Start+0x1bc>
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f37e:	d027      	beq.n	800f3d0 <HAL_TIM_PWM_Start+0x1bc>
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	4a2a      	ldr	r2, [pc, #168]	; (800f430 <HAL_TIM_PWM_Start+0x21c>)
 800f386:	4293      	cmp	r3, r2
 800f388:	d022      	beq.n	800f3d0 <HAL_TIM_PWM_Start+0x1bc>
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	4a29      	ldr	r2, [pc, #164]	; (800f434 <HAL_TIM_PWM_Start+0x220>)
 800f390:	4293      	cmp	r3, r2
 800f392:	d01d      	beq.n	800f3d0 <HAL_TIM_PWM_Start+0x1bc>
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	4a27      	ldr	r2, [pc, #156]	; (800f438 <HAL_TIM_PWM_Start+0x224>)
 800f39a:	4293      	cmp	r3, r2
 800f39c:	d018      	beq.n	800f3d0 <HAL_TIM_PWM_Start+0x1bc>
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	4a1f      	ldr	r2, [pc, #124]	; (800f420 <HAL_TIM_PWM_Start+0x20c>)
 800f3a4:	4293      	cmp	r3, r2
 800f3a6:	d013      	beq.n	800f3d0 <HAL_TIM_PWM_Start+0x1bc>
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	4a23      	ldr	r2, [pc, #140]	; (800f43c <HAL_TIM_PWM_Start+0x228>)
 800f3ae:	4293      	cmp	r3, r2
 800f3b0:	d00e      	beq.n	800f3d0 <HAL_TIM_PWM_Start+0x1bc>
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	4a1b      	ldr	r2, [pc, #108]	; (800f424 <HAL_TIM_PWM_Start+0x210>)
 800f3b8:	4293      	cmp	r3, r2
 800f3ba:	d009      	beq.n	800f3d0 <HAL_TIM_PWM_Start+0x1bc>
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	4a1f      	ldr	r2, [pc, #124]	; (800f440 <HAL_TIM_PWM_Start+0x22c>)
 800f3c2:	4293      	cmp	r3, r2
 800f3c4:	d004      	beq.n	800f3d0 <HAL_TIM_PWM_Start+0x1bc>
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	4a1e      	ldr	r2, [pc, #120]	; (800f444 <HAL_TIM_PWM_Start+0x230>)
 800f3cc:	4293      	cmp	r3, r2
 800f3ce:	d115      	bne.n	800f3fc <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	689a      	ldr	r2, [r3, #8]
 800f3d6:	4b1c      	ldr	r3, [pc, #112]	; (800f448 <HAL_TIM_PWM_Start+0x234>)
 800f3d8:	4013      	ands	r3, r2
 800f3da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	2b06      	cmp	r3, #6
 800f3e0:	d015      	beq.n	800f40e <HAL_TIM_PWM_Start+0x1fa>
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f3e8:	d011      	beq.n	800f40e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	681a      	ldr	r2, [r3, #0]
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	f042 0201 	orr.w	r2, r2, #1
 800f3f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3fa:	e008      	b.n	800f40e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	681a      	ldr	r2, [r3, #0]
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	f042 0201 	orr.w	r2, r2, #1
 800f40a:	601a      	str	r2, [r3, #0]
 800f40c:	e000      	b.n	800f410 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f40e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f410:	2300      	movs	r3, #0
}
 800f412:	4618      	mov	r0, r3
 800f414:	3710      	adds	r7, #16
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}
 800f41a:	bf00      	nop
 800f41c:	40010000 	.word	0x40010000
 800f420:	40010400 	.word	0x40010400
 800f424:	40014000 	.word	0x40014000
 800f428:	40014400 	.word	0x40014400
 800f42c:	40014800 	.word	0x40014800
 800f430:	40000400 	.word	0x40000400
 800f434:	40000800 	.word	0x40000800
 800f438:	40000c00 	.word	0x40000c00
 800f43c:	40001800 	.word	0x40001800
 800f440:	4000e000 	.word	0x4000e000
 800f444:	4000e400 	.word	0x4000e400
 800f448:	00010007 	.word	0x00010007

0800f44c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b086      	sub	sp, #24
 800f450:	af00      	add	r7, sp, #0
 800f452:	60f8      	str	r0, [r7, #12]
 800f454:	60b9      	str	r1, [r7, #8]
 800f456:	607a      	str	r2, [r7, #4]
 800f458:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800f45a:	2300      	movs	r3, #0
 800f45c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d109      	bne.n	800f478 <HAL_TIM_PWM_Start_DMA+0x2c>
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f46a:	b2db      	uxtb	r3, r3
 800f46c:	2b02      	cmp	r3, #2
 800f46e:	bf0c      	ite	eq
 800f470:	2301      	moveq	r3, #1
 800f472:	2300      	movne	r3, #0
 800f474:	b2db      	uxtb	r3, r3
 800f476:	e03c      	b.n	800f4f2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	2b04      	cmp	r3, #4
 800f47c:	d109      	bne.n	800f492 <HAL_TIM_PWM_Start_DMA+0x46>
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f484:	b2db      	uxtb	r3, r3
 800f486:	2b02      	cmp	r3, #2
 800f488:	bf0c      	ite	eq
 800f48a:	2301      	moveq	r3, #1
 800f48c:	2300      	movne	r3, #0
 800f48e:	b2db      	uxtb	r3, r3
 800f490:	e02f      	b.n	800f4f2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	2b08      	cmp	r3, #8
 800f496:	d109      	bne.n	800f4ac <HAL_TIM_PWM_Start_DMA+0x60>
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f49e:	b2db      	uxtb	r3, r3
 800f4a0:	2b02      	cmp	r3, #2
 800f4a2:	bf0c      	ite	eq
 800f4a4:	2301      	moveq	r3, #1
 800f4a6:	2300      	movne	r3, #0
 800f4a8:	b2db      	uxtb	r3, r3
 800f4aa:	e022      	b.n	800f4f2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	2b0c      	cmp	r3, #12
 800f4b0:	d109      	bne.n	800f4c6 <HAL_TIM_PWM_Start_DMA+0x7a>
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f4b8:	b2db      	uxtb	r3, r3
 800f4ba:	2b02      	cmp	r3, #2
 800f4bc:	bf0c      	ite	eq
 800f4be:	2301      	moveq	r3, #1
 800f4c0:	2300      	movne	r3, #0
 800f4c2:	b2db      	uxtb	r3, r3
 800f4c4:	e015      	b.n	800f4f2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f4c6:	68bb      	ldr	r3, [r7, #8]
 800f4c8:	2b10      	cmp	r3, #16
 800f4ca:	d109      	bne.n	800f4e0 <HAL_TIM_PWM_Start_DMA+0x94>
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f4d2:	b2db      	uxtb	r3, r3
 800f4d4:	2b02      	cmp	r3, #2
 800f4d6:	bf0c      	ite	eq
 800f4d8:	2301      	moveq	r3, #1
 800f4da:	2300      	movne	r3, #0
 800f4dc:	b2db      	uxtb	r3, r3
 800f4de:	e008      	b.n	800f4f2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f4e6:	b2db      	uxtb	r3, r3
 800f4e8:	2b02      	cmp	r3, #2
 800f4ea:	bf0c      	ite	eq
 800f4ec:	2301      	moveq	r3, #1
 800f4ee:	2300      	movne	r3, #0
 800f4f0:	b2db      	uxtb	r3, r3
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d001      	beq.n	800f4fa <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800f4f6:	2302      	movs	r3, #2
 800f4f8:	e1ba      	b.n	800f870 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800f4fa:	68bb      	ldr	r3, [r7, #8]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d109      	bne.n	800f514 <HAL_TIM_PWM_Start_DMA+0xc8>
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f506:	b2db      	uxtb	r3, r3
 800f508:	2b01      	cmp	r3, #1
 800f50a:	bf0c      	ite	eq
 800f50c:	2301      	moveq	r3, #1
 800f50e:	2300      	movne	r3, #0
 800f510:	b2db      	uxtb	r3, r3
 800f512:	e03c      	b.n	800f58e <HAL_TIM_PWM_Start_DMA+0x142>
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	2b04      	cmp	r3, #4
 800f518:	d109      	bne.n	800f52e <HAL_TIM_PWM_Start_DMA+0xe2>
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f520:	b2db      	uxtb	r3, r3
 800f522:	2b01      	cmp	r3, #1
 800f524:	bf0c      	ite	eq
 800f526:	2301      	moveq	r3, #1
 800f528:	2300      	movne	r3, #0
 800f52a:	b2db      	uxtb	r3, r3
 800f52c:	e02f      	b.n	800f58e <HAL_TIM_PWM_Start_DMA+0x142>
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	2b08      	cmp	r3, #8
 800f532:	d109      	bne.n	800f548 <HAL_TIM_PWM_Start_DMA+0xfc>
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f53a:	b2db      	uxtb	r3, r3
 800f53c:	2b01      	cmp	r3, #1
 800f53e:	bf0c      	ite	eq
 800f540:	2301      	moveq	r3, #1
 800f542:	2300      	movne	r3, #0
 800f544:	b2db      	uxtb	r3, r3
 800f546:	e022      	b.n	800f58e <HAL_TIM_PWM_Start_DMA+0x142>
 800f548:	68bb      	ldr	r3, [r7, #8]
 800f54a:	2b0c      	cmp	r3, #12
 800f54c:	d109      	bne.n	800f562 <HAL_TIM_PWM_Start_DMA+0x116>
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f554:	b2db      	uxtb	r3, r3
 800f556:	2b01      	cmp	r3, #1
 800f558:	bf0c      	ite	eq
 800f55a:	2301      	moveq	r3, #1
 800f55c:	2300      	movne	r3, #0
 800f55e:	b2db      	uxtb	r3, r3
 800f560:	e015      	b.n	800f58e <HAL_TIM_PWM_Start_DMA+0x142>
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	2b10      	cmp	r3, #16
 800f566:	d109      	bne.n	800f57c <HAL_TIM_PWM_Start_DMA+0x130>
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f56e:	b2db      	uxtb	r3, r3
 800f570:	2b01      	cmp	r3, #1
 800f572:	bf0c      	ite	eq
 800f574:	2301      	moveq	r3, #1
 800f576:	2300      	movne	r3, #0
 800f578:	b2db      	uxtb	r3, r3
 800f57a:	e008      	b.n	800f58e <HAL_TIM_PWM_Start_DMA+0x142>
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f582:	b2db      	uxtb	r3, r3
 800f584:	2b01      	cmp	r3, #1
 800f586:	bf0c      	ite	eq
 800f588:	2301      	moveq	r3, #1
 800f58a:	2300      	movne	r3, #0
 800f58c:	b2db      	uxtb	r3, r3
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d034      	beq.n	800f5fc <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d002      	beq.n	800f59e <HAL_TIM_PWM_Start_DMA+0x152>
 800f598:	887b      	ldrh	r3, [r7, #2]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d101      	bne.n	800f5a2 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800f59e:	2301      	movs	r3, #1
 800f5a0:	e166      	b.n	800f870 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d104      	bne.n	800f5b2 <HAL_TIM_PWM_Start_DMA+0x166>
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	2202      	movs	r2, #2
 800f5ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f5b0:	e026      	b.n	800f600 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	2b04      	cmp	r3, #4
 800f5b6:	d104      	bne.n	800f5c2 <HAL_TIM_PWM_Start_DMA+0x176>
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	2202      	movs	r2, #2
 800f5bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f5c0:	e01e      	b.n	800f600 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	2b08      	cmp	r3, #8
 800f5c6:	d104      	bne.n	800f5d2 <HAL_TIM_PWM_Start_DMA+0x186>
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	2202      	movs	r2, #2
 800f5cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f5d0:	e016      	b.n	800f600 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f5d2:	68bb      	ldr	r3, [r7, #8]
 800f5d4:	2b0c      	cmp	r3, #12
 800f5d6:	d104      	bne.n	800f5e2 <HAL_TIM_PWM_Start_DMA+0x196>
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	2202      	movs	r2, #2
 800f5dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f5e0:	e00e      	b.n	800f600 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	2b10      	cmp	r3, #16
 800f5e6:	d104      	bne.n	800f5f2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	2202      	movs	r2, #2
 800f5ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f5f0:	e006      	b.n	800f600 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	2202      	movs	r2, #2
 800f5f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f5fa:	e001      	b.n	800f600 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800f5fc:	2301      	movs	r3, #1
 800f5fe:	e137      	b.n	800f870 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	2b0c      	cmp	r3, #12
 800f604:	f200 80ae 	bhi.w	800f764 <HAL_TIM_PWM_Start_DMA+0x318>
 800f608:	a201      	add	r2, pc, #4	; (adr r2, 800f610 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800f60a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f60e:	bf00      	nop
 800f610:	0800f645 	.word	0x0800f645
 800f614:	0800f765 	.word	0x0800f765
 800f618:	0800f765 	.word	0x0800f765
 800f61c:	0800f765 	.word	0x0800f765
 800f620:	0800f68d 	.word	0x0800f68d
 800f624:	0800f765 	.word	0x0800f765
 800f628:	0800f765 	.word	0x0800f765
 800f62c:	0800f765 	.word	0x0800f765
 800f630:	0800f6d5 	.word	0x0800f6d5
 800f634:	0800f765 	.word	0x0800f765
 800f638:	0800f765 	.word	0x0800f765
 800f63c:	0800f765 	.word	0x0800f765
 800f640:	0800f71d 	.word	0x0800f71d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f648:	4a8b      	ldr	r2, [pc, #556]	; (800f878 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f64a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f650:	4a8a      	ldr	r2, [pc, #552]	; (800f87c <HAL_TIM_PWM_Start_DMA+0x430>)
 800f652:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f658:	4a89      	ldr	r2, [pc, #548]	; (800f880 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f65a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f660:	6879      	ldr	r1, [r7, #4]
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	3334      	adds	r3, #52	; 0x34
 800f668:	461a      	mov	r2, r3
 800f66a:	887b      	ldrh	r3, [r7, #2]
 800f66c:	f7f6 f8e4 	bl	8005838 <HAL_DMA_Start_IT>
 800f670:	4603      	mov	r3, r0
 800f672:	2b00      	cmp	r3, #0
 800f674:	d001      	beq.n	800f67a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f676:	2301      	movs	r3, #1
 800f678:	e0fa      	b.n	800f870 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	68da      	ldr	r2, [r3, #12]
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f688:	60da      	str	r2, [r3, #12]
      break;
 800f68a:	e06e      	b.n	800f76a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f690:	4a79      	ldr	r2, [pc, #484]	; (800f878 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f692:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f698:	4a78      	ldr	r2, [pc, #480]	; (800f87c <HAL_TIM_PWM_Start_DMA+0x430>)
 800f69a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6a0:	4a77      	ldr	r2, [pc, #476]	; (800f880 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f6a2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800f6a8:	6879      	ldr	r1, [r7, #4]
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	3338      	adds	r3, #56	; 0x38
 800f6b0:	461a      	mov	r2, r3
 800f6b2:	887b      	ldrh	r3, [r7, #2]
 800f6b4:	f7f6 f8c0 	bl	8005838 <HAL_DMA_Start_IT>
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d001      	beq.n	800f6c2 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f6be:	2301      	movs	r3, #1
 800f6c0:	e0d6      	b.n	800f870 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	68da      	ldr	r2, [r3, #12]
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f6d0:	60da      	str	r2, [r3, #12]
      break;
 800f6d2:	e04a      	b.n	800f76a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6d8:	4a67      	ldr	r2, [pc, #412]	; (800f878 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f6da:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6e0:	4a66      	ldr	r2, [pc, #408]	; (800f87c <HAL_TIM_PWM_Start_DMA+0x430>)
 800f6e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6e8:	4a65      	ldr	r2, [pc, #404]	; (800f880 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f6ea:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f6f0:	6879      	ldr	r1, [r7, #4]
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	333c      	adds	r3, #60	; 0x3c
 800f6f8:	461a      	mov	r2, r3
 800f6fa:	887b      	ldrh	r3, [r7, #2]
 800f6fc:	f7f6 f89c 	bl	8005838 <HAL_DMA_Start_IT>
 800f700:	4603      	mov	r3, r0
 800f702:	2b00      	cmp	r3, #0
 800f704:	d001      	beq.n	800f70a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f706:	2301      	movs	r3, #1
 800f708:	e0b2      	b.n	800f870 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	68da      	ldr	r2, [r3, #12]
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f718:	60da      	str	r2, [r3, #12]
      break;
 800f71a:	e026      	b.n	800f76a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f720:	4a55      	ldr	r2, [pc, #340]	; (800f878 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f722:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f728:	4a54      	ldr	r2, [pc, #336]	; (800f87c <HAL_TIM_PWM_Start_DMA+0x430>)
 800f72a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f730:	4a53      	ldr	r2, [pc, #332]	; (800f880 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f732:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f738:	6879      	ldr	r1, [r7, #4]
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	3340      	adds	r3, #64	; 0x40
 800f740:	461a      	mov	r2, r3
 800f742:	887b      	ldrh	r3, [r7, #2]
 800f744:	f7f6 f878 	bl	8005838 <HAL_DMA_Start_IT>
 800f748:	4603      	mov	r3, r0
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d001      	beq.n	800f752 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f74e:	2301      	movs	r3, #1
 800f750:	e08e      	b.n	800f870 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	68da      	ldr	r2, [r3, #12]
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f760:	60da      	str	r2, [r3, #12]
      break;
 800f762:	e002      	b.n	800f76a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800f764:	2301      	movs	r3, #1
 800f766:	75fb      	strb	r3, [r7, #23]
      break;
 800f768:	bf00      	nop
  }

  if (status == HAL_OK)
 800f76a:	7dfb      	ldrb	r3, [r7, #23]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d17e      	bne.n	800f86e <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	2201      	movs	r2, #1
 800f776:	68b9      	ldr	r1, [r7, #8]
 800f778:	4618      	mov	r0, r3
 800f77a:	f000 ff63 	bl	8010644 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	4a40      	ldr	r2, [pc, #256]	; (800f884 <HAL_TIM_PWM_Start_DMA+0x438>)
 800f784:	4293      	cmp	r3, r2
 800f786:	d013      	beq.n	800f7b0 <HAL_TIM_PWM_Start_DMA+0x364>
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	4a3e      	ldr	r2, [pc, #248]	; (800f888 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800f78e:	4293      	cmp	r3, r2
 800f790:	d00e      	beq.n	800f7b0 <HAL_TIM_PWM_Start_DMA+0x364>
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	4a3d      	ldr	r2, [pc, #244]	; (800f88c <HAL_TIM_PWM_Start_DMA+0x440>)
 800f798:	4293      	cmp	r3, r2
 800f79a:	d009      	beq.n	800f7b0 <HAL_TIM_PWM_Start_DMA+0x364>
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	4a3b      	ldr	r2, [pc, #236]	; (800f890 <HAL_TIM_PWM_Start_DMA+0x444>)
 800f7a2:	4293      	cmp	r3, r2
 800f7a4:	d004      	beq.n	800f7b0 <HAL_TIM_PWM_Start_DMA+0x364>
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	4a3a      	ldr	r2, [pc, #232]	; (800f894 <HAL_TIM_PWM_Start_DMA+0x448>)
 800f7ac:	4293      	cmp	r3, r2
 800f7ae:	d101      	bne.n	800f7b4 <HAL_TIM_PWM_Start_DMA+0x368>
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	e000      	b.n	800f7b6 <HAL_TIM_PWM_Start_DMA+0x36a>
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d007      	beq.n	800f7ca <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f7c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	4a2d      	ldr	r2, [pc, #180]	; (800f884 <HAL_TIM_PWM_Start_DMA+0x438>)
 800f7d0:	4293      	cmp	r3, r2
 800f7d2:	d02c      	beq.n	800f82e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7dc:	d027      	beq.n	800f82e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	4a2d      	ldr	r2, [pc, #180]	; (800f898 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800f7e4:	4293      	cmp	r3, r2
 800f7e6:	d022      	beq.n	800f82e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	4a2b      	ldr	r2, [pc, #172]	; (800f89c <HAL_TIM_PWM_Start_DMA+0x450>)
 800f7ee:	4293      	cmp	r3, r2
 800f7f0:	d01d      	beq.n	800f82e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	4a2a      	ldr	r2, [pc, #168]	; (800f8a0 <HAL_TIM_PWM_Start_DMA+0x454>)
 800f7f8:	4293      	cmp	r3, r2
 800f7fa:	d018      	beq.n	800f82e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	4a21      	ldr	r2, [pc, #132]	; (800f888 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800f802:	4293      	cmp	r3, r2
 800f804:	d013      	beq.n	800f82e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	4a26      	ldr	r2, [pc, #152]	; (800f8a4 <HAL_TIM_PWM_Start_DMA+0x458>)
 800f80c:	4293      	cmp	r3, r2
 800f80e:	d00e      	beq.n	800f82e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	4a1d      	ldr	r2, [pc, #116]	; (800f88c <HAL_TIM_PWM_Start_DMA+0x440>)
 800f816:	4293      	cmp	r3, r2
 800f818:	d009      	beq.n	800f82e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	4a22      	ldr	r2, [pc, #136]	; (800f8a8 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800f820:	4293      	cmp	r3, r2
 800f822:	d004      	beq.n	800f82e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	4a20      	ldr	r2, [pc, #128]	; (800f8ac <HAL_TIM_PWM_Start_DMA+0x460>)
 800f82a:	4293      	cmp	r3, r2
 800f82c:	d115      	bne.n	800f85a <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	689a      	ldr	r2, [r3, #8]
 800f834:	4b1e      	ldr	r3, [pc, #120]	; (800f8b0 <HAL_TIM_PWM_Start_DMA+0x464>)
 800f836:	4013      	ands	r3, r2
 800f838:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f83a:	693b      	ldr	r3, [r7, #16]
 800f83c:	2b06      	cmp	r3, #6
 800f83e:	d015      	beq.n	800f86c <HAL_TIM_PWM_Start_DMA+0x420>
 800f840:	693b      	ldr	r3, [r7, #16]
 800f842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f846:	d011      	beq.n	800f86c <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	681a      	ldr	r2, [r3, #0]
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	f042 0201 	orr.w	r2, r2, #1
 800f856:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f858:	e008      	b.n	800f86c <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	681a      	ldr	r2, [r3, #0]
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	f042 0201 	orr.w	r2, r2, #1
 800f868:	601a      	str	r2, [r3, #0]
 800f86a:	e000      	b.n	800f86e <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f86c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800f86e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f870:	4618      	mov	r0, r3
 800f872:	3718      	adds	r7, #24
 800f874:	46bd      	mov	sp, r7
 800f876:	bd80      	pop	{r7, pc}
 800f878:	0800fe3b 	.word	0x0800fe3b
 800f87c:	0800fee3 	.word	0x0800fee3
 800f880:	0800fda9 	.word	0x0800fda9
 800f884:	40010000 	.word	0x40010000
 800f888:	40010400 	.word	0x40010400
 800f88c:	40014000 	.word	0x40014000
 800f890:	40014400 	.word	0x40014400
 800f894:	40014800 	.word	0x40014800
 800f898:	40000400 	.word	0x40000400
 800f89c:	40000800 	.word	0x40000800
 800f8a0:	40000c00 	.word	0x40000c00
 800f8a4:	40001800 	.word	0x40001800
 800f8a8:	4000e000 	.word	0x4000e000
 800f8ac:	4000e400 	.word	0x4000e400
 800f8b0:	00010007 	.word	0x00010007

0800f8b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b082      	sub	sp, #8
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	691b      	ldr	r3, [r3, #16]
 800f8c2:	f003 0302 	and.w	r3, r3, #2
 800f8c6:	2b02      	cmp	r3, #2
 800f8c8:	d122      	bne.n	800f910 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	68db      	ldr	r3, [r3, #12]
 800f8d0:	f003 0302 	and.w	r3, r3, #2
 800f8d4:	2b02      	cmp	r3, #2
 800f8d6:	d11b      	bne.n	800f910 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	f06f 0202 	mvn.w	r2, #2
 800f8e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2201      	movs	r2, #1
 800f8e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	699b      	ldr	r3, [r3, #24]
 800f8ee:	f003 0303 	and.w	r3, r3, #3
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d003      	beq.n	800f8fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f8f6:	6878      	ldr	r0, [r7, #4]
 800f8f8:	f000 fa24 	bl	800fd44 <HAL_TIM_IC_CaptureCallback>
 800f8fc:	e005      	b.n	800f90a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f8fe:	6878      	ldr	r0, [r7, #4]
 800f900:	f000 fa16 	bl	800fd30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f904:	6878      	ldr	r0, [r7, #4]
 800f906:	f000 fa27 	bl	800fd58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	2200      	movs	r2, #0
 800f90e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	691b      	ldr	r3, [r3, #16]
 800f916:	f003 0304 	and.w	r3, r3, #4
 800f91a:	2b04      	cmp	r3, #4
 800f91c:	d122      	bne.n	800f964 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	68db      	ldr	r3, [r3, #12]
 800f924:	f003 0304 	and.w	r3, r3, #4
 800f928:	2b04      	cmp	r3, #4
 800f92a:	d11b      	bne.n	800f964 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	f06f 0204 	mvn.w	r2, #4
 800f934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2202      	movs	r2, #2
 800f93a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	699b      	ldr	r3, [r3, #24]
 800f942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f946:	2b00      	cmp	r3, #0
 800f948:	d003      	beq.n	800f952 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	f000 f9fa 	bl	800fd44 <HAL_TIM_IC_CaptureCallback>
 800f950:	e005      	b.n	800f95e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f952:	6878      	ldr	r0, [r7, #4]
 800f954:	f000 f9ec 	bl	800fd30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f958:	6878      	ldr	r0, [r7, #4]
 800f95a:	f000 f9fd 	bl	800fd58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2200      	movs	r2, #0
 800f962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	691b      	ldr	r3, [r3, #16]
 800f96a:	f003 0308 	and.w	r3, r3, #8
 800f96e:	2b08      	cmp	r3, #8
 800f970:	d122      	bne.n	800f9b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	68db      	ldr	r3, [r3, #12]
 800f978:	f003 0308 	and.w	r3, r3, #8
 800f97c:	2b08      	cmp	r3, #8
 800f97e:	d11b      	bne.n	800f9b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	f06f 0208 	mvn.w	r2, #8
 800f988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	2204      	movs	r2, #4
 800f98e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	69db      	ldr	r3, [r3, #28]
 800f996:	f003 0303 	and.w	r3, r3, #3
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d003      	beq.n	800f9a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f99e:	6878      	ldr	r0, [r7, #4]
 800f9a0:	f000 f9d0 	bl	800fd44 <HAL_TIM_IC_CaptureCallback>
 800f9a4:	e005      	b.n	800f9b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f9a6:	6878      	ldr	r0, [r7, #4]
 800f9a8:	f000 f9c2 	bl	800fd30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f9ac:	6878      	ldr	r0, [r7, #4]
 800f9ae:	f000 f9d3 	bl	800fd58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	691b      	ldr	r3, [r3, #16]
 800f9be:	f003 0310 	and.w	r3, r3, #16
 800f9c2:	2b10      	cmp	r3, #16
 800f9c4:	d122      	bne.n	800fa0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	68db      	ldr	r3, [r3, #12]
 800f9cc:	f003 0310 	and.w	r3, r3, #16
 800f9d0:	2b10      	cmp	r3, #16
 800f9d2:	d11b      	bne.n	800fa0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	f06f 0210 	mvn.w	r2, #16
 800f9dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	2208      	movs	r2, #8
 800f9e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	69db      	ldr	r3, [r3, #28]
 800f9ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d003      	beq.n	800f9fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f000 f9a6 	bl	800fd44 <HAL_TIM_IC_CaptureCallback>
 800f9f8:	e005      	b.n	800fa06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f000 f998 	bl	800fd30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fa00:	6878      	ldr	r0, [r7, #4]
 800fa02:	f000 f9a9 	bl	800fd58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	2200      	movs	r2, #0
 800fa0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	691b      	ldr	r3, [r3, #16]
 800fa12:	f003 0301 	and.w	r3, r3, #1
 800fa16:	2b01      	cmp	r3, #1
 800fa18:	d10e      	bne.n	800fa38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	68db      	ldr	r3, [r3, #12]
 800fa20:	f003 0301 	and.w	r3, r3, #1
 800fa24:	2b01      	cmp	r3, #1
 800fa26:	d107      	bne.n	800fa38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	f06f 0201 	mvn.w	r2, #1
 800fa30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fa32:	6878      	ldr	r0, [r7, #4]
 800fa34:	f000 f972 	bl	800fd1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	691b      	ldr	r3, [r3, #16]
 800fa3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa42:	2b80      	cmp	r3, #128	; 0x80
 800fa44:	d10e      	bne.n	800fa64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	68db      	ldr	r3, [r3, #12]
 800fa4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa50:	2b80      	cmp	r3, #128	; 0x80
 800fa52:	d107      	bne.n	800fa64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fa5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	f000 febc 	bl	80107dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	691b      	ldr	r3, [r3, #16]
 800fa6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa72:	d10e      	bne.n	800fa92 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	68db      	ldr	r3, [r3, #12]
 800fa7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa7e:	2b80      	cmp	r3, #128	; 0x80
 800fa80:	d107      	bne.n	800fa92 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800fa8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	f000 feaf 	bl	80107f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	691b      	ldr	r3, [r3, #16]
 800fa98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa9c:	2b40      	cmp	r3, #64	; 0x40
 800fa9e:	d10e      	bne.n	800fabe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	68db      	ldr	r3, [r3, #12]
 800faa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800faaa:	2b40      	cmp	r3, #64	; 0x40
 800faac:	d107      	bne.n	800fabe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fab8:	6878      	ldr	r0, [r7, #4]
 800faba:	f000 f961 	bl	800fd80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	691b      	ldr	r3, [r3, #16]
 800fac4:	f003 0320 	and.w	r3, r3, #32
 800fac8:	2b20      	cmp	r3, #32
 800faca:	d10e      	bne.n	800faea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	68db      	ldr	r3, [r3, #12]
 800fad2:	f003 0320 	and.w	r3, r3, #32
 800fad6:	2b20      	cmp	r3, #32
 800fad8:	d107      	bne.n	800faea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	f06f 0220 	mvn.w	r2, #32
 800fae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fae4:	6878      	ldr	r0, [r7, #4]
 800fae6:	f000 fe6f 	bl	80107c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800faea:	bf00      	nop
 800faec:	3708      	adds	r7, #8
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}
	...

0800faf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b086      	sub	sp, #24
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	60f8      	str	r0, [r7, #12]
 800fafc:	60b9      	str	r1, [r7, #8]
 800fafe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fb00:	2300      	movs	r3, #0
 800fb02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fb0a:	2b01      	cmp	r3, #1
 800fb0c:	d101      	bne.n	800fb12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fb0e:	2302      	movs	r3, #2
 800fb10:	e0ff      	b.n	800fd12 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	2201      	movs	r2, #1
 800fb16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2b14      	cmp	r3, #20
 800fb1e:	f200 80f0 	bhi.w	800fd02 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fb22:	a201      	add	r2, pc, #4	; (adr r2, 800fb28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fb24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb28:	0800fb7d 	.word	0x0800fb7d
 800fb2c:	0800fd03 	.word	0x0800fd03
 800fb30:	0800fd03 	.word	0x0800fd03
 800fb34:	0800fd03 	.word	0x0800fd03
 800fb38:	0800fbbd 	.word	0x0800fbbd
 800fb3c:	0800fd03 	.word	0x0800fd03
 800fb40:	0800fd03 	.word	0x0800fd03
 800fb44:	0800fd03 	.word	0x0800fd03
 800fb48:	0800fbff 	.word	0x0800fbff
 800fb4c:	0800fd03 	.word	0x0800fd03
 800fb50:	0800fd03 	.word	0x0800fd03
 800fb54:	0800fd03 	.word	0x0800fd03
 800fb58:	0800fc3f 	.word	0x0800fc3f
 800fb5c:	0800fd03 	.word	0x0800fd03
 800fb60:	0800fd03 	.word	0x0800fd03
 800fb64:	0800fd03 	.word	0x0800fd03
 800fb68:	0800fc81 	.word	0x0800fc81
 800fb6c:	0800fd03 	.word	0x0800fd03
 800fb70:	0800fd03 	.word	0x0800fd03
 800fb74:	0800fd03 	.word	0x0800fd03
 800fb78:	0800fcc1 	.word	0x0800fcc1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	68b9      	ldr	r1, [r7, #8]
 800fb82:	4618      	mov	r0, r3
 800fb84:	f000 fa88 	bl	8010098 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	699a      	ldr	r2, [r3, #24]
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	f042 0208 	orr.w	r2, r2, #8
 800fb96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	699a      	ldr	r2, [r3, #24]
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	f022 0204 	bic.w	r2, r2, #4
 800fba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	6999      	ldr	r1, [r3, #24]
 800fbae:	68bb      	ldr	r3, [r7, #8]
 800fbb0:	691a      	ldr	r2, [r3, #16]
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	430a      	orrs	r2, r1
 800fbb8:	619a      	str	r2, [r3, #24]
      break;
 800fbba:	e0a5      	b.n	800fd08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	68b9      	ldr	r1, [r7, #8]
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f000 faf8 	bl	80101b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	699a      	ldr	r2, [r3, #24]
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fbd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	699a      	ldr	r2, [r3, #24]
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fbe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	6999      	ldr	r1, [r3, #24]
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	691b      	ldr	r3, [r3, #16]
 800fbf2:	021a      	lsls	r2, r3, #8
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	430a      	orrs	r2, r1
 800fbfa:	619a      	str	r2, [r3, #24]
      break;
 800fbfc:	e084      	b.n	800fd08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	68b9      	ldr	r1, [r7, #8]
 800fc04:	4618      	mov	r0, r3
 800fc06:	f000 fb61 	bl	80102cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	69da      	ldr	r2, [r3, #28]
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	f042 0208 	orr.w	r2, r2, #8
 800fc18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	69da      	ldr	r2, [r3, #28]
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	f022 0204 	bic.w	r2, r2, #4
 800fc28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	69d9      	ldr	r1, [r3, #28]
 800fc30:	68bb      	ldr	r3, [r7, #8]
 800fc32:	691a      	ldr	r2, [r3, #16]
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	430a      	orrs	r2, r1
 800fc3a:	61da      	str	r2, [r3, #28]
      break;
 800fc3c:	e064      	b.n	800fd08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	68b9      	ldr	r1, [r7, #8]
 800fc44:	4618      	mov	r0, r3
 800fc46:	f000 fbc9 	bl	80103dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	69da      	ldr	r2, [r3, #28]
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fc58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	69da      	ldr	r2, [r3, #28]
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fc68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	69d9      	ldr	r1, [r3, #28]
 800fc70:	68bb      	ldr	r3, [r7, #8]
 800fc72:	691b      	ldr	r3, [r3, #16]
 800fc74:	021a      	lsls	r2, r3, #8
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	430a      	orrs	r2, r1
 800fc7c:	61da      	str	r2, [r3, #28]
      break;
 800fc7e:	e043      	b.n	800fd08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	68b9      	ldr	r1, [r7, #8]
 800fc86:	4618      	mov	r0, r3
 800fc88:	f000 fc12 	bl	80104b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	f042 0208 	orr.w	r2, r2, #8
 800fc9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	f022 0204 	bic.w	r2, r2, #4
 800fcaa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fcb2:	68bb      	ldr	r3, [r7, #8]
 800fcb4:	691a      	ldr	r2, [r3, #16]
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	430a      	orrs	r2, r1
 800fcbc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fcbe:	e023      	b.n	800fd08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	68b9      	ldr	r1, [r7, #8]
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f000 fc56 	bl	8010578 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fcda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fcea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	691b      	ldr	r3, [r3, #16]
 800fcf6:	021a      	lsls	r2, r3, #8
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	430a      	orrs	r2, r1
 800fcfe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fd00:	e002      	b.n	800fd08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800fd02:	2301      	movs	r3, #1
 800fd04:	75fb      	strb	r3, [r7, #23]
      break;
 800fd06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800fd10:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd12:	4618      	mov	r0, r3
 800fd14:	3718      	adds	r7, #24
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bd80      	pop	{r7, pc}
 800fd1a:	bf00      	nop

0800fd1c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fd1c:	b480      	push	{r7}
 800fd1e:	b083      	sub	sp, #12
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800fd24:	bf00      	nop
 800fd26:	370c      	adds	r7, #12
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2e:	4770      	bx	lr

0800fd30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fd30:	b480      	push	{r7}
 800fd32:	b083      	sub	sp, #12
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fd38:	bf00      	nop
 800fd3a:	370c      	adds	r7, #12
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd42:	4770      	bx	lr

0800fd44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fd44:	b480      	push	{r7}
 800fd46:	b083      	sub	sp, #12
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fd4c:	bf00      	nop
 800fd4e:	370c      	adds	r7, #12
 800fd50:	46bd      	mov	sp, r7
 800fd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd56:	4770      	bx	lr

0800fd58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fd58:	b480      	push	{r7}
 800fd5a:	b083      	sub	sp, #12
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fd60:	bf00      	nop
 800fd62:	370c      	adds	r7, #12
 800fd64:	46bd      	mov	sp, r7
 800fd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6a:	4770      	bx	lr

0800fd6c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800fd6c:	b480      	push	{r7}
 800fd6e:	b083      	sub	sp, #12
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800fd74:	bf00      	nop
 800fd76:	370c      	adds	r7, #12
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7e:	4770      	bx	lr

0800fd80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fd80:	b480      	push	{r7}
 800fd82:	b083      	sub	sp, #12
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fd88:	bf00      	nop
 800fd8a:	370c      	adds	r7, #12
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd92:	4770      	bx	lr

0800fd94 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800fd94:	b480      	push	{r7}
 800fd96:	b083      	sub	sp, #12
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800fd9c:	bf00      	nop
 800fd9e:	370c      	adds	r7, #12
 800fda0:	46bd      	mov	sp, r7
 800fda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda6:	4770      	bx	lr

0800fda8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b084      	sub	sp, #16
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdb4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdba:	687a      	ldr	r2, [r7, #4]
 800fdbc:	429a      	cmp	r2, r3
 800fdbe:	d107      	bne.n	800fdd0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	2201      	movs	r2, #1
 800fdc4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	2201      	movs	r2, #1
 800fdca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fdce:	e02a      	b.n	800fe26 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdd4:	687a      	ldr	r2, [r7, #4]
 800fdd6:	429a      	cmp	r2, r3
 800fdd8:	d107      	bne.n	800fdea <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	2202      	movs	r2, #2
 800fdde:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	2201      	movs	r2, #1
 800fde4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fde8:	e01d      	b.n	800fe26 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdee:	687a      	ldr	r2, [r7, #4]
 800fdf0:	429a      	cmp	r2, r3
 800fdf2:	d107      	bne.n	800fe04 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	2204      	movs	r2, #4
 800fdf8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	2201      	movs	r2, #1
 800fdfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fe02:	e010      	b.n	800fe26 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe08:	687a      	ldr	r2, [r7, #4]
 800fe0a:	429a      	cmp	r2, r3
 800fe0c:	d107      	bne.n	800fe1e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	2208      	movs	r2, #8
 800fe12:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2201      	movs	r2, #1
 800fe18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fe1c:	e003      	b.n	800fe26 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	2201      	movs	r2, #1
 800fe22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800fe26:	68f8      	ldr	r0, [r7, #12]
 800fe28:	f7ff ffb4 	bl	800fd94 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	2200      	movs	r2, #0
 800fe30:	771a      	strb	r2, [r3, #28]
}
 800fe32:	bf00      	nop
 800fe34:	3710      	adds	r7, #16
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}

0800fe3a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800fe3a:	b580      	push	{r7, lr}
 800fe3c:	b084      	sub	sp, #16
 800fe3e:	af00      	add	r7, sp, #0
 800fe40:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe46:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe4c:	687a      	ldr	r2, [r7, #4]
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d10b      	bne.n	800fe6a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	2201      	movs	r2, #1
 800fe56:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	69db      	ldr	r3, [r3, #28]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d136      	bne.n	800fece <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	2201      	movs	r2, #1
 800fe64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fe68:	e031      	b.n	800fece <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe6e:	687a      	ldr	r2, [r7, #4]
 800fe70:	429a      	cmp	r2, r3
 800fe72:	d10b      	bne.n	800fe8c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	2202      	movs	r2, #2
 800fe78:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	69db      	ldr	r3, [r3, #28]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d125      	bne.n	800fece <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	2201      	movs	r2, #1
 800fe86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fe8a:	e020      	b.n	800fece <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe90:	687a      	ldr	r2, [r7, #4]
 800fe92:	429a      	cmp	r2, r3
 800fe94:	d10b      	bne.n	800feae <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	2204      	movs	r2, #4
 800fe9a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	69db      	ldr	r3, [r3, #28]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d114      	bne.n	800fece <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	2201      	movs	r2, #1
 800fea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800feac:	e00f      	b.n	800fece <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800feb2:	687a      	ldr	r2, [r7, #4]
 800feb4:	429a      	cmp	r2, r3
 800feb6:	d10a      	bne.n	800fece <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	2208      	movs	r2, #8
 800febc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	69db      	ldr	r3, [r3, #28]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d103      	bne.n	800fece <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	2201      	movs	r2, #1
 800feca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fece:	68f8      	ldr	r0, [r7, #12]
 800fed0:	f7ff ff42 	bl	800fd58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	2200      	movs	r2, #0
 800fed8:	771a      	strb	r2, [r3, #28]
}
 800feda:	bf00      	nop
 800fedc:	3710      	adds	r7, #16
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}

0800fee2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fee2:	b580      	push	{r7, lr}
 800fee4:	b084      	sub	sp, #16
 800fee6:	af00      	add	r7, sp, #0
 800fee8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800feee:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fef4:	687a      	ldr	r2, [r7, #4]
 800fef6:	429a      	cmp	r2, r3
 800fef8:	d103      	bne.n	800ff02 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	2201      	movs	r2, #1
 800fefe:	771a      	strb	r2, [r3, #28]
 800ff00:	e019      	b.n	800ff36 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff06:	687a      	ldr	r2, [r7, #4]
 800ff08:	429a      	cmp	r2, r3
 800ff0a:	d103      	bne.n	800ff14 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	2202      	movs	r2, #2
 800ff10:	771a      	strb	r2, [r3, #28]
 800ff12:	e010      	b.n	800ff36 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff18:	687a      	ldr	r2, [r7, #4]
 800ff1a:	429a      	cmp	r2, r3
 800ff1c:	d103      	bne.n	800ff26 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	2204      	movs	r2, #4
 800ff22:	771a      	strb	r2, [r3, #28]
 800ff24:	e007      	b.n	800ff36 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff2a:	687a      	ldr	r2, [r7, #4]
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	d102      	bne.n	800ff36 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	2208      	movs	r2, #8
 800ff34:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800ff36:	68f8      	ldr	r0, [r7, #12]
 800ff38:	f7ff ff18 	bl	800fd6c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	2200      	movs	r2, #0
 800ff40:	771a      	strb	r2, [r3, #28]
}
 800ff42:	bf00      	nop
 800ff44:	3710      	adds	r7, #16
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}
	...

0800ff4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	b085      	sub	sp, #20
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	4a44      	ldr	r2, [pc, #272]	; (8010070 <TIM_Base_SetConfig+0x124>)
 800ff60:	4293      	cmp	r3, r2
 800ff62:	d013      	beq.n	800ff8c <TIM_Base_SetConfig+0x40>
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff6a:	d00f      	beq.n	800ff8c <TIM_Base_SetConfig+0x40>
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	4a41      	ldr	r2, [pc, #260]	; (8010074 <TIM_Base_SetConfig+0x128>)
 800ff70:	4293      	cmp	r3, r2
 800ff72:	d00b      	beq.n	800ff8c <TIM_Base_SetConfig+0x40>
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	4a40      	ldr	r2, [pc, #256]	; (8010078 <TIM_Base_SetConfig+0x12c>)
 800ff78:	4293      	cmp	r3, r2
 800ff7a:	d007      	beq.n	800ff8c <TIM_Base_SetConfig+0x40>
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	4a3f      	ldr	r2, [pc, #252]	; (801007c <TIM_Base_SetConfig+0x130>)
 800ff80:	4293      	cmp	r3, r2
 800ff82:	d003      	beq.n	800ff8c <TIM_Base_SetConfig+0x40>
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	4a3e      	ldr	r2, [pc, #248]	; (8010080 <TIM_Base_SetConfig+0x134>)
 800ff88:	4293      	cmp	r3, r2
 800ff8a:	d108      	bne.n	800ff9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	685b      	ldr	r3, [r3, #4]
 800ff98:	68fa      	ldr	r2, [r7, #12]
 800ff9a:	4313      	orrs	r3, r2
 800ff9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	4a33      	ldr	r2, [pc, #204]	; (8010070 <TIM_Base_SetConfig+0x124>)
 800ffa2:	4293      	cmp	r3, r2
 800ffa4:	d027      	beq.n	800fff6 <TIM_Base_SetConfig+0xaa>
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ffac:	d023      	beq.n	800fff6 <TIM_Base_SetConfig+0xaa>
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	4a30      	ldr	r2, [pc, #192]	; (8010074 <TIM_Base_SetConfig+0x128>)
 800ffb2:	4293      	cmp	r3, r2
 800ffb4:	d01f      	beq.n	800fff6 <TIM_Base_SetConfig+0xaa>
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	4a2f      	ldr	r2, [pc, #188]	; (8010078 <TIM_Base_SetConfig+0x12c>)
 800ffba:	4293      	cmp	r3, r2
 800ffbc:	d01b      	beq.n	800fff6 <TIM_Base_SetConfig+0xaa>
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	4a2e      	ldr	r2, [pc, #184]	; (801007c <TIM_Base_SetConfig+0x130>)
 800ffc2:	4293      	cmp	r3, r2
 800ffc4:	d017      	beq.n	800fff6 <TIM_Base_SetConfig+0xaa>
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	4a2d      	ldr	r2, [pc, #180]	; (8010080 <TIM_Base_SetConfig+0x134>)
 800ffca:	4293      	cmp	r3, r2
 800ffcc:	d013      	beq.n	800fff6 <TIM_Base_SetConfig+0xaa>
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	4a2c      	ldr	r2, [pc, #176]	; (8010084 <TIM_Base_SetConfig+0x138>)
 800ffd2:	4293      	cmp	r3, r2
 800ffd4:	d00f      	beq.n	800fff6 <TIM_Base_SetConfig+0xaa>
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	4a2b      	ldr	r2, [pc, #172]	; (8010088 <TIM_Base_SetConfig+0x13c>)
 800ffda:	4293      	cmp	r3, r2
 800ffdc:	d00b      	beq.n	800fff6 <TIM_Base_SetConfig+0xaa>
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	4a2a      	ldr	r2, [pc, #168]	; (801008c <TIM_Base_SetConfig+0x140>)
 800ffe2:	4293      	cmp	r3, r2
 800ffe4:	d007      	beq.n	800fff6 <TIM_Base_SetConfig+0xaa>
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	4a29      	ldr	r2, [pc, #164]	; (8010090 <TIM_Base_SetConfig+0x144>)
 800ffea:	4293      	cmp	r3, r2
 800ffec:	d003      	beq.n	800fff6 <TIM_Base_SetConfig+0xaa>
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	4a28      	ldr	r2, [pc, #160]	; (8010094 <TIM_Base_SetConfig+0x148>)
 800fff2:	4293      	cmp	r3, r2
 800fff4:	d108      	bne.n	8010008 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	68db      	ldr	r3, [r3, #12]
 8010002:	68fa      	ldr	r2, [r7, #12]
 8010004:	4313      	orrs	r3, r2
 8010006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	695b      	ldr	r3, [r3, #20]
 8010012:	4313      	orrs	r3, r2
 8010014:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	68fa      	ldr	r2, [r7, #12]
 801001a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	689a      	ldr	r2, [r3, #8]
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	681a      	ldr	r2, [r3, #0]
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	4a10      	ldr	r2, [pc, #64]	; (8010070 <TIM_Base_SetConfig+0x124>)
 8010030:	4293      	cmp	r3, r2
 8010032:	d00f      	beq.n	8010054 <TIM_Base_SetConfig+0x108>
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	4a12      	ldr	r2, [pc, #72]	; (8010080 <TIM_Base_SetConfig+0x134>)
 8010038:	4293      	cmp	r3, r2
 801003a:	d00b      	beq.n	8010054 <TIM_Base_SetConfig+0x108>
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	4a11      	ldr	r2, [pc, #68]	; (8010084 <TIM_Base_SetConfig+0x138>)
 8010040:	4293      	cmp	r3, r2
 8010042:	d007      	beq.n	8010054 <TIM_Base_SetConfig+0x108>
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	4a10      	ldr	r2, [pc, #64]	; (8010088 <TIM_Base_SetConfig+0x13c>)
 8010048:	4293      	cmp	r3, r2
 801004a:	d003      	beq.n	8010054 <TIM_Base_SetConfig+0x108>
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	4a0f      	ldr	r2, [pc, #60]	; (801008c <TIM_Base_SetConfig+0x140>)
 8010050:	4293      	cmp	r3, r2
 8010052:	d103      	bne.n	801005c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010054:	683b      	ldr	r3, [r7, #0]
 8010056:	691a      	ldr	r2, [r3, #16]
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2201      	movs	r2, #1
 8010060:	615a      	str	r2, [r3, #20]
}
 8010062:	bf00      	nop
 8010064:	3714      	adds	r7, #20
 8010066:	46bd      	mov	sp, r7
 8010068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006c:	4770      	bx	lr
 801006e:	bf00      	nop
 8010070:	40010000 	.word	0x40010000
 8010074:	40000400 	.word	0x40000400
 8010078:	40000800 	.word	0x40000800
 801007c:	40000c00 	.word	0x40000c00
 8010080:	40010400 	.word	0x40010400
 8010084:	40014000 	.word	0x40014000
 8010088:	40014400 	.word	0x40014400
 801008c:	40014800 	.word	0x40014800
 8010090:	4000e000 	.word	0x4000e000
 8010094:	4000e400 	.word	0x4000e400

08010098 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010098:	b480      	push	{r7}
 801009a:	b087      	sub	sp, #28
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
 80100a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	6a1b      	ldr	r3, [r3, #32]
 80100a6:	f023 0201 	bic.w	r2, r3, #1
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	6a1b      	ldr	r3, [r3, #32]
 80100b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	685b      	ldr	r3, [r3, #4]
 80100b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	699b      	ldr	r3, [r3, #24]
 80100be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80100c0:	68fa      	ldr	r2, [r7, #12]
 80100c2:	4b37      	ldr	r3, [pc, #220]	; (80101a0 <TIM_OC1_SetConfig+0x108>)
 80100c4:	4013      	ands	r3, r2
 80100c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	f023 0303 	bic.w	r3, r3, #3
 80100ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	68fa      	ldr	r2, [r7, #12]
 80100d6:	4313      	orrs	r3, r2
 80100d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	f023 0302 	bic.w	r3, r3, #2
 80100e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	689b      	ldr	r3, [r3, #8]
 80100e6:	697a      	ldr	r2, [r7, #20]
 80100e8:	4313      	orrs	r3, r2
 80100ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	4a2d      	ldr	r2, [pc, #180]	; (80101a4 <TIM_OC1_SetConfig+0x10c>)
 80100f0:	4293      	cmp	r3, r2
 80100f2:	d00f      	beq.n	8010114 <TIM_OC1_SetConfig+0x7c>
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	4a2c      	ldr	r2, [pc, #176]	; (80101a8 <TIM_OC1_SetConfig+0x110>)
 80100f8:	4293      	cmp	r3, r2
 80100fa:	d00b      	beq.n	8010114 <TIM_OC1_SetConfig+0x7c>
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	4a2b      	ldr	r2, [pc, #172]	; (80101ac <TIM_OC1_SetConfig+0x114>)
 8010100:	4293      	cmp	r3, r2
 8010102:	d007      	beq.n	8010114 <TIM_OC1_SetConfig+0x7c>
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	4a2a      	ldr	r2, [pc, #168]	; (80101b0 <TIM_OC1_SetConfig+0x118>)
 8010108:	4293      	cmp	r3, r2
 801010a:	d003      	beq.n	8010114 <TIM_OC1_SetConfig+0x7c>
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	4a29      	ldr	r2, [pc, #164]	; (80101b4 <TIM_OC1_SetConfig+0x11c>)
 8010110:	4293      	cmp	r3, r2
 8010112:	d10c      	bne.n	801012e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010114:	697b      	ldr	r3, [r7, #20]
 8010116:	f023 0308 	bic.w	r3, r3, #8
 801011a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	68db      	ldr	r3, [r3, #12]
 8010120:	697a      	ldr	r2, [r7, #20]
 8010122:	4313      	orrs	r3, r2
 8010124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	f023 0304 	bic.w	r3, r3, #4
 801012c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	4a1c      	ldr	r2, [pc, #112]	; (80101a4 <TIM_OC1_SetConfig+0x10c>)
 8010132:	4293      	cmp	r3, r2
 8010134:	d00f      	beq.n	8010156 <TIM_OC1_SetConfig+0xbe>
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	4a1b      	ldr	r2, [pc, #108]	; (80101a8 <TIM_OC1_SetConfig+0x110>)
 801013a:	4293      	cmp	r3, r2
 801013c:	d00b      	beq.n	8010156 <TIM_OC1_SetConfig+0xbe>
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	4a1a      	ldr	r2, [pc, #104]	; (80101ac <TIM_OC1_SetConfig+0x114>)
 8010142:	4293      	cmp	r3, r2
 8010144:	d007      	beq.n	8010156 <TIM_OC1_SetConfig+0xbe>
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	4a19      	ldr	r2, [pc, #100]	; (80101b0 <TIM_OC1_SetConfig+0x118>)
 801014a:	4293      	cmp	r3, r2
 801014c:	d003      	beq.n	8010156 <TIM_OC1_SetConfig+0xbe>
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	4a18      	ldr	r2, [pc, #96]	; (80101b4 <TIM_OC1_SetConfig+0x11c>)
 8010152:	4293      	cmp	r3, r2
 8010154:	d111      	bne.n	801017a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010156:	693b      	ldr	r3, [r7, #16]
 8010158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801015c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801015e:	693b      	ldr	r3, [r7, #16]
 8010160:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	695b      	ldr	r3, [r3, #20]
 801016a:	693a      	ldr	r2, [r7, #16]
 801016c:	4313      	orrs	r3, r2
 801016e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	699b      	ldr	r3, [r3, #24]
 8010174:	693a      	ldr	r2, [r7, #16]
 8010176:	4313      	orrs	r3, r2
 8010178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	693a      	ldr	r2, [r7, #16]
 801017e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	68fa      	ldr	r2, [r7, #12]
 8010184:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	685a      	ldr	r2, [r3, #4]
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	697a      	ldr	r2, [r7, #20]
 8010192:	621a      	str	r2, [r3, #32]
}
 8010194:	bf00      	nop
 8010196:	371c      	adds	r7, #28
 8010198:	46bd      	mov	sp, r7
 801019a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019e:	4770      	bx	lr
 80101a0:	fffeff8f 	.word	0xfffeff8f
 80101a4:	40010000 	.word	0x40010000
 80101a8:	40010400 	.word	0x40010400
 80101ac:	40014000 	.word	0x40014000
 80101b0:	40014400 	.word	0x40014400
 80101b4:	40014800 	.word	0x40014800

080101b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80101b8:	b480      	push	{r7}
 80101ba:	b087      	sub	sp, #28
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
 80101c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	6a1b      	ldr	r3, [r3, #32]
 80101c6:	f023 0210 	bic.w	r2, r3, #16
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	6a1b      	ldr	r3, [r3, #32]
 80101d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	685b      	ldr	r3, [r3, #4]
 80101d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	699b      	ldr	r3, [r3, #24]
 80101de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80101e0:	68fa      	ldr	r2, [r7, #12]
 80101e2:	4b34      	ldr	r3, [pc, #208]	; (80102b4 <TIM_OC2_SetConfig+0xfc>)
 80101e4:	4013      	ands	r3, r2
 80101e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80101ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	021b      	lsls	r3, r3, #8
 80101f6:	68fa      	ldr	r2, [r7, #12]
 80101f8:	4313      	orrs	r3, r2
 80101fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80101fc:	697b      	ldr	r3, [r7, #20]
 80101fe:	f023 0320 	bic.w	r3, r3, #32
 8010202:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	689b      	ldr	r3, [r3, #8]
 8010208:	011b      	lsls	r3, r3, #4
 801020a:	697a      	ldr	r2, [r7, #20]
 801020c:	4313      	orrs	r3, r2
 801020e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	4a29      	ldr	r2, [pc, #164]	; (80102b8 <TIM_OC2_SetConfig+0x100>)
 8010214:	4293      	cmp	r3, r2
 8010216:	d003      	beq.n	8010220 <TIM_OC2_SetConfig+0x68>
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	4a28      	ldr	r2, [pc, #160]	; (80102bc <TIM_OC2_SetConfig+0x104>)
 801021c:	4293      	cmp	r3, r2
 801021e:	d10d      	bne.n	801023c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010220:	697b      	ldr	r3, [r7, #20]
 8010222:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010226:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	68db      	ldr	r3, [r3, #12]
 801022c:	011b      	lsls	r3, r3, #4
 801022e:	697a      	ldr	r2, [r7, #20]
 8010230:	4313      	orrs	r3, r2
 8010232:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010234:	697b      	ldr	r3, [r7, #20]
 8010236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801023a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	4a1e      	ldr	r2, [pc, #120]	; (80102b8 <TIM_OC2_SetConfig+0x100>)
 8010240:	4293      	cmp	r3, r2
 8010242:	d00f      	beq.n	8010264 <TIM_OC2_SetConfig+0xac>
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	4a1d      	ldr	r2, [pc, #116]	; (80102bc <TIM_OC2_SetConfig+0x104>)
 8010248:	4293      	cmp	r3, r2
 801024a:	d00b      	beq.n	8010264 <TIM_OC2_SetConfig+0xac>
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	4a1c      	ldr	r2, [pc, #112]	; (80102c0 <TIM_OC2_SetConfig+0x108>)
 8010250:	4293      	cmp	r3, r2
 8010252:	d007      	beq.n	8010264 <TIM_OC2_SetConfig+0xac>
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	4a1b      	ldr	r2, [pc, #108]	; (80102c4 <TIM_OC2_SetConfig+0x10c>)
 8010258:	4293      	cmp	r3, r2
 801025a:	d003      	beq.n	8010264 <TIM_OC2_SetConfig+0xac>
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	4a1a      	ldr	r2, [pc, #104]	; (80102c8 <TIM_OC2_SetConfig+0x110>)
 8010260:	4293      	cmp	r3, r2
 8010262:	d113      	bne.n	801028c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010264:	693b      	ldr	r3, [r7, #16]
 8010266:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801026a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801026c:	693b      	ldr	r3, [r7, #16]
 801026e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010272:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	695b      	ldr	r3, [r3, #20]
 8010278:	009b      	lsls	r3, r3, #2
 801027a:	693a      	ldr	r2, [r7, #16]
 801027c:	4313      	orrs	r3, r2
 801027e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	699b      	ldr	r3, [r3, #24]
 8010284:	009b      	lsls	r3, r3, #2
 8010286:	693a      	ldr	r2, [r7, #16]
 8010288:	4313      	orrs	r3, r2
 801028a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	693a      	ldr	r2, [r7, #16]
 8010290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	68fa      	ldr	r2, [r7, #12]
 8010296:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010298:	683b      	ldr	r3, [r7, #0]
 801029a:	685a      	ldr	r2, [r3, #4]
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	697a      	ldr	r2, [r7, #20]
 80102a4:	621a      	str	r2, [r3, #32]
}
 80102a6:	bf00      	nop
 80102a8:	371c      	adds	r7, #28
 80102aa:	46bd      	mov	sp, r7
 80102ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b0:	4770      	bx	lr
 80102b2:	bf00      	nop
 80102b4:	feff8fff 	.word	0xfeff8fff
 80102b8:	40010000 	.word	0x40010000
 80102bc:	40010400 	.word	0x40010400
 80102c0:	40014000 	.word	0x40014000
 80102c4:	40014400 	.word	0x40014400
 80102c8:	40014800 	.word	0x40014800

080102cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80102cc:	b480      	push	{r7}
 80102ce:	b087      	sub	sp, #28
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
 80102d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	6a1b      	ldr	r3, [r3, #32]
 80102da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	6a1b      	ldr	r3, [r3, #32]
 80102e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	685b      	ldr	r3, [r3, #4]
 80102ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	69db      	ldr	r3, [r3, #28]
 80102f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80102f4:	68fa      	ldr	r2, [r7, #12]
 80102f6:	4b33      	ldr	r3, [pc, #204]	; (80103c4 <TIM_OC3_SetConfig+0xf8>)
 80102f8:	4013      	ands	r3, r2
 80102fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	f023 0303 	bic.w	r3, r3, #3
 8010302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010304:	683b      	ldr	r3, [r7, #0]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	68fa      	ldr	r2, [r7, #12]
 801030a:	4313      	orrs	r3, r2
 801030c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801030e:	697b      	ldr	r3, [r7, #20]
 8010310:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010314:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010316:	683b      	ldr	r3, [r7, #0]
 8010318:	689b      	ldr	r3, [r3, #8]
 801031a:	021b      	lsls	r3, r3, #8
 801031c:	697a      	ldr	r2, [r7, #20]
 801031e:	4313      	orrs	r3, r2
 8010320:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	4a28      	ldr	r2, [pc, #160]	; (80103c8 <TIM_OC3_SetConfig+0xfc>)
 8010326:	4293      	cmp	r3, r2
 8010328:	d003      	beq.n	8010332 <TIM_OC3_SetConfig+0x66>
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	4a27      	ldr	r2, [pc, #156]	; (80103cc <TIM_OC3_SetConfig+0x100>)
 801032e:	4293      	cmp	r3, r2
 8010330:	d10d      	bne.n	801034e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010332:	697b      	ldr	r3, [r7, #20]
 8010334:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010338:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801033a:	683b      	ldr	r3, [r7, #0]
 801033c:	68db      	ldr	r3, [r3, #12]
 801033e:	021b      	lsls	r3, r3, #8
 8010340:	697a      	ldr	r2, [r7, #20]
 8010342:	4313      	orrs	r3, r2
 8010344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010346:	697b      	ldr	r3, [r7, #20]
 8010348:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801034c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	4a1d      	ldr	r2, [pc, #116]	; (80103c8 <TIM_OC3_SetConfig+0xfc>)
 8010352:	4293      	cmp	r3, r2
 8010354:	d00f      	beq.n	8010376 <TIM_OC3_SetConfig+0xaa>
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	4a1c      	ldr	r2, [pc, #112]	; (80103cc <TIM_OC3_SetConfig+0x100>)
 801035a:	4293      	cmp	r3, r2
 801035c:	d00b      	beq.n	8010376 <TIM_OC3_SetConfig+0xaa>
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	4a1b      	ldr	r2, [pc, #108]	; (80103d0 <TIM_OC3_SetConfig+0x104>)
 8010362:	4293      	cmp	r3, r2
 8010364:	d007      	beq.n	8010376 <TIM_OC3_SetConfig+0xaa>
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	4a1a      	ldr	r2, [pc, #104]	; (80103d4 <TIM_OC3_SetConfig+0x108>)
 801036a:	4293      	cmp	r3, r2
 801036c:	d003      	beq.n	8010376 <TIM_OC3_SetConfig+0xaa>
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	4a19      	ldr	r2, [pc, #100]	; (80103d8 <TIM_OC3_SetConfig+0x10c>)
 8010372:	4293      	cmp	r3, r2
 8010374:	d113      	bne.n	801039e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010376:	693b      	ldr	r3, [r7, #16]
 8010378:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801037c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801037e:	693b      	ldr	r3, [r7, #16]
 8010380:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010384:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010386:	683b      	ldr	r3, [r7, #0]
 8010388:	695b      	ldr	r3, [r3, #20]
 801038a:	011b      	lsls	r3, r3, #4
 801038c:	693a      	ldr	r2, [r7, #16]
 801038e:	4313      	orrs	r3, r2
 8010390:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010392:	683b      	ldr	r3, [r7, #0]
 8010394:	699b      	ldr	r3, [r3, #24]
 8010396:	011b      	lsls	r3, r3, #4
 8010398:	693a      	ldr	r2, [r7, #16]
 801039a:	4313      	orrs	r3, r2
 801039c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	693a      	ldr	r2, [r7, #16]
 80103a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	68fa      	ldr	r2, [r7, #12]
 80103a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80103aa:	683b      	ldr	r3, [r7, #0]
 80103ac:	685a      	ldr	r2, [r3, #4]
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	697a      	ldr	r2, [r7, #20]
 80103b6:	621a      	str	r2, [r3, #32]
}
 80103b8:	bf00      	nop
 80103ba:	371c      	adds	r7, #28
 80103bc:	46bd      	mov	sp, r7
 80103be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c2:	4770      	bx	lr
 80103c4:	fffeff8f 	.word	0xfffeff8f
 80103c8:	40010000 	.word	0x40010000
 80103cc:	40010400 	.word	0x40010400
 80103d0:	40014000 	.word	0x40014000
 80103d4:	40014400 	.word	0x40014400
 80103d8:	40014800 	.word	0x40014800

080103dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80103dc:	b480      	push	{r7}
 80103de:	b087      	sub	sp, #28
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
 80103e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	6a1b      	ldr	r3, [r3, #32]
 80103ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6a1b      	ldr	r3, [r3, #32]
 80103f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	685b      	ldr	r3, [r3, #4]
 80103fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	69db      	ldr	r3, [r3, #28]
 8010402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010404:	68fa      	ldr	r2, [r7, #12]
 8010406:	4b24      	ldr	r3, [pc, #144]	; (8010498 <TIM_OC4_SetConfig+0xbc>)
 8010408:	4013      	ands	r3, r2
 801040a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010412:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	021b      	lsls	r3, r3, #8
 801041a:	68fa      	ldr	r2, [r7, #12]
 801041c:	4313      	orrs	r3, r2
 801041e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010420:	693b      	ldr	r3, [r7, #16]
 8010422:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010426:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010428:	683b      	ldr	r3, [r7, #0]
 801042a:	689b      	ldr	r3, [r3, #8]
 801042c:	031b      	lsls	r3, r3, #12
 801042e:	693a      	ldr	r2, [r7, #16]
 8010430:	4313      	orrs	r3, r2
 8010432:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	4a19      	ldr	r2, [pc, #100]	; (801049c <TIM_OC4_SetConfig+0xc0>)
 8010438:	4293      	cmp	r3, r2
 801043a:	d00f      	beq.n	801045c <TIM_OC4_SetConfig+0x80>
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	4a18      	ldr	r2, [pc, #96]	; (80104a0 <TIM_OC4_SetConfig+0xc4>)
 8010440:	4293      	cmp	r3, r2
 8010442:	d00b      	beq.n	801045c <TIM_OC4_SetConfig+0x80>
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	4a17      	ldr	r2, [pc, #92]	; (80104a4 <TIM_OC4_SetConfig+0xc8>)
 8010448:	4293      	cmp	r3, r2
 801044a:	d007      	beq.n	801045c <TIM_OC4_SetConfig+0x80>
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	4a16      	ldr	r2, [pc, #88]	; (80104a8 <TIM_OC4_SetConfig+0xcc>)
 8010450:	4293      	cmp	r3, r2
 8010452:	d003      	beq.n	801045c <TIM_OC4_SetConfig+0x80>
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	4a15      	ldr	r2, [pc, #84]	; (80104ac <TIM_OC4_SetConfig+0xd0>)
 8010458:	4293      	cmp	r3, r2
 801045a:	d109      	bne.n	8010470 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801045c:	697b      	ldr	r3, [r7, #20]
 801045e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010462:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	695b      	ldr	r3, [r3, #20]
 8010468:	019b      	lsls	r3, r3, #6
 801046a:	697a      	ldr	r2, [r7, #20]
 801046c:	4313      	orrs	r3, r2
 801046e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	697a      	ldr	r2, [r7, #20]
 8010474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	68fa      	ldr	r2, [r7, #12]
 801047a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801047c:	683b      	ldr	r3, [r7, #0]
 801047e:	685a      	ldr	r2, [r3, #4]
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	693a      	ldr	r2, [r7, #16]
 8010488:	621a      	str	r2, [r3, #32]
}
 801048a:	bf00      	nop
 801048c:	371c      	adds	r7, #28
 801048e:	46bd      	mov	sp, r7
 8010490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010494:	4770      	bx	lr
 8010496:	bf00      	nop
 8010498:	feff8fff 	.word	0xfeff8fff
 801049c:	40010000 	.word	0x40010000
 80104a0:	40010400 	.word	0x40010400
 80104a4:	40014000 	.word	0x40014000
 80104a8:	40014400 	.word	0x40014400
 80104ac:	40014800 	.word	0x40014800

080104b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80104b0:	b480      	push	{r7}
 80104b2:	b087      	sub	sp, #28
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
 80104b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	6a1b      	ldr	r3, [r3, #32]
 80104be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	6a1b      	ldr	r3, [r3, #32]
 80104ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	685b      	ldr	r3, [r3, #4]
 80104d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80104d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80104d8:	68fa      	ldr	r2, [r7, #12]
 80104da:	4b21      	ldr	r3, [pc, #132]	; (8010560 <TIM_OC5_SetConfig+0xb0>)
 80104dc:	4013      	ands	r3, r2
 80104de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80104e0:	683b      	ldr	r3, [r7, #0]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	68fa      	ldr	r2, [r7, #12]
 80104e6:	4313      	orrs	r3, r2
 80104e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80104ea:	693b      	ldr	r3, [r7, #16]
 80104ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80104f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80104f2:	683b      	ldr	r3, [r7, #0]
 80104f4:	689b      	ldr	r3, [r3, #8]
 80104f6:	041b      	lsls	r3, r3, #16
 80104f8:	693a      	ldr	r2, [r7, #16]
 80104fa:	4313      	orrs	r3, r2
 80104fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	4a18      	ldr	r2, [pc, #96]	; (8010564 <TIM_OC5_SetConfig+0xb4>)
 8010502:	4293      	cmp	r3, r2
 8010504:	d00f      	beq.n	8010526 <TIM_OC5_SetConfig+0x76>
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	4a17      	ldr	r2, [pc, #92]	; (8010568 <TIM_OC5_SetConfig+0xb8>)
 801050a:	4293      	cmp	r3, r2
 801050c:	d00b      	beq.n	8010526 <TIM_OC5_SetConfig+0x76>
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	4a16      	ldr	r2, [pc, #88]	; (801056c <TIM_OC5_SetConfig+0xbc>)
 8010512:	4293      	cmp	r3, r2
 8010514:	d007      	beq.n	8010526 <TIM_OC5_SetConfig+0x76>
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	4a15      	ldr	r2, [pc, #84]	; (8010570 <TIM_OC5_SetConfig+0xc0>)
 801051a:	4293      	cmp	r3, r2
 801051c:	d003      	beq.n	8010526 <TIM_OC5_SetConfig+0x76>
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	4a14      	ldr	r2, [pc, #80]	; (8010574 <TIM_OC5_SetConfig+0xc4>)
 8010522:	4293      	cmp	r3, r2
 8010524:	d109      	bne.n	801053a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010526:	697b      	ldr	r3, [r7, #20]
 8010528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801052c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	695b      	ldr	r3, [r3, #20]
 8010532:	021b      	lsls	r3, r3, #8
 8010534:	697a      	ldr	r2, [r7, #20]
 8010536:	4313      	orrs	r3, r2
 8010538:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	697a      	ldr	r2, [r7, #20]
 801053e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	68fa      	ldr	r2, [r7, #12]
 8010544:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010546:	683b      	ldr	r3, [r7, #0]
 8010548:	685a      	ldr	r2, [r3, #4]
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	693a      	ldr	r2, [r7, #16]
 8010552:	621a      	str	r2, [r3, #32]
}
 8010554:	bf00      	nop
 8010556:	371c      	adds	r7, #28
 8010558:	46bd      	mov	sp, r7
 801055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055e:	4770      	bx	lr
 8010560:	fffeff8f 	.word	0xfffeff8f
 8010564:	40010000 	.word	0x40010000
 8010568:	40010400 	.word	0x40010400
 801056c:	40014000 	.word	0x40014000
 8010570:	40014400 	.word	0x40014400
 8010574:	40014800 	.word	0x40014800

08010578 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010578:	b480      	push	{r7}
 801057a:	b087      	sub	sp, #28
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
 8010580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6a1b      	ldr	r3, [r3, #32]
 8010586:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	6a1b      	ldr	r3, [r3, #32]
 8010592:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	685b      	ldr	r3, [r3, #4]
 8010598:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801059e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80105a0:	68fa      	ldr	r2, [r7, #12]
 80105a2:	4b22      	ldr	r3, [pc, #136]	; (801062c <TIM_OC6_SetConfig+0xb4>)
 80105a4:	4013      	ands	r3, r2
 80105a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80105a8:	683b      	ldr	r3, [r7, #0]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	021b      	lsls	r3, r3, #8
 80105ae:	68fa      	ldr	r2, [r7, #12]
 80105b0:	4313      	orrs	r3, r2
 80105b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80105b4:	693b      	ldr	r3, [r7, #16]
 80105b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80105ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	689b      	ldr	r3, [r3, #8]
 80105c0:	051b      	lsls	r3, r3, #20
 80105c2:	693a      	ldr	r2, [r7, #16]
 80105c4:	4313      	orrs	r3, r2
 80105c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	4a19      	ldr	r2, [pc, #100]	; (8010630 <TIM_OC6_SetConfig+0xb8>)
 80105cc:	4293      	cmp	r3, r2
 80105ce:	d00f      	beq.n	80105f0 <TIM_OC6_SetConfig+0x78>
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	4a18      	ldr	r2, [pc, #96]	; (8010634 <TIM_OC6_SetConfig+0xbc>)
 80105d4:	4293      	cmp	r3, r2
 80105d6:	d00b      	beq.n	80105f0 <TIM_OC6_SetConfig+0x78>
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	4a17      	ldr	r2, [pc, #92]	; (8010638 <TIM_OC6_SetConfig+0xc0>)
 80105dc:	4293      	cmp	r3, r2
 80105de:	d007      	beq.n	80105f0 <TIM_OC6_SetConfig+0x78>
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	4a16      	ldr	r2, [pc, #88]	; (801063c <TIM_OC6_SetConfig+0xc4>)
 80105e4:	4293      	cmp	r3, r2
 80105e6:	d003      	beq.n	80105f0 <TIM_OC6_SetConfig+0x78>
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	4a15      	ldr	r2, [pc, #84]	; (8010640 <TIM_OC6_SetConfig+0xc8>)
 80105ec:	4293      	cmp	r3, r2
 80105ee:	d109      	bne.n	8010604 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80105f0:	697b      	ldr	r3, [r7, #20]
 80105f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80105f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	695b      	ldr	r3, [r3, #20]
 80105fc:	029b      	lsls	r3, r3, #10
 80105fe:	697a      	ldr	r2, [r7, #20]
 8010600:	4313      	orrs	r3, r2
 8010602:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	697a      	ldr	r2, [r7, #20]
 8010608:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	68fa      	ldr	r2, [r7, #12]
 801060e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	685a      	ldr	r2, [r3, #4]
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	693a      	ldr	r2, [r7, #16]
 801061c:	621a      	str	r2, [r3, #32]
}
 801061e:	bf00      	nop
 8010620:	371c      	adds	r7, #28
 8010622:	46bd      	mov	sp, r7
 8010624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010628:	4770      	bx	lr
 801062a:	bf00      	nop
 801062c:	feff8fff 	.word	0xfeff8fff
 8010630:	40010000 	.word	0x40010000
 8010634:	40010400 	.word	0x40010400
 8010638:	40014000 	.word	0x40014000
 801063c:	40014400 	.word	0x40014400
 8010640:	40014800 	.word	0x40014800

08010644 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010644:	b480      	push	{r7}
 8010646:	b087      	sub	sp, #28
 8010648:	af00      	add	r7, sp, #0
 801064a:	60f8      	str	r0, [r7, #12]
 801064c:	60b9      	str	r1, [r7, #8]
 801064e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010650:	68bb      	ldr	r3, [r7, #8]
 8010652:	f003 031f 	and.w	r3, r3, #31
 8010656:	2201      	movs	r2, #1
 8010658:	fa02 f303 	lsl.w	r3, r2, r3
 801065c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	6a1a      	ldr	r2, [r3, #32]
 8010662:	697b      	ldr	r3, [r7, #20]
 8010664:	43db      	mvns	r3, r3
 8010666:	401a      	ands	r2, r3
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	6a1a      	ldr	r2, [r3, #32]
 8010670:	68bb      	ldr	r3, [r7, #8]
 8010672:	f003 031f 	and.w	r3, r3, #31
 8010676:	6879      	ldr	r1, [r7, #4]
 8010678:	fa01 f303 	lsl.w	r3, r1, r3
 801067c:	431a      	orrs	r2, r3
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	621a      	str	r2, [r3, #32]
}
 8010682:	bf00      	nop
 8010684:	371c      	adds	r7, #28
 8010686:	46bd      	mov	sp, r7
 8010688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068c:	4770      	bx	lr
	...

08010690 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010690:	b480      	push	{r7}
 8010692:	b085      	sub	sp, #20
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
 8010698:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80106a0:	2b01      	cmp	r3, #1
 80106a2:	d101      	bne.n	80106a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80106a4:	2302      	movs	r3, #2
 80106a6:	e077      	b.n	8010798 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	2201      	movs	r2, #1
 80106ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	2202      	movs	r2, #2
 80106b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	685b      	ldr	r3, [r3, #4]
 80106be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	689b      	ldr	r3, [r3, #8]
 80106c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	4a35      	ldr	r2, [pc, #212]	; (80107a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80106ce:	4293      	cmp	r3, r2
 80106d0:	d004      	beq.n	80106dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	4a34      	ldr	r2, [pc, #208]	; (80107a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80106d8:	4293      	cmp	r3, r2
 80106da:	d108      	bne.n	80106ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80106e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80106e4:	683b      	ldr	r3, [r7, #0]
 80106e6:	685b      	ldr	r3, [r3, #4]
 80106e8:	68fa      	ldr	r2, [r7, #12]
 80106ea:	4313      	orrs	r3, r2
 80106ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80106f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80106f6:	683b      	ldr	r3, [r7, #0]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	68fa      	ldr	r2, [r7, #12]
 80106fc:	4313      	orrs	r3, r2
 80106fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	68fa      	ldr	r2, [r7, #12]
 8010706:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	4a25      	ldr	r2, [pc, #148]	; (80107a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801070e:	4293      	cmp	r3, r2
 8010710:	d02c      	beq.n	801076c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801071a:	d027      	beq.n	801076c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	4a22      	ldr	r2, [pc, #136]	; (80107ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8010722:	4293      	cmp	r3, r2
 8010724:	d022      	beq.n	801076c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	4a21      	ldr	r2, [pc, #132]	; (80107b0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 801072c:	4293      	cmp	r3, r2
 801072e:	d01d      	beq.n	801076c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	4a1f      	ldr	r2, [pc, #124]	; (80107b4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8010736:	4293      	cmp	r3, r2
 8010738:	d018      	beq.n	801076c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	4a1a      	ldr	r2, [pc, #104]	; (80107a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010740:	4293      	cmp	r3, r2
 8010742:	d013      	beq.n	801076c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	4a1b      	ldr	r2, [pc, #108]	; (80107b8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 801074a:	4293      	cmp	r3, r2
 801074c:	d00e      	beq.n	801076c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	4a1a      	ldr	r2, [pc, #104]	; (80107bc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8010754:	4293      	cmp	r3, r2
 8010756:	d009      	beq.n	801076c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	4a18      	ldr	r2, [pc, #96]	; (80107c0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 801075e:	4293      	cmp	r3, r2
 8010760:	d004      	beq.n	801076c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	4a17      	ldr	r2, [pc, #92]	; (80107c4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8010768:	4293      	cmp	r3, r2
 801076a:	d10c      	bne.n	8010786 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801076c:	68bb      	ldr	r3, [r7, #8]
 801076e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010772:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010774:	683b      	ldr	r3, [r7, #0]
 8010776:	689b      	ldr	r3, [r3, #8]
 8010778:	68ba      	ldr	r2, [r7, #8]
 801077a:	4313      	orrs	r3, r2
 801077c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	68ba      	ldr	r2, [r7, #8]
 8010784:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	2201      	movs	r2, #1
 801078a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	2200      	movs	r2, #0
 8010792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010796:	2300      	movs	r3, #0
}
 8010798:	4618      	mov	r0, r3
 801079a:	3714      	adds	r7, #20
 801079c:	46bd      	mov	sp, r7
 801079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a2:	4770      	bx	lr
 80107a4:	40010000 	.word	0x40010000
 80107a8:	40010400 	.word	0x40010400
 80107ac:	40000400 	.word	0x40000400
 80107b0:	40000800 	.word	0x40000800
 80107b4:	40000c00 	.word	0x40000c00
 80107b8:	40001800 	.word	0x40001800
 80107bc:	40014000 	.word	0x40014000
 80107c0:	4000e000 	.word	0x4000e000
 80107c4:	4000e400 	.word	0x4000e400

080107c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80107c8:	b480      	push	{r7}
 80107ca:	b083      	sub	sp, #12
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80107d0:	bf00      	nop
 80107d2:	370c      	adds	r7, #12
 80107d4:	46bd      	mov	sp, r7
 80107d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107da:	4770      	bx	lr

080107dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80107dc:	b480      	push	{r7}
 80107de:	b083      	sub	sp, #12
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80107e4:	bf00      	nop
 80107e6:	370c      	adds	r7, #12
 80107e8:	46bd      	mov	sp, r7
 80107ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ee:	4770      	bx	lr

080107f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80107f0:	b480      	push	{r7}
 80107f2:	b083      	sub	sp, #12
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80107f8:	bf00      	nop
 80107fa:	370c      	adds	r7, #12
 80107fc:	46bd      	mov	sp, r7
 80107fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010802:	4770      	bx	lr

08010804 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b082      	sub	sp, #8
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d101      	bne.n	8010816 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010812:	2301      	movs	r3, #1
 8010814:	e042      	b.n	801089c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801081c:	2b00      	cmp	r3, #0
 801081e:	d106      	bne.n	801082e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2200      	movs	r2, #0
 8010824:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f7f2 fd3f 	bl	80032ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	2224      	movs	r2, #36	; 0x24
 8010832:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	681a      	ldr	r2, [r3, #0]
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	f022 0201 	bic.w	r2, r2, #1
 8010844:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010846:	6878      	ldr	r0, [r7, #4]
 8010848:	f000 f82c 	bl	80108a4 <UART_SetConfig>
 801084c:	4603      	mov	r3, r0
 801084e:	2b01      	cmp	r3, #1
 8010850:	d101      	bne.n	8010856 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010852:	2301      	movs	r3, #1
 8010854:	e022      	b.n	801089c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801085a:	2b00      	cmp	r3, #0
 801085c:	d002      	beq.n	8010864 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	f000 fe8c 	bl	801157c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	685a      	ldr	r2, [r3, #4]
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010872:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	689a      	ldr	r2, [r3, #8]
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010882:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	681a      	ldr	r2, [r3, #0]
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	f042 0201 	orr.w	r2, r2, #1
 8010892:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010894:	6878      	ldr	r0, [r7, #4]
 8010896:	f000 ff13 	bl	80116c0 <UART_CheckIdleState>
 801089a:	4603      	mov	r3, r0
}
 801089c:	4618      	mov	r0, r3
 801089e:	3708      	adds	r7, #8
 80108a0:	46bd      	mov	sp, r7
 80108a2:	bd80      	pop	{r7, pc}

080108a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80108a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80108a8:	b092      	sub	sp, #72	; 0x48
 80108aa:	af00      	add	r7, sp, #0
 80108ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80108ae:	2300      	movs	r3, #0
 80108b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80108b4:	697b      	ldr	r3, [r7, #20]
 80108b6:	689a      	ldr	r2, [r3, #8]
 80108b8:	697b      	ldr	r3, [r7, #20]
 80108ba:	691b      	ldr	r3, [r3, #16]
 80108bc:	431a      	orrs	r2, r3
 80108be:	697b      	ldr	r3, [r7, #20]
 80108c0:	695b      	ldr	r3, [r3, #20]
 80108c2:	431a      	orrs	r2, r3
 80108c4:	697b      	ldr	r3, [r7, #20]
 80108c6:	69db      	ldr	r3, [r3, #28]
 80108c8:	4313      	orrs	r3, r2
 80108ca:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80108cc:	697b      	ldr	r3, [r7, #20]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	681a      	ldr	r2, [r3, #0]
 80108d2:	4bbe      	ldr	r3, [pc, #760]	; (8010bcc <UART_SetConfig+0x328>)
 80108d4:	4013      	ands	r3, r2
 80108d6:	697a      	ldr	r2, [r7, #20]
 80108d8:	6812      	ldr	r2, [r2, #0]
 80108da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80108dc:	430b      	orrs	r3, r1
 80108de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80108e0:	697b      	ldr	r3, [r7, #20]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	685b      	ldr	r3, [r3, #4]
 80108e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80108ea:	697b      	ldr	r3, [r7, #20]
 80108ec:	68da      	ldr	r2, [r3, #12]
 80108ee:	697b      	ldr	r3, [r7, #20]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	430a      	orrs	r2, r1
 80108f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80108f6:	697b      	ldr	r3, [r7, #20]
 80108f8:	699b      	ldr	r3, [r3, #24]
 80108fa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80108fc:	697b      	ldr	r3, [r7, #20]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	4ab3      	ldr	r2, [pc, #716]	; (8010bd0 <UART_SetConfig+0x32c>)
 8010902:	4293      	cmp	r3, r2
 8010904:	d004      	beq.n	8010910 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	6a1b      	ldr	r3, [r3, #32]
 801090a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801090c:	4313      	orrs	r3, r2
 801090e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010910:	697b      	ldr	r3, [r7, #20]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	689a      	ldr	r2, [r3, #8]
 8010916:	4baf      	ldr	r3, [pc, #700]	; (8010bd4 <UART_SetConfig+0x330>)
 8010918:	4013      	ands	r3, r2
 801091a:	697a      	ldr	r2, [r7, #20]
 801091c:	6812      	ldr	r2, [r2, #0]
 801091e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010920:	430b      	orrs	r3, r1
 8010922:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010924:	697b      	ldr	r3, [r7, #20]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801092a:	f023 010f 	bic.w	r1, r3, #15
 801092e:	697b      	ldr	r3, [r7, #20]
 8010930:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010932:	697b      	ldr	r3, [r7, #20]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	430a      	orrs	r2, r1
 8010938:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801093a:	697b      	ldr	r3, [r7, #20]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	4aa6      	ldr	r2, [pc, #664]	; (8010bd8 <UART_SetConfig+0x334>)
 8010940:	4293      	cmp	r3, r2
 8010942:	d177      	bne.n	8010a34 <UART_SetConfig+0x190>
 8010944:	4ba5      	ldr	r3, [pc, #660]	; (8010bdc <UART_SetConfig+0x338>)
 8010946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010948:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801094c:	2b28      	cmp	r3, #40	; 0x28
 801094e:	d86d      	bhi.n	8010a2c <UART_SetConfig+0x188>
 8010950:	a201      	add	r2, pc, #4	; (adr r2, 8010958 <UART_SetConfig+0xb4>)
 8010952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010956:	bf00      	nop
 8010958:	080109fd 	.word	0x080109fd
 801095c:	08010a2d 	.word	0x08010a2d
 8010960:	08010a2d 	.word	0x08010a2d
 8010964:	08010a2d 	.word	0x08010a2d
 8010968:	08010a2d 	.word	0x08010a2d
 801096c:	08010a2d 	.word	0x08010a2d
 8010970:	08010a2d 	.word	0x08010a2d
 8010974:	08010a2d 	.word	0x08010a2d
 8010978:	08010a05 	.word	0x08010a05
 801097c:	08010a2d 	.word	0x08010a2d
 8010980:	08010a2d 	.word	0x08010a2d
 8010984:	08010a2d 	.word	0x08010a2d
 8010988:	08010a2d 	.word	0x08010a2d
 801098c:	08010a2d 	.word	0x08010a2d
 8010990:	08010a2d 	.word	0x08010a2d
 8010994:	08010a2d 	.word	0x08010a2d
 8010998:	08010a0d 	.word	0x08010a0d
 801099c:	08010a2d 	.word	0x08010a2d
 80109a0:	08010a2d 	.word	0x08010a2d
 80109a4:	08010a2d 	.word	0x08010a2d
 80109a8:	08010a2d 	.word	0x08010a2d
 80109ac:	08010a2d 	.word	0x08010a2d
 80109b0:	08010a2d 	.word	0x08010a2d
 80109b4:	08010a2d 	.word	0x08010a2d
 80109b8:	08010a15 	.word	0x08010a15
 80109bc:	08010a2d 	.word	0x08010a2d
 80109c0:	08010a2d 	.word	0x08010a2d
 80109c4:	08010a2d 	.word	0x08010a2d
 80109c8:	08010a2d 	.word	0x08010a2d
 80109cc:	08010a2d 	.word	0x08010a2d
 80109d0:	08010a2d 	.word	0x08010a2d
 80109d4:	08010a2d 	.word	0x08010a2d
 80109d8:	08010a1d 	.word	0x08010a1d
 80109dc:	08010a2d 	.word	0x08010a2d
 80109e0:	08010a2d 	.word	0x08010a2d
 80109e4:	08010a2d 	.word	0x08010a2d
 80109e8:	08010a2d 	.word	0x08010a2d
 80109ec:	08010a2d 	.word	0x08010a2d
 80109f0:	08010a2d 	.word	0x08010a2d
 80109f4:	08010a2d 	.word	0x08010a2d
 80109f8:	08010a25 	.word	0x08010a25
 80109fc:	2301      	movs	r3, #1
 80109fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a02:	e326      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010a04:	2304      	movs	r3, #4
 8010a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a0a:	e322      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010a0c:	2308      	movs	r3, #8
 8010a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a12:	e31e      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010a14:	2310      	movs	r3, #16
 8010a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a1a:	e31a      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010a1c:	2320      	movs	r3, #32
 8010a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a22:	e316      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010a24:	2340      	movs	r3, #64	; 0x40
 8010a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a2a:	e312      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010a2c:	2380      	movs	r3, #128	; 0x80
 8010a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a32:	e30e      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010a34:	697b      	ldr	r3, [r7, #20]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	4a69      	ldr	r2, [pc, #420]	; (8010be0 <UART_SetConfig+0x33c>)
 8010a3a:	4293      	cmp	r3, r2
 8010a3c:	d130      	bne.n	8010aa0 <UART_SetConfig+0x1fc>
 8010a3e:	4b67      	ldr	r3, [pc, #412]	; (8010bdc <UART_SetConfig+0x338>)
 8010a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a42:	f003 0307 	and.w	r3, r3, #7
 8010a46:	2b05      	cmp	r3, #5
 8010a48:	d826      	bhi.n	8010a98 <UART_SetConfig+0x1f4>
 8010a4a:	a201      	add	r2, pc, #4	; (adr r2, 8010a50 <UART_SetConfig+0x1ac>)
 8010a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a50:	08010a69 	.word	0x08010a69
 8010a54:	08010a71 	.word	0x08010a71
 8010a58:	08010a79 	.word	0x08010a79
 8010a5c:	08010a81 	.word	0x08010a81
 8010a60:	08010a89 	.word	0x08010a89
 8010a64:	08010a91 	.word	0x08010a91
 8010a68:	2300      	movs	r3, #0
 8010a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a6e:	e2f0      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010a70:	2304      	movs	r3, #4
 8010a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a76:	e2ec      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010a78:	2308      	movs	r3, #8
 8010a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a7e:	e2e8      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010a80:	2310      	movs	r3, #16
 8010a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a86:	e2e4      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010a88:	2320      	movs	r3, #32
 8010a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a8e:	e2e0      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010a90:	2340      	movs	r3, #64	; 0x40
 8010a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a96:	e2dc      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010a98:	2380      	movs	r3, #128	; 0x80
 8010a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a9e:	e2d8      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010aa0:	697b      	ldr	r3, [r7, #20]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	4a4f      	ldr	r2, [pc, #316]	; (8010be4 <UART_SetConfig+0x340>)
 8010aa6:	4293      	cmp	r3, r2
 8010aa8:	d130      	bne.n	8010b0c <UART_SetConfig+0x268>
 8010aaa:	4b4c      	ldr	r3, [pc, #304]	; (8010bdc <UART_SetConfig+0x338>)
 8010aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010aae:	f003 0307 	and.w	r3, r3, #7
 8010ab2:	2b05      	cmp	r3, #5
 8010ab4:	d826      	bhi.n	8010b04 <UART_SetConfig+0x260>
 8010ab6:	a201      	add	r2, pc, #4	; (adr r2, 8010abc <UART_SetConfig+0x218>)
 8010ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010abc:	08010ad5 	.word	0x08010ad5
 8010ac0:	08010add 	.word	0x08010add
 8010ac4:	08010ae5 	.word	0x08010ae5
 8010ac8:	08010aed 	.word	0x08010aed
 8010acc:	08010af5 	.word	0x08010af5
 8010ad0:	08010afd 	.word	0x08010afd
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ada:	e2ba      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010adc:	2304      	movs	r3, #4
 8010ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ae2:	e2b6      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010ae4:	2308      	movs	r3, #8
 8010ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010aea:	e2b2      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010aec:	2310      	movs	r3, #16
 8010aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010af2:	e2ae      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010af4:	2320      	movs	r3, #32
 8010af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010afa:	e2aa      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010afc:	2340      	movs	r3, #64	; 0x40
 8010afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b02:	e2a6      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010b04:	2380      	movs	r3, #128	; 0x80
 8010b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b0a:	e2a2      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010b0c:	697b      	ldr	r3, [r7, #20]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	4a35      	ldr	r2, [pc, #212]	; (8010be8 <UART_SetConfig+0x344>)
 8010b12:	4293      	cmp	r3, r2
 8010b14:	d130      	bne.n	8010b78 <UART_SetConfig+0x2d4>
 8010b16:	4b31      	ldr	r3, [pc, #196]	; (8010bdc <UART_SetConfig+0x338>)
 8010b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b1a:	f003 0307 	and.w	r3, r3, #7
 8010b1e:	2b05      	cmp	r3, #5
 8010b20:	d826      	bhi.n	8010b70 <UART_SetConfig+0x2cc>
 8010b22:	a201      	add	r2, pc, #4	; (adr r2, 8010b28 <UART_SetConfig+0x284>)
 8010b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b28:	08010b41 	.word	0x08010b41
 8010b2c:	08010b49 	.word	0x08010b49
 8010b30:	08010b51 	.word	0x08010b51
 8010b34:	08010b59 	.word	0x08010b59
 8010b38:	08010b61 	.word	0x08010b61
 8010b3c:	08010b69 	.word	0x08010b69
 8010b40:	2300      	movs	r3, #0
 8010b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b46:	e284      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010b48:	2304      	movs	r3, #4
 8010b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b4e:	e280      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010b50:	2308      	movs	r3, #8
 8010b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b56:	e27c      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010b58:	2310      	movs	r3, #16
 8010b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b5e:	e278      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010b60:	2320      	movs	r3, #32
 8010b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b66:	e274      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010b68:	2340      	movs	r3, #64	; 0x40
 8010b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b6e:	e270      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010b70:	2380      	movs	r3, #128	; 0x80
 8010b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b76:	e26c      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010b78:	697b      	ldr	r3, [r7, #20]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	4a1b      	ldr	r2, [pc, #108]	; (8010bec <UART_SetConfig+0x348>)
 8010b7e:	4293      	cmp	r3, r2
 8010b80:	d142      	bne.n	8010c08 <UART_SetConfig+0x364>
 8010b82:	4b16      	ldr	r3, [pc, #88]	; (8010bdc <UART_SetConfig+0x338>)
 8010b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b86:	f003 0307 	and.w	r3, r3, #7
 8010b8a:	2b05      	cmp	r3, #5
 8010b8c:	d838      	bhi.n	8010c00 <UART_SetConfig+0x35c>
 8010b8e:	a201      	add	r2, pc, #4	; (adr r2, 8010b94 <UART_SetConfig+0x2f0>)
 8010b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b94:	08010bad 	.word	0x08010bad
 8010b98:	08010bb5 	.word	0x08010bb5
 8010b9c:	08010bbd 	.word	0x08010bbd
 8010ba0:	08010bc5 	.word	0x08010bc5
 8010ba4:	08010bf1 	.word	0x08010bf1
 8010ba8:	08010bf9 	.word	0x08010bf9
 8010bac:	2300      	movs	r3, #0
 8010bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bb2:	e24e      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010bb4:	2304      	movs	r3, #4
 8010bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bba:	e24a      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010bbc:	2308      	movs	r3, #8
 8010bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bc2:	e246      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010bc4:	2310      	movs	r3, #16
 8010bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bca:	e242      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010bcc:	cfff69f3 	.word	0xcfff69f3
 8010bd0:	58000c00 	.word	0x58000c00
 8010bd4:	11fff4ff 	.word	0x11fff4ff
 8010bd8:	40011000 	.word	0x40011000
 8010bdc:	58024400 	.word	0x58024400
 8010be0:	40004400 	.word	0x40004400
 8010be4:	40004800 	.word	0x40004800
 8010be8:	40004c00 	.word	0x40004c00
 8010bec:	40005000 	.word	0x40005000
 8010bf0:	2320      	movs	r3, #32
 8010bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bf6:	e22c      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010bf8:	2340      	movs	r3, #64	; 0x40
 8010bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bfe:	e228      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010c00:	2380      	movs	r3, #128	; 0x80
 8010c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c06:	e224      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010c08:	697b      	ldr	r3, [r7, #20]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	4ab1      	ldr	r2, [pc, #708]	; (8010ed4 <UART_SetConfig+0x630>)
 8010c0e:	4293      	cmp	r3, r2
 8010c10:	d176      	bne.n	8010d00 <UART_SetConfig+0x45c>
 8010c12:	4bb1      	ldr	r3, [pc, #708]	; (8010ed8 <UART_SetConfig+0x634>)
 8010c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010c1a:	2b28      	cmp	r3, #40	; 0x28
 8010c1c:	d86c      	bhi.n	8010cf8 <UART_SetConfig+0x454>
 8010c1e:	a201      	add	r2, pc, #4	; (adr r2, 8010c24 <UART_SetConfig+0x380>)
 8010c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c24:	08010cc9 	.word	0x08010cc9
 8010c28:	08010cf9 	.word	0x08010cf9
 8010c2c:	08010cf9 	.word	0x08010cf9
 8010c30:	08010cf9 	.word	0x08010cf9
 8010c34:	08010cf9 	.word	0x08010cf9
 8010c38:	08010cf9 	.word	0x08010cf9
 8010c3c:	08010cf9 	.word	0x08010cf9
 8010c40:	08010cf9 	.word	0x08010cf9
 8010c44:	08010cd1 	.word	0x08010cd1
 8010c48:	08010cf9 	.word	0x08010cf9
 8010c4c:	08010cf9 	.word	0x08010cf9
 8010c50:	08010cf9 	.word	0x08010cf9
 8010c54:	08010cf9 	.word	0x08010cf9
 8010c58:	08010cf9 	.word	0x08010cf9
 8010c5c:	08010cf9 	.word	0x08010cf9
 8010c60:	08010cf9 	.word	0x08010cf9
 8010c64:	08010cd9 	.word	0x08010cd9
 8010c68:	08010cf9 	.word	0x08010cf9
 8010c6c:	08010cf9 	.word	0x08010cf9
 8010c70:	08010cf9 	.word	0x08010cf9
 8010c74:	08010cf9 	.word	0x08010cf9
 8010c78:	08010cf9 	.word	0x08010cf9
 8010c7c:	08010cf9 	.word	0x08010cf9
 8010c80:	08010cf9 	.word	0x08010cf9
 8010c84:	08010ce1 	.word	0x08010ce1
 8010c88:	08010cf9 	.word	0x08010cf9
 8010c8c:	08010cf9 	.word	0x08010cf9
 8010c90:	08010cf9 	.word	0x08010cf9
 8010c94:	08010cf9 	.word	0x08010cf9
 8010c98:	08010cf9 	.word	0x08010cf9
 8010c9c:	08010cf9 	.word	0x08010cf9
 8010ca0:	08010cf9 	.word	0x08010cf9
 8010ca4:	08010ce9 	.word	0x08010ce9
 8010ca8:	08010cf9 	.word	0x08010cf9
 8010cac:	08010cf9 	.word	0x08010cf9
 8010cb0:	08010cf9 	.word	0x08010cf9
 8010cb4:	08010cf9 	.word	0x08010cf9
 8010cb8:	08010cf9 	.word	0x08010cf9
 8010cbc:	08010cf9 	.word	0x08010cf9
 8010cc0:	08010cf9 	.word	0x08010cf9
 8010cc4:	08010cf1 	.word	0x08010cf1
 8010cc8:	2301      	movs	r3, #1
 8010cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cce:	e1c0      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010cd0:	2304      	movs	r3, #4
 8010cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cd6:	e1bc      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010cd8:	2308      	movs	r3, #8
 8010cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cde:	e1b8      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010ce0:	2310      	movs	r3, #16
 8010ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ce6:	e1b4      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010ce8:	2320      	movs	r3, #32
 8010cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cee:	e1b0      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010cf0:	2340      	movs	r3, #64	; 0x40
 8010cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cf6:	e1ac      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010cf8:	2380      	movs	r3, #128	; 0x80
 8010cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cfe:	e1a8      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010d00:	697b      	ldr	r3, [r7, #20]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	4a75      	ldr	r2, [pc, #468]	; (8010edc <UART_SetConfig+0x638>)
 8010d06:	4293      	cmp	r3, r2
 8010d08:	d130      	bne.n	8010d6c <UART_SetConfig+0x4c8>
 8010d0a:	4b73      	ldr	r3, [pc, #460]	; (8010ed8 <UART_SetConfig+0x634>)
 8010d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d0e:	f003 0307 	and.w	r3, r3, #7
 8010d12:	2b05      	cmp	r3, #5
 8010d14:	d826      	bhi.n	8010d64 <UART_SetConfig+0x4c0>
 8010d16:	a201      	add	r2, pc, #4	; (adr r2, 8010d1c <UART_SetConfig+0x478>)
 8010d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d1c:	08010d35 	.word	0x08010d35
 8010d20:	08010d3d 	.word	0x08010d3d
 8010d24:	08010d45 	.word	0x08010d45
 8010d28:	08010d4d 	.word	0x08010d4d
 8010d2c:	08010d55 	.word	0x08010d55
 8010d30:	08010d5d 	.word	0x08010d5d
 8010d34:	2300      	movs	r3, #0
 8010d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d3a:	e18a      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010d3c:	2304      	movs	r3, #4
 8010d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d42:	e186      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010d44:	2308      	movs	r3, #8
 8010d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d4a:	e182      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010d4c:	2310      	movs	r3, #16
 8010d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d52:	e17e      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010d54:	2320      	movs	r3, #32
 8010d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d5a:	e17a      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010d5c:	2340      	movs	r3, #64	; 0x40
 8010d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d62:	e176      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010d64:	2380      	movs	r3, #128	; 0x80
 8010d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d6a:	e172      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010d6c:	697b      	ldr	r3, [r7, #20]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	4a5b      	ldr	r2, [pc, #364]	; (8010ee0 <UART_SetConfig+0x63c>)
 8010d72:	4293      	cmp	r3, r2
 8010d74:	d130      	bne.n	8010dd8 <UART_SetConfig+0x534>
 8010d76:	4b58      	ldr	r3, [pc, #352]	; (8010ed8 <UART_SetConfig+0x634>)
 8010d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d7a:	f003 0307 	and.w	r3, r3, #7
 8010d7e:	2b05      	cmp	r3, #5
 8010d80:	d826      	bhi.n	8010dd0 <UART_SetConfig+0x52c>
 8010d82:	a201      	add	r2, pc, #4	; (adr r2, 8010d88 <UART_SetConfig+0x4e4>)
 8010d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d88:	08010da1 	.word	0x08010da1
 8010d8c:	08010da9 	.word	0x08010da9
 8010d90:	08010db1 	.word	0x08010db1
 8010d94:	08010db9 	.word	0x08010db9
 8010d98:	08010dc1 	.word	0x08010dc1
 8010d9c:	08010dc9 	.word	0x08010dc9
 8010da0:	2300      	movs	r3, #0
 8010da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010da6:	e154      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010da8:	2304      	movs	r3, #4
 8010daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dae:	e150      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010db0:	2308      	movs	r3, #8
 8010db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010db6:	e14c      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010db8:	2310      	movs	r3, #16
 8010dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dbe:	e148      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010dc0:	2320      	movs	r3, #32
 8010dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dc6:	e144      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010dc8:	2340      	movs	r3, #64	; 0x40
 8010dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dce:	e140      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010dd0:	2380      	movs	r3, #128	; 0x80
 8010dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dd6:	e13c      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010dd8:	697b      	ldr	r3, [r7, #20]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	4a41      	ldr	r2, [pc, #260]	; (8010ee4 <UART_SetConfig+0x640>)
 8010dde:	4293      	cmp	r3, r2
 8010de0:	f040 8082 	bne.w	8010ee8 <UART_SetConfig+0x644>
 8010de4:	4b3c      	ldr	r3, [pc, #240]	; (8010ed8 <UART_SetConfig+0x634>)
 8010de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010de8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010dec:	2b28      	cmp	r3, #40	; 0x28
 8010dee:	d86d      	bhi.n	8010ecc <UART_SetConfig+0x628>
 8010df0:	a201      	add	r2, pc, #4	; (adr r2, 8010df8 <UART_SetConfig+0x554>)
 8010df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010df6:	bf00      	nop
 8010df8:	08010e9d 	.word	0x08010e9d
 8010dfc:	08010ecd 	.word	0x08010ecd
 8010e00:	08010ecd 	.word	0x08010ecd
 8010e04:	08010ecd 	.word	0x08010ecd
 8010e08:	08010ecd 	.word	0x08010ecd
 8010e0c:	08010ecd 	.word	0x08010ecd
 8010e10:	08010ecd 	.word	0x08010ecd
 8010e14:	08010ecd 	.word	0x08010ecd
 8010e18:	08010ea5 	.word	0x08010ea5
 8010e1c:	08010ecd 	.word	0x08010ecd
 8010e20:	08010ecd 	.word	0x08010ecd
 8010e24:	08010ecd 	.word	0x08010ecd
 8010e28:	08010ecd 	.word	0x08010ecd
 8010e2c:	08010ecd 	.word	0x08010ecd
 8010e30:	08010ecd 	.word	0x08010ecd
 8010e34:	08010ecd 	.word	0x08010ecd
 8010e38:	08010ead 	.word	0x08010ead
 8010e3c:	08010ecd 	.word	0x08010ecd
 8010e40:	08010ecd 	.word	0x08010ecd
 8010e44:	08010ecd 	.word	0x08010ecd
 8010e48:	08010ecd 	.word	0x08010ecd
 8010e4c:	08010ecd 	.word	0x08010ecd
 8010e50:	08010ecd 	.word	0x08010ecd
 8010e54:	08010ecd 	.word	0x08010ecd
 8010e58:	08010eb5 	.word	0x08010eb5
 8010e5c:	08010ecd 	.word	0x08010ecd
 8010e60:	08010ecd 	.word	0x08010ecd
 8010e64:	08010ecd 	.word	0x08010ecd
 8010e68:	08010ecd 	.word	0x08010ecd
 8010e6c:	08010ecd 	.word	0x08010ecd
 8010e70:	08010ecd 	.word	0x08010ecd
 8010e74:	08010ecd 	.word	0x08010ecd
 8010e78:	08010ebd 	.word	0x08010ebd
 8010e7c:	08010ecd 	.word	0x08010ecd
 8010e80:	08010ecd 	.word	0x08010ecd
 8010e84:	08010ecd 	.word	0x08010ecd
 8010e88:	08010ecd 	.word	0x08010ecd
 8010e8c:	08010ecd 	.word	0x08010ecd
 8010e90:	08010ecd 	.word	0x08010ecd
 8010e94:	08010ecd 	.word	0x08010ecd
 8010e98:	08010ec5 	.word	0x08010ec5
 8010e9c:	2301      	movs	r3, #1
 8010e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ea2:	e0d6      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010ea4:	2304      	movs	r3, #4
 8010ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eaa:	e0d2      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010eac:	2308      	movs	r3, #8
 8010eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eb2:	e0ce      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010eb4:	2310      	movs	r3, #16
 8010eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eba:	e0ca      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010ebc:	2320      	movs	r3, #32
 8010ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ec2:	e0c6      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010ec4:	2340      	movs	r3, #64	; 0x40
 8010ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eca:	e0c2      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010ecc:	2380      	movs	r3, #128	; 0x80
 8010ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ed2:	e0be      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010ed4:	40011400 	.word	0x40011400
 8010ed8:	58024400 	.word	0x58024400
 8010edc:	40007800 	.word	0x40007800
 8010ee0:	40007c00 	.word	0x40007c00
 8010ee4:	40011800 	.word	0x40011800
 8010ee8:	697b      	ldr	r3, [r7, #20]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	4aad      	ldr	r2, [pc, #692]	; (80111a4 <UART_SetConfig+0x900>)
 8010eee:	4293      	cmp	r3, r2
 8010ef0:	d176      	bne.n	8010fe0 <UART_SetConfig+0x73c>
 8010ef2:	4bad      	ldr	r3, [pc, #692]	; (80111a8 <UART_SetConfig+0x904>)
 8010ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ef6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010efa:	2b28      	cmp	r3, #40	; 0x28
 8010efc:	d86c      	bhi.n	8010fd8 <UART_SetConfig+0x734>
 8010efe:	a201      	add	r2, pc, #4	; (adr r2, 8010f04 <UART_SetConfig+0x660>)
 8010f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f04:	08010fa9 	.word	0x08010fa9
 8010f08:	08010fd9 	.word	0x08010fd9
 8010f0c:	08010fd9 	.word	0x08010fd9
 8010f10:	08010fd9 	.word	0x08010fd9
 8010f14:	08010fd9 	.word	0x08010fd9
 8010f18:	08010fd9 	.word	0x08010fd9
 8010f1c:	08010fd9 	.word	0x08010fd9
 8010f20:	08010fd9 	.word	0x08010fd9
 8010f24:	08010fb1 	.word	0x08010fb1
 8010f28:	08010fd9 	.word	0x08010fd9
 8010f2c:	08010fd9 	.word	0x08010fd9
 8010f30:	08010fd9 	.word	0x08010fd9
 8010f34:	08010fd9 	.word	0x08010fd9
 8010f38:	08010fd9 	.word	0x08010fd9
 8010f3c:	08010fd9 	.word	0x08010fd9
 8010f40:	08010fd9 	.word	0x08010fd9
 8010f44:	08010fb9 	.word	0x08010fb9
 8010f48:	08010fd9 	.word	0x08010fd9
 8010f4c:	08010fd9 	.word	0x08010fd9
 8010f50:	08010fd9 	.word	0x08010fd9
 8010f54:	08010fd9 	.word	0x08010fd9
 8010f58:	08010fd9 	.word	0x08010fd9
 8010f5c:	08010fd9 	.word	0x08010fd9
 8010f60:	08010fd9 	.word	0x08010fd9
 8010f64:	08010fc1 	.word	0x08010fc1
 8010f68:	08010fd9 	.word	0x08010fd9
 8010f6c:	08010fd9 	.word	0x08010fd9
 8010f70:	08010fd9 	.word	0x08010fd9
 8010f74:	08010fd9 	.word	0x08010fd9
 8010f78:	08010fd9 	.word	0x08010fd9
 8010f7c:	08010fd9 	.word	0x08010fd9
 8010f80:	08010fd9 	.word	0x08010fd9
 8010f84:	08010fc9 	.word	0x08010fc9
 8010f88:	08010fd9 	.word	0x08010fd9
 8010f8c:	08010fd9 	.word	0x08010fd9
 8010f90:	08010fd9 	.word	0x08010fd9
 8010f94:	08010fd9 	.word	0x08010fd9
 8010f98:	08010fd9 	.word	0x08010fd9
 8010f9c:	08010fd9 	.word	0x08010fd9
 8010fa0:	08010fd9 	.word	0x08010fd9
 8010fa4:	08010fd1 	.word	0x08010fd1
 8010fa8:	2301      	movs	r3, #1
 8010faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fae:	e050      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010fb0:	2304      	movs	r3, #4
 8010fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fb6:	e04c      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010fb8:	2308      	movs	r3, #8
 8010fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fbe:	e048      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010fc0:	2310      	movs	r3, #16
 8010fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fc6:	e044      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010fc8:	2320      	movs	r3, #32
 8010fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fce:	e040      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010fd0:	2340      	movs	r3, #64	; 0x40
 8010fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fd6:	e03c      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010fd8:	2380      	movs	r3, #128	; 0x80
 8010fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fde:	e038      	b.n	8011052 <UART_SetConfig+0x7ae>
 8010fe0:	697b      	ldr	r3, [r7, #20]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	4a71      	ldr	r2, [pc, #452]	; (80111ac <UART_SetConfig+0x908>)
 8010fe6:	4293      	cmp	r3, r2
 8010fe8:	d130      	bne.n	801104c <UART_SetConfig+0x7a8>
 8010fea:	4b6f      	ldr	r3, [pc, #444]	; (80111a8 <UART_SetConfig+0x904>)
 8010fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fee:	f003 0307 	and.w	r3, r3, #7
 8010ff2:	2b05      	cmp	r3, #5
 8010ff4:	d826      	bhi.n	8011044 <UART_SetConfig+0x7a0>
 8010ff6:	a201      	add	r2, pc, #4	; (adr r2, 8010ffc <UART_SetConfig+0x758>)
 8010ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ffc:	08011015 	.word	0x08011015
 8011000:	0801101d 	.word	0x0801101d
 8011004:	08011025 	.word	0x08011025
 8011008:	0801102d 	.word	0x0801102d
 801100c:	08011035 	.word	0x08011035
 8011010:	0801103d 	.word	0x0801103d
 8011014:	2302      	movs	r3, #2
 8011016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801101a:	e01a      	b.n	8011052 <UART_SetConfig+0x7ae>
 801101c:	2304      	movs	r3, #4
 801101e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011022:	e016      	b.n	8011052 <UART_SetConfig+0x7ae>
 8011024:	2308      	movs	r3, #8
 8011026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801102a:	e012      	b.n	8011052 <UART_SetConfig+0x7ae>
 801102c:	2310      	movs	r3, #16
 801102e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011032:	e00e      	b.n	8011052 <UART_SetConfig+0x7ae>
 8011034:	2320      	movs	r3, #32
 8011036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801103a:	e00a      	b.n	8011052 <UART_SetConfig+0x7ae>
 801103c:	2340      	movs	r3, #64	; 0x40
 801103e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011042:	e006      	b.n	8011052 <UART_SetConfig+0x7ae>
 8011044:	2380      	movs	r3, #128	; 0x80
 8011046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801104a:	e002      	b.n	8011052 <UART_SetConfig+0x7ae>
 801104c:	2380      	movs	r3, #128	; 0x80
 801104e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011052:	697b      	ldr	r3, [r7, #20]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	4a55      	ldr	r2, [pc, #340]	; (80111ac <UART_SetConfig+0x908>)
 8011058:	4293      	cmp	r3, r2
 801105a:	f040 80f8 	bne.w	801124e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801105e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011062:	2b20      	cmp	r3, #32
 8011064:	dc46      	bgt.n	80110f4 <UART_SetConfig+0x850>
 8011066:	2b02      	cmp	r3, #2
 8011068:	db75      	blt.n	8011156 <UART_SetConfig+0x8b2>
 801106a:	3b02      	subs	r3, #2
 801106c:	2b1e      	cmp	r3, #30
 801106e:	d872      	bhi.n	8011156 <UART_SetConfig+0x8b2>
 8011070:	a201      	add	r2, pc, #4	; (adr r2, 8011078 <UART_SetConfig+0x7d4>)
 8011072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011076:	bf00      	nop
 8011078:	080110fb 	.word	0x080110fb
 801107c:	08011157 	.word	0x08011157
 8011080:	08011103 	.word	0x08011103
 8011084:	08011157 	.word	0x08011157
 8011088:	08011157 	.word	0x08011157
 801108c:	08011157 	.word	0x08011157
 8011090:	08011113 	.word	0x08011113
 8011094:	08011157 	.word	0x08011157
 8011098:	08011157 	.word	0x08011157
 801109c:	08011157 	.word	0x08011157
 80110a0:	08011157 	.word	0x08011157
 80110a4:	08011157 	.word	0x08011157
 80110a8:	08011157 	.word	0x08011157
 80110ac:	08011157 	.word	0x08011157
 80110b0:	08011123 	.word	0x08011123
 80110b4:	08011157 	.word	0x08011157
 80110b8:	08011157 	.word	0x08011157
 80110bc:	08011157 	.word	0x08011157
 80110c0:	08011157 	.word	0x08011157
 80110c4:	08011157 	.word	0x08011157
 80110c8:	08011157 	.word	0x08011157
 80110cc:	08011157 	.word	0x08011157
 80110d0:	08011157 	.word	0x08011157
 80110d4:	08011157 	.word	0x08011157
 80110d8:	08011157 	.word	0x08011157
 80110dc:	08011157 	.word	0x08011157
 80110e0:	08011157 	.word	0x08011157
 80110e4:	08011157 	.word	0x08011157
 80110e8:	08011157 	.word	0x08011157
 80110ec:	08011157 	.word	0x08011157
 80110f0:	08011149 	.word	0x08011149
 80110f4:	2b40      	cmp	r3, #64	; 0x40
 80110f6:	d02a      	beq.n	801114e <UART_SetConfig+0x8aa>
 80110f8:	e02d      	b.n	8011156 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80110fa:	f7fb f8c3 	bl	800c284 <HAL_RCCEx_GetD3PCLK1Freq>
 80110fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011100:	e02f      	b.n	8011162 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011106:	4618      	mov	r0, r3
 8011108:	f7fb f8d2 	bl	800c2b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801110c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801110e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011110:	e027      	b.n	8011162 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011112:	f107 0318 	add.w	r3, r7, #24
 8011116:	4618      	mov	r0, r3
 8011118:	f7fb fa1e 	bl	800c558 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801111c:	69fb      	ldr	r3, [r7, #28]
 801111e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011120:	e01f      	b.n	8011162 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011122:	4b21      	ldr	r3, [pc, #132]	; (80111a8 <UART_SetConfig+0x904>)
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	f003 0320 	and.w	r3, r3, #32
 801112a:	2b00      	cmp	r3, #0
 801112c:	d009      	beq.n	8011142 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801112e:	4b1e      	ldr	r3, [pc, #120]	; (80111a8 <UART_SetConfig+0x904>)
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	08db      	lsrs	r3, r3, #3
 8011134:	f003 0303 	and.w	r3, r3, #3
 8011138:	4a1d      	ldr	r2, [pc, #116]	; (80111b0 <UART_SetConfig+0x90c>)
 801113a:	fa22 f303 	lsr.w	r3, r2, r3
 801113e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011140:	e00f      	b.n	8011162 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011142:	4b1b      	ldr	r3, [pc, #108]	; (80111b0 <UART_SetConfig+0x90c>)
 8011144:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011146:	e00c      	b.n	8011162 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011148:	4b1a      	ldr	r3, [pc, #104]	; (80111b4 <UART_SetConfig+0x910>)
 801114a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801114c:	e009      	b.n	8011162 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801114e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011152:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011154:	e005      	b.n	8011162 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011156:	2300      	movs	r3, #0
 8011158:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801115a:	2301      	movs	r3, #1
 801115c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011160:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011164:	2b00      	cmp	r3, #0
 8011166:	f000 81ee 	beq.w	8011546 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801116a:	697b      	ldr	r3, [r7, #20]
 801116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801116e:	4a12      	ldr	r2, [pc, #72]	; (80111b8 <UART_SetConfig+0x914>)
 8011170:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011174:	461a      	mov	r2, r3
 8011176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011178:	fbb3 f3f2 	udiv	r3, r3, r2
 801117c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801117e:	697b      	ldr	r3, [r7, #20]
 8011180:	685a      	ldr	r2, [r3, #4]
 8011182:	4613      	mov	r3, r2
 8011184:	005b      	lsls	r3, r3, #1
 8011186:	4413      	add	r3, r2
 8011188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801118a:	429a      	cmp	r2, r3
 801118c:	d305      	bcc.n	801119a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801118e:	697b      	ldr	r3, [r7, #20]
 8011190:	685b      	ldr	r3, [r3, #4]
 8011192:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011196:	429a      	cmp	r2, r3
 8011198:	d910      	bls.n	80111bc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 801119a:	2301      	movs	r3, #1
 801119c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80111a0:	e1d1      	b.n	8011546 <UART_SetConfig+0xca2>
 80111a2:	bf00      	nop
 80111a4:	40011c00 	.word	0x40011c00
 80111a8:	58024400 	.word	0x58024400
 80111ac:	58000c00 	.word	0x58000c00
 80111b0:	03d09000 	.word	0x03d09000
 80111b4:	003d0900 	.word	0x003d0900
 80111b8:	080181dc 	.word	0x080181dc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80111bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111be:	2200      	movs	r2, #0
 80111c0:	60bb      	str	r3, [r7, #8]
 80111c2:	60fa      	str	r2, [r7, #12]
 80111c4:	697b      	ldr	r3, [r7, #20]
 80111c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111c8:	4ac0      	ldr	r2, [pc, #768]	; (80114cc <UART_SetConfig+0xc28>)
 80111ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80111ce:	b29b      	uxth	r3, r3
 80111d0:	2200      	movs	r2, #0
 80111d2:	603b      	str	r3, [r7, #0]
 80111d4:	607a      	str	r2, [r7, #4]
 80111d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80111da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80111de:	f7ef f8ff 	bl	80003e0 <__aeabi_uldivmod>
 80111e2:	4602      	mov	r2, r0
 80111e4:	460b      	mov	r3, r1
 80111e6:	4610      	mov	r0, r2
 80111e8:	4619      	mov	r1, r3
 80111ea:	f04f 0200 	mov.w	r2, #0
 80111ee:	f04f 0300 	mov.w	r3, #0
 80111f2:	020b      	lsls	r3, r1, #8
 80111f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80111f8:	0202      	lsls	r2, r0, #8
 80111fa:	6979      	ldr	r1, [r7, #20]
 80111fc:	6849      	ldr	r1, [r1, #4]
 80111fe:	0849      	lsrs	r1, r1, #1
 8011200:	2000      	movs	r0, #0
 8011202:	460c      	mov	r4, r1
 8011204:	4605      	mov	r5, r0
 8011206:	eb12 0804 	adds.w	r8, r2, r4
 801120a:	eb43 0905 	adc.w	r9, r3, r5
 801120e:	697b      	ldr	r3, [r7, #20]
 8011210:	685b      	ldr	r3, [r3, #4]
 8011212:	2200      	movs	r2, #0
 8011214:	469a      	mov	sl, r3
 8011216:	4693      	mov	fp, r2
 8011218:	4652      	mov	r2, sl
 801121a:	465b      	mov	r3, fp
 801121c:	4640      	mov	r0, r8
 801121e:	4649      	mov	r1, r9
 8011220:	f7ef f8de 	bl	80003e0 <__aeabi_uldivmod>
 8011224:	4602      	mov	r2, r0
 8011226:	460b      	mov	r3, r1
 8011228:	4613      	mov	r3, r2
 801122a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801122c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801122e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011232:	d308      	bcc.n	8011246 <UART_SetConfig+0x9a2>
 8011234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801123a:	d204      	bcs.n	8011246 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 801123c:	697b      	ldr	r3, [r7, #20]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011242:	60da      	str	r2, [r3, #12]
 8011244:	e17f      	b.n	8011546 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8011246:	2301      	movs	r3, #1
 8011248:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801124c:	e17b      	b.n	8011546 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801124e:	697b      	ldr	r3, [r7, #20]
 8011250:	69db      	ldr	r3, [r3, #28]
 8011252:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011256:	f040 80bd 	bne.w	80113d4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801125a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801125e:	2b20      	cmp	r3, #32
 8011260:	dc48      	bgt.n	80112f4 <UART_SetConfig+0xa50>
 8011262:	2b00      	cmp	r3, #0
 8011264:	db7b      	blt.n	801135e <UART_SetConfig+0xaba>
 8011266:	2b20      	cmp	r3, #32
 8011268:	d879      	bhi.n	801135e <UART_SetConfig+0xaba>
 801126a:	a201      	add	r2, pc, #4	; (adr r2, 8011270 <UART_SetConfig+0x9cc>)
 801126c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011270:	080112fb 	.word	0x080112fb
 8011274:	08011303 	.word	0x08011303
 8011278:	0801135f 	.word	0x0801135f
 801127c:	0801135f 	.word	0x0801135f
 8011280:	0801130b 	.word	0x0801130b
 8011284:	0801135f 	.word	0x0801135f
 8011288:	0801135f 	.word	0x0801135f
 801128c:	0801135f 	.word	0x0801135f
 8011290:	0801131b 	.word	0x0801131b
 8011294:	0801135f 	.word	0x0801135f
 8011298:	0801135f 	.word	0x0801135f
 801129c:	0801135f 	.word	0x0801135f
 80112a0:	0801135f 	.word	0x0801135f
 80112a4:	0801135f 	.word	0x0801135f
 80112a8:	0801135f 	.word	0x0801135f
 80112ac:	0801135f 	.word	0x0801135f
 80112b0:	0801132b 	.word	0x0801132b
 80112b4:	0801135f 	.word	0x0801135f
 80112b8:	0801135f 	.word	0x0801135f
 80112bc:	0801135f 	.word	0x0801135f
 80112c0:	0801135f 	.word	0x0801135f
 80112c4:	0801135f 	.word	0x0801135f
 80112c8:	0801135f 	.word	0x0801135f
 80112cc:	0801135f 	.word	0x0801135f
 80112d0:	0801135f 	.word	0x0801135f
 80112d4:	0801135f 	.word	0x0801135f
 80112d8:	0801135f 	.word	0x0801135f
 80112dc:	0801135f 	.word	0x0801135f
 80112e0:	0801135f 	.word	0x0801135f
 80112e4:	0801135f 	.word	0x0801135f
 80112e8:	0801135f 	.word	0x0801135f
 80112ec:	0801135f 	.word	0x0801135f
 80112f0:	08011351 	.word	0x08011351
 80112f4:	2b40      	cmp	r3, #64	; 0x40
 80112f6:	d02e      	beq.n	8011356 <UART_SetConfig+0xab2>
 80112f8:	e031      	b.n	801135e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80112fa:	f7f9 f925 	bl	800a548 <HAL_RCC_GetPCLK1Freq>
 80112fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011300:	e033      	b.n	801136a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011302:	f7f9 f937 	bl	800a574 <HAL_RCC_GetPCLK2Freq>
 8011306:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011308:	e02f      	b.n	801136a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801130a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801130e:	4618      	mov	r0, r3
 8011310:	f7fa ffce 	bl	800c2b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011316:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011318:	e027      	b.n	801136a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801131a:	f107 0318 	add.w	r3, r7, #24
 801131e:	4618      	mov	r0, r3
 8011320:	f7fb f91a 	bl	800c558 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011324:	69fb      	ldr	r3, [r7, #28]
 8011326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011328:	e01f      	b.n	801136a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801132a:	4b69      	ldr	r3, [pc, #420]	; (80114d0 <UART_SetConfig+0xc2c>)
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	f003 0320 	and.w	r3, r3, #32
 8011332:	2b00      	cmp	r3, #0
 8011334:	d009      	beq.n	801134a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011336:	4b66      	ldr	r3, [pc, #408]	; (80114d0 <UART_SetConfig+0xc2c>)
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	08db      	lsrs	r3, r3, #3
 801133c:	f003 0303 	and.w	r3, r3, #3
 8011340:	4a64      	ldr	r2, [pc, #400]	; (80114d4 <UART_SetConfig+0xc30>)
 8011342:	fa22 f303 	lsr.w	r3, r2, r3
 8011346:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011348:	e00f      	b.n	801136a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801134a:	4b62      	ldr	r3, [pc, #392]	; (80114d4 <UART_SetConfig+0xc30>)
 801134c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801134e:	e00c      	b.n	801136a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011350:	4b61      	ldr	r3, [pc, #388]	; (80114d8 <UART_SetConfig+0xc34>)
 8011352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011354:	e009      	b.n	801136a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801135a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801135c:	e005      	b.n	801136a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801135e:	2300      	movs	r3, #0
 8011360:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011362:	2301      	movs	r3, #1
 8011364:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011368:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801136a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801136c:	2b00      	cmp	r3, #0
 801136e:	f000 80ea 	beq.w	8011546 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011372:	697b      	ldr	r3, [r7, #20]
 8011374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011376:	4a55      	ldr	r2, [pc, #340]	; (80114cc <UART_SetConfig+0xc28>)
 8011378:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801137c:	461a      	mov	r2, r3
 801137e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011380:	fbb3 f3f2 	udiv	r3, r3, r2
 8011384:	005a      	lsls	r2, r3, #1
 8011386:	697b      	ldr	r3, [r7, #20]
 8011388:	685b      	ldr	r3, [r3, #4]
 801138a:	085b      	lsrs	r3, r3, #1
 801138c:	441a      	add	r2, r3
 801138e:	697b      	ldr	r3, [r7, #20]
 8011390:	685b      	ldr	r3, [r3, #4]
 8011392:	fbb2 f3f3 	udiv	r3, r2, r3
 8011396:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801139a:	2b0f      	cmp	r3, #15
 801139c:	d916      	bls.n	80113cc <UART_SetConfig+0xb28>
 801139e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80113a4:	d212      	bcs.n	80113cc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80113a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113a8:	b29b      	uxth	r3, r3
 80113aa:	f023 030f 	bic.w	r3, r3, #15
 80113ae:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80113b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113b2:	085b      	lsrs	r3, r3, #1
 80113b4:	b29b      	uxth	r3, r3
 80113b6:	f003 0307 	and.w	r3, r3, #7
 80113ba:	b29a      	uxth	r2, r3
 80113bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80113be:	4313      	orrs	r3, r2
 80113c0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80113c2:	697b      	ldr	r3, [r7, #20]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80113c8:	60da      	str	r2, [r3, #12]
 80113ca:	e0bc      	b.n	8011546 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80113cc:	2301      	movs	r3, #1
 80113ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80113d2:	e0b8      	b.n	8011546 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80113d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80113d8:	2b20      	cmp	r3, #32
 80113da:	dc4b      	bgt.n	8011474 <UART_SetConfig+0xbd0>
 80113dc:	2b00      	cmp	r3, #0
 80113de:	f2c0 8087 	blt.w	80114f0 <UART_SetConfig+0xc4c>
 80113e2:	2b20      	cmp	r3, #32
 80113e4:	f200 8084 	bhi.w	80114f0 <UART_SetConfig+0xc4c>
 80113e8:	a201      	add	r2, pc, #4	; (adr r2, 80113f0 <UART_SetConfig+0xb4c>)
 80113ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113ee:	bf00      	nop
 80113f0:	0801147b 	.word	0x0801147b
 80113f4:	08011483 	.word	0x08011483
 80113f8:	080114f1 	.word	0x080114f1
 80113fc:	080114f1 	.word	0x080114f1
 8011400:	0801148b 	.word	0x0801148b
 8011404:	080114f1 	.word	0x080114f1
 8011408:	080114f1 	.word	0x080114f1
 801140c:	080114f1 	.word	0x080114f1
 8011410:	0801149b 	.word	0x0801149b
 8011414:	080114f1 	.word	0x080114f1
 8011418:	080114f1 	.word	0x080114f1
 801141c:	080114f1 	.word	0x080114f1
 8011420:	080114f1 	.word	0x080114f1
 8011424:	080114f1 	.word	0x080114f1
 8011428:	080114f1 	.word	0x080114f1
 801142c:	080114f1 	.word	0x080114f1
 8011430:	080114ab 	.word	0x080114ab
 8011434:	080114f1 	.word	0x080114f1
 8011438:	080114f1 	.word	0x080114f1
 801143c:	080114f1 	.word	0x080114f1
 8011440:	080114f1 	.word	0x080114f1
 8011444:	080114f1 	.word	0x080114f1
 8011448:	080114f1 	.word	0x080114f1
 801144c:	080114f1 	.word	0x080114f1
 8011450:	080114f1 	.word	0x080114f1
 8011454:	080114f1 	.word	0x080114f1
 8011458:	080114f1 	.word	0x080114f1
 801145c:	080114f1 	.word	0x080114f1
 8011460:	080114f1 	.word	0x080114f1
 8011464:	080114f1 	.word	0x080114f1
 8011468:	080114f1 	.word	0x080114f1
 801146c:	080114f1 	.word	0x080114f1
 8011470:	080114e3 	.word	0x080114e3
 8011474:	2b40      	cmp	r3, #64	; 0x40
 8011476:	d037      	beq.n	80114e8 <UART_SetConfig+0xc44>
 8011478:	e03a      	b.n	80114f0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801147a:	f7f9 f865 	bl	800a548 <HAL_RCC_GetPCLK1Freq>
 801147e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011480:	e03c      	b.n	80114fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011482:	f7f9 f877 	bl	800a574 <HAL_RCC_GetPCLK2Freq>
 8011486:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011488:	e038      	b.n	80114fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801148a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801148e:	4618      	mov	r0, r3
 8011490:	f7fa ff0e 	bl	800c2b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011496:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011498:	e030      	b.n	80114fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801149a:	f107 0318 	add.w	r3, r7, #24
 801149e:	4618      	mov	r0, r3
 80114a0:	f7fb f85a 	bl	800c558 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80114a4:	69fb      	ldr	r3, [r7, #28]
 80114a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114a8:	e028      	b.n	80114fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80114aa:	4b09      	ldr	r3, [pc, #36]	; (80114d0 <UART_SetConfig+0xc2c>)
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	f003 0320 	and.w	r3, r3, #32
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d012      	beq.n	80114dc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80114b6:	4b06      	ldr	r3, [pc, #24]	; (80114d0 <UART_SetConfig+0xc2c>)
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	08db      	lsrs	r3, r3, #3
 80114bc:	f003 0303 	and.w	r3, r3, #3
 80114c0:	4a04      	ldr	r2, [pc, #16]	; (80114d4 <UART_SetConfig+0xc30>)
 80114c2:	fa22 f303 	lsr.w	r3, r2, r3
 80114c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80114c8:	e018      	b.n	80114fc <UART_SetConfig+0xc58>
 80114ca:	bf00      	nop
 80114cc:	080181dc 	.word	0x080181dc
 80114d0:	58024400 	.word	0x58024400
 80114d4:	03d09000 	.word	0x03d09000
 80114d8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80114dc:	4b24      	ldr	r3, [pc, #144]	; (8011570 <UART_SetConfig+0xccc>)
 80114de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114e0:	e00c      	b.n	80114fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80114e2:	4b24      	ldr	r3, [pc, #144]	; (8011574 <UART_SetConfig+0xcd0>)
 80114e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114e6:	e009      	b.n	80114fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80114e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80114ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114ee:	e005      	b.n	80114fc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80114f0:	2300      	movs	r3, #0
 80114f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80114f4:	2301      	movs	r3, #1
 80114f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80114fa:	bf00      	nop
    }

    if (pclk != 0U)
 80114fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d021      	beq.n	8011546 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011502:	697b      	ldr	r3, [r7, #20]
 8011504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011506:	4a1c      	ldr	r2, [pc, #112]	; (8011578 <UART_SetConfig+0xcd4>)
 8011508:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801150c:	461a      	mov	r2, r3
 801150e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011510:	fbb3 f2f2 	udiv	r2, r3, r2
 8011514:	697b      	ldr	r3, [r7, #20]
 8011516:	685b      	ldr	r3, [r3, #4]
 8011518:	085b      	lsrs	r3, r3, #1
 801151a:	441a      	add	r2, r3
 801151c:	697b      	ldr	r3, [r7, #20]
 801151e:	685b      	ldr	r3, [r3, #4]
 8011520:	fbb2 f3f3 	udiv	r3, r2, r3
 8011524:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011528:	2b0f      	cmp	r3, #15
 801152a:	d909      	bls.n	8011540 <UART_SetConfig+0xc9c>
 801152c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801152e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011532:	d205      	bcs.n	8011540 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011536:	b29a      	uxth	r2, r3
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	60da      	str	r2, [r3, #12]
 801153e:	e002      	b.n	8011546 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011540:	2301      	movs	r3, #1
 8011542:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011546:	697b      	ldr	r3, [r7, #20]
 8011548:	2201      	movs	r2, #1
 801154a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801154e:	697b      	ldr	r3, [r7, #20]
 8011550:	2201      	movs	r2, #1
 8011552:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011556:	697b      	ldr	r3, [r7, #20]
 8011558:	2200      	movs	r2, #0
 801155a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801155c:	697b      	ldr	r3, [r7, #20]
 801155e:	2200      	movs	r2, #0
 8011560:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011562:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011566:	4618      	mov	r0, r3
 8011568:	3748      	adds	r7, #72	; 0x48
 801156a:	46bd      	mov	sp, r7
 801156c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011570:	03d09000 	.word	0x03d09000
 8011574:	003d0900 	.word	0x003d0900
 8011578:	080181dc 	.word	0x080181dc

0801157c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801157c:	b480      	push	{r7}
 801157e:	b083      	sub	sp, #12
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011588:	f003 0301 	and.w	r3, r3, #1
 801158c:	2b00      	cmp	r3, #0
 801158e:	d00a      	beq.n	80115a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	685b      	ldr	r3, [r3, #4]
 8011596:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	430a      	orrs	r2, r1
 80115a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115aa:	f003 0302 	and.w	r3, r3, #2
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d00a      	beq.n	80115c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	685b      	ldr	r3, [r3, #4]
 80115b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	430a      	orrs	r2, r1
 80115c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115cc:	f003 0304 	and.w	r3, r3, #4
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d00a      	beq.n	80115ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	685b      	ldr	r3, [r3, #4]
 80115da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	430a      	orrs	r2, r1
 80115e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115ee:	f003 0308 	and.w	r3, r3, #8
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d00a      	beq.n	801160c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	685b      	ldr	r3, [r3, #4]
 80115fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	430a      	orrs	r2, r1
 801160a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011610:	f003 0310 	and.w	r3, r3, #16
 8011614:	2b00      	cmp	r3, #0
 8011616:	d00a      	beq.n	801162e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	689b      	ldr	r3, [r3, #8]
 801161e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	430a      	orrs	r2, r1
 801162c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011632:	f003 0320 	and.w	r3, r3, #32
 8011636:	2b00      	cmp	r3, #0
 8011638:	d00a      	beq.n	8011650 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	689b      	ldr	r3, [r3, #8]
 8011640:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	430a      	orrs	r2, r1
 801164e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011658:	2b00      	cmp	r3, #0
 801165a:	d01a      	beq.n	8011692 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	685b      	ldr	r3, [r3, #4]
 8011662:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	430a      	orrs	r2, r1
 8011670:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011676:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801167a:	d10a      	bne.n	8011692 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	685b      	ldr	r3, [r3, #4]
 8011682:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	430a      	orrs	r2, r1
 8011690:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801169a:	2b00      	cmp	r3, #0
 801169c:	d00a      	beq.n	80116b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	685b      	ldr	r3, [r3, #4]
 80116a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	430a      	orrs	r2, r1
 80116b2:	605a      	str	r2, [r3, #4]
  }
}
 80116b4:	bf00      	nop
 80116b6:	370c      	adds	r7, #12
 80116b8:	46bd      	mov	sp, r7
 80116ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116be:	4770      	bx	lr

080116c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b098      	sub	sp, #96	; 0x60
 80116c4:	af02      	add	r7, sp, #8
 80116c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	2200      	movs	r2, #0
 80116cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80116d0:	f7f2 f892 	bl	80037f8 <HAL_GetTick>
 80116d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	f003 0308 	and.w	r3, r3, #8
 80116e0:	2b08      	cmp	r3, #8
 80116e2:	d12f      	bne.n	8011744 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80116e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80116e8:	9300      	str	r3, [sp, #0]
 80116ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116ec:	2200      	movs	r2, #0
 80116ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80116f2:	6878      	ldr	r0, [r7, #4]
 80116f4:	f000 f88e 	bl	8011814 <UART_WaitOnFlagUntilTimeout>
 80116f8:	4603      	mov	r3, r0
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d022      	beq.n	8011744 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011706:	e853 3f00 	ldrex	r3, [r3]
 801170a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801170c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801170e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011712:	653b      	str	r3, [r7, #80]	; 0x50
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	461a      	mov	r2, r3
 801171a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801171c:	647b      	str	r3, [r7, #68]	; 0x44
 801171e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011720:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011722:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011724:	e841 2300 	strex	r3, r2, [r1]
 8011728:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801172a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801172c:	2b00      	cmp	r3, #0
 801172e:	d1e6      	bne.n	80116fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	2220      	movs	r2, #32
 8011734:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	2200      	movs	r2, #0
 801173c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011740:	2303      	movs	r3, #3
 8011742:	e063      	b.n	801180c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	f003 0304 	and.w	r3, r3, #4
 801174e:	2b04      	cmp	r3, #4
 8011750:	d149      	bne.n	80117e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011752:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011756:	9300      	str	r3, [sp, #0]
 8011758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801175a:	2200      	movs	r2, #0
 801175c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011760:	6878      	ldr	r0, [r7, #4]
 8011762:	f000 f857 	bl	8011814 <UART_WaitOnFlagUntilTimeout>
 8011766:	4603      	mov	r3, r0
 8011768:	2b00      	cmp	r3, #0
 801176a:	d03c      	beq.n	80117e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011774:	e853 3f00 	ldrex	r3, [r3]
 8011778:	623b      	str	r3, [r7, #32]
   return(result);
 801177a:	6a3b      	ldr	r3, [r7, #32]
 801177c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011780:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	461a      	mov	r2, r3
 8011788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801178a:	633b      	str	r3, [r7, #48]	; 0x30
 801178c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801178e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011792:	e841 2300 	strex	r3, r2, [r1]
 8011796:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801179a:	2b00      	cmp	r3, #0
 801179c:	d1e6      	bne.n	801176c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	3308      	adds	r3, #8
 80117a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117a6:	693b      	ldr	r3, [r7, #16]
 80117a8:	e853 3f00 	ldrex	r3, [r3]
 80117ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	f023 0301 	bic.w	r3, r3, #1
 80117b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	3308      	adds	r3, #8
 80117bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80117be:	61fa      	str	r2, [r7, #28]
 80117c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117c2:	69b9      	ldr	r1, [r7, #24]
 80117c4:	69fa      	ldr	r2, [r7, #28]
 80117c6:	e841 2300 	strex	r3, r2, [r1]
 80117ca:	617b      	str	r3, [r7, #20]
   return(result);
 80117cc:	697b      	ldr	r3, [r7, #20]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d1e5      	bne.n	801179e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2220      	movs	r2, #32
 80117d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	2200      	movs	r2, #0
 80117de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80117e2:	2303      	movs	r3, #3
 80117e4:	e012      	b.n	801180c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	2220      	movs	r2, #32
 80117ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	2220      	movs	r2, #32
 80117f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	2200      	movs	r2, #0
 80117fa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	2200      	movs	r2, #0
 8011800:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	2200      	movs	r2, #0
 8011806:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801180a:	2300      	movs	r3, #0
}
 801180c:	4618      	mov	r0, r3
 801180e:	3758      	adds	r7, #88	; 0x58
 8011810:	46bd      	mov	sp, r7
 8011812:	bd80      	pop	{r7, pc}

08011814 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b084      	sub	sp, #16
 8011818:	af00      	add	r7, sp, #0
 801181a:	60f8      	str	r0, [r7, #12]
 801181c:	60b9      	str	r1, [r7, #8]
 801181e:	603b      	str	r3, [r7, #0]
 8011820:	4613      	mov	r3, r2
 8011822:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011824:	e049      	b.n	80118ba <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011826:	69bb      	ldr	r3, [r7, #24]
 8011828:	f1b3 3fff 	cmp.w	r3, #4294967295
 801182c:	d045      	beq.n	80118ba <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801182e:	f7f1 ffe3 	bl	80037f8 <HAL_GetTick>
 8011832:	4602      	mov	r2, r0
 8011834:	683b      	ldr	r3, [r7, #0]
 8011836:	1ad3      	subs	r3, r2, r3
 8011838:	69ba      	ldr	r2, [r7, #24]
 801183a:	429a      	cmp	r2, r3
 801183c:	d302      	bcc.n	8011844 <UART_WaitOnFlagUntilTimeout+0x30>
 801183e:	69bb      	ldr	r3, [r7, #24]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d101      	bne.n	8011848 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011844:	2303      	movs	r3, #3
 8011846:	e048      	b.n	80118da <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	f003 0304 	and.w	r3, r3, #4
 8011852:	2b00      	cmp	r3, #0
 8011854:	d031      	beq.n	80118ba <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	69db      	ldr	r3, [r3, #28]
 801185c:	f003 0308 	and.w	r3, r3, #8
 8011860:	2b08      	cmp	r3, #8
 8011862:	d110      	bne.n	8011886 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	2208      	movs	r2, #8
 801186a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801186c:	68f8      	ldr	r0, [r7, #12]
 801186e:	f000 f839 	bl	80118e4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	2208      	movs	r2, #8
 8011876:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	2200      	movs	r2, #0
 801187e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8011882:	2301      	movs	r3, #1
 8011884:	e029      	b.n	80118da <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	69db      	ldr	r3, [r3, #28]
 801188c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011890:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011894:	d111      	bne.n	80118ba <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801189e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80118a0:	68f8      	ldr	r0, [r7, #12]
 80118a2:	f000 f81f 	bl	80118e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	2220      	movs	r2, #32
 80118aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	2200      	movs	r2, #0
 80118b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80118b6:	2303      	movs	r3, #3
 80118b8:	e00f      	b.n	80118da <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	69da      	ldr	r2, [r3, #28]
 80118c0:	68bb      	ldr	r3, [r7, #8]
 80118c2:	4013      	ands	r3, r2
 80118c4:	68ba      	ldr	r2, [r7, #8]
 80118c6:	429a      	cmp	r2, r3
 80118c8:	bf0c      	ite	eq
 80118ca:	2301      	moveq	r3, #1
 80118cc:	2300      	movne	r3, #0
 80118ce:	b2db      	uxtb	r3, r3
 80118d0:	461a      	mov	r2, r3
 80118d2:	79fb      	ldrb	r3, [r7, #7]
 80118d4:	429a      	cmp	r2, r3
 80118d6:	d0a6      	beq.n	8011826 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80118d8:	2300      	movs	r3, #0
}
 80118da:	4618      	mov	r0, r3
 80118dc:	3710      	adds	r7, #16
 80118de:	46bd      	mov	sp, r7
 80118e0:	bd80      	pop	{r7, pc}
	...

080118e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80118e4:	b480      	push	{r7}
 80118e6:	b095      	sub	sp, #84	; 0x54
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118f4:	e853 3f00 	ldrex	r3, [r3]
 80118f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80118fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011900:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	461a      	mov	r2, r3
 8011908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801190a:	643b      	str	r3, [r7, #64]	; 0x40
 801190c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801190e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011910:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011912:	e841 2300 	strex	r3, r2, [r1]
 8011916:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801191a:	2b00      	cmp	r3, #0
 801191c:	d1e6      	bne.n	80118ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	3308      	adds	r3, #8
 8011924:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011926:	6a3b      	ldr	r3, [r7, #32]
 8011928:	e853 3f00 	ldrex	r3, [r3]
 801192c:	61fb      	str	r3, [r7, #28]
   return(result);
 801192e:	69fa      	ldr	r2, [r7, #28]
 8011930:	4b1e      	ldr	r3, [pc, #120]	; (80119ac <UART_EndRxTransfer+0xc8>)
 8011932:	4013      	ands	r3, r2
 8011934:	64bb      	str	r3, [r7, #72]	; 0x48
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	3308      	adds	r3, #8
 801193c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801193e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011940:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011942:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011946:	e841 2300 	strex	r3, r2, [r1]
 801194a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801194e:	2b00      	cmp	r3, #0
 8011950:	d1e5      	bne.n	801191e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011956:	2b01      	cmp	r3, #1
 8011958:	d118      	bne.n	801198c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	e853 3f00 	ldrex	r3, [r3]
 8011966:	60bb      	str	r3, [r7, #8]
   return(result);
 8011968:	68bb      	ldr	r3, [r7, #8]
 801196a:	f023 0310 	bic.w	r3, r3, #16
 801196e:	647b      	str	r3, [r7, #68]	; 0x44
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	461a      	mov	r2, r3
 8011976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011978:	61bb      	str	r3, [r7, #24]
 801197a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801197c:	6979      	ldr	r1, [r7, #20]
 801197e:	69ba      	ldr	r2, [r7, #24]
 8011980:	e841 2300 	strex	r3, r2, [r1]
 8011984:	613b      	str	r3, [r7, #16]
   return(result);
 8011986:	693b      	ldr	r3, [r7, #16]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d1e6      	bne.n	801195a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	2220      	movs	r2, #32
 8011990:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2200      	movs	r2, #0
 8011998:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	2200      	movs	r2, #0
 801199e:	675a      	str	r2, [r3, #116]	; 0x74
}
 80119a0:	bf00      	nop
 80119a2:	3754      	adds	r7, #84	; 0x54
 80119a4:	46bd      	mov	sp, r7
 80119a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119aa:	4770      	bx	lr
 80119ac:	effffffe 	.word	0xeffffffe

080119b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80119b0:	b480      	push	{r7}
 80119b2:	b085      	sub	sp, #20
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80119be:	2b01      	cmp	r3, #1
 80119c0:	d101      	bne.n	80119c6 <HAL_UARTEx_DisableFifoMode+0x16>
 80119c2:	2302      	movs	r3, #2
 80119c4:	e027      	b.n	8011a16 <HAL_UARTEx_DisableFifoMode+0x66>
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	2201      	movs	r2, #1
 80119ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	2224      	movs	r2, #36	; 0x24
 80119d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	681a      	ldr	r2, [r3, #0]
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	f022 0201 	bic.w	r2, r2, #1
 80119ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80119f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	2200      	movs	r2, #0
 80119fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	68fa      	ldr	r2, [r7, #12]
 8011a02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	2220      	movs	r2, #32
 8011a08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	2200      	movs	r2, #0
 8011a10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011a14:	2300      	movs	r3, #0
}
 8011a16:	4618      	mov	r0, r3
 8011a18:	3714      	adds	r7, #20
 8011a1a:	46bd      	mov	sp, r7
 8011a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a20:	4770      	bx	lr

08011a22 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011a22:	b580      	push	{r7, lr}
 8011a24:	b084      	sub	sp, #16
 8011a26:	af00      	add	r7, sp, #0
 8011a28:	6078      	str	r0, [r7, #4]
 8011a2a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011a32:	2b01      	cmp	r3, #1
 8011a34:	d101      	bne.n	8011a3a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011a36:	2302      	movs	r3, #2
 8011a38:	e02d      	b.n	8011a96 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	2201      	movs	r2, #1
 8011a3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	2224      	movs	r2, #36	; 0x24
 8011a46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	681a      	ldr	r2, [r3, #0]
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	f022 0201 	bic.w	r2, r2, #1
 8011a60:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	689b      	ldr	r3, [r3, #8]
 8011a68:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	683a      	ldr	r2, [r7, #0]
 8011a72:	430a      	orrs	r2, r1
 8011a74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011a76:	6878      	ldr	r0, [r7, #4]
 8011a78:	f000 f850 	bl	8011b1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	68fa      	ldr	r2, [r7, #12]
 8011a82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	2220      	movs	r2, #32
 8011a88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	2200      	movs	r2, #0
 8011a90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011a94:	2300      	movs	r3, #0
}
 8011a96:	4618      	mov	r0, r3
 8011a98:	3710      	adds	r7, #16
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd80      	pop	{r7, pc}

08011a9e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011a9e:	b580      	push	{r7, lr}
 8011aa0:	b084      	sub	sp, #16
 8011aa2:	af00      	add	r7, sp, #0
 8011aa4:	6078      	str	r0, [r7, #4]
 8011aa6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011aae:	2b01      	cmp	r3, #1
 8011ab0:	d101      	bne.n	8011ab6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011ab2:	2302      	movs	r3, #2
 8011ab4:	e02d      	b.n	8011b12 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	2201      	movs	r2, #1
 8011aba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	2224      	movs	r2, #36	; 0x24
 8011ac2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	681a      	ldr	r2, [r3, #0]
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	f022 0201 	bic.w	r2, r2, #1
 8011adc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	689b      	ldr	r3, [r3, #8]
 8011ae4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	683a      	ldr	r2, [r7, #0]
 8011aee:	430a      	orrs	r2, r1
 8011af0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011af2:	6878      	ldr	r0, [r7, #4]
 8011af4:	f000 f812 	bl	8011b1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	68fa      	ldr	r2, [r7, #12]
 8011afe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	2220      	movs	r2, #32
 8011b04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011b10:	2300      	movs	r3, #0
}
 8011b12:	4618      	mov	r0, r3
 8011b14:	3710      	adds	r7, #16
 8011b16:	46bd      	mov	sp, r7
 8011b18:	bd80      	pop	{r7, pc}
	...

08011b1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011b1c:	b480      	push	{r7}
 8011b1e:	b085      	sub	sp, #20
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d108      	bne.n	8011b3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	2201      	movs	r2, #1
 8011b30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	2201      	movs	r2, #1
 8011b38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011b3c:	e031      	b.n	8011ba2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011b3e:	2310      	movs	r3, #16
 8011b40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011b42:	2310      	movs	r3, #16
 8011b44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	689b      	ldr	r3, [r3, #8]
 8011b4c:	0e5b      	lsrs	r3, r3, #25
 8011b4e:	b2db      	uxtb	r3, r3
 8011b50:	f003 0307 	and.w	r3, r3, #7
 8011b54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	689b      	ldr	r3, [r3, #8]
 8011b5c:	0f5b      	lsrs	r3, r3, #29
 8011b5e:	b2db      	uxtb	r3, r3
 8011b60:	f003 0307 	and.w	r3, r3, #7
 8011b64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011b66:	7bbb      	ldrb	r3, [r7, #14]
 8011b68:	7b3a      	ldrb	r2, [r7, #12]
 8011b6a:	4911      	ldr	r1, [pc, #68]	; (8011bb0 <UARTEx_SetNbDataToProcess+0x94>)
 8011b6c:	5c8a      	ldrb	r2, [r1, r2]
 8011b6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011b72:	7b3a      	ldrb	r2, [r7, #12]
 8011b74:	490f      	ldr	r1, [pc, #60]	; (8011bb4 <UARTEx_SetNbDataToProcess+0x98>)
 8011b76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011b78:	fb93 f3f2 	sdiv	r3, r3, r2
 8011b7c:	b29a      	uxth	r2, r3
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011b84:	7bfb      	ldrb	r3, [r7, #15]
 8011b86:	7b7a      	ldrb	r2, [r7, #13]
 8011b88:	4909      	ldr	r1, [pc, #36]	; (8011bb0 <UARTEx_SetNbDataToProcess+0x94>)
 8011b8a:	5c8a      	ldrb	r2, [r1, r2]
 8011b8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011b90:	7b7a      	ldrb	r2, [r7, #13]
 8011b92:	4908      	ldr	r1, [pc, #32]	; (8011bb4 <UARTEx_SetNbDataToProcess+0x98>)
 8011b94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011b96:	fb93 f3f2 	sdiv	r3, r3, r2
 8011b9a:	b29a      	uxth	r2, r3
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011ba2:	bf00      	nop
 8011ba4:	3714      	adds	r7, #20
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bac:	4770      	bx	lr
 8011bae:	bf00      	nop
 8011bb0:	080181f4 	.word	0x080181f4
 8011bb4:	080181fc 	.word	0x080181fc

08011bb8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011bb8:	b084      	sub	sp, #16
 8011bba:	b480      	push	{r7}
 8011bbc:	b085      	sub	sp, #20
 8011bbe:	af00      	add	r7, sp, #0
 8011bc0:	6078      	str	r0, [r7, #4]
 8011bc2:	f107 001c 	add.w	r0, r7, #28
 8011bc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011bca:	2300      	movs	r3, #0
 8011bcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8011bce:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8011bd0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8011bd2:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8011bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8011bd6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8011bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8011bda:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8011bde:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8011be0:	68fa      	ldr	r2, [r7, #12]
 8011be2:	4313      	orrs	r3, r2
 8011be4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	685a      	ldr	r2, [r3, #4]
 8011bea:	4b07      	ldr	r3, [pc, #28]	; (8011c08 <SDMMC_Init+0x50>)
 8011bec:	4013      	ands	r3, r2
 8011bee:	68fa      	ldr	r2, [r7, #12]
 8011bf0:	431a      	orrs	r2, r3
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011bf6:	2300      	movs	r3, #0
}
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	3714      	adds	r7, #20
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c02:	b004      	add	sp, #16
 8011c04:	4770      	bx	lr
 8011c06:	bf00      	nop
 8011c08:	ffc02c00 	.word	0xffc02c00

08011c0c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011c0c:	b480      	push	{r7}
 8011c0e:	b083      	sub	sp, #12
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	370c      	adds	r7, #12
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c24:	4770      	bx	lr

08011c26 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8011c26:	b480      	push	{r7}
 8011c28:	b083      	sub	sp, #12
 8011c2a:	af00      	add	r7, sp, #0
 8011c2c:	6078      	str	r0, [r7, #4]
 8011c2e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011c30:	683b      	ldr	r3, [r7, #0]
 8011c32:	681a      	ldr	r2, [r3, #0]
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011c3a:	2300      	movs	r3, #0
}
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	370c      	adds	r7, #12
 8011c40:	46bd      	mov	sp, r7
 8011c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c46:	4770      	bx	lr

08011c48 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011c48:	b480      	push	{r7}
 8011c4a:	b083      	sub	sp, #12
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	f043 0203 	orr.w	r2, r3, #3
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011c5c:	2300      	movs	r3, #0
}
 8011c5e:	4618      	mov	r0, r3
 8011c60:	370c      	adds	r7, #12
 8011c62:	46bd      	mov	sp, r7
 8011c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c68:	4770      	bx	lr

08011c6a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011c6a:	b480      	push	{r7}
 8011c6c:	b083      	sub	sp, #12
 8011c6e:	af00      	add	r7, sp, #0
 8011c70:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	f003 0303 	and.w	r3, r3, #3
}
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	370c      	adds	r7, #12
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c84:	4770      	bx	lr
	...

08011c88 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011c88:	b480      	push	{r7}
 8011c8a:	b085      	sub	sp, #20
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
 8011c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011c92:	2300      	movs	r3, #0
 8011c94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011c96:	683b      	ldr	r3, [r7, #0]
 8011c98:	681a      	ldr	r2, [r3, #0]
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011c9e:	683b      	ldr	r3, [r7, #0]
 8011ca0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8011ca2:	683b      	ldr	r3, [r7, #0]
 8011ca4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011ca6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8011ca8:	683b      	ldr	r3, [r7, #0]
 8011caa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8011cac:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011cae:	683b      	ldr	r3, [r7, #0]
 8011cb0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8011cb2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011cb4:	68fa      	ldr	r2, [r7, #12]
 8011cb6:	4313      	orrs	r3, r2
 8011cb8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	68da      	ldr	r2, [r3, #12]
 8011cbe:	4b06      	ldr	r3, [pc, #24]	; (8011cd8 <SDMMC_SendCommand+0x50>)
 8011cc0:	4013      	ands	r3, r2
 8011cc2:	68fa      	ldr	r2, [r7, #12]
 8011cc4:	431a      	orrs	r2, r3
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011cca:	2300      	movs	r3, #0
}
 8011ccc:	4618      	mov	r0, r3
 8011cce:	3714      	adds	r7, #20
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd6:	4770      	bx	lr
 8011cd8:	fffee0c0 	.word	0xfffee0c0

08011cdc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011cdc:	b480      	push	{r7}
 8011cde:	b083      	sub	sp, #12
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	691b      	ldr	r3, [r3, #16]
 8011ce8:	b2db      	uxtb	r3, r3
}
 8011cea:	4618      	mov	r0, r3
 8011cec:	370c      	adds	r7, #12
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf4:	4770      	bx	lr

08011cf6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8011cf6:	b480      	push	{r7}
 8011cf8:	b085      	sub	sp, #20
 8011cfa:	af00      	add	r7, sp, #0
 8011cfc:	6078      	str	r0, [r7, #4]
 8011cfe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	3314      	adds	r3, #20
 8011d04:	461a      	mov	r2, r3
 8011d06:	683b      	ldr	r3, [r7, #0]
 8011d08:	4413      	add	r3, r2
 8011d0a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	681b      	ldr	r3, [r3, #0]
}
 8011d10:	4618      	mov	r0, r3
 8011d12:	3714      	adds	r7, #20
 8011d14:	46bd      	mov	sp, r7
 8011d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1a:	4770      	bx	lr

08011d1c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8011d1c:	b480      	push	{r7}
 8011d1e:	b085      	sub	sp, #20
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
 8011d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011d26:	2300      	movs	r3, #0
 8011d28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8011d2a:	683b      	ldr	r3, [r7, #0]
 8011d2c:	681a      	ldr	r2, [r3, #0]
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8011d32:	683b      	ldr	r3, [r7, #0]
 8011d34:	685a      	ldr	r2, [r3, #4]
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011d3a:	683b      	ldr	r3, [r7, #0]
 8011d3c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011d42:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8011d44:	683b      	ldr	r3, [r7, #0]
 8011d46:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8011d48:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011d4a:	683b      	ldr	r3, [r7, #0]
 8011d4c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8011d4e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011d50:	68fa      	ldr	r2, [r7, #12]
 8011d52:	4313      	orrs	r3, r2
 8011d54:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	431a      	orrs	r2, r3
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011d66:	2300      	movs	r3, #0

}
 8011d68:	4618      	mov	r0, r3
 8011d6a:	3714      	adds	r7, #20
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d72:	4770      	bx	lr

08011d74 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011d74:	b580      	push	{r7, lr}
 8011d76:	b088      	sub	sp, #32
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
 8011d7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011d7e:	683b      	ldr	r3, [r7, #0]
 8011d80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011d82:	2310      	movs	r3, #16
 8011d84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011d86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011d8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d94:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d96:	f107 0308 	add.w	r3, r7, #8
 8011d9a:	4619      	mov	r1, r3
 8011d9c:	6878      	ldr	r0, [r7, #4]
 8011d9e:	f7ff ff73 	bl	8011c88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8011da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8011da6:	2110      	movs	r1, #16
 8011da8:	6878      	ldr	r0, [r7, #4]
 8011daa:	f000 fa5f 	bl	801226c <SDMMC_GetCmdResp1>
 8011dae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011db0:	69fb      	ldr	r3, [r7, #28]
}
 8011db2:	4618      	mov	r0, r3
 8011db4:	3720      	adds	r7, #32
 8011db6:	46bd      	mov	sp, r7
 8011db8:	bd80      	pop	{r7, pc}

08011dba <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011dba:	b580      	push	{r7, lr}
 8011dbc:	b088      	sub	sp, #32
 8011dbe:	af00      	add	r7, sp, #0
 8011dc0:	6078      	str	r0, [r7, #4]
 8011dc2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011dc8:	2311      	movs	r3, #17
 8011dca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011dcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011dd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011dda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ddc:	f107 0308 	add.w	r3, r7, #8
 8011de0:	4619      	mov	r1, r3
 8011de2:	6878      	ldr	r0, [r7, #4]
 8011de4:	f7ff ff50 	bl	8011c88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8011dec:	2111      	movs	r1, #17
 8011dee:	6878      	ldr	r0, [r7, #4]
 8011df0:	f000 fa3c 	bl	801226c <SDMMC_GetCmdResp1>
 8011df4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011df6:	69fb      	ldr	r3, [r7, #28]
}
 8011df8:	4618      	mov	r0, r3
 8011dfa:	3720      	adds	r7, #32
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	bd80      	pop	{r7, pc}

08011e00 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b088      	sub	sp, #32
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
 8011e08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011e0a:	683b      	ldr	r3, [r7, #0]
 8011e0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011e0e:	2312      	movs	r3, #18
 8011e10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011e16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011e18:	2300      	movs	r3, #0
 8011e1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e22:	f107 0308 	add.w	r3, r7, #8
 8011e26:	4619      	mov	r1, r3
 8011e28:	6878      	ldr	r0, [r7, #4]
 8011e2a:	f7ff ff2d 	bl	8011c88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011e32:	2112      	movs	r1, #18
 8011e34:	6878      	ldr	r0, [r7, #4]
 8011e36:	f000 fa19 	bl	801226c <SDMMC_GetCmdResp1>
 8011e3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e3c:	69fb      	ldr	r3, [r7, #28]
}
 8011e3e:	4618      	mov	r0, r3
 8011e40:	3720      	adds	r7, #32
 8011e42:	46bd      	mov	sp, r7
 8011e44:	bd80      	pop	{r7, pc}

08011e46 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011e46:	b580      	push	{r7, lr}
 8011e48:	b088      	sub	sp, #32
 8011e4a:	af00      	add	r7, sp, #0
 8011e4c:	6078      	str	r0, [r7, #4]
 8011e4e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011e50:	683b      	ldr	r3, [r7, #0]
 8011e52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011e54:	2318      	movs	r3, #24
 8011e56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011e5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011e5e:	2300      	movs	r3, #0
 8011e60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e68:	f107 0308 	add.w	r3, r7, #8
 8011e6c:	4619      	mov	r1, r3
 8011e6e:	6878      	ldr	r0, [r7, #4]
 8011e70:	f7ff ff0a 	bl	8011c88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8011e78:	2118      	movs	r1, #24
 8011e7a:	6878      	ldr	r0, [r7, #4]
 8011e7c:	f000 f9f6 	bl	801226c <SDMMC_GetCmdResp1>
 8011e80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e82:	69fb      	ldr	r3, [r7, #28]
}
 8011e84:	4618      	mov	r0, r3
 8011e86:	3720      	adds	r7, #32
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	bd80      	pop	{r7, pc}

08011e8c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b088      	sub	sp, #32
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
 8011e94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011e9a:	2319      	movs	r3, #25
 8011e9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ea2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011eac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011eae:	f107 0308 	add.w	r3, r7, #8
 8011eb2:	4619      	mov	r1, r3
 8011eb4:	6878      	ldr	r0, [r7, #4]
 8011eb6:	f7ff fee7 	bl	8011c88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ebe:	2119      	movs	r1, #25
 8011ec0:	6878      	ldr	r0, [r7, #4]
 8011ec2:	f000 f9d3 	bl	801226c <SDMMC_GetCmdResp1>
 8011ec6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011ec8:	69fb      	ldr	r3, [r7, #28]
}
 8011eca:	4618      	mov	r0, r3
 8011ecc:	3720      	adds	r7, #32
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	bd80      	pop	{r7, pc}
	...

08011ed4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	b088      	sub	sp, #32
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011edc:	2300      	movs	r3, #0
 8011ede:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011ee0:	230c      	movs	r3, #12
 8011ee2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011ee4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ee8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011eea:	2300      	movs	r3, #0
 8011eec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011eee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011ef2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	68db      	ldr	r3, [r3, #12]
 8011ef8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	68db      	ldr	r3, [r3, #12]
 8011f04:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f0c:	f107 0308 	add.w	r3, r7, #8
 8011f10:	4619      	mov	r1, r3
 8011f12:	6878      	ldr	r0, [r7, #4]
 8011f14:	f7ff feb8 	bl	8011c88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8011f18:	4a0b      	ldr	r2, [pc, #44]	; (8011f48 <SDMMC_CmdStopTransfer+0x74>)
 8011f1a:	210c      	movs	r1, #12
 8011f1c:	6878      	ldr	r0, [r7, #4]
 8011f1e:	f000 f9a5 	bl	801226c <SDMMC_GetCmdResp1>
 8011f22:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	68db      	ldr	r3, [r3, #12]
 8011f28:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8011f30:	69fb      	ldr	r3, [r7, #28]
 8011f32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011f36:	d101      	bne.n	8011f3c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8011f38:	2300      	movs	r3, #0
 8011f3a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8011f3c:	69fb      	ldr	r3, [r7, #28]
}
 8011f3e:	4618      	mov	r0, r3
 8011f40:	3720      	adds	r7, #32
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bd80      	pop	{r7, pc}
 8011f46:	bf00      	nop
 8011f48:	05f5e100 	.word	0x05f5e100

08011f4c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b088      	sub	sp, #32
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
 8011f54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011f56:	683b      	ldr	r3, [r7, #0]
 8011f58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011f5a:	2307      	movs	r3, #7
 8011f5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011f62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f64:	2300      	movs	r3, #0
 8011f66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f6e:	f107 0308 	add.w	r3, r7, #8
 8011f72:	4619      	mov	r1, r3
 8011f74:	6878      	ldr	r0, [r7, #4]
 8011f76:	f7ff fe87 	bl	8011c88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f7e:	2107      	movs	r1, #7
 8011f80:	6878      	ldr	r0, [r7, #4]
 8011f82:	f000 f973 	bl	801226c <SDMMC_GetCmdResp1>
 8011f86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f88:	69fb      	ldr	r3, [r7, #28]
}
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	3720      	adds	r7, #32
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	bd80      	pop	{r7, pc}

08011f92 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8011f92:	b580      	push	{r7, lr}
 8011f94:	b088      	sub	sp, #32
 8011f96:	af00      	add	r7, sp, #0
 8011f98:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011faa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011fae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011fb0:	f107 0308 	add.w	r3, r7, #8
 8011fb4:	4619      	mov	r1, r3
 8011fb6:	6878      	ldr	r0, [r7, #4]
 8011fb8:	f7ff fe66 	bl	8011c88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8011fbc:	6878      	ldr	r0, [r7, #4]
 8011fbe:	f000 fb97 	bl	80126f0 <SDMMC_GetCmdError>
 8011fc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011fc4:	69fb      	ldr	r3, [r7, #28]
}
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	3720      	adds	r7, #32
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	bd80      	pop	{r7, pc}

08011fce <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8011fce:	b580      	push	{r7, lr}
 8011fd0:	b088      	sub	sp, #32
 8011fd2:	af00      	add	r7, sp, #0
 8011fd4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011fd6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011fda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011fdc:	2308      	movs	r3, #8
 8011fde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011fe0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011fe4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011fee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ff0:	f107 0308 	add.w	r3, r7, #8
 8011ff4:	4619      	mov	r1, r3
 8011ff6:	6878      	ldr	r0, [r7, #4]
 8011ff8:	f7ff fe46 	bl	8011c88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8011ffc:	6878      	ldr	r0, [r7, #4]
 8011ffe:	f000 fb29 	bl	8012654 <SDMMC_GetCmdResp7>
 8012002:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012004:	69fb      	ldr	r3, [r7, #28]
}
 8012006:	4618      	mov	r0, r3
 8012008:	3720      	adds	r7, #32
 801200a:	46bd      	mov	sp, r7
 801200c:	bd80      	pop	{r7, pc}

0801200e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801200e:	b580      	push	{r7, lr}
 8012010:	b088      	sub	sp, #32
 8012012:	af00      	add	r7, sp, #0
 8012014:	6078      	str	r0, [r7, #4]
 8012016:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012018:	683b      	ldr	r3, [r7, #0]
 801201a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801201c:	2337      	movs	r3, #55	; 0x37
 801201e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012020:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012024:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012026:	2300      	movs	r3, #0
 8012028:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801202a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801202e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012030:	f107 0308 	add.w	r3, r7, #8
 8012034:	4619      	mov	r1, r3
 8012036:	6878      	ldr	r0, [r7, #4]
 8012038:	f7ff fe26 	bl	8011c88 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801203c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012040:	2137      	movs	r1, #55	; 0x37
 8012042:	6878      	ldr	r0, [r7, #4]
 8012044:	f000 f912 	bl	801226c <SDMMC_GetCmdResp1>
 8012048:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801204a:	69fb      	ldr	r3, [r7, #28]
}
 801204c:	4618      	mov	r0, r3
 801204e:	3720      	adds	r7, #32
 8012050:	46bd      	mov	sp, r7
 8012052:	bd80      	pop	{r7, pc}

08012054 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012054:	b580      	push	{r7, lr}
 8012056:	b088      	sub	sp, #32
 8012058:	af00      	add	r7, sp, #0
 801205a:	6078      	str	r0, [r7, #4]
 801205c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801205e:	683b      	ldr	r3, [r7, #0]
 8012060:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012062:	2329      	movs	r3, #41	; 0x29
 8012064:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012066:	f44f 7380 	mov.w	r3, #256	; 0x100
 801206a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801206c:	2300      	movs	r3, #0
 801206e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012074:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012076:	f107 0308 	add.w	r3, r7, #8
 801207a:	4619      	mov	r1, r3
 801207c:	6878      	ldr	r0, [r7, #4]
 801207e:	f7ff fe03 	bl	8011c88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8012082:	6878      	ldr	r0, [r7, #4]
 8012084:	f000 fa2e 	bl	80124e4 <SDMMC_GetCmdResp3>
 8012088:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801208a:	69fb      	ldr	r3, [r7, #28]
}
 801208c:	4618      	mov	r0, r3
 801208e:	3720      	adds	r7, #32
 8012090:	46bd      	mov	sp, r7
 8012092:	bd80      	pop	{r7, pc}

08012094 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b088      	sub	sp, #32
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
 801209c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801209e:	683b      	ldr	r3, [r7, #0]
 80120a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80120a2:	2306      	movs	r3, #6
 80120a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80120a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80120aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80120ac:	2300      	movs	r3, #0
 80120ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80120b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80120b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80120b6:	f107 0308 	add.w	r3, r7, #8
 80120ba:	4619      	mov	r1, r3
 80120bc:	6878      	ldr	r0, [r7, #4]
 80120be:	f7ff fde3 	bl	8011c88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80120c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80120c6:	2106      	movs	r1, #6
 80120c8:	6878      	ldr	r0, [r7, #4]
 80120ca:	f000 f8cf 	bl	801226c <SDMMC_GetCmdResp1>
 80120ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80120d0:	69fb      	ldr	r3, [r7, #28]
}
 80120d2:	4618      	mov	r0, r3
 80120d4:	3720      	adds	r7, #32
 80120d6:	46bd      	mov	sp, r7
 80120d8:	bd80      	pop	{r7, pc}

080120da <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80120da:	b580      	push	{r7, lr}
 80120dc:	b088      	sub	sp, #32
 80120de:	af00      	add	r7, sp, #0
 80120e0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80120e2:	2300      	movs	r3, #0
 80120e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80120e6:	2333      	movs	r3, #51	; 0x33
 80120e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80120ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80120ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80120f0:	2300      	movs	r3, #0
 80120f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80120f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80120f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80120fa:	f107 0308 	add.w	r3, r7, #8
 80120fe:	4619      	mov	r1, r3
 8012100:	6878      	ldr	r0, [r7, #4]
 8012102:	f7ff fdc1 	bl	8011c88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8012106:	f241 3288 	movw	r2, #5000	; 0x1388
 801210a:	2133      	movs	r1, #51	; 0x33
 801210c:	6878      	ldr	r0, [r7, #4]
 801210e:	f000 f8ad 	bl	801226c <SDMMC_GetCmdResp1>
 8012112:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012114:	69fb      	ldr	r3, [r7, #28]
}
 8012116:	4618      	mov	r0, r3
 8012118:	3720      	adds	r7, #32
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}

0801211e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801211e:	b580      	push	{r7, lr}
 8012120:	b088      	sub	sp, #32
 8012122:	af00      	add	r7, sp, #0
 8012124:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8012126:	2300      	movs	r3, #0
 8012128:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801212a:	2302      	movs	r3, #2
 801212c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801212e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012132:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012134:	2300      	movs	r3, #0
 8012136:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801213c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801213e:	f107 0308 	add.w	r3, r7, #8
 8012142:	4619      	mov	r1, r3
 8012144:	6878      	ldr	r0, [r7, #4]
 8012146:	f7ff fd9f 	bl	8011c88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801214a:	6878      	ldr	r0, [r7, #4]
 801214c:	f000 f980 	bl	8012450 <SDMMC_GetCmdResp2>
 8012150:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012152:	69fb      	ldr	r3, [r7, #28]
}
 8012154:	4618      	mov	r0, r3
 8012156:	3720      	adds	r7, #32
 8012158:	46bd      	mov	sp, r7
 801215a:	bd80      	pop	{r7, pc}

0801215c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801215c:	b580      	push	{r7, lr}
 801215e:	b088      	sub	sp, #32
 8012160:	af00      	add	r7, sp, #0
 8012162:	6078      	str	r0, [r7, #4]
 8012164:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012166:	683b      	ldr	r3, [r7, #0]
 8012168:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801216a:	2309      	movs	r3, #9
 801216c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801216e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012172:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012174:	2300      	movs	r3, #0
 8012176:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801217c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801217e:	f107 0308 	add.w	r3, r7, #8
 8012182:	4619      	mov	r1, r3
 8012184:	6878      	ldr	r0, [r7, #4]
 8012186:	f7ff fd7f 	bl	8011c88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801218a:	6878      	ldr	r0, [r7, #4]
 801218c:	f000 f960 	bl	8012450 <SDMMC_GetCmdResp2>
 8012190:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012192:	69fb      	ldr	r3, [r7, #28]
}
 8012194:	4618      	mov	r0, r3
 8012196:	3720      	adds	r7, #32
 8012198:	46bd      	mov	sp, r7
 801219a:	bd80      	pop	{r7, pc}

0801219c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b088      	sub	sp, #32
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
 80121a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80121a6:	2300      	movs	r3, #0
 80121a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80121aa:	2303      	movs	r3, #3
 80121ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80121b4:	2300      	movs	r3, #0
 80121b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80121b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80121bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80121be:	f107 0308 	add.w	r3, r7, #8
 80121c2:	4619      	mov	r1, r3
 80121c4:	6878      	ldr	r0, [r7, #4]
 80121c6:	f7ff fd5f 	bl	8011c88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80121ca:	683a      	ldr	r2, [r7, #0]
 80121cc:	2103      	movs	r1, #3
 80121ce:	6878      	ldr	r0, [r7, #4]
 80121d0:	f000 f9c8 	bl	8012564 <SDMMC_GetCmdResp6>
 80121d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121d6:	69fb      	ldr	r3, [r7, #28]
}
 80121d8:	4618      	mov	r0, r3
 80121da:	3720      	adds	r7, #32
 80121dc:	46bd      	mov	sp, r7
 80121de:	bd80      	pop	{r7, pc}

080121e0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b088      	sub	sp, #32
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	6078      	str	r0, [r7, #4]
 80121e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80121ea:	683b      	ldr	r3, [r7, #0]
 80121ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80121ee:	230d      	movs	r3, #13
 80121f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80121f8:	2300      	movs	r3, #0
 80121fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80121fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012200:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012202:	f107 0308 	add.w	r3, r7, #8
 8012206:	4619      	mov	r1, r3
 8012208:	6878      	ldr	r0, [r7, #4]
 801220a:	f7ff fd3d 	bl	8011c88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801220e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012212:	210d      	movs	r1, #13
 8012214:	6878      	ldr	r0, [r7, #4]
 8012216:	f000 f829 	bl	801226c <SDMMC_GetCmdResp1>
 801221a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801221c:	69fb      	ldr	r3, [r7, #28]
}
 801221e:	4618      	mov	r0, r3
 8012220:	3720      	adds	r7, #32
 8012222:	46bd      	mov	sp, r7
 8012224:	bd80      	pop	{r7, pc}

08012226 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8012226:	b580      	push	{r7, lr}
 8012228:	b088      	sub	sp, #32
 801222a:	af00      	add	r7, sp, #0
 801222c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801222e:	2300      	movs	r3, #0
 8012230:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8012232:	230d      	movs	r3, #13
 8012234:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012236:	f44f 7380 	mov.w	r3, #256	; 0x100
 801223a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801223c:	2300      	movs	r3, #0
 801223e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012244:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012246:	f107 0308 	add.w	r3, r7, #8
 801224a:	4619      	mov	r1, r3
 801224c:	6878      	ldr	r0, [r7, #4]
 801224e:	f7ff fd1b 	bl	8011c88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8012252:	f241 3288 	movw	r2, #5000	; 0x1388
 8012256:	210d      	movs	r1, #13
 8012258:	6878      	ldr	r0, [r7, #4]
 801225a:	f000 f807 	bl	801226c <SDMMC_GetCmdResp1>
 801225e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012260:	69fb      	ldr	r3, [r7, #28]
}
 8012262:	4618      	mov	r0, r3
 8012264:	3720      	adds	r7, #32
 8012266:	46bd      	mov	sp, r7
 8012268:	bd80      	pop	{r7, pc}
	...

0801226c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b088      	sub	sp, #32
 8012270:	af00      	add	r7, sp, #0
 8012272:	60f8      	str	r0, [r7, #12]
 8012274:	460b      	mov	r3, r1
 8012276:	607a      	str	r2, [r7, #4]
 8012278:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801227a:	4b70      	ldr	r3, [pc, #448]	; (801243c <SDMMC_GetCmdResp1+0x1d0>)
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	4a70      	ldr	r2, [pc, #448]	; (8012440 <SDMMC_GetCmdResp1+0x1d4>)
 8012280:	fba2 2303 	umull	r2, r3, r2, r3
 8012284:	0a5a      	lsrs	r2, r3, #9
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	fb02 f303 	mul.w	r3, r2, r3
 801228c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801228e:	69fb      	ldr	r3, [r7, #28]
 8012290:	1e5a      	subs	r2, r3, #1
 8012292:	61fa      	str	r2, [r7, #28]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d102      	bne.n	801229e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012298:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801229c:	e0c9      	b.n	8012432 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122a2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80122a4:	69ba      	ldr	r2, [r7, #24]
 80122a6:	4b67      	ldr	r3, [pc, #412]	; (8012444 <SDMMC_GetCmdResp1+0x1d8>)
 80122a8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d0ef      	beq.n	801228e <SDMMC_GetCmdResp1+0x22>
 80122ae:	69bb      	ldr	r3, [r7, #24]
 80122b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d1ea      	bne.n	801228e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122bc:	f003 0304 	and.w	r3, r3, #4
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d004      	beq.n	80122ce <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	2204      	movs	r2, #4
 80122c8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80122ca:	2304      	movs	r3, #4
 80122cc:	e0b1      	b.n	8012432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122d2:	f003 0301 	and.w	r3, r3, #1
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d004      	beq.n	80122e4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	2201      	movs	r2, #1
 80122de:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80122e0:	2301      	movs	r3, #1
 80122e2:	e0a6      	b.n	8012432 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	4a58      	ldr	r2, [pc, #352]	; (8012448 <SDMMC_GetCmdResp1+0x1dc>)
 80122e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80122ea:	68f8      	ldr	r0, [r7, #12]
 80122ec:	f7ff fcf6 	bl	8011cdc <SDMMC_GetCommandResponse>
 80122f0:	4603      	mov	r3, r0
 80122f2:	461a      	mov	r2, r3
 80122f4:	7afb      	ldrb	r3, [r7, #11]
 80122f6:	4293      	cmp	r3, r2
 80122f8:	d001      	beq.n	80122fe <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80122fa:	2301      	movs	r3, #1
 80122fc:	e099      	b.n	8012432 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80122fe:	2100      	movs	r1, #0
 8012300:	68f8      	ldr	r0, [r7, #12]
 8012302:	f7ff fcf8 	bl	8011cf6 <SDMMC_GetResponse>
 8012306:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012308:	697a      	ldr	r2, [r7, #20]
 801230a:	4b50      	ldr	r3, [pc, #320]	; (801244c <SDMMC_GetCmdResp1+0x1e0>)
 801230c:	4013      	ands	r3, r2
 801230e:	2b00      	cmp	r3, #0
 8012310:	d101      	bne.n	8012316 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8012312:	2300      	movs	r3, #0
 8012314:	e08d      	b.n	8012432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012316:	697b      	ldr	r3, [r7, #20]
 8012318:	2b00      	cmp	r3, #0
 801231a:	da02      	bge.n	8012322 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801231c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012320:	e087      	b.n	8012432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012322:	697b      	ldr	r3, [r7, #20]
 8012324:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012328:	2b00      	cmp	r3, #0
 801232a:	d001      	beq.n	8012330 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801232c:	2340      	movs	r3, #64	; 0x40
 801232e:	e080      	b.n	8012432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012330:	697b      	ldr	r3, [r7, #20]
 8012332:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012336:	2b00      	cmp	r3, #0
 8012338:	d001      	beq.n	801233e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801233a:	2380      	movs	r3, #128	; 0x80
 801233c:	e079      	b.n	8012432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801233e:	697b      	ldr	r3, [r7, #20]
 8012340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012344:	2b00      	cmp	r3, #0
 8012346:	d002      	beq.n	801234e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012348:	f44f 7380 	mov.w	r3, #256	; 0x100
 801234c:	e071      	b.n	8012432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801234e:	697b      	ldr	r3, [r7, #20]
 8012350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012354:	2b00      	cmp	r3, #0
 8012356:	d002      	beq.n	801235e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012358:	f44f 7300 	mov.w	r3, #512	; 0x200
 801235c:	e069      	b.n	8012432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801235e:	697b      	ldr	r3, [r7, #20]
 8012360:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012364:	2b00      	cmp	r3, #0
 8012366:	d002      	beq.n	801236e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801236c:	e061      	b.n	8012432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801236e:	697b      	ldr	r3, [r7, #20]
 8012370:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012374:	2b00      	cmp	r3, #0
 8012376:	d002      	beq.n	801237e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012378:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801237c:	e059      	b.n	8012432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801237e:	697b      	ldr	r3, [r7, #20]
 8012380:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012384:	2b00      	cmp	r3, #0
 8012386:	d002      	beq.n	801238e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801238c:	e051      	b.n	8012432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801238e:	697b      	ldr	r3, [r7, #20]
 8012390:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012394:	2b00      	cmp	r3, #0
 8012396:	d002      	beq.n	801239e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012398:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801239c:	e049      	b.n	8012432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801239e:	697b      	ldr	r3, [r7, #20]
 80123a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d002      	beq.n	80123ae <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80123a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80123ac:	e041      	b.n	8012432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80123ae:	697b      	ldr	r3, [r7, #20]
 80123b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d002      	beq.n	80123be <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80123b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80123bc:	e039      	b.n	8012432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80123be:	697b      	ldr	r3, [r7, #20]
 80123c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d002      	beq.n	80123ce <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80123c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80123cc:	e031      	b.n	8012432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80123ce:	697b      	ldr	r3, [r7, #20]
 80123d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d002      	beq.n	80123de <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80123d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80123dc:	e029      	b.n	8012432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80123de:	697b      	ldr	r3, [r7, #20]
 80123e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d002      	beq.n	80123ee <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80123e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80123ec:	e021      	b.n	8012432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80123ee:	697b      	ldr	r3, [r7, #20]
 80123f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d002      	beq.n	80123fe <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80123f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80123fc:	e019      	b.n	8012432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80123fe:	697b      	ldr	r3, [r7, #20]
 8012400:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012404:	2b00      	cmp	r3, #0
 8012406:	d002      	beq.n	801240e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012408:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801240c:	e011      	b.n	8012432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801240e:	697b      	ldr	r3, [r7, #20]
 8012410:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012414:	2b00      	cmp	r3, #0
 8012416:	d002      	beq.n	801241e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012418:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801241c:	e009      	b.n	8012432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801241e:	697b      	ldr	r3, [r7, #20]
 8012420:	f003 0308 	and.w	r3, r3, #8
 8012424:	2b00      	cmp	r3, #0
 8012426:	d002      	beq.n	801242e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012428:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801242c:	e001      	b.n	8012432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801242e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012432:	4618      	mov	r0, r3
 8012434:	3720      	adds	r7, #32
 8012436:	46bd      	mov	sp, r7
 8012438:	bd80      	pop	{r7, pc}
 801243a:	bf00      	nop
 801243c:	24000000 	.word	0x24000000
 8012440:	10624dd3 	.word	0x10624dd3
 8012444:	00200045 	.word	0x00200045
 8012448:	002000c5 	.word	0x002000c5
 801244c:	fdffe008 	.word	0xfdffe008

08012450 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012450:	b480      	push	{r7}
 8012452:	b085      	sub	sp, #20
 8012454:	af00      	add	r7, sp, #0
 8012456:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012458:	4b1f      	ldr	r3, [pc, #124]	; (80124d8 <SDMMC_GetCmdResp2+0x88>)
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	4a1f      	ldr	r2, [pc, #124]	; (80124dc <SDMMC_GetCmdResp2+0x8c>)
 801245e:	fba2 2303 	umull	r2, r3, r2, r3
 8012462:	0a5b      	lsrs	r3, r3, #9
 8012464:	f241 3288 	movw	r2, #5000	; 0x1388
 8012468:	fb02 f303 	mul.w	r3, r2, r3
 801246c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	1e5a      	subs	r2, r3, #1
 8012472:	60fa      	str	r2, [r7, #12]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d102      	bne.n	801247e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012478:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801247c:	e026      	b.n	80124cc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012482:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012484:	68bb      	ldr	r3, [r7, #8]
 8012486:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801248a:	2b00      	cmp	r3, #0
 801248c:	d0ef      	beq.n	801246e <SDMMC_GetCmdResp2+0x1e>
 801248e:	68bb      	ldr	r3, [r7, #8]
 8012490:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012494:	2b00      	cmp	r3, #0
 8012496:	d1ea      	bne.n	801246e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801249c:	f003 0304 	and.w	r3, r3, #4
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d004      	beq.n	80124ae <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	2204      	movs	r2, #4
 80124a8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80124aa:	2304      	movs	r3, #4
 80124ac:	e00e      	b.n	80124cc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124b2:	f003 0301 	and.w	r3, r3, #1
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d004      	beq.n	80124c4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	2201      	movs	r2, #1
 80124be:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80124c0:	2301      	movs	r3, #1
 80124c2:	e003      	b.n	80124cc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	4a06      	ldr	r2, [pc, #24]	; (80124e0 <SDMMC_GetCmdResp2+0x90>)
 80124c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80124ca:	2300      	movs	r3, #0
}
 80124cc:	4618      	mov	r0, r3
 80124ce:	3714      	adds	r7, #20
 80124d0:	46bd      	mov	sp, r7
 80124d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d6:	4770      	bx	lr
 80124d8:	24000000 	.word	0x24000000
 80124dc:	10624dd3 	.word	0x10624dd3
 80124e0:	002000c5 	.word	0x002000c5

080124e4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80124e4:	b480      	push	{r7}
 80124e6:	b085      	sub	sp, #20
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80124ec:	4b1a      	ldr	r3, [pc, #104]	; (8012558 <SDMMC_GetCmdResp3+0x74>)
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	4a1a      	ldr	r2, [pc, #104]	; (801255c <SDMMC_GetCmdResp3+0x78>)
 80124f2:	fba2 2303 	umull	r2, r3, r2, r3
 80124f6:	0a5b      	lsrs	r3, r3, #9
 80124f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80124fc:	fb02 f303 	mul.w	r3, r2, r3
 8012500:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	1e5a      	subs	r2, r3, #1
 8012506:	60fa      	str	r2, [r7, #12]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d102      	bne.n	8012512 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801250c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012510:	e01b      	b.n	801254a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012516:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012518:	68bb      	ldr	r3, [r7, #8]
 801251a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801251e:	2b00      	cmp	r3, #0
 8012520:	d0ef      	beq.n	8012502 <SDMMC_GetCmdResp3+0x1e>
 8012522:	68bb      	ldr	r3, [r7, #8]
 8012524:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012528:	2b00      	cmp	r3, #0
 801252a:	d1ea      	bne.n	8012502 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012530:	f003 0304 	and.w	r3, r3, #4
 8012534:	2b00      	cmp	r3, #0
 8012536:	d004      	beq.n	8012542 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	2204      	movs	r2, #4
 801253c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801253e:	2304      	movs	r3, #4
 8012540:	e003      	b.n	801254a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	4a06      	ldr	r2, [pc, #24]	; (8012560 <SDMMC_GetCmdResp3+0x7c>)
 8012546:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012548:	2300      	movs	r3, #0
}
 801254a:	4618      	mov	r0, r3
 801254c:	3714      	adds	r7, #20
 801254e:	46bd      	mov	sp, r7
 8012550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012554:	4770      	bx	lr
 8012556:	bf00      	nop
 8012558:	24000000 	.word	0x24000000
 801255c:	10624dd3 	.word	0x10624dd3
 8012560:	002000c5 	.word	0x002000c5

08012564 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012564:	b580      	push	{r7, lr}
 8012566:	b088      	sub	sp, #32
 8012568:	af00      	add	r7, sp, #0
 801256a:	60f8      	str	r0, [r7, #12]
 801256c:	460b      	mov	r3, r1
 801256e:	607a      	str	r2, [r7, #4]
 8012570:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012572:	4b35      	ldr	r3, [pc, #212]	; (8012648 <SDMMC_GetCmdResp6+0xe4>)
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	4a35      	ldr	r2, [pc, #212]	; (801264c <SDMMC_GetCmdResp6+0xe8>)
 8012578:	fba2 2303 	umull	r2, r3, r2, r3
 801257c:	0a5b      	lsrs	r3, r3, #9
 801257e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012582:	fb02 f303 	mul.w	r3, r2, r3
 8012586:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012588:	69fb      	ldr	r3, [r7, #28]
 801258a:	1e5a      	subs	r2, r3, #1
 801258c:	61fa      	str	r2, [r7, #28]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d102      	bne.n	8012598 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012592:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012596:	e052      	b.n	801263e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801259c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801259e:	69bb      	ldr	r3, [r7, #24]
 80125a0:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d0ef      	beq.n	8012588 <SDMMC_GetCmdResp6+0x24>
 80125a8:	69bb      	ldr	r3, [r7, #24]
 80125aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d1ea      	bne.n	8012588 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125b6:	f003 0304 	and.w	r3, r3, #4
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d004      	beq.n	80125c8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	2204      	movs	r2, #4
 80125c2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80125c4:	2304      	movs	r3, #4
 80125c6:	e03a      	b.n	801263e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125cc:	f003 0301 	and.w	r3, r3, #1
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d004      	beq.n	80125de <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	2201      	movs	r2, #1
 80125d8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80125da:	2301      	movs	r3, #1
 80125dc:	e02f      	b.n	801263e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80125de:	68f8      	ldr	r0, [r7, #12]
 80125e0:	f7ff fb7c 	bl	8011cdc <SDMMC_GetCommandResponse>
 80125e4:	4603      	mov	r3, r0
 80125e6:	461a      	mov	r2, r3
 80125e8:	7afb      	ldrb	r3, [r7, #11]
 80125ea:	4293      	cmp	r3, r2
 80125ec:	d001      	beq.n	80125f2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80125ee:	2301      	movs	r3, #1
 80125f0:	e025      	b.n	801263e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	4a16      	ldr	r2, [pc, #88]	; (8012650 <SDMMC_GetCmdResp6+0xec>)
 80125f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80125f8:	2100      	movs	r1, #0
 80125fa:	68f8      	ldr	r0, [r7, #12]
 80125fc:	f7ff fb7b 	bl	8011cf6 <SDMMC_GetResponse>
 8012600:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8012602:	697b      	ldr	r3, [r7, #20]
 8012604:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012608:	2b00      	cmp	r3, #0
 801260a:	d106      	bne.n	801261a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 801260c:	697b      	ldr	r3, [r7, #20]
 801260e:	0c1b      	lsrs	r3, r3, #16
 8012610:	b29a      	uxth	r2, r3
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8012616:	2300      	movs	r3, #0
 8012618:	e011      	b.n	801263e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801261a:	697b      	ldr	r3, [r7, #20]
 801261c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012620:	2b00      	cmp	r3, #0
 8012622:	d002      	beq.n	801262a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012628:	e009      	b.n	801263e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801262a:	697b      	ldr	r3, [r7, #20]
 801262c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012630:	2b00      	cmp	r3, #0
 8012632:	d002      	beq.n	801263a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012638:	e001      	b.n	801263e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801263a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801263e:	4618      	mov	r0, r3
 8012640:	3720      	adds	r7, #32
 8012642:	46bd      	mov	sp, r7
 8012644:	bd80      	pop	{r7, pc}
 8012646:	bf00      	nop
 8012648:	24000000 	.word	0x24000000
 801264c:	10624dd3 	.word	0x10624dd3
 8012650:	002000c5 	.word	0x002000c5

08012654 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8012654:	b480      	push	{r7}
 8012656:	b085      	sub	sp, #20
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801265c:	4b22      	ldr	r3, [pc, #136]	; (80126e8 <SDMMC_GetCmdResp7+0x94>)
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	4a22      	ldr	r2, [pc, #136]	; (80126ec <SDMMC_GetCmdResp7+0x98>)
 8012662:	fba2 2303 	umull	r2, r3, r2, r3
 8012666:	0a5b      	lsrs	r3, r3, #9
 8012668:	f241 3288 	movw	r2, #5000	; 0x1388
 801266c:	fb02 f303 	mul.w	r3, r2, r3
 8012670:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	1e5a      	subs	r2, r3, #1
 8012676:	60fa      	str	r2, [r7, #12]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d102      	bne.n	8012682 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801267c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012680:	e02c      	b.n	80126dc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012686:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012688:	68bb      	ldr	r3, [r7, #8]
 801268a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801268e:	2b00      	cmp	r3, #0
 8012690:	d0ef      	beq.n	8012672 <SDMMC_GetCmdResp7+0x1e>
 8012692:	68bb      	ldr	r3, [r7, #8]
 8012694:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012698:	2b00      	cmp	r3, #0
 801269a:	d1ea      	bne.n	8012672 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126a0:	f003 0304 	and.w	r3, r3, #4
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d004      	beq.n	80126b2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	2204      	movs	r2, #4
 80126ac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80126ae:	2304      	movs	r3, #4
 80126b0:	e014      	b.n	80126dc <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126b6:	f003 0301 	and.w	r3, r3, #1
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d004      	beq.n	80126c8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	2201      	movs	r2, #1
 80126c2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80126c4:	2301      	movs	r3, #1
 80126c6:	e009      	b.n	80126dc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d002      	beq.n	80126da <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	2240      	movs	r2, #64	; 0x40
 80126d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80126da:	2300      	movs	r3, #0

}
 80126dc:	4618      	mov	r0, r3
 80126de:	3714      	adds	r7, #20
 80126e0:	46bd      	mov	sp, r7
 80126e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e6:	4770      	bx	lr
 80126e8:	24000000 	.word	0x24000000
 80126ec:	10624dd3 	.word	0x10624dd3

080126f0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80126f0:	b480      	push	{r7}
 80126f2:	b085      	sub	sp, #20
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80126f8:	4b11      	ldr	r3, [pc, #68]	; (8012740 <SDMMC_GetCmdError+0x50>)
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	4a11      	ldr	r2, [pc, #68]	; (8012744 <SDMMC_GetCmdError+0x54>)
 80126fe:	fba2 2303 	umull	r2, r3, r2, r3
 8012702:	0a5b      	lsrs	r3, r3, #9
 8012704:	f241 3288 	movw	r2, #5000	; 0x1388
 8012708:	fb02 f303 	mul.w	r3, r2, r3
 801270c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	1e5a      	subs	r2, r3, #1
 8012712:	60fa      	str	r2, [r7, #12]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d102      	bne.n	801271e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012718:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801271c:	e009      	b.n	8012732 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012726:	2b00      	cmp	r3, #0
 8012728:	d0f1      	beq.n	801270e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	4a06      	ldr	r2, [pc, #24]	; (8012748 <SDMMC_GetCmdError+0x58>)
 801272e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8012730:	2300      	movs	r3, #0
}
 8012732:	4618      	mov	r0, r3
 8012734:	3714      	adds	r7, #20
 8012736:	46bd      	mov	sp, r7
 8012738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273c:	4770      	bx	lr
 801273e:	bf00      	nop
 8012740:	24000000 	.word	0x24000000
 8012744:	10624dd3 	.word	0x10624dd3
 8012748:	002000c5 	.word	0x002000c5

0801274c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801274c:	b084      	sub	sp, #16
 801274e:	b580      	push	{r7, lr}
 8012750:	b084      	sub	sp, #16
 8012752:	af00      	add	r7, sp, #0
 8012754:	6078      	str	r0, [r7, #4]
 8012756:	f107 001c 	add.w	r0, r7, #28
 801275a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801275e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012760:	2b01      	cmp	r3, #1
 8012762:	d120      	bne.n	80127a6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012768:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	68da      	ldr	r2, [r3, #12]
 8012774:	4b2a      	ldr	r3, [pc, #168]	; (8012820 <USB_CoreInit+0xd4>)
 8012776:	4013      	ands	r3, r2
 8012778:	687a      	ldr	r2, [r7, #4]
 801277a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	68db      	ldr	r3, [r3, #12]
 8012780:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801278a:	2b01      	cmp	r3, #1
 801278c:	d105      	bne.n	801279a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	68db      	ldr	r3, [r3, #12]
 8012792:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801279a:	6878      	ldr	r0, [r7, #4]
 801279c:	f001 faf8 	bl	8013d90 <USB_CoreReset>
 80127a0:	4603      	mov	r3, r0
 80127a2:	73fb      	strb	r3, [r7, #15]
 80127a4:	e01a      	b.n	80127dc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	68db      	ldr	r3, [r3, #12]
 80127aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80127b2:	6878      	ldr	r0, [r7, #4]
 80127b4:	f001 faec 	bl	8013d90 <USB_CoreReset>
 80127b8:	4603      	mov	r3, r0
 80127ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80127bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d106      	bne.n	80127d0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	639a      	str	r2, [r3, #56]	; 0x38
 80127ce:	e005      	b.n	80127dc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80127dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127de:	2b01      	cmp	r3, #1
 80127e0:	d116      	bne.n	8012810 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80127e6:	b29a      	uxth	r2, r3
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80127f0:	4b0c      	ldr	r3, [pc, #48]	; (8012824 <USB_CoreInit+0xd8>)
 80127f2:	4313      	orrs	r3, r2
 80127f4:	687a      	ldr	r2, [r7, #4]
 80127f6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	689b      	ldr	r3, [r3, #8]
 80127fc:	f043 0206 	orr.w	r2, r3, #6
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	689b      	ldr	r3, [r3, #8]
 8012808:	f043 0220 	orr.w	r2, r3, #32
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012810:	7bfb      	ldrb	r3, [r7, #15]
}
 8012812:	4618      	mov	r0, r3
 8012814:	3710      	adds	r7, #16
 8012816:	46bd      	mov	sp, r7
 8012818:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801281c:	b004      	add	sp, #16
 801281e:	4770      	bx	lr
 8012820:	ffbdffbf 	.word	0xffbdffbf
 8012824:	03ee0000 	.word	0x03ee0000

08012828 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012828:	b480      	push	{r7}
 801282a:	b087      	sub	sp, #28
 801282c:	af00      	add	r7, sp, #0
 801282e:	60f8      	str	r0, [r7, #12]
 8012830:	60b9      	str	r1, [r7, #8]
 8012832:	4613      	mov	r3, r2
 8012834:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012836:	79fb      	ldrb	r3, [r7, #7]
 8012838:	2b02      	cmp	r3, #2
 801283a:	d165      	bne.n	8012908 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801283c:	68bb      	ldr	r3, [r7, #8]
 801283e:	4a41      	ldr	r2, [pc, #260]	; (8012944 <USB_SetTurnaroundTime+0x11c>)
 8012840:	4293      	cmp	r3, r2
 8012842:	d906      	bls.n	8012852 <USB_SetTurnaroundTime+0x2a>
 8012844:	68bb      	ldr	r3, [r7, #8]
 8012846:	4a40      	ldr	r2, [pc, #256]	; (8012948 <USB_SetTurnaroundTime+0x120>)
 8012848:	4293      	cmp	r3, r2
 801284a:	d202      	bcs.n	8012852 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801284c:	230f      	movs	r3, #15
 801284e:	617b      	str	r3, [r7, #20]
 8012850:	e062      	b.n	8012918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012852:	68bb      	ldr	r3, [r7, #8]
 8012854:	4a3c      	ldr	r2, [pc, #240]	; (8012948 <USB_SetTurnaroundTime+0x120>)
 8012856:	4293      	cmp	r3, r2
 8012858:	d306      	bcc.n	8012868 <USB_SetTurnaroundTime+0x40>
 801285a:	68bb      	ldr	r3, [r7, #8]
 801285c:	4a3b      	ldr	r2, [pc, #236]	; (801294c <USB_SetTurnaroundTime+0x124>)
 801285e:	4293      	cmp	r3, r2
 8012860:	d202      	bcs.n	8012868 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012862:	230e      	movs	r3, #14
 8012864:	617b      	str	r3, [r7, #20]
 8012866:	e057      	b.n	8012918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012868:	68bb      	ldr	r3, [r7, #8]
 801286a:	4a38      	ldr	r2, [pc, #224]	; (801294c <USB_SetTurnaroundTime+0x124>)
 801286c:	4293      	cmp	r3, r2
 801286e:	d306      	bcc.n	801287e <USB_SetTurnaroundTime+0x56>
 8012870:	68bb      	ldr	r3, [r7, #8]
 8012872:	4a37      	ldr	r2, [pc, #220]	; (8012950 <USB_SetTurnaroundTime+0x128>)
 8012874:	4293      	cmp	r3, r2
 8012876:	d202      	bcs.n	801287e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012878:	230d      	movs	r3, #13
 801287a:	617b      	str	r3, [r7, #20]
 801287c:	e04c      	b.n	8012918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801287e:	68bb      	ldr	r3, [r7, #8]
 8012880:	4a33      	ldr	r2, [pc, #204]	; (8012950 <USB_SetTurnaroundTime+0x128>)
 8012882:	4293      	cmp	r3, r2
 8012884:	d306      	bcc.n	8012894 <USB_SetTurnaroundTime+0x6c>
 8012886:	68bb      	ldr	r3, [r7, #8]
 8012888:	4a32      	ldr	r2, [pc, #200]	; (8012954 <USB_SetTurnaroundTime+0x12c>)
 801288a:	4293      	cmp	r3, r2
 801288c:	d802      	bhi.n	8012894 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801288e:	230c      	movs	r3, #12
 8012890:	617b      	str	r3, [r7, #20]
 8012892:	e041      	b.n	8012918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012894:	68bb      	ldr	r3, [r7, #8]
 8012896:	4a2f      	ldr	r2, [pc, #188]	; (8012954 <USB_SetTurnaroundTime+0x12c>)
 8012898:	4293      	cmp	r3, r2
 801289a:	d906      	bls.n	80128aa <USB_SetTurnaroundTime+0x82>
 801289c:	68bb      	ldr	r3, [r7, #8]
 801289e:	4a2e      	ldr	r2, [pc, #184]	; (8012958 <USB_SetTurnaroundTime+0x130>)
 80128a0:	4293      	cmp	r3, r2
 80128a2:	d802      	bhi.n	80128aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80128a4:	230b      	movs	r3, #11
 80128a6:	617b      	str	r3, [r7, #20]
 80128a8:	e036      	b.n	8012918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80128aa:	68bb      	ldr	r3, [r7, #8]
 80128ac:	4a2a      	ldr	r2, [pc, #168]	; (8012958 <USB_SetTurnaroundTime+0x130>)
 80128ae:	4293      	cmp	r3, r2
 80128b0:	d906      	bls.n	80128c0 <USB_SetTurnaroundTime+0x98>
 80128b2:	68bb      	ldr	r3, [r7, #8]
 80128b4:	4a29      	ldr	r2, [pc, #164]	; (801295c <USB_SetTurnaroundTime+0x134>)
 80128b6:	4293      	cmp	r3, r2
 80128b8:	d802      	bhi.n	80128c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80128ba:	230a      	movs	r3, #10
 80128bc:	617b      	str	r3, [r7, #20]
 80128be:	e02b      	b.n	8012918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80128c0:	68bb      	ldr	r3, [r7, #8]
 80128c2:	4a26      	ldr	r2, [pc, #152]	; (801295c <USB_SetTurnaroundTime+0x134>)
 80128c4:	4293      	cmp	r3, r2
 80128c6:	d906      	bls.n	80128d6 <USB_SetTurnaroundTime+0xae>
 80128c8:	68bb      	ldr	r3, [r7, #8]
 80128ca:	4a25      	ldr	r2, [pc, #148]	; (8012960 <USB_SetTurnaroundTime+0x138>)
 80128cc:	4293      	cmp	r3, r2
 80128ce:	d202      	bcs.n	80128d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80128d0:	2309      	movs	r3, #9
 80128d2:	617b      	str	r3, [r7, #20]
 80128d4:	e020      	b.n	8012918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80128d6:	68bb      	ldr	r3, [r7, #8]
 80128d8:	4a21      	ldr	r2, [pc, #132]	; (8012960 <USB_SetTurnaroundTime+0x138>)
 80128da:	4293      	cmp	r3, r2
 80128dc:	d306      	bcc.n	80128ec <USB_SetTurnaroundTime+0xc4>
 80128de:	68bb      	ldr	r3, [r7, #8]
 80128e0:	4a20      	ldr	r2, [pc, #128]	; (8012964 <USB_SetTurnaroundTime+0x13c>)
 80128e2:	4293      	cmp	r3, r2
 80128e4:	d802      	bhi.n	80128ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80128e6:	2308      	movs	r3, #8
 80128e8:	617b      	str	r3, [r7, #20]
 80128ea:	e015      	b.n	8012918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80128ec:	68bb      	ldr	r3, [r7, #8]
 80128ee:	4a1d      	ldr	r2, [pc, #116]	; (8012964 <USB_SetTurnaroundTime+0x13c>)
 80128f0:	4293      	cmp	r3, r2
 80128f2:	d906      	bls.n	8012902 <USB_SetTurnaroundTime+0xda>
 80128f4:	68bb      	ldr	r3, [r7, #8]
 80128f6:	4a1c      	ldr	r2, [pc, #112]	; (8012968 <USB_SetTurnaroundTime+0x140>)
 80128f8:	4293      	cmp	r3, r2
 80128fa:	d202      	bcs.n	8012902 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80128fc:	2307      	movs	r3, #7
 80128fe:	617b      	str	r3, [r7, #20]
 8012900:	e00a      	b.n	8012918 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012902:	2306      	movs	r3, #6
 8012904:	617b      	str	r3, [r7, #20]
 8012906:	e007      	b.n	8012918 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012908:	79fb      	ldrb	r3, [r7, #7]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d102      	bne.n	8012914 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801290e:	2309      	movs	r3, #9
 8012910:	617b      	str	r3, [r7, #20]
 8012912:	e001      	b.n	8012918 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012914:	2309      	movs	r3, #9
 8012916:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	68db      	ldr	r3, [r3, #12]
 801291c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	68da      	ldr	r2, [r3, #12]
 8012928:	697b      	ldr	r3, [r7, #20]
 801292a:	029b      	lsls	r3, r3, #10
 801292c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012930:	431a      	orrs	r2, r3
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012936:	2300      	movs	r3, #0
}
 8012938:	4618      	mov	r0, r3
 801293a:	371c      	adds	r7, #28
 801293c:	46bd      	mov	sp, r7
 801293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012942:	4770      	bx	lr
 8012944:	00d8acbf 	.word	0x00d8acbf
 8012948:	00e4e1c0 	.word	0x00e4e1c0
 801294c:	00f42400 	.word	0x00f42400
 8012950:	01067380 	.word	0x01067380
 8012954:	011a499f 	.word	0x011a499f
 8012958:	01312cff 	.word	0x01312cff
 801295c:	014ca43f 	.word	0x014ca43f
 8012960:	016e3600 	.word	0x016e3600
 8012964:	01a6ab1f 	.word	0x01a6ab1f
 8012968:	01e84800 	.word	0x01e84800

0801296c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801296c:	b480      	push	{r7}
 801296e:	b083      	sub	sp, #12
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	689b      	ldr	r3, [r3, #8]
 8012978:	f043 0201 	orr.w	r2, r3, #1
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012980:	2300      	movs	r3, #0
}
 8012982:	4618      	mov	r0, r3
 8012984:	370c      	adds	r7, #12
 8012986:	46bd      	mov	sp, r7
 8012988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298c:	4770      	bx	lr

0801298e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801298e:	b480      	push	{r7}
 8012990:	b083      	sub	sp, #12
 8012992:	af00      	add	r7, sp, #0
 8012994:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	689b      	ldr	r3, [r3, #8]
 801299a:	f023 0201 	bic.w	r2, r3, #1
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80129a2:	2300      	movs	r3, #0
}
 80129a4:	4618      	mov	r0, r3
 80129a6:	370c      	adds	r7, #12
 80129a8:	46bd      	mov	sp, r7
 80129aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ae:	4770      	bx	lr

080129b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b084      	sub	sp, #16
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]
 80129b8:	460b      	mov	r3, r1
 80129ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80129bc:	2300      	movs	r3, #0
 80129be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	68db      	ldr	r3, [r3, #12]
 80129c4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80129cc:	78fb      	ldrb	r3, [r7, #3]
 80129ce:	2b01      	cmp	r3, #1
 80129d0:	d115      	bne.n	80129fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	68db      	ldr	r3, [r3, #12]
 80129d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80129de:	2001      	movs	r0, #1
 80129e0:	f7f0 ff16 	bl	8003810 <HAL_Delay>
      ms++;
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	3301      	adds	r3, #1
 80129e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80129ea:	6878      	ldr	r0, [r7, #4]
 80129ec:	f001 f93f 	bl	8013c6e <USB_GetMode>
 80129f0:	4603      	mov	r3, r0
 80129f2:	2b01      	cmp	r3, #1
 80129f4:	d01e      	beq.n	8012a34 <USB_SetCurrentMode+0x84>
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	2b31      	cmp	r3, #49	; 0x31
 80129fa:	d9f0      	bls.n	80129de <USB_SetCurrentMode+0x2e>
 80129fc:	e01a      	b.n	8012a34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80129fe:	78fb      	ldrb	r3, [r7, #3]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d115      	bne.n	8012a30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	68db      	ldr	r3, [r3, #12]
 8012a08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012a10:	2001      	movs	r0, #1
 8012a12:	f7f0 fefd 	bl	8003810 <HAL_Delay>
      ms++;
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	3301      	adds	r3, #1
 8012a1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8012a1c:	6878      	ldr	r0, [r7, #4]
 8012a1e:	f001 f926 	bl	8013c6e <USB_GetMode>
 8012a22:	4603      	mov	r3, r0
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d005      	beq.n	8012a34 <USB_SetCurrentMode+0x84>
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	2b31      	cmp	r3, #49	; 0x31
 8012a2c:	d9f0      	bls.n	8012a10 <USB_SetCurrentMode+0x60>
 8012a2e:	e001      	b.n	8012a34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012a30:	2301      	movs	r3, #1
 8012a32:	e005      	b.n	8012a40 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	2b32      	cmp	r3, #50	; 0x32
 8012a38:	d101      	bne.n	8012a3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012a3a:	2301      	movs	r3, #1
 8012a3c:	e000      	b.n	8012a40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012a3e:	2300      	movs	r3, #0
}
 8012a40:	4618      	mov	r0, r3
 8012a42:	3710      	adds	r7, #16
 8012a44:	46bd      	mov	sp, r7
 8012a46:	bd80      	pop	{r7, pc}

08012a48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012a48:	b084      	sub	sp, #16
 8012a4a:	b580      	push	{r7, lr}
 8012a4c:	b086      	sub	sp, #24
 8012a4e:	af00      	add	r7, sp, #0
 8012a50:	6078      	str	r0, [r7, #4]
 8012a52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012a56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012a5a:	2300      	movs	r3, #0
 8012a5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012a62:	2300      	movs	r3, #0
 8012a64:	613b      	str	r3, [r7, #16]
 8012a66:	e009      	b.n	8012a7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012a68:	687a      	ldr	r2, [r7, #4]
 8012a6a:	693b      	ldr	r3, [r7, #16]
 8012a6c:	3340      	adds	r3, #64	; 0x40
 8012a6e:	009b      	lsls	r3, r3, #2
 8012a70:	4413      	add	r3, r2
 8012a72:	2200      	movs	r2, #0
 8012a74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012a76:	693b      	ldr	r3, [r7, #16]
 8012a78:	3301      	adds	r3, #1
 8012a7a:	613b      	str	r3, [r7, #16]
 8012a7c:	693b      	ldr	r3, [r7, #16]
 8012a7e:	2b0e      	cmp	r3, #14
 8012a80:	d9f2      	bls.n	8012a68 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d11c      	bne.n	8012ac2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a8e:	685b      	ldr	r3, [r3, #4]
 8012a90:	68fa      	ldr	r2, [r7, #12]
 8012a92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012a96:	f043 0302 	orr.w	r3, r3, #2
 8012a9a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012aa0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	601a      	str	r2, [r3, #0]
 8012ac0:	e005      	b.n	8012ace <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ac6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012ad4:	461a      	mov	r2, r3
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ae0:	4619      	mov	r1, r3
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ae8:	461a      	mov	r2, r3
 8012aea:	680b      	ldr	r3, [r1, #0]
 8012aec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012af0:	2b01      	cmp	r3, #1
 8012af2:	d10c      	bne.n	8012b0e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d104      	bne.n	8012b04 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012afa:	2100      	movs	r1, #0
 8012afc:	6878      	ldr	r0, [r7, #4]
 8012afe:	f000 f965 	bl	8012dcc <USB_SetDevSpeed>
 8012b02:	e008      	b.n	8012b16 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012b04:	2101      	movs	r1, #1
 8012b06:	6878      	ldr	r0, [r7, #4]
 8012b08:	f000 f960 	bl	8012dcc <USB_SetDevSpeed>
 8012b0c:	e003      	b.n	8012b16 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012b0e:	2103      	movs	r1, #3
 8012b10:	6878      	ldr	r0, [r7, #4]
 8012b12:	f000 f95b 	bl	8012dcc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012b16:	2110      	movs	r1, #16
 8012b18:	6878      	ldr	r0, [r7, #4]
 8012b1a:	f000 f8f3 	bl	8012d04 <USB_FlushTxFifo>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d001      	beq.n	8012b28 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8012b24:	2301      	movs	r3, #1
 8012b26:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012b28:	6878      	ldr	r0, [r7, #4]
 8012b2a:	f000 f91f 	bl	8012d6c <USB_FlushRxFifo>
 8012b2e:	4603      	mov	r3, r0
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d001      	beq.n	8012b38 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8012b34:	2301      	movs	r3, #1
 8012b36:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b3e:	461a      	mov	r2, r3
 8012b40:	2300      	movs	r3, #0
 8012b42:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b4a:	461a      	mov	r2, r3
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b56:	461a      	mov	r2, r3
 8012b58:	2300      	movs	r3, #0
 8012b5a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	613b      	str	r3, [r7, #16]
 8012b60:	e043      	b.n	8012bea <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012b62:	693b      	ldr	r3, [r7, #16]
 8012b64:	015a      	lsls	r2, r3, #5
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	4413      	add	r3, r2
 8012b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012b74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012b78:	d118      	bne.n	8012bac <USB_DevInit+0x164>
    {
      if (i == 0U)
 8012b7a:	693b      	ldr	r3, [r7, #16]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d10a      	bne.n	8012b96 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012b80:	693b      	ldr	r3, [r7, #16]
 8012b82:	015a      	lsls	r2, r3, #5
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	4413      	add	r3, r2
 8012b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b8c:	461a      	mov	r2, r3
 8012b8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012b92:	6013      	str	r3, [r2, #0]
 8012b94:	e013      	b.n	8012bbe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012b96:	693b      	ldr	r3, [r7, #16]
 8012b98:	015a      	lsls	r2, r3, #5
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	4413      	add	r3, r2
 8012b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ba2:	461a      	mov	r2, r3
 8012ba4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012ba8:	6013      	str	r3, [r2, #0]
 8012baa:	e008      	b.n	8012bbe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012bac:	693b      	ldr	r3, [r7, #16]
 8012bae:	015a      	lsls	r2, r3, #5
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	4413      	add	r3, r2
 8012bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012bb8:	461a      	mov	r2, r3
 8012bba:	2300      	movs	r3, #0
 8012bbc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012bbe:	693b      	ldr	r3, [r7, #16]
 8012bc0:	015a      	lsls	r2, r3, #5
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	4413      	add	r3, r2
 8012bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012bca:	461a      	mov	r2, r3
 8012bcc:	2300      	movs	r3, #0
 8012bce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012bd0:	693b      	ldr	r3, [r7, #16]
 8012bd2:	015a      	lsls	r2, r3, #5
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	4413      	add	r3, r2
 8012bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012bdc:	461a      	mov	r2, r3
 8012bde:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012be2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012be4:	693b      	ldr	r3, [r7, #16]
 8012be6:	3301      	adds	r3, #1
 8012be8:	613b      	str	r3, [r7, #16]
 8012bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bec:	693a      	ldr	r2, [r7, #16]
 8012bee:	429a      	cmp	r2, r3
 8012bf0:	d3b7      	bcc.n	8012b62 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	613b      	str	r3, [r7, #16]
 8012bf6:	e043      	b.n	8012c80 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012bf8:	693b      	ldr	r3, [r7, #16]
 8012bfa:	015a      	lsls	r2, r3, #5
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	4413      	add	r3, r2
 8012c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012c0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012c0e:	d118      	bne.n	8012c42 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012c10:	693b      	ldr	r3, [r7, #16]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d10a      	bne.n	8012c2c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012c16:	693b      	ldr	r3, [r7, #16]
 8012c18:	015a      	lsls	r2, r3, #5
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	4413      	add	r3, r2
 8012c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c22:	461a      	mov	r2, r3
 8012c24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012c28:	6013      	str	r3, [r2, #0]
 8012c2a:	e013      	b.n	8012c54 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012c2c:	693b      	ldr	r3, [r7, #16]
 8012c2e:	015a      	lsls	r2, r3, #5
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	4413      	add	r3, r2
 8012c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c38:	461a      	mov	r2, r3
 8012c3a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012c3e:	6013      	str	r3, [r2, #0]
 8012c40:	e008      	b.n	8012c54 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012c42:	693b      	ldr	r3, [r7, #16]
 8012c44:	015a      	lsls	r2, r3, #5
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	4413      	add	r3, r2
 8012c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c4e:	461a      	mov	r2, r3
 8012c50:	2300      	movs	r3, #0
 8012c52:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012c54:	693b      	ldr	r3, [r7, #16]
 8012c56:	015a      	lsls	r2, r3, #5
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	4413      	add	r3, r2
 8012c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c60:	461a      	mov	r2, r3
 8012c62:	2300      	movs	r3, #0
 8012c64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012c66:	693b      	ldr	r3, [r7, #16]
 8012c68:	015a      	lsls	r2, r3, #5
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	4413      	add	r3, r2
 8012c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c72:	461a      	mov	r2, r3
 8012c74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012c78:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012c7a:	693b      	ldr	r3, [r7, #16]
 8012c7c:	3301      	adds	r3, #1
 8012c7e:	613b      	str	r3, [r7, #16]
 8012c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c82:	693a      	ldr	r2, [r7, #16]
 8012c84:	429a      	cmp	r2, r3
 8012c86:	d3b7      	bcc.n	8012bf8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c8e:	691b      	ldr	r3, [r3, #16]
 8012c90:	68fa      	ldr	r2, [r7, #12]
 8012c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012c96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012c9a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	2200      	movs	r2, #0
 8012ca0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012ca8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d105      	bne.n	8012cbc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	699b      	ldr	r3, [r3, #24]
 8012cb4:	f043 0210 	orr.w	r2, r3, #16
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	699a      	ldr	r2, [r3, #24]
 8012cc0:	4b0e      	ldr	r3, [pc, #56]	; (8012cfc <USB_DevInit+0x2b4>)
 8012cc2:	4313      	orrs	r3, r2
 8012cc4:	687a      	ldr	r2, [r7, #4]
 8012cc6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d005      	beq.n	8012cda <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	699b      	ldr	r3, [r3, #24]
 8012cd2:	f043 0208 	orr.w	r2, r3, #8
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cdc:	2b01      	cmp	r3, #1
 8012cde:	d105      	bne.n	8012cec <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	699a      	ldr	r2, [r3, #24]
 8012ce4:	4b06      	ldr	r3, [pc, #24]	; (8012d00 <USB_DevInit+0x2b8>)
 8012ce6:	4313      	orrs	r3, r2
 8012ce8:	687a      	ldr	r2, [r7, #4]
 8012cea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8012cee:	4618      	mov	r0, r3
 8012cf0:	3718      	adds	r7, #24
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012cf8:	b004      	add	sp, #16
 8012cfa:	4770      	bx	lr
 8012cfc:	803c3800 	.word	0x803c3800
 8012d00:	40000004 	.word	0x40000004

08012d04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012d04:	b480      	push	{r7}
 8012d06:	b085      	sub	sp, #20
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
 8012d0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012d0e:	2300      	movs	r3, #0
 8012d10:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	3301      	adds	r3, #1
 8012d16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	4a13      	ldr	r2, [pc, #76]	; (8012d68 <USB_FlushTxFifo+0x64>)
 8012d1c:	4293      	cmp	r3, r2
 8012d1e:	d901      	bls.n	8012d24 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012d20:	2303      	movs	r3, #3
 8012d22:	e01b      	b.n	8012d5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	691b      	ldr	r3, [r3, #16]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	daf2      	bge.n	8012d12 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012d30:	683b      	ldr	r3, [r7, #0]
 8012d32:	019b      	lsls	r3, r3, #6
 8012d34:	f043 0220 	orr.w	r2, r3, #32
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	3301      	adds	r3, #1
 8012d40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	4a08      	ldr	r2, [pc, #32]	; (8012d68 <USB_FlushTxFifo+0x64>)
 8012d46:	4293      	cmp	r3, r2
 8012d48:	d901      	bls.n	8012d4e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012d4a:	2303      	movs	r3, #3
 8012d4c:	e006      	b.n	8012d5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	691b      	ldr	r3, [r3, #16]
 8012d52:	f003 0320 	and.w	r3, r3, #32
 8012d56:	2b20      	cmp	r3, #32
 8012d58:	d0f0      	beq.n	8012d3c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012d5a:	2300      	movs	r3, #0
}
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	3714      	adds	r7, #20
 8012d60:	46bd      	mov	sp, r7
 8012d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d66:	4770      	bx	lr
 8012d68:	00030d40 	.word	0x00030d40

08012d6c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012d6c:	b480      	push	{r7}
 8012d6e:	b085      	sub	sp, #20
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012d74:	2300      	movs	r3, #0
 8012d76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	3301      	adds	r3, #1
 8012d7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	4a11      	ldr	r2, [pc, #68]	; (8012dc8 <USB_FlushRxFifo+0x5c>)
 8012d82:	4293      	cmp	r3, r2
 8012d84:	d901      	bls.n	8012d8a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8012d86:	2303      	movs	r3, #3
 8012d88:	e018      	b.n	8012dbc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	691b      	ldr	r3, [r3, #16]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	daf2      	bge.n	8012d78 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8012d92:	2300      	movs	r3, #0
 8012d94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	2210      	movs	r2, #16
 8012d9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	3301      	adds	r3, #1
 8012da0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	4a08      	ldr	r2, [pc, #32]	; (8012dc8 <USB_FlushRxFifo+0x5c>)
 8012da6:	4293      	cmp	r3, r2
 8012da8:	d901      	bls.n	8012dae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012daa:	2303      	movs	r3, #3
 8012dac:	e006      	b.n	8012dbc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	691b      	ldr	r3, [r3, #16]
 8012db2:	f003 0310 	and.w	r3, r3, #16
 8012db6:	2b10      	cmp	r3, #16
 8012db8:	d0f0      	beq.n	8012d9c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012dba:	2300      	movs	r3, #0
}
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	3714      	adds	r7, #20
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc6:	4770      	bx	lr
 8012dc8:	00030d40 	.word	0x00030d40

08012dcc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012dcc:	b480      	push	{r7}
 8012dce:	b085      	sub	sp, #20
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
 8012dd4:	460b      	mov	r3, r1
 8012dd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012de2:	681a      	ldr	r2, [r3, #0]
 8012de4:	78fb      	ldrb	r3, [r7, #3]
 8012de6:	68f9      	ldr	r1, [r7, #12]
 8012de8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012dec:	4313      	orrs	r3, r2
 8012dee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012df0:	2300      	movs	r3, #0
}
 8012df2:	4618      	mov	r0, r3
 8012df4:	3714      	adds	r7, #20
 8012df6:	46bd      	mov	sp, r7
 8012df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfc:	4770      	bx	lr

08012dfe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8012dfe:	b480      	push	{r7}
 8012e00:	b087      	sub	sp, #28
 8012e02:	af00      	add	r7, sp, #0
 8012e04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012e0a:	693b      	ldr	r3, [r7, #16]
 8012e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e10:	689b      	ldr	r3, [r3, #8]
 8012e12:	f003 0306 	and.w	r3, r3, #6
 8012e16:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d102      	bne.n	8012e24 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8012e1e:	2300      	movs	r3, #0
 8012e20:	75fb      	strb	r3, [r7, #23]
 8012e22:	e00a      	b.n	8012e3a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	2b02      	cmp	r3, #2
 8012e28:	d002      	beq.n	8012e30 <USB_GetDevSpeed+0x32>
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	2b06      	cmp	r3, #6
 8012e2e:	d102      	bne.n	8012e36 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012e30:	2302      	movs	r3, #2
 8012e32:	75fb      	strb	r3, [r7, #23]
 8012e34:	e001      	b.n	8012e3a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012e36:	230f      	movs	r3, #15
 8012e38:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	371c      	adds	r7, #28
 8012e40:	46bd      	mov	sp, r7
 8012e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e46:	4770      	bx	lr

08012e48 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012e48:	b480      	push	{r7}
 8012e4a:	b085      	sub	sp, #20
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	6078      	str	r0, [r7, #4]
 8012e50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012e56:	683b      	ldr	r3, [r7, #0]
 8012e58:	781b      	ldrb	r3, [r3, #0]
 8012e5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012e5c:	683b      	ldr	r3, [r7, #0]
 8012e5e:	785b      	ldrb	r3, [r3, #1]
 8012e60:	2b01      	cmp	r3, #1
 8012e62:	d139      	bne.n	8012ed8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e6a:	69da      	ldr	r2, [r3, #28]
 8012e6c:	683b      	ldr	r3, [r7, #0]
 8012e6e:	781b      	ldrb	r3, [r3, #0]
 8012e70:	f003 030f 	and.w	r3, r3, #15
 8012e74:	2101      	movs	r1, #1
 8012e76:	fa01 f303 	lsl.w	r3, r1, r3
 8012e7a:	b29b      	uxth	r3, r3
 8012e7c:	68f9      	ldr	r1, [r7, #12]
 8012e7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012e82:	4313      	orrs	r3, r2
 8012e84:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8012e86:	68bb      	ldr	r3, [r7, #8]
 8012e88:	015a      	lsls	r2, r3, #5
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	4413      	add	r3, r2
 8012e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d153      	bne.n	8012f44 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012e9c:	68bb      	ldr	r3, [r7, #8]
 8012e9e:	015a      	lsls	r2, r3, #5
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	4413      	add	r3, r2
 8012ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ea8:	681a      	ldr	r2, [r3, #0]
 8012eaa:	683b      	ldr	r3, [r7, #0]
 8012eac:	689b      	ldr	r3, [r3, #8]
 8012eae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012eb2:	683b      	ldr	r3, [r7, #0]
 8012eb4:	791b      	ldrb	r3, [r3, #4]
 8012eb6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012eb8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012eba:	68bb      	ldr	r3, [r7, #8]
 8012ebc:	059b      	lsls	r3, r3, #22
 8012ebe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012ec0:	431a      	orrs	r2, r3
 8012ec2:	68bb      	ldr	r3, [r7, #8]
 8012ec4:	0159      	lsls	r1, r3, #5
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	440b      	add	r3, r1
 8012eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ece:	4619      	mov	r1, r3
 8012ed0:	4b20      	ldr	r3, [pc, #128]	; (8012f54 <USB_ActivateEndpoint+0x10c>)
 8012ed2:	4313      	orrs	r3, r2
 8012ed4:	600b      	str	r3, [r1, #0]
 8012ed6:	e035      	b.n	8012f44 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ede:	69da      	ldr	r2, [r3, #28]
 8012ee0:	683b      	ldr	r3, [r7, #0]
 8012ee2:	781b      	ldrb	r3, [r3, #0]
 8012ee4:	f003 030f 	and.w	r3, r3, #15
 8012ee8:	2101      	movs	r1, #1
 8012eea:	fa01 f303 	lsl.w	r3, r1, r3
 8012eee:	041b      	lsls	r3, r3, #16
 8012ef0:	68f9      	ldr	r1, [r7, #12]
 8012ef2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012ef6:	4313      	orrs	r3, r2
 8012ef8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012efa:	68bb      	ldr	r3, [r7, #8]
 8012efc:	015a      	lsls	r2, r3, #5
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	4413      	add	r3, r2
 8012f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d119      	bne.n	8012f44 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012f10:	68bb      	ldr	r3, [r7, #8]
 8012f12:	015a      	lsls	r2, r3, #5
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	4413      	add	r3, r2
 8012f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f1c:	681a      	ldr	r2, [r3, #0]
 8012f1e:	683b      	ldr	r3, [r7, #0]
 8012f20:	689b      	ldr	r3, [r3, #8]
 8012f22:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012f26:	683b      	ldr	r3, [r7, #0]
 8012f28:	791b      	ldrb	r3, [r3, #4]
 8012f2a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012f2c:	430b      	orrs	r3, r1
 8012f2e:	431a      	orrs	r2, r3
 8012f30:	68bb      	ldr	r3, [r7, #8]
 8012f32:	0159      	lsls	r1, r3, #5
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	440b      	add	r3, r1
 8012f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f3c:	4619      	mov	r1, r3
 8012f3e:	4b05      	ldr	r3, [pc, #20]	; (8012f54 <USB_ActivateEndpoint+0x10c>)
 8012f40:	4313      	orrs	r3, r2
 8012f42:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012f44:	2300      	movs	r3, #0
}
 8012f46:	4618      	mov	r0, r3
 8012f48:	3714      	adds	r7, #20
 8012f4a:	46bd      	mov	sp, r7
 8012f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f50:	4770      	bx	lr
 8012f52:	bf00      	nop
 8012f54:	10008000 	.word	0x10008000

08012f58 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012f58:	b480      	push	{r7}
 8012f5a:	b085      	sub	sp, #20
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
 8012f60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012f66:	683b      	ldr	r3, [r7, #0]
 8012f68:	781b      	ldrb	r3, [r3, #0]
 8012f6a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012f6c:	683b      	ldr	r3, [r7, #0]
 8012f6e:	785b      	ldrb	r3, [r3, #1]
 8012f70:	2b01      	cmp	r3, #1
 8012f72:	d161      	bne.n	8013038 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012f74:	68bb      	ldr	r3, [r7, #8]
 8012f76:	015a      	lsls	r2, r3, #5
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	4413      	add	r3, r2
 8012f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012f86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012f8a:	d11f      	bne.n	8012fcc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012f8c:	68bb      	ldr	r3, [r7, #8]
 8012f8e:	015a      	lsls	r2, r3, #5
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	4413      	add	r3, r2
 8012f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	68ba      	ldr	r2, [r7, #8]
 8012f9c:	0151      	lsls	r1, r2, #5
 8012f9e:	68fa      	ldr	r2, [r7, #12]
 8012fa0:	440a      	add	r2, r1
 8012fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012fa6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012faa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012fac:	68bb      	ldr	r3, [r7, #8]
 8012fae:	015a      	lsls	r2, r3, #5
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	4413      	add	r3, r2
 8012fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	68ba      	ldr	r2, [r7, #8]
 8012fbc:	0151      	lsls	r1, r2, #5
 8012fbe:	68fa      	ldr	r2, [r7, #12]
 8012fc0:	440a      	add	r2, r1
 8012fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012fc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012fca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012fd4:	683b      	ldr	r3, [r7, #0]
 8012fd6:	781b      	ldrb	r3, [r3, #0]
 8012fd8:	f003 030f 	and.w	r3, r3, #15
 8012fdc:	2101      	movs	r1, #1
 8012fde:	fa01 f303 	lsl.w	r3, r1, r3
 8012fe2:	b29b      	uxth	r3, r3
 8012fe4:	43db      	mvns	r3, r3
 8012fe6:	68f9      	ldr	r1, [r7, #12]
 8012fe8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012fec:	4013      	ands	r3, r2
 8012fee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ff6:	69da      	ldr	r2, [r3, #28]
 8012ff8:	683b      	ldr	r3, [r7, #0]
 8012ffa:	781b      	ldrb	r3, [r3, #0]
 8012ffc:	f003 030f 	and.w	r3, r3, #15
 8013000:	2101      	movs	r1, #1
 8013002:	fa01 f303 	lsl.w	r3, r1, r3
 8013006:	b29b      	uxth	r3, r3
 8013008:	43db      	mvns	r3, r3
 801300a:	68f9      	ldr	r1, [r7, #12]
 801300c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013010:	4013      	ands	r3, r2
 8013012:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013014:	68bb      	ldr	r3, [r7, #8]
 8013016:	015a      	lsls	r2, r3, #5
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	4413      	add	r3, r2
 801301c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013020:	681a      	ldr	r2, [r3, #0]
 8013022:	68bb      	ldr	r3, [r7, #8]
 8013024:	0159      	lsls	r1, r3, #5
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	440b      	add	r3, r1
 801302a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801302e:	4619      	mov	r1, r3
 8013030:	4b35      	ldr	r3, [pc, #212]	; (8013108 <USB_DeactivateEndpoint+0x1b0>)
 8013032:	4013      	ands	r3, r2
 8013034:	600b      	str	r3, [r1, #0]
 8013036:	e060      	b.n	80130fa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013038:	68bb      	ldr	r3, [r7, #8]
 801303a:	015a      	lsls	r2, r3, #5
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	4413      	add	r3, r2
 8013040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801304a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801304e:	d11f      	bne.n	8013090 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013050:	68bb      	ldr	r3, [r7, #8]
 8013052:	015a      	lsls	r2, r3, #5
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	4413      	add	r3, r2
 8013058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	68ba      	ldr	r2, [r7, #8]
 8013060:	0151      	lsls	r1, r2, #5
 8013062:	68fa      	ldr	r2, [r7, #12]
 8013064:	440a      	add	r2, r1
 8013066:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801306a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801306e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013070:	68bb      	ldr	r3, [r7, #8]
 8013072:	015a      	lsls	r2, r3, #5
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	4413      	add	r3, r2
 8013078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	68ba      	ldr	r2, [r7, #8]
 8013080:	0151      	lsls	r1, r2, #5
 8013082:	68fa      	ldr	r2, [r7, #12]
 8013084:	440a      	add	r2, r1
 8013086:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801308a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801308e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013096:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013098:	683b      	ldr	r3, [r7, #0]
 801309a:	781b      	ldrb	r3, [r3, #0]
 801309c:	f003 030f 	and.w	r3, r3, #15
 80130a0:	2101      	movs	r1, #1
 80130a2:	fa01 f303 	lsl.w	r3, r1, r3
 80130a6:	041b      	lsls	r3, r3, #16
 80130a8:	43db      	mvns	r3, r3
 80130aa:	68f9      	ldr	r1, [r7, #12]
 80130ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80130b0:	4013      	ands	r3, r2
 80130b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80130ba:	69da      	ldr	r2, [r3, #28]
 80130bc:	683b      	ldr	r3, [r7, #0]
 80130be:	781b      	ldrb	r3, [r3, #0]
 80130c0:	f003 030f 	and.w	r3, r3, #15
 80130c4:	2101      	movs	r1, #1
 80130c6:	fa01 f303 	lsl.w	r3, r1, r3
 80130ca:	041b      	lsls	r3, r3, #16
 80130cc:	43db      	mvns	r3, r3
 80130ce:	68f9      	ldr	r1, [r7, #12]
 80130d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80130d4:	4013      	ands	r3, r2
 80130d6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80130d8:	68bb      	ldr	r3, [r7, #8]
 80130da:	015a      	lsls	r2, r3, #5
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	4413      	add	r3, r2
 80130e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130e4:	681a      	ldr	r2, [r3, #0]
 80130e6:	68bb      	ldr	r3, [r7, #8]
 80130e8:	0159      	lsls	r1, r3, #5
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	440b      	add	r3, r1
 80130ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130f2:	4619      	mov	r1, r3
 80130f4:	4b05      	ldr	r3, [pc, #20]	; (801310c <USB_DeactivateEndpoint+0x1b4>)
 80130f6:	4013      	ands	r3, r2
 80130f8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80130fa:	2300      	movs	r3, #0
}
 80130fc:	4618      	mov	r0, r3
 80130fe:	3714      	adds	r7, #20
 8013100:	46bd      	mov	sp, r7
 8013102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013106:	4770      	bx	lr
 8013108:	ec337800 	.word	0xec337800
 801310c:	eff37800 	.word	0xeff37800

08013110 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013110:	b580      	push	{r7, lr}
 8013112:	b08a      	sub	sp, #40	; 0x28
 8013114:	af02      	add	r7, sp, #8
 8013116:	60f8      	str	r0, [r7, #12]
 8013118:	60b9      	str	r1, [r7, #8]
 801311a:	4613      	mov	r3, r2
 801311c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8013122:	68bb      	ldr	r3, [r7, #8]
 8013124:	781b      	ldrb	r3, [r3, #0]
 8013126:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013128:	68bb      	ldr	r3, [r7, #8]
 801312a:	785b      	ldrb	r3, [r3, #1]
 801312c:	2b01      	cmp	r3, #1
 801312e:	f040 8181 	bne.w	8013434 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8013132:	68bb      	ldr	r3, [r7, #8]
 8013134:	691b      	ldr	r3, [r3, #16]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d132      	bne.n	80131a0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801313a:	69bb      	ldr	r3, [r7, #24]
 801313c:	015a      	lsls	r2, r3, #5
 801313e:	69fb      	ldr	r3, [r7, #28]
 8013140:	4413      	add	r3, r2
 8013142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013146:	691a      	ldr	r2, [r3, #16]
 8013148:	69bb      	ldr	r3, [r7, #24]
 801314a:	0159      	lsls	r1, r3, #5
 801314c:	69fb      	ldr	r3, [r7, #28]
 801314e:	440b      	add	r3, r1
 8013150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013154:	4619      	mov	r1, r3
 8013156:	4ba5      	ldr	r3, [pc, #660]	; (80133ec <USB_EPStartXfer+0x2dc>)
 8013158:	4013      	ands	r3, r2
 801315a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801315c:	69bb      	ldr	r3, [r7, #24]
 801315e:	015a      	lsls	r2, r3, #5
 8013160:	69fb      	ldr	r3, [r7, #28]
 8013162:	4413      	add	r3, r2
 8013164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013168:	691b      	ldr	r3, [r3, #16]
 801316a:	69ba      	ldr	r2, [r7, #24]
 801316c:	0151      	lsls	r1, r2, #5
 801316e:	69fa      	ldr	r2, [r7, #28]
 8013170:	440a      	add	r2, r1
 8013172:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013176:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801317a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801317c:	69bb      	ldr	r3, [r7, #24]
 801317e:	015a      	lsls	r2, r3, #5
 8013180:	69fb      	ldr	r3, [r7, #28]
 8013182:	4413      	add	r3, r2
 8013184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013188:	691a      	ldr	r2, [r3, #16]
 801318a:	69bb      	ldr	r3, [r7, #24]
 801318c:	0159      	lsls	r1, r3, #5
 801318e:	69fb      	ldr	r3, [r7, #28]
 8013190:	440b      	add	r3, r1
 8013192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013196:	4619      	mov	r1, r3
 8013198:	4b95      	ldr	r3, [pc, #596]	; (80133f0 <USB_EPStartXfer+0x2e0>)
 801319a:	4013      	ands	r3, r2
 801319c:	610b      	str	r3, [r1, #16]
 801319e:	e092      	b.n	80132c6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80131a0:	69bb      	ldr	r3, [r7, #24]
 80131a2:	015a      	lsls	r2, r3, #5
 80131a4:	69fb      	ldr	r3, [r7, #28]
 80131a6:	4413      	add	r3, r2
 80131a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131ac:	691a      	ldr	r2, [r3, #16]
 80131ae:	69bb      	ldr	r3, [r7, #24]
 80131b0:	0159      	lsls	r1, r3, #5
 80131b2:	69fb      	ldr	r3, [r7, #28]
 80131b4:	440b      	add	r3, r1
 80131b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131ba:	4619      	mov	r1, r3
 80131bc:	4b8c      	ldr	r3, [pc, #560]	; (80133f0 <USB_EPStartXfer+0x2e0>)
 80131be:	4013      	ands	r3, r2
 80131c0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80131c2:	69bb      	ldr	r3, [r7, #24]
 80131c4:	015a      	lsls	r2, r3, #5
 80131c6:	69fb      	ldr	r3, [r7, #28]
 80131c8:	4413      	add	r3, r2
 80131ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131ce:	691a      	ldr	r2, [r3, #16]
 80131d0:	69bb      	ldr	r3, [r7, #24]
 80131d2:	0159      	lsls	r1, r3, #5
 80131d4:	69fb      	ldr	r3, [r7, #28]
 80131d6:	440b      	add	r3, r1
 80131d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131dc:	4619      	mov	r1, r3
 80131de:	4b83      	ldr	r3, [pc, #524]	; (80133ec <USB_EPStartXfer+0x2dc>)
 80131e0:	4013      	ands	r3, r2
 80131e2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80131e4:	69bb      	ldr	r3, [r7, #24]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d11a      	bne.n	8013220 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80131ea:	68bb      	ldr	r3, [r7, #8]
 80131ec:	691a      	ldr	r2, [r3, #16]
 80131ee:	68bb      	ldr	r3, [r7, #8]
 80131f0:	689b      	ldr	r3, [r3, #8]
 80131f2:	429a      	cmp	r2, r3
 80131f4:	d903      	bls.n	80131fe <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80131f6:	68bb      	ldr	r3, [r7, #8]
 80131f8:	689a      	ldr	r2, [r3, #8]
 80131fa:	68bb      	ldr	r3, [r7, #8]
 80131fc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80131fe:	69bb      	ldr	r3, [r7, #24]
 8013200:	015a      	lsls	r2, r3, #5
 8013202:	69fb      	ldr	r3, [r7, #28]
 8013204:	4413      	add	r3, r2
 8013206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801320a:	691b      	ldr	r3, [r3, #16]
 801320c:	69ba      	ldr	r2, [r7, #24]
 801320e:	0151      	lsls	r1, r2, #5
 8013210:	69fa      	ldr	r2, [r7, #28]
 8013212:	440a      	add	r2, r1
 8013214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013218:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801321c:	6113      	str	r3, [r2, #16]
 801321e:	e01b      	b.n	8013258 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013220:	69bb      	ldr	r3, [r7, #24]
 8013222:	015a      	lsls	r2, r3, #5
 8013224:	69fb      	ldr	r3, [r7, #28]
 8013226:	4413      	add	r3, r2
 8013228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801322c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801322e:	68bb      	ldr	r3, [r7, #8]
 8013230:	6919      	ldr	r1, [r3, #16]
 8013232:	68bb      	ldr	r3, [r7, #8]
 8013234:	689b      	ldr	r3, [r3, #8]
 8013236:	440b      	add	r3, r1
 8013238:	1e59      	subs	r1, r3, #1
 801323a:	68bb      	ldr	r3, [r7, #8]
 801323c:	689b      	ldr	r3, [r3, #8]
 801323e:	fbb1 f3f3 	udiv	r3, r1, r3
 8013242:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013244:	4b6b      	ldr	r3, [pc, #428]	; (80133f4 <USB_EPStartXfer+0x2e4>)
 8013246:	400b      	ands	r3, r1
 8013248:	69b9      	ldr	r1, [r7, #24]
 801324a:	0148      	lsls	r0, r1, #5
 801324c:	69f9      	ldr	r1, [r7, #28]
 801324e:	4401      	add	r1, r0
 8013250:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013254:	4313      	orrs	r3, r2
 8013256:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013258:	69bb      	ldr	r3, [r7, #24]
 801325a:	015a      	lsls	r2, r3, #5
 801325c:	69fb      	ldr	r3, [r7, #28]
 801325e:	4413      	add	r3, r2
 8013260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013264:	691a      	ldr	r2, [r3, #16]
 8013266:	68bb      	ldr	r3, [r7, #8]
 8013268:	691b      	ldr	r3, [r3, #16]
 801326a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801326e:	69b9      	ldr	r1, [r7, #24]
 8013270:	0148      	lsls	r0, r1, #5
 8013272:	69f9      	ldr	r1, [r7, #28]
 8013274:	4401      	add	r1, r0
 8013276:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801327a:	4313      	orrs	r3, r2
 801327c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801327e:	68bb      	ldr	r3, [r7, #8]
 8013280:	791b      	ldrb	r3, [r3, #4]
 8013282:	2b01      	cmp	r3, #1
 8013284:	d11f      	bne.n	80132c6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013286:	69bb      	ldr	r3, [r7, #24]
 8013288:	015a      	lsls	r2, r3, #5
 801328a:	69fb      	ldr	r3, [r7, #28]
 801328c:	4413      	add	r3, r2
 801328e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013292:	691b      	ldr	r3, [r3, #16]
 8013294:	69ba      	ldr	r2, [r7, #24]
 8013296:	0151      	lsls	r1, r2, #5
 8013298:	69fa      	ldr	r2, [r7, #28]
 801329a:	440a      	add	r2, r1
 801329c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80132a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80132a4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80132a6:	69bb      	ldr	r3, [r7, #24]
 80132a8:	015a      	lsls	r2, r3, #5
 80132aa:	69fb      	ldr	r3, [r7, #28]
 80132ac:	4413      	add	r3, r2
 80132ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132b2:	691b      	ldr	r3, [r3, #16]
 80132b4:	69ba      	ldr	r2, [r7, #24]
 80132b6:	0151      	lsls	r1, r2, #5
 80132b8:	69fa      	ldr	r2, [r7, #28]
 80132ba:	440a      	add	r2, r1
 80132bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80132c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80132c4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80132c6:	79fb      	ldrb	r3, [r7, #7]
 80132c8:	2b01      	cmp	r3, #1
 80132ca:	d14b      	bne.n	8013364 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80132cc:	68bb      	ldr	r3, [r7, #8]
 80132ce:	69db      	ldr	r3, [r3, #28]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d009      	beq.n	80132e8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80132d4:	69bb      	ldr	r3, [r7, #24]
 80132d6:	015a      	lsls	r2, r3, #5
 80132d8:	69fb      	ldr	r3, [r7, #28]
 80132da:	4413      	add	r3, r2
 80132dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132e0:	461a      	mov	r2, r3
 80132e2:	68bb      	ldr	r3, [r7, #8]
 80132e4:	69db      	ldr	r3, [r3, #28]
 80132e6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80132e8:	68bb      	ldr	r3, [r7, #8]
 80132ea:	791b      	ldrb	r3, [r3, #4]
 80132ec:	2b01      	cmp	r3, #1
 80132ee:	d128      	bne.n	8013342 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80132f0:	69fb      	ldr	r3, [r7, #28]
 80132f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80132f6:	689b      	ldr	r3, [r3, #8]
 80132f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d110      	bne.n	8013322 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013300:	69bb      	ldr	r3, [r7, #24]
 8013302:	015a      	lsls	r2, r3, #5
 8013304:	69fb      	ldr	r3, [r7, #28]
 8013306:	4413      	add	r3, r2
 8013308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	69ba      	ldr	r2, [r7, #24]
 8013310:	0151      	lsls	r1, r2, #5
 8013312:	69fa      	ldr	r2, [r7, #28]
 8013314:	440a      	add	r2, r1
 8013316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801331a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801331e:	6013      	str	r3, [r2, #0]
 8013320:	e00f      	b.n	8013342 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013322:	69bb      	ldr	r3, [r7, #24]
 8013324:	015a      	lsls	r2, r3, #5
 8013326:	69fb      	ldr	r3, [r7, #28]
 8013328:	4413      	add	r3, r2
 801332a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	69ba      	ldr	r2, [r7, #24]
 8013332:	0151      	lsls	r1, r2, #5
 8013334:	69fa      	ldr	r2, [r7, #28]
 8013336:	440a      	add	r2, r1
 8013338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801333c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013340:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013342:	69bb      	ldr	r3, [r7, #24]
 8013344:	015a      	lsls	r2, r3, #5
 8013346:	69fb      	ldr	r3, [r7, #28]
 8013348:	4413      	add	r3, r2
 801334a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	69ba      	ldr	r2, [r7, #24]
 8013352:	0151      	lsls	r1, r2, #5
 8013354:	69fa      	ldr	r2, [r7, #28]
 8013356:	440a      	add	r2, r1
 8013358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801335c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013360:	6013      	str	r3, [r2, #0]
 8013362:	e16a      	b.n	801363a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013364:	69bb      	ldr	r3, [r7, #24]
 8013366:	015a      	lsls	r2, r3, #5
 8013368:	69fb      	ldr	r3, [r7, #28]
 801336a:	4413      	add	r3, r2
 801336c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	69ba      	ldr	r2, [r7, #24]
 8013374:	0151      	lsls	r1, r2, #5
 8013376:	69fa      	ldr	r2, [r7, #28]
 8013378:	440a      	add	r2, r1
 801337a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801337e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013382:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013384:	68bb      	ldr	r3, [r7, #8]
 8013386:	791b      	ldrb	r3, [r3, #4]
 8013388:	2b01      	cmp	r3, #1
 801338a:	d015      	beq.n	80133b8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801338c:	68bb      	ldr	r3, [r7, #8]
 801338e:	691b      	ldr	r3, [r3, #16]
 8013390:	2b00      	cmp	r3, #0
 8013392:	f000 8152 	beq.w	801363a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013396:	69fb      	ldr	r3, [r7, #28]
 8013398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801339c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801339e:	68bb      	ldr	r3, [r7, #8]
 80133a0:	781b      	ldrb	r3, [r3, #0]
 80133a2:	f003 030f 	and.w	r3, r3, #15
 80133a6:	2101      	movs	r1, #1
 80133a8:	fa01 f303 	lsl.w	r3, r1, r3
 80133ac:	69f9      	ldr	r1, [r7, #28]
 80133ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80133b2:	4313      	orrs	r3, r2
 80133b4:	634b      	str	r3, [r1, #52]	; 0x34
 80133b6:	e140      	b.n	801363a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80133b8:	69fb      	ldr	r3, [r7, #28]
 80133ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80133be:	689b      	ldr	r3, [r3, #8]
 80133c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d117      	bne.n	80133f8 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80133c8:	69bb      	ldr	r3, [r7, #24]
 80133ca:	015a      	lsls	r2, r3, #5
 80133cc:	69fb      	ldr	r3, [r7, #28]
 80133ce:	4413      	add	r3, r2
 80133d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	69ba      	ldr	r2, [r7, #24]
 80133d8:	0151      	lsls	r1, r2, #5
 80133da:	69fa      	ldr	r2, [r7, #28]
 80133dc:	440a      	add	r2, r1
 80133de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80133e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80133e6:	6013      	str	r3, [r2, #0]
 80133e8:	e016      	b.n	8013418 <USB_EPStartXfer+0x308>
 80133ea:	bf00      	nop
 80133ec:	e007ffff 	.word	0xe007ffff
 80133f0:	fff80000 	.word	0xfff80000
 80133f4:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80133f8:	69bb      	ldr	r3, [r7, #24]
 80133fa:	015a      	lsls	r2, r3, #5
 80133fc:	69fb      	ldr	r3, [r7, #28]
 80133fe:	4413      	add	r3, r2
 8013400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	69ba      	ldr	r2, [r7, #24]
 8013408:	0151      	lsls	r1, r2, #5
 801340a:	69fa      	ldr	r2, [r7, #28]
 801340c:	440a      	add	r2, r1
 801340e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013416:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013418:	68bb      	ldr	r3, [r7, #8]
 801341a:	68d9      	ldr	r1, [r3, #12]
 801341c:	68bb      	ldr	r3, [r7, #8]
 801341e:	781a      	ldrb	r2, [r3, #0]
 8013420:	68bb      	ldr	r3, [r7, #8]
 8013422:	691b      	ldr	r3, [r3, #16]
 8013424:	b298      	uxth	r0, r3
 8013426:	79fb      	ldrb	r3, [r7, #7]
 8013428:	9300      	str	r3, [sp, #0]
 801342a:	4603      	mov	r3, r0
 801342c:	68f8      	ldr	r0, [r7, #12]
 801342e:	f000 f9b9 	bl	80137a4 <USB_WritePacket>
 8013432:	e102      	b.n	801363a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013434:	69bb      	ldr	r3, [r7, #24]
 8013436:	015a      	lsls	r2, r3, #5
 8013438:	69fb      	ldr	r3, [r7, #28]
 801343a:	4413      	add	r3, r2
 801343c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013440:	691a      	ldr	r2, [r3, #16]
 8013442:	69bb      	ldr	r3, [r7, #24]
 8013444:	0159      	lsls	r1, r3, #5
 8013446:	69fb      	ldr	r3, [r7, #28]
 8013448:	440b      	add	r3, r1
 801344a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801344e:	4619      	mov	r1, r3
 8013450:	4b7c      	ldr	r3, [pc, #496]	; (8013644 <USB_EPStartXfer+0x534>)
 8013452:	4013      	ands	r3, r2
 8013454:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013456:	69bb      	ldr	r3, [r7, #24]
 8013458:	015a      	lsls	r2, r3, #5
 801345a:	69fb      	ldr	r3, [r7, #28]
 801345c:	4413      	add	r3, r2
 801345e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013462:	691a      	ldr	r2, [r3, #16]
 8013464:	69bb      	ldr	r3, [r7, #24]
 8013466:	0159      	lsls	r1, r3, #5
 8013468:	69fb      	ldr	r3, [r7, #28]
 801346a:	440b      	add	r3, r1
 801346c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013470:	4619      	mov	r1, r3
 8013472:	4b75      	ldr	r3, [pc, #468]	; (8013648 <USB_EPStartXfer+0x538>)
 8013474:	4013      	ands	r3, r2
 8013476:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8013478:	69bb      	ldr	r3, [r7, #24]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d12f      	bne.n	80134de <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 801347e:	68bb      	ldr	r3, [r7, #8]
 8013480:	691b      	ldr	r3, [r3, #16]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d003      	beq.n	801348e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8013486:	68bb      	ldr	r3, [r7, #8]
 8013488:	689a      	ldr	r2, [r3, #8]
 801348a:	68bb      	ldr	r3, [r7, #8]
 801348c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 801348e:	68bb      	ldr	r3, [r7, #8]
 8013490:	689a      	ldr	r2, [r3, #8]
 8013492:	68bb      	ldr	r3, [r7, #8]
 8013494:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8013496:	69bb      	ldr	r3, [r7, #24]
 8013498:	015a      	lsls	r2, r3, #5
 801349a:	69fb      	ldr	r3, [r7, #28]
 801349c:	4413      	add	r3, r2
 801349e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134a2:	691a      	ldr	r2, [r3, #16]
 80134a4:	68bb      	ldr	r3, [r7, #8]
 80134a6:	6a1b      	ldr	r3, [r3, #32]
 80134a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80134ac:	69b9      	ldr	r1, [r7, #24]
 80134ae:	0148      	lsls	r0, r1, #5
 80134b0:	69f9      	ldr	r1, [r7, #28]
 80134b2:	4401      	add	r1, r0
 80134b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80134b8:	4313      	orrs	r3, r2
 80134ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80134bc:	69bb      	ldr	r3, [r7, #24]
 80134be:	015a      	lsls	r2, r3, #5
 80134c0:	69fb      	ldr	r3, [r7, #28]
 80134c2:	4413      	add	r3, r2
 80134c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134c8:	691b      	ldr	r3, [r3, #16]
 80134ca:	69ba      	ldr	r2, [r7, #24]
 80134cc:	0151      	lsls	r1, r2, #5
 80134ce:	69fa      	ldr	r2, [r7, #28]
 80134d0:	440a      	add	r2, r1
 80134d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80134d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80134da:	6113      	str	r3, [r2, #16]
 80134dc:	e05f      	b.n	801359e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80134de:	68bb      	ldr	r3, [r7, #8]
 80134e0:	691b      	ldr	r3, [r3, #16]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d123      	bne.n	801352e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80134e6:	69bb      	ldr	r3, [r7, #24]
 80134e8:	015a      	lsls	r2, r3, #5
 80134ea:	69fb      	ldr	r3, [r7, #28]
 80134ec:	4413      	add	r3, r2
 80134ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134f2:	691a      	ldr	r2, [r3, #16]
 80134f4:	68bb      	ldr	r3, [r7, #8]
 80134f6:	689b      	ldr	r3, [r3, #8]
 80134f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80134fc:	69b9      	ldr	r1, [r7, #24]
 80134fe:	0148      	lsls	r0, r1, #5
 8013500:	69f9      	ldr	r1, [r7, #28]
 8013502:	4401      	add	r1, r0
 8013504:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013508:	4313      	orrs	r3, r2
 801350a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801350c:	69bb      	ldr	r3, [r7, #24]
 801350e:	015a      	lsls	r2, r3, #5
 8013510:	69fb      	ldr	r3, [r7, #28]
 8013512:	4413      	add	r3, r2
 8013514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013518:	691b      	ldr	r3, [r3, #16]
 801351a:	69ba      	ldr	r2, [r7, #24]
 801351c:	0151      	lsls	r1, r2, #5
 801351e:	69fa      	ldr	r2, [r7, #28]
 8013520:	440a      	add	r2, r1
 8013522:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013526:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801352a:	6113      	str	r3, [r2, #16]
 801352c:	e037      	b.n	801359e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801352e:	68bb      	ldr	r3, [r7, #8]
 8013530:	691a      	ldr	r2, [r3, #16]
 8013532:	68bb      	ldr	r3, [r7, #8]
 8013534:	689b      	ldr	r3, [r3, #8]
 8013536:	4413      	add	r3, r2
 8013538:	1e5a      	subs	r2, r3, #1
 801353a:	68bb      	ldr	r3, [r7, #8]
 801353c:	689b      	ldr	r3, [r3, #8]
 801353e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013542:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8013544:	68bb      	ldr	r3, [r7, #8]
 8013546:	689b      	ldr	r3, [r3, #8]
 8013548:	8afa      	ldrh	r2, [r7, #22]
 801354a:	fb03 f202 	mul.w	r2, r3, r2
 801354e:	68bb      	ldr	r3, [r7, #8]
 8013550:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013552:	69bb      	ldr	r3, [r7, #24]
 8013554:	015a      	lsls	r2, r3, #5
 8013556:	69fb      	ldr	r3, [r7, #28]
 8013558:	4413      	add	r3, r2
 801355a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801355e:	691a      	ldr	r2, [r3, #16]
 8013560:	8afb      	ldrh	r3, [r7, #22]
 8013562:	04d9      	lsls	r1, r3, #19
 8013564:	4b39      	ldr	r3, [pc, #228]	; (801364c <USB_EPStartXfer+0x53c>)
 8013566:	400b      	ands	r3, r1
 8013568:	69b9      	ldr	r1, [r7, #24]
 801356a:	0148      	lsls	r0, r1, #5
 801356c:	69f9      	ldr	r1, [r7, #28]
 801356e:	4401      	add	r1, r0
 8013570:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013574:	4313      	orrs	r3, r2
 8013576:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013578:	69bb      	ldr	r3, [r7, #24]
 801357a:	015a      	lsls	r2, r3, #5
 801357c:	69fb      	ldr	r3, [r7, #28]
 801357e:	4413      	add	r3, r2
 8013580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013584:	691a      	ldr	r2, [r3, #16]
 8013586:	68bb      	ldr	r3, [r7, #8]
 8013588:	6a1b      	ldr	r3, [r3, #32]
 801358a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801358e:	69b9      	ldr	r1, [r7, #24]
 8013590:	0148      	lsls	r0, r1, #5
 8013592:	69f9      	ldr	r1, [r7, #28]
 8013594:	4401      	add	r1, r0
 8013596:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801359a:	4313      	orrs	r3, r2
 801359c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801359e:	79fb      	ldrb	r3, [r7, #7]
 80135a0:	2b01      	cmp	r3, #1
 80135a2:	d10d      	bne.n	80135c0 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80135a4:	68bb      	ldr	r3, [r7, #8]
 80135a6:	68db      	ldr	r3, [r3, #12]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d009      	beq.n	80135c0 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80135ac:	68bb      	ldr	r3, [r7, #8]
 80135ae:	68d9      	ldr	r1, [r3, #12]
 80135b0:	69bb      	ldr	r3, [r7, #24]
 80135b2:	015a      	lsls	r2, r3, #5
 80135b4:	69fb      	ldr	r3, [r7, #28]
 80135b6:	4413      	add	r3, r2
 80135b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135bc:	460a      	mov	r2, r1
 80135be:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	791b      	ldrb	r3, [r3, #4]
 80135c4:	2b01      	cmp	r3, #1
 80135c6:	d128      	bne.n	801361a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80135c8:	69fb      	ldr	r3, [r7, #28]
 80135ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80135ce:	689b      	ldr	r3, [r3, #8]
 80135d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d110      	bne.n	80135fa <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80135d8:	69bb      	ldr	r3, [r7, #24]
 80135da:	015a      	lsls	r2, r3, #5
 80135dc:	69fb      	ldr	r3, [r7, #28]
 80135de:	4413      	add	r3, r2
 80135e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	69ba      	ldr	r2, [r7, #24]
 80135e8:	0151      	lsls	r1, r2, #5
 80135ea:	69fa      	ldr	r2, [r7, #28]
 80135ec:	440a      	add	r2, r1
 80135ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80135f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80135f6:	6013      	str	r3, [r2, #0]
 80135f8:	e00f      	b.n	801361a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80135fa:	69bb      	ldr	r3, [r7, #24]
 80135fc:	015a      	lsls	r2, r3, #5
 80135fe:	69fb      	ldr	r3, [r7, #28]
 8013600:	4413      	add	r3, r2
 8013602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	69ba      	ldr	r2, [r7, #24]
 801360a:	0151      	lsls	r1, r2, #5
 801360c:	69fa      	ldr	r2, [r7, #28]
 801360e:	440a      	add	r2, r1
 8013610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013618:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801361a:	69bb      	ldr	r3, [r7, #24]
 801361c:	015a      	lsls	r2, r3, #5
 801361e:	69fb      	ldr	r3, [r7, #28]
 8013620:	4413      	add	r3, r2
 8013622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	69ba      	ldr	r2, [r7, #24]
 801362a:	0151      	lsls	r1, r2, #5
 801362c:	69fa      	ldr	r2, [r7, #28]
 801362e:	440a      	add	r2, r1
 8013630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013634:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013638:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801363a:	2300      	movs	r3, #0
}
 801363c:	4618      	mov	r0, r3
 801363e:	3720      	adds	r7, #32
 8013640:	46bd      	mov	sp, r7
 8013642:	bd80      	pop	{r7, pc}
 8013644:	fff80000 	.word	0xfff80000
 8013648:	e007ffff 	.word	0xe007ffff
 801364c:	1ff80000 	.word	0x1ff80000

08013650 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013650:	b480      	push	{r7}
 8013652:	b087      	sub	sp, #28
 8013654:	af00      	add	r7, sp, #0
 8013656:	6078      	str	r0, [r7, #4]
 8013658:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801365a:	2300      	movs	r3, #0
 801365c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801365e:	2300      	movs	r3, #0
 8013660:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013666:	683b      	ldr	r3, [r7, #0]
 8013668:	785b      	ldrb	r3, [r3, #1]
 801366a:	2b01      	cmp	r3, #1
 801366c:	d14a      	bne.n	8013704 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801366e:	683b      	ldr	r3, [r7, #0]
 8013670:	781b      	ldrb	r3, [r3, #0]
 8013672:	015a      	lsls	r2, r3, #5
 8013674:	693b      	ldr	r3, [r7, #16]
 8013676:	4413      	add	r3, r2
 8013678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013682:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013686:	f040 8086 	bne.w	8013796 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801368a:	683b      	ldr	r3, [r7, #0]
 801368c:	781b      	ldrb	r3, [r3, #0]
 801368e:	015a      	lsls	r2, r3, #5
 8013690:	693b      	ldr	r3, [r7, #16]
 8013692:	4413      	add	r3, r2
 8013694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	683a      	ldr	r2, [r7, #0]
 801369c:	7812      	ldrb	r2, [r2, #0]
 801369e:	0151      	lsls	r1, r2, #5
 80136a0:	693a      	ldr	r2, [r7, #16]
 80136a2:	440a      	add	r2, r1
 80136a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80136ac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80136ae:	683b      	ldr	r3, [r7, #0]
 80136b0:	781b      	ldrb	r3, [r3, #0]
 80136b2:	015a      	lsls	r2, r3, #5
 80136b4:	693b      	ldr	r3, [r7, #16]
 80136b6:	4413      	add	r3, r2
 80136b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	683a      	ldr	r2, [r7, #0]
 80136c0:	7812      	ldrb	r2, [r2, #0]
 80136c2:	0151      	lsls	r1, r2, #5
 80136c4:	693a      	ldr	r2, [r7, #16]
 80136c6:	440a      	add	r2, r1
 80136c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80136d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	3301      	adds	r3, #1
 80136d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	f242 7210 	movw	r2, #10000	; 0x2710
 80136de:	4293      	cmp	r3, r2
 80136e0:	d902      	bls.n	80136e8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80136e2:	2301      	movs	r3, #1
 80136e4:	75fb      	strb	r3, [r7, #23]
          break;
 80136e6:	e056      	b.n	8013796 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80136e8:	683b      	ldr	r3, [r7, #0]
 80136ea:	781b      	ldrb	r3, [r3, #0]
 80136ec:	015a      	lsls	r2, r3, #5
 80136ee:	693b      	ldr	r3, [r7, #16]
 80136f0:	4413      	add	r3, r2
 80136f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80136fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013700:	d0e7      	beq.n	80136d2 <USB_EPStopXfer+0x82>
 8013702:	e048      	b.n	8013796 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013704:	683b      	ldr	r3, [r7, #0]
 8013706:	781b      	ldrb	r3, [r3, #0]
 8013708:	015a      	lsls	r2, r3, #5
 801370a:	693b      	ldr	r3, [r7, #16]
 801370c:	4413      	add	r3, r2
 801370e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013718:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801371c:	d13b      	bne.n	8013796 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801371e:	683b      	ldr	r3, [r7, #0]
 8013720:	781b      	ldrb	r3, [r3, #0]
 8013722:	015a      	lsls	r2, r3, #5
 8013724:	693b      	ldr	r3, [r7, #16]
 8013726:	4413      	add	r3, r2
 8013728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	683a      	ldr	r2, [r7, #0]
 8013730:	7812      	ldrb	r2, [r2, #0]
 8013732:	0151      	lsls	r1, r2, #5
 8013734:	693a      	ldr	r2, [r7, #16]
 8013736:	440a      	add	r2, r1
 8013738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801373c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013740:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013742:	683b      	ldr	r3, [r7, #0]
 8013744:	781b      	ldrb	r3, [r3, #0]
 8013746:	015a      	lsls	r2, r3, #5
 8013748:	693b      	ldr	r3, [r7, #16]
 801374a:	4413      	add	r3, r2
 801374c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	683a      	ldr	r2, [r7, #0]
 8013754:	7812      	ldrb	r2, [r2, #0]
 8013756:	0151      	lsls	r1, r2, #5
 8013758:	693a      	ldr	r2, [r7, #16]
 801375a:	440a      	add	r2, r1
 801375c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013760:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013764:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	3301      	adds	r3, #1
 801376a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	f242 7210 	movw	r2, #10000	; 0x2710
 8013772:	4293      	cmp	r3, r2
 8013774:	d902      	bls.n	801377c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8013776:	2301      	movs	r3, #1
 8013778:	75fb      	strb	r3, [r7, #23]
          break;
 801377a:	e00c      	b.n	8013796 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801377c:	683b      	ldr	r3, [r7, #0]
 801377e:	781b      	ldrb	r3, [r3, #0]
 8013780:	015a      	lsls	r2, r3, #5
 8013782:	693b      	ldr	r3, [r7, #16]
 8013784:	4413      	add	r3, r2
 8013786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013790:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013794:	d0e7      	beq.n	8013766 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013796:	7dfb      	ldrb	r3, [r7, #23]
}
 8013798:	4618      	mov	r0, r3
 801379a:	371c      	adds	r7, #28
 801379c:	46bd      	mov	sp, r7
 801379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a2:	4770      	bx	lr

080137a4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80137a4:	b480      	push	{r7}
 80137a6:	b089      	sub	sp, #36	; 0x24
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	60f8      	str	r0, [r7, #12]
 80137ac:	60b9      	str	r1, [r7, #8]
 80137ae:	4611      	mov	r1, r2
 80137b0:	461a      	mov	r2, r3
 80137b2:	460b      	mov	r3, r1
 80137b4:	71fb      	strb	r3, [r7, #7]
 80137b6:	4613      	mov	r3, r2
 80137b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80137be:	68bb      	ldr	r3, [r7, #8]
 80137c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80137c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d123      	bne.n	8013812 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80137ca:	88bb      	ldrh	r3, [r7, #4]
 80137cc:	3303      	adds	r3, #3
 80137ce:	089b      	lsrs	r3, r3, #2
 80137d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80137d2:	2300      	movs	r3, #0
 80137d4:	61bb      	str	r3, [r7, #24]
 80137d6:	e018      	b.n	801380a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80137d8:	79fb      	ldrb	r3, [r7, #7]
 80137da:	031a      	lsls	r2, r3, #12
 80137dc:	697b      	ldr	r3, [r7, #20]
 80137de:	4413      	add	r3, r2
 80137e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80137e4:	461a      	mov	r2, r3
 80137e6:	69fb      	ldr	r3, [r7, #28]
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 80137ec:	69fb      	ldr	r3, [r7, #28]
 80137ee:	3301      	adds	r3, #1
 80137f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80137f2:	69fb      	ldr	r3, [r7, #28]
 80137f4:	3301      	adds	r3, #1
 80137f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80137f8:	69fb      	ldr	r3, [r7, #28]
 80137fa:	3301      	adds	r3, #1
 80137fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80137fe:	69fb      	ldr	r3, [r7, #28]
 8013800:	3301      	adds	r3, #1
 8013802:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013804:	69bb      	ldr	r3, [r7, #24]
 8013806:	3301      	adds	r3, #1
 8013808:	61bb      	str	r3, [r7, #24]
 801380a:	69ba      	ldr	r2, [r7, #24]
 801380c:	693b      	ldr	r3, [r7, #16]
 801380e:	429a      	cmp	r2, r3
 8013810:	d3e2      	bcc.n	80137d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013812:	2300      	movs	r3, #0
}
 8013814:	4618      	mov	r0, r3
 8013816:	3724      	adds	r7, #36	; 0x24
 8013818:	46bd      	mov	sp, r7
 801381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801381e:	4770      	bx	lr

08013820 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013820:	b480      	push	{r7}
 8013822:	b08b      	sub	sp, #44	; 0x2c
 8013824:	af00      	add	r7, sp, #0
 8013826:	60f8      	str	r0, [r7, #12]
 8013828:	60b9      	str	r1, [r7, #8]
 801382a:	4613      	mov	r3, r2
 801382c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013832:	68bb      	ldr	r3, [r7, #8]
 8013834:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013836:	88fb      	ldrh	r3, [r7, #6]
 8013838:	089b      	lsrs	r3, r3, #2
 801383a:	b29b      	uxth	r3, r3
 801383c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801383e:	88fb      	ldrh	r3, [r7, #6]
 8013840:	f003 0303 	and.w	r3, r3, #3
 8013844:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013846:	2300      	movs	r3, #0
 8013848:	623b      	str	r3, [r7, #32]
 801384a:	e014      	b.n	8013876 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801384c:	69bb      	ldr	r3, [r7, #24]
 801384e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013852:	681a      	ldr	r2, [r3, #0]
 8013854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013856:	601a      	str	r2, [r3, #0]
    pDest++;
 8013858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801385a:	3301      	adds	r3, #1
 801385c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013860:	3301      	adds	r3, #1
 8013862:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013866:	3301      	adds	r3, #1
 8013868:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801386c:	3301      	adds	r3, #1
 801386e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013870:	6a3b      	ldr	r3, [r7, #32]
 8013872:	3301      	adds	r3, #1
 8013874:	623b      	str	r3, [r7, #32]
 8013876:	6a3a      	ldr	r2, [r7, #32]
 8013878:	697b      	ldr	r3, [r7, #20]
 801387a:	429a      	cmp	r2, r3
 801387c:	d3e6      	bcc.n	801384c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801387e:	8bfb      	ldrh	r3, [r7, #30]
 8013880:	2b00      	cmp	r3, #0
 8013882:	d01e      	beq.n	80138c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013884:	2300      	movs	r3, #0
 8013886:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013888:	69bb      	ldr	r3, [r7, #24]
 801388a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801388e:	461a      	mov	r2, r3
 8013890:	f107 0310 	add.w	r3, r7, #16
 8013894:	6812      	ldr	r2, [r2, #0]
 8013896:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013898:	693a      	ldr	r2, [r7, #16]
 801389a:	6a3b      	ldr	r3, [r7, #32]
 801389c:	b2db      	uxtb	r3, r3
 801389e:	00db      	lsls	r3, r3, #3
 80138a0:	fa22 f303 	lsr.w	r3, r2, r3
 80138a4:	b2da      	uxtb	r2, r3
 80138a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138a8:	701a      	strb	r2, [r3, #0]
      i++;
 80138aa:	6a3b      	ldr	r3, [r7, #32]
 80138ac:	3301      	adds	r3, #1
 80138ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80138b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138b2:	3301      	adds	r3, #1
 80138b4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80138b6:	8bfb      	ldrh	r3, [r7, #30]
 80138b8:	3b01      	subs	r3, #1
 80138ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80138bc:	8bfb      	ldrh	r3, [r7, #30]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d1ea      	bne.n	8013898 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80138c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80138c4:	4618      	mov	r0, r3
 80138c6:	372c      	adds	r7, #44	; 0x2c
 80138c8:	46bd      	mov	sp, r7
 80138ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ce:	4770      	bx	lr

080138d0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80138d0:	b480      	push	{r7}
 80138d2:	b085      	sub	sp, #20
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	6078      	str	r0, [r7, #4]
 80138d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80138de:	683b      	ldr	r3, [r7, #0]
 80138e0:	781b      	ldrb	r3, [r3, #0]
 80138e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80138e4:	683b      	ldr	r3, [r7, #0]
 80138e6:	785b      	ldrb	r3, [r3, #1]
 80138e8:	2b01      	cmp	r3, #1
 80138ea:	d12c      	bne.n	8013946 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80138ec:	68bb      	ldr	r3, [r7, #8]
 80138ee:	015a      	lsls	r2, r3, #5
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	4413      	add	r3, r2
 80138f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	db12      	blt.n	8013924 <USB_EPSetStall+0x54>
 80138fe:	68bb      	ldr	r3, [r7, #8]
 8013900:	2b00      	cmp	r3, #0
 8013902:	d00f      	beq.n	8013924 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013904:	68bb      	ldr	r3, [r7, #8]
 8013906:	015a      	lsls	r2, r3, #5
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	4413      	add	r3, r2
 801390c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	68ba      	ldr	r2, [r7, #8]
 8013914:	0151      	lsls	r1, r2, #5
 8013916:	68fa      	ldr	r2, [r7, #12]
 8013918:	440a      	add	r2, r1
 801391a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801391e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013922:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013924:	68bb      	ldr	r3, [r7, #8]
 8013926:	015a      	lsls	r2, r3, #5
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	4413      	add	r3, r2
 801392c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	68ba      	ldr	r2, [r7, #8]
 8013934:	0151      	lsls	r1, r2, #5
 8013936:	68fa      	ldr	r2, [r7, #12]
 8013938:	440a      	add	r2, r1
 801393a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801393e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013942:	6013      	str	r3, [r2, #0]
 8013944:	e02b      	b.n	801399e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013946:	68bb      	ldr	r3, [r7, #8]
 8013948:	015a      	lsls	r2, r3, #5
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	4413      	add	r3, r2
 801394e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	2b00      	cmp	r3, #0
 8013956:	db12      	blt.n	801397e <USB_EPSetStall+0xae>
 8013958:	68bb      	ldr	r3, [r7, #8]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d00f      	beq.n	801397e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801395e:	68bb      	ldr	r3, [r7, #8]
 8013960:	015a      	lsls	r2, r3, #5
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	4413      	add	r3, r2
 8013966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	68ba      	ldr	r2, [r7, #8]
 801396e:	0151      	lsls	r1, r2, #5
 8013970:	68fa      	ldr	r2, [r7, #12]
 8013972:	440a      	add	r2, r1
 8013974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013978:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801397c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801397e:	68bb      	ldr	r3, [r7, #8]
 8013980:	015a      	lsls	r2, r3, #5
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	4413      	add	r3, r2
 8013986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	68ba      	ldr	r2, [r7, #8]
 801398e:	0151      	lsls	r1, r2, #5
 8013990:	68fa      	ldr	r2, [r7, #12]
 8013992:	440a      	add	r2, r1
 8013994:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013998:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801399c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801399e:	2300      	movs	r3, #0
}
 80139a0:	4618      	mov	r0, r3
 80139a2:	3714      	adds	r7, #20
 80139a4:	46bd      	mov	sp, r7
 80139a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139aa:	4770      	bx	lr

080139ac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80139ac:	b480      	push	{r7}
 80139ae:	b085      	sub	sp, #20
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	6078      	str	r0, [r7, #4]
 80139b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80139ba:	683b      	ldr	r3, [r7, #0]
 80139bc:	781b      	ldrb	r3, [r3, #0]
 80139be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80139c0:	683b      	ldr	r3, [r7, #0]
 80139c2:	785b      	ldrb	r3, [r3, #1]
 80139c4:	2b01      	cmp	r3, #1
 80139c6:	d128      	bne.n	8013a1a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80139c8:	68bb      	ldr	r3, [r7, #8]
 80139ca:	015a      	lsls	r2, r3, #5
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	4413      	add	r3, r2
 80139d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	68ba      	ldr	r2, [r7, #8]
 80139d8:	0151      	lsls	r1, r2, #5
 80139da:	68fa      	ldr	r2, [r7, #12]
 80139dc:	440a      	add	r2, r1
 80139de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80139e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80139e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80139e8:	683b      	ldr	r3, [r7, #0]
 80139ea:	791b      	ldrb	r3, [r3, #4]
 80139ec:	2b03      	cmp	r3, #3
 80139ee:	d003      	beq.n	80139f8 <USB_EPClearStall+0x4c>
 80139f0:	683b      	ldr	r3, [r7, #0]
 80139f2:	791b      	ldrb	r3, [r3, #4]
 80139f4:	2b02      	cmp	r3, #2
 80139f6:	d138      	bne.n	8013a6a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80139f8:	68bb      	ldr	r3, [r7, #8]
 80139fa:	015a      	lsls	r2, r3, #5
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	4413      	add	r3, r2
 8013a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	68ba      	ldr	r2, [r7, #8]
 8013a08:	0151      	lsls	r1, r2, #5
 8013a0a:	68fa      	ldr	r2, [r7, #12]
 8013a0c:	440a      	add	r2, r1
 8013a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013a16:	6013      	str	r3, [r2, #0]
 8013a18:	e027      	b.n	8013a6a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013a1a:	68bb      	ldr	r3, [r7, #8]
 8013a1c:	015a      	lsls	r2, r3, #5
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	4413      	add	r3, r2
 8013a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	68ba      	ldr	r2, [r7, #8]
 8013a2a:	0151      	lsls	r1, r2, #5
 8013a2c:	68fa      	ldr	r2, [r7, #12]
 8013a2e:	440a      	add	r2, r1
 8013a30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013a34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013a38:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013a3a:	683b      	ldr	r3, [r7, #0]
 8013a3c:	791b      	ldrb	r3, [r3, #4]
 8013a3e:	2b03      	cmp	r3, #3
 8013a40:	d003      	beq.n	8013a4a <USB_EPClearStall+0x9e>
 8013a42:	683b      	ldr	r3, [r7, #0]
 8013a44:	791b      	ldrb	r3, [r3, #4]
 8013a46:	2b02      	cmp	r3, #2
 8013a48:	d10f      	bne.n	8013a6a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013a4a:	68bb      	ldr	r3, [r7, #8]
 8013a4c:	015a      	lsls	r2, r3, #5
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	4413      	add	r3, r2
 8013a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	68ba      	ldr	r2, [r7, #8]
 8013a5a:	0151      	lsls	r1, r2, #5
 8013a5c:	68fa      	ldr	r2, [r7, #12]
 8013a5e:	440a      	add	r2, r1
 8013a60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013a68:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013a6a:	2300      	movs	r3, #0
}
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	3714      	adds	r7, #20
 8013a70:	46bd      	mov	sp, r7
 8013a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a76:	4770      	bx	lr

08013a78 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013a78:	b480      	push	{r7}
 8013a7a:	b085      	sub	sp, #20
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	6078      	str	r0, [r7, #4]
 8013a80:	460b      	mov	r3, r1
 8013a82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	68fa      	ldr	r2, [r7, #12]
 8013a92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013a96:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013a9a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013aa2:	681a      	ldr	r2, [r3, #0]
 8013aa4:	78fb      	ldrb	r3, [r7, #3]
 8013aa6:	011b      	lsls	r3, r3, #4
 8013aa8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013aac:	68f9      	ldr	r1, [r7, #12]
 8013aae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013ab2:	4313      	orrs	r3, r2
 8013ab4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013ab6:	2300      	movs	r3, #0
}
 8013ab8:	4618      	mov	r0, r3
 8013aba:	3714      	adds	r7, #20
 8013abc:	46bd      	mov	sp, r7
 8013abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac2:	4770      	bx	lr

08013ac4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013ac4:	b480      	push	{r7}
 8013ac6:	b085      	sub	sp, #20
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	68fa      	ldr	r2, [r7, #12]
 8013ada:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013ade:	f023 0303 	bic.w	r3, r3, #3
 8013ae2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013aea:	685b      	ldr	r3, [r3, #4]
 8013aec:	68fa      	ldr	r2, [r7, #12]
 8013aee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013af2:	f023 0302 	bic.w	r3, r3, #2
 8013af6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013af8:	2300      	movs	r3, #0
}
 8013afa:	4618      	mov	r0, r3
 8013afc:	3714      	adds	r7, #20
 8013afe:	46bd      	mov	sp, r7
 8013b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b04:	4770      	bx	lr

08013b06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013b06:	b480      	push	{r7}
 8013b08:	b085      	sub	sp, #20
 8013b0a:	af00      	add	r7, sp, #0
 8013b0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	68fa      	ldr	r2, [r7, #12]
 8013b1c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013b20:	f023 0303 	bic.w	r3, r3, #3
 8013b24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b2c:	685b      	ldr	r3, [r3, #4]
 8013b2e:	68fa      	ldr	r2, [r7, #12]
 8013b30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013b34:	f043 0302 	orr.w	r3, r3, #2
 8013b38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013b3a:	2300      	movs	r3, #0
}
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	3714      	adds	r7, #20
 8013b40:	46bd      	mov	sp, r7
 8013b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b46:	4770      	bx	lr

08013b48 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013b48:	b480      	push	{r7}
 8013b4a:	b085      	sub	sp, #20
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	695b      	ldr	r3, [r3, #20]
 8013b54:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	699b      	ldr	r3, [r3, #24]
 8013b5a:	68fa      	ldr	r2, [r7, #12]
 8013b5c:	4013      	ands	r3, r2
 8013b5e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013b60:	68fb      	ldr	r3, [r7, #12]
}
 8013b62:	4618      	mov	r0, r3
 8013b64:	3714      	adds	r7, #20
 8013b66:	46bd      	mov	sp, r7
 8013b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b6c:	4770      	bx	lr

08013b6e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013b6e:	b480      	push	{r7}
 8013b70:	b085      	sub	sp, #20
 8013b72:	af00      	add	r7, sp, #0
 8013b74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b80:	699b      	ldr	r3, [r3, #24]
 8013b82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b8a:	69db      	ldr	r3, [r3, #28]
 8013b8c:	68ba      	ldr	r2, [r7, #8]
 8013b8e:	4013      	ands	r3, r2
 8013b90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013b92:	68bb      	ldr	r3, [r7, #8]
 8013b94:	0c1b      	lsrs	r3, r3, #16
}
 8013b96:	4618      	mov	r0, r3
 8013b98:	3714      	adds	r7, #20
 8013b9a:	46bd      	mov	sp, r7
 8013b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba0:	4770      	bx	lr

08013ba2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013ba2:	b480      	push	{r7}
 8013ba4:	b085      	sub	sp, #20
 8013ba6:	af00      	add	r7, sp, #0
 8013ba8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013bb4:	699b      	ldr	r3, [r3, #24]
 8013bb6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013bbe:	69db      	ldr	r3, [r3, #28]
 8013bc0:	68ba      	ldr	r2, [r7, #8]
 8013bc2:	4013      	ands	r3, r2
 8013bc4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013bc6:	68bb      	ldr	r3, [r7, #8]
 8013bc8:	b29b      	uxth	r3, r3
}
 8013bca:	4618      	mov	r0, r3
 8013bcc:	3714      	adds	r7, #20
 8013bce:	46bd      	mov	sp, r7
 8013bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd4:	4770      	bx	lr

08013bd6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013bd6:	b480      	push	{r7}
 8013bd8:	b085      	sub	sp, #20
 8013bda:	af00      	add	r7, sp, #0
 8013bdc:	6078      	str	r0, [r7, #4]
 8013bde:	460b      	mov	r3, r1
 8013be0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013be6:	78fb      	ldrb	r3, [r7, #3]
 8013be8:	015a      	lsls	r2, r3, #5
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	4413      	add	r3, r2
 8013bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013bf2:	689b      	ldr	r3, [r3, #8]
 8013bf4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013bfc:	695b      	ldr	r3, [r3, #20]
 8013bfe:	68ba      	ldr	r2, [r7, #8]
 8013c00:	4013      	ands	r3, r2
 8013c02:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013c04:	68bb      	ldr	r3, [r7, #8]
}
 8013c06:	4618      	mov	r0, r3
 8013c08:	3714      	adds	r7, #20
 8013c0a:	46bd      	mov	sp, r7
 8013c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c10:	4770      	bx	lr

08013c12 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013c12:	b480      	push	{r7}
 8013c14:	b087      	sub	sp, #28
 8013c16:	af00      	add	r7, sp, #0
 8013c18:	6078      	str	r0, [r7, #4]
 8013c1a:	460b      	mov	r3, r1
 8013c1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013c22:	697b      	ldr	r3, [r7, #20]
 8013c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c28:	691b      	ldr	r3, [r3, #16]
 8013c2a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013c2c:	697b      	ldr	r3, [r7, #20]
 8013c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c34:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013c36:	78fb      	ldrb	r3, [r7, #3]
 8013c38:	f003 030f 	and.w	r3, r3, #15
 8013c3c:	68fa      	ldr	r2, [r7, #12]
 8013c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8013c42:	01db      	lsls	r3, r3, #7
 8013c44:	b2db      	uxtb	r3, r3
 8013c46:	693a      	ldr	r2, [r7, #16]
 8013c48:	4313      	orrs	r3, r2
 8013c4a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013c4c:	78fb      	ldrb	r3, [r7, #3]
 8013c4e:	015a      	lsls	r2, r3, #5
 8013c50:	697b      	ldr	r3, [r7, #20]
 8013c52:	4413      	add	r3, r2
 8013c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c58:	689b      	ldr	r3, [r3, #8]
 8013c5a:	693a      	ldr	r2, [r7, #16]
 8013c5c:	4013      	ands	r3, r2
 8013c5e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013c60:	68bb      	ldr	r3, [r7, #8]
}
 8013c62:	4618      	mov	r0, r3
 8013c64:	371c      	adds	r7, #28
 8013c66:	46bd      	mov	sp, r7
 8013c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c6c:	4770      	bx	lr

08013c6e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013c6e:	b480      	push	{r7}
 8013c70:	b083      	sub	sp, #12
 8013c72:	af00      	add	r7, sp, #0
 8013c74:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	695b      	ldr	r3, [r3, #20]
 8013c7a:	f003 0301 	and.w	r3, r3, #1
}
 8013c7e:	4618      	mov	r0, r3
 8013c80:	370c      	adds	r7, #12
 8013c82:	46bd      	mov	sp, r7
 8013c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c88:	4770      	bx	lr
	...

08013c8c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013c8c:	b480      	push	{r7}
 8013c8e:	b085      	sub	sp, #20
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c9e:	681a      	ldr	r2, [r3, #0]
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ca6:	4619      	mov	r1, r3
 8013ca8:	4b09      	ldr	r3, [pc, #36]	; (8013cd0 <USB_ActivateSetup+0x44>)
 8013caa:	4013      	ands	r3, r2
 8013cac:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cb4:	685b      	ldr	r3, [r3, #4]
 8013cb6:	68fa      	ldr	r2, [r7, #12]
 8013cb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013cc0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013cc2:	2300      	movs	r3, #0
}
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	3714      	adds	r7, #20
 8013cc8:	46bd      	mov	sp, r7
 8013cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cce:	4770      	bx	lr
 8013cd0:	fffff800 	.word	0xfffff800

08013cd4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8013cd4:	b480      	push	{r7}
 8013cd6:	b087      	sub	sp, #28
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	60f8      	str	r0, [r7, #12]
 8013cdc:	460b      	mov	r3, r1
 8013cde:	607a      	str	r2, [r7, #4]
 8013ce0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	333c      	adds	r3, #60	; 0x3c
 8013cea:	3304      	adds	r3, #4
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013cf0:	693b      	ldr	r3, [r7, #16]
 8013cf2:	4a26      	ldr	r2, [pc, #152]	; (8013d8c <USB_EP0_OutStart+0xb8>)
 8013cf4:	4293      	cmp	r3, r2
 8013cf6:	d90a      	bls.n	8013d0e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013cf8:	697b      	ldr	r3, [r7, #20]
 8013cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013d04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013d08:	d101      	bne.n	8013d0e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	e037      	b.n	8013d7e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013d0e:	697b      	ldr	r3, [r7, #20]
 8013d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d14:	461a      	mov	r2, r3
 8013d16:	2300      	movs	r3, #0
 8013d18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013d1a:	697b      	ldr	r3, [r7, #20]
 8013d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d20:	691b      	ldr	r3, [r3, #16]
 8013d22:	697a      	ldr	r2, [r7, #20]
 8013d24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013d2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013d2e:	697b      	ldr	r3, [r7, #20]
 8013d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d34:	691b      	ldr	r3, [r3, #16]
 8013d36:	697a      	ldr	r2, [r7, #20]
 8013d38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d3c:	f043 0318 	orr.w	r3, r3, #24
 8013d40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013d42:	697b      	ldr	r3, [r7, #20]
 8013d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d48:	691b      	ldr	r3, [r3, #16]
 8013d4a:	697a      	ldr	r2, [r7, #20]
 8013d4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d50:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013d54:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8013d56:	7afb      	ldrb	r3, [r7, #11]
 8013d58:	2b01      	cmp	r3, #1
 8013d5a:	d10f      	bne.n	8013d7c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013d5c:	697b      	ldr	r3, [r7, #20]
 8013d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d62:	461a      	mov	r2, r3
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013d68:	697b      	ldr	r3, [r7, #20]
 8013d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	697a      	ldr	r2, [r7, #20]
 8013d72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d76:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8013d7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013d7c:	2300      	movs	r3, #0
}
 8013d7e:	4618      	mov	r0, r3
 8013d80:	371c      	adds	r7, #28
 8013d82:	46bd      	mov	sp, r7
 8013d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d88:	4770      	bx	lr
 8013d8a:	bf00      	nop
 8013d8c:	4f54300a 	.word	0x4f54300a

08013d90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013d90:	b480      	push	{r7}
 8013d92:	b085      	sub	sp, #20
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013d98:	2300      	movs	r3, #0
 8013d9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	3301      	adds	r3, #1
 8013da0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	4a13      	ldr	r2, [pc, #76]	; (8013df4 <USB_CoreReset+0x64>)
 8013da6:	4293      	cmp	r3, r2
 8013da8:	d901      	bls.n	8013dae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013daa:	2303      	movs	r3, #3
 8013dac:	e01b      	b.n	8013de6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	691b      	ldr	r3, [r3, #16]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	daf2      	bge.n	8013d9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013db6:	2300      	movs	r3, #0
 8013db8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	691b      	ldr	r3, [r3, #16]
 8013dbe:	f043 0201 	orr.w	r2, r3, #1
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	3301      	adds	r3, #1
 8013dca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	4a09      	ldr	r2, [pc, #36]	; (8013df4 <USB_CoreReset+0x64>)
 8013dd0:	4293      	cmp	r3, r2
 8013dd2:	d901      	bls.n	8013dd8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013dd4:	2303      	movs	r3, #3
 8013dd6:	e006      	b.n	8013de6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	691b      	ldr	r3, [r3, #16]
 8013ddc:	f003 0301 	and.w	r3, r3, #1
 8013de0:	2b01      	cmp	r3, #1
 8013de2:	d0f0      	beq.n	8013dc6 <USB_CoreReset+0x36>

  return HAL_OK;
 8013de4:	2300      	movs	r3, #0
}
 8013de6:	4618      	mov	r0, r3
 8013de8:	3714      	adds	r7, #20
 8013dea:	46bd      	mov	sp, r7
 8013dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df0:	4770      	bx	lr
 8013df2:	bf00      	nop
 8013df4:	00030d40 	.word	0x00030d40

08013df8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8013dfc:	4904      	ldr	r1, [pc, #16]	; (8013e10 <MX_FATFS_Init+0x18>)
 8013dfe:	4805      	ldr	r0, [pc, #20]	; (8013e14 <MX_FATFS_Init+0x1c>)
 8013e00:	f002 fa56 	bl	80162b0 <FATFS_LinkDriver>
 8013e04:	4603      	mov	r3, r0
 8013e06:	461a      	mov	r2, r3
 8013e08:	4b03      	ldr	r3, [pc, #12]	; (8013e18 <MX_FATFS_Init+0x20>)
 8013e0a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013e0c:	bf00      	nop
 8013e0e:	bd80      	pop	{r7, pc}
 8013e10:	2400149c 	.word	0x2400149c
 8013e14:	08018204 	.word	0x08018204
 8013e18:	24001498 	.word	0x24001498

08013e1c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	b082      	sub	sp, #8
 8013e20:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8013e22:	2300      	movs	r3, #0
 8013e24:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8013e26:	f000 f885 	bl	8013f34 <BSP_SD_IsDetected>
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	2b01      	cmp	r3, #1
 8013e2e:	d001      	beq.n	8013e34 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8013e30:	2302      	movs	r3, #2
 8013e32:	e012      	b.n	8013e5a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8013e34:	480b      	ldr	r0, [pc, #44]	; (8013e64 <BSP_SD_Init+0x48>)
 8013e36:	f7f8 ff99 	bl	800cd6c <HAL_SD_Init>
 8013e3a:	4603      	mov	r3, r0
 8013e3c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8013e3e:	79fb      	ldrb	r3, [r7, #7]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d109      	bne.n	8013e58 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8013e44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8013e48:	4806      	ldr	r0, [pc, #24]	; (8013e64 <BSP_SD_Init+0x48>)
 8013e4a:	f7f9 fe4f 	bl	800daec <HAL_SD_ConfigWideBusOperation>
 8013e4e:	4603      	mov	r3, r0
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d001      	beq.n	8013e58 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8013e54:	2301      	movs	r3, #1
 8013e56:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8013e58:	79fb      	ldrb	r3, [r7, #7]
}
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	3708      	adds	r7, #8
 8013e5e:	46bd      	mov	sp, r7
 8013e60:	bd80      	pop	{r7, pc}
 8013e62:	bf00      	nop
 8013e64:	24000dcc 	.word	0x24000dcc

08013e68 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	b086      	sub	sp, #24
 8013e6c:	af00      	add	r7, sp, #0
 8013e6e:	60f8      	str	r0, [r7, #12]
 8013e70:	60b9      	str	r1, [r7, #8]
 8013e72:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013e74:	2300      	movs	r3, #0
 8013e76:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	68ba      	ldr	r2, [r7, #8]
 8013e7c:	68f9      	ldr	r1, [r7, #12]
 8013e7e:	4806      	ldr	r0, [pc, #24]	; (8013e98 <BSP_SD_ReadBlocks_DMA+0x30>)
 8013e80:	f7f9 f894 	bl	800cfac <HAL_SD_ReadBlocks_DMA>
 8013e84:	4603      	mov	r3, r0
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d001      	beq.n	8013e8e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013e8a:	2301      	movs	r3, #1
 8013e8c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e90:	4618      	mov	r0, r3
 8013e92:	3718      	adds	r7, #24
 8013e94:	46bd      	mov	sp, r7
 8013e96:	bd80      	pop	{r7, pc}
 8013e98:	24000dcc 	.word	0x24000dcc

08013e9c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8013e9c:	b580      	push	{r7, lr}
 8013e9e:	b086      	sub	sp, #24
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	60f8      	str	r0, [r7, #12]
 8013ea4:	60b9      	str	r1, [r7, #8]
 8013ea6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	68ba      	ldr	r2, [r7, #8]
 8013eb0:	68f9      	ldr	r1, [r7, #12]
 8013eb2:	4806      	ldr	r0, [pc, #24]	; (8013ecc <BSP_SD_WriteBlocks_DMA+0x30>)
 8013eb4:	f7f9 f922 	bl	800d0fc <HAL_SD_WriteBlocks_DMA>
 8013eb8:	4603      	mov	r3, r0
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d001      	beq.n	8013ec2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013ebe:	2301      	movs	r3, #1
 8013ec0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	3718      	adds	r7, #24
 8013ec8:	46bd      	mov	sp, r7
 8013eca:	bd80      	pop	{r7, pc}
 8013ecc:	24000dcc 	.word	0x24000dcc

08013ed0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8013ed0:	b580      	push	{r7, lr}
 8013ed2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013ed4:	4805      	ldr	r0, [pc, #20]	; (8013eec <BSP_SD_GetCardState+0x1c>)
 8013ed6:	f7f9 ff1b 	bl	800dd10 <HAL_SD_GetCardState>
 8013eda:	4603      	mov	r3, r0
 8013edc:	2b04      	cmp	r3, #4
 8013ede:	bf14      	ite	ne
 8013ee0:	2301      	movne	r3, #1
 8013ee2:	2300      	moveq	r3, #0
 8013ee4:	b2db      	uxtb	r3, r3
}
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	bd80      	pop	{r7, pc}
 8013eea:	bf00      	nop
 8013eec:	24000dcc 	.word	0x24000dcc

08013ef0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b082      	sub	sp, #8
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8013ef8:	6879      	ldr	r1, [r7, #4]
 8013efa:	4803      	ldr	r0, [pc, #12]	; (8013f08 <BSP_SD_GetCardInfo+0x18>)
 8013efc:	f7f9 fdca 	bl	800da94 <HAL_SD_GetCardInfo>
}
 8013f00:	bf00      	nop
 8013f02:	3708      	adds	r7, #8
 8013f04:	46bd      	mov	sp, r7
 8013f06:	bd80      	pop	{r7, pc}
 8013f08:	24000dcc 	.word	0x24000dcc

08013f0c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b082      	sub	sp, #8
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8013f14:	f000 f9a0 	bl	8014258 <BSP_SD_WriteCpltCallback>
}
 8013f18:	bf00      	nop
 8013f1a:	3708      	adds	r7, #8
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	bd80      	pop	{r7, pc}

08013f20 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013f20:	b580      	push	{r7, lr}
 8013f22:	b082      	sub	sp, #8
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8013f28:	f000 f9a2 	bl	8014270 <BSP_SD_ReadCpltCallback>
}
 8013f2c:	bf00      	nop
 8013f2e:	3708      	adds	r7, #8
 8013f30:	46bd      	mov	sp, r7
 8013f32:	bd80      	pop	{r7, pc}

08013f34 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b082      	sub	sp, #8
 8013f38:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8013f3a:	2301      	movs	r3, #1
 8013f3c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8013f3e:	f000 f80b 	bl	8013f58 <BSP_PlatformIsDetected>
 8013f42:	4603      	mov	r3, r0
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d101      	bne.n	8013f4c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8013f48:	2300      	movs	r3, #0
 8013f4a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8013f4c:	79fb      	ldrb	r3, [r7, #7]
 8013f4e:	b2db      	uxtb	r3, r3
}
 8013f50:	4618      	mov	r0, r3
 8013f52:	3708      	adds	r7, #8
 8013f54:	46bd      	mov	sp, r7
 8013f56:	bd80      	pop	{r7, pc}

08013f58 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8013f58:	b580      	push	{r7, lr}
 8013f5a:	b082      	sub	sp, #8
 8013f5c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8013f5e:	2301      	movs	r3, #1
 8013f60:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8013f62:	2104      	movs	r1, #4
 8013f64:	4806      	ldr	r0, [pc, #24]	; (8013f80 <BSP_PlatformIsDetected+0x28>)
 8013f66:	f7f3 feef 	bl	8007d48 <HAL_GPIO_ReadPin>
 8013f6a:	4603      	mov	r3, r0
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d001      	beq.n	8013f74 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8013f70:	2300      	movs	r3, #0
 8013f72:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8013f74:	79fb      	ldrb	r3, [r7, #7]
}
 8013f76:	4618      	mov	r0, r3
 8013f78:	3708      	adds	r7, #8
 8013f7a:	46bd      	mov	sp, r7
 8013f7c:	bd80      	pop	{r7, pc}
 8013f7e:	bf00      	nop
 8013f80:	58020400 	.word	0x58020400

08013f84 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8013f84:	b580      	push	{r7, lr}
 8013f86:	b084      	sub	sp, #16
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8013f8c:	f7ef fc34 	bl	80037f8 <HAL_GetTick>
 8013f90:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8013f92:	e006      	b.n	8013fa2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013f94:	f7ff ff9c 	bl	8013ed0 <BSP_SD_GetCardState>
 8013f98:	4603      	mov	r3, r0
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d101      	bne.n	8013fa2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8013f9e:	2300      	movs	r3, #0
 8013fa0:	e009      	b.n	8013fb6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8013fa2:	f7ef fc29 	bl	80037f8 <HAL_GetTick>
 8013fa6:	4602      	mov	r2, r0
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	1ad3      	subs	r3, r2, r3
 8013fac:	687a      	ldr	r2, [r7, #4]
 8013fae:	429a      	cmp	r2, r3
 8013fb0:	d8f0      	bhi.n	8013f94 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8013fb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	3710      	adds	r7, #16
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	bd80      	pop	{r7, pc}
	...

08013fc0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8013fc0:	b580      	push	{r7, lr}
 8013fc2:	b082      	sub	sp, #8
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	4603      	mov	r3, r0
 8013fc8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8013fca:	4b0b      	ldr	r3, [pc, #44]	; (8013ff8 <SD_CheckStatus+0x38>)
 8013fcc:	2201      	movs	r2, #1
 8013fce:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8013fd0:	f7ff ff7e 	bl	8013ed0 <BSP_SD_GetCardState>
 8013fd4:	4603      	mov	r3, r0
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d107      	bne.n	8013fea <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8013fda:	4b07      	ldr	r3, [pc, #28]	; (8013ff8 <SD_CheckStatus+0x38>)
 8013fdc:	781b      	ldrb	r3, [r3, #0]
 8013fde:	b2db      	uxtb	r3, r3
 8013fe0:	f023 0301 	bic.w	r3, r3, #1
 8013fe4:	b2da      	uxtb	r2, r3
 8013fe6:	4b04      	ldr	r3, [pc, #16]	; (8013ff8 <SD_CheckStatus+0x38>)
 8013fe8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8013fea:	4b03      	ldr	r3, [pc, #12]	; (8013ff8 <SD_CheckStatus+0x38>)
 8013fec:	781b      	ldrb	r3, [r3, #0]
 8013fee:	b2db      	uxtb	r3, r3
}
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	3708      	adds	r7, #8
 8013ff4:	46bd      	mov	sp, r7
 8013ff6:	bd80      	pop	{r7, pc}
 8013ff8:	2400000d 	.word	0x2400000d

08013ffc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8013ffc:	b580      	push	{r7, lr}
 8013ffe:	b082      	sub	sp, #8
 8014000:	af00      	add	r7, sp, #0
 8014002:	4603      	mov	r3, r0
 8014004:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8014006:	f7ff ff09 	bl	8013e1c <BSP_SD_Init>
 801400a:	4603      	mov	r3, r0
 801400c:	2b00      	cmp	r3, #0
 801400e:	d107      	bne.n	8014020 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8014010:	79fb      	ldrb	r3, [r7, #7]
 8014012:	4618      	mov	r0, r3
 8014014:	f7ff ffd4 	bl	8013fc0 <SD_CheckStatus>
 8014018:	4603      	mov	r3, r0
 801401a:	461a      	mov	r2, r3
 801401c:	4b04      	ldr	r3, [pc, #16]	; (8014030 <SD_initialize+0x34>)
 801401e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8014020:	4b03      	ldr	r3, [pc, #12]	; (8014030 <SD_initialize+0x34>)
 8014022:	781b      	ldrb	r3, [r3, #0]
 8014024:	b2db      	uxtb	r3, r3
}
 8014026:	4618      	mov	r0, r3
 8014028:	3708      	adds	r7, #8
 801402a:	46bd      	mov	sp, r7
 801402c:	bd80      	pop	{r7, pc}
 801402e:	bf00      	nop
 8014030:	2400000d 	.word	0x2400000d

08014034 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8014034:	b580      	push	{r7, lr}
 8014036:	b082      	sub	sp, #8
 8014038:	af00      	add	r7, sp, #0
 801403a:	4603      	mov	r3, r0
 801403c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801403e:	79fb      	ldrb	r3, [r7, #7]
 8014040:	4618      	mov	r0, r3
 8014042:	f7ff ffbd 	bl	8013fc0 <SD_CheckStatus>
 8014046:	4603      	mov	r3, r0
}
 8014048:	4618      	mov	r0, r3
 801404a:	3708      	adds	r7, #8
 801404c:	46bd      	mov	sp, r7
 801404e:	bd80      	pop	{r7, pc}

08014050 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014050:	b580      	push	{r7, lr}
 8014052:	b086      	sub	sp, #24
 8014054:	af00      	add	r7, sp, #0
 8014056:	60b9      	str	r1, [r7, #8]
 8014058:	607a      	str	r2, [r7, #4]
 801405a:	603b      	str	r3, [r7, #0]
 801405c:	4603      	mov	r3, r0
 801405e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014060:	2301      	movs	r3, #1
 8014062:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014064:	f247 5030 	movw	r0, #30000	; 0x7530
 8014068:	f7ff ff8c 	bl	8013f84 <SD_CheckStatusWithTimeout>
 801406c:	4603      	mov	r3, r0
 801406e:	2b00      	cmp	r3, #0
 8014070:	da01      	bge.n	8014076 <SD_read+0x26>
  {
    return res;
 8014072:	7dfb      	ldrb	r3, [r7, #23]
 8014074:	e03b      	b.n	80140ee <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8014076:	683a      	ldr	r2, [r7, #0]
 8014078:	6879      	ldr	r1, [r7, #4]
 801407a:	68b8      	ldr	r0, [r7, #8]
 801407c:	f7ff fef4 	bl	8013e68 <BSP_SD_ReadBlocks_DMA>
 8014080:	4603      	mov	r3, r0
 8014082:	2b00      	cmp	r3, #0
 8014084:	d132      	bne.n	80140ec <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8014086:	4b1c      	ldr	r3, [pc, #112]	; (80140f8 <SD_read+0xa8>)
 8014088:	2200      	movs	r2, #0
 801408a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 801408c:	f7ef fbb4 	bl	80037f8 <HAL_GetTick>
 8014090:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014092:	bf00      	nop
 8014094:	4b18      	ldr	r3, [pc, #96]	; (80140f8 <SD_read+0xa8>)
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	2b00      	cmp	r3, #0
 801409a:	d108      	bne.n	80140ae <SD_read+0x5e>
 801409c:	f7ef fbac 	bl	80037f8 <HAL_GetTick>
 80140a0:	4602      	mov	r2, r0
 80140a2:	693b      	ldr	r3, [r7, #16]
 80140a4:	1ad3      	subs	r3, r2, r3
 80140a6:	f247 522f 	movw	r2, #29999	; 0x752f
 80140aa:	4293      	cmp	r3, r2
 80140ac:	d9f2      	bls.n	8014094 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80140ae:	4b12      	ldr	r3, [pc, #72]	; (80140f8 <SD_read+0xa8>)
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d102      	bne.n	80140bc <SD_read+0x6c>
      {
        res = RES_ERROR;
 80140b6:	2301      	movs	r3, #1
 80140b8:	75fb      	strb	r3, [r7, #23]
 80140ba:	e017      	b.n	80140ec <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80140bc:	4b0e      	ldr	r3, [pc, #56]	; (80140f8 <SD_read+0xa8>)
 80140be:	2200      	movs	r2, #0
 80140c0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80140c2:	f7ef fb99 	bl	80037f8 <HAL_GetTick>
 80140c6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80140c8:	e007      	b.n	80140da <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80140ca:	f7ff ff01 	bl	8013ed0 <BSP_SD_GetCardState>
 80140ce:	4603      	mov	r3, r0
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d102      	bne.n	80140da <SD_read+0x8a>
          {
            res = RES_OK;
 80140d4:	2300      	movs	r3, #0
 80140d6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80140d8:	e008      	b.n	80140ec <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80140da:	f7ef fb8d 	bl	80037f8 <HAL_GetTick>
 80140de:	4602      	mov	r2, r0
 80140e0:	693b      	ldr	r3, [r7, #16]
 80140e2:	1ad3      	subs	r3, r2, r3
 80140e4:	f247 522f 	movw	r2, #29999	; 0x752f
 80140e8:	4293      	cmp	r3, r2
 80140ea:	d9ee      	bls.n	80140ca <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80140ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80140ee:	4618      	mov	r0, r3
 80140f0:	3718      	adds	r7, #24
 80140f2:	46bd      	mov	sp, r7
 80140f4:	bd80      	pop	{r7, pc}
 80140f6:	bf00      	nop
 80140f8:	240014a4 	.word	0x240014a4

080140fc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80140fc:	b580      	push	{r7, lr}
 80140fe:	b086      	sub	sp, #24
 8014100:	af00      	add	r7, sp, #0
 8014102:	60b9      	str	r1, [r7, #8]
 8014104:	607a      	str	r2, [r7, #4]
 8014106:	603b      	str	r3, [r7, #0]
 8014108:	4603      	mov	r3, r0
 801410a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801410c:	2301      	movs	r3, #1
 801410e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8014110:	4b24      	ldr	r3, [pc, #144]	; (80141a4 <SD_write+0xa8>)
 8014112:	2200      	movs	r2, #0
 8014114:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014116:	f247 5030 	movw	r0, #30000	; 0x7530
 801411a:	f7ff ff33 	bl	8013f84 <SD_CheckStatusWithTimeout>
 801411e:	4603      	mov	r3, r0
 8014120:	2b00      	cmp	r3, #0
 8014122:	da01      	bge.n	8014128 <SD_write+0x2c>
  {
    return res;
 8014124:	7dfb      	ldrb	r3, [r7, #23]
 8014126:	e038      	b.n	801419a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8014128:	683a      	ldr	r2, [r7, #0]
 801412a:	6879      	ldr	r1, [r7, #4]
 801412c:	68b8      	ldr	r0, [r7, #8]
 801412e:	f7ff feb5 	bl	8013e9c <BSP_SD_WriteBlocks_DMA>
 8014132:	4603      	mov	r3, r0
 8014134:	2b00      	cmp	r3, #0
 8014136:	d12f      	bne.n	8014198 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8014138:	f7ef fb5e 	bl	80037f8 <HAL_GetTick>
 801413c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801413e:	bf00      	nop
 8014140:	4b18      	ldr	r3, [pc, #96]	; (80141a4 <SD_write+0xa8>)
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d108      	bne.n	801415a <SD_write+0x5e>
 8014148:	f7ef fb56 	bl	80037f8 <HAL_GetTick>
 801414c:	4602      	mov	r2, r0
 801414e:	693b      	ldr	r3, [r7, #16]
 8014150:	1ad3      	subs	r3, r2, r3
 8014152:	f247 522f 	movw	r2, #29999	; 0x752f
 8014156:	4293      	cmp	r3, r2
 8014158:	d9f2      	bls.n	8014140 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801415a:	4b12      	ldr	r3, [pc, #72]	; (80141a4 <SD_write+0xa8>)
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d102      	bne.n	8014168 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8014162:	2301      	movs	r3, #1
 8014164:	75fb      	strb	r3, [r7, #23]
 8014166:	e017      	b.n	8014198 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8014168:	4b0e      	ldr	r3, [pc, #56]	; (80141a4 <SD_write+0xa8>)
 801416a:	2200      	movs	r2, #0
 801416c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801416e:	f7ef fb43 	bl	80037f8 <HAL_GetTick>
 8014172:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014174:	e007      	b.n	8014186 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014176:	f7ff feab 	bl	8013ed0 <BSP_SD_GetCardState>
 801417a:	4603      	mov	r3, r0
 801417c:	2b00      	cmp	r3, #0
 801417e:	d102      	bne.n	8014186 <SD_write+0x8a>
          {
            res = RES_OK;
 8014180:	2300      	movs	r3, #0
 8014182:	75fb      	strb	r3, [r7, #23]
            break;
 8014184:	e008      	b.n	8014198 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014186:	f7ef fb37 	bl	80037f8 <HAL_GetTick>
 801418a:	4602      	mov	r2, r0
 801418c:	693b      	ldr	r3, [r7, #16]
 801418e:	1ad3      	subs	r3, r2, r3
 8014190:	f247 522f 	movw	r2, #29999	; 0x752f
 8014194:	4293      	cmp	r3, r2
 8014196:	d9ee      	bls.n	8014176 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8014198:	7dfb      	ldrb	r3, [r7, #23]
}
 801419a:	4618      	mov	r0, r3
 801419c:	3718      	adds	r7, #24
 801419e:	46bd      	mov	sp, r7
 80141a0:	bd80      	pop	{r7, pc}
 80141a2:	bf00      	nop
 80141a4:	240014a0 	.word	0x240014a0

080141a8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80141a8:	b580      	push	{r7, lr}
 80141aa:	b08c      	sub	sp, #48	; 0x30
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	4603      	mov	r3, r0
 80141b0:	603a      	str	r2, [r7, #0]
 80141b2:	71fb      	strb	r3, [r7, #7]
 80141b4:	460b      	mov	r3, r1
 80141b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80141b8:	2301      	movs	r3, #1
 80141ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80141be:	4b25      	ldr	r3, [pc, #148]	; (8014254 <SD_ioctl+0xac>)
 80141c0:	781b      	ldrb	r3, [r3, #0]
 80141c2:	b2db      	uxtb	r3, r3
 80141c4:	f003 0301 	and.w	r3, r3, #1
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d001      	beq.n	80141d0 <SD_ioctl+0x28>
 80141cc:	2303      	movs	r3, #3
 80141ce:	e03c      	b.n	801424a <SD_ioctl+0xa2>

  switch (cmd)
 80141d0:	79bb      	ldrb	r3, [r7, #6]
 80141d2:	2b03      	cmp	r3, #3
 80141d4:	d834      	bhi.n	8014240 <SD_ioctl+0x98>
 80141d6:	a201      	add	r2, pc, #4	; (adr r2, 80141dc <SD_ioctl+0x34>)
 80141d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141dc:	080141ed 	.word	0x080141ed
 80141e0:	080141f5 	.word	0x080141f5
 80141e4:	0801420d 	.word	0x0801420d
 80141e8:	08014227 	.word	0x08014227
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80141ec:	2300      	movs	r3, #0
 80141ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80141f2:	e028      	b.n	8014246 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80141f4:	f107 0308 	add.w	r3, r7, #8
 80141f8:	4618      	mov	r0, r3
 80141fa:	f7ff fe79 	bl	8013ef0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80141fe:	6a3a      	ldr	r2, [r7, #32]
 8014200:	683b      	ldr	r3, [r7, #0]
 8014202:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014204:	2300      	movs	r3, #0
 8014206:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801420a:	e01c      	b.n	8014246 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801420c:	f107 0308 	add.w	r3, r7, #8
 8014210:	4618      	mov	r0, r3
 8014212:	f7ff fe6d 	bl	8013ef0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8014216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014218:	b29a      	uxth	r2, r3
 801421a:	683b      	ldr	r3, [r7, #0]
 801421c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801421e:	2300      	movs	r3, #0
 8014220:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014224:	e00f      	b.n	8014246 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014226:	f107 0308 	add.w	r3, r7, #8
 801422a:	4618      	mov	r0, r3
 801422c:	f7ff fe60 	bl	8013ef0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014232:	0a5a      	lsrs	r2, r3, #9
 8014234:	683b      	ldr	r3, [r7, #0]
 8014236:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014238:	2300      	movs	r3, #0
 801423a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801423e:	e002      	b.n	8014246 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014240:	2304      	movs	r3, #4
 8014242:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8014246:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801424a:	4618      	mov	r0, r3
 801424c:	3730      	adds	r7, #48	; 0x30
 801424e:	46bd      	mov	sp, r7
 8014250:	bd80      	pop	{r7, pc}
 8014252:	bf00      	nop
 8014254:	2400000d 	.word	0x2400000d

08014258 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8014258:	b480      	push	{r7}
 801425a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 801425c:	4b03      	ldr	r3, [pc, #12]	; (801426c <BSP_SD_WriteCpltCallback+0x14>)
 801425e:	2201      	movs	r2, #1
 8014260:	601a      	str	r2, [r3, #0]
}
 8014262:	bf00      	nop
 8014264:	46bd      	mov	sp, r7
 8014266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801426a:	4770      	bx	lr
 801426c:	240014a0 	.word	0x240014a0

08014270 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014270:	b480      	push	{r7}
 8014272:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8014274:	4b03      	ldr	r3, [pc, #12]	; (8014284 <BSP_SD_ReadCpltCallback+0x14>)
 8014276:	2201      	movs	r2, #1
 8014278:	601a      	str	r2, [r3, #0]
}
 801427a:	bf00      	nop
 801427c:	46bd      	mov	sp, r7
 801427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014282:	4770      	bx	lr
 8014284:	240014a4 	.word	0x240014a4

08014288 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014288:	b580      	push	{r7, lr}
 801428a:	b084      	sub	sp, #16
 801428c:	af00      	add	r7, sp, #0
 801428e:	6078      	str	r0, [r7, #4]
 8014290:	460b      	mov	r3, r1
 8014292:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014294:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014298:	f002 fcea 	bl	8016c70 <USBD_static_malloc>
 801429c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d109      	bne.n	80142b8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	32b0      	adds	r2, #176	; 0xb0
 80142ae:	2100      	movs	r1, #0
 80142b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80142b4:	2302      	movs	r3, #2
 80142b6:	e0d4      	b.n	8014462 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80142b8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80142bc:	2100      	movs	r1, #0
 80142be:	68f8      	ldr	r0, [r7, #12]
 80142c0:	f002 fd52 	bl	8016d68 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	32b0      	adds	r2, #176	; 0xb0
 80142ce:	68f9      	ldr	r1, [r7, #12]
 80142d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	32b0      	adds	r2, #176	; 0xb0
 80142de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	7c1b      	ldrb	r3, [r3, #16]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d138      	bne.n	8014362 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80142f0:	4b5e      	ldr	r3, [pc, #376]	; (801446c <USBD_CDC_Init+0x1e4>)
 80142f2:	7819      	ldrb	r1, [r3, #0]
 80142f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80142f8:	2202      	movs	r2, #2
 80142fa:	6878      	ldr	r0, [r7, #4]
 80142fc:	f002 fb95 	bl	8016a2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014300:	4b5a      	ldr	r3, [pc, #360]	; (801446c <USBD_CDC_Init+0x1e4>)
 8014302:	781b      	ldrb	r3, [r3, #0]
 8014304:	f003 020f 	and.w	r2, r3, #15
 8014308:	6879      	ldr	r1, [r7, #4]
 801430a:	4613      	mov	r3, r2
 801430c:	009b      	lsls	r3, r3, #2
 801430e:	4413      	add	r3, r2
 8014310:	009b      	lsls	r3, r3, #2
 8014312:	440b      	add	r3, r1
 8014314:	3324      	adds	r3, #36	; 0x24
 8014316:	2201      	movs	r2, #1
 8014318:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801431a:	4b55      	ldr	r3, [pc, #340]	; (8014470 <USBD_CDC_Init+0x1e8>)
 801431c:	7819      	ldrb	r1, [r3, #0]
 801431e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014322:	2202      	movs	r2, #2
 8014324:	6878      	ldr	r0, [r7, #4]
 8014326:	f002 fb80 	bl	8016a2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801432a:	4b51      	ldr	r3, [pc, #324]	; (8014470 <USBD_CDC_Init+0x1e8>)
 801432c:	781b      	ldrb	r3, [r3, #0]
 801432e:	f003 020f 	and.w	r2, r3, #15
 8014332:	6879      	ldr	r1, [r7, #4]
 8014334:	4613      	mov	r3, r2
 8014336:	009b      	lsls	r3, r3, #2
 8014338:	4413      	add	r3, r2
 801433a:	009b      	lsls	r3, r3, #2
 801433c:	440b      	add	r3, r1
 801433e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014342:	2201      	movs	r2, #1
 8014344:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014346:	4b4b      	ldr	r3, [pc, #300]	; (8014474 <USBD_CDC_Init+0x1ec>)
 8014348:	781b      	ldrb	r3, [r3, #0]
 801434a:	f003 020f 	and.w	r2, r3, #15
 801434e:	6879      	ldr	r1, [r7, #4]
 8014350:	4613      	mov	r3, r2
 8014352:	009b      	lsls	r3, r3, #2
 8014354:	4413      	add	r3, r2
 8014356:	009b      	lsls	r3, r3, #2
 8014358:	440b      	add	r3, r1
 801435a:	3326      	adds	r3, #38	; 0x26
 801435c:	2210      	movs	r2, #16
 801435e:	801a      	strh	r2, [r3, #0]
 8014360:	e035      	b.n	80143ce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014362:	4b42      	ldr	r3, [pc, #264]	; (801446c <USBD_CDC_Init+0x1e4>)
 8014364:	7819      	ldrb	r1, [r3, #0]
 8014366:	2340      	movs	r3, #64	; 0x40
 8014368:	2202      	movs	r2, #2
 801436a:	6878      	ldr	r0, [r7, #4]
 801436c:	f002 fb5d 	bl	8016a2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014370:	4b3e      	ldr	r3, [pc, #248]	; (801446c <USBD_CDC_Init+0x1e4>)
 8014372:	781b      	ldrb	r3, [r3, #0]
 8014374:	f003 020f 	and.w	r2, r3, #15
 8014378:	6879      	ldr	r1, [r7, #4]
 801437a:	4613      	mov	r3, r2
 801437c:	009b      	lsls	r3, r3, #2
 801437e:	4413      	add	r3, r2
 8014380:	009b      	lsls	r3, r3, #2
 8014382:	440b      	add	r3, r1
 8014384:	3324      	adds	r3, #36	; 0x24
 8014386:	2201      	movs	r2, #1
 8014388:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801438a:	4b39      	ldr	r3, [pc, #228]	; (8014470 <USBD_CDC_Init+0x1e8>)
 801438c:	7819      	ldrb	r1, [r3, #0]
 801438e:	2340      	movs	r3, #64	; 0x40
 8014390:	2202      	movs	r2, #2
 8014392:	6878      	ldr	r0, [r7, #4]
 8014394:	f002 fb49 	bl	8016a2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014398:	4b35      	ldr	r3, [pc, #212]	; (8014470 <USBD_CDC_Init+0x1e8>)
 801439a:	781b      	ldrb	r3, [r3, #0]
 801439c:	f003 020f 	and.w	r2, r3, #15
 80143a0:	6879      	ldr	r1, [r7, #4]
 80143a2:	4613      	mov	r3, r2
 80143a4:	009b      	lsls	r3, r3, #2
 80143a6:	4413      	add	r3, r2
 80143a8:	009b      	lsls	r3, r3, #2
 80143aa:	440b      	add	r3, r1
 80143ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80143b0:	2201      	movs	r2, #1
 80143b2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80143b4:	4b2f      	ldr	r3, [pc, #188]	; (8014474 <USBD_CDC_Init+0x1ec>)
 80143b6:	781b      	ldrb	r3, [r3, #0]
 80143b8:	f003 020f 	and.w	r2, r3, #15
 80143bc:	6879      	ldr	r1, [r7, #4]
 80143be:	4613      	mov	r3, r2
 80143c0:	009b      	lsls	r3, r3, #2
 80143c2:	4413      	add	r3, r2
 80143c4:	009b      	lsls	r3, r3, #2
 80143c6:	440b      	add	r3, r1
 80143c8:	3326      	adds	r3, #38	; 0x26
 80143ca:	2210      	movs	r2, #16
 80143cc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80143ce:	4b29      	ldr	r3, [pc, #164]	; (8014474 <USBD_CDC_Init+0x1ec>)
 80143d0:	7819      	ldrb	r1, [r3, #0]
 80143d2:	2308      	movs	r3, #8
 80143d4:	2203      	movs	r2, #3
 80143d6:	6878      	ldr	r0, [r7, #4]
 80143d8:	f002 fb27 	bl	8016a2a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80143dc:	4b25      	ldr	r3, [pc, #148]	; (8014474 <USBD_CDC_Init+0x1ec>)
 80143de:	781b      	ldrb	r3, [r3, #0]
 80143e0:	f003 020f 	and.w	r2, r3, #15
 80143e4:	6879      	ldr	r1, [r7, #4]
 80143e6:	4613      	mov	r3, r2
 80143e8:	009b      	lsls	r3, r3, #2
 80143ea:	4413      	add	r3, r2
 80143ec:	009b      	lsls	r3, r3, #2
 80143ee:	440b      	add	r3, r1
 80143f0:	3324      	adds	r3, #36	; 0x24
 80143f2:	2201      	movs	r2, #1
 80143f4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	2200      	movs	r2, #0
 80143fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014404:	687a      	ldr	r2, [r7, #4]
 8014406:	33b0      	adds	r3, #176	; 0xb0
 8014408:	009b      	lsls	r3, r3, #2
 801440a:	4413      	add	r3, r2
 801440c:	685b      	ldr	r3, [r3, #4]
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	2200      	movs	r2, #0
 8014416:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	2200      	movs	r2, #0
 801441e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8014428:	2b00      	cmp	r3, #0
 801442a:	d101      	bne.n	8014430 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801442c:	2302      	movs	r3, #2
 801442e:	e018      	b.n	8014462 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	7c1b      	ldrb	r3, [r3, #16]
 8014434:	2b00      	cmp	r3, #0
 8014436:	d10a      	bne.n	801444e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014438:	4b0d      	ldr	r3, [pc, #52]	; (8014470 <USBD_CDC_Init+0x1e8>)
 801443a:	7819      	ldrb	r1, [r3, #0]
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014442:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014446:	6878      	ldr	r0, [r7, #4]
 8014448:	f002 fbde 	bl	8016c08 <USBD_LL_PrepareReceive>
 801444c:	e008      	b.n	8014460 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801444e:	4b08      	ldr	r3, [pc, #32]	; (8014470 <USBD_CDC_Init+0x1e8>)
 8014450:	7819      	ldrb	r1, [r3, #0]
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014458:	2340      	movs	r3, #64	; 0x40
 801445a:	6878      	ldr	r0, [r7, #4]
 801445c:	f002 fbd4 	bl	8016c08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014460:	2300      	movs	r3, #0
}
 8014462:	4618      	mov	r0, r3
 8014464:	3710      	adds	r7, #16
 8014466:	46bd      	mov	sp, r7
 8014468:	bd80      	pop	{r7, pc}
 801446a:	bf00      	nop
 801446c:	24000097 	.word	0x24000097
 8014470:	24000098 	.word	0x24000098
 8014474:	24000099 	.word	0x24000099

08014478 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014478:	b580      	push	{r7, lr}
 801447a:	b082      	sub	sp, #8
 801447c:	af00      	add	r7, sp, #0
 801447e:	6078      	str	r0, [r7, #4]
 8014480:	460b      	mov	r3, r1
 8014482:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014484:	4b3a      	ldr	r3, [pc, #232]	; (8014570 <USBD_CDC_DeInit+0xf8>)
 8014486:	781b      	ldrb	r3, [r3, #0]
 8014488:	4619      	mov	r1, r3
 801448a:	6878      	ldr	r0, [r7, #4]
 801448c:	f002 faf3 	bl	8016a76 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014490:	4b37      	ldr	r3, [pc, #220]	; (8014570 <USBD_CDC_DeInit+0xf8>)
 8014492:	781b      	ldrb	r3, [r3, #0]
 8014494:	f003 020f 	and.w	r2, r3, #15
 8014498:	6879      	ldr	r1, [r7, #4]
 801449a:	4613      	mov	r3, r2
 801449c:	009b      	lsls	r3, r3, #2
 801449e:	4413      	add	r3, r2
 80144a0:	009b      	lsls	r3, r3, #2
 80144a2:	440b      	add	r3, r1
 80144a4:	3324      	adds	r3, #36	; 0x24
 80144a6:	2200      	movs	r2, #0
 80144a8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80144aa:	4b32      	ldr	r3, [pc, #200]	; (8014574 <USBD_CDC_DeInit+0xfc>)
 80144ac:	781b      	ldrb	r3, [r3, #0]
 80144ae:	4619      	mov	r1, r3
 80144b0:	6878      	ldr	r0, [r7, #4]
 80144b2:	f002 fae0 	bl	8016a76 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80144b6:	4b2f      	ldr	r3, [pc, #188]	; (8014574 <USBD_CDC_DeInit+0xfc>)
 80144b8:	781b      	ldrb	r3, [r3, #0]
 80144ba:	f003 020f 	and.w	r2, r3, #15
 80144be:	6879      	ldr	r1, [r7, #4]
 80144c0:	4613      	mov	r3, r2
 80144c2:	009b      	lsls	r3, r3, #2
 80144c4:	4413      	add	r3, r2
 80144c6:	009b      	lsls	r3, r3, #2
 80144c8:	440b      	add	r3, r1
 80144ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80144ce:	2200      	movs	r2, #0
 80144d0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80144d2:	4b29      	ldr	r3, [pc, #164]	; (8014578 <USBD_CDC_DeInit+0x100>)
 80144d4:	781b      	ldrb	r3, [r3, #0]
 80144d6:	4619      	mov	r1, r3
 80144d8:	6878      	ldr	r0, [r7, #4]
 80144da:	f002 facc 	bl	8016a76 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80144de:	4b26      	ldr	r3, [pc, #152]	; (8014578 <USBD_CDC_DeInit+0x100>)
 80144e0:	781b      	ldrb	r3, [r3, #0]
 80144e2:	f003 020f 	and.w	r2, r3, #15
 80144e6:	6879      	ldr	r1, [r7, #4]
 80144e8:	4613      	mov	r3, r2
 80144ea:	009b      	lsls	r3, r3, #2
 80144ec:	4413      	add	r3, r2
 80144ee:	009b      	lsls	r3, r3, #2
 80144f0:	440b      	add	r3, r1
 80144f2:	3324      	adds	r3, #36	; 0x24
 80144f4:	2200      	movs	r2, #0
 80144f6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80144f8:	4b1f      	ldr	r3, [pc, #124]	; (8014578 <USBD_CDC_DeInit+0x100>)
 80144fa:	781b      	ldrb	r3, [r3, #0]
 80144fc:	f003 020f 	and.w	r2, r3, #15
 8014500:	6879      	ldr	r1, [r7, #4]
 8014502:	4613      	mov	r3, r2
 8014504:	009b      	lsls	r3, r3, #2
 8014506:	4413      	add	r3, r2
 8014508:	009b      	lsls	r3, r3, #2
 801450a:	440b      	add	r3, r1
 801450c:	3326      	adds	r3, #38	; 0x26
 801450e:	2200      	movs	r2, #0
 8014510:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	32b0      	adds	r2, #176	; 0xb0
 801451c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d01f      	beq.n	8014564 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801452a:	687a      	ldr	r2, [r7, #4]
 801452c:	33b0      	adds	r3, #176	; 0xb0
 801452e:	009b      	lsls	r3, r3, #2
 8014530:	4413      	add	r3, r2
 8014532:	685b      	ldr	r3, [r3, #4]
 8014534:	685b      	ldr	r3, [r3, #4]
 8014536:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	32b0      	adds	r2, #176	; 0xb0
 8014542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014546:	4618      	mov	r0, r3
 8014548:	f002 fba0 	bl	8016c8c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	32b0      	adds	r2, #176	; 0xb0
 8014556:	2100      	movs	r1, #0
 8014558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	2200      	movs	r2, #0
 8014560:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014564:	2300      	movs	r3, #0
}
 8014566:	4618      	mov	r0, r3
 8014568:	3708      	adds	r7, #8
 801456a:	46bd      	mov	sp, r7
 801456c:	bd80      	pop	{r7, pc}
 801456e:	bf00      	nop
 8014570:	24000097 	.word	0x24000097
 8014574:	24000098 	.word	0x24000098
 8014578:	24000099 	.word	0x24000099

0801457c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801457c:	b580      	push	{r7, lr}
 801457e:	b086      	sub	sp, #24
 8014580:	af00      	add	r7, sp, #0
 8014582:	6078      	str	r0, [r7, #4]
 8014584:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	32b0      	adds	r2, #176	; 0xb0
 8014590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014594:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014596:	2300      	movs	r3, #0
 8014598:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801459a:	2300      	movs	r3, #0
 801459c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801459e:	2300      	movs	r3, #0
 80145a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80145a2:	693b      	ldr	r3, [r7, #16]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d101      	bne.n	80145ac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80145a8:	2303      	movs	r3, #3
 80145aa:	e0bf      	b.n	801472c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80145ac:	683b      	ldr	r3, [r7, #0]
 80145ae:	781b      	ldrb	r3, [r3, #0]
 80145b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d050      	beq.n	801465a <USBD_CDC_Setup+0xde>
 80145b8:	2b20      	cmp	r3, #32
 80145ba:	f040 80af 	bne.w	801471c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80145be:	683b      	ldr	r3, [r7, #0]
 80145c0:	88db      	ldrh	r3, [r3, #6]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d03a      	beq.n	801463c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80145c6:	683b      	ldr	r3, [r7, #0]
 80145c8:	781b      	ldrb	r3, [r3, #0]
 80145ca:	b25b      	sxtb	r3, r3
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	da1b      	bge.n	8014608 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80145d6:	687a      	ldr	r2, [r7, #4]
 80145d8:	33b0      	adds	r3, #176	; 0xb0
 80145da:	009b      	lsls	r3, r3, #2
 80145dc:	4413      	add	r3, r2
 80145de:	685b      	ldr	r3, [r3, #4]
 80145e0:	689b      	ldr	r3, [r3, #8]
 80145e2:	683a      	ldr	r2, [r7, #0]
 80145e4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80145e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80145e8:	683a      	ldr	r2, [r7, #0]
 80145ea:	88d2      	ldrh	r2, [r2, #6]
 80145ec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80145ee:	683b      	ldr	r3, [r7, #0]
 80145f0:	88db      	ldrh	r3, [r3, #6]
 80145f2:	2b07      	cmp	r3, #7
 80145f4:	bf28      	it	cs
 80145f6:	2307      	movcs	r3, #7
 80145f8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80145fa:	693b      	ldr	r3, [r7, #16]
 80145fc:	89fa      	ldrh	r2, [r7, #14]
 80145fe:	4619      	mov	r1, r3
 8014600:	6878      	ldr	r0, [r7, #4]
 8014602:	f001 fd89 	bl	8016118 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8014606:	e090      	b.n	801472a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014608:	683b      	ldr	r3, [r7, #0]
 801460a:	785a      	ldrb	r2, [r3, #1]
 801460c:	693b      	ldr	r3, [r7, #16]
 801460e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8014612:	683b      	ldr	r3, [r7, #0]
 8014614:	88db      	ldrh	r3, [r3, #6]
 8014616:	2b3f      	cmp	r3, #63	; 0x3f
 8014618:	d803      	bhi.n	8014622 <USBD_CDC_Setup+0xa6>
 801461a:	683b      	ldr	r3, [r7, #0]
 801461c:	88db      	ldrh	r3, [r3, #6]
 801461e:	b2da      	uxtb	r2, r3
 8014620:	e000      	b.n	8014624 <USBD_CDC_Setup+0xa8>
 8014622:	2240      	movs	r2, #64	; 0x40
 8014624:	693b      	ldr	r3, [r7, #16]
 8014626:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801462a:	6939      	ldr	r1, [r7, #16]
 801462c:	693b      	ldr	r3, [r7, #16]
 801462e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8014632:	461a      	mov	r2, r3
 8014634:	6878      	ldr	r0, [r7, #4]
 8014636:	f001 fd9b 	bl	8016170 <USBD_CtlPrepareRx>
      break;
 801463a:	e076      	b.n	801472a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014642:	687a      	ldr	r2, [r7, #4]
 8014644:	33b0      	adds	r3, #176	; 0xb0
 8014646:	009b      	lsls	r3, r3, #2
 8014648:	4413      	add	r3, r2
 801464a:	685b      	ldr	r3, [r3, #4]
 801464c:	689b      	ldr	r3, [r3, #8]
 801464e:	683a      	ldr	r2, [r7, #0]
 8014650:	7850      	ldrb	r0, [r2, #1]
 8014652:	2200      	movs	r2, #0
 8014654:	6839      	ldr	r1, [r7, #0]
 8014656:	4798      	blx	r3
      break;
 8014658:	e067      	b.n	801472a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801465a:	683b      	ldr	r3, [r7, #0]
 801465c:	785b      	ldrb	r3, [r3, #1]
 801465e:	2b0b      	cmp	r3, #11
 8014660:	d851      	bhi.n	8014706 <USBD_CDC_Setup+0x18a>
 8014662:	a201      	add	r2, pc, #4	; (adr r2, 8014668 <USBD_CDC_Setup+0xec>)
 8014664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014668:	08014699 	.word	0x08014699
 801466c:	08014715 	.word	0x08014715
 8014670:	08014707 	.word	0x08014707
 8014674:	08014707 	.word	0x08014707
 8014678:	08014707 	.word	0x08014707
 801467c:	08014707 	.word	0x08014707
 8014680:	08014707 	.word	0x08014707
 8014684:	08014707 	.word	0x08014707
 8014688:	08014707 	.word	0x08014707
 801468c:	08014707 	.word	0x08014707
 8014690:	080146c3 	.word	0x080146c3
 8014694:	080146ed 	.word	0x080146ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801469e:	b2db      	uxtb	r3, r3
 80146a0:	2b03      	cmp	r3, #3
 80146a2:	d107      	bne.n	80146b4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80146a4:	f107 030a 	add.w	r3, r7, #10
 80146a8:	2202      	movs	r2, #2
 80146aa:	4619      	mov	r1, r3
 80146ac:	6878      	ldr	r0, [r7, #4]
 80146ae:	f001 fd33 	bl	8016118 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80146b2:	e032      	b.n	801471a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80146b4:	6839      	ldr	r1, [r7, #0]
 80146b6:	6878      	ldr	r0, [r7, #4]
 80146b8:	f001 fcbd 	bl	8016036 <USBD_CtlError>
            ret = USBD_FAIL;
 80146bc:	2303      	movs	r3, #3
 80146be:	75fb      	strb	r3, [r7, #23]
          break;
 80146c0:	e02b      	b.n	801471a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80146c8:	b2db      	uxtb	r3, r3
 80146ca:	2b03      	cmp	r3, #3
 80146cc:	d107      	bne.n	80146de <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80146ce:	f107 030d 	add.w	r3, r7, #13
 80146d2:	2201      	movs	r2, #1
 80146d4:	4619      	mov	r1, r3
 80146d6:	6878      	ldr	r0, [r7, #4]
 80146d8:	f001 fd1e 	bl	8016118 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80146dc:	e01d      	b.n	801471a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80146de:	6839      	ldr	r1, [r7, #0]
 80146e0:	6878      	ldr	r0, [r7, #4]
 80146e2:	f001 fca8 	bl	8016036 <USBD_CtlError>
            ret = USBD_FAIL;
 80146e6:	2303      	movs	r3, #3
 80146e8:	75fb      	strb	r3, [r7, #23]
          break;
 80146ea:	e016      	b.n	801471a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80146f2:	b2db      	uxtb	r3, r3
 80146f4:	2b03      	cmp	r3, #3
 80146f6:	d00f      	beq.n	8014718 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80146f8:	6839      	ldr	r1, [r7, #0]
 80146fa:	6878      	ldr	r0, [r7, #4]
 80146fc:	f001 fc9b 	bl	8016036 <USBD_CtlError>
            ret = USBD_FAIL;
 8014700:	2303      	movs	r3, #3
 8014702:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014704:	e008      	b.n	8014718 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014706:	6839      	ldr	r1, [r7, #0]
 8014708:	6878      	ldr	r0, [r7, #4]
 801470a:	f001 fc94 	bl	8016036 <USBD_CtlError>
          ret = USBD_FAIL;
 801470e:	2303      	movs	r3, #3
 8014710:	75fb      	strb	r3, [r7, #23]
          break;
 8014712:	e002      	b.n	801471a <USBD_CDC_Setup+0x19e>
          break;
 8014714:	bf00      	nop
 8014716:	e008      	b.n	801472a <USBD_CDC_Setup+0x1ae>
          break;
 8014718:	bf00      	nop
      }
      break;
 801471a:	e006      	b.n	801472a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801471c:	6839      	ldr	r1, [r7, #0]
 801471e:	6878      	ldr	r0, [r7, #4]
 8014720:	f001 fc89 	bl	8016036 <USBD_CtlError>
      ret = USBD_FAIL;
 8014724:	2303      	movs	r3, #3
 8014726:	75fb      	strb	r3, [r7, #23]
      break;
 8014728:	bf00      	nop
  }

  return (uint8_t)ret;
 801472a:	7dfb      	ldrb	r3, [r7, #23]
}
 801472c:	4618      	mov	r0, r3
 801472e:	3718      	adds	r7, #24
 8014730:	46bd      	mov	sp, r7
 8014732:	bd80      	pop	{r7, pc}

08014734 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014734:	b580      	push	{r7, lr}
 8014736:	b084      	sub	sp, #16
 8014738:	af00      	add	r7, sp, #0
 801473a:	6078      	str	r0, [r7, #4]
 801473c:	460b      	mov	r3, r1
 801473e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014746:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	32b0      	adds	r2, #176	; 0xb0
 8014752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014756:	2b00      	cmp	r3, #0
 8014758:	d101      	bne.n	801475e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801475a:	2303      	movs	r3, #3
 801475c:	e065      	b.n	801482a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	32b0      	adds	r2, #176	; 0xb0
 8014768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801476c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801476e:	78fb      	ldrb	r3, [r7, #3]
 8014770:	f003 020f 	and.w	r2, r3, #15
 8014774:	6879      	ldr	r1, [r7, #4]
 8014776:	4613      	mov	r3, r2
 8014778:	009b      	lsls	r3, r3, #2
 801477a:	4413      	add	r3, r2
 801477c:	009b      	lsls	r3, r3, #2
 801477e:	440b      	add	r3, r1
 8014780:	3318      	adds	r3, #24
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d02f      	beq.n	80147e8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014788:	78fb      	ldrb	r3, [r7, #3]
 801478a:	f003 020f 	and.w	r2, r3, #15
 801478e:	6879      	ldr	r1, [r7, #4]
 8014790:	4613      	mov	r3, r2
 8014792:	009b      	lsls	r3, r3, #2
 8014794:	4413      	add	r3, r2
 8014796:	009b      	lsls	r3, r3, #2
 8014798:	440b      	add	r3, r1
 801479a:	3318      	adds	r3, #24
 801479c:	681a      	ldr	r2, [r3, #0]
 801479e:	78fb      	ldrb	r3, [r7, #3]
 80147a0:	f003 010f 	and.w	r1, r3, #15
 80147a4:	68f8      	ldr	r0, [r7, #12]
 80147a6:	460b      	mov	r3, r1
 80147a8:	00db      	lsls	r3, r3, #3
 80147aa:	440b      	add	r3, r1
 80147ac:	009b      	lsls	r3, r3, #2
 80147ae:	4403      	add	r3, r0
 80147b0:	3344      	adds	r3, #68	; 0x44
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	fbb2 f1f3 	udiv	r1, r2, r3
 80147b8:	fb01 f303 	mul.w	r3, r1, r3
 80147bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d112      	bne.n	80147e8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80147c2:	78fb      	ldrb	r3, [r7, #3]
 80147c4:	f003 020f 	and.w	r2, r3, #15
 80147c8:	6879      	ldr	r1, [r7, #4]
 80147ca:	4613      	mov	r3, r2
 80147cc:	009b      	lsls	r3, r3, #2
 80147ce:	4413      	add	r3, r2
 80147d0:	009b      	lsls	r3, r3, #2
 80147d2:	440b      	add	r3, r1
 80147d4:	3318      	adds	r3, #24
 80147d6:	2200      	movs	r2, #0
 80147d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80147da:	78f9      	ldrb	r1, [r7, #3]
 80147dc:	2300      	movs	r3, #0
 80147de:	2200      	movs	r2, #0
 80147e0:	6878      	ldr	r0, [r7, #4]
 80147e2:	f002 f9f0 	bl	8016bc6 <USBD_LL_Transmit>
 80147e6:	e01f      	b.n	8014828 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80147e8:	68bb      	ldr	r3, [r7, #8]
 80147ea:	2200      	movs	r2, #0
 80147ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80147f6:	687a      	ldr	r2, [r7, #4]
 80147f8:	33b0      	adds	r3, #176	; 0xb0
 80147fa:	009b      	lsls	r3, r3, #2
 80147fc:	4413      	add	r3, r2
 80147fe:	685b      	ldr	r3, [r3, #4]
 8014800:	691b      	ldr	r3, [r3, #16]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d010      	beq.n	8014828 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801480c:	687a      	ldr	r2, [r7, #4]
 801480e:	33b0      	adds	r3, #176	; 0xb0
 8014810:	009b      	lsls	r3, r3, #2
 8014812:	4413      	add	r3, r2
 8014814:	685b      	ldr	r3, [r3, #4]
 8014816:	691b      	ldr	r3, [r3, #16]
 8014818:	68ba      	ldr	r2, [r7, #8]
 801481a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801481e:	68ba      	ldr	r2, [r7, #8]
 8014820:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014824:	78fa      	ldrb	r2, [r7, #3]
 8014826:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014828:	2300      	movs	r3, #0
}
 801482a:	4618      	mov	r0, r3
 801482c:	3710      	adds	r7, #16
 801482e:	46bd      	mov	sp, r7
 8014830:	bd80      	pop	{r7, pc}

08014832 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014832:	b580      	push	{r7, lr}
 8014834:	b084      	sub	sp, #16
 8014836:	af00      	add	r7, sp, #0
 8014838:	6078      	str	r0, [r7, #4]
 801483a:	460b      	mov	r3, r1
 801483c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	32b0      	adds	r2, #176	; 0xb0
 8014848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801484c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	32b0      	adds	r2, #176	; 0xb0
 8014858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801485c:	2b00      	cmp	r3, #0
 801485e:	d101      	bne.n	8014864 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014860:	2303      	movs	r3, #3
 8014862:	e01a      	b.n	801489a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014864:	78fb      	ldrb	r3, [r7, #3]
 8014866:	4619      	mov	r1, r3
 8014868:	6878      	ldr	r0, [r7, #4]
 801486a:	f002 f9ee 	bl	8016c4a <USBD_LL_GetRxDataSize>
 801486e:	4602      	mov	r2, r0
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801487c:	687a      	ldr	r2, [r7, #4]
 801487e:	33b0      	adds	r3, #176	; 0xb0
 8014880:	009b      	lsls	r3, r3, #2
 8014882:	4413      	add	r3, r2
 8014884:	685b      	ldr	r3, [r3, #4]
 8014886:	68db      	ldr	r3, [r3, #12]
 8014888:	68fa      	ldr	r2, [r7, #12]
 801488a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801488e:	68fa      	ldr	r2, [r7, #12]
 8014890:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014894:	4611      	mov	r1, r2
 8014896:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014898:	2300      	movs	r3, #0
}
 801489a:	4618      	mov	r0, r3
 801489c:	3710      	adds	r7, #16
 801489e:	46bd      	mov	sp, r7
 80148a0:	bd80      	pop	{r7, pc}

080148a2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80148a2:	b580      	push	{r7, lr}
 80148a4:	b084      	sub	sp, #16
 80148a6:	af00      	add	r7, sp, #0
 80148a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	32b0      	adds	r2, #176	; 0xb0
 80148b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d101      	bne.n	80148c4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80148c0:	2303      	movs	r3, #3
 80148c2:	e025      	b.n	8014910 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80148ca:	687a      	ldr	r2, [r7, #4]
 80148cc:	33b0      	adds	r3, #176	; 0xb0
 80148ce:	009b      	lsls	r3, r3, #2
 80148d0:	4413      	add	r3, r2
 80148d2:	685b      	ldr	r3, [r3, #4]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d01a      	beq.n	801490e <USBD_CDC_EP0_RxReady+0x6c>
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80148de:	2bff      	cmp	r3, #255	; 0xff
 80148e0:	d015      	beq.n	801490e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80148e8:	687a      	ldr	r2, [r7, #4]
 80148ea:	33b0      	adds	r3, #176	; 0xb0
 80148ec:	009b      	lsls	r3, r3, #2
 80148ee:	4413      	add	r3, r2
 80148f0:	685b      	ldr	r3, [r3, #4]
 80148f2:	689b      	ldr	r3, [r3, #8]
 80148f4:	68fa      	ldr	r2, [r7, #12]
 80148f6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80148fa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80148fc:	68fa      	ldr	r2, [r7, #12]
 80148fe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014902:	b292      	uxth	r2, r2
 8014904:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	22ff      	movs	r2, #255	; 0xff
 801490a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801490e:	2300      	movs	r3, #0
}
 8014910:	4618      	mov	r0, r3
 8014912:	3710      	adds	r7, #16
 8014914:	46bd      	mov	sp, r7
 8014916:	bd80      	pop	{r7, pc}

08014918 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014918:	b580      	push	{r7, lr}
 801491a:	b086      	sub	sp, #24
 801491c:	af00      	add	r7, sp, #0
 801491e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014920:	2182      	movs	r1, #130	; 0x82
 8014922:	4818      	ldr	r0, [pc, #96]	; (8014984 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014924:	f000 fd4f 	bl	80153c6 <USBD_GetEpDesc>
 8014928:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801492a:	2101      	movs	r1, #1
 801492c:	4815      	ldr	r0, [pc, #84]	; (8014984 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801492e:	f000 fd4a 	bl	80153c6 <USBD_GetEpDesc>
 8014932:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014934:	2181      	movs	r1, #129	; 0x81
 8014936:	4813      	ldr	r0, [pc, #76]	; (8014984 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014938:	f000 fd45 	bl	80153c6 <USBD_GetEpDesc>
 801493c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801493e:	697b      	ldr	r3, [r7, #20]
 8014940:	2b00      	cmp	r3, #0
 8014942:	d002      	beq.n	801494a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014944:	697b      	ldr	r3, [r7, #20]
 8014946:	2210      	movs	r2, #16
 8014948:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801494a:	693b      	ldr	r3, [r7, #16]
 801494c:	2b00      	cmp	r3, #0
 801494e:	d006      	beq.n	801495e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014950:	693b      	ldr	r3, [r7, #16]
 8014952:	2200      	movs	r2, #0
 8014954:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014958:	711a      	strb	r2, [r3, #4]
 801495a:	2200      	movs	r2, #0
 801495c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	2b00      	cmp	r3, #0
 8014962:	d006      	beq.n	8014972 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	2200      	movs	r2, #0
 8014968:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801496c:	711a      	strb	r2, [r3, #4]
 801496e:	2200      	movs	r2, #0
 8014970:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	2243      	movs	r2, #67	; 0x43
 8014976:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014978:	4b02      	ldr	r3, [pc, #8]	; (8014984 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801497a:	4618      	mov	r0, r3
 801497c:	3718      	adds	r7, #24
 801497e:	46bd      	mov	sp, r7
 8014980:	bd80      	pop	{r7, pc}
 8014982:	bf00      	nop
 8014984:	24000054 	.word	0x24000054

08014988 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014988:	b580      	push	{r7, lr}
 801498a:	b086      	sub	sp, #24
 801498c:	af00      	add	r7, sp, #0
 801498e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014990:	2182      	movs	r1, #130	; 0x82
 8014992:	4818      	ldr	r0, [pc, #96]	; (80149f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014994:	f000 fd17 	bl	80153c6 <USBD_GetEpDesc>
 8014998:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801499a:	2101      	movs	r1, #1
 801499c:	4815      	ldr	r0, [pc, #84]	; (80149f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801499e:	f000 fd12 	bl	80153c6 <USBD_GetEpDesc>
 80149a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80149a4:	2181      	movs	r1, #129	; 0x81
 80149a6:	4813      	ldr	r0, [pc, #76]	; (80149f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80149a8:	f000 fd0d 	bl	80153c6 <USBD_GetEpDesc>
 80149ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80149ae:	697b      	ldr	r3, [r7, #20]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d002      	beq.n	80149ba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80149b4:	697b      	ldr	r3, [r7, #20]
 80149b6:	2210      	movs	r2, #16
 80149b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80149ba:	693b      	ldr	r3, [r7, #16]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d006      	beq.n	80149ce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80149c0:	693b      	ldr	r3, [r7, #16]
 80149c2:	2200      	movs	r2, #0
 80149c4:	711a      	strb	r2, [r3, #4]
 80149c6:	2200      	movs	r2, #0
 80149c8:	f042 0202 	orr.w	r2, r2, #2
 80149cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d006      	beq.n	80149e2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	2200      	movs	r2, #0
 80149d8:	711a      	strb	r2, [r3, #4]
 80149da:	2200      	movs	r2, #0
 80149dc:	f042 0202 	orr.w	r2, r2, #2
 80149e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	2243      	movs	r2, #67	; 0x43
 80149e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80149e8:	4b02      	ldr	r3, [pc, #8]	; (80149f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80149ea:	4618      	mov	r0, r3
 80149ec:	3718      	adds	r7, #24
 80149ee:	46bd      	mov	sp, r7
 80149f0:	bd80      	pop	{r7, pc}
 80149f2:	bf00      	nop
 80149f4:	24000054 	.word	0x24000054

080149f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80149f8:	b580      	push	{r7, lr}
 80149fa:	b086      	sub	sp, #24
 80149fc:	af00      	add	r7, sp, #0
 80149fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014a00:	2182      	movs	r1, #130	; 0x82
 8014a02:	4818      	ldr	r0, [pc, #96]	; (8014a64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014a04:	f000 fcdf 	bl	80153c6 <USBD_GetEpDesc>
 8014a08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014a0a:	2101      	movs	r1, #1
 8014a0c:	4815      	ldr	r0, [pc, #84]	; (8014a64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014a0e:	f000 fcda 	bl	80153c6 <USBD_GetEpDesc>
 8014a12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014a14:	2181      	movs	r1, #129	; 0x81
 8014a16:	4813      	ldr	r0, [pc, #76]	; (8014a64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014a18:	f000 fcd5 	bl	80153c6 <USBD_GetEpDesc>
 8014a1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014a1e:	697b      	ldr	r3, [r7, #20]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d002      	beq.n	8014a2a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014a24:	697b      	ldr	r3, [r7, #20]
 8014a26:	2210      	movs	r2, #16
 8014a28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014a2a:	693b      	ldr	r3, [r7, #16]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d006      	beq.n	8014a3e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014a30:	693b      	ldr	r3, [r7, #16]
 8014a32:	2200      	movs	r2, #0
 8014a34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014a38:	711a      	strb	r2, [r3, #4]
 8014a3a:	2200      	movs	r2, #0
 8014a3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d006      	beq.n	8014a52 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	2200      	movs	r2, #0
 8014a48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014a4c:	711a      	strb	r2, [r3, #4]
 8014a4e:	2200      	movs	r2, #0
 8014a50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	2243      	movs	r2, #67	; 0x43
 8014a56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014a58:	4b02      	ldr	r3, [pc, #8]	; (8014a64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	3718      	adds	r7, #24
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	bd80      	pop	{r7, pc}
 8014a62:	bf00      	nop
 8014a64:	24000054 	.word	0x24000054

08014a68 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014a68:	b480      	push	{r7}
 8014a6a:	b083      	sub	sp, #12
 8014a6c:	af00      	add	r7, sp, #0
 8014a6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	220a      	movs	r2, #10
 8014a74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014a76:	4b03      	ldr	r3, [pc, #12]	; (8014a84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014a78:	4618      	mov	r0, r3
 8014a7a:	370c      	adds	r7, #12
 8014a7c:	46bd      	mov	sp, r7
 8014a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a82:	4770      	bx	lr
 8014a84:	24000010 	.word	0x24000010

08014a88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014a88:	b480      	push	{r7}
 8014a8a:	b083      	sub	sp, #12
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	6078      	str	r0, [r7, #4]
 8014a90:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014a92:	683b      	ldr	r3, [r7, #0]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d101      	bne.n	8014a9c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014a98:	2303      	movs	r3, #3
 8014a9a:	e009      	b.n	8014ab0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014aa2:	687a      	ldr	r2, [r7, #4]
 8014aa4:	33b0      	adds	r3, #176	; 0xb0
 8014aa6:	009b      	lsls	r3, r3, #2
 8014aa8:	4413      	add	r3, r2
 8014aaa:	683a      	ldr	r2, [r7, #0]
 8014aac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014aae:	2300      	movs	r3, #0
}
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	370c      	adds	r7, #12
 8014ab4:	46bd      	mov	sp, r7
 8014ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aba:	4770      	bx	lr

08014abc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014abc:	b480      	push	{r7}
 8014abe:	b087      	sub	sp, #28
 8014ac0:	af00      	add	r7, sp, #0
 8014ac2:	60f8      	str	r0, [r7, #12]
 8014ac4:	60b9      	str	r1, [r7, #8]
 8014ac6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	32b0      	adds	r2, #176	; 0xb0
 8014ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ad6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014ad8:	697b      	ldr	r3, [r7, #20]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d101      	bne.n	8014ae2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014ade:	2303      	movs	r3, #3
 8014ae0:	e008      	b.n	8014af4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014ae2:	697b      	ldr	r3, [r7, #20]
 8014ae4:	68ba      	ldr	r2, [r7, #8]
 8014ae6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014aea:	697b      	ldr	r3, [r7, #20]
 8014aec:	687a      	ldr	r2, [r7, #4]
 8014aee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014af2:	2300      	movs	r3, #0
}
 8014af4:	4618      	mov	r0, r3
 8014af6:	371c      	adds	r7, #28
 8014af8:	46bd      	mov	sp, r7
 8014afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014afe:	4770      	bx	lr

08014b00 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014b00:	b480      	push	{r7}
 8014b02:	b085      	sub	sp, #20
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	6078      	str	r0, [r7, #4]
 8014b08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	32b0      	adds	r2, #176	; 0xb0
 8014b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b18:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d101      	bne.n	8014b24 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014b20:	2303      	movs	r3, #3
 8014b22:	e004      	b.n	8014b2e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	683a      	ldr	r2, [r7, #0]
 8014b28:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014b2c:	2300      	movs	r3, #0
}
 8014b2e:	4618      	mov	r0, r3
 8014b30:	3714      	adds	r7, #20
 8014b32:	46bd      	mov	sp, r7
 8014b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b38:	4770      	bx	lr
	...

08014b3c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014b3c:	b580      	push	{r7, lr}
 8014b3e:	b084      	sub	sp, #16
 8014b40:	af00      	add	r7, sp, #0
 8014b42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	32b0      	adds	r2, #176	; 0xb0
 8014b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b52:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014b54:	2301      	movs	r3, #1
 8014b56:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014b58:	68bb      	ldr	r3, [r7, #8]
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d101      	bne.n	8014b62 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014b5e:	2303      	movs	r3, #3
 8014b60:	e025      	b.n	8014bae <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014b62:	68bb      	ldr	r3, [r7, #8]
 8014b64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d11f      	bne.n	8014bac <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014b6c:	68bb      	ldr	r3, [r7, #8]
 8014b6e:	2201      	movs	r2, #1
 8014b70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014b74:	4b10      	ldr	r3, [pc, #64]	; (8014bb8 <USBD_CDC_TransmitPacket+0x7c>)
 8014b76:	781b      	ldrb	r3, [r3, #0]
 8014b78:	f003 020f 	and.w	r2, r3, #15
 8014b7c:	68bb      	ldr	r3, [r7, #8]
 8014b7e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8014b82:	6878      	ldr	r0, [r7, #4]
 8014b84:	4613      	mov	r3, r2
 8014b86:	009b      	lsls	r3, r3, #2
 8014b88:	4413      	add	r3, r2
 8014b8a:	009b      	lsls	r3, r3, #2
 8014b8c:	4403      	add	r3, r0
 8014b8e:	3318      	adds	r3, #24
 8014b90:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8014b92:	4b09      	ldr	r3, [pc, #36]	; (8014bb8 <USBD_CDC_TransmitPacket+0x7c>)
 8014b94:	7819      	ldrb	r1, [r3, #0]
 8014b96:	68bb      	ldr	r3, [r7, #8]
 8014b98:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014b9c:	68bb      	ldr	r3, [r7, #8]
 8014b9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014ba2:	6878      	ldr	r0, [r7, #4]
 8014ba4:	f002 f80f 	bl	8016bc6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8014ba8:	2300      	movs	r3, #0
 8014baa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8014bae:	4618      	mov	r0, r3
 8014bb0:	3710      	adds	r7, #16
 8014bb2:	46bd      	mov	sp, r7
 8014bb4:	bd80      	pop	{r7, pc}
 8014bb6:	bf00      	nop
 8014bb8:	24000097 	.word	0x24000097

08014bbc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	b084      	sub	sp, #16
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	32b0      	adds	r2, #176	; 0xb0
 8014bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bd2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	32b0      	adds	r2, #176	; 0xb0
 8014bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d101      	bne.n	8014bea <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014be6:	2303      	movs	r3, #3
 8014be8:	e018      	b.n	8014c1c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	7c1b      	ldrb	r3, [r3, #16]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d10a      	bne.n	8014c08 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014bf2:	4b0c      	ldr	r3, [pc, #48]	; (8014c24 <USBD_CDC_ReceivePacket+0x68>)
 8014bf4:	7819      	ldrb	r1, [r3, #0]
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014bfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014c00:	6878      	ldr	r0, [r7, #4]
 8014c02:	f002 f801 	bl	8016c08 <USBD_LL_PrepareReceive>
 8014c06:	e008      	b.n	8014c1a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014c08:	4b06      	ldr	r3, [pc, #24]	; (8014c24 <USBD_CDC_ReceivePacket+0x68>)
 8014c0a:	7819      	ldrb	r1, [r3, #0]
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014c12:	2340      	movs	r3, #64	; 0x40
 8014c14:	6878      	ldr	r0, [r7, #4]
 8014c16:	f001 fff7 	bl	8016c08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014c1a:	2300      	movs	r3, #0
}
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	3710      	adds	r7, #16
 8014c20:	46bd      	mov	sp, r7
 8014c22:	bd80      	pop	{r7, pc}
 8014c24:	24000098 	.word	0x24000098

08014c28 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014c28:	b580      	push	{r7, lr}
 8014c2a:	b086      	sub	sp, #24
 8014c2c:	af00      	add	r7, sp, #0
 8014c2e:	60f8      	str	r0, [r7, #12]
 8014c30:	60b9      	str	r1, [r7, #8]
 8014c32:	4613      	mov	r3, r2
 8014c34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d101      	bne.n	8014c40 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014c3c:	2303      	movs	r3, #3
 8014c3e:	e01f      	b.n	8014c80 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	2200      	movs	r2, #0
 8014c44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	2200      	movs	r2, #0
 8014c54:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014c58:	68bb      	ldr	r3, [r7, #8]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d003      	beq.n	8014c66 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	68ba      	ldr	r2, [r7, #8]
 8014c62:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	2201      	movs	r2, #1
 8014c6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	79fa      	ldrb	r2, [r7, #7]
 8014c72:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014c74:	68f8      	ldr	r0, [r7, #12]
 8014c76:	f001 fe6b 	bl	8016950 <USBD_LL_Init>
 8014c7a:	4603      	mov	r3, r0
 8014c7c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c80:	4618      	mov	r0, r3
 8014c82:	3718      	adds	r7, #24
 8014c84:	46bd      	mov	sp, r7
 8014c86:	bd80      	pop	{r7, pc}

08014c88 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014c88:	b580      	push	{r7, lr}
 8014c8a:	b084      	sub	sp, #16
 8014c8c:	af00      	add	r7, sp, #0
 8014c8e:	6078      	str	r0, [r7, #4]
 8014c90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014c92:	2300      	movs	r3, #0
 8014c94:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014c96:	683b      	ldr	r3, [r7, #0]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d101      	bne.n	8014ca0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014c9c:	2303      	movs	r3, #3
 8014c9e:	e025      	b.n	8014cec <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	683a      	ldr	r2, [r7, #0]
 8014ca4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	32ae      	adds	r2, #174	; 0xae
 8014cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d00f      	beq.n	8014cdc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	32ae      	adds	r2, #174	; 0xae
 8014cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ccc:	f107 020e 	add.w	r2, r7, #14
 8014cd0:	4610      	mov	r0, r2
 8014cd2:	4798      	blx	r3
 8014cd4:	4602      	mov	r2, r0
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014ce2:	1c5a      	adds	r2, r3, #1
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8014cea:	2300      	movs	r3, #0
}
 8014cec:	4618      	mov	r0, r3
 8014cee:	3710      	adds	r7, #16
 8014cf0:	46bd      	mov	sp, r7
 8014cf2:	bd80      	pop	{r7, pc}

08014cf4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014cf4:	b580      	push	{r7, lr}
 8014cf6:	b082      	sub	sp, #8
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014cfc:	6878      	ldr	r0, [r7, #4]
 8014cfe:	f001 fe79 	bl	80169f4 <USBD_LL_Start>
 8014d02:	4603      	mov	r3, r0
}
 8014d04:	4618      	mov	r0, r3
 8014d06:	3708      	adds	r7, #8
 8014d08:	46bd      	mov	sp, r7
 8014d0a:	bd80      	pop	{r7, pc}

08014d0c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8014d0c:	b480      	push	{r7}
 8014d0e:	b083      	sub	sp, #12
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014d14:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8014d16:	4618      	mov	r0, r3
 8014d18:	370c      	adds	r7, #12
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d20:	4770      	bx	lr

08014d22 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014d22:	b580      	push	{r7, lr}
 8014d24:	b084      	sub	sp, #16
 8014d26:	af00      	add	r7, sp, #0
 8014d28:	6078      	str	r0, [r7, #4]
 8014d2a:	460b      	mov	r3, r1
 8014d2c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014d2e:	2300      	movs	r3, #0
 8014d30:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d009      	beq.n	8014d50 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	78fa      	ldrb	r2, [r7, #3]
 8014d46:	4611      	mov	r1, r2
 8014d48:	6878      	ldr	r0, [r7, #4]
 8014d4a:	4798      	blx	r3
 8014d4c:	4603      	mov	r3, r0
 8014d4e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d52:	4618      	mov	r0, r3
 8014d54:	3710      	adds	r7, #16
 8014d56:	46bd      	mov	sp, r7
 8014d58:	bd80      	pop	{r7, pc}

08014d5a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014d5a:	b580      	push	{r7, lr}
 8014d5c:	b084      	sub	sp, #16
 8014d5e:	af00      	add	r7, sp, #0
 8014d60:	6078      	str	r0, [r7, #4]
 8014d62:	460b      	mov	r3, r1
 8014d64:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014d66:	2300      	movs	r3, #0
 8014d68:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014d70:	685b      	ldr	r3, [r3, #4]
 8014d72:	78fa      	ldrb	r2, [r7, #3]
 8014d74:	4611      	mov	r1, r2
 8014d76:	6878      	ldr	r0, [r7, #4]
 8014d78:	4798      	blx	r3
 8014d7a:	4603      	mov	r3, r0
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d001      	beq.n	8014d84 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8014d80:	2303      	movs	r3, #3
 8014d82:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d86:	4618      	mov	r0, r3
 8014d88:	3710      	adds	r7, #16
 8014d8a:	46bd      	mov	sp, r7
 8014d8c:	bd80      	pop	{r7, pc}

08014d8e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014d8e:	b580      	push	{r7, lr}
 8014d90:	b084      	sub	sp, #16
 8014d92:	af00      	add	r7, sp, #0
 8014d94:	6078      	str	r0, [r7, #4]
 8014d96:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014d9e:	6839      	ldr	r1, [r7, #0]
 8014da0:	4618      	mov	r0, r3
 8014da2:	f001 f90e 	bl	8015fc2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	2201      	movs	r2, #1
 8014daa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8014db4:	461a      	mov	r2, r3
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014dc2:	f003 031f 	and.w	r3, r3, #31
 8014dc6:	2b02      	cmp	r3, #2
 8014dc8:	d01a      	beq.n	8014e00 <USBD_LL_SetupStage+0x72>
 8014dca:	2b02      	cmp	r3, #2
 8014dcc:	d822      	bhi.n	8014e14 <USBD_LL_SetupStage+0x86>
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d002      	beq.n	8014dd8 <USBD_LL_SetupStage+0x4a>
 8014dd2:	2b01      	cmp	r3, #1
 8014dd4:	d00a      	beq.n	8014dec <USBD_LL_SetupStage+0x5e>
 8014dd6:	e01d      	b.n	8014e14 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014dde:	4619      	mov	r1, r3
 8014de0:	6878      	ldr	r0, [r7, #4]
 8014de2:	f000 fb65 	bl	80154b0 <USBD_StdDevReq>
 8014de6:	4603      	mov	r3, r0
 8014de8:	73fb      	strb	r3, [r7, #15]
      break;
 8014dea:	e020      	b.n	8014e2e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014df2:	4619      	mov	r1, r3
 8014df4:	6878      	ldr	r0, [r7, #4]
 8014df6:	f000 fbcd 	bl	8015594 <USBD_StdItfReq>
 8014dfa:	4603      	mov	r3, r0
 8014dfc:	73fb      	strb	r3, [r7, #15]
      break;
 8014dfe:	e016      	b.n	8014e2e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014e06:	4619      	mov	r1, r3
 8014e08:	6878      	ldr	r0, [r7, #4]
 8014e0a:	f000 fc2f 	bl	801566c <USBD_StdEPReq>
 8014e0e:	4603      	mov	r3, r0
 8014e10:	73fb      	strb	r3, [r7, #15]
      break;
 8014e12:	e00c      	b.n	8014e2e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014e1a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014e1e:	b2db      	uxtb	r3, r3
 8014e20:	4619      	mov	r1, r3
 8014e22:	6878      	ldr	r0, [r7, #4]
 8014e24:	f001 fe46 	bl	8016ab4 <USBD_LL_StallEP>
 8014e28:	4603      	mov	r3, r0
 8014e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8014e2c:	bf00      	nop
  }

  return ret;
 8014e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e30:	4618      	mov	r0, r3
 8014e32:	3710      	adds	r7, #16
 8014e34:	46bd      	mov	sp, r7
 8014e36:	bd80      	pop	{r7, pc}

08014e38 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b086      	sub	sp, #24
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	60f8      	str	r0, [r7, #12]
 8014e40:	460b      	mov	r3, r1
 8014e42:	607a      	str	r2, [r7, #4]
 8014e44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8014e46:	2300      	movs	r3, #0
 8014e48:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8014e4a:	7afb      	ldrb	r3, [r7, #11]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d16e      	bne.n	8014f2e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8014e56:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014e5e:	2b03      	cmp	r3, #3
 8014e60:	f040 8098 	bne.w	8014f94 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8014e64:	693b      	ldr	r3, [r7, #16]
 8014e66:	689a      	ldr	r2, [r3, #8]
 8014e68:	693b      	ldr	r3, [r7, #16]
 8014e6a:	68db      	ldr	r3, [r3, #12]
 8014e6c:	429a      	cmp	r2, r3
 8014e6e:	d913      	bls.n	8014e98 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8014e70:	693b      	ldr	r3, [r7, #16]
 8014e72:	689a      	ldr	r2, [r3, #8]
 8014e74:	693b      	ldr	r3, [r7, #16]
 8014e76:	68db      	ldr	r3, [r3, #12]
 8014e78:	1ad2      	subs	r2, r2, r3
 8014e7a:	693b      	ldr	r3, [r7, #16]
 8014e7c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014e7e:	693b      	ldr	r3, [r7, #16]
 8014e80:	68da      	ldr	r2, [r3, #12]
 8014e82:	693b      	ldr	r3, [r7, #16]
 8014e84:	689b      	ldr	r3, [r3, #8]
 8014e86:	4293      	cmp	r3, r2
 8014e88:	bf28      	it	cs
 8014e8a:	4613      	movcs	r3, r2
 8014e8c:	461a      	mov	r2, r3
 8014e8e:	6879      	ldr	r1, [r7, #4]
 8014e90:	68f8      	ldr	r0, [r7, #12]
 8014e92:	f001 f98a 	bl	80161aa <USBD_CtlContinueRx>
 8014e96:	e07d      	b.n	8014f94 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014e9e:	f003 031f 	and.w	r3, r3, #31
 8014ea2:	2b02      	cmp	r3, #2
 8014ea4:	d014      	beq.n	8014ed0 <USBD_LL_DataOutStage+0x98>
 8014ea6:	2b02      	cmp	r3, #2
 8014ea8:	d81d      	bhi.n	8014ee6 <USBD_LL_DataOutStage+0xae>
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d002      	beq.n	8014eb4 <USBD_LL_DataOutStage+0x7c>
 8014eae:	2b01      	cmp	r3, #1
 8014eb0:	d003      	beq.n	8014eba <USBD_LL_DataOutStage+0x82>
 8014eb2:	e018      	b.n	8014ee6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8014eb4:	2300      	movs	r3, #0
 8014eb6:	75bb      	strb	r3, [r7, #22]
            break;
 8014eb8:	e018      	b.n	8014eec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8014ec0:	b2db      	uxtb	r3, r3
 8014ec2:	4619      	mov	r1, r3
 8014ec4:	68f8      	ldr	r0, [r7, #12]
 8014ec6:	f000 fa64 	bl	8015392 <USBD_CoreFindIF>
 8014eca:	4603      	mov	r3, r0
 8014ecc:	75bb      	strb	r3, [r7, #22]
            break;
 8014ece:	e00d      	b.n	8014eec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8014ed0:	68fb      	ldr	r3, [r7, #12]
 8014ed2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8014ed6:	b2db      	uxtb	r3, r3
 8014ed8:	4619      	mov	r1, r3
 8014eda:	68f8      	ldr	r0, [r7, #12]
 8014edc:	f000 fa66 	bl	80153ac <USBD_CoreFindEP>
 8014ee0:	4603      	mov	r3, r0
 8014ee2:	75bb      	strb	r3, [r7, #22]
            break;
 8014ee4:	e002      	b.n	8014eec <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8014ee6:	2300      	movs	r3, #0
 8014ee8:	75bb      	strb	r3, [r7, #22]
            break;
 8014eea:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8014eec:	7dbb      	ldrb	r3, [r7, #22]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d119      	bne.n	8014f26 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014ef8:	b2db      	uxtb	r3, r3
 8014efa:	2b03      	cmp	r3, #3
 8014efc:	d113      	bne.n	8014f26 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8014efe:	7dba      	ldrb	r2, [r7, #22]
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	32ae      	adds	r2, #174	; 0xae
 8014f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f08:	691b      	ldr	r3, [r3, #16]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d00b      	beq.n	8014f26 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8014f0e:	7dba      	ldrb	r2, [r7, #22]
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8014f16:	7dba      	ldrb	r2, [r7, #22]
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	32ae      	adds	r2, #174	; 0xae
 8014f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f20:	691b      	ldr	r3, [r3, #16]
 8014f22:	68f8      	ldr	r0, [r7, #12]
 8014f24:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8014f26:	68f8      	ldr	r0, [r7, #12]
 8014f28:	f001 f950 	bl	80161cc <USBD_CtlSendStatus>
 8014f2c:	e032      	b.n	8014f94 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8014f2e:	7afb      	ldrb	r3, [r7, #11]
 8014f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014f34:	b2db      	uxtb	r3, r3
 8014f36:	4619      	mov	r1, r3
 8014f38:	68f8      	ldr	r0, [r7, #12]
 8014f3a:	f000 fa37 	bl	80153ac <USBD_CoreFindEP>
 8014f3e:	4603      	mov	r3, r0
 8014f40:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014f42:	7dbb      	ldrb	r3, [r7, #22]
 8014f44:	2bff      	cmp	r3, #255	; 0xff
 8014f46:	d025      	beq.n	8014f94 <USBD_LL_DataOutStage+0x15c>
 8014f48:	7dbb      	ldrb	r3, [r7, #22]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d122      	bne.n	8014f94 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f54:	b2db      	uxtb	r3, r3
 8014f56:	2b03      	cmp	r3, #3
 8014f58:	d117      	bne.n	8014f8a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8014f5a:	7dba      	ldrb	r2, [r7, #22]
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	32ae      	adds	r2, #174	; 0xae
 8014f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f64:	699b      	ldr	r3, [r3, #24]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d00f      	beq.n	8014f8a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8014f6a:	7dba      	ldrb	r2, [r7, #22]
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8014f72:	7dba      	ldrb	r2, [r7, #22]
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	32ae      	adds	r2, #174	; 0xae
 8014f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f7c:	699b      	ldr	r3, [r3, #24]
 8014f7e:	7afa      	ldrb	r2, [r7, #11]
 8014f80:	4611      	mov	r1, r2
 8014f82:	68f8      	ldr	r0, [r7, #12]
 8014f84:	4798      	blx	r3
 8014f86:	4603      	mov	r3, r0
 8014f88:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8014f8a:	7dfb      	ldrb	r3, [r7, #23]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d001      	beq.n	8014f94 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8014f90:	7dfb      	ldrb	r3, [r7, #23]
 8014f92:	e000      	b.n	8014f96 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8014f94:	2300      	movs	r3, #0
}
 8014f96:	4618      	mov	r0, r3
 8014f98:	3718      	adds	r7, #24
 8014f9a:	46bd      	mov	sp, r7
 8014f9c:	bd80      	pop	{r7, pc}

08014f9e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014f9e:	b580      	push	{r7, lr}
 8014fa0:	b086      	sub	sp, #24
 8014fa2:	af00      	add	r7, sp, #0
 8014fa4:	60f8      	str	r0, [r7, #12]
 8014fa6:	460b      	mov	r3, r1
 8014fa8:	607a      	str	r2, [r7, #4]
 8014faa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8014fac:	7afb      	ldrb	r3, [r7, #11]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d16f      	bne.n	8015092 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	3314      	adds	r3, #20
 8014fb6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014fbe:	2b02      	cmp	r3, #2
 8014fc0:	d15a      	bne.n	8015078 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8014fc2:	693b      	ldr	r3, [r7, #16]
 8014fc4:	689a      	ldr	r2, [r3, #8]
 8014fc6:	693b      	ldr	r3, [r7, #16]
 8014fc8:	68db      	ldr	r3, [r3, #12]
 8014fca:	429a      	cmp	r2, r3
 8014fcc:	d914      	bls.n	8014ff8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014fce:	693b      	ldr	r3, [r7, #16]
 8014fd0:	689a      	ldr	r2, [r3, #8]
 8014fd2:	693b      	ldr	r3, [r7, #16]
 8014fd4:	68db      	ldr	r3, [r3, #12]
 8014fd6:	1ad2      	subs	r2, r2, r3
 8014fd8:	693b      	ldr	r3, [r7, #16]
 8014fda:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014fdc:	693b      	ldr	r3, [r7, #16]
 8014fde:	689b      	ldr	r3, [r3, #8]
 8014fe0:	461a      	mov	r2, r3
 8014fe2:	6879      	ldr	r1, [r7, #4]
 8014fe4:	68f8      	ldr	r0, [r7, #12]
 8014fe6:	f001 f8b2 	bl	801614e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014fea:	2300      	movs	r3, #0
 8014fec:	2200      	movs	r2, #0
 8014fee:	2100      	movs	r1, #0
 8014ff0:	68f8      	ldr	r0, [r7, #12]
 8014ff2:	f001 fe09 	bl	8016c08 <USBD_LL_PrepareReceive>
 8014ff6:	e03f      	b.n	8015078 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8014ff8:	693b      	ldr	r3, [r7, #16]
 8014ffa:	68da      	ldr	r2, [r3, #12]
 8014ffc:	693b      	ldr	r3, [r7, #16]
 8014ffe:	689b      	ldr	r3, [r3, #8]
 8015000:	429a      	cmp	r2, r3
 8015002:	d11c      	bne.n	801503e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015004:	693b      	ldr	r3, [r7, #16]
 8015006:	685a      	ldr	r2, [r3, #4]
 8015008:	693b      	ldr	r3, [r7, #16]
 801500a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801500c:	429a      	cmp	r2, r3
 801500e:	d316      	bcc.n	801503e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015010:	693b      	ldr	r3, [r7, #16]
 8015012:	685a      	ldr	r2, [r3, #4]
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801501a:	429a      	cmp	r2, r3
 801501c:	d20f      	bcs.n	801503e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801501e:	2200      	movs	r2, #0
 8015020:	2100      	movs	r1, #0
 8015022:	68f8      	ldr	r0, [r7, #12]
 8015024:	f001 f893 	bl	801614e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	2200      	movs	r2, #0
 801502c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015030:	2300      	movs	r3, #0
 8015032:	2200      	movs	r2, #0
 8015034:	2100      	movs	r1, #0
 8015036:	68f8      	ldr	r0, [r7, #12]
 8015038:	f001 fde6 	bl	8016c08 <USBD_LL_PrepareReceive>
 801503c:	e01c      	b.n	8015078 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015044:	b2db      	uxtb	r3, r3
 8015046:	2b03      	cmp	r3, #3
 8015048:	d10f      	bne.n	801506a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015050:	68db      	ldr	r3, [r3, #12]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d009      	beq.n	801506a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	2200      	movs	r2, #0
 801505a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015064:	68db      	ldr	r3, [r3, #12]
 8015066:	68f8      	ldr	r0, [r7, #12]
 8015068:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801506a:	2180      	movs	r1, #128	; 0x80
 801506c:	68f8      	ldr	r0, [r7, #12]
 801506e:	f001 fd21 	bl	8016ab4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015072:	68f8      	ldr	r0, [r7, #12]
 8015074:	f001 f8bd 	bl	80161f2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801507e:	2b00      	cmp	r3, #0
 8015080:	d03a      	beq.n	80150f8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8015082:	68f8      	ldr	r0, [r7, #12]
 8015084:	f7ff fe42 	bl	8014d0c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	2200      	movs	r2, #0
 801508c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015090:	e032      	b.n	80150f8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8015092:	7afb      	ldrb	r3, [r7, #11]
 8015094:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015098:	b2db      	uxtb	r3, r3
 801509a:	4619      	mov	r1, r3
 801509c:	68f8      	ldr	r0, [r7, #12]
 801509e:	f000 f985 	bl	80153ac <USBD_CoreFindEP>
 80150a2:	4603      	mov	r3, r0
 80150a4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80150a6:	7dfb      	ldrb	r3, [r7, #23]
 80150a8:	2bff      	cmp	r3, #255	; 0xff
 80150aa:	d025      	beq.n	80150f8 <USBD_LL_DataInStage+0x15a>
 80150ac:	7dfb      	ldrb	r3, [r7, #23]
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d122      	bne.n	80150f8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80150b8:	b2db      	uxtb	r3, r3
 80150ba:	2b03      	cmp	r3, #3
 80150bc:	d11c      	bne.n	80150f8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80150be:	7dfa      	ldrb	r2, [r7, #23]
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	32ae      	adds	r2, #174	; 0xae
 80150c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150c8:	695b      	ldr	r3, [r3, #20]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d014      	beq.n	80150f8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80150ce:	7dfa      	ldrb	r2, [r7, #23]
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80150d6:	7dfa      	ldrb	r2, [r7, #23]
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	32ae      	adds	r2, #174	; 0xae
 80150dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150e0:	695b      	ldr	r3, [r3, #20]
 80150e2:	7afa      	ldrb	r2, [r7, #11]
 80150e4:	4611      	mov	r1, r2
 80150e6:	68f8      	ldr	r0, [r7, #12]
 80150e8:	4798      	blx	r3
 80150ea:	4603      	mov	r3, r0
 80150ec:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80150ee:	7dbb      	ldrb	r3, [r7, #22]
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d001      	beq.n	80150f8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80150f4:	7dbb      	ldrb	r3, [r7, #22]
 80150f6:	e000      	b.n	80150fa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80150f8:	2300      	movs	r3, #0
}
 80150fa:	4618      	mov	r0, r3
 80150fc:	3718      	adds	r7, #24
 80150fe:	46bd      	mov	sp, r7
 8015100:	bd80      	pop	{r7, pc}

08015102 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015102:	b580      	push	{r7, lr}
 8015104:	b084      	sub	sp, #16
 8015106:	af00      	add	r7, sp, #0
 8015108:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801510a:	2300      	movs	r3, #0
 801510c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	2201      	movs	r2, #1
 8015112:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	2200      	movs	r2, #0
 801511a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	2200      	movs	r2, #0
 8015122:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	2200      	movs	r2, #0
 8015128:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	2200      	movs	r2, #0
 8015130:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801513a:	2b00      	cmp	r3, #0
 801513c:	d014      	beq.n	8015168 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015144:	685b      	ldr	r3, [r3, #4]
 8015146:	2b00      	cmp	r3, #0
 8015148:	d00e      	beq.n	8015168 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015150:	685b      	ldr	r3, [r3, #4]
 8015152:	687a      	ldr	r2, [r7, #4]
 8015154:	6852      	ldr	r2, [r2, #4]
 8015156:	b2d2      	uxtb	r2, r2
 8015158:	4611      	mov	r1, r2
 801515a:	6878      	ldr	r0, [r7, #4]
 801515c:	4798      	blx	r3
 801515e:	4603      	mov	r3, r0
 8015160:	2b00      	cmp	r3, #0
 8015162:	d001      	beq.n	8015168 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015164:	2303      	movs	r3, #3
 8015166:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015168:	2340      	movs	r3, #64	; 0x40
 801516a:	2200      	movs	r2, #0
 801516c:	2100      	movs	r1, #0
 801516e:	6878      	ldr	r0, [r7, #4]
 8015170:	f001 fc5b 	bl	8016a2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	2201      	movs	r2, #1
 8015178:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	2240      	movs	r2, #64	; 0x40
 8015180:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015184:	2340      	movs	r3, #64	; 0x40
 8015186:	2200      	movs	r2, #0
 8015188:	2180      	movs	r1, #128	; 0x80
 801518a:	6878      	ldr	r0, [r7, #4]
 801518c:	f001 fc4d 	bl	8016a2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	2201      	movs	r2, #1
 8015194:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	2240      	movs	r2, #64	; 0x40
 801519a:	621a      	str	r2, [r3, #32]

  return ret;
 801519c:	7bfb      	ldrb	r3, [r7, #15]
}
 801519e:	4618      	mov	r0, r3
 80151a0:	3710      	adds	r7, #16
 80151a2:	46bd      	mov	sp, r7
 80151a4:	bd80      	pop	{r7, pc}

080151a6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80151a6:	b480      	push	{r7}
 80151a8:	b083      	sub	sp, #12
 80151aa:	af00      	add	r7, sp, #0
 80151ac:	6078      	str	r0, [r7, #4]
 80151ae:	460b      	mov	r3, r1
 80151b0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	78fa      	ldrb	r2, [r7, #3]
 80151b6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80151b8:	2300      	movs	r3, #0
}
 80151ba:	4618      	mov	r0, r3
 80151bc:	370c      	adds	r7, #12
 80151be:	46bd      	mov	sp, r7
 80151c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c4:	4770      	bx	lr

080151c6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80151c6:	b480      	push	{r7}
 80151c8:	b083      	sub	sp, #12
 80151ca:	af00      	add	r7, sp, #0
 80151cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80151d4:	b2db      	uxtb	r3, r3
 80151d6:	2b04      	cmp	r3, #4
 80151d8:	d006      	beq.n	80151e8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80151e0:	b2da      	uxtb	r2, r3
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	2204      	movs	r2, #4
 80151ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80151f0:	2300      	movs	r3, #0
}
 80151f2:	4618      	mov	r0, r3
 80151f4:	370c      	adds	r7, #12
 80151f6:	46bd      	mov	sp, r7
 80151f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151fc:	4770      	bx	lr

080151fe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80151fe:	b480      	push	{r7}
 8015200:	b083      	sub	sp, #12
 8015202:	af00      	add	r7, sp, #0
 8015204:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801520c:	b2db      	uxtb	r3, r3
 801520e:	2b04      	cmp	r3, #4
 8015210:	d106      	bne.n	8015220 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8015218:	b2da      	uxtb	r2, r3
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015220:	2300      	movs	r3, #0
}
 8015222:	4618      	mov	r0, r3
 8015224:	370c      	adds	r7, #12
 8015226:	46bd      	mov	sp, r7
 8015228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801522c:	4770      	bx	lr

0801522e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801522e:	b580      	push	{r7, lr}
 8015230:	b082      	sub	sp, #8
 8015232:	af00      	add	r7, sp, #0
 8015234:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801523c:	b2db      	uxtb	r3, r3
 801523e:	2b03      	cmp	r3, #3
 8015240:	d110      	bne.n	8015264 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015248:	2b00      	cmp	r3, #0
 801524a:	d00b      	beq.n	8015264 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015252:	69db      	ldr	r3, [r3, #28]
 8015254:	2b00      	cmp	r3, #0
 8015256:	d005      	beq.n	8015264 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801525e:	69db      	ldr	r3, [r3, #28]
 8015260:	6878      	ldr	r0, [r7, #4]
 8015262:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015264:	2300      	movs	r3, #0
}
 8015266:	4618      	mov	r0, r3
 8015268:	3708      	adds	r7, #8
 801526a:	46bd      	mov	sp, r7
 801526c:	bd80      	pop	{r7, pc}

0801526e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801526e:	b580      	push	{r7, lr}
 8015270:	b082      	sub	sp, #8
 8015272:	af00      	add	r7, sp, #0
 8015274:	6078      	str	r0, [r7, #4]
 8015276:	460b      	mov	r3, r1
 8015278:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	32ae      	adds	r2, #174	; 0xae
 8015284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015288:	2b00      	cmp	r3, #0
 801528a:	d101      	bne.n	8015290 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801528c:	2303      	movs	r3, #3
 801528e:	e01c      	b.n	80152ca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015296:	b2db      	uxtb	r3, r3
 8015298:	2b03      	cmp	r3, #3
 801529a:	d115      	bne.n	80152c8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	32ae      	adds	r2, #174	; 0xae
 80152a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152aa:	6a1b      	ldr	r3, [r3, #32]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d00b      	beq.n	80152c8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	32ae      	adds	r2, #174	; 0xae
 80152ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152be:	6a1b      	ldr	r3, [r3, #32]
 80152c0:	78fa      	ldrb	r2, [r7, #3]
 80152c2:	4611      	mov	r1, r2
 80152c4:	6878      	ldr	r0, [r7, #4]
 80152c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80152c8:	2300      	movs	r3, #0
}
 80152ca:	4618      	mov	r0, r3
 80152cc:	3708      	adds	r7, #8
 80152ce:	46bd      	mov	sp, r7
 80152d0:	bd80      	pop	{r7, pc}

080152d2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80152d2:	b580      	push	{r7, lr}
 80152d4:	b082      	sub	sp, #8
 80152d6:	af00      	add	r7, sp, #0
 80152d8:	6078      	str	r0, [r7, #4]
 80152da:	460b      	mov	r3, r1
 80152dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	32ae      	adds	r2, #174	; 0xae
 80152e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d101      	bne.n	80152f4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80152f0:	2303      	movs	r3, #3
 80152f2:	e01c      	b.n	801532e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80152fa:	b2db      	uxtb	r3, r3
 80152fc:	2b03      	cmp	r3, #3
 80152fe:	d115      	bne.n	801532c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	32ae      	adds	r2, #174	; 0xae
 801530a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015310:	2b00      	cmp	r3, #0
 8015312:	d00b      	beq.n	801532c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	32ae      	adds	r2, #174	; 0xae
 801531e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015324:	78fa      	ldrb	r2, [r7, #3]
 8015326:	4611      	mov	r1, r2
 8015328:	6878      	ldr	r0, [r7, #4]
 801532a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801532c:	2300      	movs	r3, #0
}
 801532e:	4618      	mov	r0, r3
 8015330:	3708      	adds	r7, #8
 8015332:	46bd      	mov	sp, r7
 8015334:	bd80      	pop	{r7, pc}

08015336 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015336:	b480      	push	{r7}
 8015338:	b083      	sub	sp, #12
 801533a:	af00      	add	r7, sp, #0
 801533c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801533e:	2300      	movs	r3, #0
}
 8015340:	4618      	mov	r0, r3
 8015342:	370c      	adds	r7, #12
 8015344:	46bd      	mov	sp, r7
 8015346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801534a:	4770      	bx	lr

0801534c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801534c:	b580      	push	{r7, lr}
 801534e:	b084      	sub	sp, #16
 8015350:	af00      	add	r7, sp, #0
 8015352:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015354:	2300      	movs	r3, #0
 8015356:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	2201      	movs	r2, #1
 801535c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015366:	2b00      	cmp	r3, #0
 8015368:	d00e      	beq.n	8015388 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015370:	685b      	ldr	r3, [r3, #4]
 8015372:	687a      	ldr	r2, [r7, #4]
 8015374:	6852      	ldr	r2, [r2, #4]
 8015376:	b2d2      	uxtb	r2, r2
 8015378:	4611      	mov	r1, r2
 801537a:	6878      	ldr	r0, [r7, #4]
 801537c:	4798      	blx	r3
 801537e:	4603      	mov	r3, r0
 8015380:	2b00      	cmp	r3, #0
 8015382:	d001      	beq.n	8015388 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015384:	2303      	movs	r3, #3
 8015386:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015388:	7bfb      	ldrb	r3, [r7, #15]
}
 801538a:	4618      	mov	r0, r3
 801538c:	3710      	adds	r7, #16
 801538e:	46bd      	mov	sp, r7
 8015390:	bd80      	pop	{r7, pc}

08015392 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015392:	b480      	push	{r7}
 8015394:	b083      	sub	sp, #12
 8015396:	af00      	add	r7, sp, #0
 8015398:	6078      	str	r0, [r7, #4]
 801539a:	460b      	mov	r3, r1
 801539c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801539e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80153a0:	4618      	mov	r0, r3
 80153a2:	370c      	adds	r7, #12
 80153a4:	46bd      	mov	sp, r7
 80153a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153aa:	4770      	bx	lr

080153ac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80153ac:	b480      	push	{r7}
 80153ae:	b083      	sub	sp, #12
 80153b0:	af00      	add	r7, sp, #0
 80153b2:	6078      	str	r0, [r7, #4]
 80153b4:	460b      	mov	r3, r1
 80153b6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80153b8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80153ba:	4618      	mov	r0, r3
 80153bc:	370c      	adds	r7, #12
 80153be:	46bd      	mov	sp, r7
 80153c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153c4:	4770      	bx	lr

080153c6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80153c6:	b580      	push	{r7, lr}
 80153c8:	b086      	sub	sp, #24
 80153ca:	af00      	add	r7, sp, #0
 80153cc:	6078      	str	r0, [r7, #4]
 80153ce:	460b      	mov	r3, r1
 80153d0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80153da:	2300      	movs	r3, #0
 80153dc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	885b      	ldrh	r3, [r3, #2]
 80153e2:	b29a      	uxth	r2, r3
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	781b      	ldrb	r3, [r3, #0]
 80153e8:	b29b      	uxth	r3, r3
 80153ea:	429a      	cmp	r2, r3
 80153ec:	d920      	bls.n	8015430 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	781b      	ldrb	r3, [r3, #0]
 80153f2:	b29b      	uxth	r3, r3
 80153f4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80153f6:	e013      	b.n	8015420 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80153f8:	f107 030a 	add.w	r3, r7, #10
 80153fc:	4619      	mov	r1, r3
 80153fe:	6978      	ldr	r0, [r7, #20]
 8015400:	f000 f81b 	bl	801543a <USBD_GetNextDesc>
 8015404:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015406:	697b      	ldr	r3, [r7, #20]
 8015408:	785b      	ldrb	r3, [r3, #1]
 801540a:	2b05      	cmp	r3, #5
 801540c:	d108      	bne.n	8015420 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801540e:	697b      	ldr	r3, [r7, #20]
 8015410:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015412:	693b      	ldr	r3, [r7, #16]
 8015414:	789b      	ldrb	r3, [r3, #2]
 8015416:	78fa      	ldrb	r2, [r7, #3]
 8015418:	429a      	cmp	r2, r3
 801541a:	d008      	beq.n	801542e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801541c:	2300      	movs	r3, #0
 801541e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	885b      	ldrh	r3, [r3, #2]
 8015424:	b29a      	uxth	r2, r3
 8015426:	897b      	ldrh	r3, [r7, #10]
 8015428:	429a      	cmp	r2, r3
 801542a:	d8e5      	bhi.n	80153f8 <USBD_GetEpDesc+0x32>
 801542c:	e000      	b.n	8015430 <USBD_GetEpDesc+0x6a>
          break;
 801542e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015430:	693b      	ldr	r3, [r7, #16]
}
 8015432:	4618      	mov	r0, r3
 8015434:	3718      	adds	r7, #24
 8015436:	46bd      	mov	sp, r7
 8015438:	bd80      	pop	{r7, pc}

0801543a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801543a:	b480      	push	{r7}
 801543c:	b085      	sub	sp, #20
 801543e:	af00      	add	r7, sp, #0
 8015440:	6078      	str	r0, [r7, #4]
 8015442:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015448:	683b      	ldr	r3, [r7, #0]
 801544a:	881a      	ldrh	r2, [r3, #0]
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	781b      	ldrb	r3, [r3, #0]
 8015450:	b29b      	uxth	r3, r3
 8015452:	4413      	add	r3, r2
 8015454:	b29a      	uxth	r2, r3
 8015456:	683b      	ldr	r3, [r7, #0]
 8015458:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	781b      	ldrb	r3, [r3, #0]
 801545e:	461a      	mov	r2, r3
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	4413      	add	r3, r2
 8015464:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015466:	68fb      	ldr	r3, [r7, #12]
}
 8015468:	4618      	mov	r0, r3
 801546a:	3714      	adds	r7, #20
 801546c:	46bd      	mov	sp, r7
 801546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015472:	4770      	bx	lr

08015474 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015474:	b480      	push	{r7}
 8015476:	b087      	sub	sp, #28
 8015478:	af00      	add	r7, sp, #0
 801547a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015480:	697b      	ldr	r3, [r7, #20]
 8015482:	781b      	ldrb	r3, [r3, #0]
 8015484:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015486:	697b      	ldr	r3, [r7, #20]
 8015488:	3301      	adds	r3, #1
 801548a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801548c:	697b      	ldr	r3, [r7, #20]
 801548e:	781b      	ldrb	r3, [r3, #0]
 8015490:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015492:	8a3b      	ldrh	r3, [r7, #16]
 8015494:	021b      	lsls	r3, r3, #8
 8015496:	b21a      	sxth	r2, r3
 8015498:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801549c:	4313      	orrs	r3, r2
 801549e:	b21b      	sxth	r3, r3
 80154a0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80154a2:	89fb      	ldrh	r3, [r7, #14]
}
 80154a4:	4618      	mov	r0, r3
 80154a6:	371c      	adds	r7, #28
 80154a8:	46bd      	mov	sp, r7
 80154aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ae:	4770      	bx	lr

080154b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80154b0:	b580      	push	{r7, lr}
 80154b2:	b084      	sub	sp, #16
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	6078      	str	r0, [r7, #4]
 80154b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80154ba:	2300      	movs	r3, #0
 80154bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80154be:	683b      	ldr	r3, [r7, #0]
 80154c0:	781b      	ldrb	r3, [r3, #0]
 80154c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80154c6:	2b40      	cmp	r3, #64	; 0x40
 80154c8:	d005      	beq.n	80154d6 <USBD_StdDevReq+0x26>
 80154ca:	2b40      	cmp	r3, #64	; 0x40
 80154cc:	d857      	bhi.n	801557e <USBD_StdDevReq+0xce>
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d00f      	beq.n	80154f2 <USBD_StdDevReq+0x42>
 80154d2:	2b20      	cmp	r3, #32
 80154d4:	d153      	bne.n	801557e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	32ae      	adds	r2, #174	; 0xae
 80154e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154e4:	689b      	ldr	r3, [r3, #8]
 80154e6:	6839      	ldr	r1, [r7, #0]
 80154e8:	6878      	ldr	r0, [r7, #4]
 80154ea:	4798      	blx	r3
 80154ec:	4603      	mov	r3, r0
 80154ee:	73fb      	strb	r3, [r7, #15]
      break;
 80154f0:	e04a      	b.n	8015588 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80154f2:	683b      	ldr	r3, [r7, #0]
 80154f4:	785b      	ldrb	r3, [r3, #1]
 80154f6:	2b09      	cmp	r3, #9
 80154f8:	d83b      	bhi.n	8015572 <USBD_StdDevReq+0xc2>
 80154fa:	a201      	add	r2, pc, #4	; (adr r2, 8015500 <USBD_StdDevReq+0x50>)
 80154fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015500:	08015555 	.word	0x08015555
 8015504:	08015569 	.word	0x08015569
 8015508:	08015573 	.word	0x08015573
 801550c:	0801555f 	.word	0x0801555f
 8015510:	08015573 	.word	0x08015573
 8015514:	08015533 	.word	0x08015533
 8015518:	08015529 	.word	0x08015529
 801551c:	08015573 	.word	0x08015573
 8015520:	0801554b 	.word	0x0801554b
 8015524:	0801553d 	.word	0x0801553d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015528:	6839      	ldr	r1, [r7, #0]
 801552a:	6878      	ldr	r0, [r7, #4]
 801552c:	f000 fa3c 	bl	80159a8 <USBD_GetDescriptor>
          break;
 8015530:	e024      	b.n	801557c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015532:	6839      	ldr	r1, [r7, #0]
 8015534:	6878      	ldr	r0, [r7, #4]
 8015536:	f000 fba1 	bl	8015c7c <USBD_SetAddress>
          break;
 801553a:	e01f      	b.n	801557c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801553c:	6839      	ldr	r1, [r7, #0]
 801553e:	6878      	ldr	r0, [r7, #4]
 8015540:	f000 fbe0 	bl	8015d04 <USBD_SetConfig>
 8015544:	4603      	mov	r3, r0
 8015546:	73fb      	strb	r3, [r7, #15]
          break;
 8015548:	e018      	b.n	801557c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801554a:	6839      	ldr	r1, [r7, #0]
 801554c:	6878      	ldr	r0, [r7, #4]
 801554e:	f000 fc83 	bl	8015e58 <USBD_GetConfig>
          break;
 8015552:	e013      	b.n	801557c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015554:	6839      	ldr	r1, [r7, #0]
 8015556:	6878      	ldr	r0, [r7, #4]
 8015558:	f000 fcb4 	bl	8015ec4 <USBD_GetStatus>
          break;
 801555c:	e00e      	b.n	801557c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801555e:	6839      	ldr	r1, [r7, #0]
 8015560:	6878      	ldr	r0, [r7, #4]
 8015562:	f000 fce3 	bl	8015f2c <USBD_SetFeature>
          break;
 8015566:	e009      	b.n	801557c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015568:	6839      	ldr	r1, [r7, #0]
 801556a:	6878      	ldr	r0, [r7, #4]
 801556c:	f000 fd07 	bl	8015f7e <USBD_ClrFeature>
          break;
 8015570:	e004      	b.n	801557c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015572:	6839      	ldr	r1, [r7, #0]
 8015574:	6878      	ldr	r0, [r7, #4]
 8015576:	f000 fd5e 	bl	8016036 <USBD_CtlError>
          break;
 801557a:	bf00      	nop
      }
      break;
 801557c:	e004      	b.n	8015588 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801557e:	6839      	ldr	r1, [r7, #0]
 8015580:	6878      	ldr	r0, [r7, #4]
 8015582:	f000 fd58 	bl	8016036 <USBD_CtlError>
      break;
 8015586:	bf00      	nop
  }

  return ret;
 8015588:	7bfb      	ldrb	r3, [r7, #15]
}
 801558a:	4618      	mov	r0, r3
 801558c:	3710      	adds	r7, #16
 801558e:	46bd      	mov	sp, r7
 8015590:	bd80      	pop	{r7, pc}
 8015592:	bf00      	nop

08015594 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015594:	b580      	push	{r7, lr}
 8015596:	b084      	sub	sp, #16
 8015598:	af00      	add	r7, sp, #0
 801559a:	6078      	str	r0, [r7, #4]
 801559c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801559e:	2300      	movs	r3, #0
 80155a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80155a2:	683b      	ldr	r3, [r7, #0]
 80155a4:	781b      	ldrb	r3, [r3, #0]
 80155a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80155aa:	2b40      	cmp	r3, #64	; 0x40
 80155ac:	d005      	beq.n	80155ba <USBD_StdItfReq+0x26>
 80155ae:	2b40      	cmp	r3, #64	; 0x40
 80155b0:	d852      	bhi.n	8015658 <USBD_StdItfReq+0xc4>
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d001      	beq.n	80155ba <USBD_StdItfReq+0x26>
 80155b6:	2b20      	cmp	r3, #32
 80155b8:	d14e      	bne.n	8015658 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80155c0:	b2db      	uxtb	r3, r3
 80155c2:	3b01      	subs	r3, #1
 80155c4:	2b02      	cmp	r3, #2
 80155c6:	d840      	bhi.n	801564a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80155c8:	683b      	ldr	r3, [r7, #0]
 80155ca:	889b      	ldrh	r3, [r3, #4]
 80155cc:	b2db      	uxtb	r3, r3
 80155ce:	2b01      	cmp	r3, #1
 80155d0:	d836      	bhi.n	8015640 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80155d2:	683b      	ldr	r3, [r7, #0]
 80155d4:	889b      	ldrh	r3, [r3, #4]
 80155d6:	b2db      	uxtb	r3, r3
 80155d8:	4619      	mov	r1, r3
 80155da:	6878      	ldr	r0, [r7, #4]
 80155dc:	f7ff fed9 	bl	8015392 <USBD_CoreFindIF>
 80155e0:	4603      	mov	r3, r0
 80155e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80155e4:	7bbb      	ldrb	r3, [r7, #14]
 80155e6:	2bff      	cmp	r3, #255	; 0xff
 80155e8:	d01d      	beq.n	8015626 <USBD_StdItfReq+0x92>
 80155ea:	7bbb      	ldrb	r3, [r7, #14]
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d11a      	bne.n	8015626 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80155f0:	7bba      	ldrb	r2, [r7, #14]
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	32ae      	adds	r2, #174	; 0xae
 80155f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155fa:	689b      	ldr	r3, [r3, #8]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d00f      	beq.n	8015620 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015600:	7bba      	ldrb	r2, [r7, #14]
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015608:	7bba      	ldrb	r2, [r7, #14]
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	32ae      	adds	r2, #174	; 0xae
 801560e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015612:	689b      	ldr	r3, [r3, #8]
 8015614:	6839      	ldr	r1, [r7, #0]
 8015616:	6878      	ldr	r0, [r7, #4]
 8015618:	4798      	blx	r3
 801561a:	4603      	mov	r3, r0
 801561c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801561e:	e004      	b.n	801562a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015620:	2303      	movs	r3, #3
 8015622:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015624:	e001      	b.n	801562a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015626:	2303      	movs	r3, #3
 8015628:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801562a:	683b      	ldr	r3, [r7, #0]
 801562c:	88db      	ldrh	r3, [r3, #6]
 801562e:	2b00      	cmp	r3, #0
 8015630:	d110      	bne.n	8015654 <USBD_StdItfReq+0xc0>
 8015632:	7bfb      	ldrb	r3, [r7, #15]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d10d      	bne.n	8015654 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015638:	6878      	ldr	r0, [r7, #4]
 801563a:	f000 fdc7 	bl	80161cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801563e:	e009      	b.n	8015654 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015640:	6839      	ldr	r1, [r7, #0]
 8015642:	6878      	ldr	r0, [r7, #4]
 8015644:	f000 fcf7 	bl	8016036 <USBD_CtlError>
          break;
 8015648:	e004      	b.n	8015654 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801564a:	6839      	ldr	r1, [r7, #0]
 801564c:	6878      	ldr	r0, [r7, #4]
 801564e:	f000 fcf2 	bl	8016036 <USBD_CtlError>
          break;
 8015652:	e000      	b.n	8015656 <USBD_StdItfReq+0xc2>
          break;
 8015654:	bf00      	nop
      }
      break;
 8015656:	e004      	b.n	8015662 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8015658:	6839      	ldr	r1, [r7, #0]
 801565a:	6878      	ldr	r0, [r7, #4]
 801565c:	f000 fceb 	bl	8016036 <USBD_CtlError>
      break;
 8015660:	bf00      	nop
  }

  return ret;
 8015662:	7bfb      	ldrb	r3, [r7, #15]
}
 8015664:	4618      	mov	r0, r3
 8015666:	3710      	adds	r7, #16
 8015668:	46bd      	mov	sp, r7
 801566a:	bd80      	pop	{r7, pc}

0801566c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801566c:	b580      	push	{r7, lr}
 801566e:	b084      	sub	sp, #16
 8015670:	af00      	add	r7, sp, #0
 8015672:	6078      	str	r0, [r7, #4]
 8015674:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015676:	2300      	movs	r3, #0
 8015678:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801567a:	683b      	ldr	r3, [r7, #0]
 801567c:	889b      	ldrh	r3, [r3, #4]
 801567e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015680:	683b      	ldr	r3, [r7, #0]
 8015682:	781b      	ldrb	r3, [r3, #0]
 8015684:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015688:	2b40      	cmp	r3, #64	; 0x40
 801568a:	d007      	beq.n	801569c <USBD_StdEPReq+0x30>
 801568c:	2b40      	cmp	r3, #64	; 0x40
 801568e:	f200 817f 	bhi.w	8015990 <USBD_StdEPReq+0x324>
 8015692:	2b00      	cmp	r3, #0
 8015694:	d02a      	beq.n	80156ec <USBD_StdEPReq+0x80>
 8015696:	2b20      	cmp	r3, #32
 8015698:	f040 817a 	bne.w	8015990 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801569c:	7bbb      	ldrb	r3, [r7, #14]
 801569e:	4619      	mov	r1, r3
 80156a0:	6878      	ldr	r0, [r7, #4]
 80156a2:	f7ff fe83 	bl	80153ac <USBD_CoreFindEP>
 80156a6:	4603      	mov	r3, r0
 80156a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80156aa:	7b7b      	ldrb	r3, [r7, #13]
 80156ac:	2bff      	cmp	r3, #255	; 0xff
 80156ae:	f000 8174 	beq.w	801599a <USBD_StdEPReq+0x32e>
 80156b2:	7b7b      	ldrb	r3, [r7, #13]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	f040 8170 	bne.w	801599a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80156ba:	7b7a      	ldrb	r2, [r7, #13]
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80156c2:	7b7a      	ldrb	r2, [r7, #13]
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	32ae      	adds	r2, #174	; 0xae
 80156c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156cc:	689b      	ldr	r3, [r3, #8]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	f000 8163 	beq.w	801599a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80156d4:	7b7a      	ldrb	r2, [r7, #13]
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	32ae      	adds	r2, #174	; 0xae
 80156da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156de:	689b      	ldr	r3, [r3, #8]
 80156e0:	6839      	ldr	r1, [r7, #0]
 80156e2:	6878      	ldr	r0, [r7, #4]
 80156e4:	4798      	blx	r3
 80156e6:	4603      	mov	r3, r0
 80156e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80156ea:	e156      	b.n	801599a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80156ec:	683b      	ldr	r3, [r7, #0]
 80156ee:	785b      	ldrb	r3, [r3, #1]
 80156f0:	2b03      	cmp	r3, #3
 80156f2:	d008      	beq.n	8015706 <USBD_StdEPReq+0x9a>
 80156f4:	2b03      	cmp	r3, #3
 80156f6:	f300 8145 	bgt.w	8015984 <USBD_StdEPReq+0x318>
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	f000 809b 	beq.w	8015836 <USBD_StdEPReq+0x1ca>
 8015700:	2b01      	cmp	r3, #1
 8015702:	d03c      	beq.n	801577e <USBD_StdEPReq+0x112>
 8015704:	e13e      	b.n	8015984 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801570c:	b2db      	uxtb	r3, r3
 801570e:	2b02      	cmp	r3, #2
 8015710:	d002      	beq.n	8015718 <USBD_StdEPReq+0xac>
 8015712:	2b03      	cmp	r3, #3
 8015714:	d016      	beq.n	8015744 <USBD_StdEPReq+0xd8>
 8015716:	e02c      	b.n	8015772 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015718:	7bbb      	ldrb	r3, [r7, #14]
 801571a:	2b00      	cmp	r3, #0
 801571c:	d00d      	beq.n	801573a <USBD_StdEPReq+0xce>
 801571e:	7bbb      	ldrb	r3, [r7, #14]
 8015720:	2b80      	cmp	r3, #128	; 0x80
 8015722:	d00a      	beq.n	801573a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015724:	7bbb      	ldrb	r3, [r7, #14]
 8015726:	4619      	mov	r1, r3
 8015728:	6878      	ldr	r0, [r7, #4]
 801572a:	f001 f9c3 	bl	8016ab4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801572e:	2180      	movs	r1, #128	; 0x80
 8015730:	6878      	ldr	r0, [r7, #4]
 8015732:	f001 f9bf 	bl	8016ab4 <USBD_LL_StallEP>
 8015736:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015738:	e020      	b.n	801577c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801573a:	6839      	ldr	r1, [r7, #0]
 801573c:	6878      	ldr	r0, [r7, #4]
 801573e:	f000 fc7a 	bl	8016036 <USBD_CtlError>
              break;
 8015742:	e01b      	b.n	801577c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015744:	683b      	ldr	r3, [r7, #0]
 8015746:	885b      	ldrh	r3, [r3, #2]
 8015748:	2b00      	cmp	r3, #0
 801574a:	d10e      	bne.n	801576a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801574c:	7bbb      	ldrb	r3, [r7, #14]
 801574e:	2b00      	cmp	r3, #0
 8015750:	d00b      	beq.n	801576a <USBD_StdEPReq+0xfe>
 8015752:	7bbb      	ldrb	r3, [r7, #14]
 8015754:	2b80      	cmp	r3, #128	; 0x80
 8015756:	d008      	beq.n	801576a <USBD_StdEPReq+0xfe>
 8015758:	683b      	ldr	r3, [r7, #0]
 801575a:	88db      	ldrh	r3, [r3, #6]
 801575c:	2b00      	cmp	r3, #0
 801575e:	d104      	bne.n	801576a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015760:	7bbb      	ldrb	r3, [r7, #14]
 8015762:	4619      	mov	r1, r3
 8015764:	6878      	ldr	r0, [r7, #4]
 8015766:	f001 f9a5 	bl	8016ab4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801576a:	6878      	ldr	r0, [r7, #4]
 801576c:	f000 fd2e 	bl	80161cc <USBD_CtlSendStatus>

              break;
 8015770:	e004      	b.n	801577c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015772:	6839      	ldr	r1, [r7, #0]
 8015774:	6878      	ldr	r0, [r7, #4]
 8015776:	f000 fc5e 	bl	8016036 <USBD_CtlError>
              break;
 801577a:	bf00      	nop
          }
          break;
 801577c:	e107      	b.n	801598e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015784:	b2db      	uxtb	r3, r3
 8015786:	2b02      	cmp	r3, #2
 8015788:	d002      	beq.n	8015790 <USBD_StdEPReq+0x124>
 801578a:	2b03      	cmp	r3, #3
 801578c:	d016      	beq.n	80157bc <USBD_StdEPReq+0x150>
 801578e:	e04b      	b.n	8015828 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015790:	7bbb      	ldrb	r3, [r7, #14]
 8015792:	2b00      	cmp	r3, #0
 8015794:	d00d      	beq.n	80157b2 <USBD_StdEPReq+0x146>
 8015796:	7bbb      	ldrb	r3, [r7, #14]
 8015798:	2b80      	cmp	r3, #128	; 0x80
 801579a:	d00a      	beq.n	80157b2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801579c:	7bbb      	ldrb	r3, [r7, #14]
 801579e:	4619      	mov	r1, r3
 80157a0:	6878      	ldr	r0, [r7, #4]
 80157a2:	f001 f987 	bl	8016ab4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80157a6:	2180      	movs	r1, #128	; 0x80
 80157a8:	6878      	ldr	r0, [r7, #4]
 80157aa:	f001 f983 	bl	8016ab4 <USBD_LL_StallEP>
 80157ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80157b0:	e040      	b.n	8015834 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80157b2:	6839      	ldr	r1, [r7, #0]
 80157b4:	6878      	ldr	r0, [r7, #4]
 80157b6:	f000 fc3e 	bl	8016036 <USBD_CtlError>
              break;
 80157ba:	e03b      	b.n	8015834 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80157bc:	683b      	ldr	r3, [r7, #0]
 80157be:	885b      	ldrh	r3, [r3, #2]
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d136      	bne.n	8015832 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80157c4:	7bbb      	ldrb	r3, [r7, #14]
 80157c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d004      	beq.n	80157d8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80157ce:	7bbb      	ldrb	r3, [r7, #14]
 80157d0:	4619      	mov	r1, r3
 80157d2:	6878      	ldr	r0, [r7, #4]
 80157d4:	f001 f98d 	bl	8016af2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80157d8:	6878      	ldr	r0, [r7, #4]
 80157da:	f000 fcf7 	bl	80161cc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80157de:	7bbb      	ldrb	r3, [r7, #14]
 80157e0:	4619      	mov	r1, r3
 80157e2:	6878      	ldr	r0, [r7, #4]
 80157e4:	f7ff fde2 	bl	80153ac <USBD_CoreFindEP>
 80157e8:	4603      	mov	r3, r0
 80157ea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80157ec:	7b7b      	ldrb	r3, [r7, #13]
 80157ee:	2bff      	cmp	r3, #255	; 0xff
 80157f0:	d01f      	beq.n	8015832 <USBD_StdEPReq+0x1c6>
 80157f2:	7b7b      	ldrb	r3, [r7, #13]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d11c      	bne.n	8015832 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80157f8:	7b7a      	ldrb	r2, [r7, #13]
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015800:	7b7a      	ldrb	r2, [r7, #13]
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	32ae      	adds	r2, #174	; 0xae
 8015806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801580a:	689b      	ldr	r3, [r3, #8]
 801580c:	2b00      	cmp	r3, #0
 801580e:	d010      	beq.n	8015832 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015810:	7b7a      	ldrb	r2, [r7, #13]
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	32ae      	adds	r2, #174	; 0xae
 8015816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801581a:	689b      	ldr	r3, [r3, #8]
 801581c:	6839      	ldr	r1, [r7, #0]
 801581e:	6878      	ldr	r0, [r7, #4]
 8015820:	4798      	blx	r3
 8015822:	4603      	mov	r3, r0
 8015824:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015826:	e004      	b.n	8015832 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015828:	6839      	ldr	r1, [r7, #0]
 801582a:	6878      	ldr	r0, [r7, #4]
 801582c:	f000 fc03 	bl	8016036 <USBD_CtlError>
              break;
 8015830:	e000      	b.n	8015834 <USBD_StdEPReq+0x1c8>
              break;
 8015832:	bf00      	nop
          }
          break;
 8015834:	e0ab      	b.n	801598e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801583c:	b2db      	uxtb	r3, r3
 801583e:	2b02      	cmp	r3, #2
 8015840:	d002      	beq.n	8015848 <USBD_StdEPReq+0x1dc>
 8015842:	2b03      	cmp	r3, #3
 8015844:	d032      	beq.n	80158ac <USBD_StdEPReq+0x240>
 8015846:	e097      	b.n	8015978 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015848:	7bbb      	ldrb	r3, [r7, #14]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d007      	beq.n	801585e <USBD_StdEPReq+0x1f2>
 801584e:	7bbb      	ldrb	r3, [r7, #14]
 8015850:	2b80      	cmp	r3, #128	; 0x80
 8015852:	d004      	beq.n	801585e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015854:	6839      	ldr	r1, [r7, #0]
 8015856:	6878      	ldr	r0, [r7, #4]
 8015858:	f000 fbed 	bl	8016036 <USBD_CtlError>
                break;
 801585c:	e091      	b.n	8015982 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801585e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015862:	2b00      	cmp	r3, #0
 8015864:	da0b      	bge.n	801587e <USBD_StdEPReq+0x212>
 8015866:	7bbb      	ldrb	r3, [r7, #14]
 8015868:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801586c:	4613      	mov	r3, r2
 801586e:	009b      	lsls	r3, r3, #2
 8015870:	4413      	add	r3, r2
 8015872:	009b      	lsls	r3, r3, #2
 8015874:	3310      	adds	r3, #16
 8015876:	687a      	ldr	r2, [r7, #4]
 8015878:	4413      	add	r3, r2
 801587a:	3304      	adds	r3, #4
 801587c:	e00b      	b.n	8015896 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801587e:	7bbb      	ldrb	r3, [r7, #14]
 8015880:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015884:	4613      	mov	r3, r2
 8015886:	009b      	lsls	r3, r3, #2
 8015888:	4413      	add	r3, r2
 801588a:	009b      	lsls	r3, r3, #2
 801588c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015890:	687a      	ldr	r2, [r7, #4]
 8015892:	4413      	add	r3, r2
 8015894:	3304      	adds	r3, #4
 8015896:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015898:	68bb      	ldr	r3, [r7, #8]
 801589a:	2200      	movs	r2, #0
 801589c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801589e:	68bb      	ldr	r3, [r7, #8]
 80158a0:	2202      	movs	r2, #2
 80158a2:	4619      	mov	r1, r3
 80158a4:	6878      	ldr	r0, [r7, #4]
 80158a6:	f000 fc37 	bl	8016118 <USBD_CtlSendData>
              break;
 80158aa:	e06a      	b.n	8015982 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80158ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	da11      	bge.n	80158d8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80158b4:	7bbb      	ldrb	r3, [r7, #14]
 80158b6:	f003 020f 	and.w	r2, r3, #15
 80158ba:	6879      	ldr	r1, [r7, #4]
 80158bc:	4613      	mov	r3, r2
 80158be:	009b      	lsls	r3, r3, #2
 80158c0:	4413      	add	r3, r2
 80158c2:	009b      	lsls	r3, r3, #2
 80158c4:	440b      	add	r3, r1
 80158c6:	3324      	adds	r3, #36	; 0x24
 80158c8:	881b      	ldrh	r3, [r3, #0]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d117      	bne.n	80158fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80158ce:	6839      	ldr	r1, [r7, #0]
 80158d0:	6878      	ldr	r0, [r7, #4]
 80158d2:	f000 fbb0 	bl	8016036 <USBD_CtlError>
                  break;
 80158d6:	e054      	b.n	8015982 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80158d8:	7bbb      	ldrb	r3, [r7, #14]
 80158da:	f003 020f 	and.w	r2, r3, #15
 80158de:	6879      	ldr	r1, [r7, #4]
 80158e0:	4613      	mov	r3, r2
 80158e2:	009b      	lsls	r3, r3, #2
 80158e4:	4413      	add	r3, r2
 80158e6:	009b      	lsls	r3, r3, #2
 80158e8:	440b      	add	r3, r1
 80158ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80158ee:	881b      	ldrh	r3, [r3, #0]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d104      	bne.n	80158fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80158f4:	6839      	ldr	r1, [r7, #0]
 80158f6:	6878      	ldr	r0, [r7, #4]
 80158f8:	f000 fb9d 	bl	8016036 <USBD_CtlError>
                  break;
 80158fc:	e041      	b.n	8015982 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80158fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015902:	2b00      	cmp	r3, #0
 8015904:	da0b      	bge.n	801591e <USBD_StdEPReq+0x2b2>
 8015906:	7bbb      	ldrb	r3, [r7, #14]
 8015908:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801590c:	4613      	mov	r3, r2
 801590e:	009b      	lsls	r3, r3, #2
 8015910:	4413      	add	r3, r2
 8015912:	009b      	lsls	r3, r3, #2
 8015914:	3310      	adds	r3, #16
 8015916:	687a      	ldr	r2, [r7, #4]
 8015918:	4413      	add	r3, r2
 801591a:	3304      	adds	r3, #4
 801591c:	e00b      	b.n	8015936 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801591e:	7bbb      	ldrb	r3, [r7, #14]
 8015920:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015924:	4613      	mov	r3, r2
 8015926:	009b      	lsls	r3, r3, #2
 8015928:	4413      	add	r3, r2
 801592a:	009b      	lsls	r3, r3, #2
 801592c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015930:	687a      	ldr	r2, [r7, #4]
 8015932:	4413      	add	r3, r2
 8015934:	3304      	adds	r3, #4
 8015936:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015938:	7bbb      	ldrb	r3, [r7, #14]
 801593a:	2b00      	cmp	r3, #0
 801593c:	d002      	beq.n	8015944 <USBD_StdEPReq+0x2d8>
 801593e:	7bbb      	ldrb	r3, [r7, #14]
 8015940:	2b80      	cmp	r3, #128	; 0x80
 8015942:	d103      	bne.n	801594c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015944:	68bb      	ldr	r3, [r7, #8]
 8015946:	2200      	movs	r2, #0
 8015948:	601a      	str	r2, [r3, #0]
 801594a:	e00e      	b.n	801596a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801594c:	7bbb      	ldrb	r3, [r7, #14]
 801594e:	4619      	mov	r1, r3
 8015950:	6878      	ldr	r0, [r7, #4]
 8015952:	f001 f8ed 	bl	8016b30 <USBD_LL_IsStallEP>
 8015956:	4603      	mov	r3, r0
 8015958:	2b00      	cmp	r3, #0
 801595a:	d003      	beq.n	8015964 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801595c:	68bb      	ldr	r3, [r7, #8]
 801595e:	2201      	movs	r2, #1
 8015960:	601a      	str	r2, [r3, #0]
 8015962:	e002      	b.n	801596a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015964:	68bb      	ldr	r3, [r7, #8]
 8015966:	2200      	movs	r2, #0
 8015968:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801596a:	68bb      	ldr	r3, [r7, #8]
 801596c:	2202      	movs	r2, #2
 801596e:	4619      	mov	r1, r3
 8015970:	6878      	ldr	r0, [r7, #4]
 8015972:	f000 fbd1 	bl	8016118 <USBD_CtlSendData>
              break;
 8015976:	e004      	b.n	8015982 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015978:	6839      	ldr	r1, [r7, #0]
 801597a:	6878      	ldr	r0, [r7, #4]
 801597c:	f000 fb5b 	bl	8016036 <USBD_CtlError>
              break;
 8015980:	bf00      	nop
          }
          break;
 8015982:	e004      	b.n	801598e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015984:	6839      	ldr	r1, [r7, #0]
 8015986:	6878      	ldr	r0, [r7, #4]
 8015988:	f000 fb55 	bl	8016036 <USBD_CtlError>
          break;
 801598c:	bf00      	nop
      }
      break;
 801598e:	e005      	b.n	801599c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015990:	6839      	ldr	r1, [r7, #0]
 8015992:	6878      	ldr	r0, [r7, #4]
 8015994:	f000 fb4f 	bl	8016036 <USBD_CtlError>
      break;
 8015998:	e000      	b.n	801599c <USBD_StdEPReq+0x330>
      break;
 801599a:	bf00      	nop
  }

  return ret;
 801599c:	7bfb      	ldrb	r3, [r7, #15]
}
 801599e:	4618      	mov	r0, r3
 80159a0:	3710      	adds	r7, #16
 80159a2:	46bd      	mov	sp, r7
 80159a4:	bd80      	pop	{r7, pc}
	...

080159a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80159a8:	b580      	push	{r7, lr}
 80159aa:	b084      	sub	sp, #16
 80159ac:	af00      	add	r7, sp, #0
 80159ae:	6078      	str	r0, [r7, #4]
 80159b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80159b2:	2300      	movs	r3, #0
 80159b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80159b6:	2300      	movs	r3, #0
 80159b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80159ba:	2300      	movs	r3, #0
 80159bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80159be:	683b      	ldr	r3, [r7, #0]
 80159c0:	885b      	ldrh	r3, [r3, #2]
 80159c2:	0a1b      	lsrs	r3, r3, #8
 80159c4:	b29b      	uxth	r3, r3
 80159c6:	3b01      	subs	r3, #1
 80159c8:	2b06      	cmp	r3, #6
 80159ca:	f200 8128 	bhi.w	8015c1e <USBD_GetDescriptor+0x276>
 80159ce:	a201      	add	r2, pc, #4	; (adr r2, 80159d4 <USBD_GetDescriptor+0x2c>)
 80159d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80159d4:	080159f1 	.word	0x080159f1
 80159d8:	08015a09 	.word	0x08015a09
 80159dc:	08015a49 	.word	0x08015a49
 80159e0:	08015c1f 	.word	0x08015c1f
 80159e4:	08015c1f 	.word	0x08015c1f
 80159e8:	08015bbf 	.word	0x08015bbf
 80159ec:	08015beb 	.word	0x08015beb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	687a      	ldr	r2, [r7, #4]
 80159fa:	7c12      	ldrb	r2, [r2, #16]
 80159fc:	f107 0108 	add.w	r1, r7, #8
 8015a00:	4610      	mov	r0, r2
 8015a02:	4798      	blx	r3
 8015a04:	60f8      	str	r0, [r7, #12]
      break;
 8015a06:	e112      	b.n	8015c2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	7c1b      	ldrb	r3, [r3, #16]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d10d      	bne.n	8015a2c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a18:	f107 0208 	add.w	r2, r7, #8
 8015a1c:	4610      	mov	r0, r2
 8015a1e:	4798      	blx	r3
 8015a20:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	3301      	adds	r3, #1
 8015a26:	2202      	movs	r2, #2
 8015a28:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015a2a:	e100      	b.n	8015c2e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a34:	f107 0208 	add.w	r2, r7, #8
 8015a38:	4610      	mov	r0, r2
 8015a3a:	4798      	blx	r3
 8015a3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	3301      	adds	r3, #1
 8015a42:	2202      	movs	r2, #2
 8015a44:	701a      	strb	r2, [r3, #0]
      break;
 8015a46:	e0f2      	b.n	8015c2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015a48:	683b      	ldr	r3, [r7, #0]
 8015a4a:	885b      	ldrh	r3, [r3, #2]
 8015a4c:	b2db      	uxtb	r3, r3
 8015a4e:	2b05      	cmp	r3, #5
 8015a50:	f200 80ac 	bhi.w	8015bac <USBD_GetDescriptor+0x204>
 8015a54:	a201      	add	r2, pc, #4	; (adr r2, 8015a5c <USBD_GetDescriptor+0xb4>)
 8015a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a5a:	bf00      	nop
 8015a5c:	08015a75 	.word	0x08015a75
 8015a60:	08015aa9 	.word	0x08015aa9
 8015a64:	08015add 	.word	0x08015add
 8015a68:	08015b11 	.word	0x08015b11
 8015a6c:	08015b45 	.word	0x08015b45
 8015a70:	08015b79 	.word	0x08015b79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015a7a:	685b      	ldr	r3, [r3, #4]
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d00b      	beq.n	8015a98 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015a86:	685b      	ldr	r3, [r3, #4]
 8015a88:	687a      	ldr	r2, [r7, #4]
 8015a8a:	7c12      	ldrb	r2, [r2, #16]
 8015a8c:	f107 0108 	add.w	r1, r7, #8
 8015a90:	4610      	mov	r0, r2
 8015a92:	4798      	blx	r3
 8015a94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015a96:	e091      	b.n	8015bbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015a98:	6839      	ldr	r1, [r7, #0]
 8015a9a:	6878      	ldr	r0, [r7, #4]
 8015a9c:	f000 facb 	bl	8016036 <USBD_CtlError>
            err++;
 8015aa0:	7afb      	ldrb	r3, [r7, #11]
 8015aa2:	3301      	adds	r3, #1
 8015aa4:	72fb      	strb	r3, [r7, #11]
          break;
 8015aa6:	e089      	b.n	8015bbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015aae:	689b      	ldr	r3, [r3, #8]
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d00b      	beq.n	8015acc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015aba:	689b      	ldr	r3, [r3, #8]
 8015abc:	687a      	ldr	r2, [r7, #4]
 8015abe:	7c12      	ldrb	r2, [r2, #16]
 8015ac0:	f107 0108 	add.w	r1, r7, #8
 8015ac4:	4610      	mov	r0, r2
 8015ac6:	4798      	blx	r3
 8015ac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015aca:	e077      	b.n	8015bbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015acc:	6839      	ldr	r1, [r7, #0]
 8015ace:	6878      	ldr	r0, [r7, #4]
 8015ad0:	f000 fab1 	bl	8016036 <USBD_CtlError>
            err++;
 8015ad4:	7afb      	ldrb	r3, [r7, #11]
 8015ad6:	3301      	adds	r3, #1
 8015ad8:	72fb      	strb	r3, [r7, #11]
          break;
 8015ada:	e06f      	b.n	8015bbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ae2:	68db      	ldr	r3, [r3, #12]
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d00b      	beq.n	8015b00 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015aee:	68db      	ldr	r3, [r3, #12]
 8015af0:	687a      	ldr	r2, [r7, #4]
 8015af2:	7c12      	ldrb	r2, [r2, #16]
 8015af4:	f107 0108 	add.w	r1, r7, #8
 8015af8:	4610      	mov	r0, r2
 8015afa:	4798      	blx	r3
 8015afc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015afe:	e05d      	b.n	8015bbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015b00:	6839      	ldr	r1, [r7, #0]
 8015b02:	6878      	ldr	r0, [r7, #4]
 8015b04:	f000 fa97 	bl	8016036 <USBD_CtlError>
            err++;
 8015b08:	7afb      	ldrb	r3, [r7, #11]
 8015b0a:	3301      	adds	r3, #1
 8015b0c:	72fb      	strb	r3, [r7, #11]
          break;
 8015b0e:	e055      	b.n	8015bbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015b16:	691b      	ldr	r3, [r3, #16]
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d00b      	beq.n	8015b34 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015b22:	691b      	ldr	r3, [r3, #16]
 8015b24:	687a      	ldr	r2, [r7, #4]
 8015b26:	7c12      	ldrb	r2, [r2, #16]
 8015b28:	f107 0108 	add.w	r1, r7, #8
 8015b2c:	4610      	mov	r0, r2
 8015b2e:	4798      	blx	r3
 8015b30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015b32:	e043      	b.n	8015bbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015b34:	6839      	ldr	r1, [r7, #0]
 8015b36:	6878      	ldr	r0, [r7, #4]
 8015b38:	f000 fa7d 	bl	8016036 <USBD_CtlError>
            err++;
 8015b3c:	7afb      	ldrb	r3, [r7, #11]
 8015b3e:	3301      	adds	r3, #1
 8015b40:	72fb      	strb	r3, [r7, #11]
          break;
 8015b42:	e03b      	b.n	8015bbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015b4a:	695b      	ldr	r3, [r3, #20]
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d00b      	beq.n	8015b68 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015b56:	695b      	ldr	r3, [r3, #20]
 8015b58:	687a      	ldr	r2, [r7, #4]
 8015b5a:	7c12      	ldrb	r2, [r2, #16]
 8015b5c:	f107 0108 	add.w	r1, r7, #8
 8015b60:	4610      	mov	r0, r2
 8015b62:	4798      	blx	r3
 8015b64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015b66:	e029      	b.n	8015bbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015b68:	6839      	ldr	r1, [r7, #0]
 8015b6a:	6878      	ldr	r0, [r7, #4]
 8015b6c:	f000 fa63 	bl	8016036 <USBD_CtlError>
            err++;
 8015b70:	7afb      	ldrb	r3, [r7, #11]
 8015b72:	3301      	adds	r3, #1
 8015b74:	72fb      	strb	r3, [r7, #11]
          break;
 8015b76:	e021      	b.n	8015bbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015b7e:	699b      	ldr	r3, [r3, #24]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d00b      	beq.n	8015b9c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015b8a:	699b      	ldr	r3, [r3, #24]
 8015b8c:	687a      	ldr	r2, [r7, #4]
 8015b8e:	7c12      	ldrb	r2, [r2, #16]
 8015b90:	f107 0108 	add.w	r1, r7, #8
 8015b94:	4610      	mov	r0, r2
 8015b96:	4798      	blx	r3
 8015b98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015b9a:	e00f      	b.n	8015bbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015b9c:	6839      	ldr	r1, [r7, #0]
 8015b9e:	6878      	ldr	r0, [r7, #4]
 8015ba0:	f000 fa49 	bl	8016036 <USBD_CtlError>
            err++;
 8015ba4:	7afb      	ldrb	r3, [r7, #11]
 8015ba6:	3301      	adds	r3, #1
 8015ba8:	72fb      	strb	r3, [r7, #11]
          break;
 8015baa:	e007      	b.n	8015bbc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015bac:	6839      	ldr	r1, [r7, #0]
 8015bae:	6878      	ldr	r0, [r7, #4]
 8015bb0:	f000 fa41 	bl	8016036 <USBD_CtlError>
          err++;
 8015bb4:	7afb      	ldrb	r3, [r7, #11]
 8015bb6:	3301      	adds	r3, #1
 8015bb8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015bba:	bf00      	nop
      }
      break;
 8015bbc:	e037      	b.n	8015c2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	7c1b      	ldrb	r3, [r3, #16]
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d109      	bne.n	8015bda <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015bce:	f107 0208 	add.w	r2, r7, #8
 8015bd2:	4610      	mov	r0, r2
 8015bd4:	4798      	blx	r3
 8015bd6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015bd8:	e029      	b.n	8015c2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015bda:	6839      	ldr	r1, [r7, #0]
 8015bdc:	6878      	ldr	r0, [r7, #4]
 8015bde:	f000 fa2a 	bl	8016036 <USBD_CtlError>
        err++;
 8015be2:	7afb      	ldrb	r3, [r7, #11]
 8015be4:	3301      	adds	r3, #1
 8015be6:	72fb      	strb	r3, [r7, #11]
      break;
 8015be8:	e021      	b.n	8015c2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	7c1b      	ldrb	r3, [r3, #16]
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d10d      	bne.n	8015c0e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015bfa:	f107 0208 	add.w	r2, r7, #8
 8015bfe:	4610      	mov	r0, r2
 8015c00:	4798      	blx	r3
 8015c02:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	3301      	adds	r3, #1
 8015c08:	2207      	movs	r2, #7
 8015c0a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015c0c:	e00f      	b.n	8015c2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015c0e:	6839      	ldr	r1, [r7, #0]
 8015c10:	6878      	ldr	r0, [r7, #4]
 8015c12:	f000 fa10 	bl	8016036 <USBD_CtlError>
        err++;
 8015c16:	7afb      	ldrb	r3, [r7, #11]
 8015c18:	3301      	adds	r3, #1
 8015c1a:	72fb      	strb	r3, [r7, #11]
      break;
 8015c1c:	e007      	b.n	8015c2e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015c1e:	6839      	ldr	r1, [r7, #0]
 8015c20:	6878      	ldr	r0, [r7, #4]
 8015c22:	f000 fa08 	bl	8016036 <USBD_CtlError>
      err++;
 8015c26:	7afb      	ldrb	r3, [r7, #11]
 8015c28:	3301      	adds	r3, #1
 8015c2a:	72fb      	strb	r3, [r7, #11]
      break;
 8015c2c:	bf00      	nop
  }

  if (err != 0U)
 8015c2e:	7afb      	ldrb	r3, [r7, #11]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d11e      	bne.n	8015c72 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015c34:	683b      	ldr	r3, [r7, #0]
 8015c36:	88db      	ldrh	r3, [r3, #6]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d016      	beq.n	8015c6a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015c3c:	893b      	ldrh	r3, [r7, #8]
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d00e      	beq.n	8015c60 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015c42:	683b      	ldr	r3, [r7, #0]
 8015c44:	88da      	ldrh	r2, [r3, #6]
 8015c46:	893b      	ldrh	r3, [r7, #8]
 8015c48:	4293      	cmp	r3, r2
 8015c4a:	bf28      	it	cs
 8015c4c:	4613      	movcs	r3, r2
 8015c4e:	b29b      	uxth	r3, r3
 8015c50:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015c52:	893b      	ldrh	r3, [r7, #8]
 8015c54:	461a      	mov	r2, r3
 8015c56:	68f9      	ldr	r1, [r7, #12]
 8015c58:	6878      	ldr	r0, [r7, #4]
 8015c5a:	f000 fa5d 	bl	8016118 <USBD_CtlSendData>
 8015c5e:	e009      	b.n	8015c74 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015c60:	6839      	ldr	r1, [r7, #0]
 8015c62:	6878      	ldr	r0, [r7, #4]
 8015c64:	f000 f9e7 	bl	8016036 <USBD_CtlError>
 8015c68:	e004      	b.n	8015c74 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015c6a:	6878      	ldr	r0, [r7, #4]
 8015c6c:	f000 faae 	bl	80161cc <USBD_CtlSendStatus>
 8015c70:	e000      	b.n	8015c74 <USBD_GetDescriptor+0x2cc>
    return;
 8015c72:	bf00      	nop
  }
}
 8015c74:	3710      	adds	r7, #16
 8015c76:	46bd      	mov	sp, r7
 8015c78:	bd80      	pop	{r7, pc}
 8015c7a:	bf00      	nop

08015c7c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	b084      	sub	sp, #16
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	6078      	str	r0, [r7, #4]
 8015c84:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015c86:	683b      	ldr	r3, [r7, #0]
 8015c88:	889b      	ldrh	r3, [r3, #4]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d131      	bne.n	8015cf2 <USBD_SetAddress+0x76>
 8015c8e:	683b      	ldr	r3, [r7, #0]
 8015c90:	88db      	ldrh	r3, [r3, #6]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d12d      	bne.n	8015cf2 <USBD_SetAddress+0x76>
 8015c96:	683b      	ldr	r3, [r7, #0]
 8015c98:	885b      	ldrh	r3, [r3, #2]
 8015c9a:	2b7f      	cmp	r3, #127	; 0x7f
 8015c9c:	d829      	bhi.n	8015cf2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015c9e:	683b      	ldr	r3, [r7, #0]
 8015ca0:	885b      	ldrh	r3, [r3, #2]
 8015ca2:	b2db      	uxtb	r3, r3
 8015ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015ca8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015cb0:	b2db      	uxtb	r3, r3
 8015cb2:	2b03      	cmp	r3, #3
 8015cb4:	d104      	bne.n	8015cc0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015cb6:	6839      	ldr	r1, [r7, #0]
 8015cb8:	6878      	ldr	r0, [r7, #4]
 8015cba:	f000 f9bc 	bl	8016036 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015cbe:	e01d      	b.n	8015cfc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	7bfa      	ldrb	r2, [r7, #15]
 8015cc4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015cc8:	7bfb      	ldrb	r3, [r7, #15]
 8015cca:	4619      	mov	r1, r3
 8015ccc:	6878      	ldr	r0, [r7, #4]
 8015cce:	f000 ff5b 	bl	8016b88 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015cd2:	6878      	ldr	r0, [r7, #4]
 8015cd4:	f000 fa7a 	bl	80161cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015cd8:	7bfb      	ldrb	r3, [r7, #15]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d004      	beq.n	8015ce8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	2202      	movs	r2, #2
 8015ce2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015ce6:	e009      	b.n	8015cfc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	2201      	movs	r2, #1
 8015cec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015cf0:	e004      	b.n	8015cfc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015cf2:	6839      	ldr	r1, [r7, #0]
 8015cf4:	6878      	ldr	r0, [r7, #4]
 8015cf6:	f000 f99e 	bl	8016036 <USBD_CtlError>
  }
}
 8015cfa:	bf00      	nop
 8015cfc:	bf00      	nop
 8015cfe:	3710      	adds	r7, #16
 8015d00:	46bd      	mov	sp, r7
 8015d02:	bd80      	pop	{r7, pc}

08015d04 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d04:	b580      	push	{r7, lr}
 8015d06:	b084      	sub	sp, #16
 8015d08:	af00      	add	r7, sp, #0
 8015d0a:	6078      	str	r0, [r7, #4]
 8015d0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015d0e:	2300      	movs	r3, #0
 8015d10:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015d12:	683b      	ldr	r3, [r7, #0]
 8015d14:	885b      	ldrh	r3, [r3, #2]
 8015d16:	b2da      	uxtb	r2, r3
 8015d18:	4b4e      	ldr	r3, [pc, #312]	; (8015e54 <USBD_SetConfig+0x150>)
 8015d1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015d1c:	4b4d      	ldr	r3, [pc, #308]	; (8015e54 <USBD_SetConfig+0x150>)
 8015d1e:	781b      	ldrb	r3, [r3, #0]
 8015d20:	2b01      	cmp	r3, #1
 8015d22:	d905      	bls.n	8015d30 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015d24:	6839      	ldr	r1, [r7, #0]
 8015d26:	6878      	ldr	r0, [r7, #4]
 8015d28:	f000 f985 	bl	8016036 <USBD_CtlError>
    return USBD_FAIL;
 8015d2c:	2303      	movs	r3, #3
 8015d2e:	e08c      	b.n	8015e4a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015d36:	b2db      	uxtb	r3, r3
 8015d38:	2b02      	cmp	r3, #2
 8015d3a:	d002      	beq.n	8015d42 <USBD_SetConfig+0x3e>
 8015d3c:	2b03      	cmp	r3, #3
 8015d3e:	d029      	beq.n	8015d94 <USBD_SetConfig+0x90>
 8015d40:	e075      	b.n	8015e2e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015d42:	4b44      	ldr	r3, [pc, #272]	; (8015e54 <USBD_SetConfig+0x150>)
 8015d44:	781b      	ldrb	r3, [r3, #0]
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d020      	beq.n	8015d8c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8015d4a:	4b42      	ldr	r3, [pc, #264]	; (8015e54 <USBD_SetConfig+0x150>)
 8015d4c:	781b      	ldrb	r3, [r3, #0]
 8015d4e:	461a      	mov	r2, r3
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015d54:	4b3f      	ldr	r3, [pc, #252]	; (8015e54 <USBD_SetConfig+0x150>)
 8015d56:	781b      	ldrb	r3, [r3, #0]
 8015d58:	4619      	mov	r1, r3
 8015d5a:	6878      	ldr	r0, [r7, #4]
 8015d5c:	f7fe ffe1 	bl	8014d22 <USBD_SetClassConfig>
 8015d60:	4603      	mov	r3, r0
 8015d62:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015d64:	7bfb      	ldrb	r3, [r7, #15]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d008      	beq.n	8015d7c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8015d6a:	6839      	ldr	r1, [r7, #0]
 8015d6c:	6878      	ldr	r0, [r7, #4]
 8015d6e:	f000 f962 	bl	8016036 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	2202      	movs	r2, #2
 8015d76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015d7a:	e065      	b.n	8015e48 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015d7c:	6878      	ldr	r0, [r7, #4]
 8015d7e:	f000 fa25 	bl	80161cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	2203      	movs	r2, #3
 8015d86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015d8a:	e05d      	b.n	8015e48 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015d8c:	6878      	ldr	r0, [r7, #4]
 8015d8e:	f000 fa1d 	bl	80161cc <USBD_CtlSendStatus>
      break;
 8015d92:	e059      	b.n	8015e48 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015d94:	4b2f      	ldr	r3, [pc, #188]	; (8015e54 <USBD_SetConfig+0x150>)
 8015d96:	781b      	ldrb	r3, [r3, #0]
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d112      	bne.n	8015dc2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	2202      	movs	r2, #2
 8015da0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8015da4:	4b2b      	ldr	r3, [pc, #172]	; (8015e54 <USBD_SetConfig+0x150>)
 8015da6:	781b      	ldrb	r3, [r3, #0]
 8015da8:	461a      	mov	r2, r3
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015dae:	4b29      	ldr	r3, [pc, #164]	; (8015e54 <USBD_SetConfig+0x150>)
 8015db0:	781b      	ldrb	r3, [r3, #0]
 8015db2:	4619      	mov	r1, r3
 8015db4:	6878      	ldr	r0, [r7, #4]
 8015db6:	f7fe ffd0 	bl	8014d5a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015dba:	6878      	ldr	r0, [r7, #4]
 8015dbc:	f000 fa06 	bl	80161cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015dc0:	e042      	b.n	8015e48 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8015dc2:	4b24      	ldr	r3, [pc, #144]	; (8015e54 <USBD_SetConfig+0x150>)
 8015dc4:	781b      	ldrb	r3, [r3, #0]
 8015dc6:	461a      	mov	r2, r3
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	685b      	ldr	r3, [r3, #4]
 8015dcc:	429a      	cmp	r2, r3
 8015dce:	d02a      	beq.n	8015e26 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	685b      	ldr	r3, [r3, #4]
 8015dd4:	b2db      	uxtb	r3, r3
 8015dd6:	4619      	mov	r1, r3
 8015dd8:	6878      	ldr	r0, [r7, #4]
 8015dda:	f7fe ffbe 	bl	8014d5a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015dde:	4b1d      	ldr	r3, [pc, #116]	; (8015e54 <USBD_SetConfig+0x150>)
 8015de0:	781b      	ldrb	r3, [r3, #0]
 8015de2:	461a      	mov	r2, r3
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015de8:	4b1a      	ldr	r3, [pc, #104]	; (8015e54 <USBD_SetConfig+0x150>)
 8015dea:	781b      	ldrb	r3, [r3, #0]
 8015dec:	4619      	mov	r1, r3
 8015dee:	6878      	ldr	r0, [r7, #4]
 8015df0:	f7fe ff97 	bl	8014d22 <USBD_SetClassConfig>
 8015df4:	4603      	mov	r3, r0
 8015df6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015df8:	7bfb      	ldrb	r3, [r7, #15]
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d00f      	beq.n	8015e1e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8015dfe:	6839      	ldr	r1, [r7, #0]
 8015e00:	6878      	ldr	r0, [r7, #4]
 8015e02:	f000 f918 	bl	8016036 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	685b      	ldr	r3, [r3, #4]
 8015e0a:	b2db      	uxtb	r3, r3
 8015e0c:	4619      	mov	r1, r3
 8015e0e:	6878      	ldr	r0, [r7, #4]
 8015e10:	f7fe ffa3 	bl	8014d5a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	2202      	movs	r2, #2
 8015e18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015e1c:	e014      	b.n	8015e48 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015e1e:	6878      	ldr	r0, [r7, #4]
 8015e20:	f000 f9d4 	bl	80161cc <USBD_CtlSendStatus>
      break;
 8015e24:	e010      	b.n	8015e48 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015e26:	6878      	ldr	r0, [r7, #4]
 8015e28:	f000 f9d0 	bl	80161cc <USBD_CtlSendStatus>
      break;
 8015e2c:	e00c      	b.n	8015e48 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8015e2e:	6839      	ldr	r1, [r7, #0]
 8015e30:	6878      	ldr	r0, [r7, #4]
 8015e32:	f000 f900 	bl	8016036 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015e36:	4b07      	ldr	r3, [pc, #28]	; (8015e54 <USBD_SetConfig+0x150>)
 8015e38:	781b      	ldrb	r3, [r3, #0]
 8015e3a:	4619      	mov	r1, r3
 8015e3c:	6878      	ldr	r0, [r7, #4]
 8015e3e:	f7fe ff8c 	bl	8014d5a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015e42:	2303      	movs	r3, #3
 8015e44:	73fb      	strb	r3, [r7, #15]
      break;
 8015e46:	bf00      	nop
  }

  return ret;
 8015e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e4a:	4618      	mov	r0, r3
 8015e4c:	3710      	adds	r7, #16
 8015e4e:	46bd      	mov	sp, r7
 8015e50:	bd80      	pop	{r7, pc}
 8015e52:	bf00      	nop
 8015e54:	240014a8 	.word	0x240014a8

08015e58 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e58:	b580      	push	{r7, lr}
 8015e5a:	b082      	sub	sp, #8
 8015e5c:	af00      	add	r7, sp, #0
 8015e5e:	6078      	str	r0, [r7, #4]
 8015e60:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015e62:	683b      	ldr	r3, [r7, #0]
 8015e64:	88db      	ldrh	r3, [r3, #6]
 8015e66:	2b01      	cmp	r3, #1
 8015e68:	d004      	beq.n	8015e74 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8015e6a:	6839      	ldr	r1, [r7, #0]
 8015e6c:	6878      	ldr	r0, [r7, #4]
 8015e6e:	f000 f8e2 	bl	8016036 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8015e72:	e023      	b.n	8015ebc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e7a:	b2db      	uxtb	r3, r3
 8015e7c:	2b02      	cmp	r3, #2
 8015e7e:	dc02      	bgt.n	8015e86 <USBD_GetConfig+0x2e>
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	dc03      	bgt.n	8015e8c <USBD_GetConfig+0x34>
 8015e84:	e015      	b.n	8015eb2 <USBD_GetConfig+0x5a>
 8015e86:	2b03      	cmp	r3, #3
 8015e88:	d00b      	beq.n	8015ea2 <USBD_GetConfig+0x4a>
 8015e8a:	e012      	b.n	8015eb2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	2200      	movs	r2, #0
 8015e90:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	3308      	adds	r3, #8
 8015e96:	2201      	movs	r2, #1
 8015e98:	4619      	mov	r1, r3
 8015e9a:	6878      	ldr	r0, [r7, #4]
 8015e9c:	f000 f93c 	bl	8016118 <USBD_CtlSendData>
        break;
 8015ea0:	e00c      	b.n	8015ebc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	3304      	adds	r3, #4
 8015ea6:	2201      	movs	r2, #1
 8015ea8:	4619      	mov	r1, r3
 8015eaa:	6878      	ldr	r0, [r7, #4]
 8015eac:	f000 f934 	bl	8016118 <USBD_CtlSendData>
        break;
 8015eb0:	e004      	b.n	8015ebc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8015eb2:	6839      	ldr	r1, [r7, #0]
 8015eb4:	6878      	ldr	r0, [r7, #4]
 8015eb6:	f000 f8be 	bl	8016036 <USBD_CtlError>
        break;
 8015eba:	bf00      	nop
}
 8015ebc:	bf00      	nop
 8015ebe:	3708      	adds	r7, #8
 8015ec0:	46bd      	mov	sp, r7
 8015ec2:	bd80      	pop	{r7, pc}

08015ec4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ec4:	b580      	push	{r7, lr}
 8015ec6:	b082      	sub	sp, #8
 8015ec8:	af00      	add	r7, sp, #0
 8015eca:	6078      	str	r0, [r7, #4]
 8015ecc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ed4:	b2db      	uxtb	r3, r3
 8015ed6:	3b01      	subs	r3, #1
 8015ed8:	2b02      	cmp	r3, #2
 8015eda:	d81e      	bhi.n	8015f1a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8015edc:	683b      	ldr	r3, [r7, #0]
 8015ede:	88db      	ldrh	r3, [r3, #6]
 8015ee0:	2b02      	cmp	r3, #2
 8015ee2:	d004      	beq.n	8015eee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8015ee4:	6839      	ldr	r1, [r7, #0]
 8015ee6:	6878      	ldr	r0, [r7, #4]
 8015ee8:	f000 f8a5 	bl	8016036 <USBD_CtlError>
        break;
 8015eec:	e01a      	b.n	8015f24 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	2201      	movs	r2, #1
 8015ef2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d005      	beq.n	8015f0a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	68db      	ldr	r3, [r3, #12]
 8015f02:	f043 0202 	orr.w	r2, r3, #2
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	330c      	adds	r3, #12
 8015f0e:	2202      	movs	r2, #2
 8015f10:	4619      	mov	r1, r3
 8015f12:	6878      	ldr	r0, [r7, #4]
 8015f14:	f000 f900 	bl	8016118 <USBD_CtlSendData>
      break;
 8015f18:	e004      	b.n	8015f24 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8015f1a:	6839      	ldr	r1, [r7, #0]
 8015f1c:	6878      	ldr	r0, [r7, #4]
 8015f1e:	f000 f88a 	bl	8016036 <USBD_CtlError>
      break;
 8015f22:	bf00      	nop
  }
}
 8015f24:	bf00      	nop
 8015f26:	3708      	adds	r7, #8
 8015f28:	46bd      	mov	sp, r7
 8015f2a:	bd80      	pop	{r7, pc}

08015f2c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	b082      	sub	sp, #8
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	6078      	str	r0, [r7, #4]
 8015f34:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015f36:	683b      	ldr	r3, [r7, #0]
 8015f38:	885b      	ldrh	r3, [r3, #2]
 8015f3a:	2b01      	cmp	r3, #1
 8015f3c:	d107      	bne.n	8015f4e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	2201      	movs	r2, #1
 8015f42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8015f46:	6878      	ldr	r0, [r7, #4]
 8015f48:	f000 f940 	bl	80161cc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8015f4c:	e013      	b.n	8015f76 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8015f4e:	683b      	ldr	r3, [r7, #0]
 8015f50:	885b      	ldrh	r3, [r3, #2]
 8015f52:	2b02      	cmp	r3, #2
 8015f54:	d10b      	bne.n	8015f6e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8015f56:	683b      	ldr	r3, [r7, #0]
 8015f58:	889b      	ldrh	r3, [r3, #4]
 8015f5a:	0a1b      	lsrs	r3, r3, #8
 8015f5c:	b29b      	uxth	r3, r3
 8015f5e:	b2da      	uxtb	r2, r3
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8015f66:	6878      	ldr	r0, [r7, #4]
 8015f68:	f000 f930 	bl	80161cc <USBD_CtlSendStatus>
}
 8015f6c:	e003      	b.n	8015f76 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8015f6e:	6839      	ldr	r1, [r7, #0]
 8015f70:	6878      	ldr	r0, [r7, #4]
 8015f72:	f000 f860 	bl	8016036 <USBD_CtlError>
}
 8015f76:	bf00      	nop
 8015f78:	3708      	adds	r7, #8
 8015f7a:	46bd      	mov	sp, r7
 8015f7c:	bd80      	pop	{r7, pc}

08015f7e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f7e:	b580      	push	{r7, lr}
 8015f80:	b082      	sub	sp, #8
 8015f82:	af00      	add	r7, sp, #0
 8015f84:	6078      	str	r0, [r7, #4]
 8015f86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f8e:	b2db      	uxtb	r3, r3
 8015f90:	3b01      	subs	r3, #1
 8015f92:	2b02      	cmp	r3, #2
 8015f94:	d80b      	bhi.n	8015fae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015f96:	683b      	ldr	r3, [r7, #0]
 8015f98:	885b      	ldrh	r3, [r3, #2]
 8015f9a:	2b01      	cmp	r3, #1
 8015f9c:	d10c      	bne.n	8015fb8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	2200      	movs	r2, #0
 8015fa2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8015fa6:	6878      	ldr	r0, [r7, #4]
 8015fa8:	f000 f910 	bl	80161cc <USBD_CtlSendStatus>
      }
      break;
 8015fac:	e004      	b.n	8015fb8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8015fae:	6839      	ldr	r1, [r7, #0]
 8015fb0:	6878      	ldr	r0, [r7, #4]
 8015fb2:	f000 f840 	bl	8016036 <USBD_CtlError>
      break;
 8015fb6:	e000      	b.n	8015fba <USBD_ClrFeature+0x3c>
      break;
 8015fb8:	bf00      	nop
  }
}
 8015fba:	bf00      	nop
 8015fbc:	3708      	adds	r7, #8
 8015fbe:	46bd      	mov	sp, r7
 8015fc0:	bd80      	pop	{r7, pc}

08015fc2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8015fc2:	b580      	push	{r7, lr}
 8015fc4:	b084      	sub	sp, #16
 8015fc6:	af00      	add	r7, sp, #0
 8015fc8:	6078      	str	r0, [r7, #4]
 8015fca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8015fcc:	683b      	ldr	r3, [r7, #0]
 8015fce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8015fd0:	68fb      	ldr	r3, [r7, #12]
 8015fd2:	781a      	ldrb	r2, [r3, #0]
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	3301      	adds	r3, #1
 8015fdc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	781a      	ldrb	r2, [r3, #0]
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	3301      	adds	r3, #1
 8015fea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8015fec:	68f8      	ldr	r0, [r7, #12]
 8015fee:	f7ff fa41 	bl	8015474 <SWAPBYTE>
 8015ff2:	4603      	mov	r3, r0
 8015ff4:	461a      	mov	r2, r3
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	3301      	adds	r3, #1
 8015ffe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	3301      	adds	r3, #1
 8016004:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016006:	68f8      	ldr	r0, [r7, #12]
 8016008:	f7ff fa34 	bl	8015474 <SWAPBYTE>
 801600c:	4603      	mov	r3, r0
 801600e:	461a      	mov	r2, r3
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016014:	68fb      	ldr	r3, [r7, #12]
 8016016:	3301      	adds	r3, #1
 8016018:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	3301      	adds	r3, #1
 801601e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016020:	68f8      	ldr	r0, [r7, #12]
 8016022:	f7ff fa27 	bl	8015474 <SWAPBYTE>
 8016026:	4603      	mov	r3, r0
 8016028:	461a      	mov	r2, r3
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	80da      	strh	r2, [r3, #6]
}
 801602e:	bf00      	nop
 8016030:	3710      	adds	r7, #16
 8016032:	46bd      	mov	sp, r7
 8016034:	bd80      	pop	{r7, pc}

08016036 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016036:	b580      	push	{r7, lr}
 8016038:	b082      	sub	sp, #8
 801603a:	af00      	add	r7, sp, #0
 801603c:	6078      	str	r0, [r7, #4]
 801603e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016040:	2180      	movs	r1, #128	; 0x80
 8016042:	6878      	ldr	r0, [r7, #4]
 8016044:	f000 fd36 	bl	8016ab4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016048:	2100      	movs	r1, #0
 801604a:	6878      	ldr	r0, [r7, #4]
 801604c:	f000 fd32 	bl	8016ab4 <USBD_LL_StallEP>
}
 8016050:	bf00      	nop
 8016052:	3708      	adds	r7, #8
 8016054:	46bd      	mov	sp, r7
 8016056:	bd80      	pop	{r7, pc}

08016058 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b086      	sub	sp, #24
 801605c:	af00      	add	r7, sp, #0
 801605e:	60f8      	str	r0, [r7, #12]
 8016060:	60b9      	str	r1, [r7, #8]
 8016062:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016064:	2300      	movs	r3, #0
 8016066:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	2b00      	cmp	r3, #0
 801606c:	d036      	beq.n	80160dc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016072:	6938      	ldr	r0, [r7, #16]
 8016074:	f000 f836 	bl	80160e4 <USBD_GetLen>
 8016078:	4603      	mov	r3, r0
 801607a:	3301      	adds	r3, #1
 801607c:	b29b      	uxth	r3, r3
 801607e:	005b      	lsls	r3, r3, #1
 8016080:	b29a      	uxth	r2, r3
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016086:	7dfb      	ldrb	r3, [r7, #23]
 8016088:	68ba      	ldr	r2, [r7, #8]
 801608a:	4413      	add	r3, r2
 801608c:	687a      	ldr	r2, [r7, #4]
 801608e:	7812      	ldrb	r2, [r2, #0]
 8016090:	701a      	strb	r2, [r3, #0]
  idx++;
 8016092:	7dfb      	ldrb	r3, [r7, #23]
 8016094:	3301      	adds	r3, #1
 8016096:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016098:	7dfb      	ldrb	r3, [r7, #23]
 801609a:	68ba      	ldr	r2, [r7, #8]
 801609c:	4413      	add	r3, r2
 801609e:	2203      	movs	r2, #3
 80160a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80160a2:	7dfb      	ldrb	r3, [r7, #23]
 80160a4:	3301      	adds	r3, #1
 80160a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80160a8:	e013      	b.n	80160d2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80160aa:	7dfb      	ldrb	r3, [r7, #23]
 80160ac:	68ba      	ldr	r2, [r7, #8]
 80160ae:	4413      	add	r3, r2
 80160b0:	693a      	ldr	r2, [r7, #16]
 80160b2:	7812      	ldrb	r2, [r2, #0]
 80160b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80160b6:	693b      	ldr	r3, [r7, #16]
 80160b8:	3301      	adds	r3, #1
 80160ba:	613b      	str	r3, [r7, #16]
    idx++;
 80160bc:	7dfb      	ldrb	r3, [r7, #23]
 80160be:	3301      	adds	r3, #1
 80160c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80160c2:	7dfb      	ldrb	r3, [r7, #23]
 80160c4:	68ba      	ldr	r2, [r7, #8]
 80160c6:	4413      	add	r3, r2
 80160c8:	2200      	movs	r2, #0
 80160ca:	701a      	strb	r2, [r3, #0]
    idx++;
 80160cc:	7dfb      	ldrb	r3, [r7, #23]
 80160ce:	3301      	adds	r3, #1
 80160d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80160d2:	693b      	ldr	r3, [r7, #16]
 80160d4:	781b      	ldrb	r3, [r3, #0]
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d1e7      	bne.n	80160aa <USBD_GetString+0x52>
 80160da:	e000      	b.n	80160de <USBD_GetString+0x86>
    return;
 80160dc:	bf00      	nop
  }
}
 80160de:	3718      	adds	r7, #24
 80160e0:	46bd      	mov	sp, r7
 80160e2:	bd80      	pop	{r7, pc}

080160e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80160e4:	b480      	push	{r7}
 80160e6:	b085      	sub	sp, #20
 80160e8:	af00      	add	r7, sp, #0
 80160ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80160ec:	2300      	movs	r3, #0
 80160ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80160f4:	e005      	b.n	8016102 <USBD_GetLen+0x1e>
  {
    len++;
 80160f6:	7bfb      	ldrb	r3, [r7, #15]
 80160f8:	3301      	adds	r3, #1
 80160fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80160fc:	68bb      	ldr	r3, [r7, #8]
 80160fe:	3301      	adds	r3, #1
 8016100:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016102:	68bb      	ldr	r3, [r7, #8]
 8016104:	781b      	ldrb	r3, [r3, #0]
 8016106:	2b00      	cmp	r3, #0
 8016108:	d1f5      	bne.n	80160f6 <USBD_GetLen+0x12>
  }

  return len;
 801610a:	7bfb      	ldrb	r3, [r7, #15]
}
 801610c:	4618      	mov	r0, r3
 801610e:	3714      	adds	r7, #20
 8016110:	46bd      	mov	sp, r7
 8016112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016116:	4770      	bx	lr

08016118 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016118:	b580      	push	{r7, lr}
 801611a:	b084      	sub	sp, #16
 801611c:	af00      	add	r7, sp, #0
 801611e:	60f8      	str	r0, [r7, #12]
 8016120:	60b9      	str	r1, [r7, #8]
 8016122:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	2202      	movs	r2, #2
 8016128:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	687a      	ldr	r2, [r7, #4]
 8016130:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	687a      	ldr	r2, [r7, #4]
 8016136:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	68ba      	ldr	r2, [r7, #8]
 801613c:	2100      	movs	r1, #0
 801613e:	68f8      	ldr	r0, [r7, #12]
 8016140:	f000 fd41 	bl	8016bc6 <USBD_LL_Transmit>

  return USBD_OK;
 8016144:	2300      	movs	r3, #0
}
 8016146:	4618      	mov	r0, r3
 8016148:	3710      	adds	r7, #16
 801614a:	46bd      	mov	sp, r7
 801614c:	bd80      	pop	{r7, pc}

0801614e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801614e:	b580      	push	{r7, lr}
 8016150:	b084      	sub	sp, #16
 8016152:	af00      	add	r7, sp, #0
 8016154:	60f8      	str	r0, [r7, #12]
 8016156:	60b9      	str	r1, [r7, #8]
 8016158:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	68ba      	ldr	r2, [r7, #8]
 801615e:	2100      	movs	r1, #0
 8016160:	68f8      	ldr	r0, [r7, #12]
 8016162:	f000 fd30 	bl	8016bc6 <USBD_LL_Transmit>

  return USBD_OK;
 8016166:	2300      	movs	r3, #0
}
 8016168:	4618      	mov	r0, r3
 801616a:	3710      	adds	r7, #16
 801616c:	46bd      	mov	sp, r7
 801616e:	bd80      	pop	{r7, pc}

08016170 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016170:	b580      	push	{r7, lr}
 8016172:	b084      	sub	sp, #16
 8016174:	af00      	add	r7, sp, #0
 8016176:	60f8      	str	r0, [r7, #12]
 8016178:	60b9      	str	r1, [r7, #8]
 801617a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	2203      	movs	r2, #3
 8016180:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	687a      	ldr	r2, [r7, #4]
 8016188:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	687a      	ldr	r2, [r7, #4]
 8016190:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	68ba      	ldr	r2, [r7, #8]
 8016198:	2100      	movs	r1, #0
 801619a:	68f8      	ldr	r0, [r7, #12]
 801619c:	f000 fd34 	bl	8016c08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80161a0:	2300      	movs	r3, #0
}
 80161a2:	4618      	mov	r0, r3
 80161a4:	3710      	adds	r7, #16
 80161a6:	46bd      	mov	sp, r7
 80161a8:	bd80      	pop	{r7, pc}

080161aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80161aa:	b580      	push	{r7, lr}
 80161ac:	b084      	sub	sp, #16
 80161ae:	af00      	add	r7, sp, #0
 80161b0:	60f8      	str	r0, [r7, #12]
 80161b2:	60b9      	str	r1, [r7, #8]
 80161b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	68ba      	ldr	r2, [r7, #8]
 80161ba:	2100      	movs	r1, #0
 80161bc:	68f8      	ldr	r0, [r7, #12]
 80161be:	f000 fd23 	bl	8016c08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80161c2:	2300      	movs	r3, #0
}
 80161c4:	4618      	mov	r0, r3
 80161c6:	3710      	adds	r7, #16
 80161c8:	46bd      	mov	sp, r7
 80161ca:	bd80      	pop	{r7, pc}

080161cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80161cc:	b580      	push	{r7, lr}
 80161ce:	b082      	sub	sp, #8
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	2204      	movs	r2, #4
 80161d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80161dc:	2300      	movs	r3, #0
 80161de:	2200      	movs	r2, #0
 80161e0:	2100      	movs	r1, #0
 80161e2:	6878      	ldr	r0, [r7, #4]
 80161e4:	f000 fcef 	bl	8016bc6 <USBD_LL_Transmit>

  return USBD_OK;
 80161e8:	2300      	movs	r3, #0
}
 80161ea:	4618      	mov	r0, r3
 80161ec:	3708      	adds	r7, #8
 80161ee:	46bd      	mov	sp, r7
 80161f0:	bd80      	pop	{r7, pc}

080161f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80161f2:	b580      	push	{r7, lr}
 80161f4:	b082      	sub	sp, #8
 80161f6:	af00      	add	r7, sp, #0
 80161f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	2205      	movs	r2, #5
 80161fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016202:	2300      	movs	r3, #0
 8016204:	2200      	movs	r2, #0
 8016206:	2100      	movs	r1, #0
 8016208:	6878      	ldr	r0, [r7, #4]
 801620a:	f000 fcfd 	bl	8016c08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801620e:	2300      	movs	r3, #0
}
 8016210:	4618      	mov	r0, r3
 8016212:	3708      	adds	r7, #8
 8016214:	46bd      	mov	sp, r7
 8016216:	bd80      	pop	{r7, pc}

08016218 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016218:	b480      	push	{r7}
 801621a:	b087      	sub	sp, #28
 801621c:	af00      	add	r7, sp, #0
 801621e:	60f8      	str	r0, [r7, #12]
 8016220:	60b9      	str	r1, [r7, #8]
 8016222:	4613      	mov	r3, r2
 8016224:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8016226:	2301      	movs	r3, #1
 8016228:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801622a:	2300      	movs	r3, #0
 801622c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801622e:	4b1f      	ldr	r3, [pc, #124]	; (80162ac <FATFS_LinkDriverEx+0x94>)
 8016230:	7a5b      	ldrb	r3, [r3, #9]
 8016232:	b2db      	uxtb	r3, r3
 8016234:	2b00      	cmp	r3, #0
 8016236:	d131      	bne.n	801629c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016238:	4b1c      	ldr	r3, [pc, #112]	; (80162ac <FATFS_LinkDriverEx+0x94>)
 801623a:	7a5b      	ldrb	r3, [r3, #9]
 801623c:	b2db      	uxtb	r3, r3
 801623e:	461a      	mov	r2, r3
 8016240:	4b1a      	ldr	r3, [pc, #104]	; (80162ac <FATFS_LinkDriverEx+0x94>)
 8016242:	2100      	movs	r1, #0
 8016244:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8016246:	4b19      	ldr	r3, [pc, #100]	; (80162ac <FATFS_LinkDriverEx+0x94>)
 8016248:	7a5b      	ldrb	r3, [r3, #9]
 801624a:	b2db      	uxtb	r3, r3
 801624c:	4a17      	ldr	r2, [pc, #92]	; (80162ac <FATFS_LinkDriverEx+0x94>)
 801624e:	009b      	lsls	r3, r3, #2
 8016250:	4413      	add	r3, r2
 8016252:	68fa      	ldr	r2, [r7, #12]
 8016254:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8016256:	4b15      	ldr	r3, [pc, #84]	; (80162ac <FATFS_LinkDriverEx+0x94>)
 8016258:	7a5b      	ldrb	r3, [r3, #9]
 801625a:	b2db      	uxtb	r3, r3
 801625c:	461a      	mov	r2, r3
 801625e:	4b13      	ldr	r3, [pc, #76]	; (80162ac <FATFS_LinkDriverEx+0x94>)
 8016260:	4413      	add	r3, r2
 8016262:	79fa      	ldrb	r2, [r7, #7]
 8016264:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8016266:	4b11      	ldr	r3, [pc, #68]	; (80162ac <FATFS_LinkDriverEx+0x94>)
 8016268:	7a5b      	ldrb	r3, [r3, #9]
 801626a:	b2db      	uxtb	r3, r3
 801626c:	1c5a      	adds	r2, r3, #1
 801626e:	b2d1      	uxtb	r1, r2
 8016270:	4a0e      	ldr	r2, [pc, #56]	; (80162ac <FATFS_LinkDriverEx+0x94>)
 8016272:	7251      	strb	r1, [r2, #9]
 8016274:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8016276:	7dbb      	ldrb	r3, [r7, #22]
 8016278:	3330      	adds	r3, #48	; 0x30
 801627a:	b2da      	uxtb	r2, r3
 801627c:	68bb      	ldr	r3, [r7, #8]
 801627e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016280:	68bb      	ldr	r3, [r7, #8]
 8016282:	3301      	adds	r3, #1
 8016284:	223a      	movs	r2, #58	; 0x3a
 8016286:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016288:	68bb      	ldr	r3, [r7, #8]
 801628a:	3302      	adds	r3, #2
 801628c:	222f      	movs	r2, #47	; 0x2f
 801628e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016290:	68bb      	ldr	r3, [r7, #8]
 8016292:	3303      	adds	r3, #3
 8016294:	2200      	movs	r2, #0
 8016296:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016298:	2300      	movs	r3, #0
 801629a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801629c:	7dfb      	ldrb	r3, [r7, #23]
}
 801629e:	4618      	mov	r0, r3
 80162a0:	371c      	adds	r7, #28
 80162a2:	46bd      	mov	sp, r7
 80162a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162a8:	4770      	bx	lr
 80162aa:	bf00      	nop
 80162ac:	240014ac 	.word	0x240014ac

080162b0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80162b0:	b580      	push	{r7, lr}
 80162b2:	b082      	sub	sp, #8
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	6078      	str	r0, [r7, #4]
 80162b8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80162ba:	2200      	movs	r2, #0
 80162bc:	6839      	ldr	r1, [r7, #0]
 80162be:	6878      	ldr	r0, [r7, #4]
 80162c0:	f7ff ffaa 	bl	8016218 <FATFS_LinkDriverEx>
 80162c4:	4603      	mov	r3, r0
}
 80162c6:	4618      	mov	r0, r3
 80162c8:	3708      	adds	r7, #8
 80162ca:	46bd      	mov	sp, r7
 80162cc:	bd80      	pop	{r7, pc}
	...

080162d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80162d0:	b580      	push	{r7, lr}
 80162d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80162d4:	2201      	movs	r2, #1
 80162d6:	4913      	ldr	r1, [pc, #76]	; (8016324 <MX_USB_DEVICE_Init+0x54>)
 80162d8:	4813      	ldr	r0, [pc, #76]	; (8016328 <MX_USB_DEVICE_Init+0x58>)
 80162da:	f7fe fca5 	bl	8014c28 <USBD_Init>
 80162de:	4603      	mov	r3, r0
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d001      	beq.n	80162e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80162e4:	f7ec fa2a 	bl	800273c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80162e8:	4910      	ldr	r1, [pc, #64]	; (801632c <MX_USB_DEVICE_Init+0x5c>)
 80162ea:	480f      	ldr	r0, [pc, #60]	; (8016328 <MX_USB_DEVICE_Init+0x58>)
 80162ec:	f7fe fccc 	bl	8014c88 <USBD_RegisterClass>
 80162f0:	4603      	mov	r3, r0
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d001      	beq.n	80162fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80162f6:	f7ec fa21 	bl	800273c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80162fa:	490d      	ldr	r1, [pc, #52]	; (8016330 <MX_USB_DEVICE_Init+0x60>)
 80162fc:	480a      	ldr	r0, [pc, #40]	; (8016328 <MX_USB_DEVICE_Init+0x58>)
 80162fe:	f7fe fbc3 	bl	8014a88 <USBD_CDC_RegisterInterface>
 8016302:	4603      	mov	r3, r0
 8016304:	2b00      	cmp	r3, #0
 8016306:	d001      	beq.n	801630c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016308:	f7ec fa18 	bl	800273c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 801630c:	4806      	ldr	r0, [pc, #24]	; (8016328 <MX_USB_DEVICE_Init+0x58>)
 801630e:	f7fe fcf1 	bl	8014cf4 <USBD_Start>
 8016312:	4603      	mov	r3, r0
 8016314:	2b00      	cmp	r3, #0
 8016316:	d001      	beq.n	801631c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016318:	f7ec fa10 	bl	800273c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801631c:	f7f3 f960 	bl	80095e0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016320:	bf00      	nop
 8016322:	bd80      	pop	{r7, pc}
 8016324:	240000b0 	.word	0x240000b0
 8016328:	240014b8 	.word	0x240014b8
 801632c:	2400001c 	.word	0x2400001c
 8016330:	2400009c 	.word	0x2400009c

08016334 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8016334:	b580      	push	{r7, lr}
 8016336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8016338:	2200      	movs	r2, #0
 801633a:	4905      	ldr	r1, [pc, #20]	; (8016350 <CDC_Init_HS+0x1c>)
 801633c:	4805      	ldr	r0, [pc, #20]	; (8016354 <CDC_Init_HS+0x20>)
 801633e:	f7fe fbbd 	bl	8014abc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8016342:	4905      	ldr	r1, [pc, #20]	; (8016358 <CDC_Init_HS+0x24>)
 8016344:	4803      	ldr	r0, [pc, #12]	; (8016354 <CDC_Init_HS+0x20>)
 8016346:	f7fe fbdb 	bl	8014b00 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801634a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801634c:	4618      	mov	r0, r3
 801634e:	bd80      	pop	{r7, pc}
 8016350:	24001f94 	.word	0x24001f94
 8016354:	240014b8 	.word	0x240014b8
 8016358:	24001794 	.word	0x24001794

0801635c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801635c:	b480      	push	{r7}
 801635e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8016360:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8016362:	4618      	mov	r0, r3
 8016364:	46bd      	mov	sp, r7
 8016366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801636a:	4770      	bx	lr

0801636c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801636c:	b480      	push	{r7}
 801636e:	b083      	sub	sp, #12
 8016370:	af00      	add	r7, sp, #0
 8016372:	4603      	mov	r3, r0
 8016374:	6039      	str	r1, [r7, #0]
 8016376:	71fb      	strb	r3, [r7, #7]
 8016378:	4613      	mov	r3, r2
 801637a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801637c:	79fb      	ldrb	r3, [r7, #7]
 801637e:	2b23      	cmp	r3, #35	; 0x23
 8016380:	d84a      	bhi.n	8016418 <CDC_Control_HS+0xac>
 8016382:	a201      	add	r2, pc, #4	; (adr r2, 8016388 <CDC_Control_HS+0x1c>)
 8016384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016388:	08016419 	.word	0x08016419
 801638c:	08016419 	.word	0x08016419
 8016390:	08016419 	.word	0x08016419
 8016394:	08016419 	.word	0x08016419
 8016398:	08016419 	.word	0x08016419
 801639c:	08016419 	.word	0x08016419
 80163a0:	08016419 	.word	0x08016419
 80163a4:	08016419 	.word	0x08016419
 80163a8:	08016419 	.word	0x08016419
 80163ac:	08016419 	.word	0x08016419
 80163b0:	08016419 	.word	0x08016419
 80163b4:	08016419 	.word	0x08016419
 80163b8:	08016419 	.word	0x08016419
 80163bc:	08016419 	.word	0x08016419
 80163c0:	08016419 	.word	0x08016419
 80163c4:	08016419 	.word	0x08016419
 80163c8:	08016419 	.word	0x08016419
 80163cc:	08016419 	.word	0x08016419
 80163d0:	08016419 	.word	0x08016419
 80163d4:	08016419 	.word	0x08016419
 80163d8:	08016419 	.word	0x08016419
 80163dc:	08016419 	.word	0x08016419
 80163e0:	08016419 	.word	0x08016419
 80163e4:	08016419 	.word	0x08016419
 80163e8:	08016419 	.word	0x08016419
 80163ec:	08016419 	.word	0x08016419
 80163f0:	08016419 	.word	0x08016419
 80163f4:	08016419 	.word	0x08016419
 80163f8:	08016419 	.word	0x08016419
 80163fc:	08016419 	.word	0x08016419
 8016400:	08016419 	.word	0x08016419
 8016404:	08016419 	.word	0x08016419
 8016408:	08016419 	.word	0x08016419
 801640c:	08016419 	.word	0x08016419
 8016410:	08016419 	.word	0x08016419
 8016414:	08016419 	.word	0x08016419
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016418:	bf00      	nop
  }

  return (USBD_OK);
 801641a:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801641c:	4618      	mov	r0, r3
 801641e:	370c      	adds	r7, #12
 8016420:	46bd      	mov	sp, r7
 8016422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016426:	4770      	bx	lr

08016428 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8016428:	b580      	push	{r7, lr}
 801642a:	b082      	sub	sp, #8
 801642c:	af00      	add	r7, sp, #0
 801642e:	6078      	str	r0, [r7, #4]
 8016430:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8016432:	6879      	ldr	r1, [r7, #4]
 8016434:	4805      	ldr	r0, [pc, #20]	; (801644c <CDC_Receive_HS+0x24>)
 8016436:	f7fe fb63 	bl	8014b00 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801643a:	4804      	ldr	r0, [pc, #16]	; (801644c <CDC_Receive_HS+0x24>)
 801643c:	f7fe fbbe 	bl	8014bbc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8016440:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8016442:	4618      	mov	r0, r3
 8016444:	3708      	adds	r7, #8
 8016446:	46bd      	mov	sp, r7
 8016448:	bd80      	pop	{r7, pc}
 801644a:	bf00      	nop
 801644c:	240014b8 	.word	0x240014b8

08016450 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8016450:	b580      	push	{r7, lr}
 8016452:	b084      	sub	sp, #16
 8016454:	af00      	add	r7, sp, #0
 8016456:	6078      	str	r0, [r7, #4]
 8016458:	460b      	mov	r3, r1
 801645a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801645c:	2300      	movs	r3, #0
 801645e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8016460:	4b0d      	ldr	r3, [pc, #52]	; (8016498 <CDC_Transmit_HS+0x48>)
 8016462:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016466:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016468:	68bb      	ldr	r3, [r7, #8]
 801646a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801646e:	2b00      	cmp	r3, #0
 8016470:	d001      	beq.n	8016476 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8016472:	2301      	movs	r3, #1
 8016474:	e00b      	b.n	801648e <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8016476:	887b      	ldrh	r3, [r7, #2]
 8016478:	461a      	mov	r2, r3
 801647a:	6879      	ldr	r1, [r7, #4]
 801647c:	4806      	ldr	r0, [pc, #24]	; (8016498 <CDC_Transmit_HS+0x48>)
 801647e:	f7fe fb1d 	bl	8014abc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8016482:	4805      	ldr	r0, [pc, #20]	; (8016498 <CDC_Transmit_HS+0x48>)
 8016484:	f7fe fb5a 	bl	8014b3c <USBD_CDC_TransmitPacket>
 8016488:	4603      	mov	r3, r0
 801648a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801648c:	7bfb      	ldrb	r3, [r7, #15]
}
 801648e:	4618      	mov	r0, r3
 8016490:	3710      	adds	r7, #16
 8016492:	46bd      	mov	sp, r7
 8016494:	bd80      	pop	{r7, pc}
 8016496:	bf00      	nop
 8016498:	240014b8 	.word	0x240014b8

0801649c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801649c:	b480      	push	{r7}
 801649e:	b087      	sub	sp, #28
 80164a0:	af00      	add	r7, sp, #0
 80164a2:	60f8      	str	r0, [r7, #12]
 80164a4:	60b9      	str	r1, [r7, #8]
 80164a6:	4613      	mov	r3, r2
 80164a8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80164aa:	2300      	movs	r3, #0
 80164ac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80164ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80164b2:	4618      	mov	r0, r3
 80164b4:	371c      	adds	r7, #28
 80164b6:	46bd      	mov	sp, r7
 80164b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164bc:	4770      	bx	lr
	...

080164c0 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80164c0:	b480      	push	{r7}
 80164c2:	b083      	sub	sp, #12
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	4603      	mov	r3, r0
 80164c8:	6039      	str	r1, [r7, #0]
 80164ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80164cc:	683b      	ldr	r3, [r7, #0]
 80164ce:	2212      	movs	r2, #18
 80164d0:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80164d2:	4b03      	ldr	r3, [pc, #12]	; (80164e0 <USBD_HS_DeviceDescriptor+0x20>)
}
 80164d4:	4618      	mov	r0, r3
 80164d6:	370c      	adds	r7, #12
 80164d8:	46bd      	mov	sp, r7
 80164da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164de:	4770      	bx	lr
 80164e0:	240000cc 	.word	0x240000cc

080164e4 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80164e4:	b480      	push	{r7}
 80164e6:	b083      	sub	sp, #12
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	4603      	mov	r3, r0
 80164ec:	6039      	str	r1, [r7, #0]
 80164ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80164f0:	683b      	ldr	r3, [r7, #0]
 80164f2:	2204      	movs	r2, #4
 80164f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80164f6:	4b03      	ldr	r3, [pc, #12]	; (8016504 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80164f8:	4618      	mov	r0, r3
 80164fa:	370c      	adds	r7, #12
 80164fc:	46bd      	mov	sp, r7
 80164fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016502:	4770      	bx	lr
 8016504:	240000e0 	.word	0x240000e0

08016508 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016508:	b580      	push	{r7, lr}
 801650a:	b082      	sub	sp, #8
 801650c:	af00      	add	r7, sp, #0
 801650e:	4603      	mov	r3, r0
 8016510:	6039      	str	r1, [r7, #0]
 8016512:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016514:	79fb      	ldrb	r3, [r7, #7]
 8016516:	2b00      	cmp	r3, #0
 8016518:	d105      	bne.n	8016526 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801651a:	683a      	ldr	r2, [r7, #0]
 801651c:	4907      	ldr	r1, [pc, #28]	; (801653c <USBD_HS_ProductStrDescriptor+0x34>)
 801651e:	4808      	ldr	r0, [pc, #32]	; (8016540 <USBD_HS_ProductStrDescriptor+0x38>)
 8016520:	f7ff fd9a 	bl	8016058 <USBD_GetString>
 8016524:	e004      	b.n	8016530 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016526:	683a      	ldr	r2, [r7, #0]
 8016528:	4904      	ldr	r1, [pc, #16]	; (801653c <USBD_HS_ProductStrDescriptor+0x34>)
 801652a:	4805      	ldr	r0, [pc, #20]	; (8016540 <USBD_HS_ProductStrDescriptor+0x38>)
 801652c:	f7ff fd94 	bl	8016058 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016530:	4b02      	ldr	r3, [pc, #8]	; (801653c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8016532:	4618      	mov	r0, r3
 8016534:	3708      	adds	r7, #8
 8016536:	46bd      	mov	sp, r7
 8016538:	bd80      	pop	{r7, pc}
 801653a:	bf00      	nop
 801653c:	24002794 	.word	0x24002794
 8016540:	0801810c 	.word	0x0801810c

08016544 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016544:	b580      	push	{r7, lr}
 8016546:	b082      	sub	sp, #8
 8016548:	af00      	add	r7, sp, #0
 801654a:	4603      	mov	r3, r0
 801654c:	6039      	str	r1, [r7, #0]
 801654e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016550:	683a      	ldr	r2, [r7, #0]
 8016552:	4904      	ldr	r1, [pc, #16]	; (8016564 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8016554:	4804      	ldr	r0, [pc, #16]	; (8016568 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8016556:	f7ff fd7f 	bl	8016058 <USBD_GetString>
  return USBD_StrDesc;
 801655a:	4b02      	ldr	r3, [pc, #8]	; (8016564 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801655c:	4618      	mov	r0, r3
 801655e:	3708      	adds	r7, #8
 8016560:	46bd      	mov	sp, r7
 8016562:	bd80      	pop	{r7, pc}
 8016564:	24002794 	.word	0x24002794
 8016568:	08018128 	.word	0x08018128

0801656c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801656c:	b580      	push	{r7, lr}
 801656e:	b082      	sub	sp, #8
 8016570:	af00      	add	r7, sp, #0
 8016572:	4603      	mov	r3, r0
 8016574:	6039      	str	r1, [r7, #0]
 8016576:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016578:	683b      	ldr	r3, [r7, #0]
 801657a:	221a      	movs	r2, #26
 801657c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801657e:	f000 f843 	bl	8016608 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8016582:	4b02      	ldr	r3, [pc, #8]	; (801658c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8016584:	4618      	mov	r0, r3
 8016586:	3708      	adds	r7, #8
 8016588:	46bd      	mov	sp, r7
 801658a:	bd80      	pop	{r7, pc}
 801658c:	240000e4 	.word	0x240000e4

08016590 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016590:	b580      	push	{r7, lr}
 8016592:	b082      	sub	sp, #8
 8016594:	af00      	add	r7, sp, #0
 8016596:	4603      	mov	r3, r0
 8016598:	6039      	str	r1, [r7, #0]
 801659a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801659c:	79fb      	ldrb	r3, [r7, #7]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d105      	bne.n	80165ae <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80165a2:	683a      	ldr	r2, [r7, #0]
 80165a4:	4907      	ldr	r1, [pc, #28]	; (80165c4 <USBD_HS_ConfigStrDescriptor+0x34>)
 80165a6:	4808      	ldr	r0, [pc, #32]	; (80165c8 <USBD_HS_ConfigStrDescriptor+0x38>)
 80165a8:	f7ff fd56 	bl	8016058 <USBD_GetString>
 80165ac:	e004      	b.n	80165b8 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80165ae:	683a      	ldr	r2, [r7, #0]
 80165b0:	4904      	ldr	r1, [pc, #16]	; (80165c4 <USBD_HS_ConfigStrDescriptor+0x34>)
 80165b2:	4805      	ldr	r0, [pc, #20]	; (80165c8 <USBD_HS_ConfigStrDescriptor+0x38>)
 80165b4:	f7ff fd50 	bl	8016058 <USBD_GetString>
  }
  return USBD_StrDesc;
 80165b8:	4b02      	ldr	r3, [pc, #8]	; (80165c4 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80165ba:	4618      	mov	r0, r3
 80165bc:	3708      	adds	r7, #8
 80165be:	46bd      	mov	sp, r7
 80165c0:	bd80      	pop	{r7, pc}
 80165c2:	bf00      	nop
 80165c4:	24002794 	.word	0x24002794
 80165c8:	0801812c 	.word	0x0801812c

080165cc <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80165cc:	b580      	push	{r7, lr}
 80165ce:	b082      	sub	sp, #8
 80165d0:	af00      	add	r7, sp, #0
 80165d2:	4603      	mov	r3, r0
 80165d4:	6039      	str	r1, [r7, #0]
 80165d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80165d8:	79fb      	ldrb	r3, [r7, #7]
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d105      	bne.n	80165ea <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80165de:	683a      	ldr	r2, [r7, #0]
 80165e0:	4907      	ldr	r1, [pc, #28]	; (8016600 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80165e2:	4808      	ldr	r0, [pc, #32]	; (8016604 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80165e4:	f7ff fd38 	bl	8016058 <USBD_GetString>
 80165e8:	e004      	b.n	80165f4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80165ea:	683a      	ldr	r2, [r7, #0]
 80165ec:	4904      	ldr	r1, [pc, #16]	; (8016600 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80165ee:	4805      	ldr	r0, [pc, #20]	; (8016604 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80165f0:	f7ff fd32 	bl	8016058 <USBD_GetString>
  }
  return USBD_StrDesc;
 80165f4:	4b02      	ldr	r3, [pc, #8]	; (8016600 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80165f6:	4618      	mov	r0, r3
 80165f8:	3708      	adds	r7, #8
 80165fa:	46bd      	mov	sp, r7
 80165fc:	bd80      	pop	{r7, pc}
 80165fe:	bf00      	nop
 8016600:	24002794 	.word	0x24002794
 8016604:	08018138 	.word	0x08018138

08016608 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016608:	b580      	push	{r7, lr}
 801660a:	b084      	sub	sp, #16
 801660c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801660e:	4b0f      	ldr	r3, [pc, #60]	; (801664c <Get_SerialNum+0x44>)
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016614:	4b0e      	ldr	r3, [pc, #56]	; (8016650 <Get_SerialNum+0x48>)
 8016616:	681b      	ldr	r3, [r3, #0]
 8016618:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801661a:	4b0e      	ldr	r3, [pc, #56]	; (8016654 <Get_SerialNum+0x4c>)
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016620:	68fa      	ldr	r2, [r7, #12]
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	4413      	add	r3, r2
 8016626:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	2b00      	cmp	r3, #0
 801662c:	d009      	beq.n	8016642 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801662e:	2208      	movs	r2, #8
 8016630:	4909      	ldr	r1, [pc, #36]	; (8016658 <Get_SerialNum+0x50>)
 8016632:	68f8      	ldr	r0, [r7, #12]
 8016634:	f000 f814 	bl	8016660 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016638:	2204      	movs	r2, #4
 801663a:	4908      	ldr	r1, [pc, #32]	; (801665c <Get_SerialNum+0x54>)
 801663c:	68b8      	ldr	r0, [r7, #8]
 801663e:	f000 f80f 	bl	8016660 <IntToUnicode>
  }
}
 8016642:	bf00      	nop
 8016644:	3710      	adds	r7, #16
 8016646:	46bd      	mov	sp, r7
 8016648:	bd80      	pop	{r7, pc}
 801664a:	bf00      	nop
 801664c:	1ff1e800 	.word	0x1ff1e800
 8016650:	1ff1e804 	.word	0x1ff1e804
 8016654:	1ff1e808 	.word	0x1ff1e808
 8016658:	240000e6 	.word	0x240000e6
 801665c:	240000f6 	.word	0x240000f6

08016660 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016660:	b480      	push	{r7}
 8016662:	b087      	sub	sp, #28
 8016664:	af00      	add	r7, sp, #0
 8016666:	60f8      	str	r0, [r7, #12]
 8016668:	60b9      	str	r1, [r7, #8]
 801666a:	4613      	mov	r3, r2
 801666c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801666e:	2300      	movs	r3, #0
 8016670:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016672:	2300      	movs	r3, #0
 8016674:	75fb      	strb	r3, [r7, #23]
 8016676:	e027      	b.n	80166c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016678:	68fb      	ldr	r3, [r7, #12]
 801667a:	0f1b      	lsrs	r3, r3, #28
 801667c:	2b09      	cmp	r3, #9
 801667e:	d80b      	bhi.n	8016698 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016680:	68fb      	ldr	r3, [r7, #12]
 8016682:	0f1b      	lsrs	r3, r3, #28
 8016684:	b2da      	uxtb	r2, r3
 8016686:	7dfb      	ldrb	r3, [r7, #23]
 8016688:	005b      	lsls	r3, r3, #1
 801668a:	4619      	mov	r1, r3
 801668c:	68bb      	ldr	r3, [r7, #8]
 801668e:	440b      	add	r3, r1
 8016690:	3230      	adds	r2, #48	; 0x30
 8016692:	b2d2      	uxtb	r2, r2
 8016694:	701a      	strb	r2, [r3, #0]
 8016696:	e00a      	b.n	80166ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016698:	68fb      	ldr	r3, [r7, #12]
 801669a:	0f1b      	lsrs	r3, r3, #28
 801669c:	b2da      	uxtb	r2, r3
 801669e:	7dfb      	ldrb	r3, [r7, #23]
 80166a0:	005b      	lsls	r3, r3, #1
 80166a2:	4619      	mov	r1, r3
 80166a4:	68bb      	ldr	r3, [r7, #8]
 80166a6:	440b      	add	r3, r1
 80166a8:	3237      	adds	r2, #55	; 0x37
 80166aa:	b2d2      	uxtb	r2, r2
 80166ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80166ae:	68fb      	ldr	r3, [r7, #12]
 80166b0:	011b      	lsls	r3, r3, #4
 80166b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80166b4:	7dfb      	ldrb	r3, [r7, #23]
 80166b6:	005b      	lsls	r3, r3, #1
 80166b8:	3301      	adds	r3, #1
 80166ba:	68ba      	ldr	r2, [r7, #8]
 80166bc:	4413      	add	r3, r2
 80166be:	2200      	movs	r2, #0
 80166c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80166c2:	7dfb      	ldrb	r3, [r7, #23]
 80166c4:	3301      	adds	r3, #1
 80166c6:	75fb      	strb	r3, [r7, #23]
 80166c8:	7dfa      	ldrb	r2, [r7, #23]
 80166ca:	79fb      	ldrb	r3, [r7, #7]
 80166cc:	429a      	cmp	r2, r3
 80166ce:	d3d3      	bcc.n	8016678 <IntToUnicode+0x18>
  }
}
 80166d0:	bf00      	nop
 80166d2:	bf00      	nop
 80166d4:	371c      	adds	r7, #28
 80166d6:	46bd      	mov	sp, r7
 80166d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166dc:	4770      	bx	lr
	...

080166e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80166e0:	b580      	push	{r7, lr}
 80166e2:	b0b2      	sub	sp, #200	; 0xc8
 80166e4:	af00      	add	r7, sp, #0
 80166e6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80166e8:	f107 0310 	add.w	r3, r7, #16
 80166ec:	22b8      	movs	r2, #184	; 0xb8
 80166ee:	2100      	movs	r1, #0
 80166f0:	4618      	mov	r0, r3
 80166f2:	f000 fb39 	bl	8016d68 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	4a1a      	ldr	r2, [pc, #104]	; (8016764 <HAL_PCD_MspInit+0x84>)
 80166fc:	4293      	cmp	r3, r2
 80166fe:	d12c      	bne.n	801675a <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8016700:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8016704:	f04f 0300 	mov.w	r3, #0
 8016708:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801670c:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8016710:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016714:	f107 0310 	add.w	r3, r7, #16
 8016718:	4618      	mov	r0, r3
 801671a:	f7f3 ff41 	bl	800a5a0 <HAL_RCCEx_PeriphCLKConfig>
 801671e:	4603      	mov	r3, r0
 8016720:	2b00      	cmp	r3, #0
 8016722:	d001      	beq.n	8016728 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8016724:	f7ec f80a 	bl	800273c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8016728:	f7f2 ff5a 	bl	80095e0 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801672c:	4b0e      	ldr	r3, [pc, #56]	; (8016768 <HAL_PCD_MspInit+0x88>)
 801672e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016732:	4a0d      	ldr	r2, [pc, #52]	; (8016768 <HAL_PCD_MspInit+0x88>)
 8016734:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016738:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801673c:	4b0a      	ldr	r3, [pc, #40]	; (8016768 <HAL_PCD_MspInit+0x88>)
 801673e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016746:	60fb      	str	r3, [r7, #12]
 8016748:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801674a:	2200      	movs	r2, #0
 801674c:	2100      	movs	r1, #0
 801674e:	204d      	movs	r0, #77	; 0x4d
 8016750:	f7ee fce3 	bl	800511a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8016754:	204d      	movs	r0, #77	; 0x4d
 8016756:	f7ee fcfa 	bl	800514e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801675a:	bf00      	nop
 801675c:	37c8      	adds	r7, #200	; 0xc8
 801675e:	46bd      	mov	sp, r7
 8016760:	bd80      	pop	{r7, pc}
 8016762:	bf00      	nop
 8016764:	40040000 	.word	0x40040000
 8016768:	58024400 	.word	0x58024400

0801676c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801676c:	b580      	push	{r7, lr}
 801676e:	b082      	sub	sp, #8
 8016770:	af00      	add	r7, sp, #0
 8016772:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8016780:	4619      	mov	r1, r3
 8016782:	4610      	mov	r0, r2
 8016784:	f7fe fb03 	bl	8014d8e <USBD_LL_SetupStage>
}
 8016788:	bf00      	nop
 801678a:	3708      	adds	r7, #8
 801678c:	46bd      	mov	sp, r7
 801678e:	bd80      	pop	{r7, pc}

08016790 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016790:	b580      	push	{r7, lr}
 8016792:	b082      	sub	sp, #8
 8016794:	af00      	add	r7, sp, #0
 8016796:	6078      	str	r0, [r7, #4]
 8016798:	460b      	mov	r3, r1
 801679a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80167a2:	78fa      	ldrb	r2, [r7, #3]
 80167a4:	6879      	ldr	r1, [r7, #4]
 80167a6:	4613      	mov	r3, r2
 80167a8:	00db      	lsls	r3, r3, #3
 80167aa:	4413      	add	r3, r2
 80167ac:	009b      	lsls	r3, r3, #2
 80167ae:	440b      	add	r3, r1
 80167b0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80167b4:	681a      	ldr	r2, [r3, #0]
 80167b6:	78fb      	ldrb	r3, [r7, #3]
 80167b8:	4619      	mov	r1, r3
 80167ba:	f7fe fb3d 	bl	8014e38 <USBD_LL_DataOutStage>
}
 80167be:	bf00      	nop
 80167c0:	3708      	adds	r7, #8
 80167c2:	46bd      	mov	sp, r7
 80167c4:	bd80      	pop	{r7, pc}

080167c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167c6:	b580      	push	{r7, lr}
 80167c8:	b082      	sub	sp, #8
 80167ca:	af00      	add	r7, sp, #0
 80167cc:	6078      	str	r0, [r7, #4]
 80167ce:	460b      	mov	r3, r1
 80167d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80167d8:	78fa      	ldrb	r2, [r7, #3]
 80167da:	6879      	ldr	r1, [r7, #4]
 80167dc:	4613      	mov	r3, r2
 80167de:	00db      	lsls	r3, r3, #3
 80167e0:	4413      	add	r3, r2
 80167e2:	009b      	lsls	r3, r3, #2
 80167e4:	440b      	add	r3, r1
 80167e6:	3348      	adds	r3, #72	; 0x48
 80167e8:	681a      	ldr	r2, [r3, #0]
 80167ea:	78fb      	ldrb	r3, [r7, #3]
 80167ec:	4619      	mov	r1, r3
 80167ee:	f7fe fbd6 	bl	8014f9e <USBD_LL_DataInStage>
}
 80167f2:	bf00      	nop
 80167f4:	3708      	adds	r7, #8
 80167f6:	46bd      	mov	sp, r7
 80167f8:	bd80      	pop	{r7, pc}

080167fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167fa:	b580      	push	{r7, lr}
 80167fc:	b082      	sub	sp, #8
 80167fe:	af00      	add	r7, sp, #0
 8016800:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016808:	4618      	mov	r0, r3
 801680a:	f7fe fd10 	bl	801522e <USBD_LL_SOF>
}
 801680e:	bf00      	nop
 8016810:	3708      	adds	r7, #8
 8016812:	46bd      	mov	sp, r7
 8016814:	bd80      	pop	{r7, pc}

08016816 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016816:	b580      	push	{r7, lr}
 8016818:	b084      	sub	sp, #16
 801681a:	af00      	add	r7, sp, #0
 801681c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801681e:	2301      	movs	r3, #1
 8016820:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	691b      	ldr	r3, [r3, #16]
 8016826:	2b00      	cmp	r3, #0
 8016828:	d102      	bne.n	8016830 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801682a:	2300      	movs	r3, #0
 801682c:	73fb      	strb	r3, [r7, #15]
 801682e:	e008      	b.n	8016842 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	691b      	ldr	r3, [r3, #16]
 8016834:	2b02      	cmp	r3, #2
 8016836:	d102      	bne.n	801683e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016838:	2301      	movs	r3, #1
 801683a:	73fb      	strb	r3, [r7, #15]
 801683c:	e001      	b.n	8016842 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801683e:	f7eb ff7d 	bl	800273c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016848:	7bfa      	ldrb	r2, [r7, #15]
 801684a:	4611      	mov	r1, r2
 801684c:	4618      	mov	r0, r3
 801684e:	f7fe fcaa 	bl	80151a6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016858:	4618      	mov	r0, r3
 801685a:	f7fe fc52 	bl	8015102 <USBD_LL_Reset>
}
 801685e:	bf00      	nop
 8016860:	3710      	adds	r7, #16
 8016862:	46bd      	mov	sp, r7
 8016864:	bd80      	pop	{r7, pc}
	...

08016868 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016868:	b580      	push	{r7, lr}
 801686a:	b082      	sub	sp, #8
 801686c:	af00      	add	r7, sp, #0
 801686e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016876:	4618      	mov	r0, r3
 8016878:	f7fe fca5 	bl	80151c6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	681b      	ldr	r3, [r3, #0]
 8016880:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	687a      	ldr	r2, [r7, #4]
 8016888:	6812      	ldr	r2, [r2, #0]
 801688a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801688e:	f043 0301 	orr.w	r3, r3, #1
 8016892:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	6a1b      	ldr	r3, [r3, #32]
 8016898:	2b00      	cmp	r3, #0
 801689a:	d005      	beq.n	80168a8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801689c:	4b04      	ldr	r3, [pc, #16]	; (80168b0 <HAL_PCD_SuspendCallback+0x48>)
 801689e:	691b      	ldr	r3, [r3, #16]
 80168a0:	4a03      	ldr	r2, [pc, #12]	; (80168b0 <HAL_PCD_SuspendCallback+0x48>)
 80168a2:	f043 0306 	orr.w	r3, r3, #6
 80168a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80168a8:	bf00      	nop
 80168aa:	3708      	adds	r7, #8
 80168ac:	46bd      	mov	sp, r7
 80168ae:	bd80      	pop	{r7, pc}
 80168b0:	e000ed00 	.word	0xe000ed00

080168b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168b4:	b580      	push	{r7, lr}
 80168b6:	b082      	sub	sp, #8
 80168b8:	af00      	add	r7, sp, #0
 80168ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80168c2:	4618      	mov	r0, r3
 80168c4:	f7fe fc9b 	bl	80151fe <USBD_LL_Resume>
}
 80168c8:	bf00      	nop
 80168ca:	3708      	adds	r7, #8
 80168cc:	46bd      	mov	sp, r7
 80168ce:	bd80      	pop	{r7, pc}

080168d0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168d0:	b580      	push	{r7, lr}
 80168d2:	b082      	sub	sp, #8
 80168d4:	af00      	add	r7, sp, #0
 80168d6:	6078      	str	r0, [r7, #4]
 80168d8:	460b      	mov	r3, r1
 80168da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80168e2:	78fa      	ldrb	r2, [r7, #3]
 80168e4:	4611      	mov	r1, r2
 80168e6:	4618      	mov	r0, r3
 80168e8:	f7fe fcf3 	bl	80152d2 <USBD_LL_IsoOUTIncomplete>
}
 80168ec:	bf00      	nop
 80168ee:	3708      	adds	r7, #8
 80168f0:	46bd      	mov	sp, r7
 80168f2:	bd80      	pop	{r7, pc}

080168f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168f4:	b580      	push	{r7, lr}
 80168f6:	b082      	sub	sp, #8
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	6078      	str	r0, [r7, #4]
 80168fc:	460b      	mov	r3, r1
 80168fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016906:	78fa      	ldrb	r2, [r7, #3]
 8016908:	4611      	mov	r1, r2
 801690a:	4618      	mov	r0, r3
 801690c:	f7fe fcaf 	bl	801526e <USBD_LL_IsoINIncomplete>
}
 8016910:	bf00      	nop
 8016912:	3708      	adds	r7, #8
 8016914:	46bd      	mov	sp, r7
 8016916:	bd80      	pop	{r7, pc}

08016918 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016918:	b580      	push	{r7, lr}
 801691a:	b082      	sub	sp, #8
 801691c:	af00      	add	r7, sp, #0
 801691e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016926:	4618      	mov	r0, r3
 8016928:	f7fe fd05 	bl	8015336 <USBD_LL_DevConnected>
}
 801692c:	bf00      	nop
 801692e:	3708      	adds	r7, #8
 8016930:	46bd      	mov	sp, r7
 8016932:	bd80      	pop	{r7, pc}

08016934 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016934:	b580      	push	{r7, lr}
 8016936:	b082      	sub	sp, #8
 8016938:	af00      	add	r7, sp, #0
 801693a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016942:	4618      	mov	r0, r3
 8016944:	f7fe fd02 	bl	801534c <USBD_LL_DevDisconnected>
}
 8016948:	bf00      	nop
 801694a:	3708      	adds	r7, #8
 801694c:	46bd      	mov	sp, r7
 801694e:	bd80      	pop	{r7, pc}

08016950 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016950:	b580      	push	{r7, lr}
 8016952:	b082      	sub	sp, #8
 8016954:	af00      	add	r7, sp, #0
 8016956:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	781b      	ldrb	r3, [r3, #0]
 801695c:	2b01      	cmp	r3, #1
 801695e:	d140      	bne.n	80169e2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8016960:	4a22      	ldr	r2, [pc, #136]	; (80169ec <USBD_LL_Init+0x9c>)
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	4a20      	ldr	r2, [pc, #128]	; (80169ec <USBD_LL_Init+0x9c>)
 801696c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8016970:	4b1e      	ldr	r3, [pc, #120]	; (80169ec <USBD_LL_Init+0x9c>)
 8016972:	4a1f      	ldr	r2, [pc, #124]	; (80169f0 <USBD_LL_Init+0xa0>)
 8016974:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8016976:	4b1d      	ldr	r3, [pc, #116]	; (80169ec <USBD_LL_Init+0x9c>)
 8016978:	2209      	movs	r2, #9
 801697a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801697c:	4b1b      	ldr	r3, [pc, #108]	; (80169ec <USBD_LL_Init+0x9c>)
 801697e:	2202      	movs	r2, #2
 8016980:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8016982:	4b1a      	ldr	r3, [pc, #104]	; (80169ec <USBD_LL_Init+0x9c>)
 8016984:	2200      	movs	r2, #0
 8016986:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8016988:	4b18      	ldr	r3, [pc, #96]	; (80169ec <USBD_LL_Init+0x9c>)
 801698a:	2202      	movs	r2, #2
 801698c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801698e:	4b17      	ldr	r3, [pc, #92]	; (80169ec <USBD_LL_Init+0x9c>)
 8016990:	2200      	movs	r2, #0
 8016992:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8016994:	4b15      	ldr	r3, [pc, #84]	; (80169ec <USBD_LL_Init+0x9c>)
 8016996:	2200      	movs	r2, #0
 8016998:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801699a:	4b14      	ldr	r3, [pc, #80]	; (80169ec <USBD_LL_Init+0x9c>)
 801699c:	2200      	movs	r2, #0
 801699e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80169a0:	4b12      	ldr	r3, [pc, #72]	; (80169ec <USBD_LL_Init+0x9c>)
 80169a2:	2200      	movs	r2, #0
 80169a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80169a6:	4b11      	ldr	r3, [pc, #68]	; (80169ec <USBD_LL_Init+0x9c>)
 80169a8:	2200      	movs	r2, #0
 80169aa:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80169ac:	4b0f      	ldr	r3, [pc, #60]	; (80169ec <USBD_LL_Init+0x9c>)
 80169ae:	2200      	movs	r2, #0
 80169b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80169b2:	480e      	ldr	r0, [pc, #56]	; (80169ec <USBD_LL_Init+0x9c>)
 80169b4:	f7f1 fb21 	bl	8007ffa <HAL_PCD_Init>
 80169b8:	4603      	mov	r3, r0
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d001      	beq.n	80169c2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80169be:	f7eb febd 	bl	800273c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80169c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80169c6:	4809      	ldr	r0, [pc, #36]	; (80169ec <USBD_LL_Init+0x9c>)
 80169c8:	f7f2 fd8f 	bl	80094ea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80169cc:	2280      	movs	r2, #128	; 0x80
 80169ce:	2100      	movs	r1, #0
 80169d0:	4806      	ldr	r0, [pc, #24]	; (80169ec <USBD_LL_Init+0x9c>)
 80169d2:	f7f2 fd43 	bl	800945c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80169d6:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80169da:	2101      	movs	r1, #1
 80169dc:	4803      	ldr	r0, [pc, #12]	; (80169ec <USBD_LL_Init+0x9c>)
 80169de:	f7f2 fd3d 	bl	800945c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 80169e2:	2300      	movs	r3, #0
}
 80169e4:	4618      	mov	r0, r3
 80169e6:	3708      	adds	r7, #8
 80169e8:	46bd      	mov	sp, r7
 80169ea:	bd80      	pop	{r7, pc}
 80169ec:	24002994 	.word	0x24002994
 80169f0:	40040000 	.word	0x40040000

080169f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80169f4:	b580      	push	{r7, lr}
 80169f6:	b084      	sub	sp, #16
 80169f8:	af00      	add	r7, sp, #0
 80169fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80169fc:	2300      	movs	r3, #0
 80169fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a00:	2300      	movs	r3, #0
 8016a02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016a0a:	4618      	mov	r0, r3
 8016a0c:	f7f1 fc19 	bl	8008242 <HAL_PCD_Start>
 8016a10:	4603      	mov	r3, r0
 8016a12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a14:	7bfb      	ldrb	r3, [r7, #15]
 8016a16:	4618      	mov	r0, r3
 8016a18:	f000 f942 	bl	8016ca0 <USBD_Get_USB_Status>
 8016a1c:	4603      	mov	r3, r0
 8016a1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016a20:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a22:	4618      	mov	r0, r3
 8016a24:	3710      	adds	r7, #16
 8016a26:	46bd      	mov	sp, r7
 8016a28:	bd80      	pop	{r7, pc}

08016a2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016a2a:	b580      	push	{r7, lr}
 8016a2c:	b084      	sub	sp, #16
 8016a2e:	af00      	add	r7, sp, #0
 8016a30:	6078      	str	r0, [r7, #4]
 8016a32:	4608      	mov	r0, r1
 8016a34:	4611      	mov	r1, r2
 8016a36:	461a      	mov	r2, r3
 8016a38:	4603      	mov	r3, r0
 8016a3a:	70fb      	strb	r3, [r7, #3]
 8016a3c:	460b      	mov	r3, r1
 8016a3e:	70bb      	strb	r3, [r7, #2]
 8016a40:	4613      	mov	r3, r2
 8016a42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a44:	2300      	movs	r3, #0
 8016a46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a48:	2300      	movs	r3, #0
 8016a4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016a52:	78bb      	ldrb	r3, [r7, #2]
 8016a54:	883a      	ldrh	r2, [r7, #0]
 8016a56:	78f9      	ldrb	r1, [r7, #3]
 8016a58:	f7f2 f919 	bl	8008c8e <HAL_PCD_EP_Open>
 8016a5c:	4603      	mov	r3, r0
 8016a5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a60:	7bfb      	ldrb	r3, [r7, #15]
 8016a62:	4618      	mov	r0, r3
 8016a64:	f000 f91c 	bl	8016ca0 <USBD_Get_USB_Status>
 8016a68:	4603      	mov	r3, r0
 8016a6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016a6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a6e:	4618      	mov	r0, r3
 8016a70:	3710      	adds	r7, #16
 8016a72:	46bd      	mov	sp, r7
 8016a74:	bd80      	pop	{r7, pc}

08016a76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016a76:	b580      	push	{r7, lr}
 8016a78:	b084      	sub	sp, #16
 8016a7a:	af00      	add	r7, sp, #0
 8016a7c:	6078      	str	r0, [r7, #4]
 8016a7e:	460b      	mov	r3, r1
 8016a80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a82:	2300      	movs	r3, #0
 8016a84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a86:	2300      	movs	r3, #0
 8016a88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016a90:	78fa      	ldrb	r2, [r7, #3]
 8016a92:	4611      	mov	r1, r2
 8016a94:	4618      	mov	r0, r3
 8016a96:	f7f2 f962 	bl	8008d5e <HAL_PCD_EP_Close>
 8016a9a:	4603      	mov	r3, r0
 8016a9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a9e:	7bfb      	ldrb	r3, [r7, #15]
 8016aa0:	4618      	mov	r0, r3
 8016aa2:	f000 f8fd 	bl	8016ca0 <USBD_Get_USB_Status>
 8016aa6:	4603      	mov	r3, r0
 8016aa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016aaa:	7bbb      	ldrb	r3, [r7, #14]
}
 8016aac:	4618      	mov	r0, r3
 8016aae:	3710      	adds	r7, #16
 8016ab0:	46bd      	mov	sp, r7
 8016ab2:	bd80      	pop	{r7, pc}

08016ab4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ab4:	b580      	push	{r7, lr}
 8016ab6:	b084      	sub	sp, #16
 8016ab8:	af00      	add	r7, sp, #0
 8016aba:	6078      	str	r0, [r7, #4]
 8016abc:	460b      	mov	r3, r1
 8016abe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ac0:	2300      	movs	r3, #0
 8016ac2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ac4:	2300      	movs	r3, #0
 8016ac6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016ace:	78fa      	ldrb	r2, [r7, #3]
 8016ad0:	4611      	mov	r1, r2
 8016ad2:	4618      	mov	r0, r3
 8016ad4:	f7f2 fa1c 	bl	8008f10 <HAL_PCD_EP_SetStall>
 8016ad8:	4603      	mov	r3, r0
 8016ada:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016adc:	7bfb      	ldrb	r3, [r7, #15]
 8016ade:	4618      	mov	r0, r3
 8016ae0:	f000 f8de 	bl	8016ca0 <USBD_Get_USB_Status>
 8016ae4:	4603      	mov	r3, r0
 8016ae6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016ae8:	7bbb      	ldrb	r3, [r7, #14]
}
 8016aea:	4618      	mov	r0, r3
 8016aec:	3710      	adds	r7, #16
 8016aee:	46bd      	mov	sp, r7
 8016af0:	bd80      	pop	{r7, pc}

08016af2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016af2:	b580      	push	{r7, lr}
 8016af4:	b084      	sub	sp, #16
 8016af6:	af00      	add	r7, sp, #0
 8016af8:	6078      	str	r0, [r7, #4]
 8016afa:	460b      	mov	r3, r1
 8016afc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016afe:	2300      	movs	r3, #0
 8016b00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b02:	2300      	movs	r3, #0
 8016b04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016b0c:	78fa      	ldrb	r2, [r7, #3]
 8016b0e:	4611      	mov	r1, r2
 8016b10:	4618      	mov	r0, r3
 8016b12:	f7f2 fa61 	bl	8008fd8 <HAL_PCD_EP_ClrStall>
 8016b16:	4603      	mov	r3, r0
 8016b18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b1a:	7bfb      	ldrb	r3, [r7, #15]
 8016b1c:	4618      	mov	r0, r3
 8016b1e:	f000 f8bf 	bl	8016ca0 <USBD_Get_USB_Status>
 8016b22:	4603      	mov	r3, r0
 8016b24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b26:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b28:	4618      	mov	r0, r3
 8016b2a:	3710      	adds	r7, #16
 8016b2c:	46bd      	mov	sp, r7
 8016b2e:	bd80      	pop	{r7, pc}

08016b30 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b30:	b480      	push	{r7}
 8016b32:	b085      	sub	sp, #20
 8016b34:	af00      	add	r7, sp, #0
 8016b36:	6078      	str	r0, [r7, #4]
 8016b38:	460b      	mov	r3, r1
 8016b3a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016b42:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016b44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	da0b      	bge.n	8016b64 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016b4c:	78fb      	ldrb	r3, [r7, #3]
 8016b4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016b52:	68f9      	ldr	r1, [r7, #12]
 8016b54:	4613      	mov	r3, r2
 8016b56:	00db      	lsls	r3, r3, #3
 8016b58:	4413      	add	r3, r2
 8016b5a:	009b      	lsls	r3, r3, #2
 8016b5c:	440b      	add	r3, r1
 8016b5e:	333e      	adds	r3, #62	; 0x3e
 8016b60:	781b      	ldrb	r3, [r3, #0]
 8016b62:	e00b      	b.n	8016b7c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016b64:	78fb      	ldrb	r3, [r7, #3]
 8016b66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016b6a:	68f9      	ldr	r1, [r7, #12]
 8016b6c:	4613      	mov	r3, r2
 8016b6e:	00db      	lsls	r3, r3, #3
 8016b70:	4413      	add	r3, r2
 8016b72:	009b      	lsls	r3, r3, #2
 8016b74:	440b      	add	r3, r1
 8016b76:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8016b7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016b7c:	4618      	mov	r0, r3
 8016b7e:	3714      	adds	r7, #20
 8016b80:	46bd      	mov	sp, r7
 8016b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b86:	4770      	bx	lr

08016b88 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016b88:	b580      	push	{r7, lr}
 8016b8a:	b084      	sub	sp, #16
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	6078      	str	r0, [r7, #4]
 8016b90:	460b      	mov	r3, r1
 8016b92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b94:	2300      	movs	r3, #0
 8016b96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b98:	2300      	movs	r3, #0
 8016b9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016ba2:	78fa      	ldrb	r2, [r7, #3]
 8016ba4:	4611      	mov	r1, r2
 8016ba6:	4618      	mov	r0, r3
 8016ba8:	f7f2 f84c 	bl	8008c44 <HAL_PCD_SetAddress>
 8016bac:	4603      	mov	r3, r0
 8016bae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016bb0:	7bfb      	ldrb	r3, [r7, #15]
 8016bb2:	4618      	mov	r0, r3
 8016bb4:	f000 f874 	bl	8016ca0 <USBD_Get_USB_Status>
 8016bb8:	4603      	mov	r3, r0
 8016bba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016bbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8016bbe:	4618      	mov	r0, r3
 8016bc0:	3710      	adds	r7, #16
 8016bc2:	46bd      	mov	sp, r7
 8016bc4:	bd80      	pop	{r7, pc}

08016bc6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016bc6:	b580      	push	{r7, lr}
 8016bc8:	b086      	sub	sp, #24
 8016bca:	af00      	add	r7, sp, #0
 8016bcc:	60f8      	str	r0, [r7, #12]
 8016bce:	607a      	str	r2, [r7, #4]
 8016bd0:	603b      	str	r3, [r7, #0]
 8016bd2:	460b      	mov	r3, r1
 8016bd4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016bd6:	2300      	movs	r3, #0
 8016bd8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016bda:	2300      	movs	r3, #0
 8016bdc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016be4:	7af9      	ldrb	r1, [r7, #11]
 8016be6:	683b      	ldr	r3, [r7, #0]
 8016be8:	687a      	ldr	r2, [r7, #4]
 8016bea:	f7f2 f956 	bl	8008e9a <HAL_PCD_EP_Transmit>
 8016bee:	4603      	mov	r3, r0
 8016bf0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016bf2:	7dfb      	ldrb	r3, [r7, #23]
 8016bf4:	4618      	mov	r0, r3
 8016bf6:	f000 f853 	bl	8016ca0 <USBD_Get_USB_Status>
 8016bfa:	4603      	mov	r3, r0
 8016bfc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016bfe:	7dbb      	ldrb	r3, [r7, #22]
}
 8016c00:	4618      	mov	r0, r3
 8016c02:	3718      	adds	r7, #24
 8016c04:	46bd      	mov	sp, r7
 8016c06:	bd80      	pop	{r7, pc}

08016c08 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016c08:	b580      	push	{r7, lr}
 8016c0a:	b086      	sub	sp, #24
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	60f8      	str	r0, [r7, #12]
 8016c10:	607a      	str	r2, [r7, #4]
 8016c12:	603b      	str	r3, [r7, #0]
 8016c14:	460b      	mov	r3, r1
 8016c16:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c18:	2300      	movs	r3, #0
 8016c1a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c1c:	2300      	movs	r3, #0
 8016c1e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016c26:	7af9      	ldrb	r1, [r7, #11]
 8016c28:	683b      	ldr	r3, [r7, #0]
 8016c2a:	687a      	ldr	r2, [r7, #4]
 8016c2c:	f7f2 f8e1 	bl	8008df2 <HAL_PCD_EP_Receive>
 8016c30:	4603      	mov	r3, r0
 8016c32:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c34:	7dfb      	ldrb	r3, [r7, #23]
 8016c36:	4618      	mov	r0, r3
 8016c38:	f000 f832 	bl	8016ca0 <USBD_Get_USB_Status>
 8016c3c:	4603      	mov	r3, r0
 8016c3e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016c40:	7dbb      	ldrb	r3, [r7, #22]
}
 8016c42:	4618      	mov	r0, r3
 8016c44:	3718      	adds	r7, #24
 8016c46:	46bd      	mov	sp, r7
 8016c48:	bd80      	pop	{r7, pc}

08016c4a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c4a:	b580      	push	{r7, lr}
 8016c4c:	b082      	sub	sp, #8
 8016c4e:	af00      	add	r7, sp, #0
 8016c50:	6078      	str	r0, [r7, #4]
 8016c52:	460b      	mov	r3, r1
 8016c54:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016c5c:	78fa      	ldrb	r2, [r7, #3]
 8016c5e:	4611      	mov	r1, r2
 8016c60:	4618      	mov	r0, r3
 8016c62:	f7f2 f902 	bl	8008e6a <HAL_PCD_EP_GetRxCount>
 8016c66:	4603      	mov	r3, r0
}
 8016c68:	4618      	mov	r0, r3
 8016c6a:	3708      	adds	r7, #8
 8016c6c:	46bd      	mov	sp, r7
 8016c6e:	bd80      	pop	{r7, pc}

08016c70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016c70:	b480      	push	{r7}
 8016c72:	b083      	sub	sp, #12
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016c78:	4b03      	ldr	r3, [pc, #12]	; (8016c88 <USBD_static_malloc+0x18>)
}
 8016c7a:	4618      	mov	r0, r3
 8016c7c:	370c      	adds	r7, #12
 8016c7e:	46bd      	mov	sp, r7
 8016c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c84:	4770      	bx	lr
 8016c86:	bf00      	nop
 8016c88:	24002ea0 	.word	0x24002ea0

08016c8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016c8c:	b480      	push	{r7}
 8016c8e:	b083      	sub	sp, #12
 8016c90:	af00      	add	r7, sp, #0
 8016c92:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8016c94:	bf00      	nop
 8016c96:	370c      	adds	r7, #12
 8016c98:	46bd      	mov	sp, r7
 8016c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c9e:	4770      	bx	lr

08016ca0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016ca0:	b480      	push	{r7}
 8016ca2:	b085      	sub	sp, #20
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	4603      	mov	r3, r0
 8016ca8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016caa:	2300      	movs	r3, #0
 8016cac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016cae:	79fb      	ldrb	r3, [r7, #7]
 8016cb0:	2b03      	cmp	r3, #3
 8016cb2:	d817      	bhi.n	8016ce4 <USBD_Get_USB_Status+0x44>
 8016cb4:	a201      	add	r2, pc, #4	; (adr r2, 8016cbc <USBD_Get_USB_Status+0x1c>)
 8016cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016cba:	bf00      	nop
 8016cbc:	08016ccd 	.word	0x08016ccd
 8016cc0:	08016cd3 	.word	0x08016cd3
 8016cc4:	08016cd9 	.word	0x08016cd9
 8016cc8:	08016cdf 	.word	0x08016cdf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016ccc:	2300      	movs	r3, #0
 8016cce:	73fb      	strb	r3, [r7, #15]
    break;
 8016cd0:	e00b      	b.n	8016cea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016cd2:	2303      	movs	r3, #3
 8016cd4:	73fb      	strb	r3, [r7, #15]
    break;
 8016cd6:	e008      	b.n	8016cea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016cd8:	2301      	movs	r3, #1
 8016cda:	73fb      	strb	r3, [r7, #15]
    break;
 8016cdc:	e005      	b.n	8016cea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016cde:	2303      	movs	r3, #3
 8016ce0:	73fb      	strb	r3, [r7, #15]
    break;
 8016ce2:	e002      	b.n	8016cea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016ce4:	2303      	movs	r3, #3
 8016ce6:	73fb      	strb	r3, [r7, #15]
    break;
 8016ce8:	bf00      	nop
  }
  return usb_status;
 8016cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8016cec:	4618      	mov	r0, r3
 8016cee:	3714      	adds	r7, #20
 8016cf0:	46bd      	mov	sp, r7
 8016cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cf6:	4770      	bx	lr

08016cf8 <__errno>:
 8016cf8:	4b01      	ldr	r3, [pc, #4]	; (8016d00 <__errno+0x8>)
 8016cfa:	6818      	ldr	r0, [r3, #0]
 8016cfc:	4770      	bx	lr
 8016cfe:	bf00      	nop
 8016d00:	24000100 	.word	0x24000100

08016d04 <__libc_init_array>:
 8016d04:	b570      	push	{r4, r5, r6, lr}
 8016d06:	4d0d      	ldr	r5, [pc, #52]	; (8016d3c <__libc_init_array+0x38>)
 8016d08:	4c0d      	ldr	r4, [pc, #52]	; (8016d40 <__libc_init_array+0x3c>)
 8016d0a:	1b64      	subs	r4, r4, r5
 8016d0c:	10a4      	asrs	r4, r4, #2
 8016d0e:	2600      	movs	r6, #0
 8016d10:	42a6      	cmp	r6, r4
 8016d12:	d109      	bne.n	8016d28 <__libc_init_array+0x24>
 8016d14:	4d0b      	ldr	r5, [pc, #44]	; (8016d44 <__libc_init_array+0x40>)
 8016d16:	4c0c      	ldr	r4, [pc, #48]	; (8016d48 <__libc_init_array+0x44>)
 8016d18:	f001 f94a 	bl	8017fb0 <_init>
 8016d1c:	1b64      	subs	r4, r4, r5
 8016d1e:	10a4      	asrs	r4, r4, #2
 8016d20:	2600      	movs	r6, #0
 8016d22:	42a6      	cmp	r6, r4
 8016d24:	d105      	bne.n	8016d32 <__libc_init_array+0x2e>
 8016d26:	bd70      	pop	{r4, r5, r6, pc}
 8016d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d2c:	4798      	blx	r3
 8016d2e:	3601      	adds	r6, #1
 8016d30:	e7ee      	b.n	8016d10 <__libc_init_array+0xc>
 8016d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d36:	4798      	blx	r3
 8016d38:	3601      	adds	r6, #1
 8016d3a:	e7f2      	b.n	8016d22 <__libc_init_array+0x1e>
 8016d3c:	080183d0 	.word	0x080183d0
 8016d40:	080183d0 	.word	0x080183d0
 8016d44:	080183d0 	.word	0x080183d0
 8016d48:	080183d4 	.word	0x080183d4

08016d4c <memcpy>:
 8016d4c:	440a      	add	r2, r1
 8016d4e:	4291      	cmp	r1, r2
 8016d50:	f100 33ff 	add.w	r3, r0, #4294967295
 8016d54:	d100      	bne.n	8016d58 <memcpy+0xc>
 8016d56:	4770      	bx	lr
 8016d58:	b510      	push	{r4, lr}
 8016d5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016d5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016d62:	4291      	cmp	r1, r2
 8016d64:	d1f9      	bne.n	8016d5a <memcpy+0xe>
 8016d66:	bd10      	pop	{r4, pc}

08016d68 <memset>:
 8016d68:	4402      	add	r2, r0
 8016d6a:	4603      	mov	r3, r0
 8016d6c:	4293      	cmp	r3, r2
 8016d6e:	d100      	bne.n	8016d72 <memset+0xa>
 8016d70:	4770      	bx	lr
 8016d72:	f803 1b01 	strb.w	r1, [r3], #1
 8016d76:	e7f9      	b.n	8016d6c <memset+0x4>

08016d78 <siprintf>:
 8016d78:	b40e      	push	{r1, r2, r3}
 8016d7a:	b500      	push	{lr}
 8016d7c:	b09c      	sub	sp, #112	; 0x70
 8016d7e:	ab1d      	add	r3, sp, #116	; 0x74
 8016d80:	9002      	str	r0, [sp, #8]
 8016d82:	9006      	str	r0, [sp, #24]
 8016d84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016d88:	4809      	ldr	r0, [pc, #36]	; (8016db0 <siprintf+0x38>)
 8016d8a:	9107      	str	r1, [sp, #28]
 8016d8c:	9104      	str	r1, [sp, #16]
 8016d8e:	4909      	ldr	r1, [pc, #36]	; (8016db4 <siprintf+0x3c>)
 8016d90:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d94:	9105      	str	r1, [sp, #20]
 8016d96:	6800      	ldr	r0, [r0, #0]
 8016d98:	9301      	str	r3, [sp, #4]
 8016d9a:	a902      	add	r1, sp, #8
 8016d9c:	f000 f896 	bl	8016ecc <_svfiprintf_r>
 8016da0:	9b02      	ldr	r3, [sp, #8]
 8016da2:	2200      	movs	r2, #0
 8016da4:	701a      	strb	r2, [r3, #0]
 8016da6:	b01c      	add	sp, #112	; 0x70
 8016da8:	f85d eb04 	ldr.w	lr, [sp], #4
 8016dac:	b003      	add	sp, #12
 8016dae:	4770      	bx	lr
 8016db0:	24000100 	.word	0x24000100
 8016db4:	ffff0208 	.word	0xffff0208

08016db8 <siscanf>:
 8016db8:	b40e      	push	{r1, r2, r3}
 8016dba:	b510      	push	{r4, lr}
 8016dbc:	b09f      	sub	sp, #124	; 0x7c
 8016dbe:	ac21      	add	r4, sp, #132	; 0x84
 8016dc0:	f44f 7101 	mov.w	r1, #516	; 0x204
 8016dc4:	f854 2b04 	ldr.w	r2, [r4], #4
 8016dc8:	9201      	str	r2, [sp, #4]
 8016dca:	f8ad 101c 	strh.w	r1, [sp, #28]
 8016dce:	9004      	str	r0, [sp, #16]
 8016dd0:	9008      	str	r0, [sp, #32]
 8016dd2:	f7e9 faa7 	bl	8000324 <strlen>
 8016dd6:	4b0c      	ldr	r3, [pc, #48]	; (8016e08 <siscanf+0x50>)
 8016dd8:	9005      	str	r0, [sp, #20]
 8016dda:	9009      	str	r0, [sp, #36]	; 0x24
 8016ddc:	930d      	str	r3, [sp, #52]	; 0x34
 8016dde:	480b      	ldr	r0, [pc, #44]	; (8016e0c <siscanf+0x54>)
 8016de0:	9a01      	ldr	r2, [sp, #4]
 8016de2:	6800      	ldr	r0, [r0, #0]
 8016de4:	9403      	str	r4, [sp, #12]
 8016de6:	2300      	movs	r3, #0
 8016de8:	9311      	str	r3, [sp, #68]	; 0x44
 8016dea:	9316      	str	r3, [sp, #88]	; 0x58
 8016dec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016df0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016df4:	a904      	add	r1, sp, #16
 8016df6:	4623      	mov	r3, r4
 8016df8:	f000 f9c2 	bl	8017180 <__ssvfiscanf_r>
 8016dfc:	b01f      	add	sp, #124	; 0x7c
 8016dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e02:	b003      	add	sp, #12
 8016e04:	4770      	bx	lr
 8016e06:	bf00      	nop
 8016e08:	08016e11 	.word	0x08016e11
 8016e0c:	24000100 	.word	0x24000100

08016e10 <__seofread>:
 8016e10:	2000      	movs	r0, #0
 8016e12:	4770      	bx	lr

08016e14 <__ssputs_r>:
 8016e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e18:	688e      	ldr	r6, [r1, #8]
 8016e1a:	429e      	cmp	r6, r3
 8016e1c:	4682      	mov	sl, r0
 8016e1e:	460c      	mov	r4, r1
 8016e20:	4690      	mov	r8, r2
 8016e22:	461f      	mov	r7, r3
 8016e24:	d838      	bhi.n	8016e98 <__ssputs_r+0x84>
 8016e26:	898a      	ldrh	r2, [r1, #12]
 8016e28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016e2c:	d032      	beq.n	8016e94 <__ssputs_r+0x80>
 8016e2e:	6825      	ldr	r5, [r4, #0]
 8016e30:	6909      	ldr	r1, [r1, #16]
 8016e32:	eba5 0901 	sub.w	r9, r5, r1
 8016e36:	6965      	ldr	r5, [r4, #20]
 8016e38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016e3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016e40:	3301      	adds	r3, #1
 8016e42:	444b      	add	r3, r9
 8016e44:	106d      	asrs	r5, r5, #1
 8016e46:	429d      	cmp	r5, r3
 8016e48:	bf38      	it	cc
 8016e4a:	461d      	movcc	r5, r3
 8016e4c:	0553      	lsls	r3, r2, #21
 8016e4e:	d531      	bpl.n	8016eb4 <__ssputs_r+0xa0>
 8016e50:	4629      	mov	r1, r5
 8016e52:	f000 ffe5 	bl	8017e20 <_malloc_r>
 8016e56:	4606      	mov	r6, r0
 8016e58:	b950      	cbnz	r0, 8016e70 <__ssputs_r+0x5c>
 8016e5a:	230c      	movs	r3, #12
 8016e5c:	f8ca 3000 	str.w	r3, [sl]
 8016e60:	89a3      	ldrh	r3, [r4, #12]
 8016e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e66:	81a3      	strh	r3, [r4, #12]
 8016e68:	f04f 30ff 	mov.w	r0, #4294967295
 8016e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e70:	6921      	ldr	r1, [r4, #16]
 8016e72:	464a      	mov	r2, r9
 8016e74:	f7ff ff6a 	bl	8016d4c <memcpy>
 8016e78:	89a3      	ldrh	r3, [r4, #12]
 8016e7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016e82:	81a3      	strh	r3, [r4, #12]
 8016e84:	6126      	str	r6, [r4, #16]
 8016e86:	6165      	str	r5, [r4, #20]
 8016e88:	444e      	add	r6, r9
 8016e8a:	eba5 0509 	sub.w	r5, r5, r9
 8016e8e:	6026      	str	r6, [r4, #0]
 8016e90:	60a5      	str	r5, [r4, #8]
 8016e92:	463e      	mov	r6, r7
 8016e94:	42be      	cmp	r6, r7
 8016e96:	d900      	bls.n	8016e9a <__ssputs_r+0x86>
 8016e98:	463e      	mov	r6, r7
 8016e9a:	6820      	ldr	r0, [r4, #0]
 8016e9c:	4632      	mov	r2, r6
 8016e9e:	4641      	mov	r1, r8
 8016ea0:	f000 ff38 	bl	8017d14 <memmove>
 8016ea4:	68a3      	ldr	r3, [r4, #8]
 8016ea6:	1b9b      	subs	r3, r3, r6
 8016ea8:	60a3      	str	r3, [r4, #8]
 8016eaa:	6823      	ldr	r3, [r4, #0]
 8016eac:	4433      	add	r3, r6
 8016eae:	6023      	str	r3, [r4, #0]
 8016eb0:	2000      	movs	r0, #0
 8016eb2:	e7db      	b.n	8016e6c <__ssputs_r+0x58>
 8016eb4:	462a      	mov	r2, r5
 8016eb6:	f001 f827 	bl	8017f08 <_realloc_r>
 8016eba:	4606      	mov	r6, r0
 8016ebc:	2800      	cmp	r0, #0
 8016ebe:	d1e1      	bne.n	8016e84 <__ssputs_r+0x70>
 8016ec0:	6921      	ldr	r1, [r4, #16]
 8016ec2:	4650      	mov	r0, sl
 8016ec4:	f000 ff40 	bl	8017d48 <_free_r>
 8016ec8:	e7c7      	b.n	8016e5a <__ssputs_r+0x46>
	...

08016ecc <_svfiprintf_r>:
 8016ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ed0:	4698      	mov	r8, r3
 8016ed2:	898b      	ldrh	r3, [r1, #12]
 8016ed4:	061b      	lsls	r3, r3, #24
 8016ed6:	b09d      	sub	sp, #116	; 0x74
 8016ed8:	4607      	mov	r7, r0
 8016eda:	460d      	mov	r5, r1
 8016edc:	4614      	mov	r4, r2
 8016ede:	d50e      	bpl.n	8016efe <_svfiprintf_r+0x32>
 8016ee0:	690b      	ldr	r3, [r1, #16]
 8016ee2:	b963      	cbnz	r3, 8016efe <_svfiprintf_r+0x32>
 8016ee4:	2140      	movs	r1, #64	; 0x40
 8016ee6:	f000 ff9b 	bl	8017e20 <_malloc_r>
 8016eea:	6028      	str	r0, [r5, #0]
 8016eec:	6128      	str	r0, [r5, #16]
 8016eee:	b920      	cbnz	r0, 8016efa <_svfiprintf_r+0x2e>
 8016ef0:	230c      	movs	r3, #12
 8016ef2:	603b      	str	r3, [r7, #0]
 8016ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8016ef8:	e0d1      	b.n	801709e <_svfiprintf_r+0x1d2>
 8016efa:	2340      	movs	r3, #64	; 0x40
 8016efc:	616b      	str	r3, [r5, #20]
 8016efe:	2300      	movs	r3, #0
 8016f00:	9309      	str	r3, [sp, #36]	; 0x24
 8016f02:	2320      	movs	r3, #32
 8016f04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016f08:	f8cd 800c 	str.w	r8, [sp, #12]
 8016f0c:	2330      	movs	r3, #48	; 0x30
 8016f0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80170b8 <_svfiprintf_r+0x1ec>
 8016f12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016f16:	f04f 0901 	mov.w	r9, #1
 8016f1a:	4623      	mov	r3, r4
 8016f1c:	469a      	mov	sl, r3
 8016f1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016f22:	b10a      	cbz	r2, 8016f28 <_svfiprintf_r+0x5c>
 8016f24:	2a25      	cmp	r2, #37	; 0x25
 8016f26:	d1f9      	bne.n	8016f1c <_svfiprintf_r+0x50>
 8016f28:	ebba 0b04 	subs.w	fp, sl, r4
 8016f2c:	d00b      	beq.n	8016f46 <_svfiprintf_r+0x7a>
 8016f2e:	465b      	mov	r3, fp
 8016f30:	4622      	mov	r2, r4
 8016f32:	4629      	mov	r1, r5
 8016f34:	4638      	mov	r0, r7
 8016f36:	f7ff ff6d 	bl	8016e14 <__ssputs_r>
 8016f3a:	3001      	adds	r0, #1
 8016f3c:	f000 80aa 	beq.w	8017094 <_svfiprintf_r+0x1c8>
 8016f40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016f42:	445a      	add	r2, fp
 8016f44:	9209      	str	r2, [sp, #36]	; 0x24
 8016f46:	f89a 3000 	ldrb.w	r3, [sl]
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	f000 80a2 	beq.w	8017094 <_svfiprintf_r+0x1c8>
 8016f50:	2300      	movs	r3, #0
 8016f52:	f04f 32ff 	mov.w	r2, #4294967295
 8016f56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016f5a:	f10a 0a01 	add.w	sl, sl, #1
 8016f5e:	9304      	str	r3, [sp, #16]
 8016f60:	9307      	str	r3, [sp, #28]
 8016f62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016f66:	931a      	str	r3, [sp, #104]	; 0x68
 8016f68:	4654      	mov	r4, sl
 8016f6a:	2205      	movs	r2, #5
 8016f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f70:	4851      	ldr	r0, [pc, #324]	; (80170b8 <_svfiprintf_r+0x1ec>)
 8016f72:	f7e9 f9e5 	bl	8000340 <memchr>
 8016f76:	9a04      	ldr	r2, [sp, #16]
 8016f78:	b9d8      	cbnz	r0, 8016fb2 <_svfiprintf_r+0xe6>
 8016f7a:	06d0      	lsls	r0, r2, #27
 8016f7c:	bf44      	itt	mi
 8016f7e:	2320      	movmi	r3, #32
 8016f80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016f84:	0711      	lsls	r1, r2, #28
 8016f86:	bf44      	itt	mi
 8016f88:	232b      	movmi	r3, #43	; 0x2b
 8016f8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8016f92:	2b2a      	cmp	r3, #42	; 0x2a
 8016f94:	d015      	beq.n	8016fc2 <_svfiprintf_r+0xf6>
 8016f96:	9a07      	ldr	r2, [sp, #28]
 8016f98:	4654      	mov	r4, sl
 8016f9a:	2000      	movs	r0, #0
 8016f9c:	f04f 0c0a 	mov.w	ip, #10
 8016fa0:	4621      	mov	r1, r4
 8016fa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016fa6:	3b30      	subs	r3, #48	; 0x30
 8016fa8:	2b09      	cmp	r3, #9
 8016faa:	d94e      	bls.n	801704a <_svfiprintf_r+0x17e>
 8016fac:	b1b0      	cbz	r0, 8016fdc <_svfiprintf_r+0x110>
 8016fae:	9207      	str	r2, [sp, #28]
 8016fb0:	e014      	b.n	8016fdc <_svfiprintf_r+0x110>
 8016fb2:	eba0 0308 	sub.w	r3, r0, r8
 8016fb6:	fa09 f303 	lsl.w	r3, r9, r3
 8016fba:	4313      	orrs	r3, r2
 8016fbc:	9304      	str	r3, [sp, #16]
 8016fbe:	46a2      	mov	sl, r4
 8016fc0:	e7d2      	b.n	8016f68 <_svfiprintf_r+0x9c>
 8016fc2:	9b03      	ldr	r3, [sp, #12]
 8016fc4:	1d19      	adds	r1, r3, #4
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	9103      	str	r1, [sp, #12]
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	bfbb      	ittet	lt
 8016fce:	425b      	neglt	r3, r3
 8016fd0:	f042 0202 	orrlt.w	r2, r2, #2
 8016fd4:	9307      	strge	r3, [sp, #28]
 8016fd6:	9307      	strlt	r3, [sp, #28]
 8016fd8:	bfb8      	it	lt
 8016fda:	9204      	strlt	r2, [sp, #16]
 8016fdc:	7823      	ldrb	r3, [r4, #0]
 8016fde:	2b2e      	cmp	r3, #46	; 0x2e
 8016fe0:	d10c      	bne.n	8016ffc <_svfiprintf_r+0x130>
 8016fe2:	7863      	ldrb	r3, [r4, #1]
 8016fe4:	2b2a      	cmp	r3, #42	; 0x2a
 8016fe6:	d135      	bne.n	8017054 <_svfiprintf_r+0x188>
 8016fe8:	9b03      	ldr	r3, [sp, #12]
 8016fea:	1d1a      	adds	r2, r3, #4
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	9203      	str	r2, [sp, #12]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	bfb8      	it	lt
 8016ff4:	f04f 33ff 	movlt.w	r3, #4294967295
 8016ff8:	3402      	adds	r4, #2
 8016ffa:	9305      	str	r3, [sp, #20]
 8016ffc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80170c8 <_svfiprintf_r+0x1fc>
 8017000:	7821      	ldrb	r1, [r4, #0]
 8017002:	2203      	movs	r2, #3
 8017004:	4650      	mov	r0, sl
 8017006:	f7e9 f99b 	bl	8000340 <memchr>
 801700a:	b140      	cbz	r0, 801701e <_svfiprintf_r+0x152>
 801700c:	2340      	movs	r3, #64	; 0x40
 801700e:	eba0 000a 	sub.w	r0, r0, sl
 8017012:	fa03 f000 	lsl.w	r0, r3, r0
 8017016:	9b04      	ldr	r3, [sp, #16]
 8017018:	4303      	orrs	r3, r0
 801701a:	3401      	adds	r4, #1
 801701c:	9304      	str	r3, [sp, #16]
 801701e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017022:	4826      	ldr	r0, [pc, #152]	; (80170bc <_svfiprintf_r+0x1f0>)
 8017024:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017028:	2206      	movs	r2, #6
 801702a:	f7e9 f989 	bl	8000340 <memchr>
 801702e:	2800      	cmp	r0, #0
 8017030:	d038      	beq.n	80170a4 <_svfiprintf_r+0x1d8>
 8017032:	4b23      	ldr	r3, [pc, #140]	; (80170c0 <_svfiprintf_r+0x1f4>)
 8017034:	bb1b      	cbnz	r3, 801707e <_svfiprintf_r+0x1b2>
 8017036:	9b03      	ldr	r3, [sp, #12]
 8017038:	3307      	adds	r3, #7
 801703a:	f023 0307 	bic.w	r3, r3, #7
 801703e:	3308      	adds	r3, #8
 8017040:	9303      	str	r3, [sp, #12]
 8017042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017044:	4433      	add	r3, r6
 8017046:	9309      	str	r3, [sp, #36]	; 0x24
 8017048:	e767      	b.n	8016f1a <_svfiprintf_r+0x4e>
 801704a:	fb0c 3202 	mla	r2, ip, r2, r3
 801704e:	460c      	mov	r4, r1
 8017050:	2001      	movs	r0, #1
 8017052:	e7a5      	b.n	8016fa0 <_svfiprintf_r+0xd4>
 8017054:	2300      	movs	r3, #0
 8017056:	3401      	adds	r4, #1
 8017058:	9305      	str	r3, [sp, #20]
 801705a:	4619      	mov	r1, r3
 801705c:	f04f 0c0a 	mov.w	ip, #10
 8017060:	4620      	mov	r0, r4
 8017062:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017066:	3a30      	subs	r2, #48	; 0x30
 8017068:	2a09      	cmp	r2, #9
 801706a:	d903      	bls.n	8017074 <_svfiprintf_r+0x1a8>
 801706c:	2b00      	cmp	r3, #0
 801706e:	d0c5      	beq.n	8016ffc <_svfiprintf_r+0x130>
 8017070:	9105      	str	r1, [sp, #20]
 8017072:	e7c3      	b.n	8016ffc <_svfiprintf_r+0x130>
 8017074:	fb0c 2101 	mla	r1, ip, r1, r2
 8017078:	4604      	mov	r4, r0
 801707a:	2301      	movs	r3, #1
 801707c:	e7f0      	b.n	8017060 <_svfiprintf_r+0x194>
 801707e:	ab03      	add	r3, sp, #12
 8017080:	9300      	str	r3, [sp, #0]
 8017082:	462a      	mov	r2, r5
 8017084:	4b0f      	ldr	r3, [pc, #60]	; (80170c4 <_svfiprintf_r+0x1f8>)
 8017086:	a904      	add	r1, sp, #16
 8017088:	4638      	mov	r0, r7
 801708a:	f3af 8000 	nop.w
 801708e:	1c42      	adds	r2, r0, #1
 8017090:	4606      	mov	r6, r0
 8017092:	d1d6      	bne.n	8017042 <_svfiprintf_r+0x176>
 8017094:	89ab      	ldrh	r3, [r5, #12]
 8017096:	065b      	lsls	r3, r3, #25
 8017098:	f53f af2c 	bmi.w	8016ef4 <_svfiprintf_r+0x28>
 801709c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801709e:	b01d      	add	sp, #116	; 0x74
 80170a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170a4:	ab03      	add	r3, sp, #12
 80170a6:	9300      	str	r3, [sp, #0]
 80170a8:	462a      	mov	r2, r5
 80170aa:	4b06      	ldr	r3, [pc, #24]	; (80170c4 <_svfiprintf_r+0x1f8>)
 80170ac:	a904      	add	r1, sp, #16
 80170ae:	4638      	mov	r0, r7
 80170b0:	f000 fa4c 	bl	801754c <_printf_i>
 80170b4:	e7eb      	b.n	801708e <_svfiprintf_r+0x1c2>
 80170b6:	bf00      	nop
 80170b8:	08018218 	.word	0x08018218
 80170bc:	08018222 	.word	0x08018222
 80170c0:	00000000 	.word	0x00000000
 80170c4:	08016e15 	.word	0x08016e15
 80170c8:	0801821e 	.word	0x0801821e

080170cc <_sungetc_r>:
 80170cc:	b538      	push	{r3, r4, r5, lr}
 80170ce:	1c4b      	adds	r3, r1, #1
 80170d0:	4614      	mov	r4, r2
 80170d2:	d103      	bne.n	80170dc <_sungetc_r+0x10>
 80170d4:	f04f 35ff 	mov.w	r5, #4294967295
 80170d8:	4628      	mov	r0, r5
 80170da:	bd38      	pop	{r3, r4, r5, pc}
 80170dc:	8993      	ldrh	r3, [r2, #12]
 80170de:	f023 0320 	bic.w	r3, r3, #32
 80170e2:	8193      	strh	r3, [r2, #12]
 80170e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80170e6:	6852      	ldr	r2, [r2, #4]
 80170e8:	b2cd      	uxtb	r5, r1
 80170ea:	b18b      	cbz	r3, 8017110 <_sungetc_r+0x44>
 80170ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80170ee:	4293      	cmp	r3, r2
 80170f0:	dd08      	ble.n	8017104 <_sungetc_r+0x38>
 80170f2:	6823      	ldr	r3, [r4, #0]
 80170f4:	1e5a      	subs	r2, r3, #1
 80170f6:	6022      	str	r2, [r4, #0]
 80170f8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80170fc:	6863      	ldr	r3, [r4, #4]
 80170fe:	3301      	adds	r3, #1
 8017100:	6063      	str	r3, [r4, #4]
 8017102:	e7e9      	b.n	80170d8 <_sungetc_r+0xc>
 8017104:	4621      	mov	r1, r4
 8017106:	f000 fdc9 	bl	8017c9c <__submore>
 801710a:	2800      	cmp	r0, #0
 801710c:	d0f1      	beq.n	80170f2 <_sungetc_r+0x26>
 801710e:	e7e1      	b.n	80170d4 <_sungetc_r+0x8>
 8017110:	6921      	ldr	r1, [r4, #16]
 8017112:	6823      	ldr	r3, [r4, #0]
 8017114:	b151      	cbz	r1, 801712c <_sungetc_r+0x60>
 8017116:	4299      	cmp	r1, r3
 8017118:	d208      	bcs.n	801712c <_sungetc_r+0x60>
 801711a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801711e:	42a9      	cmp	r1, r5
 8017120:	d104      	bne.n	801712c <_sungetc_r+0x60>
 8017122:	3b01      	subs	r3, #1
 8017124:	3201      	adds	r2, #1
 8017126:	6023      	str	r3, [r4, #0]
 8017128:	6062      	str	r2, [r4, #4]
 801712a:	e7d5      	b.n	80170d8 <_sungetc_r+0xc>
 801712c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017130:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017134:	6363      	str	r3, [r4, #52]	; 0x34
 8017136:	2303      	movs	r3, #3
 8017138:	63a3      	str	r3, [r4, #56]	; 0x38
 801713a:	4623      	mov	r3, r4
 801713c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017140:	6023      	str	r3, [r4, #0]
 8017142:	2301      	movs	r3, #1
 8017144:	e7dc      	b.n	8017100 <_sungetc_r+0x34>

08017146 <__ssrefill_r>:
 8017146:	b510      	push	{r4, lr}
 8017148:	460c      	mov	r4, r1
 801714a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801714c:	b169      	cbz	r1, 801716a <__ssrefill_r+0x24>
 801714e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017152:	4299      	cmp	r1, r3
 8017154:	d001      	beq.n	801715a <__ssrefill_r+0x14>
 8017156:	f000 fdf7 	bl	8017d48 <_free_r>
 801715a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801715c:	6063      	str	r3, [r4, #4]
 801715e:	2000      	movs	r0, #0
 8017160:	6360      	str	r0, [r4, #52]	; 0x34
 8017162:	b113      	cbz	r3, 801716a <__ssrefill_r+0x24>
 8017164:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017166:	6023      	str	r3, [r4, #0]
 8017168:	bd10      	pop	{r4, pc}
 801716a:	6923      	ldr	r3, [r4, #16]
 801716c:	6023      	str	r3, [r4, #0]
 801716e:	2300      	movs	r3, #0
 8017170:	6063      	str	r3, [r4, #4]
 8017172:	89a3      	ldrh	r3, [r4, #12]
 8017174:	f043 0320 	orr.w	r3, r3, #32
 8017178:	81a3      	strh	r3, [r4, #12]
 801717a:	f04f 30ff 	mov.w	r0, #4294967295
 801717e:	e7f3      	b.n	8017168 <__ssrefill_r+0x22>

08017180 <__ssvfiscanf_r>:
 8017180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017184:	460c      	mov	r4, r1
 8017186:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801718a:	2100      	movs	r1, #0
 801718c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8017190:	49a6      	ldr	r1, [pc, #664]	; (801742c <__ssvfiscanf_r+0x2ac>)
 8017192:	91a0      	str	r1, [sp, #640]	; 0x280
 8017194:	f10d 0804 	add.w	r8, sp, #4
 8017198:	49a5      	ldr	r1, [pc, #660]	; (8017430 <__ssvfiscanf_r+0x2b0>)
 801719a:	4fa6      	ldr	r7, [pc, #664]	; (8017434 <__ssvfiscanf_r+0x2b4>)
 801719c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8017438 <__ssvfiscanf_r+0x2b8>
 80171a0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80171a4:	4606      	mov	r6, r0
 80171a6:	91a1      	str	r1, [sp, #644]	; 0x284
 80171a8:	9300      	str	r3, [sp, #0]
 80171aa:	7813      	ldrb	r3, [r2, #0]
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	f000 815a 	beq.w	8017466 <__ssvfiscanf_r+0x2e6>
 80171b2:	5dd9      	ldrb	r1, [r3, r7]
 80171b4:	f011 0108 	ands.w	r1, r1, #8
 80171b8:	f102 0501 	add.w	r5, r2, #1
 80171bc:	d019      	beq.n	80171f2 <__ssvfiscanf_r+0x72>
 80171be:	6863      	ldr	r3, [r4, #4]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	dd0f      	ble.n	80171e4 <__ssvfiscanf_r+0x64>
 80171c4:	6823      	ldr	r3, [r4, #0]
 80171c6:	781a      	ldrb	r2, [r3, #0]
 80171c8:	5cba      	ldrb	r2, [r7, r2]
 80171ca:	0712      	lsls	r2, r2, #28
 80171cc:	d401      	bmi.n	80171d2 <__ssvfiscanf_r+0x52>
 80171ce:	462a      	mov	r2, r5
 80171d0:	e7eb      	b.n	80171aa <__ssvfiscanf_r+0x2a>
 80171d2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80171d4:	3201      	adds	r2, #1
 80171d6:	9245      	str	r2, [sp, #276]	; 0x114
 80171d8:	6862      	ldr	r2, [r4, #4]
 80171da:	3301      	adds	r3, #1
 80171dc:	3a01      	subs	r2, #1
 80171de:	6062      	str	r2, [r4, #4]
 80171e0:	6023      	str	r3, [r4, #0]
 80171e2:	e7ec      	b.n	80171be <__ssvfiscanf_r+0x3e>
 80171e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80171e6:	4621      	mov	r1, r4
 80171e8:	4630      	mov	r0, r6
 80171ea:	4798      	blx	r3
 80171ec:	2800      	cmp	r0, #0
 80171ee:	d0e9      	beq.n	80171c4 <__ssvfiscanf_r+0x44>
 80171f0:	e7ed      	b.n	80171ce <__ssvfiscanf_r+0x4e>
 80171f2:	2b25      	cmp	r3, #37	; 0x25
 80171f4:	d012      	beq.n	801721c <__ssvfiscanf_r+0x9c>
 80171f6:	469a      	mov	sl, r3
 80171f8:	6863      	ldr	r3, [r4, #4]
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	f340 8091 	ble.w	8017322 <__ssvfiscanf_r+0x1a2>
 8017200:	6822      	ldr	r2, [r4, #0]
 8017202:	7813      	ldrb	r3, [r2, #0]
 8017204:	4553      	cmp	r3, sl
 8017206:	f040 812e 	bne.w	8017466 <__ssvfiscanf_r+0x2e6>
 801720a:	6863      	ldr	r3, [r4, #4]
 801720c:	3b01      	subs	r3, #1
 801720e:	6063      	str	r3, [r4, #4]
 8017210:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017212:	3201      	adds	r2, #1
 8017214:	3301      	adds	r3, #1
 8017216:	6022      	str	r2, [r4, #0]
 8017218:	9345      	str	r3, [sp, #276]	; 0x114
 801721a:	e7d8      	b.n	80171ce <__ssvfiscanf_r+0x4e>
 801721c:	9141      	str	r1, [sp, #260]	; 0x104
 801721e:	9143      	str	r1, [sp, #268]	; 0x10c
 8017220:	7853      	ldrb	r3, [r2, #1]
 8017222:	2b2a      	cmp	r3, #42	; 0x2a
 8017224:	bf02      	ittt	eq
 8017226:	2310      	moveq	r3, #16
 8017228:	1c95      	addeq	r5, r2, #2
 801722a:	9341      	streq	r3, [sp, #260]	; 0x104
 801722c:	220a      	movs	r2, #10
 801722e:	46aa      	mov	sl, r5
 8017230:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8017234:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8017238:	2b09      	cmp	r3, #9
 801723a:	d91d      	bls.n	8017278 <__ssvfiscanf_r+0xf8>
 801723c:	487e      	ldr	r0, [pc, #504]	; (8017438 <__ssvfiscanf_r+0x2b8>)
 801723e:	2203      	movs	r2, #3
 8017240:	f7e9 f87e 	bl	8000340 <memchr>
 8017244:	b140      	cbz	r0, 8017258 <__ssvfiscanf_r+0xd8>
 8017246:	2301      	movs	r3, #1
 8017248:	eba0 0009 	sub.w	r0, r0, r9
 801724c:	fa03 f000 	lsl.w	r0, r3, r0
 8017250:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017252:	4318      	orrs	r0, r3
 8017254:	9041      	str	r0, [sp, #260]	; 0x104
 8017256:	4655      	mov	r5, sl
 8017258:	f815 3b01 	ldrb.w	r3, [r5], #1
 801725c:	2b78      	cmp	r3, #120	; 0x78
 801725e:	d806      	bhi.n	801726e <__ssvfiscanf_r+0xee>
 8017260:	2b57      	cmp	r3, #87	; 0x57
 8017262:	d810      	bhi.n	8017286 <__ssvfiscanf_r+0x106>
 8017264:	2b25      	cmp	r3, #37	; 0x25
 8017266:	d0c6      	beq.n	80171f6 <__ssvfiscanf_r+0x76>
 8017268:	d856      	bhi.n	8017318 <__ssvfiscanf_r+0x198>
 801726a:	2b00      	cmp	r3, #0
 801726c:	d064      	beq.n	8017338 <__ssvfiscanf_r+0x1b8>
 801726e:	2303      	movs	r3, #3
 8017270:	9347      	str	r3, [sp, #284]	; 0x11c
 8017272:	230a      	movs	r3, #10
 8017274:	9342      	str	r3, [sp, #264]	; 0x108
 8017276:	e071      	b.n	801735c <__ssvfiscanf_r+0x1dc>
 8017278:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801727a:	fb02 1103 	mla	r1, r2, r3, r1
 801727e:	3930      	subs	r1, #48	; 0x30
 8017280:	9143      	str	r1, [sp, #268]	; 0x10c
 8017282:	4655      	mov	r5, sl
 8017284:	e7d3      	b.n	801722e <__ssvfiscanf_r+0xae>
 8017286:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801728a:	2a20      	cmp	r2, #32
 801728c:	d8ef      	bhi.n	801726e <__ssvfiscanf_r+0xee>
 801728e:	a101      	add	r1, pc, #4	; (adr r1, 8017294 <__ssvfiscanf_r+0x114>)
 8017290:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017294:	08017347 	.word	0x08017347
 8017298:	0801726f 	.word	0x0801726f
 801729c:	0801726f 	.word	0x0801726f
 80172a0:	080173a5 	.word	0x080173a5
 80172a4:	0801726f 	.word	0x0801726f
 80172a8:	0801726f 	.word	0x0801726f
 80172ac:	0801726f 	.word	0x0801726f
 80172b0:	0801726f 	.word	0x0801726f
 80172b4:	0801726f 	.word	0x0801726f
 80172b8:	0801726f 	.word	0x0801726f
 80172bc:	0801726f 	.word	0x0801726f
 80172c0:	080173bb 	.word	0x080173bb
 80172c4:	08017391 	.word	0x08017391
 80172c8:	0801731f 	.word	0x0801731f
 80172cc:	0801731f 	.word	0x0801731f
 80172d0:	0801731f 	.word	0x0801731f
 80172d4:	0801726f 	.word	0x0801726f
 80172d8:	08017395 	.word	0x08017395
 80172dc:	0801726f 	.word	0x0801726f
 80172e0:	0801726f 	.word	0x0801726f
 80172e4:	0801726f 	.word	0x0801726f
 80172e8:	0801726f 	.word	0x0801726f
 80172ec:	080173cb 	.word	0x080173cb
 80172f0:	0801739d 	.word	0x0801739d
 80172f4:	0801733f 	.word	0x0801733f
 80172f8:	0801726f 	.word	0x0801726f
 80172fc:	0801726f 	.word	0x0801726f
 8017300:	080173c7 	.word	0x080173c7
 8017304:	0801726f 	.word	0x0801726f
 8017308:	08017391 	.word	0x08017391
 801730c:	0801726f 	.word	0x0801726f
 8017310:	0801726f 	.word	0x0801726f
 8017314:	08017347 	.word	0x08017347
 8017318:	3b45      	subs	r3, #69	; 0x45
 801731a:	2b02      	cmp	r3, #2
 801731c:	d8a7      	bhi.n	801726e <__ssvfiscanf_r+0xee>
 801731e:	2305      	movs	r3, #5
 8017320:	e01b      	b.n	801735a <__ssvfiscanf_r+0x1da>
 8017322:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017324:	4621      	mov	r1, r4
 8017326:	4630      	mov	r0, r6
 8017328:	4798      	blx	r3
 801732a:	2800      	cmp	r0, #0
 801732c:	f43f af68 	beq.w	8017200 <__ssvfiscanf_r+0x80>
 8017330:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017332:	2800      	cmp	r0, #0
 8017334:	f040 808d 	bne.w	8017452 <__ssvfiscanf_r+0x2d2>
 8017338:	f04f 30ff 	mov.w	r0, #4294967295
 801733c:	e08f      	b.n	801745e <__ssvfiscanf_r+0x2de>
 801733e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017340:	f042 0220 	orr.w	r2, r2, #32
 8017344:	9241      	str	r2, [sp, #260]	; 0x104
 8017346:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801734c:	9241      	str	r2, [sp, #260]	; 0x104
 801734e:	2210      	movs	r2, #16
 8017350:	2b6f      	cmp	r3, #111	; 0x6f
 8017352:	9242      	str	r2, [sp, #264]	; 0x108
 8017354:	bf34      	ite	cc
 8017356:	2303      	movcc	r3, #3
 8017358:	2304      	movcs	r3, #4
 801735a:	9347      	str	r3, [sp, #284]	; 0x11c
 801735c:	6863      	ldr	r3, [r4, #4]
 801735e:	2b00      	cmp	r3, #0
 8017360:	dd42      	ble.n	80173e8 <__ssvfiscanf_r+0x268>
 8017362:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017364:	0659      	lsls	r1, r3, #25
 8017366:	d404      	bmi.n	8017372 <__ssvfiscanf_r+0x1f2>
 8017368:	6823      	ldr	r3, [r4, #0]
 801736a:	781a      	ldrb	r2, [r3, #0]
 801736c:	5cba      	ldrb	r2, [r7, r2]
 801736e:	0712      	lsls	r2, r2, #28
 8017370:	d441      	bmi.n	80173f6 <__ssvfiscanf_r+0x276>
 8017372:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017374:	2b02      	cmp	r3, #2
 8017376:	dc50      	bgt.n	801741a <__ssvfiscanf_r+0x29a>
 8017378:	466b      	mov	r3, sp
 801737a:	4622      	mov	r2, r4
 801737c:	a941      	add	r1, sp, #260	; 0x104
 801737e:	4630      	mov	r0, r6
 8017380:	f000 fa0a 	bl	8017798 <_scanf_chars>
 8017384:	2801      	cmp	r0, #1
 8017386:	d06e      	beq.n	8017466 <__ssvfiscanf_r+0x2e6>
 8017388:	2802      	cmp	r0, #2
 801738a:	f47f af20 	bne.w	80171ce <__ssvfiscanf_r+0x4e>
 801738e:	e7cf      	b.n	8017330 <__ssvfiscanf_r+0x1b0>
 8017390:	220a      	movs	r2, #10
 8017392:	e7dd      	b.n	8017350 <__ssvfiscanf_r+0x1d0>
 8017394:	2300      	movs	r3, #0
 8017396:	9342      	str	r3, [sp, #264]	; 0x108
 8017398:	2303      	movs	r3, #3
 801739a:	e7de      	b.n	801735a <__ssvfiscanf_r+0x1da>
 801739c:	2308      	movs	r3, #8
 801739e:	9342      	str	r3, [sp, #264]	; 0x108
 80173a0:	2304      	movs	r3, #4
 80173a2:	e7da      	b.n	801735a <__ssvfiscanf_r+0x1da>
 80173a4:	4629      	mov	r1, r5
 80173a6:	4640      	mov	r0, r8
 80173a8:	f000 fb48 	bl	8017a3c <__sccl>
 80173ac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80173ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80173b2:	9341      	str	r3, [sp, #260]	; 0x104
 80173b4:	4605      	mov	r5, r0
 80173b6:	2301      	movs	r3, #1
 80173b8:	e7cf      	b.n	801735a <__ssvfiscanf_r+0x1da>
 80173ba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80173bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80173c0:	9341      	str	r3, [sp, #260]	; 0x104
 80173c2:	2300      	movs	r3, #0
 80173c4:	e7c9      	b.n	801735a <__ssvfiscanf_r+0x1da>
 80173c6:	2302      	movs	r3, #2
 80173c8:	e7c7      	b.n	801735a <__ssvfiscanf_r+0x1da>
 80173ca:	9841      	ldr	r0, [sp, #260]	; 0x104
 80173cc:	06c3      	lsls	r3, r0, #27
 80173ce:	f53f aefe 	bmi.w	80171ce <__ssvfiscanf_r+0x4e>
 80173d2:	9b00      	ldr	r3, [sp, #0]
 80173d4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80173d6:	1d19      	adds	r1, r3, #4
 80173d8:	9100      	str	r1, [sp, #0]
 80173da:	681b      	ldr	r3, [r3, #0]
 80173dc:	f010 0f01 	tst.w	r0, #1
 80173e0:	bf14      	ite	ne
 80173e2:	801a      	strhne	r2, [r3, #0]
 80173e4:	601a      	streq	r2, [r3, #0]
 80173e6:	e6f2      	b.n	80171ce <__ssvfiscanf_r+0x4e>
 80173e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80173ea:	4621      	mov	r1, r4
 80173ec:	4630      	mov	r0, r6
 80173ee:	4798      	blx	r3
 80173f0:	2800      	cmp	r0, #0
 80173f2:	d0b6      	beq.n	8017362 <__ssvfiscanf_r+0x1e2>
 80173f4:	e79c      	b.n	8017330 <__ssvfiscanf_r+0x1b0>
 80173f6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80173f8:	3201      	adds	r2, #1
 80173fa:	9245      	str	r2, [sp, #276]	; 0x114
 80173fc:	6862      	ldr	r2, [r4, #4]
 80173fe:	3a01      	subs	r2, #1
 8017400:	2a00      	cmp	r2, #0
 8017402:	6062      	str	r2, [r4, #4]
 8017404:	dd02      	ble.n	801740c <__ssvfiscanf_r+0x28c>
 8017406:	3301      	adds	r3, #1
 8017408:	6023      	str	r3, [r4, #0]
 801740a:	e7ad      	b.n	8017368 <__ssvfiscanf_r+0x1e8>
 801740c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801740e:	4621      	mov	r1, r4
 8017410:	4630      	mov	r0, r6
 8017412:	4798      	blx	r3
 8017414:	2800      	cmp	r0, #0
 8017416:	d0a7      	beq.n	8017368 <__ssvfiscanf_r+0x1e8>
 8017418:	e78a      	b.n	8017330 <__ssvfiscanf_r+0x1b0>
 801741a:	2b04      	cmp	r3, #4
 801741c:	dc0e      	bgt.n	801743c <__ssvfiscanf_r+0x2bc>
 801741e:	466b      	mov	r3, sp
 8017420:	4622      	mov	r2, r4
 8017422:	a941      	add	r1, sp, #260	; 0x104
 8017424:	4630      	mov	r0, r6
 8017426:	f000 fa11 	bl	801784c <_scanf_i>
 801742a:	e7ab      	b.n	8017384 <__ssvfiscanf_r+0x204>
 801742c:	080170cd 	.word	0x080170cd
 8017430:	08017147 	.word	0x08017147
 8017434:	08018267 	.word	0x08018267
 8017438:	0801821e 	.word	0x0801821e
 801743c:	4b0b      	ldr	r3, [pc, #44]	; (801746c <__ssvfiscanf_r+0x2ec>)
 801743e:	2b00      	cmp	r3, #0
 8017440:	f43f aec5 	beq.w	80171ce <__ssvfiscanf_r+0x4e>
 8017444:	466b      	mov	r3, sp
 8017446:	4622      	mov	r2, r4
 8017448:	a941      	add	r1, sp, #260	; 0x104
 801744a:	4630      	mov	r0, r6
 801744c:	f3af 8000 	nop.w
 8017450:	e798      	b.n	8017384 <__ssvfiscanf_r+0x204>
 8017452:	89a3      	ldrh	r3, [r4, #12]
 8017454:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017458:	bf18      	it	ne
 801745a:	f04f 30ff 	movne.w	r0, #4294967295
 801745e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8017462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017466:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017468:	e7f9      	b.n	801745e <__ssvfiscanf_r+0x2de>
 801746a:	bf00      	nop
 801746c:	00000000 	.word	0x00000000

08017470 <_printf_common>:
 8017470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017474:	4616      	mov	r6, r2
 8017476:	4699      	mov	r9, r3
 8017478:	688a      	ldr	r2, [r1, #8]
 801747a:	690b      	ldr	r3, [r1, #16]
 801747c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017480:	4293      	cmp	r3, r2
 8017482:	bfb8      	it	lt
 8017484:	4613      	movlt	r3, r2
 8017486:	6033      	str	r3, [r6, #0]
 8017488:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801748c:	4607      	mov	r7, r0
 801748e:	460c      	mov	r4, r1
 8017490:	b10a      	cbz	r2, 8017496 <_printf_common+0x26>
 8017492:	3301      	adds	r3, #1
 8017494:	6033      	str	r3, [r6, #0]
 8017496:	6823      	ldr	r3, [r4, #0]
 8017498:	0699      	lsls	r1, r3, #26
 801749a:	bf42      	ittt	mi
 801749c:	6833      	ldrmi	r3, [r6, #0]
 801749e:	3302      	addmi	r3, #2
 80174a0:	6033      	strmi	r3, [r6, #0]
 80174a2:	6825      	ldr	r5, [r4, #0]
 80174a4:	f015 0506 	ands.w	r5, r5, #6
 80174a8:	d106      	bne.n	80174b8 <_printf_common+0x48>
 80174aa:	f104 0a19 	add.w	sl, r4, #25
 80174ae:	68e3      	ldr	r3, [r4, #12]
 80174b0:	6832      	ldr	r2, [r6, #0]
 80174b2:	1a9b      	subs	r3, r3, r2
 80174b4:	42ab      	cmp	r3, r5
 80174b6:	dc26      	bgt.n	8017506 <_printf_common+0x96>
 80174b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80174bc:	1e13      	subs	r3, r2, #0
 80174be:	6822      	ldr	r2, [r4, #0]
 80174c0:	bf18      	it	ne
 80174c2:	2301      	movne	r3, #1
 80174c4:	0692      	lsls	r2, r2, #26
 80174c6:	d42b      	bmi.n	8017520 <_printf_common+0xb0>
 80174c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80174cc:	4649      	mov	r1, r9
 80174ce:	4638      	mov	r0, r7
 80174d0:	47c0      	blx	r8
 80174d2:	3001      	adds	r0, #1
 80174d4:	d01e      	beq.n	8017514 <_printf_common+0xa4>
 80174d6:	6823      	ldr	r3, [r4, #0]
 80174d8:	68e5      	ldr	r5, [r4, #12]
 80174da:	6832      	ldr	r2, [r6, #0]
 80174dc:	f003 0306 	and.w	r3, r3, #6
 80174e0:	2b04      	cmp	r3, #4
 80174e2:	bf08      	it	eq
 80174e4:	1aad      	subeq	r5, r5, r2
 80174e6:	68a3      	ldr	r3, [r4, #8]
 80174e8:	6922      	ldr	r2, [r4, #16]
 80174ea:	bf0c      	ite	eq
 80174ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80174f0:	2500      	movne	r5, #0
 80174f2:	4293      	cmp	r3, r2
 80174f4:	bfc4      	itt	gt
 80174f6:	1a9b      	subgt	r3, r3, r2
 80174f8:	18ed      	addgt	r5, r5, r3
 80174fa:	2600      	movs	r6, #0
 80174fc:	341a      	adds	r4, #26
 80174fe:	42b5      	cmp	r5, r6
 8017500:	d11a      	bne.n	8017538 <_printf_common+0xc8>
 8017502:	2000      	movs	r0, #0
 8017504:	e008      	b.n	8017518 <_printf_common+0xa8>
 8017506:	2301      	movs	r3, #1
 8017508:	4652      	mov	r2, sl
 801750a:	4649      	mov	r1, r9
 801750c:	4638      	mov	r0, r7
 801750e:	47c0      	blx	r8
 8017510:	3001      	adds	r0, #1
 8017512:	d103      	bne.n	801751c <_printf_common+0xac>
 8017514:	f04f 30ff 	mov.w	r0, #4294967295
 8017518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801751c:	3501      	adds	r5, #1
 801751e:	e7c6      	b.n	80174ae <_printf_common+0x3e>
 8017520:	18e1      	adds	r1, r4, r3
 8017522:	1c5a      	adds	r2, r3, #1
 8017524:	2030      	movs	r0, #48	; 0x30
 8017526:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801752a:	4422      	add	r2, r4
 801752c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017530:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017534:	3302      	adds	r3, #2
 8017536:	e7c7      	b.n	80174c8 <_printf_common+0x58>
 8017538:	2301      	movs	r3, #1
 801753a:	4622      	mov	r2, r4
 801753c:	4649      	mov	r1, r9
 801753e:	4638      	mov	r0, r7
 8017540:	47c0      	blx	r8
 8017542:	3001      	adds	r0, #1
 8017544:	d0e6      	beq.n	8017514 <_printf_common+0xa4>
 8017546:	3601      	adds	r6, #1
 8017548:	e7d9      	b.n	80174fe <_printf_common+0x8e>
	...

0801754c <_printf_i>:
 801754c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017550:	7e0f      	ldrb	r7, [r1, #24]
 8017552:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017554:	2f78      	cmp	r7, #120	; 0x78
 8017556:	4691      	mov	r9, r2
 8017558:	4680      	mov	r8, r0
 801755a:	460c      	mov	r4, r1
 801755c:	469a      	mov	sl, r3
 801755e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017562:	d807      	bhi.n	8017574 <_printf_i+0x28>
 8017564:	2f62      	cmp	r7, #98	; 0x62
 8017566:	d80a      	bhi.n	801757e <_printf_i+0x32>
 8017568:	2f00      	cmp	r7, #0
 801756a:	f000 80d8 	beq.w	801771e <_printf_i+0x1d2>
 801756e:	2f58      	cmp	r7, #88	; 0x58
 8017570:	f000 80a3 	beq.w	80176ba <_printf_i+0x16e>
 8017574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017578:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801757c:	e03a      	b.n	80175f4 <_printf_i+0xa8>
 801757e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017582:	2b15      	cmp	r3, #21
 8017584:	d8f6      	bhi.n	8017574 <_printf_i+0x28>
 8017586:	a101      	add	r1, pc, #4	; (adr r1, 801758c <_printf_i+0x40>)
 8017588:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801758c:	080175e5 	.word	0x080175e5
 8017590:	080175f9 	.word	0x080175f9
 8017594:	08017575 	.word	0x08017575
 8017598:	08017575 	.word	0x08017575
 801759c:	08017575 	.word	0x08017575
 80175a0:	08017575 	.word	0x08017575
 80175a4:	080175f9 	.word	0x080175f9
 80175a8:	08017575 	.word	0x08017575
 80175ac:	08017575 	.word	0x08017575
 80175b0:	08017575 	.word	0x08017575
 80175b4:	08017575 	.word	0x08017575
 80175b8:	08017705 	.word	0x08017705
 80175bc:	08017629 	.word	0x08017629
 80175c0:	080176e7 	.word	0x080176e7
 80175c4:	08017575 	.word	0x08017575
 80175c8:	08017575 	.word	0x08017575
 80175cc:	08017727 	.word	0x08017727
 80175d0:	08017575 	.word	0x08017575
 80175d4:	08017629 	.word	0x08017629
 80175d8:	08017575 	.word	0x08017575
 80175dc:	08017575 	.word	0x08017575
 80175e0:	080176ef 	.word	0x080176ef
 80175e4:	682b      	ldr	r3, [r5, #0]
 80175e6:	1d1a      	adds	r2, r3, #4
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	602a      	str	r2, [r5, #0]
 80175ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80175f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80175f4:	2301      	movs	r3, #1
 80175f6:	e0a3      	b.n	8017740 <_printf_i+0x1f4>
 80175f8:	6820      	ldr	r0, [r4, #0]
 80175fa:	6829      	ldr	r1, [r5, #0]
 80175fc:	0606      	lsls	r6, r0, #24
 80175fe:	f101 0304 	add.w	r3, r1, #4
 8017602:	d50a      	bpl.n	801761a <_printf_i+0xce>
 8017604:	680e      	ldr	r6, [r1, #0]
 8017606:	602b      	str	r3, [r5, #0]
 8017608:	2e00      	cmp	r6, #0
 801760a:	da03      	bge.n	8017614 <_printf_i+0xc8>
 801760c:	232d      	movs	r3, #45	; 0x2d
 801760e:	4276      	negs	r6, r6
 8017610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017614:	485e      	ldr	r0, [pc, #376]	; (8017790 <_printf_i+0x244>)
 8017616:	230a      	movs	r3, #10
 8017618:	e019      	b.n	801764e <_printf_i+0x102>
 801761a:	680e      	ldr	r6, [r1, #0]
 801761c:	602b      	str	r3, [r5, #0]
 801761e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017622:	bf18      	it	ne
 8017624:	b236      	sxthne	r6, r6
 8017626:	e7ef      	b.n	8017608 <_printf_i+0xbc>
 8017628:	682b      	ldr	r3, [r5, #0]
 801762a:	6820      	ldr	r0, [r4, #0]
 801762c:	1d19      	adds	r1, r3, #4
 801762e:	6029      	str	r1, [r5, #0]
 8017630:	0601      	lsls	r1, r0, #24
 8017632:	d501      	bpl.n	8017638 <_printf_i+0xec>
 8017634:	681e      	ldr	r6, [r3, #0]
 8017636:	e002      	b.n	801763e <_printf_i+0xf2>
 8017638:	0646      	lsls	r6, r0, #25
 801763a:	d5fb      	bpl.n	8017634 <_printf_i+0xe8>
 801763c:	881e      	ldrh	r6, [r3, #0]
 801763e:	4854      	ldr	r0, [pc, #336]	; (8017790 <_printf_i+0x244>)
 8017640:	2f6f      	cmp	r7, #111	; 0x6f
 8017642:	bf0c      	ite	eq
 8017644:	2308      	moveq	r3, #8
 8017646:	230a      	movne	r3, #10
 8017648:	2100      	movs	r1, #0
 801764a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801764e:	6865      	ldr	r5, [r4, #4]
 8017650:	60a5      	str	r5, [r4, #8]
 8017652:	2d00      	cmp	r5, #0
 8017654:	bfa2      	ittt	ge
 8017656:	6821      	ldrge	r1, [r4, #0]
 8017658:	f021 0104 	bicge.w	r1, r1, #4
 801765c:	6021      	strge	r1, [r4, #0]
 801765e:	b90e      	cbnz	r6, 8017664 <_printf_i+0x118>
 8017660:	2d00      	cmp	r5, #0
 8017662:	d04d      	beq.n	8017700 <_printf_i+0x1b4>
 8017664:	4615      	mov	r5, r2
 8017666:	fbb6 f1f3 	udiv	r1, r6, r3
 801766a:	fb03 6711 	mls	r7, r3, r1, r6
 801766e:	5dc7      	ldrb	r7, [r0, r7]
 8017670:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017674:	4637      	mov	r7, r6
 8017676:	42bb      	cmp	r3, r7
 8017678:	460e      	mov	r6, r1
 801767a:	d9f4      	bls.n	8017666 <_printf_i+0x11a>
 801767c:	2b08      	cmp	r3, #8
 801767e:	d10b      	bne.n	8017698 <_printf_i+0x14c>
 8017680:	6823      	ldr	r3, [r4, #0]
 8017682:	07de      	lsls	r6, r3, #31
 8017684:	d508      	bpl.n	8017698 <_printf_i+0x14c>
 8017686:	6923      	ldr	r3, [r4, #16]
 8017688:	6861      	ldr	r1, [r4, #4]
 801768a:	4299      	cmp	r1, r3
 801768c:	bfde      	ittt	le
 801768e:	2330      	movle	r3, #48	; 0x30
 8017690:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017694:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017698:	1b52      	subs	r2, r2, r5
 801769a:	6122      	str	r2, [r4, #16]
 801769c:	f8cd a000 	str.w	sl, [sp]
 80176a0:	464b      	mov	r3, r9
 80176a2:	aa03      	add	r2, sp, #12
 80176a4:	4621      	mov	r1, r4
 80176a6:	4640      	mov	r0, r8
 80176a8:	f7ff fee2 	bl	8017470 <_printf_common>
 80176ac:	3001      	adds	r0, #1
 80176ae:	d14c      	bne.n	801774a <_printf_i+0x1fe>
 80176b0:	f04f 30ff 	mov.w	r0, #4294967295
 80176b4:	b004      	add	sp, #16
 80176b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176ba:	4835      	ldr	r0, [pc, #212]	; (8017790 <_printf_i+0x244>)
 80176bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80176c0:	6829      	ldr	r1, [r5, #0]
 80176c2:	6823      	ldr	r3, [r4, #0]
 80176c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80176c8:	6029      	str	r1, [r5, #0]
 80176ca:	061d      	lsls	r5, r3, #24
 80176cc:	d514      	bpl.n	80176f8 <_printf_i+0x1ac>
 80176ce:	07df      	lsls	r7, r3, #31
 80176d0:	bf44      	itt	mi
 80176d2:	f043 0320 	orrmi.w	r3, r3, #32
 80176d6:	6023      	strmi	r3, [r4, #0]
 80176d8:	b91e      	cbnz	r6, 80176e2 <_printf_i+0x196>
 80176da:	6823      	ldr	r3, [r4, #0]
 80176dc:	f023 0320 	bic.w	r3, r3, #32
 80176e0:	6023      	str	r3, [r4, #0]
 80176e2:	2310      	movs	r3, #16
 80176e4:	e7b0      	b.n	8017648 <_printf_i+0xfc>
 80176e6:	6823      	ldr	r3, [r4, #0]
 80176e8:	f043 0320 	orr.w	r3, r3, #32
 80176ec:	6023      	str	r3, [r4, #0]
 80176ee:	2378      	movs	r3, #120	; 0x78
 80176f0:	4828      	ldr	r0, [pc, #160]	; (8017794 <_printf_i+0x248>)
 80176f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80176f6:	e7e3      	b.n	80176c0 <_printf_i+0x174>
 80176f8:	0659      	lsls	r1, r3, #25
 80176fa:	bf48      	it	mi
 80176fc:	b2b6      	uxthmi	r6, r6
 80176fe:	e7e6      	b.n	80176ce <_printf_i+0x182>
 8017700:	4615      	mov	r5, r2
 8017702:	e7bb      	b.n	801767c <_printf_i+0x130>
 8017704:	682b      	ldr	r3, [r5, #0]
 8017706:	6826      	ldr	r6, [r4, #0]
 8017708:	6961      	ldr	r1, [r4, #20]
 801770a:	1d18      	adds	r0, r3, #4
 801770c:	6028      	str	r0, [r5, #0]
 801770e:	0635      	lsls	r5, r6, #24
 8017710:	681b      	ldr	r3, [r3, #0]
 8017712:	d501      	bpl.n	8017718 <_printf_i+0x1cc>
 8017714:	6019      	str	r1, [r3, #0]
 8017716:	e002      	b.n	801771e <_printf_i+0x1d2>
 8017718:	0670      	lsls	r0, r6, #25
 801771a:	d5fb      	bpl.n	8017714 <_printf_i+0x1c8>
 801771c:	8019      	strh	r1, [r3, #0]
 801771e:	2300      	movs	r3, #0
 8017720:	6123      	str	r3, [r4, #16]
 8017722:	4615      	mov	r5, r2
 8017724:	e7ba      	b.n	801769c <_printf_i+0x150>
 8017726:	682b      	ldr	r3, [r5, #0]
 8017728:	1d1a      	adds	r2, r3, #4
 801772a:	602a      	str	r2, [r5, #0]
 801772c:	681d      	ldr	r5, [r3, #0]
 801772e:	6862      	ldr	r2, [r4, #4]
 8017730:	2100      	movs	r1, #0
 8017732:	4628      	mov	r0, r5
 8017734:	f7e8 fe04 	bl	8000340 <memchr>
 8017738:	b108      	cbz	r0, 801773e <_printf_i+0x1f2>
 801773a:	1b40      	subs	r0, r0, r5
 801773c:	6060      	str	r0, [r4, #4]
 801773e:	6863      	ldr	r3, [r4, #4]
 8017740:	6123      	str	r3, [r4, #16]
 8017742:	2300      	movs	r3, #0
 8017744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017748:	e7a8      	b.n	801769c <_printf_i+0x150>
 801774a:	6923      	ldr	r3, [r4, #16]
 801774c:	462a      	mov	r2, r5
 801774e:	4649      	mov	r1, r9
 8017750:	4640      	mov	r0, r8
 8017752:	47d0      	blx	sl
 8017754:	3001      	adds	r0, #1
 8017756:	d0ab      	beq.n	80176b0 <_printf_i+0x164>
 8017758:	6823      	ldr	r3, [r4, #0]
 801775a:	079b      	lsls	r3, r3, #30
 801775c:	d413      	bmi.n	8017786 <_printf_i+0x23a>
 801775e:	68e0      	ldr	r0, [r4, #12]
 8017760:	9b03      	ldr	r3, [sp, #12]
 8017762:	4298      	cmp	r0, r3
 8017764:	bfb8      	it	lt
 8017766:	4618      	movlt	r0, r3
 8017768:	e7a4      	b.n	80176b4 <_printf_i+0x168>
 801776a:	2301      	movs	r3, #1
 801776c:	4632      	mov	r2, r6
 801776e:	4649      	mov	r1, r9
 8017770:	4640      	mov	r0, r8
 8017772:	47d0      	blx	sl
 8017774:	3001      	adds	r0, #1
 8017776:	d09b      	beq.n	80176b0 <_printf_i+0x164>
 8017778:	3501      	adds	r5, #1
 801777a:	68e3      	ldr	r3, [r4, #12]
 801777c:	9903      	ldr	r1, [sp, #12]
 801777e:	1a5b      	subs	r3, r3, r1
 8017780:	42ab      	cmp	r3, r5
 8017782:	dcf2      	bgt.n	801776a <_printf_i+0x21e>
 8017784:	e7eb      	b.n	801775e <_printf_i+0x212>
 8017786:	2500      	movs	r5, #0
 8017788:	f104 0619 	add.w	r6, r4, #25
 801778c:	e7f5      	b.n	801777a <_printf_i+0x22e>
 801778e:	bf00      	nop
 8017790:	08018229 	.word	0x08018229
 8017794:	0801823a 	.word	0x0801823a

08017798 <_scanf_chars>:
 8017798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801779c:	4615      	mov	r5, r2
 801779e:	688a      	ldr	r2, [r1, #8]
 80177a0:	4680      	mov	r8, r0
 80177a2:	460c      	mov	r4, r1
 80177a4:	b932      	cbnz	r2, 80177b4 <_scanf_chars+0x1c>
 80177a6:	698a      	ldr	r2, [r1, #24]
 80177a8:	2a00      	cmp	r2, #0
 80177aa:	bf0c      	ite	eq
 80177ac:	2201      	moveq	r2, #1
 80177ae:	f04f 32ff 	movne.w	r2, #4294967295
 80177b2:	608a      	str	r2, [r1, #8]
 80177b4:	6822      	ldr	r2, [r4, #0]
 80177b6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8017848 <_scanf_chars+0xb0>
 80177ba:	06d1      	lsls	r1, r2, #27
 80177bc:	bf5f      	itttt	pl
 80177be:	681a      	ldrpl	r2, [r3, #0]
 80177c0:	1d11      	addpl	r1, r2, #4
 80177c2:	6019      	strpl	r1, [r3, #0]
 80177c4:	6816      	ldrpl	r6, [r2, #0]
 80177c6:	2700      	movs	r7, #0
 80177c8:	69a0      	ldr	r0, [r4, #24]
 80177ca:	b188      	cbz	r0, 80177f0 <_scanf_chars+0x58>
 80177cc:	2801      	cmp	r0, #1
 80177ce:	d107      	bne.n	80177e0 <_scanf_chars+0x48>
 80177d0:	682a      	ldr	r2, [r5, #0]
 80177d2:	7811      	ldrb	r1, [r2, #0]
 80177d4:	6962      	ldr	r2, [r4, #20]
 80177d6:	5c52      	ldrb	r2, [r2, r1]
 80177d8:	b952      	cbnz	r2, 80177f0 <_scanf_chars+0x58>
 80177da:	2f00      	cmp	r7, #0
 80177dc:	d031      	beq.n	8017842 <_scanf_chars+0xaa>
 80177de:	e022      	b.n	8017826 <_scanf_chars+0x8e>
 80177e0:	2802      	cmp	r0, #2
 80177e2:	d120      	bne.n	8017826 <_scanf_chars+0x8e>
 80177e4:	682b      	ldr	r3, [r5, #0]
 80177e6:	781b      	ldrb	r3, [r3, #0]
 80177e8:	f813 3009 	ldrb.w	r3, [r3, r9]
 80177ec:	071b      	lsls	r3, r3, #28
 80177ee:	d41a      	bmi.n	8017826 <_scanf_chars+0x8e>
 80177f0:	6823      	ldr	r3, [r4, #0]
 80177f2:	06da      	lsls	r2, r3, #27
 80177f4:	bf5e      	ittt	pl
 80177f6:	682b      	ldrpl	r3, [r5, #0]
 80177f8:	781b      	ldrbpl	r3, [r3, #0]
 80177fa:	f806 3b01 	strbpl.w	r3, [r6], #1
 80177fe:	682a      	ldr	r2, [r5, #0]
 8017800:	686b      	ldr	r3, [r5, #4]
 8017802:	3201      	adds	r2, #1
 8017804:	602a      	str	r2, [r5, #0]
 8017806:	68a2      	ldr	r2, [r4, #8]
 8017808:	3b01      	subs	r3, #1
 801780a:	3a01      	subs	r2, #1
 801780c:	606b      	str	r3, [r5, #4]
 801780e:	3701      	adds	r7, #1
 8017810:	60a2      	str	r2, [r4, #8]
 8017812:	b142      	cbz	r2, 8017826 <_scanf_chars+0x8e>
 8017814:	2b00      	cmp	r3, #0
 8017816:	dcd7      	bgt.n	80177c8 <_scanf_chars+0x30>
 8017818:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801781c:	4629      	mov	r1, r5
 801781e:	4640      	mov	r0, r8
 8017820:	4798      	blx	r3
 8017822:	2800      	cmp	r0, #0
 8017824:	d0d0      	beq.n	80177c8 <_scanf_chars+0x30>
 8017826:	6823      	ldr	r3, [r4, #0]
 8017828:	f013 0310 	ands.w	r3, r3, #16
 801782c:	d105      	bne.n	801783a <_scanf_chars+0xa2>
 801782e:	68e2      	ldr	r2, [r4, #12]
 8017830:	3201      	adds	r2, #1
 8017832:	60e2      	str	r2, [r4, #12]
 8017834:	69a2      	ldr	r2, [r4, #24]
 8017836:	b102      	cbz	r2, 801783a <_scanf_chars+0xa2>
 8017838:	7033      	strb	r3, [r6, #0]
 801783a:	6923      	ldr	r3, [r4, #16]
 801783c:	443b      	add	r3, r7
 801783e:	6123      	str	r3, [r4, #16]
 8017840:	2000      	movs	r0, #0
 8017842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017846:	bf00      	nop
 8017848:	08018267 	.word	0x08018267

0801784c <_scanf_i>:
 801784c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017850:	4698      	mov	r8, r3
 8017852:	4b76      	ldr	r3, [pc, #472]	; (8017a2c <_scanf_i+0x1e0>)
 8017854:	460c      	mov	r4, r1
 8017856:	4682      	mov	sl, r0
 8017858:	4616      	mov	r6, r2
 801785a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801785e:	b087      	sub	sp, #28
 8017860:	ab03      	add	r3, sp, #12
 8017862:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017866:	4b72      	ldr	r3, [pc, #456]	; (8017a30 <_scanf_i+0x1e4>)
 8017868:	69a1      	ldr	r1, [r4, #24]
 801786a:	4a72      	ldr	r2, [pc, #456]	; (8017a34 <_scanf_i+0x1e8>)
 801786c:	2903      	cmp	r1, #3
 801786e:	bf18      	it	ne
 8017870:	461a      	movne	r2, r3
 8017872:	68a3      	ldr	r3, [r4, #8]
 8017874:	9201      	str	r2, [sp, #4]
 8017876:	1e5a      	subs	r2, r3, #1
 8017878:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801787c:	bf88      	it	hi
 801787e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017882:	4627      	mov	r7, r4
 8017884:	bf82      	ittt	hi
 8017886:	eb03 0905 	addhi.w	r9, r3, r5
 801788a:	f240 135d 	movwhi	r3, #349	; 0x15d
 801788e:	60a3      	strhi	r3, [r4, #8]
 8017890:	f857 3b1c 	ldr.w	r3, [r7], #28
 8017894:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017898:	bf98      	it	ls
 801789a:	f04f 0900 	movls.w	r9, #0
 801789e:	6023      	str	r3, [r4, #0]
 80178a0:	463d      	mov	r5, r7
 80178a2:	f04f 0b00 	mov.w	fp, #0
 80178a6:	6831      	ldr	r1, [r6, #0]
 80178a8:	ab03      	add	r3, sp, #12
 80178aa:	7809      	ldrb	r1, [r1, #0]
 80178ac:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80178b0:	2202      	movs	r2, #2
 80178b2:	f7e8 fd45 	bl	8000340 <memchr>
 80178b6:	b328      	cbz	r0, 8017904 <_scanf_i+0xb8>
 80178b8:	f1bb 0f01 	cmp.w	fp, #1
 80178bc:	d159      	bne.n	8017972 <_scanf_i+0x126>
 80178be:	6862      	ldr	r2, [r4, #4]
 80178c0:	b92a      	cbnz	r2, 80178ce <_scanf_i+0x82>
 80178c2:	6822      	ldr	r2, [r4, #0]
 80178c4:	2308      	movs	r3, #8
 80178c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80178ca:	6063      	str	r3, [r4, #4]
 80178cc:	6022      	str	r2, [r4, #0]
 80178ce:	6822      	ldr	r2, [r4, #0]
 80178d0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80178d4:	6022      	str	r2, [r4, #0]
 80178d6:	68a2      	ldr	r2, [r4, #8]
 80178d8:	1e51      	subs	r1, r2, #1
 80178da:	60a1      	str	r1, [r4, #8]
 80178dc:	b192      	cbz	r2, 8017904 <_scanf_i+0xb8>
 80178de:	6832      	ldr	r2, [r6, #0]
 80178e0:	1c51      	adds	r1, r2, #1
 80178e2:	6031      	str	r1, [r6, #0]
 80178e4:	7812      	ldrb	r2, [r2, #0]
 80178e6:	f805 2b01 	strb.w	r2, [r5], #1
 80178ea:	6872      	ldr	r2, [r6, #4]
 80178ec:	3a01      	subs	r2, #1
 80178ee:	2a00      	cmp	r2, #0
 80178f0:	6072      	str	r2, [r6, #4]
 80178f2:	dc07      	bgt.n	8017904 <_scanf_i+0xb8>
 80178f4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80178f8:	4631      	mov	r1, r6
 80178fa:	4650      	mov	r0, sl
 80178fc:	4790      	blx	r2
 80178fe:	2800      	cmp	r0, #0
 8017900:	f040 8085 	bne.w	8017a0e <_scanf_i+0x1c2>
 8017904:	f10b 0b01 	add.w	fp, fp, #1
 8017908:	f1bb 0f03 	cmp.w	fp, #3
 801790c:	d1cb      	bne.n	80178a6 <_scanf_i+0x5a>
 801790e:	6863      	ldr	r3, [r4, #4]
 8017910:	b90b      	cbnz	r3, 8017916 <_scanf_i+0xca>
 8017912:	230a      	movs	r3, #10
 8017914:	6063      	str	r3, [r4, #4]
 8017916:	6863      	ldr	r3, [r4, #4]
 8017918:	4947      	ldr	r1, [pc, #284]	; (8017a38 <_scanf_i+0x1ec>)
 801791a:	6960      	ldr	r0, [r4, #20]
 801791c:	1ac9      	subs	r1, r1, r3
 801791e:	f000 f88d 	bl	8017a3c <__sccl>
 8017922:	f04f 0b00 	mov.w	fp, #0
 8017926:	68a3      	ldr	r3, [r4, #8]
 8017928:	6822      	ldr	r2, [r4, #0]
 801792a:	2b00      	cmp	r3, #0
 801792c:	d03d      	beq.n	80179aa <_scanf_i+0x15e>
 801792e:	6831      	ldr	r1, [r6, #0]
 8017930:	6960      	ldr	r0, [r4, #20]
 8017932:	f891 c000 	ldrb.w	ip, [r1]
 8017936:	f810 000c 	ldrb.w	r0, [r0, ip]
 801793a:	2800      	cmp	r0, #0
 801793c:	d035      	beq.n	80179aa <_scanf_i+0x15e>
 801793e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017942:	d124      	bne.n	801798e <_scanf_i+0x142>
 8017944:	0510      	lsls	r0, r2, #20
 8017946:	d522      	bpl.n	801798e <_scanf_i+0x142>
 8017948:	f10b 0b01 	add.w	fp, fp, #1
 801794c:	f1b9 0f00 	cmp.w	r9, #0
 8017950:	d003      	beq.n	801795a <_scanf_i+0x10e>
 8017952:	3301      	adds	r3, #1
 8017954:	f109 39ff 	add.w	r9, r9, #4294967295
 8017958:	60a3      	str	r3, [r4, #8]
 801795a:	6873      	ldr	r3, [r6, #4]
 801795c:	3b01      	subs	r3, #1
 801795e:	2b00      	cmp	r3, #0
 8017960:	6073      	str	r3, [r6, #4]
 8017962:	dd1b      	ble.n	801799c <_scanf_i+0x150>
 8017964:	6833      	ldr	r3, [r6, #0]
 8017966:	3301      	adds	r3, #1
 8017968:	6033      	str	r3, [r6, #0]
 801796a:	68a3      	ldr	r3, [r4, #8]
 801796c:	3b01      	subs	r3, #1
 801796e:	60a3      	str	r3, [r4, #8]
 8017970:	e7d9      	b.n	8017926 <_scanf_i+0xda>
 8017972:	f1bb 0f02 	cmp.w	fp, #2
 8017976:	d1ae      	bne.n	80178d6 <_scanf_i+0x8a>
 8017978:	6822      	ldr	r2, [r4, #0]
 801797a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801797e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017982:	d1bf      	bne.n	8017904 <_scanf_i+0xb8>
 8017984:	2310      	movs	r3, #16
 8017986:	6063      	str	r3, [r4, #4]
 8017988:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801798c:	e7a2      	b.n	80178d4 <_scanf_i+0x88>
 801798e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017992:	6022      	str	r2, [r4, #0]
 8017994:	780b      	ldrb	r3, [r1, #0]
 8017996:	f805 3b01 	strb.w	r3, [r5], #1
 801799a:	e7de      	b.n	801795a <_scanf_i+0x10e>
 801799c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80179a0:	4631      	mov	r1, r6
 80179a2:	4650      	mov	r0, sl
 80179a4:	4798      	blx	r3
 80179a6:	2800      	cmp	r0, #0
 80179a8:	d0df      	beq.n	801796a <_scanf_i+0x11e>
 80179aa:	6823      	ldr	r3, [r4, #0]
 80179ac:	05db      	lsls	r3, r3, #23
 80179ae:	d50d      	bpl.n	80179cc <_scanf_i+0x180>
 80179b0:	42bd      	cmp	r5, r7
 80179b2:	d909      	bls.n	80179c8 <_scanf_i+0x17c>
 80179b4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80179b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80179bc:	4632      	mov	r2, r6
 80179be:	4650      	mov	r0, sl
 80179c0:	4798      	blx	r3
 80179c2:	f105 39ff 	add.w	r9, r5, #4294967295
 80179c6:	464d      	mov	r5, r9
 80179c8:	42bd      	cmp	r5, r7
 80179ca:	d02d      	beq.n	8017a28 <_scanf_i+0x1dc>
 80179cc:	6822      	ldr	r2, [r4, #0]
 80179ce:	f012 0210 	ands.w	r2, r2, #16
 80179d2:	d113      	bne.n	80179fc <_scanf_i+0x1b0>
 80179d4:	702a      	strb	r2, [r5, #0]
 80179d6:	6863      	ldr	r3, [r4, #4]
 80179d8:	9e01      	ldr	r6, [sp, #4]
 80179da:	4639      	mov	r1, r7
 80179dc:	4650      	mov	r0, sl
 80179de:	47b0      	blx	r6
 80179e0:	6821      	ldr	r1, [r4, #0]
 80179e2:	f8d8 3000 	ldr.w	r3, [r8]
 80179e6:	f011 0f20 	tst.w	r1, #32
 80179ea:	d013      	beq.n	8017a14 <_scanf_i+0x1c8>
 80179ec:	1d1a      	adds	r2, r3, #4
 80179ee:	f8c8 2000 	str.w	r2, [r8]
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	6018      	str	r0, [r3, #0]
 80179f6:	68e3      	ldr	r3, [r4, #12]
 80179f8:	3301      	adds	r3, #1
 80179fa:	60e3      	str	r3, [r4, #12]
 80179fc:	1bed      	subs	r5, r5, r7
 80179fe:	44ab      	add	fp, r5
 8017a00:	6925      	ldr	r5, [r4, #16]
 8017a02:	445d      	add	r5, fp
 8017a04:	6125      	str	r5, [r4, #16]
 8017a06:	2000      	movs	r0, #0
 8017a08:	b007      	add	sp, #28
 8017a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a0e:	f04f 0b00 	mov.w	fp, #0
 8017a12:	e7ca      	b.n	80179aa <_scanf_i+0x15e>
 8017a14:	1d1a      	adds	r2, r3, #4
 8017a16:	f8c8 2000 	str.w	r2, [r8]
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	f011 0f01 	tst.w	r1, #1
 8017a20:	bf14      	ite	ne
 8017a22:	8018      	strhne	r0, [r3, #0]
 8017a24:	6018      	streq	r0, [r3, #0]
 8017a26:	e7e6      	b.n	80179f6 <_scanf_i+0x1aa>
 8017a28:	2001      	movs	r0, #1
 8017a2a:	e7ed      	b.n	8017a08 <_scanf_i+0x1bc>
 8017a2c:	08018148 	.word	0x08018148
 8017a30:	08017c99 	.word	0x08017c99
 8017a34:	08017bb1 	.word	0x08017bb1
 8017a38:	08018264 	.word	0x08018264

08017a3c <__sccl>:
 8017a3c:	b570      	push	{r4, r5, r6, lr}
 8017a3e:	780b      	ldrb	r3, [r1, #0]
 8017a40:	4604      	mov	r4, r0
 8017a42:	2b5e      	cmp	r3, #94	; 0x5e
 8017a44:	bf0b      	itete	eq
 8017a46:	784b      	ldrbeq	r3, [r1, #1]
 8017a48:	1c48      	addne	r0, r1, #1
 8017a4a:	1c88      	addeq	r0, r1, #2
 8017a4c:	2200      	movne	r2, #0
 8017a4e:	bf08      	it	eq
 8017a50:	2201      	moveq	r2, #1
 8017a52:	1e61      	subs	r1, r4, #1
 8017a54:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8017a58:	f801 2f01 	strb.w	r2, [r1, #1]!
 8017a5c:	42a9      	cmp	r1, r5
 8017a5e:	d1fb      	bne.n	8017a58 <__sccl+0x1c>
 8017a60:	b90b      	cbnz	r3, 8017a66 <__sccl+0x2a>
 8017a62:	3801      	subs	r0, #1
 8017a64:	bd70      	pop	{r4, r5, r6, pc}
 8017a66:	f082 0201 	eor.w	r2, r2, #1
 8017a6a:	54e2      	strb	r2, [r4, r3]
 8017a6c:	4605      	mov	r5, r0
 8017a6e:	4628      	mov	r0, r5
 8017a70:	f810 1b01 	ldrb.w	r1, [r0], #1
 8017a74:	292d      	cmp	r1, #45	; 0x2d
 8017a76:	d006      	beq.n	8017a86 <__sccl+0x4a>
 8017a78:	295d      	cmp	r1, #93	; 0x5d
 8017a7a:	d0f3      	beq.n	8017a64 <__sccl+0x28>
 8017a7c:	b909      	cbnz	r1, 8017a82 <__sccl+0x46>
 8017a7e:	4628      	mov	r0, r5
 8017a80:	e7f0      	b.n	8017a64 <__sccl+0x28>
 8017a82:	460b      	mov	r3, r1
 8017a84:	e7f1      	b.n	8017a6a <__sccl+0x2e>
 8017a86:	786e      	ldrb	r6, [r5, #1]
 8017a88:	2e5d      	cmp	r6, #93	; 0x5d
 8017a8a:	d0fa      	beq.n	8017a82 <__sccl+0x46>
 8017a8c:	42b3      	cmp	r3, r6
 8017a8e:	dcf8      	bgt.n	8017a82 <__sccl+0x46>
 8017a90:	3502      	adds	r5, #2
 8017a92:	4619      	mov	r1, r3
 8017a94:	3101      	adds	r1, #1
 8017a96:	428e      	cmp	r6, r1
 8017a98:	5462      	strb	r2, [r4, r1]
 8017a9a:	dcfb      	bgt.n	8017a94 <__sccl+0x58>
 8017a9c:	1af1      	subs	r1, r6, r3
 8017a9e:	3901      	subs	r1, #1
 8017aa0:	1c58      	adds	r0, r3, #1
 8017aa2:	42b3      	cmp	r3, r6
 8017aa4:	bfa8      	it	ge
 8017aa6:	2100      	movge	r1, #0
 8017aa8:	1843      	adds	r3, r0, r1
 8017aaa:	e7e0      	b.n	8017a6e <__sccl+0x32>

08017aac <_strtol_l.constprop.0>:
 8017aac:	2b01      	cmp	r3, #1
 8017aae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ab2:	d001      	beq.n	8017ab8 <_strtol_l.constprop.0+0xc>
 8017ab4:	2b24      	cmp	r3, #36	; 0x24
 8017ab6:	d906      	bls.n	8017ac6 <_strtol_l.constprop.0+0x1a>
 8017ab8:	f7ff f91e 	bl	8016cf8 <__errno>
 8017abc:	2316      	movs	r3, #22
 8017abe:	6003      	str	r3, [r0, #0]
 8017ac0:	2000      	movs	r0, #0
 8017ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ac6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8017bac <_strtol_l.constprop.0+0x100>
 8017aca:	460d      	mov	r5, r1
 8017acc:	462e      	mov	r6, r5
 8017ace:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017ad2:	f814 700c 	ldrb.w	r7, [r4, ip]
 8017ad6:	f017 0708 	ands.w	r7, r7, #8
 8017ada:	d1f7      	bne.n	8017acc <_strtol_l.constprop.0+0x20>
 8017adc:	2c2d      	cmp	r4, #45	; 0x2d
 8017ade:	d132      	bne.n	8017b46 <_strtol_l.constprop.0+0x9a>
 8017ae0:	782c      	ldrb	r4, [r5, #0]
 8017ae2:	2701      	movs	r7, #1
 8017ae4:	1cb5      	adds	r5, r6, #2
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d05b      	beq.n	8017ba2 <_strtol_l.constprop.0+0xf6>
 8017aea:	2b10      	cmp	r3, #16
 8017aec:	d109      	bne.n	8017b02 <_strtol_l.constprop.0+0x56>
 8017aee:	2c30      	cmp	r4, #48	; 0x30
 8017af0:	d107      	bne.n	8017b02 <_strtol_l.constprop.0+0x56>
 8017af2:	782c      	ldrb	r4, [r5, #0]
 8017af4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017af8:	2c58      	cmp	r4, #88	; 0x58
 8017afa:	d14d      	bne.n	8017b98 <_strtol_l.constprop.0+0xec>
 8017afc:	786c      	ldrb	r4, [r5, #1]
 8017afe:	2310      	movs	r3, #16
 8017b00:	3502      	adds	r5, #2
 8017b02:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8017b06:	f108 38ff 	add.w	r8, r8, #4294967295
 8017b0a:	f04f 0c00 	mov.w	ip, #0
 8017b0e:	fbb8 f9f3 	udiv	r9, r8, r3
 8017b12:	4666      	mov	r6, ip
 8017b14:	fb03 8a19 	mls	sl, r3, r9, r8
 8017b18:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8017b1c:	f1be 0f09 	cmp.w	lr, #9
 8017b20:	d816      	bhi.n	8017b50 <_strtol_l.constprop.0+0xa4>
 8017b22:	4674      	mov	r4, lr
 8017b24:	42a3      	cmp	r3, r4
 8017b26:	dd24      	ble.n	8017b72 <_strtol_l.constprop.0+0xc6>
 8017b28:	f1bc 0f00 	cmp.w	ip, #0
 8017b2c:	db1e      	blt.n	8017b6c <_strtol_l.constprop.0+0xc0>
 8017b2e:	45b1      	cmp	r9, r6
 8017b30:	d31c      	bcc.n	8017b6c <_strtol_l.constprop.0+0xc0>
 8017b32:	d101      	bne.n	8017b38 <_strtol_l.constprop.0+0x8c>
 8017b34:	45a2      	cmp	sl, r4
 8017b36:	db19      	blt.n	8017b6c <_strtol_l.constprop.0+0xc0>
 8017b38:	fb06 4603 	mla	r6, r6, r3, r4
 8017b3c:	f04f 0c01 	mov.w	ip, #1
 8017b40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017b44:	e7e8      	b.n	8017b18 <_strtol_l.constprop.0+0x6c>
 8017b46:	2c2b      	cmp	r4, #43	; 0x2b
 8017b48:	bf04      	itt	eq
 8017b4a:	782c      	ldrbeq	r4, [r5, #0]
 8017b4c:	1cb5      	addeq	r5, r6, #2
 8017b4e:	e7ca      	b.n	8017ae6 <_strtol_l.constprop.0+0x3a>
 8017b50:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8017b54:	f1be 0f19 	cmp.w	lr, #25
 8017b58:	d801      	bhi.n	8017b5e <_strtol_l.constprop.0+0xb2>
 8017b5a:	3c37      	subs	r4, #55	; 0x37
 8017b5c:	e7e2      	b.n	8017b24 <_strtol_l.constprop.0+0x78>
 8017b5e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8017b62:	f1be 0f19 	cmp.w	lr, #25
 8017b66:	d804      	bhi.n	8017b72 <_strtol_l.constprop.0+0xc6>
 8017b68:	3c57      	subs	r4, #87	; 0x57
 8017b6a:	e7db      	b.n	8017b24 <_strtol_l.constprop.0+0x78>
 8017b6c:	f04f 3cff 	mov.w	ip, #4294967295
 8017b70:	e7e6      	b.n	8017b40 <_strtol_l.constprop.0+0x94>
 8017b72:	f1bc 0f00 	cmp.w	ip, #0
 8017b76:	da05      	bge.n	8017b84 <_strtol_l.constprop.0+0xd8>
 8017b78:	2322      	movs	r3, #34	; 0x22
 8017b7a:	6003      	str	r3, [r0, #0]
 8017b7c:	4646      	mov	r6, r8
 8017b7e:	b942      	cbnz	r2, 8017b92 <_strtol_l.constprop.0+0xe6>
 8017b80:	4630      	mov	r0, r6
 8017b82:	e79e      	b.n	8017ac2 <_strtol_l.constprop.0+0x16>
 8017b84:	b107      	cbz	r7, 8017b88 <_strtol_l.constprop.0+0xdc>
 8017b86:	4276      	negs	r6, r6
 8017b88:	2a00      	cmp	r2, #0
 8017b8a:	d0f9      	beq.n	8017b80 <_strtol_l.constprop.0+0xd4>
 8017b8c:	f1bc 0f00 	cmp.w	ip, #0
 8017b90:	d000      	beq.n	8017b94 <_strtol_l.constprop.0+0xe8>
 8017b92:	1e69      	subs	r1, r5, #1
 8017b94:	6011      	str	r1, [r2, #0]
 8017b96:	e7f3      	b.n	8017b80 <_strtol_l.constprop.0+0xd4>
 8017b98:	2430      	movs	r4, #48	; 0x30
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d1b1      	bne.n	8017b02 <_strtol_l.constprop.0+0x56>
 8017b9e:	2308      	movs	r3, #8
 8017ba0:	e7af      	b.n	8017b02 <_strtol_l.constprop.0+0x56>
 8017ba2:	2c30      	cmp	r4, #48	; 0x30
 8017ba4:	d0a5      	beq.n	8017af2 <_strtol_l.constprop.0+0x46>
 8017ba6:	230a      	movs	r3, #10
 8017ba8:	e7ab      	b.n	8017b02 <_strtol_l.constprop.0+0x56>
 8017baa:	bf00      	nop
 8017bac:	08018267 	.word	0x08018267

08017bb0 <_strtol_r>:
 8017bb0:	f7ff bf7c 	b.w	8017aac <_strtol_l.constprop.0>

08017bb4 <_strtoul_l.constprop.0>:
 8017bb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017bb8:	4f36      	ldr	r7, [pc, #216]	; (8017c94 <_strtoul_l.constprop.0+0xe0>)
 8017bba:	4686      	mov	lr, r0
 8017bbc:	460d      	mov	r5, r1
 8017bbe:	4628      	mov	r0, r5
 8017bc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017bc4:	5de6      	ldrb	r6, [r4, r7]
 8017bc6:	f016 0608 	ands.w	r6, r6, #8
 8017bca:	d1f8      	bne.n	8017bbe <_strtoul_l.constprop.0+0xa>
 8017bcc:	2c2d      	cmp	r4, #45	; 0x2d
 8017bce:	d12f      	bne.n	8017c30 <_strtoul_l.constprop.0+0x7c>
 8017bd0:	782c      	ldrb	r4, [r5, #0]
 8017bd2:	2601      	movs	r6, #1
 8017bd4:	1c85      	adds	r5, r0, #2
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d057      	beq.n	8017c8a <_strtoul_l.constprop.0+0xd6>
 8017bda:	2b10      	cmp	r3, #16
 8017bdc:	d109      	bne.n	8017bf2 <_strtoul_l.constprop.0+0x3e>
 8017bde:	2c30      	cmp	r4, #48	; 0x30
 8017be0:	d107      	bne.n	8017bf2 <_strtoul_l.constprop.0+0x3e>
 8017be2:	7828      	ldrb	r0, [r5, #0]
 8017be4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8017be8:	2858      	cmp	r0, #88	; 0x58
 8017bea:	d149      	bne.n	8017c80 <_strtoul_l.constprop.0+0xcc>
 8017bec:	786c      	ldrb	r4, [r5, #1]
 8017bee:	2310      	movs	r3, #16
 8017bf0:	3502      	adds	r5, #2
 8017bf2:	f04f 38ff 	mov.w	r8, #4294967295
 8017bf6:	2700      	movs	r7, #0
 8017bf8:	fbb8 f8f3 	udiv	r8, r8, r3
 8017bfc:	fb03 f908 	mul.w	r9, r3, r8
 8017c00:	ea6f 0909 	mvn.w	r9, r9
 8017c04:	4638      	mov	r0, r7
 8017c06:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8017c0a:	f1bc 0f09 	cmp.w	ip, #9
 8017c0e:	d814      	bhi.n	8017c3a <_strtoul_l.constprop.0+0x86>
 8017c10:	4664      	mov	r4, ip
 8017c12:	42a3      	cmp	r3, r4
 8017c14:	dd22      	ble.n	8017c5c <_strtoul_l.constprop.0+0xa8>
 8017c16:	2f00      	cmp	r7, #0
 8017c18:	db1d      	blt.n	8017c56 <_strtoul_l.constprop.0+0xa2>
 8017c1a:	4580      	cmp	r8, r0
 8017c1c:	d31b      	bcc.n	8017c56 <_strtoul_l.constprop.0+0xa2>
 8017c1e:	d101      	bne.n	8017c24 <_strtoul_l.constprop.0+0x70>
 8017c20:	45a1      	cmp	r9, r4
 8017c22:	db18      	blt.n	8017c56 <_strtoul_l.constprop.0+0xa2>
 8017c24:	fb00 4003 	mla	r0, r0, r3, r4
 8017c28:	2701      	movs	r7, #1
 8017c2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017c2e:	e7ea      	b.n	8017c06 <_strtoul_l.constprop.0+0x52>
 8017c30:	2c2b      	cmp	r4, #43	; 0x2b
 8017c32:	bf04      	itt	eq
 8017c34:	782c      	ldrbeq	r4, [r5, #0]
 8017c36:	1c85      	addeq	r5, r0, #2
 8017c38:	e7cd      	b.n	8017bd6 <_strtoul_l.constprop.0+0x22>
 8017c3a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8017c3e:	f1bc 0f19 	cmp.w	ip, #25
 8017c42:	d801      	bhi.n	8017c48 <_strtoul_l.constprop.0+0x94>
 8017c44:	3c37      	subs	r4, #55	; 0x37
 8017c46:	e7e4      	b.n	8017c12 <_strtoul_l.constprop.0+0x5e>
 8017c48:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8017c4c:	f1bc 0f19 	cmp.w	ip, #25
 8017c50:	d804      	bhi.n	8017c5c <_strtoul_l.constprop.0+0xa8>
 8017c52:	3c57      	subs	r4, #87	; 0x57
 8017c54:	e7dd      	b.n	8017c12 <_strtoul_l.constprop.0+0x5e>
 8017c56:	f04f 37ff 	mov.w	r7, #4294967295
 8017c5a:	e7e6      	b.n	8017c2a <_strtoul_l.constprop.0+0x76>
 8017c5c:	2f00      	cmp	r7, #0
 8017c5e:	da07      	bge.n	8017c70 <_strtoul_l.constprop.0+0xbc>
 8017c60:	2322      	movs	r3, #34	; 0x22
 8017c62:	f8ce 3000 	str.w	r3, [lr]
 8017c66:	f04f 30ff 	mov.w	r0, #4294967295
 8017c6a:	b932      	cbnz	r2, 8017c7a <_strtoul_l.constprop.0+0xc6>
 8017c6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c70:	b106      	cbz	r6, 8017c74 <_strtoul_l.constprop.0+0xc0>
 8017c72:	4240      	negs	r0, r0
 8017c74:	2a00      	cmp	r2, #0
 8017c76:	d0f9      	beq.n	8017c6c <_strtoul_l.constprop.0+0xb8>
 8017c78:	b107      	cbz	r7, 8017c7c <_strtoul_l.constprop.0+0xc8>
 8017c7a:	1e69      	subs	r1, r5, #1
 8017c7c:	6011      	str	r1, [r2, #0]
 8017c7e:	e7f5      	b.n	8017c6c <_strtoul_l.constprop.0+0xb8>
 8017c80:	2430      	movs	r4, #48	; 0x30
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d1b5      	bne.n	8017bf2 <_strtoul_l.constprop.0+0x3e>
 8017c86:	2308      	movs	r3, #8
 8017c88:	e7b3      	b.n	8017bf2 <_strtoul_l.constprop.0+0x3e>
 8017c8a:	2c30      	cmp	r4, #48	; 0x30
 8017c8c:	d0a9      	beq.n	8017be2 <_strtoul_l.constprop.0+0x2e>
 8017c8e:	230a      	movs	r3, #10
 8017c90:	e7af      	b.n	8017bf2 <_strtoul_l.constprop.0+0x3e>
 8017c92:	bf00      	nop
 8017c94:	08018267 	.word	0x08018267

08017c98 <_strtoul_r>:
 8017c98:	f7ff bf8c 	b.w	8017bb4 <_strtoul_l.constprop.0>

08017c9c <__submore>:
 8017c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ca0:	460c      	mov	r4, r1
 8017ca2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017ca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017ca8:	4299      	cmp	r1, r3
 8017caa:	d11d      	bne.n	8017ce8 <__submore+0x4c>
 8017cac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017cb0:	f000 f8b6 	bl	8017e20 <_malloc_r>
 8017cb4:	b918      	cbnz	r0, 8017cbe <__submore+0x22>
 8017cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8017cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017cc2:	63a3      	str	r3, [r4, #56]	; 0x38
 8017cc4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017cc8:	6360      	str	r0, [r4, #52]	; 0x34
 8017cca:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017cce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017cd2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017cd6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017cda:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017cde:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017ce2:	6020      	str	r0, [r4, #0]
 8017ce4:	2000      	movs	r0, #0
 8017ce6:	e7e8      	b.n	8017cba <__submore+0x1e>
 8017ce8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017cea:	0077      	lsls	r7, r6, #1
 8017cec:	463a      	mov	r2, r7
 8017cee:	f000 f90b 	bl	8017f08 <_realloc_r>
 8017cf2:	4605      	mov	r5, r0
 8017cf4:	2800      	cmp	r0, #0
 8017cf6:	d0de      	beq.n	8017cb6 <__submore+0x1a>
 8017cf8:	eb00 0806 	add.w	r8, r0, r6
 8017cfc:	4601      	mov	r1, r0
 8017cfe:	4632      	mov	r2, r6
 8017d00:	4640      	mov	r0, r8
 8017d02:	f7ff f823 	bl	8016d4c <memcpy>
 8017d06:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017d0a:	f8c4 8000 	str.w	r8, [r4]
 8017d0e:	e7e9      	b.n	8017ce4 <__submore+0x48>

08017d10 <__retarget_lock_acquire_recursive>:
 8017d10:	4770      	bx	lr

08017d12 <__retarget_lock_release_recursive>:
 8017d12:	4770      	bx	lr

08017d14 <memmove>:
 8017d14:	4288      	cmp	r0, r1
 8017d16:	b510      	push	{r4, lr}
 8017d18:	eb01 0402 	add.w	r4, r1, r2
 8017d1c:	d902      	bls.n	8017d24 <memmove+0x10>
 8017d1e:	4284      	cmp	r4, r0
 8017d20:	4623      	mov	r3, r4
 8017d22:	d807      	bhi.n	8017d34 <memmove+0x20>
 8017d24:	1e43      	subs	r3, r0, #1
 8017d26:	42a1      	cmp	r1, r4
 8017d28:	d008      	beq.n	8017d3c <memmove+0x28>
 8017d2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017d2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017d32:	e7f8      	b.n	8017d26 <memmove+0x12>
 8017d34:	4402      	add	r2, r0
 8017d36:	4601      	mov	r1, r0
 8017d38:	428a      	cmp	r2, r1
 8017d3a:	d100      	bne.n	8017d3e <memmove+0x2a>
 8017d3c:	bd10      	pop	{r4, pc}
 8017d3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017d42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017d46:	e7f7      	b.n	8017d38 <memmove+0x24>

08017d48 <_free_r>:
 8017d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017d4a:	2900      	cmp	r1, #0
 8017d4c:	d044      	beq.n	8017dd8 <_free_r+0x90>
 8017d4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d52:	9001      	str	r0, [sp, #4]
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	f1a1 0404 	sub.w	r4, r1, #4
 8017d5a:	bfb8      	it	lt
 8017d5c:	18e4      	addlt	r4, r4, r3
 8017d5e:	f000 f913 	bl	8017f88 <__malloc_lock>
 8017d62:	4a1e      	ldr	r2, [pc, #120]	; (8017ddc <_free_r+0x94>)
 8017d64:	9801      	ldr	r0, [sp, #4]
 8017d66:	6813      	ldr	r3, [r2, #0]
 8017d68:	b933      	cbnz	r3, 8017d78 <_free_r+0x30>
 8017d6a:	6063      	str	r3, [r4, #4]
 8017d6c:	6014      	str	r4, [r2, #0]
 8017d6e:	b003      	add	sp, #12
 8017d70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017d74:	f000 b90e 	b.w	8017f94 <__malloc_unlock>
 8017d78:	42a3      	cmp	r3, r4
 8017d7a:	d908      	bls.n	8017d8e <_free_r+0x46>
 8017d7c:	6825      	ldr	r5, [r4, #0]
 8017d7e:	1961      	adds	r1, r4, r5
 8017d80:	428b      	cmp	r3, r1
 8017d82:	bf01      	itttt	eq
 8017d84:	6819      	ldreq	r1, [r3, #0]
 8017d86:	685b      	ldreq	r3, [r3, #4]
 8017d88:	1949      	addeq	r1, r1, r5
 8017d8a:	6021      	streq	r1, [r4, #0]
 8017d8c:	e7ed      	b.n	8017d6a <_free_r+0x22>
 8017d8e:	461a      	mov	r2, r3
 8017d90:	685b      	ldr	r3, [r3, #4]
 8017d92:	b10b      	cbz	r3, 8017d98 <_free_r+0x50>
 8017d94:	42a3      	cmp	r3, r4
 8017d96:	d9fa      	bls.n	8017d8e <_free_r+0x46>
 8017d98:	6811      	ldr	r1, [r2, #0]
 8017d9a:	1855      	adds	r5, r2, r1
 8017d9c:	42a5      	cmp	r5, r4
 8017d9e:	d10b      	bne.n	8017db8 <_free_r+0x70>
 8017da0:	6824      	ldr	r4, [r4, #0]
 8017da2:	4421      	add	r1, r4
 8017da4:	1854      	adds	r4, r2, r1
 8017da6:	42a3      	cmp	r3, r4
 8017da8:	6011      	str	r1, [r2, #0]
 8017daa:	d1e0      	bne.n	8017d6e <_free_r+0x26>
 8017dac:	681c      	ldr	r4, [r3, #0]
 8017dae:	685b      	ldr	r3, [r3, #4]
 8017db0:	6053      	str	r3, [r2, #4]
 8017db2:	4421      	add	r1, r4
 8017db4:	6011      	str	r1, [r2, #0]
 8017db6:	e7da      	b.n	8017d6e <_free_r+0x26>
 8017db8:	d902      	bls.n	8017dc0 <_free_r+0x78>
 8017dba:	230c      	movs	r3, #12
 8017dbc:	6003      	str	r3, [r0, #0]
 8017dbe:	e7d6      	b.n	8017d6e <_free_r+0x26>
 8017dc0:	6825      	ldr	r5, [r4, #0]
 8017dc2:	1961      	adds	r1, r4, r5
 8017dc4:	428b      	cmp	r3, r1
 8017dc6:	bf04      	itt	eq
 8017dc8:	6819      	ldreq	r1, [r3, #0]
 8017dca:	685b      	ldreq	r3, [r3, #4]
 8017dcc:	6063      	str	r3, [r4, #4]
 8017dce:	bf04      	itt	eq
 8017dd0:	1949      	addeq	r1, r1, r5
 8017dd2:	6021      	streq	r1, [r4, #0]
 8017dd4:	6054      	str	r4, [r2, #4]
 8017dd6:	e7ca      	b.n	8017d6e <_free_r+0x26>
 8017dd8:	b003      	add	sp, #12
 8017dda:	bd30      	pop	{r4, r5, pc}
 8017ddc:	240030c8 	.word	0x240030c8

08017de0 <sbrk_aligned>:
 8017de0:	b570      	push	{r4, r5, r6, lr}
 8017de2:	4e0e      	ldr	r6, [pc, #56]	; (8017e1c <sbrk_aligned+0x3c>)
 8017de4:	460c      	mov	r4, r1
 8017de6:	6831      	ldr	r1, [r6, #0]
 8017de8:	4605      	mov	r5, r0
 8017dea:	b911      	cbnz	r1, 8017df2 <sbrk_aligned+0x12>
 8017dec:	f000 f8bc 	bl	8017f68 <_sbrk_r>
 8017df0:	6030      	str	r0, [r6, #0]
 8017df2:	4621      	mov	r1, r4
 8017df4:	4628      	mov	r0, r5
 8017df6:	f000 f8b7 	bl	8017f68 <_sbrk_r>
 8017dfa:	1c43      	adds	r3, r0, #1
 8017dfc:	d00a      	beq.n	8017e14 <sbrk_aligned+0x34>
 8017dfe:	1cc4      	adds	r4, r0, #3
 8017e00:	f024 0403 	bic.w	r4, r4, #3
 8017e04:	42a0      	cmp	r0, r4
 8017e06:	d007      	beq.n	8017e18 <sbrk_aligned+0x38>
 8017e08:	1a21      	subs	r1, r4, r0
 8017e0a:	4628      	mov	r0, r5
 8017e0c:	f000 f8ac 	bl	8017f68 <_sbrk_r>
 8017e10:	3001      	adds	r0, #1
 8017e12:	d101      	bne.n	8017e18 <sbrk_aligned+0x38>
 8017e14:	f04f 34ff 	mov.w	r4, #4294967295
 8017e18:	4620      	mov	r0, r4
 8017e1a:	bd70      	pop	{r4, r5, r6, pc}
 8017e1c:	240030cc 	.word	0x240030cc

08017e20 <_malloc_r>:
 8017e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e24:	1ccd      	adds	r5, r1, #3
 8017e26:	f025 0503 	bic.w	r5, r5, #3
 8017e2a:	3508      	adds	r5, #8
 8017e2c:	2d0c      	cmp	r5, #12
 8017e2e:	bf38      	it	cc
 8017e30:	250c      	movcc	r5, #12
 8017e32:	2d00      	cmp	r5, #0
 8017e34:	4607      	mov	r7, r0
 8017e36:	db01      	blt.n	8017e3c <_malloc_r+0x1c>
 8017e38:	42a9      	cmp	r1, r5
 8017e3a:	d905      	bls.n	8017e48 <_malloc_r+0x28>
 8017e3c:	230c      	movs	r3, #12
 8017e3e:	603b      	str	r3, [r7, #0]
 8017e40:	2600      	movs	r6, #0
 8017e42:	4630      	mov	r0, r6
 8017e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e48:	4e2e      	ldr	r6, [pc, #184]	; (8017f04 <_malloc_r+0xe4>)
 8017e4a:	f000 f89d 	bl	8017f88 <__malloc_lock>
 8017e4e:	6833      	ldr	r3, [r6, #0]
 8017e50:	461c      	mov	r4, r3
 8017e52:	bb34      	cbnz	r4, 8017ea2 <_malloc_r+0x82>
 8017e54:	4629      	mov	r1, r5
 8017e56:	4638      	mov	r0, r7
 8017e58:	f7ff ffc2 	bl	8017de0 <sbrk_aligned>
 8017e5c:	1c43      	adds	r3, r0, #1
 8017e5e:	4604      	mov	r4, r0
 8017e60:	d14d      	bne.n	8017efe <_malloc_r+0xde>
 8017e62:	6834      	ldr	r4, [r6, #0]
 8017e64:	4626      	mov	r6, r4
 8017e66:	2e00      	cmp	r6, #0
 8017e68:	d140      	bne.n	8017eec <_malloc_r+0xcc>
 8017e6a:	6823      	ldr	r3, [r4, #0]
 8017e6c:	4631      	mov	r1, r6
 8017e6e:	4638      	mov	r0, r7
 8017e70:	eb04 0803 	add.w	r8, r4, r3
 8017e74:	f000 f878 	bl	8017f68 <_sbrk_r>
 8017e78:	4580      	cmp	r8, r0
 8017e7a:	d13a      	bne.n	8017ef2 <_malloc_r+0xd2>
 8017e7c:	6821      	ldr	r1, [r4, #0]
 8017e7e:	3503      	adds	r5, #3
 8017e80:	1a6d      	subs	r5, r5, r1
 8017e82:	f025 0503 	bic.w	r5, r5, #3
 8017e86:	3508      	adds	r5, #8
 8017e88:	2d0c      	cmp	r5, #12
 8017e8a:	bf38      	it	cc
 8017e8c:	250c      	movcc	r5, #12
 8017e8e:	4629      	mov	r1, r5
 8017e90:	4638      	mov	r0, r7
 8017e92:	f7ff ffa5 	bl	8017de0 <sbrk_aligned>
 8017e96:	3001      	adds	r0, #1
 8017e98:	d02b      	beq.n	8017ef2 <_malloc_r+0xd2>
 8017e9a:	6823      	ldr	r3, [r4, #0]
 8017e9c:	442b      	add	r3, r5
 8017e9e:	6023      	str	r3, [r4, #0]
 8017ea0:	e00e      	b.n	8017ec0 <_malloc_r+0xa0>
 8017ea2:	6822      	ldr	r2, [r4, #0]
 8017ea4:	1b52      	subs	r2, r2, r5
 8017ea6:	d41e      	bmi.n	8017ee6 <_malloc_r+0xc6>
 8017ea8:	2a0b      	cmp	r2, #11
 8017eaa:	d916      	bls.n	8017eda <_malloc_r+0xba>
 8017eac:	1961      	adds	r1, r4, r5
 8017eae:	42a3      	cmp	r3, r4
 8017eb0:	6025      	str	r5, [r4, #0]
 8017eb2:	bf18      	it	ne
 8017eb4:	6059      	strne	r1, [r3, #4]
 8017eb6:	6863      	ldr	r3, [r4, #4]
 8017eb8:	bf08      	it	eq
 8017eba:	6031      	streq	r1, [r6, #0]
 8017ebc:	5162      	str	r2, [r4, r5]
 8017ebe:	604b      	str	r3, [r1, #4]
 8017ec0:	4638      	mov	r0, r7
 8017ec2:	f104 060b 	add.w	r6, r4, #11
 8017ec6:	f000 f865 	bl	8017f94 <__malloc_unlock>
 8017eca:	f026 0607 	bic.w	r6, r6, #7
 8017ece:	1d23      	adds	r3, r4, #4
 8017ed0:	1af2      	subs	r2, r6, r3
 8017ed2:	d0b6      	beq.n	8017e42 <_malloc_r+0x22>
 8017ed4:	1b9b      	subs	r3, r3, r6
 8017ed6:	50a3      	str	r3, [r4, r2]
 8017ed8:	e7b3      	b.n	8017e42 <_malloc_r+0x22>
 8017eda:	6862      	ldr	r2, [r4, #4]
 8017edc:	42a3      	cmp	r3, r4
 8017ede:	bf0c      	ite	eq
 8017ee0:	6032      	streq	r2, [r6, #0]
 8017ee2:	605a      	strne	r2, [r3, #4]
 8017ee4:	e7ec      	b.n	8017ec0 <_malloc_r+0xa0>
 8017ee6:	4623      	mov	r3, r4
 8017ee8:	6864      	ldr	r4, [r4, #4]
 8017eea:	e7b2      	b.n	8017e52 <_malloc_r+0x32>
 8017eec:	4634      	mov	r4, r6
 8017eee:	6876      	ldr	r6, [r6, #4]
 8017ef0:	e7b9      	b.n	8017e66 <_malloc_r+0x46>
 8017ef2:	230c      	movs	r3, #12
 8017ef4:	603b      	str	r3, [r7, #0]
 8017ef6:	4638      	mov	r0, r7
 8017ef8:	f000 f84c 	bl	8017f94 <__malloc_unlock>
 8017efc:	e7a1      	b.n	8017e42 <_malloc_r+0x22>
 8017efe:	6025      	str	r5, [r4, #0]
 8017f00:	e7de      	b.n	8017ec0 <_malloc_r+0xa0>
 8017f02:	bf00      	nop
 8017f04:	240030c8 	.word	0x240030c8

08017f08 <_realloc_r>:
 8017f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f0c:	4680      	mov	r8, r0
 8017f0e:	4614      	mov	r4, r2
 8017f10:	460e      	mov	r6, r1
 8017f12:	b921      	cbnz	r1, 8017f1e <_realloc_r+0x16>
 8017f14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017f18:	4611      	mov	r1, r2
 8017f1a:	f7ff bf81 	b.w	8017e20 <_malloc_r>
 8017f1e:	b92a      	cbnz	r2, 8017f2c <_realloc_r+0x24>
 8017f20:	f7ff ff12 	bl	8017d48 <_free_r>
 8017f24:	4625      	mov	r5, r4
 8017f26:	4628      	mov	r0, r5
 8017f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f2c:	f000 f838 	bl	8017fa0 <_malloc_usable_size_r>
 8017f30:	4284      	cmp	r4, r0
 8017f32:	4607      	mov	r7, r0
 8017f34:	d802      	bhi.n	8017f3c <_realloc_r+0x34>
 8017f36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017f3a:	d812      	bhi.n	8017f62 <_realloc_r+0x5a>
 8017f3c:	4621      	mov	r1, r4
 8017f3e:	4640      	mov	r0, r8
 8017f40:	f7ff ff6e 	bl	8017e20 <_malloc_r>
 8017f44:	4605      	mov	r5, r0
 8017f46:	2800      	cmp	r0, #0
 8017f48:	d0ed      	beq.n	8017f26 <_realloc_r+0x1e>
 8017f4a:	42bc      	cmp	r4, r7
 8017f4c:	4622      	mov	r2, r4
 8017f4e:	4631      	mov	r1, r6
 8017f50:	bf28      	it	cs
 8017f52:	463a      	movcs	r2, r7
 8017f54:	f7fe fefa 	bl	8016d4c <memcpy>
 8017f58:	4631      	mov	r1, r6
 8017f5a:	4640      	mov	r0, r8
 8017f5c:	f7ff fef4 	bl	8017d48 <_free_r>
 8017f60:	e7e1      	b.n	8017f26 <_realloc_r+0x1e>
 8017f62:	4635      	mov	r5, r6
 8017f64:	e7df      	b.n	8017f26 <_realloc_r+0x1e>
	...

08017f68 <_sbrk_r>:
 8017f68:	b538      	push	{r3, r4, r5, lr}
 8017f6a:	4d06      	ldr	r5, [pc, #24]	; (8017f84 <_sbrk_r+0x1c>)
 8017f6c:	2300      	movs	r3, #0
 8017f6e:	4604      	mov	r4, r0
 8017f70:	4608      	mov	r0, r1
 8017f72:	602b      	str	r3, [r5, #0]
 8017f74:	f7eb fae2 	bl	800353c <_sbrk>
 8017f78:	1c43      	adds	r3, r0, #1
 8017f7a:	d102      	bne.n	8017f82 <_sbrk_r+0x1a>
 8017f7c:	682b      	ldr	r3, [r5, #0]
 8017f7e:	b103      	cbz	r3, 8017f82 <_sbrk_r+0x1a>
 8017f80:	6023      	str	r3, [r4, #0]
 8017f82:	bd38      	pop	{r3, r4, r5, pc}
 8017f84:	240030c0 	.word	0x240030c0

08017f88 <__malloc_lock>:
 8017f88:	4801      	ldr	r0, [pc, #4]	; (8017f90 <__malloc_lock+0x8>)
 8017f8a:	f7ff bec1 	b.w	8017d10 <__retarget_lock_acquire_recursive>
 8017f8e:	bf00      	nop
 8017f90:	240030c4 	.word	0x240030c4

08017f94 <__malloc_unlock>:
 8017f94:	4801      	ldr	r0, [pc, #4]	; (8017f9c <__malloc_unlock+0x8>)
 8017f96:	f7ff bebc 	b.w	8017d12 <__retarget_lock_release_recursive>
 8017f9a:	bf00      	nop
 8017f9c:	240030c4 	.word	0x240030c4

08017fa0 <_malloc_usable_size_r>:
 8017fa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017fa4:	1f18      	subs	r0, r3, #4
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	bfbc      	itt	lt
 8017faa:	580b      	ldrlt	r3, [r1, r0]
 8017fac:	18c0      	addlt	r0, r0, r3
 8017fae:	4770      	bx	lr

08017fb0 <_init>:
 8017fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fb2:	bf00      	nop
 8017fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017fb6:	bc08      	pop	{r3}
 8017fb8:	469e      	mov	lr, r3
 8017fba:	4770      	bx	lr

08017fbc <_fini>:
 8017fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fbe:	bf00      	nop
 8017fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017fc2:	bc08      	pop	{r3}
 8017fc4:	469e      	mov	lr, r3
 8017fc6:	4770      	bx	lr
