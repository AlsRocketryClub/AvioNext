
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fb68  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be4  0801fe38  0801fe38  0002fe38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020a1c  08020a1c  00030a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08020a24  08020a24  00030a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08020a28  08020a28  00030a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002c8  24000000  08020a2c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003368  240002c8  08020cf4  000402c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  24003630  08020cf4  00043630  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000402c8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000402f6  2**0
                  CONTENTS, READONLY
 11 .debug_info   00037d81  00000000  00000000  00040339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000659f  00000000  00000000  000780ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002db0  00000000  00000000  0007e660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000237e  00000000  00000000  00081410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000b5c0  00000000  00000000  0008378e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003f2f2  00000000  00000000  0008ed4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017fe62  00000000  00000000  000ce040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000dc94  00000000  00000000  0024dea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  0025bb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002c8 	.word	0x240002c8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801fe20 	.word	0x0801fe20

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002cc 	.word	0x240002cc
 800030c:	0801fe20 	.word	0x0801fe20

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	; 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9a8 	b.w	8000ac0 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9e08      	ldr	r6, [sp, #32]
 80007fe:	460d      	mov	r5, r1
 8000800:	4604      	mov	r4, r0
 8000802:	460f      	mov	r7, r1
 8000804:	2b00      	cmp	r3, #0
 8000806:	d14a      	bne.n	800089e <__udivmoddi4+0xa6>
 8000808:	428a      	cmp	r2, r1
 800080a:	4694      	mov	ip, r2
 800080c:	d965      	bls.n	80008da <__udivmoddi4+0xe2>
 800080e:	fab2 f382 	clz	r3, r2
 8000812:	b143      	cbz	r3, 8000826 <__udivmoddi4+0x2e>
 8000814:	fa02 fc03 	lsl.w	ip, r2, r3
 8000818:	f1c3 0220 	rsb	r2, r3, #32
 800081c:	409f      	lsls	r7, r3
 800081e:	fa20 f202 	lsr.w	r2, r0, r2
 8000822:	4317      	orrs	r7, r2
 8000824:	409c      	lsls	r4, r3
 8000826:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800082a:	fa1f f58c 	uxth.w	r5, ip
 800082e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000832:	0c22      	lsrs	r2, r4, #16
 8000834:	fb0e 7711 	mls	r7, lr, r1, r7
 8000838:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800083c:	fb01 f005 	mul.w	r0, r1, r5
 8000840:	4290      	cmp	r0, r2
 8000842:	d90a      	bls.n	800085a <__udivmoddi4+0x62>
 8000844:	eb1c 0202 	adds.w	r2, ip, r2
 8000848:	f101 37ff 	add.w	r7, r1, #4294967295
 800084c:	f080 811c 	bcs.w	8000a88 <__udivmoddi4+0x290>
 8000850:	4290      	cmp	r0, r2
 8000852:	f240 8119 	bls.w	8000a88 <__udivmoddi4+0x290>
 8000856:	3902      	subs	r1, #2
 8000858:	4462      	add	r2, ip
 800085a:	1a12      	subs	r2, r2, r0
 800085c:	b2a4      	uxth	r4, r4
 800085e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000862:	fb0e 2210 	mls	r2, lr, r0, r2
 8000866:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800086a:	fb00 f505 	mul.w	r5, r0, r5
 800086e:	42a5      	cmp	r5, r4
 8000870:	d90a      	bls.n	8000888 <__udivmoddi4+0x90>
 8000872:	eb1c 0404 	adds.w	r4, ip, r4
 8000876:	f100 32ff 	add.w	r2, r0, #4294967295
 800087a:	f080 8107 	bcs.w	8000a8c <__udivmoddi4+0x294>
 800087e:	42a5      	cmp	r5, r4
 8000880:	f240 8104 	bls.w	8000a8c <__udivmoddi4+0x294>
 8000884:	4464      	add	r4, ip
 8000886:	3802      	subs	r0, #2
 8000888:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800088c:	1b64      	subs	r4, r4, r5
 800088e:	2100      	movs	r1, #0
 8000890:	b11e      	cbz	r6, 800089a <__udivmoddi4+0xa2>
 8000892:	40dc      	lsrs	r4, r3
 8000894:	2300      	movs	r3, #0
 8000896:	e9c6 4300 	strd	r4, r3, [r6]
 800089a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089e:	428b      	cmp	r3, r1
 80008a0:	d908      	bls.n	80008b4 <__udivmoddi4+0xbc>
 80008a2:	2e00      	cmp	r6, #0
 80008a4:	f000 80ed 	beq.w	8000a82 <__udivmoddi4+0x28a>
 80008a8:	2100      	movs	r1, #0
 80008aa:	e9c6 0500 	strd	r0, r5, [r6]
 80008ae:	4608      	mov	r0, r1
 80008b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b4:	fab3 f183 	clz	r1, r3
 80008b8:	2900      	cmp	r1, #0
 80008ba:	d149      	bne.n	8000950 <__udivmoddi4+0x158>
 80008bc:	42ab      	cmp	r3, r5
 80008be:	d302      	bcc.n	80008c6 <__udivmoddi4+0xce>
 80008c0:	4282      	cmp	r2, r0
 80008c2:	f200 80f8 	bhi.w	8000ab6 <__udivmoddi4+0x2be>
 80008c6:	1a84      	subs	r4, r0, r2
 80008c8:	eb65 0203 	sbc.w	r2, r5, r3
 80008cc:	2001      	movs	r0, #1
 80008ce:	4617      	mov	r7, r2
 80008d0:	2e00      	cmp	r6, #0
 80008d2:	d0e2      	beq.n	800089a <__udivmoddi4+0xa2>
 80008d4:	e9c6 4700 	strd	r4, r7, [r6]
 80008d8:	e7df      	b.n	800089a <__udivmoddi4+0xa2>
 80008da:	b902      	cbnz	r2, 80008de <__udivmoddi4+0xe6>
 80008dc:	deff      	udf	#255	; 0xff
 80008de:	fab2 f382 	clz	r3, r2
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	f040 8090 	bne.w	8000a08 <__udivmoddi4+0x210>
 80008e8:	1a8a      	subs	r2, r1, r2
 80008ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ee:	fa1f fe8c 	uxth.w	lr, ip
 80008f2:	2101      	movs	r1, #1
 80008f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008f8:	fb07 2015 	mls	r0, r7, r5, r2
 80008fc:	0c22      	lsrs	r2, r4, #16
 80008fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000902:	fb0e f005 	mul.w	r0, lr, r5
 8000906:	4290      	cmp	r0, r2
 8000908:	d908      	bls.n	800091c <__udivmoddi4+0x124>
 800090a:	eb1c 0202 	adds.w	r2, ip, r2
 800090e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000912:	d202      	bcs.n	800091a <__udivmoddi4+0x122>
 8000914:	4290      	cmp	r0, r2
 8000916:	f200 80cb 	bhi.w	8000ab0 <__udivmoddi4+0x2b8>
 800091a:	4645      	mov	r5, r8
 800091c:	1a12      	subs	r2, r2, r0
 800091e:	b2a4      	uxth	r4, r4
 8000920:	fbb2 f0f7 	udiv	r0, r2, r7
 8000924:	fb07 2210 	mls	r2, r7, r0, r2
 8000928:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800092c:	fb0e fe00 	mul.w	lr, lr, r0
 8000930:	45a6      	cmp	lr, r4
 8000932:	d908      	bls.n	8000946 <__udivmoddi4+0x14e>
 8000934:	eb1c 0404 	adds.w	r4, ip, r4
 8000938:	f100 32ff 	add.w	r2, r0, #4294967295
 800093c:	d202      	bcs.n	8000944 <__udivmoddi4+0x14c>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f200 80bb 	bhi.w	8000aba <__udivmoddi4+0x2c2>
 8000944:	4610      	mov	r0, r2
 8000946:	eba4 040e 	sub.w	r4, r4, lr
 800094a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800094e:	e79f      	b.n	8000890 <__udivmoddi4+0x98>
 8000950:	f1c1 0720 	rsb	r7, r1, #32
 8000954:	408b      	lsls	r3, r1
 8000956:	fa22 fc07 	lsr.w	ip, r2, r7
 800095a:	ea4c 0c03 	orr.w	ip, ip, r3
 800095e:	fa05 f401 	lsl.w	r4, r5, r1
 8000962:	fa20 f307 	lsr.w	r3, r0, r7
 8000966:	40fd      	lsrs	r5, r7
 8000968:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800096c:	4323      	orrs	r3, r4
 800096e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000972:	fa1f fe8c 	uxth.w	lr, ip
 8000976:	fb09 5518 	mls	r5, r9, r8, r5
 800097a:	0c1c      	lsrs	r4, r3, #16
 800097c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000980:	fb08 f50e 	mul.w	r5, r8, lr
 8000984:	42a5      	cmp	r5, r4
 8000986:	fa02 f201 	lsl.w	r2, r2, r1
 800098a:	fa00 f001 	lsl.w	r0, r0, r1
 800098e:	d90b      	bls.n	80009a8 <__udivmoddi4+0x1b0>
 8000990:	eb1c 0404 	adds.w	r4, ip, r4
 8000994:	f108 3aff 	add.w	sl, r8, #4294967295
 8000998:	f080 8088 	bcs.w	8000aac <__udivmoddi4+0x2b4>
 800099c:	42a5      	cmp	r5, r4
 800099e:	f240 8085 	bls.w	8000aac <__udivmoddi4+0x2b4>
 80009a2:	f1a8 0802 	sub.w	r8, r8, #2
 80009a6:	4464      	add	r4, ip
 80009a8:	1b64      	subs	r4, r4, r5
 80009aa:	b29d      	uxth	r5, r3
 80009ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80009b0:	fb09 4413 	mls	r4, r9, r3, r4
 80009b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80009bc:	45a6      	cmp	lr, r4
 80009be:	d908      	bls.n	80009d2 <__udivmoddi4+0x1da>
 80009c0:	eb1c 0404 	adds.w	r4, ip, r4
 80009c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80009c8:	d26c      	bcs.n	8000aa4 <__udivmoddi4+0x2ac>
 80009ca:	45a6      	cmp	lr, r4
 80009cc:	d96a      	bls.n	8000aa4 <__udivmoddi4+0x2ac>
 80009ce:	3b02      	subs	r3, #2
 80009d0:	4464      	add	r4, ip
 80009d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009d6:	fba3 9502 	umull	r9, r5, r3, r2
 80009da:	eba4 040e 	sub.w	r4, r4, lr
 80009de:	42ac      	cmp	r4, r5
 80009e0:	46c8      	mov	r8, r9
 80009e2:	46ae      	mov	lr, r5
 80009e4:	d356      	bcc.n	8000a94 <__udivmoddi4+0x29c>
 80009e6:	d053      	beq.n	8000a90 <__udivmoddi4+0x298>
 80009e8:	b156      	cbz	r6, 8000a00 <__udivmoddi4+0x208>
 80009ea:	ebb0 0208 	subs.w	r2, r0, r8
 80009ee:	eb64 040e 	sbc.w	r4, r4, lr
 80009f2:	fa04 f707 	lsl.w	r7, r4, r7
 80009f6:	40ca      	lsrs	r2, r1
 80009f8:	40cc      	lsrs	r4, r1
 80009fa:	4317      	orrs	r7, r2
 80009fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000a00:	4618      	mov	r0, r3
 8000a02:	2100      	movs	r1, #0
 8000a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a08:	f1c3 0120 	rsb	r1, r3, #32
 8000a0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a10:	fa20 f201 	lsr.w	r2, r0, r1
 8000a14:	fa25 f101 	lsr.w	r1, r5, r1
 8000a18:	409d      	lsls	r5, r3
 8000a1a:	432a      	orrs	r2, r5
 8000a1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a20:	fa1f fe8c 	uxth.w	lr, ip
 8000a24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a28:	fb07 1510 	mls	r5, r7, r0, r1
 8000a2c:	0c11      	lsrs	r1, r2, #16
 8000a2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a32:	fb00 f50e 	mul.w	r5, r0, lr
 8000a36:	428d      	cmp	r5, r1
 8000a38:	fa04 f403 	lsl.w	r4, r4, r3
 8000a3c:	d908      	bls.n	8000a50 <__udivmoddi4+0x258>
 8000a3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a46:	d22f      	bcs.n	8000aa8 <__udivmoddi4+0x2b0>
 8000a48:	428d      	cmp	r5, r1
 8000a4a:	d92d      	bls.n	8000aa8 <__udivmoddi4+0x2b0>
 8000a4c:	3802      	subs	r0, #2
 8000a4e:	4461      	add	r1, ip
 8000a50:	1b49      	subs	r1, r1, r5
 8000a52:	b292      	uxth	r2, r2
 8000a54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a58:	fb07 1115 	mls	r1, r7, r5, r1
 8000a5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a60:	fb05 f10e 	mul.w	r1, r5, lr
 8000a64:	4291      	cmp	r1, r2
 8000a66:	d908      	bls.n	8000a7a <__udivmoddi4+0x282>
 8000a68:	eb1c 0202 	adds.w	r2, ip, r2
 8000a6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a70:	d216      	bcs.n	8000aa0 <__udivmoddi4+0x2a8>
 8000a72:	4291      	cmp	r1, r2
 8000a74:	d914      	bls.n	8000aa0 <__udivmoddi4+0x2a8>
 8000a76:	3d02      	subs	r5, #2
 8000a78:	4462      	add	r2, ip
 8000a7a:	1a52      	subs	r2, r2, r1
 8000a7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a80:	e738      	b.n	80008f4 <__udivmoddi4+0xfc>
 8000a82:	4631      	mov	r1, r6
 8000a84:	4630      	mov	r0, r6
 8000a86:	e708      	b.n	800089a <__udivmoddi4+0xa2>
 8000a88:	4639      	mov	r1, r7
 8000a8a:	e6e6      	b.n	800085a <__udivmoddi4+0x62>
 8000a8c:	4610      	mov	r0, r2
 8000a8e:	e6fb      	b.n	8000888 <__udivmoddi4+0x90>
 8000a90:	4548      	cmp	r0, r9
 8000a92:	d2a9      	bcs.n	80009e8 <__udivmoddi4+0x1f0>
 8000a94:	ebb9 0802 	subs.w	r8, r9, r2
 8000a98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	e7a3      	b.n	80009e8 <__udivmoddi4+0x1f0>
 8000aa0:	4645      	mov	r5, r8
 8000aa2:	e7ea      	b.n	8000a7a <__udivmoddi4+0x282>
 8000aa4:	462b      	mov	r3, r5
 8000aa6:	e794      	b.n	80009d2 <__udivmoddi4+0x1da>
 8000aa8:	4640      	mov	r0, r8
 8000aaa:	e7d1      	b.n	8000a50 <__udivmoddi4+0x258>
 8000aac:	46d0      	mov	r8, sl
 8000aae:	e77b      	b.n	80009a8 <__udivmoddi4+0x1b0>
 8000ab0:	3d02      	subs	r5, #2
 8000ab2:	4462      	add	r2, ip
 8000ab4:	e732      	b.n	800091c <__udivmoddi4+0x124>
 8000ab6:	4608      	mov	r0, r1
 8000ab8:	e70a      	b.n	80008d0 <__udivmoddi4+0xd8>
 8000aba:	4464      	add	r4, ip
 8000abc:	3802      	subs	r0, #2
 8000abe:	e742      	b.n	8000946 <__udivmoddi4+0x14e>

08000ac0 <__aeabi_idiv0>:
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <setServo>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;

void setServo(int servoNum, float angle) {
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal = (int) (3000 + (4000 * (angle / 100)));
 8000ad0:	ed97 7a00 	vldr	s14, [r7]
 8000ad4:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000b44 <setServo+0x80>
 8000ad8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000adc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000b48 <setServo+0x84>
 8000ae0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ae4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000b4c <setServo+0x88>
 8000ae8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000aec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000af0:	ee17 3a90 	vmov	r3, s15
 8000af4:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	3b01      	subs	r3, #1
 8000afa:	2b03      	cmp	r3, #3
 8000afc:	d81a      	bhi.n	8000b34 <setServo+0x70>
 8000afe:	a201      	add	r2, pc, #4	; (adr r2, 8000b04 <setServo+0x40>)
 8000b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b04:	08000b15 	.word	0x08000b15
 8000b08:	08000b1d 	.word	0x08000b1d
 8000b0c:	08000b25 	.word	0x08000b25
 8000b10:	08000b2d 	.word	0x08000b2d
	case 1:
		TIM4->CCR4 = timerVal;
 8000b14:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <setServo+0x8c>)
 8000b16:	89fb      	ldrh	r3, [r7, #14]
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000b1a:	e00c      	b.n	8000b36 <setServo+0x72>
	case 2:
		TIM4->CCR3 = timerVal;
 8000b1c:	4a0c      	ldr	r2, [pc, #48]	; (8000b50 <setServo+0x8c>)
 8000b1e:	89fb      	ldrh	r3, [r7, #14]
 8000b20:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000b22:	e008      	b.n	8000b36 <setServo+0x72>
	case 3:
		TIM4->CCR2 = timerVal;
 8000b24:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <setServo+0x8c>)
 8000b26:	89fb      	ldrh	r3, [r7, #14]
 8000b28:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000b2a:	e004      	b.n	8000b36 <setServo+0x72>
	case 4:
		TIM4->CCR1 = timerVal;
 8000b2c:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <setServo+0x8c>)
 8000b2e:	89fb      	ldrh	r3, [r7, #14]
 8000b30:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 8000b32:	e000      	b.n	8000b36 <setServo+0x72>

	default:
		break;
 8000b34:	bf00      	nop
	}
}
 8000b36:	bf00      	nop
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	42c80000 	.word	0x42c80000
 8000b48:	457a0000 	.word	0x457a0000
 8000b4c:	453b8000 	.word	0x453b8000
 8000b50:	40000800 	.word	0x40000800

08000b54 <setLEDs>:

void setLEDs(void) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08e      	sub	sp, #56	; 0x38
 8000b58:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8000b5e:	e181      	b.n	8000e64 <setLEDs+0x310>
			i++) {
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 8000b60:	4aa1      	ldr	r2, [pc, #644]	; (8000de8 <setLEDs+0x294>)
 8000b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b68:	2b03      	cmp	r3, #3
 8000b6a:	f200 8177 	bhi.w	8000e5c <setLEDs+0x308>
 8000b6e:	a201      	add	r2, pc, #4	; (adr r2, 8000b74 <setLEDs+0x20>)
 8000b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b74:	08000b85 	.word	0x08000b85
 8000b78:	08000c35 	.word	0x08000c35
 8000b7c:	08000ce5 	.word	0x08000ce5
 8000b80:	08000d95 	.word	0x08000d95
		case 0:
			for (int j = 0; j < 3; j++) {
 8000b84:	2300      	movs	r3, #0
 8000b86:	633b      	str	r3, [r7, #48]	; 0x30
 8000b88:	e042      	b.n	8000c10 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b8e:	e039      	b.n	8000c04 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b90:	4996      	ldr	r1, [pc, #600]	; (8000dec <setLEDs+0x298>)
 8000b92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b94:	4613      	mov	r3, r2
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	4413      	add	r3, r2
 8000b9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b9c:	4413      	add	r3, r2
 8000b9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ba2:	2180      	movs	r1, #128	; 0x80
 8000ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ba6:	fa41 f202 	asr.w	r2, r1, r2
 8000baa:	4013      	ands	r3, r2
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d013      	beq.n	8000bd8 <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bb2:	00da      	lsls	r2, r3, #3
 8000bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bb6:	18d1      	adds	r1, r2, r3
 8000bb8:	4a8b      	ldr	r2, [pc, #556]	; (8000de8 <setLEDs+0x294>)
 8000bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	4413      	add	r3, r2
 8000bc0:	685a      	ldr	r2, [r3, #4]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	4413      	add	r3, r2
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	440b      	add	r3, r1
								+ 8] = 60;
 8000bcc:	3308      	adds	r3, #8
 8000bce:	4a88      	ldr	r2, [pc, #544]	; (8000df0 <setLEDs+0x29c>)
 8000bd0:	213c      	movs	r1, #60	; 0x3c
 8000bd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000bd6:	e012      	b.n	8000bfe <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bda:	00da      	lsls	r2, r3, #3
 8000bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bde:	18d1      	adds	r1, r2, r3
 8000be0:	4a81      	ldr	r2, [pc, #516]	; (8000de8 <setLEDs+0x294>)
 8000be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	4413      	add	r3, r2
 8000be8:	685a      	ldr	r2, [r3, #4]
 8000bea:	4613      	mov	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	4413      	add	r3, r2
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	440b      	add	r3, r1
								+ 8] = 30;
 8000bf4:	3308      	adds	r3, #8
 8000bf6:	4a7e      	ldr	r2, [pc, #504]	; (8000df0 <setLEDs+0x29c>)
 8000bf8:	211e      	movs	r1, #30
 8000bfa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c00:	3301      	adds	r3, #1
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c06:	2b07      	cmp	r3, #7
 8000c08:	ddc2      	ble.n	8000b90 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	633b      	str	r3, [r7, #48]	; 0x30
 8000c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	ddb9      	ble.n	8000b8a <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 8000c16:	2380      	movs	r3, #128	; 0x80
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c1a:	e007      	b.n	8000c2c <setLEDs+0xd8>
					i++) {
				LED_PWM_Data_0[i] = 0;
 8000c1c:	4a74      	ldr	r2, [pc, #464]	; (8000df0 <setLEDs+0x29c>)
 8000c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c20:	2100      	movs	r1, #0
 8000c22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c28:	3301      	adds	r3, #1
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 8000c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c2e:	2bb1      	cmp	r3, #177	; 0xb1
 8000c30:	ddf4      	ble.n	8000c1c <setLEDs+0xc8>
			}
			break;
 8000c32:	e114      	b.n	8000e5e <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
 8000c38:	e042      	b.n	8000cc0 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
 8000c3e:	e039      	b.n	8000cb4 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000c40:	496a      	ldr	r1, [pc, #424]	; (8000dec <setLEDs+0x298>)
 8000c42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c44:	4613      	mov	r3, r2
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	4413      	add	r3, r2
 8000c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c4c:	4413      	add	r3, r2
 8000c4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c52:	2180      	movs	r1, #128	; 0x80
 8000c54:	6a3a      	ldr	r2, [r7, #32]
 8000c56:	fa41 f202 	asr.w	r2, r1, r2
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d013      	beq.n	8000c88 <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	00da      	lsls	r2, r3, #3
 8000c64:	6a3b      	ldr	r3, [r7, #32]
 8000c66:	18d1      	adds	r1, r2, r3
 8000c68:	4a5f      	ldr	r2, [pc, #380]	; (8000de8 <setLEDs+0x294>)
 8000c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	4413      	add	r3, r2
 8000c70:	685a      	ldr	r2, [r3, #4]
 8000c72:	4613      	mov	r3, r2
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	4413      	add	r3, r2
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	440b      	add	r3, r1
								+ 8] = 60;
 8000c7c:	3308      	adds	r3, #8
 8000c7e:	4a5d      	ldr	r2, [pc, #372]	; (8000df4 <setLEDs+0x2a0>)
 8000c80:	213c      	movs	r1, #60	; 0x3c
 8000c82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c86:	e012      	b.n	8000cae <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8a:	00da      	lsls	r2, r3, #3
 8000c8c:	6a3b      	ldr	r3, [r7, #32]
 8000c8e:	18d1      	adds	r1, r2, r3
 8000c90:	4a55      	ldr	r2, [pc, #340]	; (8000de8 <setLEDs+0x294>)
 8000c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	4413      	add	r3, r2
 8000c98:	685a      	ldr	r2, [r3, #4]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	4413      	add	r3, r2
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	440b      	add	r3, r1
								+ 8] = 30;
 8000ca4:	3308      	adds	r3, #8
 8000ca6:	4a53      	ldr	r2, [pc, #332]	; (8000df4 <setLEDs+0x2a0>)
 8000ca8:	211e      	movs	r1, #30
 8000caa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000cae:	6a3b      	ldr	r3, [r7, #32]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	623b      	str	r3, [r7, #32]
 8000cb4:	6a3b      	ldr	r3, [r7, #32]
 8000cb6:	2b07      	cmp	r3, #7
 8000cb8:	ddc2      	ble.n	8000c40 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	ddb9      	ble.n	8000c3a <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 8000cc6:	2380      	movs	r3, #128	; 0x80
 8000cc8:	61fb      	str	r3, [r7, #28]
 8000cca:	e007      	b.n	8000cdc <setLEDs+0x188>
					i++) {
				LED_PWM_Data_1[i] = 0;
 8000ccc:	4a49      	ldr	r2, [pc, #292]	; (8000df4 <setLEDs+0x2a0>)
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	61fb      	str	r3, [r7, #28]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	2bb1      	cmp	r3, #177	; 0xb1
 8000ce0:	ddf4      	ble.n	8000ccc <setLEDs+0x178>
			}
			break;
 8000ce2:	e0bc      	b.n	8000e5e <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61bb      	str	r3, [r7, #24]
 8000ce8:	e042      	b.n	8000d70 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	e039      	b.n	8000d64 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000cf0:	493e      	ldr	r1, [pc, #248]	; (8000dec <setLEDs+0x298>)
 8000cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	4413      	add	r3, r2
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d02:	2180      	movs	r1, #128	; 0x80
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	fa41 f202 	asr.w	r2, r1, r2
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d013      	beq.n	8000d38 <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	00da      	lsls	r2, r3, #3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	18d1      	adds	r1, r2, r3
 8000d18:	4a33      	ldr	r2, [pc, #204]	; (8000de8 <setLEDs+0x294>)
 8000d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	4413      	add	r3, r2
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	4613      	mov	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	440b      	add	r3, r1
								+ 8] = 60;
 8000d2c:	3308      	adds	r3, #8
 8000d2e:	4a32      	ldr	r2, [pc, #200]	; (8000df8 <setLEDs+0x2a4>)
 8000d30:	213c      	movs	r1, #60	; 0x3c
 8000d32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000d36:	e012      	b.n	8000d5e <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	00da      	lsls	r2, r3, #3
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	18d1      	adds	r1, r2, r3
 8000d40:	4a29      	ldr	r2, [pc, #164]	; (8000de8 <setLEDs+0x294>)
 8000d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	4413      	add	r3, r2
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	4413      	add	r3, r2
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	440b      	add	r3, r1
								+ 8] = 30;
 8000d54:	3308      	adds	r3, #8
 8000d56:	4a28      	ldr	r2, [pc, #160]	; (8000df8 <setLEDs+0x2a4>)
 8000d58:	211e      	movs	r1, #30
 8000d5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3301      	adds	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	2b07      	cmp	r3, #7
 8000d68:	ddc2      	ble.n	8000cf0 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	61bb      	str	r3, [r7, #24]
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	ddb9      	ble.n	8000cea <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 8000d76:	2338      	movs	r3, #56	; 0x38
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	e007      	b.n	8000d8c <setLEDs+0x238>
					i++) {
				LED_PWM_Data_2[i] = 0;
 8000d7c:	4a1e      	ldr	r2, [pc, #120]	; (8000df8 <setLEDs+0x2a4>)
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	2100      	movs	r1, #0
 8000d82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	613b      	str	r3, [r7, #16]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	2b69      	cmp	r3, #105	; 0x69
 8000d90:	ddf4      	ble.n	8000d7c <setLEDs+0x228>
			}
			break;
 8000d92:	e064      	b.n	8000e5e <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	e04e      	b.n	8000e38 <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	e045      	b.n	8000e2c <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000da0:	4912      	ldr	r1, [pc, #72]	; (8000dec <setLEDs+0x298>)
 8000da2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000da4:	4613      	mov	r3, r2
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	4413      	add	r3, r2
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	4413      	add	r3, r2
 8000dae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000db2:	2180      	movs	r1, #128	; 0x80
 8000db4:	68ba      	ldr	r2, [r7, #8]
 8000db6:	fa41 f202 	asr.w	r2, r1, r2
 8000dba:	4013      	ands	r3, r2
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d01f      	beq.n	8000e00 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	00da      	lsls	r2, r3, #3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	18d1      	adds	r1, r2, r3
 8000dc8:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <setLEDs+0x294>)
 8000dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	4413      	add	r3, r2
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	4413      	add	r3, r2
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	440b      	add	r3, r1
								+ 8] = 60;
 8000ddc:	3308      	adds	r3, #8
 8000dde:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <setLEDs+0x2a8>)
 8000de0:	213c      	movs	r1, #60	; 0x3c
 8000de2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000de6:	e01e      	b.n	8000e26 <setLEDs+0x2d2>
 8000de8:	080200d0 	.word	0x080200d0
 8000dec:	24000bc4 	.word	0x24000bc4
 8000df0:	240002e4 	.word	0x240002e4
 8000df4:	240005ac 	.word	0x240005ac
 8000df8:	24000874 	.word	0x24000874
 8000dfc:	24000a1c 	.word	0x24000a1c
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	00da      	lsls	r2, r3, #3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	18d1      	adds	r1, r2, r3
 8000e08:	4a26      	ldr	r2, [pc, #152]	; (8000ea4 <setLEDs+0x350>)
 8000e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	4413      	add	r3, r2
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	4613      	mov	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4413      	add	r3, r2
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	440b      	add	r3, r1
								+ 8] = 30;
 8000e1c:	3308      	adds	r3, #8
 8000e1e:	4a22      	ldr	r2, [pc, #136]	; (8000ea8 <setLEDs+0x354>)
 8000e20:	211e      	movs	r1, #30
 8000e22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	2b07      	cmp	r3, #7
 8000e30:	ddb6      	ble.n	8000da0 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	3301      	adds	r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	ddad      	ble.n	8000d9a <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 8000e3e:	2338      	movs	r3, #56	; 0x38
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	e007      	b.n	8000e54 <setLEDs+0x300>
					i++) {
				LED_PWM_Data_3[i] = 0;
 8000e44:	4a18      	ldr	r2, [pc, #96]	; (8000ea8 <setLEDs+0x354>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3301      	adds	r3, #1
 8000e52:	607b      	str	r3, [r7, #4]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b69      	cmp	r3, #105	; 0x69
 8000e58:	ddf4      	ble.n	8000e44 <setLEDs+0x2f0>
			}
			break;
 8000e5a:	e000      	b.n	8000e5e <setLEDs+0x30a>
		default:
			break;
 8000e5c:	bf00      	nop
			i++) {
 8000e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e60:	3301      	adds	r3, #1
 8000e62:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8000e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e66:	2b0d      	cmp	r3, #13
 8000e68:	f77f ae7a 	ble.w	8000b60 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0,
 8000e6c:	23b2      	movs	r3, #178	; 0xb2
 8000e6e:	4a0f      	ldr	r2, [pc, #60]	; (8000eac <setLEDs+0x358>)
 8000e70:	210c      	movs	r1, #12
 8000e72:	480f      	ldr	r0, [pc, #60]	; (8000eb0 <setLEDs+0x35c>)
 8000e74:	f00f fcf4 	bl	8010860 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1,
 8000e78:	23b2      	movs	r3, #178	; 0xb2
 8000e7a:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <setLEDs+0x360>)
 8000e7c:	2108      	movs	r1, #8
 8000e7e:	480e      	ldr	r0, [pc, #56]	; (8000eb8 <setLEDs+0x364>)
 8000e80:	f00f fcee 	bl	8010860 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2,
 8000e84:	236a      	movs	r3, #106	; 0x6a
 8000e86:	4a0d      	ldr	r2, [pc, #52]	; (8000ebc <setLEDs+0x368>)
 8000e88:	2104      	movs	r1, #4
 8000e8a:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <setLEDs+0x36c>)
 8000e8c:	f00f fce8 	bl	8010860 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3,
 8000e90:	236a      	movs	r3, #106	; 0x6a
 8000e92:	4a05      	ldr	r2, [pc, #20]	; (8000ea8 <setLEDs+0x354>)
 8000e94:	2100      	movs	r1, #0
 8000e96:	480a      	ldr	r0, [pc, #40]	; (8000ec0 <setLEDs+0x36c>)
 8000e98:	f00f fce2 	bl	8010860 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3

}
 8000e9c:	bf00      	nop
 8000e9e:	3738      	adds	r7, #56	; 0x38
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	080200d0 	.word	0x080200d0
 8000ea8:	24000a1c 	.word	0x24000a1c
 8000eac:	240002e4 	.word	0x240002e4
 8000eb0:	24001228 	.word	0x24001228
 8000eb4:	240005ac 	.word	0x240005ac
 8000eb8:	24001144 	.word	0x24001144
 8000ebc:	24000874 	.word	0x24000874
 8000ec0:	24001190 	.word	0x24001190

08000ec4 <LoRA_Read_Register>:
	} else {
		return normalized - LENGTH * 2 / 3;
	}
}

uint8_t LoRA_Read_Register(uint8_t addr) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ed4:	480d      	ldr	r0, [pc, #52]	; (8000f0c <LoRA_Read_Register+0x48>)
 8000ed6:	f008 f8e7 	bl	80090a8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000eda:	1df9      	adds	r1, r7, #7
 8000edc:	2364      	movs	r3, #100	; 0x64
 8000ede:	2201      	movs	r2, #1
 8000ee0:	480b      	ldr	r0, [pc, #44]	; (8000f10 <LoRA_Read_Register+0x4c>)
 8000ee2:	f00e fe7d 	bl	800fbe0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000ee6:	f107 010f 	add.w	r1, r7, #15
 8000eea:	2364      	movs	r3, #100	; 0x64
 8000eec:	2201      	movs	r2, #1
 8000eee:	4808      	ldr	r0, [pc, #32]	; (8000f10 <LoRA_Read_Register+0x4c>)
 8000ef0:	f00f f872 	bl	800ffd8 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000efa:	4804      	ldr	r0, [pc, #16]	; (8000f0c <LoRA_Read_Register+0x48>)
 8000efc:	f008 f8d4 	bl	80090a8 <HAL_GPIO_WritePin>

	return reg_value;
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	58020000 	.word	0x58020000
 8000f10:	240010bc 	.word	0x240010bc

08000f14 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	460a      	mov	r2, r1
 8000f1e:	71fb      	strb	r3, [r7, #7]
 8000f20:	4613      	mov	r3, r2
 8000f22:	71bb      	strb	r3, [r7, #6]
	addr |= (1 << 7);
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f34:	480c      	ldr	r0, [pc, #48]	; (8000f68 <LoRA_Write_Register+0x54>)
 8000f36:	f008 f8b7 	bl	80090a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000f3a:	1df9      	adds	r1, r7, #7
 8000f3c:	2364      	movs	r3, #100	; 0x64
 8000f3e:	2201      	movs	r2, #1
 8000f40:	480a      	ldr	r0, [pc, #40]	; (8000f6c <LoRA_Write_Register+0x58>)
 8000f42:	f00e fe4d 	bl	800fbe0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000f46:	1db9      	adds	r1, r7, #6
 8000f48:	2364      	movs	r3, #100	; 0x64
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4807      	ldr	r0, [pc, #28]	; (8000f6c <LoRA_Write_Register+0x58>)
 8000f4e:	f00e fe47 	bl	800fbe0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f52:	2201      	movs	r2, #1
 8000f54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f58:	4803      	ldr	r0, [pc, #12]	; (8000f68 <LoRA_Write_Register+0x54>)
 8000f5a:	f008 f8a5 	bl	80090a8 <HAL_GPIO_WritePin>

}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	58020000 	.word	0x58020000
 8000f6c:	240010bc 	.word	0x240010bc

08000f70 <LoRA_sleep>:

void LoRA_sleep(void) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000f74:	2180      	movs	r1, #128	; 0x80
 8000f76:	2001      	movs	r0, #1
 8000f78:	f7ff ffcc 	bl	8000f14 <LoRA_Write_Register>
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency) {
 8000f80:	b5b0      	push	{r4, r5, r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t) frequency << 19) / 32000000;
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	17c8      	asrs	r0, r1, #31
 8000f8c:	460a      	mov	r2, r1
 8000f8e:	4603      	mov	r3, r0
 8000f90:	1355      	asrs	r5, r2, #13
 8000f92:	04d4      	lsls	r4, r2, #19
 8000f94:	4a18      	ldr	r2, [pc, #96]	; (8000ff8 <LoRA_set_frequency+0x78>)
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	4629      	mov	r1, r5
 8000f9e:	f7ff fbdb 	bl	8000758 <__aeabi_uldivmod>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t) (frf >> 16));
 8000faa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	0c02      	lsrs	r2, r0, #16
 8000fb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fbc:	0c0b      	lsrs	r3, r1, #16
 8000fbe:	b2d3      	uxtb	r3, r2
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	2006      	movs	r0, #6
 8000fc4:	f7ff ffa6 	bl	8000f14 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t) (frf >> 8));
 8000fc8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	f04f 0300 	mov.w	r3, #0
 8000fd4:	0a02      	lsrs	r2, r0, #8
 8000fd6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000fda:	0a0b      	lsrs	r3, r1, #8
 8000fdc:	b2d3      	uxtb	r3, r2
 8000fde:	4619      	mov	r1, r3
 8000fe0:	2007      	movs	r0, #7
 8000fe2:	f7ff ff97 	bl	8000f14 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t) (frf >> 0));
 8000fe6:	7a3b      	ldrb	r3, [r7, #8]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	2008      	movs	r0, #8
 8000fec:	f7ff ff92 	bl	8000f14 <LoRA_Write_Register>
}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ff8:	01e84800 	.word	0x01e84800

08000ffc <LoRA_setOCP>:

void LoRA_idle() {
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
}

void LoRA_setOCP(uint8_t mA) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
	uint8_t ocpTrim = 27;
 8001006:	231b      	movs	r3, #27
 8001008:	73fb      	strb	r3, [r7, #15]

	if (mA <= 120) {
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2b78      	cmp	r3, #120	; 0x78
 800100e:	d809      	bhi.n	8001024 <LoRA_setOCP+0x28>
		ocpTrim = (mA - 45) / 5;
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	3b2d      	subs	r3, #45	; 0x2d
 8001014:	4a11      	ldr	r2, [pc, #68]	; (800105c <LoRA_setOCP+0x60>)
 8001016:	fb82 1203 	smull	r1, r2, r2, r3
 800101a:	1052      	asrs	r2, r2, #1
 800101c:	17db      	asrs	r3, r3, #31
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	73fb      	strb	r3, [r7, #15]
 8001022:	e00b      	b.n	800103c <LoRA_setOCP+0x40>
	} else if (mA <= 240) {
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	2bf0      	cmp	r3, #240	; 0xf0
 8001028:	d808      	bhi.n	800103c <LoRA_setOCP+0x40>
		ocpTrim = (mA + 30) / 10;
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	331e      	adds	r3, #30
 800102e:	4a0b      	ldr	r2, [pc, #44]	; (800105c <LoRA_setOCP+0x60>)
 8001030:	fb82 1203 	smull	r1, r2, r2, r3
 8001034:	1092      	asrs	r2, r2, #2
 8001036:	17db      	asrs	r3, r3, #31
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	73fb      	strb	r3, [r7, #15]
	}

	LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	f003 031f 	and.w	r3, r3, #31
 8001042:	b2db      	uxtb	r3, r3
 8001044:	f043 0320 	orr.w	r3, r3, #32
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4619      	mov	r1, r3
 800104c:	200b      	movs	r0, #11
 800104e:	f7ff ff61 	bl	8000f14 <LoRA_Write_Register>
}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	66666667 	.word	0x66666667

08001060 <LoRA_setTxPower>:

void LoRA_setTxPower(int level) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	// PA BOOST
	if (level > 17) {
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b11      	cmp	r3, #17
 800106c:	dd0f      	ble.n	800108e <LoRA_setTxPower+0x2e>
		if (level > 20) {
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b14      	cmp	r3, #20
 8001072:	dd01      	ble.n	8001078 <LoRA_setTxPower+0x18>
			level = 20;
 8001074:	2314      	movs	r3, #20
 8001076:	607b      	str	r3, [r7, #4]
		}

		// subtract 3 from level, so 18 - 20 maps to 15 - 17
		level -= 3;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b03      	subs	r3, #3
 800107c:	607b      	str	r3, [r7, #4]

		// High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
		LoRA_Write_Register(REG_PA_DAC, 0x87);
 800107e:	2187      	movs	r1, #135	; 0x87
 8001080:	204d      	movs	r0, #77	; 0x4d
 8001082:	f7ff ff47 	bl	8000f14 <LoRA_Write_Register>
		LoRA_setOCP(140);
 8001086:	208c      	movs	r0, #140	; 0x8c
 8001088:	f7ff ffb8 	bl	8000ffc <LoRA_setOCP>
 800108c:	e00b      	b.n	80010a6 <LoRA_setTxPower+0x46>
	} else {
		if (level < 2) {
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b01      	cmp	r3, #1
 8001092:	dc01      	bgt.n	8001098 <LoRA_setTxPower+0x38>
			level = 2;
 8001094:	2302      	movs	r3, #2
 8001096:	607b      	str	r3, [r7, #4]
		}
		//Default value PA_HF/LF or +17dBm
		LoRA_Write_Register(REG_PA_DAC, 0x84);
 8001098:	2184      	movs	r1, #132	; 0x84
 800109a:	204d      	movs	r0, #77	; 0x4d
 800109c:	f7ff ff3a 	bl	8000f14 <LoRA_Write_Register>
		LoRA_setOCP(100);
 80010a0:	2064      	movs	r0, #100	; 0x64
 80010a2:	f7ff ffab 	bl	8000ffc <LoRA_setOCP>
	}

	LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	3b02      	subs	r3, #2
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	b25b      	sxtb	r3, r3
 80010b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	4619      	mov	r1, r3
 80010ba:	2009      	movs	r0, #9
 80010bc:	f7ff ff2a 	bl	8000f14 <LoRA_Write_Register>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode() {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1,
			LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 80010cc:	201d      	movs	r0, #29
 80010ce:	f7ff fef9 	bl	8000ec4 <LoRA_Read_Register>
 80010d2:	4603      	mov	r3, r0
	LoRA_Write_Register(REG_MODEM_CONFIG_1,
 80010d4:	f023 0301 	bic.w	r3, r3, #1
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	4619      	mov	r1, r3
 80010dc:	201d      	movs	r0, #29
 80010de:	f7ff ff19 	bl	8000f14 <LoRA_Write_Register>
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <LoRA_begin>:

void LoRA_begin(long frequency) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2101      	movs	r1, #1
 80010f4:	4818      	ldr	r0, [pc, #96]	; (8001158 <LoRA_begin+0x70>)
 80010f6:	f007 ffd7 	bl	80090a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80010fa:	2201      	movs	r2, #1
 80010fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001100:	4816      	ldr	r0, [pc, #88]	; (800115c <LoRA_begin+0x74>)
 8001102:	f007 ffd1 	bl	80090a8 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8001106:	2042      	movs	r0, #66	; 0x42
 8001108:	f7ff fedc 	bl	8000ec4 <LoRA_Read_Register>
 800110c:	4603      	mov	r3, r0
 800110e:	73fb      	strb	r3, [r7, #15]

	LoRA_sleep();
 8001110:	f7ff ff2e 	bl	8000f70 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8001114:	4812      	ldr	r0, [pc, #72]	; (8001160 <LoRA_begin+0x78>)
 8001116:	f7ff ff33 	bl	8000f80 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 800111a:	2100      	movs	r1, #0
 800111c:	200f      	movs	r0, #15
 800111e:	f7ff fef9 	bl	8000f14 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8001122:	2100      	movs	r1, #0
 8001124:	200e      	movs	r0, #14
 8001126:	f7ff fef5 	bl	8000f14 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 800112a:	200c      	movs	r0, #12
 800112c:	f7ff feca 	bl	8000ec4 <LoRA_Read_Register>
 8001130:	4603      	mov	r3, r0
 8001132:	f043 0303 	orr.w	r3, r3, #3
 8001136:	b2db      	uxtb	r3, r3
 8001138:	4619      	mov	r1, r3
 800113a:	200c      	movs	r0, #12
 800113c:	f7ff feea 	bl	8000f14 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8001140:	2104      	movs	r1, #4
 8001142:	2026      	movs	r0, #38	; 0x26
 8001144:	f7ff fee6 	bl	8000f14 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8001148:	2011      	movs	r0, #17
 800114a:	f7ff ff89 	bl	8001060 <LoRA_setTxPower>

}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	58020c00 	.word	0x58020c00
 800115c:	58020000 	.word	0x58020000
 8001160:	33bca100 	.word	0x33bca100

08001164 <LoRA_beginPacket>:

void LoRA_beginPacket() {
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8001168:	f7ff ffae 	bl	80010c8 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 800116c:	2100      	movs	r1, #0
 800116e:	200d      	movs	r0, #13
 8001170:	f7ff fed0 	bl	8000f14 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8001174:	2100      	movs	r1, #0
 8001176:	2022      	movs	r0, #34	; 0x22
 8001178:	f7ff fecc 	bl	8000f14 <LoRA_Write_Register>
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}

08001180 <LoRA_endPacket>:

void LoRA_endPacket(){
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8001184:	2183      	movs	r1, #131	; 0x83
 8001186:	2001      	movs	r0, #1
 8001188:	f7ff fec4 	bl	8000f14 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 800118c:	bf00      	nop
 800118e:	2012      	movs	r0, #18
 8001190:	f7ff fe98 	bl	8000ec4 <LoRA_Read_Register>
 8001194:	4603      	mov	r3, r0
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0f7      	beq.n	800118e <LoRA_endPacket+0xe>

	}
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 800119e:	2185      	movs	r1, #133	; 0x85
 80011a0:	2001      	movs	r0, #1
 80011a2:	f7ff feb7 	bl	8000f14 <LoRA_Write_Register>

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 80011a6:	2108      	movs	r1, #8
 80011a8:	2012      	movs	r0, #18
 80011aa:	f7ff feb3 	bl	8000f14 <LoRA_Write_Register>

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <LoRA_parsePacket>:


int LoRA_parsePacket(){
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 80011bc:	2012      	movs	r0, #18
 80011be:	f7ff fe81 	bl	8000ec4 <LoRA_Read_Register>
 80011c2:	4603      	mov	r3, r0
 80011c4:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 80011c6:	f7ff ff7f 	bl	80010c8 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	4619      	mov	r1, r3
 80011d0:	2012      	movs	r0, #18
 80011d2:	f7ff fe9f 	bl	8000f14 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d016      	beq.n	800120e <LoRA_parsePacket+0x5c>
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	f003 0320 	and.w	r3, r3, #32
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d111      	bne.n	800120e <LoRA_parsePacket+0x5c>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 80011ea:	2013      	movs	r0, #19
 80011ec:	f7ff fe6a 	bl	8000ec4 <LoRA_Read_Register>
 80011f0:	4603      	mov	r3, r0
 80011f2:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 80011f4:	2010      	movs	r0, #16
 80011f6:	f7ff fe65 	bl	8000ec4 <LoRA_Read_Register>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4619      	mov	r1, r3
 80011fe:	200d      	movs	r0, #13
 8001200:	f7ff fe88 	bl	8000f14 <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001204:	2185      	movs	r1, #133	; 0x85
 8001206:	2001      	movs	r0, #1
 8001208:	f7ff fe84 	bl	8000f14 <LoRA_Write_Register>
 800120c:	e00d      	b.n	800122a <LoRA_parsePacket+0x78>

		//LoRA_idle();
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS)){
 800120e:	2001      	movs	r0, #1
 8001210:	f7ff fe58 	bl	8000ec4 <LoRA_Read_Register>
 8001214:	4603      	mov	r3, r0
 8001216:	2b85      	cmp	r3, #133	; 0x85
 8001218:	d007      	beq.n	800122a <LoRA_parsePacket+0x78>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 800121a:	2100      	movs	r1, #0
 800121c:	200d      	movs	r0, #13
 800121e:	f7ff fe79 	bl	8000f14 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001222:	2185      	movs	r1, #133	; 0x85
 8001224:	2001      	movs	r0, #1
 8001226:	f7ff fe75 	bl	8000f14 <LoRA_Write_Register>
	}
	return packetLenght;
 800122a:	687b      	ldr	r3, [r7, #4]

}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <LoRA_sendPacket>:

void LoRA_sendPacket(char *data) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b0d0      	sub	sp, #320	; 0x140
 8001238:	af00      	add	r7, sp, #0
 800123a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800123e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001242:	6018      	str	r0, [r3, #0]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8001244:	2012      	movs	r0, #18
 8001246:	f7ff fe3d 	bl	8000ec4 <LoRA_Read_Register>
 800124a:	4603      	mov	r3, r0
 800124c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	/*char debug[250];
	sprintf(debug, "here: %d\n", (irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK));
	CDC_Transmit_HS(debug, strlen(debug));
	HAL_Delay(100);*/
	if(!((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0))
 8001250:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001258:	2b00      	cmp	r3, #0
 800125a:	d005      	beq.n	8001268 <LoRA_sendPacket+0x34>
 800125c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001260:	f003 0320 	and.w	r3, r3, #32
 8001264:	2b00      	cmp	r3, #0
 8001266:	d033      	beq.n	80012d0 <LoRA_sendPacket+0x9c>
	{
		//CDC_Transmit_HS("here1\n", strlen("here1\n"));
		LoRA_beginPacket();
 8001268:	f7ff ff7c 	bl	8001164 <LoRA_beginPacket>
    	for(int i = 0; i < strlen(data); i++){
 800126c:	2300      	movs	r3, #0
 800126e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001272:	e011      	b.n	8001298 <LoRA_sendPacket+0x64>
    		LoRA_Write_Register(REG_FIFO, data[i]);
 8001274:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001278:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800127c:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8001280:	6812      	ldr	r2, [r2, #0]
 8001282:	4413      	add	r3, r2
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	4619      	mov	r1, r3
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff fe43 	bl	8000f14 <LoRA_Write_Register>
    	for(int i = 0; i < strlen(data); i++){
 800128e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001292:	3301      	adds	r3, #1
 8001294:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001298:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800129c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80012a0:	6818      	ldr	r0, [r3, #0]
 80012a2:	f7ff f895 	bl	80003d0 <strlen>
 80012a6:	4602      	mov	r2, r0
 80012a8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d8e1      	bhi.n	8001274 <LoRA_sendPacket+0x40>
    	}
    	LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 80012b0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80012b4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80012b8:	6818      	ldr	r0, [r3, #0]
 80012ba:	f7ff f889 	bl	80003d0 <strlen>
 80012be:	4603      	mov	r3, r0
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	4619      	mov	r1, r3
 80012c4:	2022      	movs	r0, #34	; 0x22
 80012c6:	f7ff fe25 	bl	8000f14 <LoRA_Write_Register>
    	LoRA_endPacket();
 80012ca:	f7ff ff59 	bl	8001180 <LoRA_endPacket>
 80012ce:	e003      	b.n	80012d8 <LoRA_sendPacket+0xa4>
	}
	else {
		//CDC_Transmit_HS("here2\n", strlen("here2\n"));
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 80012d0:	2185      	movs	r1, #133	; 0x85
 80012d2:	2001      	movs	r0, #1
 80012d4:	f7ff fe1e 	bl	8000f14 <LoRA_Write_Register>
	}
	char sent[300];
	sprintf(sent, "\nsent: %s\n", data);
 80012d8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80012dc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80012e0:	f107 000c 	add.w	r0, r7, #12
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	490b      	ldr	r1, [pc, #44]	; (8001314 <LoRA_sendPacket+0xe0>)
 80012e8:	f01a fd86 	bl	801bdf8 <siprintf>
	HAL_Delay(100);
 80012ec:	2064      	movs	r0, #100	; 0x64
 80012ee:	f002 ffdd 	bl	80042ac <HAL_Delay>
	CDC_Transmit_HS(sent, strlen(sent));
 80012f2:	f107 030c 	add.w	r3, r7, #12
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f86a 	bl	80003d0 <strlen>
 80012fc:	4602      	mov	r2, r0
 80012fe:	f107 030c 	add.w	r3, r7, #12
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f019 fa21 	bl	801a74c <CDC_Transmit_HS>
}
 800130a:	bf00      	nop
 800130c:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	0801fe38 	.word	0x0801fe38

08001318 <disarm>:
int mount_SD() {
	int status = f_mount(&SDFatFS, (TCHAR const*) SDPath, 0);
	return status;
}

int disarm(char *state) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	2102      	movs	r1, #2
 8001324:	482d      	ldr	r0, [pc, #180]	; (80013dc <disarm+0xc4>)
 8001326:	f007 febf 	bl	80090a8 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);

	HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2102      	movs	r1, #2
 800132e:	482c      	ldr	r0, [pc, #176]	; (80013e0 <disarm+0xc8>)
 8001330:	f007 feba 	bl	80090a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 8001334:	2200      	movs	r2, #0
 8001336:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800133a:	482a      	ldr	r0, [pc, #168]	; (80013e4 <disarm+0xcc>)
 800133c:	f007 feb4 	bl	80090a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 8001340:	2200      	movs	r2, #0
 8001342:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001346:	4827      	ldr	r0, [pc, #156]	; (80013e4 <disarm+0xcc>)
 8001348:	f007 feae 	bl	80090a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001352:	4824      	ldr	r0, [pc, #144]	; (80013e4 <disarm+0xcc>)
 8001354:	f007 fea8 	bl	80090a8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 8001358:	2200      	movs	r2, #0
 800135a:	2102      	movs	r1, #2
 800135c:	4822      	ldr	r0, [pc, #136]	; (80013e8 <disarm+0xd0>)
 800135e:	f007 fea3 	bl	80090a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001368:	4820      	ldr	r0, [pc, #128]	; (80013ec <disarm+0xd4>)
 800136a:	f007 fe9d 	bl	80090a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001374:	481d      	ldr	r0, [pc, #116]	; (80013ec <disarm+0xd4>)
 8001376:	f007 fe97 	bl	80090a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001380:	481a      	ldr	r0, [pc, #104]	; (80013ec <disarm+0xd4>)
 8001382:	f007 fe91 	bl	80090a8 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001386:	210c      	movs	r1, #12
 8001388:	4819      	ldr	r0, [pc, #100]	; (80013f0 <disarm+0xd8>)
 800138a:	f00f f94d 	bl	8010628 <HAL_TIM_PWM_Start>
	setServo(1, 0);
 800138e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80013f4 <disarm+0xdc>
 8001392:	2001      	movs	r0, #1
 8001394:	f7ff fb96 	bl	8000ac4 <setServo>

	LED_Color_Data[7][0] = 255;
 8001398:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <disarm+0xe0>)
 800139a:	22ff      	movs	r2, #255	; 0xff
 800139c:	655a      	str	r2, [r3, #84]	; 0x54
	LED_Color_Data[7][1] = 0;
 800139e:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <disarm+0xe0>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	659a      	str	r2, [r3, #88]	; 0x58
	LED_Color_Data[7][2] = 0;
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <disarm+0xe0>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	65da      	str	r2, [r3, #92]	; 0x5c

	LED_Color_Data[2][0] = 255;
 80013aa:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <disarm+0xe0>)
 80013ac:	22ff      	movs	r2, #255	; 0xff
 80013ae:	619a      	str	r2, [r3, #24]
	LED_Color_Data[2][1] = 0;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <disarm+0xe0>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
	LED_Color_Data[2][2] = 0;
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <disarm+0xe0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
	setLEDs();
 80013bc:	f7ff fbca 	bl	8000b54 <setLEDs>

	strcpy(state, "DISARMED");
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	490e      	ldr	r1, [pc, #56]	; (80013fc <disarm+0xe4>)
 80013c4:	461a      	mov	r2, r3
 80013c6:	460b      	mov	r3, r1
 80013c8:	cb03      	ldmia	r3!, {r0, r1}
 80013ca:	6010      	str	r0, [r2, #0]
 80013cc:	6051      	str	r1, [r2, #4]
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	7213      	strb	r3, [r2, #8]
	return 0;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	58020000 	.word	0x58020000
 80013e0:	58020400 	.word	0x58020400
 80013e4:	58021400 	.word	0x58021400
 80013e8:	58021800 	.word	0x58021800
 80013ec:	58021000 	.word	0x58021000
 80013f0:	240011dc 	.word	0x240011dc
 80013f4:	00000000 	.word	0x00000000
 80013f8:	24000bc4 	.word	0x24000bc4
 80013fc:	0801fe44 	.word	0x0801fe44

08001400 <arm>:

int arm(char *state) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 1);
 8001408:	2201      	movs	r2, #1
 800140a:	2102      	movs	r1, #2
 800140c:	4810      	ldr	r0, [pc, #64]	; (8001450 <arm+0x50>)
 800140e:	f007 fe4b 	bl	80090a8 <HAL_GPIO_WritePin>
//HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 1);

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001412:	210c      	movs	r1, #12
 8001414:	480f      	ldr	r0, [pc, #60]	; (8001454 <arm+0x54>)
 8001416:	f00f f907 	bl	8010628 <HAL_TIM_PWM_Start>
	setServo(1, 100);
 800141a:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001458 <arm+0x58>
 800141e:	2001      	movs	r0, #1
 8001420:	f7ff fb50 	bl	8000ac4 <setServo>

	strcpy(state, "ARMED");
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a0d      	ldr	r2, [pc, #52]	; (800145c <arm+0x5c>)
 8001428:	6810      	ldr	r0, [r2, #0]
 800142a:	6018      	str	r0, [r3, #0]
 800142c:	8892      	ldrh	r2, [r2, #4]
 800142e:	809a      	strh	r2, [r3, #4]
	LED_Color_Data[7][0] = 0;
 8001430:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <arm+0x60>)
 8001432:	2200      	movs	r2, #0
 8001434:	655a      	str	r2, [r3, #84]	; 0x54
	LED_Color_Data[7][1] = 255;
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <arm+0x60>)
 8001438:	22ff      	movs	r2, #255	; 0xff
 800143a:	659a      	str	r2, [r3, #88]	; 0x58
	LED_Color_Data[7][2] = 0;
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <arm+0x60>)
 800143e:	2200      	movs	r2, #0
 8001440:	65da      	str	r2, [r3, #92]	; 0x5c
	setLEDs();
 8001442:	f7ff fb87 	bl	8000b54 <setLEDs>
	return 0;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	58020000 	.word	0x58020000
 8001454:	240011dc 	.word	0x240011dc
 8001458:	42c80000 	.word	0x42c80000
 800145c:	0801fe50 	.word	0x0801fe50
 8001460:	24000bc4 	.word	0x24000bc4

08001464 <recv_packet>:

int recv_packet(char *LoRA_data, int max_length) {
 8001464:	b590      	push	{r4, r7, lr}
 8001466:	b0d1      	sub	sp, #324	; 0x144
 8001468:	af00      	add	r7, sp, #0
 800146a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800146e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001472:	6018      	str	r0, [r3, #0]
 8001474:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001478:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800147c:	6019      	str	r1, [r3, #0]
	int packet_length = LoRA_parsePacket();
 800147e:	f7ff fe98 	bl	80011b2 <LoRA_parsePacket>
 8001482:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	if (max_length - 1 < packet_length) //-1 for the null terminator
 8001486:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800148a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001494:	429a      	cmp	r2, r3
 8001496:	dc01      	bgt.n	800149c <recv_packet+0x38>
			{
		return 0;
 8001498:	2300      	movs	r3, #0
 800149a:	e043      	b.n	8001524 <recv_packet+0xc0>
	}
	if (packet_length) {
 800149c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d03e      	beq.n	8001522 <recv_packet+0xbe>
		for (int i = 0; i < packet_length; i++) {
 80014a4:	2300      	movs	r3, #0
 80014a6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80014aa:	e011      	b.n	80014d0 <recv_packet+0x6c>
			LoRA_data[i] = LoRA_Read_Register(0x00);
 80014ac:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80014b0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80014b4:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	18d4      	adds	r4, r2, r3
 80014bc:	2000      	movs	r0, #0
 80014be:	f7ff fd01 	bl	8000ec4 <LoRA_Read_Register>
 80014c2:	4603      	mov	r3, r0
 80014c4:	7023      	strb	r3, [r4, #0]
		for (int i = 0; i < packet_length; i++) {
 80014c6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80014ca:	3301      	adds	r3, #1
 80014cc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80014d0:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80014d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80014d8:	429a      	cmp	r2, r3
 80014da:	dbe7      	blt.n	80014ac <recv_packet+0x48>
		}
		LoRA_data[packet_length] = '\0';
 80014dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80014e0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80014e4:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80014e8:	6812      	ldr	r2, [r2, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
	    char rec[300];
	    sprintf(rec, "received: %s\n", LoRA_data);
 80014f0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80014f4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014f8:	f107 000c 	add.w	r0, r7, #12
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	490c      	ldr	r1, [pc, #48]	; (8001530 <recv_packet+0xcc>)
 8001500:	f01a fc7a 	bl	801bdf8 <siprintf>
	    CDC_Transmit_HS(rec, strlen(rec));
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	4618      	mov	r0, r3
 800150a:	f7fe ff61 	bl	80003d0 <strlen>
 800150e:	4602      	mov	r2, r0
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	4611      	mov	r1, r2
 8001516:	4618      	mov	r0, r3
 8001518:	f019 f918 	bl	801a74c <CDC_Transmit_HS>
		return packet_length;
 800151c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001520:	e000      	b.n	8001524 <recv_packet+0xc0>
	} else {
		return 0;
 8001522:	2300      	movs	r3, #0
	}
}
 8001524:	4618      	mov	r0, r3
 8001526:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800152a:	46bd      	mov	sp, r7
 800152c:	bd90      	pop	{r4, r7, pc}
 800152e:	bf00      	nop
 8001530:	0801fe58 	.word	0x0801fe58

08001534 <reliable_send_packet>:

void reliable_send_packet(char *LoRA_data) {
 8001534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001538:	b0d3      	sub	sp, #332	; 0x14c
 800153a:	af00      	add	r7, sp, #0
 800153c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001540:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001544:	6018      	str	r0, [r3, #0]
 8001546:	466b      	mov	r3, sp
 8001548:	461e      	mov	r6, r3
	char debug[300];
	sprintf(debug, "sending: %s", LoRA_data);
 800154a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800154e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001552:	f107 000c 	add.w	r0, r7, #12
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4944      	ldr	r1, [pc, #272]	; (800166c <reliable_send_packet+0x138>)
 800155a:	f01a fc4d 	bl	801bdf8 <siprintf>
	CDC_Transmit_HS(debug, strlen(debug));
 800155e:	f107 030c 	add.w	r3, r7, #12
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe ff34 	bl	80003d0 <strlen>
 8001568:	4602      	mov	r2, r0
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f019 f8eb 	bl	801a74c <CDC_Transmit_HS>

	uint16_t length = strlen(LoRA_data) + 1; //+1 for the \0
 8001576:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800157a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	f7fe ff26 	bl	80003d0 <strlen>
 8001584:	4603      	mov	r3, r0
 8001586:	b29b      	uxth	r3, r3
 8001588:	3301      	adds	r3, #1
 800158a:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	char acknowledge[length];
 800158e:	f8b7 1142 	ldrh.w	r1, [r7, #322]	; 0x142
 8001592:	460b      	mov	r3, r1
 8001594:	3b01      	subs	r3, #1
 8001596:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800159a:	b28b      	uxth	r3, r1
 800159c:	2200      	movs	r2, #0
 800159e:	4698      	mov	r8, r3
 80015a0:	4691      	mov	r9, r2
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015b6:	b28b      	uxth	r3, r1
 80015b8:	2200      	movs	r2, #0
 80015ba:	461c      	mov	r4, r3
 80015bc:	4615      	mov	r5, r2
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	f04f 0300 	mov.w	r3, #0
 80015c6:	00eb      	lsls	r3, r5, #3
 80015c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015cc:	00e2      	lsls	r2, r4, #3
 80015ce:	460b      	mov	r3, r1
 80015d0:	3307      	adds	r3, #7
 80015d2:	08db      	lsrs	r3, r3, #3
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	ebad 0d03 	sub.w	sp, sp, r3
 80015da:	466b      	mov	r3, sp
 80015dc:	3300      	adds	r3, #0
 80015de:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint32_t lastTime = HAL_GetTick();
 80015e2:	f002 fe57 	bl	8004294 <HAL_GetTick>
 80015e6:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
	LoRA_sendPacket(LoRA_data);
 80015ea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80015ee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	f7ff fe1e 	bl	8001234 <LoRA_sendPacket>
	while (1) {

		if (recv_packet(acknowledge, length)) {
 80015f8:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 80015fc:	4619      	mov	r1, r3
 80015fe:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8001602:	f7ff ff2f 	bl	8001464 <recv_packet>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d012      	beq.n	8001632 <reliable_send_packet+0xfe>
			//cehck crc
			if (strcmp(acknowledge, LoRA_data) != 0) {
 800160c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001610:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001614:	6819      	ldr	r1, [r3, #0]
 8001616:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 800161a:	f7fe fe79 	bl	8000310 <strcmp>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d01b      	beq.n	800165c <reliable_send_packet+0x128>
				LoRA_sendPacket(LoRA_data);
 8001624:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001628:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800162c:	6818      	ldr	r0, [r3, #0]
 800162e:	f7ff fe01 	bl	8001234 <LoRA_sendPacket>
			} else {
				break;
			}
		}

		if (HAL_GetTick() - lastTime > 2000) {
 8001632:	f002 fe2f 	bl	8004294 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001642:	d9d9      	bls.n	80015f8 <reliable_send_packet+0xc4>
			LoRA_sendPacket(LoRA_data);
 8001644:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001648:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800164c:	6818      	ldr	r0, [r3, #0]
 800164e:	f7ff fdf1 	bl	8001234 <LoRA_sendPacket>
			lastTime = HAL_GetTick();
 8001652:	f002 fe1f 	bl	8004294 <HAL_GetTick>
 8001656:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
		if (recv_packet(acknowledge, length)) {
 800165a:	e7cd      	b.n	80015f8 <reliable_send_packet+0xc4>
				break;
 800165c:	bf00      	nop
 800165e:	46b5      	mov	sp, r6
		}
	}
}
 8001660:	bf00      	nop
 8001662:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8001666:	46bd      	mov	sp, r7
 8001668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800166c:	0801fe68 	.word	0x0801fe68

08001670 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001672:	f5ad 5d20 	sub.w	sp, sp, #10240	; 0x2800
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800167a:	f002 fd85 	bl	8004188 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800167e:	f000 fd45 	bl	800210c <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8001682:	f000 fdbb 	bl	80021fc <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001686:	f001 fb67 	bl	8002d58 <MX_GPIO_Init>
	MX_DMA_Init();
 800168a:	f001 fb05 	bl	8002c98 <MX_DMA_Init>
	MX_SPI3_Init();
 800168e:	f001 f83b 	bl	8002708 <MX_SPI3_Init>
	MX_FDCAN3_Init();
 8001692:	f000 fecb 	bl	800242c <MX_FDCAN3_Init>
	MX_USART6_UART_Init();
 8001696:	f001 fab3 	bl	8002c00 <MX_USART6_UART_Init>
	MX_ADC1_Init();
 800169a:	f000 fde1 	bl	8002260 <MX_ADC1_Init>
	MX_TIM4_Init();
 800169e:	f001 f945 	bl	800292c <MX_TIM4_Init>
	MX_ADC3_Init();
 80016a2:	f000 fe55 	bl	8002350 <MX_ADC3_Init>
	MX_SPI2_Init();
 80016a6:	f000 ffd9 	bl	800265c <MX_SPI2_Init>
	MX_I2C2_Init();
 80016aa:	f000 ff23 	bl	80024f4 <MX_I2C2_Init>
	MX_TIM2_Init();
 80016ae:	f001 f881 	bl	80027b4 <MX_TIM2_Init>
	MX_TIM5_Init();
 80016b2:	f001 f9b7 	bl	8002a24 <MX_TIM5_Init>
	MX_TIM3_Init();
 80016b6:	f001 f8d5 	bl	8002864 <MX_TIM3_Init>
	MX_USB_DEVICE_Init();
 80016ba:	f018 ff87 	bl	801a5cc <MX_USB_DEVICE_Init>
	MX_SPI1_Init();
 80016be:	f000 ff77 	bl	80025b0 <MX_SPI1_Init>
	MX_UART4_Init();
 80016c2:	f001 fa51 	bl	8002b68 <MX_UART4_Init>
	MX_FATFS_Init();
 80016c6:	f013 fda1 	bl	801520c <MX_FATFS_Init>
	MX_SDMMC2_SD_Init();
 80016ca:	f000 ff53 	bl	8002574 <MX_SDMMC2_SD_Init>
	MX_TIM13_Init();
 80016ce:	f001 fa03 	bl	8002ad8 <MX_TIM13_Init>
	MX_TIM14_Init();
 80016d2:	f001 fa25 	bl	8002b20 <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */
	char dummy[50];
	disarm(dummy);
 80016d6:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fe1c 	bl	8001318 <disarm>

	FATFS FatFs;
	FIL Fil;
	FRESULT FR_Status;
	FR_Status = f_mount(&FatFs, SDPath, 1);
 80016e0:	4bc5      	ldr	r3, [pc, #788]	; (80019f8 <main+0x388>)
 80016e2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80016e6:	f103 0310 	add.w	r3, r3, #16
 80016ea:	443b      	add	r3, r7
 80016ec:	2201      	movs	r2, #1
 80016ee:	49c3      	ldr	r1, [pc, #780]	; (80019fc <main+0x38c>)
 80016f0:	4618      	mov	r0, r3
 80016f2:	f018 f95f 	bl	80199b4 <f_mount>
 80016f6:	4603      	mov	r3, r0
 80016f8:	f642 0207 	movw	r2, #10247	; 0x2807
 80016fc:	443a      	add	r2, r7
 80016fe:	7013      	strb	r3, [r2, #0]

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001700:	210c      	movs	r1, #12
 8001702:	48bf      	ldr	r0, [pc, #764]	; (8001a00 <main+0x390>)
 8001704:	f00e ff90 	bl	8010628 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 8001708:	2201      	movs	r2, #1
 800170a:	2104      	movs	r1, #4
 800170c:	48bd      	ldr	r0, [pc, #756]	; (8001a04 <main+0x394>)
 800170e:	f007 fccb 	bl	80090a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 8001712:	2201      	movs	r2, #1
 8001714:	2108      	movs	r1, #8
 8001716:	48bb      	ldr	r0, [pc, #748]	; (8001a04 <main+0x394>)
 8001718:	f007 fcc6 	bl	80090a8 <HAL_GPIO_WritePin>

	FR_Status = f_open(&Fil, "MyTextFile.txt", FA_CREATE_NEW);
 800171c:	4bba      	ldr	r3, [pc, #744]	; (8001a08 <main+0x398>)
 800171e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001722:	f103 0310 	add.w	r3, r3, #16
 8001726:	443b      	add	r3, r7
 8001728:	2204      	movs	r2, #4
 800172a:	49b8      	ldr	r1, [pc, #736]	; (8001a0c <main+0x39c>)
 800172c:	4618      	mov	r0, r3
 800172e:	f018 f987 	bl	8019a40 <f_open>
 8001732:	4603      	mov	r3, r0
 8001734:	f642 0207 	movw	r2, #10247	; 0x2807
 8001738:	443a      	add	r2, r7
 800173a:	7013      	strb	r3, [r2, #0]
	f_close(&Fil);
 800173c:	4bb2      	ldr	r3, [pc, #712]	; (8001a08 <main+0x398>)
 800173e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001742:	f103 0310 	add.w	r3, r3, #16
 8001746:	443b      	add	r3, r7
 8001748:	4618      	mov	r0, r3
 800174a:	f018 fd57 	bl	801a1fc <f_close>

	LoRA_begin(868000000);
 800174e:	48b0      	ldr	r0, [pc, #704]	; (8001a10 <main+0x3a0>)
 8001750:	f7ff fcca 	bl	80010e8 <LoRA_begin>
		}
		HAL_Delay(1000);
		LoRA_sendPacket("SENDIT");
	}*/

	int connected = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 800175a:	6013      	str	r3, [r2, #0]
	long last_packet = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	f242 72fc 	movw	r2, #10236	; 0x27fc
 8001762:	443a      	add	r2, r7
 8001764:	6013      	str	r3, [r2, #0]
	int ARMED = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	f242 72f8 	movw	r2, #10232	; 0x27f8
 800176c:	443a      	add	r2, r7
 800176e:	6013      	str	r3, [r2, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);
	//char buffered_debug_data[MAX_PACKET_LENGTH];
	char state[MAX_PACKET_LENGTH] = "DISARMED";
 8001770:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001774:	f5a3 74da 	sub.w	r4, r3, #436	; 0x1b4
 8001778:	4aa6      	ldr	r2, [pc, #664]	; (8001a14 <main+0x3a4>)
 800177a:	4623      	mov	r3, r4
 800177c:	6810      	ldr	r0, [r2, #0]
 800177e:	6851      	ldr	r1, [r2, #4]
 8001780:	c303      	stmia	r3!, {r0, r1}
 8001782:	7a12      	ldrb	r2, [r2, #8]
 8001784:	701a      	strb	r2, [r3, #0]
 8001786:	f104 0309 	add.w	r3, r4, #9
 800178a:	22f1      	movs	r2, #241	; 0xf1
 800178c:	2100      	movs	r1, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f01a fbc3 	bl	801bf1a <memset>
	char command[MAX_PACKET_LENGTH];
	char recieved_packet[MAX_PACKET_LENGTH] = "";
 8001794:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001798:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	3304      	adds	r3, #4
 80017a2:	22f6      	movs	r2, #246	; 0xf6
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f01a fbb7 	bl	801bf1a <memset>
	char previous_packet[MAX_PACKET_LENGTH];
	char response_packet[MAX_PACKET_LENGTH];
	char packets_streamed[MAX_PACKET_LENGTH];
	int max_packet_count = 0;
 80017ac:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80017b0:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
	int packetId;
	char communication_state[MAX_PACKET_LENGTH] = "RECEIVING RELIABLE";
 80017b8:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80017bc:	f5a3 66f4 	sub.w	r6, r3, #1952	; 0x7a0
 80017c0:	4b95      	ldr	r3, [pc, #596]	; (8001a18 <main+0x3a8>)
 80017c2:	4634      	mov	r4, r6
 80017c4:	461d      	mov	r5, r3
 80017c6:	6828      	ldr	r0, [r5, #0]
 80017c8:	6869      	ldr	r1, [r5, #4]
 80017ca:	68aa      	ldr	r2, [r5, #8]
 80017cc:	68eb      	ldr	r3, [r5, #12]
 80017ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017d0:	8a2b      	ldrh	r3, [r5, #16]
 80017d2:	7caa      	ldrb	r2, [r5, #18]
 80017d4:	8023      	strh	r3, [r4, #0]
 80017d6:	4613      	mov	r3, r2
 80017d8:	70a3      	strb	r3, [r4, #2]
 80017da:	f106 0313 	add.w	r3, r6, #19
 80017de:	22e7      	movs	r2, #231	; 0xe7
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f01a fb99 	bl	801bf1a <memset>
		//sprintf(data, "%x", version);
		//CDC_Transmit_HS(data, strlen(data));
		LoRA_sendPacket("hello\n");
		HAL_Delay(1000);
	}*/
	uint32_t previousTime = HAL_GetTick();
 80017e8:	f002 fd54 	bl	8004294 <HAL_GetTick>
 80017ec:	f642 030c 	movw	r3, #10252	; 0x280c
 80017f0:	443b      	add	r3, r7
 80017f2:	6018      	str	r0, [r3, #0]
	uint32_t debugTime = HAL_GetTick();
 80017f4:	f002 fd4e 	bl	8004294 <HAL_GetTick>
 80017f8:	f242 73f4 	movw	r3, #10228	; 0x27f4
 80017fc:	443b      	add	r3, r7
 80017fe:	6018      	str	r0, [r3, #0]
			debugTime = HAL_GetTick();
			sprintf(response_packet, "Lora: %d, Sate: %s, Comms: %s\n", LoRA_Read_Register(REG_MODEM_CONFIG_1), state, communication_state);
			CDC_Transmit_HS(response_packet, strlen(response_packet));
		}*/

		if (strcmp(communication_state, "RECEIVING RELIABLE") == 0) {
 8001800:	4b86      	ldr	r3, [pc, #536]	; (8001a1c <main+0x3ac>)
 8001802:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001806:	f103 0310 	add.w	r3, r3, #16
 800180a:	443b      	add	r3, r7
 800180c:	4982      	ldr	r1, [pc, #520]	; (8001a18 <main+0x3a8>)
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe fd7e 	bl	8000310 <strcmp>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	f040 8098 	bne.w	800194c <main+0x2dc>


			//CDC_Transmit_HS("hi4\n", strlen("hi4\n"));
			if (recv_packet(recieved_packet, MAX_PACKET_LENGTH)) {
 800181c:	4b80      	ldr	r3, [pc, #512]	; (8001a20 <main+0x3b0>)
 800181e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001822:	f103 0310 	add.w	r3, r3, #16
 8001826:	443b      	add	r3, r7
 8001828:	21fa      	movs	r1, #250	; 0xfa
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fe1a 	bl	8001464 <recv_packet>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0e4      	beq.n	8001800 <main+0x190>
				CDC_Transmit_HS("hi3", strlen("hi3"));
 8001836:	2103      	movs	r1, #3
 8001838:	487a      	ldr	r0, [pc, #488]	; (8001a24 <main+0x3b4>)
 800183a:	f018 ff87 	bl	801a74c <CDC_Transmit_HS>
				previousTime = HAL_GetTick();
 800183e:	f002 fd29 	bl	8004294 <HAL_GetTick>
 8001842:	f642 030c 	movw	r3, #10252	; 0x280c
 8001846:	443b      	add	r3, r7
 8001848:	6018      	str	r0, [r3, #0]
				if (strcmp(recieved_packet, "$") == 0) {
 800184a:	4b75      	ldr	r3, [pc, #468]	; (8001a20 <main+0x3b0>)
 800184c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001850:	f103 0310 	add.w	r3, r3, #16
 8001854:	443b      	add	r3, r7
 8001856:	4974      	ldr	r1, [pc, #464]	; (8001a28 <main+0x3b8>)
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fd59 	bl	8000310 <strcmp>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d10d      	bne.n	8001880 <main+0x210>
					//CDC_Transmit_HS("hi2", strlen("hi2"));
					strcpy(communication_state, "SENDING RELIABLE");
 8001864:	4b6d      	ldr	r3, [pc, #436]	; (8001a1c <main+0x3ac>)
 8001866:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800186a:	f103 0310 	add.w	r3, r3, #16
 800186e:	443b      	add	r3, r7
 8001870:	4a6e      	ldr	r2, [pc, #440]	; (8001a2c <main+0x3bc>)
 8001872:	461c      	mov	r4, r3
 8001874:	4615      	mov	r5, r2
 8001876:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001878:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800187a:	682b      	ldr	r3, [r5, #0]
 800187c:	7023      	strb	r3, [r4, #0]
 800187e:	e7bf      	b.n	8001800 <main+0x190>
				} else if(sscanf(recieved_packet, "! %d", &max_packet_count) == 1) {
 8001880:	4a6b      	ldr	r2, [pc, #428]	; (8001a30 <main+0x3c0>)
 8001882:	f642 0310 	movw	r3, #10256	; 0x2810
 8001886:	4413      	add	r3, r2
 8001888:	19da      	adds	r2, r3, r7
 800188a:	4b65      	ldr	r3, [pc, #404]	; (8001a20 <main+0x3b0>)
 800188c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001890:	f103 0310 	add.w	r3, r3, #16
 8001894:	443b      	add	r3, r7
 8001896:	4967      	ldr	r1, [pc, #412]	; (8001a34 <main+0x3c4>)
 8001898:	4618      	mov	r0, r3
 800189a:	f01a facd 	bl	801be38 <siscanf>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d10f      	bne.n	80018c4 <main+0x254>
					strcpy(communication_state,"SENDING STREAM");
 80018a4:	4b5d      	ldr	r3, [pc, #372]	; (8001a1c <main+0x3ac>)
 80018a6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80018aa:	f103 0310 	add.w	r3, r3, #16
 80018ae:	443b      	add	r3, r7
 80018b0:	4a61      	ldr	r2, [pc, #388]	; (8001a38 <main+0x3c8>)
 80018b2:	461c      	mov	r4, r3
 80018b4:	4613      	mov	r3, r2
 80018b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018b8:	c407      	stmia	r4!, {r0, r1, r2}
 80018ba:	8023      	strh	r3, [r4, #0]
 80018bc:	3402      	adds	r4, #2
 80018be:	0c1b      	lsrs	r3, r3, #16
 80018c0:	7023      	strb	r3, [r4, #0]
 80018c2:	e79d      	b.n	8001800 <main+0x190>
				} else if (strcmp(recieved_packet, previous_packet) == 0) {
 80018c4:	4a5d      	ldr	r2, [pc, #372]	; (8001a3c <main+0x3cc>)
 80018c6:	f642 0310 	movw	r3, #10256	; 0x2810
 80018ca:	4413      	add	r3, r2
 80018cc:	19da      	adds	r2, r3, r7
 80018ce:	4b54      	ldr	r3, [pc, #336]	; (8001a20 <main+0x3b0>)
 80018d0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80018d4:	f103 0310 	add.w	r3, r3, #16
 80018d8:	443b      	add	r3, r7
 80018da:	4611      	mov	r1, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fd17 	bl	8000310 <strcmp>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d109      	bne.n	80018fc <main+0x28c>
					//send acknowledge again
					LoRA_sendPacket(recieved_packet);
 80018e8:	4b4d      	ldr	r3, [pc, #308]	; (8001a20 <main+0x3b0>)
 80018ea:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80018ee:	f103 0310 	add.w	r3, r3, #16
 80018f2:	443b      	add	r3, r7
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fc9d 	bl	8001234 <LoRA_sendPacket>
 80018fa:	e781      	b.n	8001800 <main+0x190>
				} else {
					//CDC_Transmit_HS("hi1", strlen("hi1"));
					strcpy(previous_packet, recieved_packet);
 80018fc:	4a48      	ldr	r2, [pc, #288]	; (8001a20 <main+0x3b0>)
 80018fe:	f642 0310 	movw	r3, #10256	; 0x2810
 8001902:	4413      	add	r3, r2
 8001904:	19da      	adds	r2, r3, r7
 8001906:	4b4d      	ldr	r3, [pc, #308]	; (8001a3c <main+0x3cc>)
 8001908:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800190c:	f103 0310 	add.w	r3, r3, #16
 8001910:	443b      	add	r3, r7
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f01a fb80 	bl	801c01a <strcpy>
					LoRA_sendPacket(recieved_packet);
 800191a:	4b41      	ldr	r3, [pc, #260]	; (8001a20 <main+0x3b0>)
 800191c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001920:	f103 0310 	add.w	r3, r3, #16
 8001924:	443b      	add	r3, r7
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fc84 	bl	8001234 <LoRA_sendPacket>
					strcpy(command, recieved_packet);
 800192c:	4a3c      	ldr	r2, [pc, #240]	; (8001a20 <main+0x3b0>)
 800192e:	f642 0310 	movw	r3, #10256	; 0x2810
 8001932:	4413      	add	r3, r2
 8001934:	19da      	adds	r2, r3, r7
 8001936:	4b42      	ldr	r3, [pc, #264]	; (8001a40 <main+0x3d0>)
 8001938:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800193c:	f103 0310 	add.w	r3, r3, #16
 8001940:	443b      	add	r3, r7
 8001942:	4611      	mov	r1, r2
 8001944:	4618      	mov	r0, r3
 8001946:	f01a fb68 	bl	801c01a <strcpy>
 800194a:	e759      	b.n	8001800 <main+0x190>
					//CDC_Transmit_HS(command, strlen(command));
				}
			}
		} else if (strcmp(communication_state, "RECEIVING STREAM") == 0){
 800194c:	4b33      	ldr	r3, [pc, #204]	; (8001a1c <main+0x3ac>)
 800194e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001952:	f103 0310 	add.w	r3, r3, #16
 8001956:	443b      	add	r3, r7
 8001958:	493a      	ldr	r1, [pc, #232]	; (8001a44 <main+0x3d4>)
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fcd8 	bl	8000310 <strcmp>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	f040 809f 	bne.w	8001aa6 <main+0x436>
			if(recv_packet(recieved_packet, MAX_PACKET_LENGTH))
 8001968:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <main+0x3b0>)
 800196a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800196e:	f103 0310 	add.w	r3, r3, #16
 8001972:	443b      	add	r3, r7
 8001974:	21fa      	movs	r1, #250	; 0xfa
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fd74 	bl	8001464 <recv_packet>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d066      	beq.n	8001a50 <main+0x3e0>
			{
				previousTime = HAL_GetTick();
 8001982:	f002 fc87 	bl	8004294 <HAL_GetTick>
 8001986:	f642 030c 	movw	r3, #10252	; 0x280c
 800198a:	443b      	add	r3, r7
 800198c:	6018      	str	r0, [r3, #0]
				if(sscanf(recieved_packet, "$ %s", state) == 1)
 800198e:	4a2e      	ldr	r2, [pc, #184]	; (8001a48 <main+0x3d8>)
 8001990:	f642 0310 	movw	r3, #10256	; 0x2810
 8001994:	4413      	add	r3, r2
 8001996:	19da      	adds	r2, r3, r7
 8001998:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <main+0x3b0>)
 800199a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800199e:	f103 0310 	add.w	r3, r3, #16
 80019a2:	443b      	add	r3, r7
 80019a4:	4929      	ldr	r1, [pc, #164]	; (8001a4c <main+0x3dc>)
 80019a6:	4618      	mov	r0, r3
 80019a8:	f01a fa46 	bl	801be38 <siscanf>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d10d      	bne.n	80019ce <main+0x35e>
				{
					strcpy(communication_state,"SENDING RELIABLE");
 80019b2:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <main+0x3ac>)
 80019b4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80019b8:	f103 0310 	add.w	r3, r3, #16
 80019bc:	443b      	add	r3, r7
 80019be:	4a1b      	ldr	r2, [pc, #108]	; (8001a2c <main+0x3bc>)
 80019c0:	461c      	mov	r4, r3
 80019c2:	4615      	mov	r5, r2
 80019c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019c8:	682b      	ldr	r3, [r5, #0]
 80019ca:	7023      	strb	r3, [r4, #0]
 80019cc:	e718      	b.n	8001800 <main+0x190>
				}
				else
				{
					CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 80019ce:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <main+0x3b0>)
 80019d0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80019d4:	f103 0310 	add.w	r3, r3, #16
 80019d8:	443b      	add	r3, r7
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fcf8 	bl	80003d0 <strlen>
 80019e0:	4602      	mov	r2, r0
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <main+0x3b0>)
 80019e4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80019e8:	f103 0310 	add.w	r3, r3, #16
 80019ec:	443b      	add	r3, r7
 80019ee:	4611      	mov	r1, r2
 80019f0:	4618      	mov	r0, r3
 80019f2:	f018 feab 	bl	801a74c <CDC_Transmit_HS>
 80019f6:	e703      	b.n	8001800 <main+0x190>
 80019f8:	ffffef78 	.word	0xffffef78
 80019fc:	24001698 	.word	0x24001698
 8001a00:	240011dc 	.word	0x240011dc
 8001a04:	58021800 	.word	0x58021800
 8001a08:	ffffdf48 	.word	0xffffdf48
 8001a0c:	0801fe74 	.word	0x0801fe74
 8001a10:	33bca100 	.word	0x33bca100
 8001a14:	0801fe44 	.word	0x0801fe44
 8001a18:	0801fe84 	.word	0x0801fe84
 8001a1c:	ffffd860 	.word	0xffffd860
 8001a20:	ffffdc54 	.word	0xffffdc54
 8001a24:	0801fe98 	.word	0x0801fe98
 8001a28:	0801fe9c 	.word	0x0801fe9c
 8001a2c:	0801fea0 	.word	0x0801fea0
 8001a30:	ffffd95c 	.word	0xffffd95c
 8001a34:	0801feb4 	.word	0x0801feb4
 8001a38:	0801febc 	.word	0x0801febc
 8001a3c:	ffffdb58 	.word	0xffffdb58
 8001a40:	ffffdd50 	.word	0xffffdd50
 8001a44:	0801fecc 	.word	0x0801fecc
 8001a48:	ffffde4c 	.word	0xffffde4c
 8001a4c:	0801fee0 	.word	0x0801fee0
				}
			}
			else if(HAL_GetTick()-previousTime > 1000)
 8001a50:	f002 fc20 	bl	8004294 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	f642 030c 	movw	r3, #10252	; 0x280c
 8001a5a:	443b      	add	r3, r7
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a64:	f67f aecc 	bls.w	8001800 <main+0x190>
			{
			  previousTime = HAL_GetTick();
 8001a68:	f002 fc14 	bl	8004294 <HAL_GetTick>
 8001a6c:	f642 030c 	movw	r3, #10252	; 0x280c
 8001a70:	443b      	add	r3, r7
 8001a72:	6018      	str	r0, [r3, #0]
			  //give up SENDING
			  sprintf(response_packet, "! %d", packets_streamed);
 8001a74:	4ac8      	ldr	r2, [pc, #800]	; (8001d98 <main+0x728>)
 8001a76:	f642 0310 	movw	r3, #10256	; 0x2810
 8001a7a:	4413      	add	r3, r2
 8001a7c:	19da      	adds	r2, r3, r7
 8001a7e:	4bc7      	ldr	r3, [pc, #796]	; (8001d9c <main+0x72c>)
 8001a80:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001a84:	f103 0310 	add.w	r3, r3, #16
 8001a88:	443b      	add	r3, r7
 8001a8a:	49c5      	ldr	r1, [pc, #788]	; (8001da0 <main+0x730>)
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f01a f9b3 	bl	801bdf8 <siprintf>
			  LoRA_sendPacket(response_packet);
 8001a92:	4bc2      	ldr	r3, [pc, #776]	; (8001d9c <main+0x72c>)
 8001a94:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001a98:	f103 0310 	add.w	r3, r3, #16
 8001a9c:	443b      	add	r3, r7
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fbc8 	bl	8001234 <LoRA_sendPacket>
 8001aa4:	e6ac      	b.n	8001800 <main+0x190>
			}
		} else if(strcmp(communication_state,"SENDING STREAM") == 0) {
 8001aa6:	4bbf      	ldr	r3, [pc, #764]	; (8001da4 <main+0x734>)
 8001aa8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001aac:	f103 0310 	add.w	r3, r3, #16
 8001ab0:	443b      	add	r3, r7
 8001ab2:	49bd      	ldr	r1, [pc, #756]	; (8001da8 <main+0x738>)
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fc2b 	bl	8000310 <strcmp>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f040 80a4 	bne.w	8001c0a <main+0x59a>
			if(max_packet_count == 0)
 8001ac2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001ac6:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d124      	bne.n	8001b1a <main+0x4aa>
			{
				strcpy(communication_state,"TRANSITIONING");
 8001ad0:	4bb4      	ldr	r3, [pc, #720]	; (8001da4 <main+0x734>)
 8001ad2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001ad6:	f103 0310 	add.w	r3, r3, #16
 8001ada:	443b      	add	r3, r7
 8001adc:	4ab3      	ldr	r2, [pc, #716]	; (8001dac <main+0x73c>)
 8001ade:	461c      	mov	r4, r3
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ae4:	c407      	stmia	r4!, {r0, r1, r2}
 8001ae6:	8023      	strh	r3, [r4, #0]
				sprintf(response_packet, "$ %s", state);
 8001ae8:	4ab1      	ldr	r2, [pc, #708]	; (8001db0 <main+0x740>)
 8001aea:	f642 0310 	movw	r3, #10256	; 0x2810
 8001aee:	4413      	add	r3, r2
 8001af0:	19da      	adds	r2, r3, r7
 8001af2:	4baa      	ldr	r3, [pc, #680]	; (8001d9c <main+0x72c>)
 8001af4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001af8:	f103 0310 	add.w	r3, r3, #16
 8001afc:	443b      	add	r3, r7
 8001afe:	49ad      	ldr	r1, [pc, #692]	; (8001db4 <main+0x744>)
 8001b00:	4618      	mov	r0, r3
 8001b02:	f01a f979 	bl	801bdf8 <siprintf>
				LoRA_sendPacket(response_packet);
 8001b06:	4ba5      	ldr	r3, [pc, #660]	; (8001d9c <main+0x72c>)
 8001b08:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001b0c:	f103 0310 	add.w	r3, r3, #16
 8001b10:	443b      	add	r3, r7
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fb8e 	bl	8001234 <LoRA_sendPacket>
 8001b18:	e672      	b.n	8001800 <main+0x190>
			}
			else
			{
				//send whatever
				if (strcmp(state, "ARMED") == 0) {
 8001b1a:	4ba5      	ldr	r3, [pc, #660]	; (8001db0 <main+0x740>)
 8001b1c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001b20:	f103 0310 	add.w	r3, r3, #16
 8001b24:	443b      	add	r3, r7
 8001b26:	49a4      	ldr	r1, [pc, #656]	; (8001db8 <main+0x748>)
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fbf1 	bl	8000310 <strcmp>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d15e      	bne.n	8001bf2 <main+0x582>
					if (strcmp(command, "FIRE") == 0) {
 8001b34:	4ba1      	ldr	r3, [pc, #644]	; (8001dbc <main+0x74c>)
 8001b36:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001b3a:	f103 0310 	add.w	r3, r3, #16
 8001b3e:	443b      	add	r3, r7
 8001b40:	499f      	ldr	r1, [pc, #636]	; (8001dc0 <main+0x750>)
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fbe4 	bl	8000310 <strcmp>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d151      	bne.n	8001bf2 <main+0x582>
						HAL_ADC_Start(&hadc1); // start the adc
 8001b4e:	489d      	ldr	r0, [pc, #628]	; (8001dc4 <main+0x754>)
 8001b50:	f003 f8da 	bl	8004d08 <HAL_ADC_Start>
						HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 8001b54:	2164      	movs	r1, #100	; 0x64
 8001b56:	489b      	ldr	r0, [pc, #620]	; (8001dc4 <main+0x754>)
 8001b58:	f003 f9d4 	bl	8004f04 <HAL_ADC_PollForConversion>
						char debug_data[100];
						uint16_t adc_val = HAL_ADC_GetValue(&hadc1); // get the adc value
 8001b5c:	4899      	ldr	r0, [pc, #612]	; (8001dc4 <main+0x754>)
 8001b5e:	f003 fac5 	bl	80050ec <HAL_ADC_GetValue>
 8001b62:	4603      	mov	r3, r0
 8001b64:	f242 72f2 	movw	r2, #10226	; 0x27f2
 8001b68:	443a      	add	r2, r7
 8001b6a:	8013      	strh	r3, [r2, #0]
						sprintf(debug_data, "%d, %d\n", HAL_GetTick(), adc_val);
 8001b6c:	f002 fb92 	bl	8004294 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	f242 73f2 	movw	r3, #10226	; 0x27f2
 8001b76:	443b      	add	r3, r7
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	4893      	ldr	r0, [pc, #588]	; (8001dc8 <main+0x758>)
 8001b7c:	f642 0110 	movw	r1, #10256	; 0x2810
 8001b80:	4401      	add	r1, r0
 8001b82:	19c8      	adds	r0, r1, r7
 8001b84:	4991      	ldr	r1, [pc, #580]	; (8001dcc <main+0x75c>)
 8001b86:	f01a f937 	bl	801bdf8 <siprintf>
						FR_Status = f_open(&Fil, "MyTextFile.txt",
 8001b8a:	4b91      	ldr	r3, [pc, #580]	; (8001dd0 <main+0x760>)
 8001b8c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001b90:	f103 0310 	add.w	r3, r3, #16
 8001b94:	443b      	add	r3, r7
 8001b96:	2232      	movs	r2, #50	; 0x32
 8001b98:	498e      	ldr	r1, [pc, #568]	; (8001dd4 <main+0x764>)
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f017 ff50 	bl	8019a40 <f_open>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f642 0207 	movw	r2, #10247	; 0x2807
 8001ba6:	443a      	add	r2, r7
 8001ba8:	7013      	strb	r3, [r2, #0]
								FA_OPEN_APPEND | FA_WRITE);
						f_puts(debug_data, &Fil);
 8001baa:	4a89      	ldr	r2, [pc, #548]	; (8001dd0 <main+0x760>)
 8001bac:	f642 0310 	movw	r3, #10256	; 0x2810
 8001bb0:	4413      	add	r3, r2
 8001bb2:	19da      	adds	r2, r3, r7
 8001bb4:	4b84      	ldr	r3, [pc, #528]	; (8001dc8 <main+0x758>)
 8001bb6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001bba:	f103 0310 	add.w	r3, r3, #16
 8001bbe:	443b      	add	r3, r7
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f018 fbbb 	bl	801a33e <f_puts>
						f_close(&Fil);
 8001bc8:	4b81      	ldr	r3, [pc, #516]	; (8001dd0 <main+0x760>)
 8001bca:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001bce:	f103 0310 	add.w	r3, r3, #16
 8001bd2:	443b      	add	r3, r7
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f018 fb11 	bl	801a1fc <f_close>
						HAL_ADC_Stop(&hadc1); // stop adc
 8001bda:	487a      	ldr	r0, [pc, #488]	; (8001dc4 <main+0x754>)
 8001bdc:	f003 f95e 	bl	8004e9c <HAL_ADC_Stop>
						LoRA_sendPacket(debug_data);
 8001be0:	4b79      	ldr	r3, [pc, #484]	; (8001dc8 <main+0x758>)
 8001be2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001be6:	f103 0310 	add.w	r3, r3, #16
 8001bea:	443b      	add	r3, r7
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fb21 	bl	8001234 <LoRA_sendPacket>
					}
				}
				max_packet_count--;
 8001bf2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001bf6:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	1e5a      	subs	r2, r3, #1
 8001bfe:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001c02:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	e5fa      	b.n	8001800 <main+0x190>
			}
			
		}
		else if (strcmp(communication_state, "SENDING RELIABLE") == 0) {
 8001c0a:	4b66      	ldr	r3, [pc, #408]	; (8001da4 <main+0x734>)
 8001c0c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001c10:	f103 0310 	add.w	r3, r3, #16
 8001c14:	443b      	add	r3, r7
 8001c16:	4970      	ldr	r1, [pc, #448]	; (8001dd8 <main+0x768>)
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fb79 	bl	8000310 <strcmp>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f040 81bf 	bne.w	8001fa4 <main+0x934>
			reliable_send_packet("*");
 8001c26:	486d      	ldr	r0, [pc, #436]	; (8001ddc <main+0x76c>)
 8001c28:	f7ff fc84 	bl	8001534 <reliable_send_packet>
			if (strcmp(state, "DISARMED") == 0) {
 8001c2c:	4b60      	ldr	r3, [pc, #384]	; (8001db0 <main+0x740>)
 8001c2e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001c32:	f103 0310 	add.w	r3, r3, #16
 8001c36:	443b      	add	r3, r7
 8001c38:	4969      	ldr	r1, [pc, #420]	; (8001de0 <main+0x770>)
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fb68 	bl	8000310 <strcmp>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f040 8128 	bne.w	8001e98 <main+0x828>
				if (strcmp(command, "ARM") == 0) {
 8001c48:	4b5c      	ldr	r3, [pc, #368]	; (8001dbc <main+0x74c>)
 8001c4a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001c4e:	f103 0310 	add.w	r3, r3, #16
 8001c52:	443b      	add	r3, r7
 8001c54:	4963      	ldr	r1, [pc, #396]	; (8001de4 <main+0x774>)
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe fb5a 	bl	8000310 <strcmp>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d117      	bne.n	8001c92 <main+0x622>
					CDC_Transmit_HS("HELLO 2", strlen("HELLO 2"));
 8001c62:	2107      	movs	r1, #7
 8001c64:	4860      	ldr	r0, [pc, #384]	; (8001de8 <main+0x778>)
 8001c66:	f018 fd71 	bl	801a74c <CDC_Transmit_HS>
					if (!arm(state)) {
 8001c6a:	4b51      	ldr	r3, [pc, #324]	; (8001db0 <main+0x740>)
 8001c6c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001c70:	f103 0310 	add.w	r3, r3, #16
 8001c74:	443b      	add	r3, r7
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fbc2 	bl	8001400 <arm>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d103      	bne.n	8001c8a <main+0x61a>
						reliable_send_packet("ARM SUCCESS");
 8001c82:	485a      	ldr	r0, [pc, #360]	; (8001dec <main+0x77c>)
 8001c84:	f7ff fc56 	bl	8001534 <reliable_send_packet>
 8001c88:	e163      	b.n	8001f52 <main+0x8e2>
					} else {
						reliable_send_packet("ARM UNSUCCESSFUL");
 8001c8a:	4859      	ldr	r0, [pc, #356]	; (8001df0 <main+0x780>)
 8001c8c:	f7ff fc52 	bl	8001534 <reliable_send_packet>
 8001c90:	e15f      	b.n	8001f52 <main+0x8e2>
					}
				} else if (strcmp(command, "DISARM") == 0) {
 8001c92:	4b4a      	ldr	r3, [pc, #296]	; (8001dbc <main+0x74c>)
 8001c94:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001c98:	f103 0310 	add.w	r3, r3, #16
 8001c9c:	443b      	add	r3, r7
 8001c9e:	4955      	ldr	r1, [pc, #340]	; (8001df4 <main+0x784>)
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fb35 	bl	8000310 <strcmp>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d103      	bne.n	8001cb4 <main+0x644>
					reliable_send_packet("ALREADY DISARMED");
 8001cac:	4852      	ldr	r0, [pc, #328]	; (8001df8 <main+0x788>)
 8001cae:	f7ff fc41 	bl	8001534 <reliable_send_packet>
 8001cb2:	e14e      	b.n	8001f52 <main+0x8e2>
				} else if (strcmp(command, "CONT") == 0) {
 8001cb4:	4b41      	ldr	r3, [pc, #260]	; (8001dbc <main+0x74c>)
 8001cb6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001cba:	f103 0310 	add.w	r3, r3, #16
 8001cbe:	443b      	add	r3, r7
 8001cc0:	494e      	ldr	r1, [pc, #312]	; (8001dfc <main+0x78c>)
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe fb24 	bl	8000310 <strcmp>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f040 8141 	bne.w	8001f52 <main+0x8e2>
					uint8_t CONTS[8];
					CONTS[0] = HAL_GPIO_ReadPin(CONT1_GPIO_Port, CONT1_Pin);
 8001cd0:	2104      	movs	r1, #4
 8001cd2:	484b      	ldr	r0, [pc, #300]	; (8001e00 <main+0x790>)
 8001cd4:	f007 f9d0 	bl	8009078 <HAL_GPIO_ReadPin>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	461a      	mov	r2, r3
 8001cdc:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001ce0:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8001ce4:	701a      	strb	r2, [r3, #0]
					CONTS[1] = HAL_GPIO_ReadPin(CONT2_GPIO_Port, CONT2_Pin);
 8001ce6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cea:	4846      	ldr	r0, [pc, #280]	; (8001e04 <main+0x794>)
 8001cec:	f007 f9c4 	bl	8009078 <HAL_GPIO_ReadPin>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001cf8:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8001cfc:	705a      	strb	r2, [r3, #1]
					CONTS[2] = HAL_GPIO_ReadPin(CONT3_GPIO_Port, CONT3_Pin);
 8001cfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d02:	4840      	ldr	r0, [pc, #256]	; (8001e04 <main+0x794>)
 8001d04:	f007 f9b8 	bl	8009078 <HAL_GPIO_ReadPin>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001d10:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8001d14:	709a      	strb	r2, [r3, #2]
					CONTS[3] = HAL_GPIO_ReadPin(CONT4_GPIO_Port, CONT4_Pin);
 8001d16:	2101      	movs	r1, #1
 8001d18:	483b      	ldr	r0, [pc, #236]	; (8001e08 <main+0x798>)
 8001d1a:	f007 f9ad 	bl	8009078 <HAL_GPIO_ReadPin>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	461a      	mov	r2, r3
 8001d22:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001d26:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8001d2a:	70da      	strb	r2, [r3, #3]
					CONTS[4] = HAL_GPIO_ReadPin(CONT5_GPIO_Port, CONT5_Pin);
 8001d2c:	2180      	movs	r1, #128	; 0x80
 8001d2e:	4837      	ldr	r0, [pc, #220]	; (8001e0c <main+0x79c>)
 8001d30:	f007 f9a2 	bl	8009078 <HAL_GPIO_ReadPin>
 8001d34:	4603      	mov	r3, r0
 8001d36:	461a      	mov	r2, r3
 8001d38:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001d3c:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8001d40:	711a      	strb	r2, [r3, #4]
					CONTS[5] = HAL_GPIO_ReadPin(CONT6_GPIO_Port, CONT6_Pin);
 8001d42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d46:	4831      	ldr	r0, [pc, #196]	; (8001e0c <main+0x79c>)
 8001d48:	f007 f996 	bl	8009078 <HAL_GPIO_ReadPin>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	461a      	mov	r2, r3
 8001d50:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001d54:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8001d58:	715a      	strb	r2, [r3, #5]
					CONTS[6] = HAL_GPIO_ReadPin(CONT7_GPIO_Port, CONT7_Pin);
 8001d5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d5e:	482b      	ldr	r0, [pc, #172]	; (8001e0c <main+0x79c>)
 8001d60:	f007 f98a 	bl	8009078 <HAL_GPIO_ReadPin>
 8001d64:	4603      	mov	r3, r0
 8001d66:	461a      	mov	r2, r3
 8001d68:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001d6c:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8001d70:	719a      	strb	r2, [r3, #6]
					CONTS[7] = HAL_GPIO_ReadPin(CONT8_GPIO_Port, CONT8_Pin);
 8001d72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d76:	4825      	ldr	r0, [pc, #148]	; (8001e0c <main+0x79c>)
 8001d78:	f007 f97e 	bl	8009078 <HAL_GPIO_ReadPin>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	461a      	mov	r2, r3
 8001d80:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001d84:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8001d88:	71da      	strb	r2, [r3, #7]

					char message[100];
					for (int i = 0; i < 8; i++) {
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f642 0208 	movw	r2, #10248	; 0x2808
 8001d90:	443a      	add	r2, r7
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	e079      	b.n	8001e8a <main+0x81a>
 8001d96:	bf00      	nop
 8001d98:	ffffd960 	.word	0xffffd960
 8001d9c:	ffffda5c 	.word	0xffffda5c
 8001da0:	0801feb4 	.word	0x0801feb4
 8001da4:	ffffd860 	.word	0xffffd860
 8001da8:	0801febc 	.word	0x0801febc
 8001dac:	0801fee8 	.word	0x0801fee8
 8001db0:	ffffde4c 	.word	0xffffde4c
 8001db4:	0801fee0 	.word	0x0801fee0
 8001db8:	0801fe50 	.word	0x0801fe50
 8001dbc:	ffffdd50 	.word	0xffffdd50
 8001dc0:	0801fef8 	.word	0x0801fef8
 8001dc4:	24000c6c 	.word	0x24000c6c
 8001dc8:	ffffd7f4 	.word	0xffffd7f4
 8001dcc:	0801ff00 	.word	0x0801ff00
 8001dd0:	ffffdf48 	.word	0xffffdf48
 8001dd4:	0801fe74 	.word	0x0801fe74
 8001dd8:	0801fea0 	.word	0x0801fea0
 8001ddc:	0801ff08 	.word	0x0801ff08
 8001de0:	0801fe44 	.word	0x0801fe44
 8001de4:	0801ff0c 	.word	0x0801ff0c
 8001de8:	0801ff10 	.word	0x0801ff10
 8001dec:	0801ff18 	.word	0x0801ff18
 8001df0:	0801ff24 	.word	0x0801ff24
 8001df4:	0801ff38 	.word	0x0801ff38
 8001df8:	0801ff40 	.word	0x0801ff40
 8001dfc:	0801ff54 	.word	0x0801ff54
 8001e00:	58020400 	.word	0x58020400
 8001e04:	58021400 	.word	0x58021400
 8001e08:	58021800 	.word	0x58021800
 8001e0c:	58021000 	.word	0x58021000
						if (CONTS[i]) {
 8001e10:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001e14:	f5a3 62f5 	sub.w	r2, r3, #1960	; 0x7a8
 8001e18:	f642 0308 	movw	r3, #10248	; 0x2808
 8001e1c:	443b      	add	r3, r7
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4413      	add	r3, r2
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00f      	beq.n	8001e48 <main+0x7d8>
							sprintf(message, "PYRO %d DOESN'T HAVE CONTINUITY",
 8001e28:	f642 0308 	movw	r3, #10248	; 0x2808
 8001e2c:	443b      	add	r3, r7
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	4b9f      	ldr	r3, [pc, #636]	; (80020b0 <main+0xa40>)
 8001e34:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001e38:	f103 0310 	add.w	r3, r3, #16
 8001e3c:	443b      	add	r3, r7
 8001e3e:	499d      	ldr	r1, [pc, #628]	; (80020b4 <main+0xa44>)
 8001e40:	4618      	mov	r0, r3
 8001e42:	f019 ffd9 	bl	801bdf8 <siprintf>
 8001e46:	e00e      	b.n	8001e66 <main+0x7f6>
									i + 1);
						} else {
							sprintf(message, "PYRO %d HAS CONTINUITY", i + 1);
 8001e48:	f642 0308 	movw	r3, #10248	; 0x2808
 8001e4c:	443b      	add	r3, r7
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	1c5a      	adds	r2, r3, #1
 8001e52:	4b97      	ldr	r3, [pc, #604]	; (80020b0 <main+0xa40>)
 8001e54:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001e58:	f103 0310 	add.w	r3, r3, #16
 8001e5c:	443b      	add	r3, r7
 8001e5e:	4996      	ldr	r1, [pc, #600]	; (80020b8 <main+0xa48>)
 8001e60:	4618      	mov	r0, r3
 8001e62:	f019 ffc9 	bl	801bdf8 <siprintf>
						}

						reliable_send_packet(message);
 8001e66:	4b92      	ldr	r3, [pc, #584]	; (80020b0 <main+0xa40>)
 8001e68:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001e6c:	f103 0310 	add.w	r3, r3, #16
 8001e70:	443b      	add	r3, r7
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fb5e 	bl	8001534 <reliable_send_packet>
					for (int i = 0; i < 8; i++) {
 8001e78:	f642 0308 	movw	r3, #10248	; 0x2808
 8001e7c:	443b      	add	r3, r7
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	3301      	adds	r3, #1
 8001e82:	f642 0208 	movw	r2, #10248	; 0x2808
 8001e86:	443a      	add	r2, r7
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	f642 0308 	movw	r3, #10248	; 0x2808
 8001e8e:	443b      	add	r3, r7
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b07      	cmp	r3, #7
 8001e94:	ddbc      	ble.n	8001e10 <main+0x7a0>
 8001e96:	e05c      	b.n	8001f52 <main+0x8e2>
					}
				}
			} else if (strcmp(state, "ARMED") == 0) {
 8001e98:	4b88      	ldr	r3, [pc, #544]	; (80020bc <main+0xa4c>)
 8001e9a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001e9e:	f103 0310 	add.w	r3, r3, #16
 8001ea2:	443b      	add	r3, r7
 8001ea4:	4986      	ldr	r1, [pc, #536]	; (80020c0 <main+0xa50>)
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe fa32 	bl	8000310 <strcmp>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d140      	bne.n	8001f34 <main+0x8c4>
				if (strcmp(command, "DISARM") == 0) {
 8001eb2:	4b84      	ldr	r3, [pc, #528]	; (80020c4 <main+0xa54>)
 8001eb4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001eb8:	f103 0310 	add.w	r3, r3, #16
 8001ebc:	443b      	add	r3, r7
 8001ebe:	4982      	ldr	r1, [pc, #520]	; (80020c8 <main+0xa58>)
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe fa25 	bl	8000310 <strcmp>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d113      	bne.n	8001ef4 <main+0x884>
					if (!disarm(state)) {
 8001ecc:	4b7b      	ldr	r3, [pc, #492]	; (80020bc <main+0xa4c>)
 8001ece:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001ed2:	f103 0310 	add.w	r3, r3, #16
 8001ed6:	443b      	add	r3, r7
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fa1d 	bl	8001318 <disarm>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d103      	bne.n	8001eec <main+0x87c>
						reliable_send_packet("DISARM SUCCESS");
 8001ee4:	4879      	ldr	r0, [pc, #484]	; (80020cc <main+0xa5c>)
 8001ee6:	f7ff fb25 	bl	8001534 <reliable_send_packet>
 8001eea:	e01e      	b.n	8001f2a <main+0x8ba>
					} else {
						reliable_send_packet("DISARM UNSUCCESS");
 8001eec:	4878      	ldr	r0, [pc, #480]	; (80020d0 <main+0xa60>)
 8001eee:	f7ff fb21 	bl	8001534 <reliable_send_packet>
 8001ef2:	e01a      	b.n	8001f2a <main+0x8ba>
					}
				} else if (strcmp(command, "ARM") == 0) {
 8001ef4:	4b73      	ldr	r3, [pc, #460]	; (80020c4 <main+0xa54>)
 8001ef6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001efa:	f103 0310 	add.w	r3, r3, #16
 8001efe:	443b      	add	r3, r7
 8001f00:	4974      	ldr	r1, [pc, #464]	; (80020d4 <main+0xa64>)
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe fa04 	bl	8000310 <strcmp>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d103      	bne.n	8001f16 <main+0x8a6>
					reliable_send_packet("ALREADY ARMED");
 8001f0e:	4872      	ldr	r0, [pc, #456]	; (80020d8 <main+0xa68>)
 8001f10:	f7ff fb10 	bl	8001534 <reliable_send_packet>
 8001f14:	e009      	b.n	8001f2a <main+0x8ba>
				} else if (strcmp(command, "FIRE") == 0) {
 8001f16:	4b6b      	ldr	r3, [pc, #428]	; (80020c4 <main+0xa54>)
 8001f18:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001f1c:	f103 0310 	add.w	r3, r3, #16
 8001f20:	443b      	add	r3, r7
 8001f22:	496e      	ldr	r1, [pc, #440]	; (80020dc <main+0xa6c>)
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe f9f3 	bl	8000310 <strcmp>
					//strcpy(state, "STATIC_FIRE_LOGGING");
				}
				CDC_Transmit_HS("\nIamhere\n", strlen("\nIamhere\n"));
 8001f2a:	2109      	movs	r1, #9
 8001f2c:	486c      	ldr	r0, [pc, #432]	; (80020e0 <main+0xa70>)
 8001f2e:	f018 fc0d 	bl	801a74c <CDC_Transmit_HS>
 8001f32:	e00e      	b.n	8001f52 <main+0x8e2>
			} else {
				LoRA_sendPacket("state wrong!");
 8001f34:	486b      	ldr	r0, [pc, #428]	; (80020e4 <main+0xa74>)
 8001f36:	f7ff f97d 	bl	8001234 <LoRA_sendPacket>
				HAL_Delay(100);
 8001f3a:	2064      	movs	r0, #100	; 0x64
 8001f3c:	f002 f9b6 	bl	80042ac <HAL_Delay>
				LoRA_sendPacket(state);
 8001f40:	4b5e      	ldr	r3, [pc, #376]	; (80020bc <main+0xa4c>)
 8001f42:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001f46:	f103 0310 	add.w	r3, r3, #16
 8001f4a:	443b      	add	r3, r7
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff f971 	bl	8001234 <LoRA_sendPacket>
			}
			//HAL_Delay(100);
			sprintf(response_packet, "$ %s", state);
 8001f52:	4a5a      	ldr	r2, [pc, #360]	; (80020bc <main+0xa4c>)
 8001f54:	f642 0310 	movw	r3, #10256	; 0x2810
 8001f58:	4413      	add	r3, r2
 8001f5a:	19da      	adds	r2, r3, r7
 8001f5c:	4b62      	ldr	r3, [pc, #392]	; (80020e8 <main+0xa78>)
 8001f5e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001f62:	f103 0310 	add.w	r3, r3, #16
 8001f66:	443b      	add	r3, r7
 8001f68:	4960      	ldr	r1, [pc, #384]	; (80020ec <main+0xa7c>)
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f019 ff44 	bl	801bdf8 <siprintf>
			LoRA_sendPacket(response_packet);
 8001f70:	4b5d      	ldr	r3, [pc, #372]	; (80020e8 <main+0xa78>)
 8001f72:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001f76:	f103 0310 	add.w	r3, r3, #16
 8001f7a:	443b      	add	r3, r7
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff f959 	bl	8001234 <LoRA_sendPacket>
			CDC_Transmit_HS("\nIamhere2\n", strlen("\nIamhere2\n"));
 8001f82:	210a      	movs	r1, #10
 8001f84:	485a      	ldr	r0, [pc, #360]	; (80020f0 <main+0xa80>)
 8001f86:	f018 fbe1 	bl	801a74c <CDC_Transmit_HS>
			strcpy(communication_state, "TRANSITIONING");
 8001f8a:	4b5a      	ldr	r3, [pc, #360]	; (80020f4 <main+0xa84>)
 8001f8c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001f90:	f103 0310 	add.w	r3, r3, #16
 8001f94:	443b      	add	r3, r7
 8001f96:	4a58      	ldr	r2, [pc, #352]	; (80020f8 <main+0xa88>)
 8001f98:	461c      	mov	r4, r3
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f9e:	c407      	stmia	r4!, {r0, r1, r2}
 8001fa0:	8023      	strh	r3, [r4, #0]
 8001fa2:	e42d      	b.n	8001800 <main+0x190>
		}
	    else if(strcmp(communication_state,"TRANSITIONING") == 0)
 8001fa4:	4b53      	ldr	r3, [pc, #332]	; (80020f4 <main+0xa84>)
 8001fa6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001faa:	f103 0310 	add.w	r3, r3, #16
 8001fae:	443b      	add	r3, r7
 8001fb0:	4951      	ldr	r1, [pc, #324]	; (80020f8 <main+0xa88>)
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe f9ac 	bl	8000310 <strcmp>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f47f ac20 	bne.w	8001800 <main+0x190>
	    {
	        if(recv_packet(recieved_packet, MAX_PACKET_LENGTH))
 8001fc0:	4b4e      	ldr	r3, [pc, #312]	; (80020fc <main+0xa8c>)
 8001fc2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001fc6:	f103 0310 	add.w	r3, r3, #16
 8001fca:	443b      	add	r3, r7
 8001fcc:	21fa      	movs	r1, #250	; 0xfa
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fa48 	bl	8001464 <recv_packet>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d03e      	beq.n	8002058 <main+0x9e8>
	        {
	          previousTime = HAL_GetTick();
 8001fda:	f002 f95b 	bl	8004294 <HAL_GetTick>
 8001fde:	f642 030c 	movw	r3, #10252	; 0x280c
 8001fe2:	443b      	add	r3, r7
 8001fe4:	6018      	str	r0, [r3, #0]
	          if(strcmp(recieved_packet, "*")==0)
 8001fe6:	4b45      	ldr	r3, [pc, #276]	; (80020fc <main+0xa8c>)
 8001fe8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001fec:	f103 0310 	add.w	r3, r3, #16
 8001ff0:	443b      	add	r3, r7
 8001ff2:	4943      	ldr	r1, [pc, #268]	; (8002100 <main+0xa90>)
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe f98b 	bl	8000310 <strcmp>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f47f abff 	bne.w	8001800 <main+0x190>
	          {
	        	strcpy(previous_packet, recieved_packet);
 8002002:	4a3e      	ldr	r2, [pc, #248]	; (80020fc <main+0xa8c>)
 8002004:	f642 0310 	movw	r3, #10256	; 0x2810
 8002008:	4413      	add	r3, r2
 800200a:	19da      	adds	r2, r3, r7
 800200c:	4b3d      	ldr	r3, [pc, #244]	; (8002104 <main+0xa94>)
 800200e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002012:	f103 0310 	add.w	r3, r3, #16
 8002016:	443b      	add	r3, r7
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f019 fffd 	bl	801c01a <strcpy>
	        	strcpy(communication_state, "RECEIVING RELIABLE");
 8002020:	4b34      	ldr	r3, [pc, #208]	; (80020f4 <main+0xa84>)
 8002022:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002026:	f103 0310 	add.w	r3, r3, #16
 800202a:	443b      	add	r3, r7
 800202c:	4a36      	ldr	r2, [pc, #216]	; (8002108 <main+0xa98>)
 800202e:	461c      	mov	r4, r3
 8002030:	4615      	mov	r5, r2
 8002032:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002034:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002036:	682b      	ldr	r3, [r5, #0]
 8002038:	461a      	mov	r2, r3
 800203a:	8022      	strh	r2, [r4, #0]
 800203c:	3402      	adds	r4, #2
 800203e:	0c1b      	lsrs	r3, r3, #16
 8002040:	7023      	strb	r3, [r4, #0]
	            LoRA_sendPacket(recieved_packet);
 8002042:	4b2e      	ldr	r3, [pc, #184]	; (80020fc <main+0xa8c>)
 8002044:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002048:	f103 0310 	add.w	r3, r3, #16
 800204c:	443b      	add	r3, r7
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff f8f0 	bl	8001234 <LoRA_sendPacket>
 8002054:	f7ff bbd4 	b.w	8001800 <main+0x190>
	          }
	        }
	        else if (HAL_GetTick()-previousTime > 1000)
 8002058:	f002 f91c 	bl	8004294 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	f642 030c 	movw	r3, #10252	; 0x280c
 8002062:	443b      	add	r3, r7
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800206c:	f67f abc8 	bls.w	8001800 <main+0x190>
	        {
	          previousTime = HAL_GetTick();
 8002070:	f002 f910 	bl	8004294 <HAL_GetTick>
 8002074:	f642 030c 	movw	r3, #10252	; 0x280c
 8002078:	443b      	add	r3, r7
 800207a:	6018      	str	r0, [r3, #0]
			  sprintf(response_packet, "$ %s", state);
 800207c:	4a0f      	ldr	r2, [pc, #60]	; (80020bc <main+0xa4c>)
 800207e:	f642 0310 	movw	r3, #10256	; 0x2810
 8002082:	4413      	add	r3, r2
 8002084:	19da      	adds	r2, r3, r7
 8002086:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <main+0xa78>)
 8002088:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800208c:	f103 0310 	add.w	r3, r3, #16
 8002090:	443b      	add	r3, r7
 8002092:	4916      	ldr	r1, [pc, #88]	; (80020ec <main+0xa7c>)
 8002094:	4618      	mov	r0, r3
 8002096:	f019 feaf 	bl	801bdf8 <siprintf>
			  LoRA_sendPacket(response_packet);
 800209a:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <main+0xa78>)
 800209c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80020a0:	f103 0310 	add.w	r3, r3, #16
 80020a4:	443b      	add	r3, r7
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff f8c4 	bl	8001234 <LoRA_sendPacket>
		if (strcmp(communication_state, "RECEIVING RELIABLE") == 0) {
 80020ac:	f7ff bba8 	b.w	8001800 <main+0x190>
 80020b0:	ffffd7f4 	.word	0xffffd7f4
 80020b4:	0801ff5c 	.word	0x0801ff5c
 80020b8:	0801ff7c 	.word	0x0801ff7c
 80020bc:	ffffde4c 	.word	0xffffde4c
 80020c0:	0801fe50 	.word	0x0801fe50
 80020c4:	ffffdd50 	.word	0xffffdd50
 80020c8:	0801ff38 	.word	0x0801ff38
 80020cc:	0801ff94 	.word	0x0801ff94
 80020d0:	0801ffa4 	.word	0x0801ffa4
 80020d4:	0801ff0c 	.word	0x0801ff0c
 80020d8:	0801ffb8 	.word	0x0801ffb8
 80020dc:	0801fef8 	.word	0x0801fef8
 80020e0:	0801ffc8 	.word	0x0801ffc8
 80020e4:	0801ffd4 	.word	0x0801ffd4
 80020e8:	ffffda5c 	.word	0xffffda5c
 80020ec:	0801fee0 	.word	0x0801fee0
 80020f0:	0801ffe4 	.word	0x0801ffe4
 80020f4:	ffffd860 	.word	0xffffd860
 80020f8:	0801fee8 	.word	0x0801fee8
 80020fc:	ffffdc54 	.word	0xffffdc54
 8002100:	0801ff08 	.word	0x0801ff08
 8002104:	ffffdb58 	.word	0xffffdb58
 8002108:	0801fe84 	.word	0x0801fe84

0800210c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800210c:	b580      	push	{r7, lr}
 800210e:	b09c      	sub	sp, #112	; 0x70
 8002110:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002116:	224c      	movs	r2, #76	; 0x4c
 8002118:	2100      	movs	r1, #0
 800211a:	4618      	mov	r0, r3
 800211c:	f019 fefd 	bl	801bf1a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002120:	1d3b      	adds	r3, r7, #4
 8002122:	2220      	movs	r2, #32
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f019 fef7 	bl	801bf1a <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800212c:	2002      	movs	r0, #2
 800212e:	f008 fbcf 	bl	800a8d0 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002132:	2300      	movs	r3, #0
 8002134:	603b      	str	r3, [r7, #0]
 8002136:	4b30      	ldr	r3, [pc, #192]	; (80021f8 <SystemClock_Config+0xec>)
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800213e:	4a2e      	ldr	r2, [pc, #184]	; (80021f8 <SystemClock_Config+0xec>)
 8002140:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002144:	6193      	str	r3, [r2, #24]
 8002146:	4b2c      	ldr	r3, [pc, #176]	; (80021f8 <SystemClock_Config+0xec>)
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800214e:	603b      	str	r3, [r7, #0]
 8002150:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8002152:	bf00      	nop
 8002154:	4b28      	ldr	r3, [pc, #160]	; (80021f8 <SystemClock_Config+0xec>)
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800215c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002160:	d1f8      	bne.n	8002154 <SystemClock_Config+0x48>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 8002162:	2322      	movs	r3, #34	; 0x22
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002166:	2301      	movs	r3, #1
 8002168:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 800216a:	2340      	movs	r3, #64	; 0x40
 800216c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800216e:	2301      	movs	r3, #1
 8002170:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002172:	2302      	movs	r3, #2
 8002174:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002176:	2300      	movs	r3, #0
 8002178:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800217a:	2304      	movs	r3, #4
 800217c:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 12;
 800217e:	230c      	movs	r3, #12
 8002180:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 8002182:	2301      	movs	r3, #1
 8002184:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8002186:	2303      	movs	r3, #3
 8002188:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 800218a:	2302      	movs	r3, #2
 800218c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800218e:	230c      	movs	r3, #12
 8002190:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002192:	2300      	movs	r3, #0
 8002194:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800219a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800219e:	4618      	mov	r0, r3
 80021a0:	f008 fbe0 	bl	800a964 <HAL_RCC_OscConfig>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <SystemClock_Config+0xa2>
		Error_Handler();
 80021aa:	f000 ff39 	bl	8003020 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80021ae:	233f      	movs	r3, #63	; 0x3f
 80021b0:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021b2:	2303      	movs	r3, #3
 80021b4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80021ba:	2308      	movs	r3, #8
 80021bc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80021be:	2340      	movs	r3, #64	; 0x40
 80021c0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80021c2:	2340      	movs	r3, #64	; 0x40
 80021c4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80021c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021ca:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80021cc:	2340      	movs	r3, #64	; 0x40
 80021ce:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80021d0:	1d3b      	adds	r3, r7, #4
 80021d2:	2101      	movs	r1, #1
 80021d4:	4618      	mov	r0, r3
 80021d6:	f008 ff9f 	bl	800b118 <HAL_RCC_ClockConfig>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <SystemClock_Config+0xd8>
		Error_Handler();
 80021e0:	f000 ff1e 	bl	8003020 <Error_Handler>
	}
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80021e4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80021e8:	2100      	movs	r1, #0
 80021ea:	2000      	movs	r0, #0
 80021ec:	f009 f94a 	bl	800b484 <HAL_RCC_MCOConfig>
}
 80021f0:	bf00      	nop
 80021f2:	3770      	adds	r7, #112	; 0x70
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	58024800 	.word	0x58024800

080021fc <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b0ae      	sub	sp, #184	; 0xb8
 8002200:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8002202:	463b      	mov	r3, r7
 8002204:	22b8      	movs	r2, #184	; 0xb8
 8002206:	2100      	movs	r1, #0
 8002208:	4618      	mov	r0, r3
 800220a:	f019 fe86 	bl	801bf1a <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC
 800220e:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8002212:	f04f 0300 	mov.w	r3, #0
 8002216:	e9c7 2300 	strd	r2, r3, [r7]
			| RCC_PERIPHCLK_SPI3 | RCC_PERIPHCLK_SPI2 | RCC_PERIPHCLK_SPI1;
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 800221a:	2304      	movs	r3, #4
 800221c:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 12;
 800221e:	230c      	movs	r3, #12
 8002220:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 4;
 8002222:	2304      	movs	r3, #4
 8002224:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002226:	2302      	movs	r3, #2
 8002228:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 800222a:	2302      	movs	r3, #2
 800222c:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800222e:	23c0      	movs	r3, #192	; 0xc0
 8002230:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002232:	2300      	movs	r3, #0
 8002234:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800223a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800223e:	65fb      	str	r3, [r7, #92]	; 0x5c
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002240:	2300      	movs	r3, #0
 8002242:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8002246:	463b      	mov	r3, r7
 8002248:	4618      	mov	r0, r3
 800224a:	f009 fb5b 	bl	800b904 <HAL_RCCEx_PeriphCLKConfig>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <PeriphCommonClock_Config+0x5c>
		Error_Handler();
 8002254:	f000 fee4 	bl	8003020 <Error_Handler>
	}
}
 8002258:	bf00      	nop
 800225a:	37b8      	adds	r7, #184	; 0xb8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002260:	b580      	push	{r7, lr}
 8002262:	b08c      	sub	sp, #48	; 0x30
 8002264:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8002266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	605a      	str	r2, [r3, #4]
 8002270:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002272:	463b      	mov	r3, r7
 8002274:	2224      	movs	r2, #36	; 0x24
 8002276:	2100      	movs	r1, #0
 8002278:	4618      	mov	r0, r3
 800227a:	f019 fe4e 	bl	801bf1a <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800227e:	4b31      	ldr	r3, [pc, #196]	; (8002344 <MX_ADC1_Init+0xe4>)
 8002280:	4a31      	ldr	r2, [pc, #196]	; (8002348 <MX_ADC1_Init+0xe8>)
 8002282:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8002284:	4b2f      	ldr	r3, [pc, #188]	; (8002344 <MX_ADC1_Init+0xe4>)
 8002286:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 800228a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800228c:	4b2d      	ldr	r3, [pc, #180]	; (8002344 <MX_ADC1_Init+0xe4>)
 800228e:	2200      	movs	r2, #0
 8002290:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002292:	4b2c      	ldr	r3, [pc, #176]	; (8002344 <MX_ADC1_Init+0xe4>)
 8002294:	2200      	movs	r2, #0
 8002296:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002298:	4b2a      	ldr	r3, [pc, #168]	; (8002344 <MX_ADC1_Init+0xe4>)
 800229a:	2204      	movs	r2, #4
 800229c:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800229e:	4b29      	ldr	r3, [pc, #164]	; (8002344 <MX_ADC1_Init+0xe4>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80022a4:	4b27      	ldr	r3, [pc, #156]	; (8002344 <MX_ADC1_Init+0xe4>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 80022aa:	4b26      	ldr	r3, [pc, #152]	; (8002344 <MX_ADC1_Init+0xe4>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022b0:	4b24      	ldr	r3, [pc, #144]	; (8002344 <MX_ADC1_Init+0xe4>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022b8:	4b22      	ldr	r3, [pc, #136]	; (8002344 <MX_ADC1_Init+0xe4>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022be:	4b21      	ldr	r3, [pc, #132]	; (8002344 <MX_ADC1_Init+0xe4>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80022c4:	4b1f      	ldr	r3, [pc, #124]	; (8002344 <MX_ADC1_Init+0xe4>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80022ca:	4b1e      	ldr	r3, [pc, #120]	; (8002344 <MX_ADC1_Init+0xe4>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80022d0:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <MX_ADC1_Init+0xe4>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	641a      	str	r2, [r3, #64]	; 0x40
	hadc1.Init.OversamplingMode = DISABLE;
 80022d6:	4b1b      	ldr	r3, [pc, #108]	; (8002344 <MX_ADC1_Init+0xe4>)
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80022de:	4819      	ldr	r0, [pc, #100]	; (8002344 <MX_ADC1_Init+0xe4>)
 80022e0:	f002 fb0a 	bl	80048f8 <HAL_ADC_Init>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_ADC1_Init+0x8e>
		Error_Handler();
 80022ea:	f000 fe99 	bl	8003020 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80022ee:	2300      	movs	r3, #0
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80022f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f6:	4619      	mov	r1, r3
 80022f8:	4812      	ldr	r0, [pc, #72]	; (8002344 <MX_ADC1_Init+0xe4>)
 80022fa:	f003 feeb 	bl	80060d4 <HAL_ADCEx_MultiModeConfigChannel>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_ADC1_Init+0xa8>
		Error_Handler();
 8002304:	f000 fe8c 	bl	8003020 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 8002308:	4b10      	ldr	r3, [pc, #64]	; (800234c <MX_ADC1_Init+0xec>)
 800230a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800230c:	2306      	movs	r3, #6
 800230e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8002310:	2303      	movs	r3, #3
 8002312:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002314:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002318:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800231a:	2304      	movs	r3, #4
 800231c:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 8002322:	2300      	movs	r3, #0
 8002324:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002328:	463b      	mov	r3, r7
 800232a:	4619      	mov	r1, r3
 800232c:	4805      	ldr	r0, [pc, #20]	; (8002344 <MX_ADC1_Init+0xe4>)
 800232e:	f002 feeb 	bl	8005108 <HAL_ADC_ConfigChannel>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_ADC1_Init+0xdc>
		Error_Handler();
 8002338:	f000 fe72 	bl	8003020 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800233c:	bf00      	nop
 800233e:	3730      	adds	r7, #48	; 0x30
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	24000c6c 	.word	0x24000c6c
 8002348:	40022000 	.word	0x40022000
 800234c:	3ac04000 	.word	0x3ac04000

08002350 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 8002350:	b580      	push	{r7, lr}
 8002352:	b08a      	sub	sp, #40	; 0x28
 8002354:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002356:	1d3b      	adds	r3, r7, #4
 8002358:	2224      	movs	r2, #36	; 0x24
 800235a:	2100      	movs	r1, #0
 800235c:	4618      	mov	r0, r3
 800235e:	f019 fddc 	bl	801bf1a <memset>

	/* USER CODE END ADC3_Init 1 */

	/** Common config
	 */
	hadc3.Instance = ADC3;
 8002362:	4b2f      	ldr	r3, [pc, #188]	; (8002420 <MX_ADC3_Init+0xd0>)
 8002364:	4a2f      	ldr	r2, [pc, #188]	; (8002424 <MX_ADC3_Init+0xd4>)
 8002366:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8002368:	4b2d      	ldr	r3, [pc, #180]	; (8002420 <MX_ADC3_Init+0xd0>)
 800236a:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 800236e:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002370:	4b2b      	ldr	r3, [pc, #172]	; (8002420 <MX_ADC3_Init+0xd0>)
 8002372:	2208      	movs	r2, #8
 8002374:	609a      	str	r2, [r3, #8]
	hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8002376:	4b2a      	ldr	r3, [pc, #168]	; (8002420 <MX_ADC3_Init+0xd0>)
 8002378:	2200      	movs	r2, #0
 800237a:	60da      	str	r2, [r3, #12]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800237c:	4b28      	ldr	r3, [pc, #160]	; (8002420 <MX_ADC3_Init+0xd0>)
 800237e:	2200      	movs	r2, #0
 8002380:	611a      	str	r2, [r3, #16]
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002382:	4b27      	ldr	r3, [pc, #156]	; (8002420 <MX_ADC3_Init+0xd0>)
 8002384:	2204      	movs	r2, #4
 8002386:	615a      	str	r2, [r3, #20]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 8002388:	4b25      	ldr	r3, [pc, #148]	; (8002420 <MX_ADC3_Init+0xd0>)
 800238a:	2200      	movs	r2, #0
 800238c:	761a      	strb	r2, [r3, #24]
	hadc3.Init.ContinuousConvMode = DISABLE;
 800238e:	4b24      	ldr	r3, [pc, #144]	; (8002420 <MX_ADC3_Init+0xd0>)
 8002390:	2200      	movs	r2, #0
 8002392:	765a      	strb	r2, [r3, #25]
	hadc3.Init.NbrOfConversion = 1;
 8002394:	4b22      	ldr	r3, [pc, #136]	; (8002420 <MX_ADC3_Init+0xd0>)
 8002396:	2201      	movs	r2, #1
 8002398:	61da      	str	r2, [r3, #28]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 800239a:	4b21      	ldr	r3, [pc, #132]	; (8002420 <MX_ADC3_Init+0xd0>)
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023a2:	4b1f      	ldr	r3, [pc, #124]	; (8002420 <MX_ADC3_Init+0xd0>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023a8:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <MX_ADC3_Init+0xd0>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.DMAContinuousRequests = ENABLE;
 80023ae:	4b1c      	ldr	r3, [pc, #112]	; (8002420 <MX_ADC3_Init+0xd0>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80023b6:	4b1a      	ldr	r3, [pc, #104]	; (8002420 <MX_ADC3_Init+0xd0>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	635a      	str	r2, [r3, #52]	; 0x34
	hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80023bc:	4b18      	ldr	r3, [pc, #96]	; (8002420 <MX_ADC3_Init+0xd0>)
 80023be:	2200      	movs	r2, #0
 80023c0:	631a      	str	r2, [r3, #48]	; 0x30
	hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80023c2:	4b17      	ldr	r3, [pc, #92]	; (8002420 <MX_ADC3_Init+0xd0>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80023c8:	4b15      	ldr	r3, [pc, #84]	; (8002420 <MX_ADC3_Init+0xd0>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40
	hadc3.Init.OversamplingMode = DISABLE;
 80023ce:	4b14      	ldr	r3, [pc, #80]	; (8002420 <MX_ADC3_Init+0xd0>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 80023d6:	4812      	ldr	r0, [pc, #72]	; (8002420 <MX_ADC3_Init+0xd0>)
 80023d8:	f002 fa8e 	bl	80048f8 <HAL_ADC_Init>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_ADC3_Init+0x96>
		Error_Handler();
 80023e2:	f000 fe1d 	bl	8003020 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80023e6:	4b10      	ldr	r3, [pc, #64]	; (8002428 <MX_ADC3_Init+0xd8>)
 80023e8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80023ea:	2306      	movs	r3, #6
 80023ec:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80023f2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80023f6:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80023f8:	2304      	movs	r3, #4
 80023fa:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8002400:	2300      	movs	r3, #0
 8002402:	623b      	str	r3, [r7, #32]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8002404:	1d3b      	adds	r3, r7, #4
 8002406:	4619      	mov	r1, r3
 8002408:	4805      	ldr	r0, [pc, #20]	; (8002420 <MX_ADC3_Init+0xd0>)
 800240a:	f002 fe7d 	bl	8005108 <HAL_ADC_ConfigChannel>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_ADC3_Init+0xc8>
		Error_Handler();
 8002414:	f000 fe04 	bl	8003020 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8002418:	bf00      	nop
 800241a:	3728      	adds	r7, #40	; 0x28
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	24000cdc 	.word	0x24000cdc
 8002424:	58026000 	.word	0x58026000
 8002428:	04300002 	.word	0x04300002

0800242c <MX_FDCAN3_Init>:
/**
 * @brief FDCAN3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN3_Init(void) {
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN3_Init 0 */

	/* USER CODE BEGIN FDCAN3_Init 1 */

	/* USER CODE END FDCAN3_Init 1 */
	hfdcan3.Instance = FDCAN3;
 8002430:	4b2e      	ldr	r3, [pc, #184]	; (80024ec <MX_FDCAN3_Init+0xc0>)
 8002432:	4a2f      	ldr	r2, [pc, #188]	; (80024f0 <MX_FDCAN3_Init+0xc4>)
 8002434:	601a      	str	r2, [r3, #0]
	hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002436:	4b2d      	ldr	r3, [pc, #180]	; (80024ec <MX_FDCAN3_Init+0xc0>)
 8002438:	2200      	movs	r2, #0
 800243a:	609a      	str	r2, [r3, #8]
	hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 800243c:	4b2b      	ldr	r3, [pc, #172]	; (80024ec <MX_FDCAN3_Init+0xc0>)
 800243e:	2200      	movs	r2, #0
 8002440:	60da      	str	r2, [r3, #12]
	hfdcan3.Init.AutoRetransmission = DISABLE;
 8002442:	4b2a      	ldr	r3, [pc, #168]	; (80024ec <MX_FDCAN3_Init+0xc0>)
 8002444:	2200      	movs	r2, #0
 8002446:	741a      	strb	r2, [r3, #16]
	hfdcan3.Init.TransmitPause = DISABLE;
 8002448:	4b28      	ldr	r3, [pc, #160]	; (80024ec <MX_FDCAN3_Init+0xc0>)
 800244a:	2200      	movs	r2, #0
 800244c:	745a      	strb	r2, [r3, #17]
	hfdcan3.Init.ProtocolException = DISABLE;
 800244e:	4b27      	ldr	r3, [pc, #156]	; (80024ec <MX_FDCAN3_Init+0xc0>)
 8002450:	2200      	movs	r2, #0
 8002452:	749a      	strb	r2, [r3, #18]
	hfdcan3.Init.NominalPrescaler = 16;
 8002454:	4b25      	ldr	r3, [pc, #148]	; (80024ec <MX_FDCAN3_Init+0xc0>)
 8002456:	2210      	movs	r2, #16
 8002458:	615a      	str	r2, [r3, #20]
	hfdcan3.Init.NominalSyncJumpWidth = 1;
 800245a:	4b24      	ldr	r3, [pc, #144]	; (80024ec <MX_FDCAN3_Init+0xc0>)
 800245c:	2201      	movs	r2, #1
 800245e:	619a      	str	r2, [r3, #24]
	hfdcan3.Init.NominalTimeSeg1 = 2;
 8002460:	4b22      	ldr	r3, [pc, #136]	; (80024ec <MX_FDCAN3_Init+0xc0>)
 8002462:	2202      	movs	r2, #2
 8002464:	61da      	str	r2, [r3, #28]
	hfdcan3.Init.NominalTimeSeg2 = 2;
 8002466:	4b21      	ldr	r3, [pc, #132]	; (80024ec <MX_FDCAN3_Init+0xc0>)
 8002468:	2202      	movs	r2, #2
 800246a:	621a      	str	r2, [r3, #32]
	hfdcan3.Init.DataPrescaler = 1;
 800246c:	4b1f      	ldr	r3, [pc, #124]	; (80024ec <MX_FDCAN3_Init+0xc0>)
 800246e:	2201      	movs	r2, #1
 8002470:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan3.Init.DataSyncJumpWidth = 1;
 8002472:	4b1e      	ldr	r3, [pc, #120]	; (80024ec <MX_FDCAN3_Init+0xc0>)
 8002474:	2201      	movs	r2, #1
 8002476:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan3.Init.DataTimeSeg1 = 1;
 8002478:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <MX_FDCAN3_Init+0xc0>)
 800247a:	2201      	movs	r2, #1
 800247c:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan3.Init.DataTimeSeg2 = 1;
 800247e:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <MX_FDCAN3_Init+0xc0>)
 8002480:	2201      	movs	r2, #1
 8002482:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan3.Init.MessageRAMOffset = 0;
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <MX_FDCAN3_Init+0xc0>)
 8002486:	2200      	movs	r2, #0
 8002488:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan3.Init.StdFiltersNbr = 0;
 800248a:	4b18      	ldr	r3, [pc, #96]	; (80024ec <MX_FDCAN3_Init+0xc0>)
 800248c:	2200      	movs	r2, #0
 800248e:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan3.Init.ExtFiltersNbr = 0;
 8002490:	4b16      	ldr	r3, [pc, #88]	; (80024ec <MX_FDCAN3_Init+0xc0>)
 8002492:	2200      	movs	r2, #0
 8002494:	63da      	str	r2, [r3, #60]	; 0x3c
	hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8002496:	4b15      	ldr	r3, [pc, #84]	; (80024ec <MX_FDCAN3_Init+0xc0>)
 8002498:	2200      	movs	r2, #0
 800249a:	641a      	str	r2, [r3, #64]	; 0x40
	hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800249c:	4b13      	ldr	r3, [pc, #76]	; (80024ec <MX_FDCAN3_Init+0xc0>)
 800249e:	2204      	movs	r2, #4
 80024a0:	645a      	str	r2, [r3, #68]	; 0x44
	hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 80024a2:	4b12      	ldr	r3, [pc, #72]	; (80024ec <MX_FDCAN3_Init+0xc0>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	649a      	str	r2, [r3, #72]	; 0x48
	hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80024a8:	4b10      	ldr	r3, [pc, #64]	; (80024ec <MX_FDCAN3_Init+0xc0>)
 80024aa:	2204      	movs	r2, #4
 80024ac:	64da      	str	r2, [r3, #76]	; 0x4c
	hfdcan3.Init.RxBuffersNbr = 0;
 80024ae:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <MX_FDCAN3_Init+0xc0>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	651a      	str	r2, [r3, #80]	; 0x50
	hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80024b4:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <MX_FDCAN3_Init+0xc0>)
 80024b6:	2204      	movs	r2, #4
 80024b8:	655a      	str	r2, [r3, #84]	; 0x54
	hfdcan3.Init.TxEventsNbr = 0;
 80024ba:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <MX_FDCAN3_Init+0xc0>)
 80024bc:	2200      	movs	r2, #0
 80024be:	659a      	str	r2, [r3, #88]	; 0x58
	hfdcan3.Init.TxBuffersNbr = 0;
 80024c0:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <MX_FDCAN3_Init+0xc0>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	65da      	str	r2, [r3, #92]	; 0x5c
	hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 80024c6:	4b09      	ldr	r3, [pc, #36]	; (80024ec <MX_FDCAN3_Init+0xc0>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	661a      	str	r2, [r3, #96]	; 0x60
	hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80024cc:	4b07      	ldr	r3, [pc, #28]	; (80024ec <MX_FDCAN3_Init+0xc0>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	665a      	str	r2, [r3, #100]	; 0x64
	hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <MX_FDCAN3_Init+0xc0>)
 80024d4:	2204      	movs	r2, #4
 80024d6:	669a      	str	r2, [r3, #104]	; 0x68
	if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK) {
 80024d8:	4804      	ldr	r0, [pc, #16]	; (80024ec <MX_FDCAN3_Init+0xc0>)
 80024da:	f006 f8c1 	bl	8008660 <HAL_FDCAN_Init>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_FDCAN3_Init+0xbc>
		Error_Handler();
 80024e4:	f000 fd9c 	bl	8003020 <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN3_Init 2 */

	/* USER CODE END FDCAN3_Init 2 */

}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	24000e3c 	.word	0x24000e3c
 80024f0:	4000d400 	.word	0x4000d400

080024f4 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80024f8:	4b1b      	ldr	r3, [pc, #108]	; (8002568 <MX_I2C2_Init+0x74>)
 80024fa:	4a1c      	ldr	r2, [pc, #112]	; (800256c <MX_I2C2_Init+0x78>)
 80024fc:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x20303E5D;
 80024fe:	4b1a      	ldr	r3, [pc, #104]	; (8002568 <MX_I2C2_Init+0x74>)
 8002500:	4a1b      	ldr	r2, [pc, #108]	; (8002570 <MX_I2C2_Init+0x7c>)
 8002502:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8002504:	4b18      	ldr	r3, [pc, #96]	; (8002568 <MX_I2C2_Init+0x74>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800250a:	4b17      	ldr	r3, [pc, #92]	; (8002568 <MX_I2C2_Init+0x74>)
 800250c:	2201      	movs	r2, #1
 800250e:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002510:	4b15      	ldr	r3, [pc, #84]	; (8002568 <MX_I2C2_Init+0x74>)
 8002512:	2200      	movs	r2, #0
 8002514:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8002516:	4b14      	ldr	r3, [pc, #80]	; (8002568 <MX_I2C2_Init+0x74>)
 8002518:	2200      	movs	r2, #0
 800251a:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800251c:	4b12      	ldr	r3, [pc, #72]	; (8002568 <MX_I2C2_Init+0x74>)
 800251e:	2200      	movs	r2, #0
 8002520:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002522:	4b11      	ldr	r3, [pc, #68]	; (8002568 <MX_I2C2_Init+0x74>)
 8002524:	2200      	movs	r2, #0
 8002526:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002528:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <MX_I2C2_Init+0x74>)
 800252a:	2200      	movs	r2, #0
 800252c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 800252e:	480e      	ldr	r0, [pc, #56]	; (8002568 <MX_I2C2_Init+0x74>)
 8002530:	f006 fdd4 	bl	80090dc <HAL_I2C_Init>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_I2C2_Init+0x4a>
		Error_Handler();
 800253a:	f000 fd71 	bl	8003020 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 800253e:	2100      	movs	r1, #0
 8002540:	4809      	ldr	r0, [pc, #36]	; (8002568 <MX_I2C2_Init+0x74>)
 8002542:	f006 fe75 	bl	8009230 <HAL_I2CEx_ConfigAnalogFilter>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 800254c:	f000 fd68 	bl	8003020 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8002550:	2100      	movs	r1, #0
 8002552:	4805      	ldr	r0, [pc, #20]	; (8002568 <MX_I2C2_Init+0x74>)
 8002554:	f006 feb7 	bl	80092c6 <HAL_I2CEx_ConfigDigitalFilter>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_I2C2_Init+0x6e>
		Error_Handler();
 800255e:	f000 fd5f 	bl	8003020 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	24000edc 	.word	0x24000edc
 800256c:	40005800 	.word	0x40005800
 8002570:	20303e5d 	.word	0x20303e5d

08002574 <MX_SDMMC2_SD_Init>:
/**
 * @brief SDMMC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC2_SD_Init(void) {
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC2_Init 0 */

	/* USER CODE BEGIN SDMMC2_Init 1 */

	/* USER CODE END SDMMC2_Init 1 */
	hsd2.Instance = SDMMC2;
 8002578:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <MX_SDMMC2_SD_Init+0x34>)
 800257a:	4a0c      	ldr	r2, [pc, #48]	; (80025ac <MX_SDMMC2_SD_Init+0x38>)
 800257c:	601a      	str	r2, [r3, #0]
	hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800257e:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <MX_SDMMC2_SD_Init+0x34>)
 8002580:	2200      	movs	r2, #0
 8002582:	605a      	str	r2, [r3, #4]
	hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002584:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <MX_SDMMC2_SD_Init+0x34>)
 8002586:	2200      	movs	r2, #0
 8002588:	609a      	str	r2, [r3, #8]
	hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800258a:	4b07      	ldr	r3, [pc, #28]	; (80025a8 <MX_SDMMC2_SD_Init+0x34>)
 800258c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002590:	60da      	str	r2, [r3, #12]
	hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002592:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <MX_SDMMC2_SD_Init+0x34>)
 8002594:	2200      	movs	r2, #0
 8002596:	611a      	str	r2, [r3, #16]
	hsd2.Init.ClockDiv = 8;
 8002598:	4b03      	ldr	r3, [pc, #12]	; (80025a8 <MX_SDMMC2_SD_Init+0x34>)
 800259a:	2208      	movs	r2, #8
 800259c:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN SDMMC2_Init 2 */

	/* USER CODE END SDMMC2_Init 2 */

}
 800259e:	bf00      	nop
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	24000f30 	.word	0x24000f30
 80025ac:	48022400 	.word	0x48022400

080025b0 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80025b4:	4b27      	ldr	r3, [pc, #156]	; (8002654 <MX_SPI1_Init+0xa4>)
 80025b6:	4a28      	ldr	r2, [pc, #160]	; (8002658 <MX_SPI1_Init+0xa8>)
 80025b8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80025ba:	4b26      	ldr	r3, [pc, #152]	; (8002654 <MX_SPI1_Init+0xa4>)
 80025bc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80025c0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025c2:	4b24      	ldr	r3, [pc, #144]	; (8002654 <MX_SPI1_Init+0xa4>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025c8:	4b22      	ldr	r3, [pc, #136]	; (8002654 <MX_SPI1_Init+0xa4>)
 80025ca:	2207      	movs	r2, #7
 80025cc:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025ce:	4b21      	ldr	r3, [pc, #132]	; (8002654 <MX_SPI1_Init+0xa4>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025d4:	4b1f      	ldr	r3, [pc, #124]	; (8002654 <MX_SPI1_Init+0xa4>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80025da:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <MX_SPI1_Init+0xa4>)
 80025dc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025e0:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80025e2:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <MX_SPI1_Init+0xa4>)
 80025e4:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80025e8:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025ea:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <MX_SPI1_Init+0xa4>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025f0:	4b18      	ldr	r3, [pc, #96]	; (8002654 <MX_SPI1_Init+0xa4>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025f6:	4b17      	ldr	r3, [pc, #92]	; (8002654 <MX_SPI1_Init+0xa4>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 80025fc:	4b15      	ldr	r3, [pc, #84]	; (8002654 <MX_SPI1_Init+0xa4>)
 80025fe:	2200      	movs	r2, #0
 8002600:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002602:	4b14      	ldr	r3, [pc, #80]	; (8002654 <MX_SPI1_Init+0xa4>)
 8002604:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002608:	635a      	str	r2, [r3, #52]	; 0x34
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800260a:	4b12      	ldr	r3, [pc, #72]	; (8002654 <MX_SPI1_Init+0xa4>)
 800260c:	2200      	movs	r2, #0
 800260e:	639a      	str	r2, [r3, #56]	; 0x38
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002610:	4b10      	ldr	r3, [pc, #64]	; (8002654 <MX_SPI1_Init+0xa4>)
 8002612:	2200      	movs	r2, #0
 8002614:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi1.Init.TxCRCInitializationPattern =
 8002616:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <MX_SPI1_Init+0xa4>)
 8002618:	2200      	movs	r2, #0
 800261a:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.RxCRCInitializationPattern =
 800261c:	4b0d      	ldr	r3, [pc, #52]	; (8002654 <MX_SPI1_Init+0xa4>)
 800261e:	2200      	movs	r2, #0
 8002620:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002622:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <MX_SPI1_Init+0xa4>)
 8002624:	2200      	movs	r2, #0
 8002626:	649a      	str	r2, [r3, #72]	; 0x48
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002628:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <MX_SPI1_Init+0xa4>)
 800262a:	2200      	movs	r2, #0
 800262c:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800262e:	4b09      	ldr	r3, [pc, #36]	; (8002654 <MX_SPI1_Init+0xa4>)
 8002630:	2200      	movs	r2, #0
 8002632:	651a      	str	r2, [r3, #80]	; 0x50
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002634:	4b07      	ldr	r3, [pc, #28]	; (8002654 <MX_SPI1_Init+0xa4>)
 8002636:	2200      	movs	r2, #0
 8002638:	655a      	str	r2, [r3, #84]	; 0x54
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800263a:	4b06      	ldr	r3, [pc, #24]	; (8002654 <MX_SPI1_Init+0xa4>)
 800263c:	2200      	movs	r2, #0
 800263e:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002640:	4804      	ldr	r0, [pc, #16]	; (8002654 <MX_SPI1_Init+0xa4>)
 8002642:	f00d f9a9 	bl	800f998 <HAL_SPI_Init>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <MX_SPI1_Init+0xa0>
		Error_Handler();
 800264c:	f000 fce8 	bl	8003020 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}
 8002654:	24000fac 	.word	0x24000fac
 8002658:	40013000 	.word	0x40013000

0800265c <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8002660:	4b27      	ldr	r3, [pc, #156]	; (8002700 <MX_SPI2_Init+0xa4>)
 8002662:	4a28      	ldr	r2, [pc, #160]	; (8002704 <MX_SPI2_Init+0xa8>)
 8002664:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8002666:	4b26      	ldr	r3, [pc, #152]	; (8002700 <MX_SPI2_Init+0xa4>)
 8002668:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800266c:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800266e:	4b24      	ldr	r3, [pc, #144]	; (8002700 <MX_SPI2_Init+0xa4>)
 8002670:	2200      	movs	r2, #0
 8002672:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002674:	4b22      	ldr	r3, [pc, #136]	; (8002700 <MX_SPI2_Init+0xa4>)
 8002676:	2207      	movs	r2, #7
 8002678:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800267a:	4b21      	ldr	r3, [pc, #132]	; (8002700 <MX_SPI2_Init+0xa4>)
 800267c:	2200      	movs	r2, #0
 800267e:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002680:	4b1f      	ldr	r3, [pc, #124]	; (8002700 <MX_SPI2_Init+0xa4>)
 8002682:	2200      	movs	r2, #0
 8002684:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8002686:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <MX_SPI2_Init+0xa4>)
 8002688:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800268c:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800268e:	4b1c      	ldr	r3, [pc, #112]	; (8002700 <MX_SPI2_Init+0xa4>)
 8002690:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002694:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002696:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <MX_SPI2_Init+0xa4>)
 8002698:	2200      	movs	r2, #0
 800269a:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800269c:	4b18      	ldr	r3, [pc, #96]	; (8002700 <MX_SPI2_Init+0xa4>)
 800269e:	2200      	movs	r2, #0
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026a2:	4b17      	ldr	r3, [pc, #92]	; (8002700 <MX_SPI2_Init+0xa4>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0x0;
 80026a8:	4b15      	ldr	r3, [pc, #84]	; (8002700 <MX_SPI2_Init+0xa4>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80026ae:	4b14      	ldr	r3, [pc, #80]	; (8002700 <MX_SPI2_Init+0xa4>)
 80026b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026b4:	635a      	str	r2, [r3, #52]	; 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80026b6:	4b12      	ldr	r3, [pc, #72]	; (8002700 <MX_SPI2_Init+0xa4>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	639a      	str	r2, [r3, #56]	; 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80026bc:	4b10      	ldr	r3, [pc, #64]	; (8002700 <MX_SPI2_Init+0xa4>)
 80026be:	2200      	movs	r2, #0
 80026c0:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi2.Init.TxCRCInitializationPattern =
 80026c2:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <MX_SPI2_Init+0xa4>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.RxCRCInitializationPattern =
 80026c8:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <MX_SPI2_Init+0xa4>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80026ce:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <MX_SPI2_Init+0xa4>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	649a      	str	r2, [r3, #72]	; 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80026d4:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <MX_SPI2_Init+0xa4>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80026da:	4b09      	ldr	r3, [pc, #36]	; (8002700 <MX_SPI2_Init+0xa4>)
 80026dc:	2200      	movs	r2, #0
 80026de:	651a      	str	r2, [r3, #80]	; 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80026e0:	4b07      	ldr	r3, [pc, #28]	; (8002700 <MX_SPI2_Init+0xa4>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	655a      	str	r2, [r3, #84]	; 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80026e6:	4b06      	ldr	r3, [pc, #24]	; (8002700 <MX_SPI2_Init+0xa4>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80026ec:	4804      	ldr	r0, [pc, #16]	; (8002700 <MX_SPI2_Init+0xa4>)
 80026ee:	f00d f953 	bl	800f998 <HAL_SPI_Init>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <MX_SPI2_Init+0xa0>
		Error_Handler();
 80026f8:	f000 fc92 	bl	8003020 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80026fc:	bf00      	nop
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	24001034 	.word	0x24001034
 8002704:	40003800 	.word	0x40003800

08002708 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 800270c:	4b27      	ldr	r3, [pc, #156]	; (80027ac <MX_SPI3_Init+0xa4>)
 800270e:	4a28      	ldr	r2, [pc, #160]	; (80027b0 <MX_SPI3_Init+0xa8>)
 8002710:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8002712:	4b26      	ldr	r3, [pc, #152]	; (80027ac <MX_SPI3_Init+0xa4>)
 8002714:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002718:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800271a:	4b24      	ldr	r3, [pc, #144]	; (80027ac <MX_SPI3_Init+0xa4>)
 800271c:	2200      	movs	r2, #0
 800271e:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002720:	4b22      	ldr	r3, [pc, #136]	; (80027ac <MX_SPI3_Init+0xa4>)
 8002722:	2207      	movs	r2, #7
 8002724:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002726:	4b21      	ldr	r3, [pc, #132]	; (80027ac <MX_SPI3_Init+0xa4>)
 8002728:	2200      	movs	r2, #0
 800272a:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800272c:	4b1f      	ldr	r3, [pc, #124]	; (80027ac <MX_SPI3_Init+0xa4>)
 800272e:	2200      	movs	r2, #0
 8002730:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8002732:	4b1e      	ldr	r3, [pc, #120]	; (80027ac <MX_SPI3_Init+0xa4>)
 8002734:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002738:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800273a:	4b1c      	ldr	r3, [pc, #112]	; (80027ac <MX_SPI3_Init+0xa4>)
 800273c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002740:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002742:	4b1a      	ldr	r3, [pc, #104]	; (80027ac <MX_SPI3_Init+0xa4>)
 8002744:	2200      	movs	r2, #0
 8002746:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002748:	4b18      	ldr	r3, [pc, #96]	; (80027ac <MX_SPI3_Init+0xa4>)
 800274a:	2200      	movs	r2, #0
 800274c:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800274e:	4b17      	ldr	r3, [pc, #92]	; (80027ac <MX_SPI3_Init+0xa4>)
 8002750:	2200      	movs	r2, #0
 8002752:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 0x0;
 8002754:	4b15      	ldr	r3, [pc, #84]	; (80027ac <MX_SPI3_Init+0xa4>)
 8002756:	2200      	movs	r2, #0
 8002758:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800275a:	4b14      	ldr	r3, [pc, #80]	; (80027ac <MX_SPI3_Init+0xa4>)
 800275c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002760:	635a      	str	r2, [r3, #52]	; 0x34
	hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002762:	4b12      	ldr	r3, [pc, #72]	; (80027ac <MX_SPI3_Init+0xa4>)
 8002764:	2200      	movs	r2, #0
 8002766:	639a      	str	r2, [r3, #56]	; 0x38
	hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002768:	4b10      	ldr	r3, [pc, #64]	; (80027ac <MX_SPI3_Init+0xa4>)
 800276a:	2200      	movs	r2, #0
 800276c:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi3.Init.TxCRCInitializationPattern =
 800276e:	4b0f      	ldr	r3, [pc, #60]	; (80027ac <MX_SPI3_Init+0xa4>)
 8002770:	2200      	movs	r2, #0
 8002772:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi3.Init.RxCRCInitializationPattern =
 8002774:	4b0d      	ldr	r3, [pc, #52]	; (80027ac <MX_SPI3_Init+0xa4>)
 8002776:	2200      	movs	r2, #0
 8002778:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800277a:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <MX_SPI3_Init+0xa4>)
 800277c:	2200      	movs	r2, #0
 800277e:	649a      	str	r2, [r3, #72]	; 0x48
	hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002780:	4b0a      	ldr	r3, [pc, #40]	; (80027ac <MX_SPI3_Init+0xa4>)
 8002782:	2200      	movs	r2, #0
 8002784:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002786:	4b09      	ldr	r3, [pc, #36]	; (80027ac <MX_SPI3_Init+0xa4>)
 8002788:	2200      	movs	r2, #0
 800278a:	651a      	str	r2, [r3, #80]	; 0x50
	hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800278c:	4b07      	ldr	r3, [pc, #28]	; (80027ac <MX_SPI3_Init+0xa4>)
 800278e:	2200      	movs	r2, #0
 8002790:	655a      	str	r2, [r3, #84]	; 0x54
	hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002792:	4b06      	ldr	r3, [pc, #24]	; (80027ac <MX_SPI3_Init+0xa4>)
 8002794:	2200      	movs	r2, #0
 8002796:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8002798:	4804      	ldr	r0, [pc, #16]	; (80027ac <MX_SPI3_Init+0xa4>)
 800279a:	f00d f8fd 	bl	800f998 <HAL_SPI_Init>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <MX_SPI3_Init+0xa0>
		Error_Handler();
 80027a4:	f000 fc3c 	bl	8003020 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 80027a8:	bf00      	nop
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	240010bc 	.word	0x240010bc
 80027b0:	40003c00 	.word	0x40003c00

080027b4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08a      	sub	sp, #40	; 0x28
 80027b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80027ba:	f107 031c 	add.w	r3, r7, #28
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	605a      	str	r2, [r3, #4]
 80027c4:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80027c6:	463b      	mov	r3, r7
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	60da      	str	r2, [r3, #12]
 80027d2:	611a      	str	r2, [r3, #16]
 80027d4:	615a      	str	r2, [r3, #20]
 80027d6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80027d8:	4b21      	ldr	r3, [pc, #132]	; (8002860 <MX_TIM2_Init+0xac>)
 80027da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027de:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80027e0:	4b1f      	ldr	r3, [pc, #124]	; (8002860 <MX_TIM2_Init+0xac>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e6:	4b1e      	ldr	r3, [pc, #120]	; (8002860 <MX_TIM2_Init+0xac>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 90;
 80027ec:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <MX_TIM2_Init+0xac>)
 80027ee:	225a      	movs	r2, #90	; 0x5a
 80027f0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027f2:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <MX_TIM2_Init+0xac>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027f8:	4b19      	ldr	r3, [pc, #100]	; (8002860 <MX_TIM2_Init+0xac>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80027fe:	4818      	ldr	r0, [pc, #96]	; (8002860 <MX_TIM2_Init+0xac>)
 8002800:	f00d feba 	bl	8010578 <HAL_TIM_PWM_Init>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <MX_TIM2_Init+0x5a>
		Error_Handler();
 800280a:	f000 fc09 	bl	8003020 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800280e:	2300      	movs	r3, #0
 8002810:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002812:	2300      	movs	r3, #0
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002816:	f107 031c 	add.w	r3, r7, #28
 800281a:	4619      	mov	r1, r3
 800281c:	4810      	ldr	r0, [pc, #64]	; (8002860 <MX_TIM2_Init+0xac>)
 800281e:	f00f f941 	bl	8011aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_TIM2_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8002828:	f000 fbfa 	bl	8003020 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800282c:	2360      	movs	r3, #96	; 0x60
 800282e:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002834:	2300      	movs	r3, #0
 8002836:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002838:	2300      	movs	r3, #0
 800283a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 800283c:	463b      	mov	r3, r7
 800283e:	2208      	movs	r2, #8
 8002840:	4619      	mov	r1, r3
 8002842:	4807      	ldr	r0, [pc, #28]	; (8002860 <MX_TIM2_Init+0xac>)
 8002844:	f00e fb60 	bl	8010f08 <HAL_TIM_PWM_ConfigChannel>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_TIM2_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 800284e:	f000 fbe7 	bl	8003020 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8002852:	4803      	ldr	r0, [pc, #12]	; (8002860 <MX_TIM2_Init+0xac>)
 8002854:	f001 f91a 	bl	8003a8c <HAL_TIM_MspPostInit>

}
 8002858:	bf00      	nop
 800285a:	3728      	adds	r7, #40	; 0x28
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	24001144 	.word	0x24001144

08002864 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002864:	b580      	push	{r7, lr}
 8002866:	b08a      	sub	sp, #40	; 0x28
 8002868:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800286a:	f107 031c 	add.w	r3, r7, #28
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	605a      	str	r2, [r3, #4]
 8002874:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002876:	463b      	mov	r3, r7
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	605a      	str	r2, [r3, #4]
 800287e:	609a      	str	r2, [r3, #8]
 8002880:	60da      	str	r2, [r3, #12]
 8002882:	611a      	str	r2, [r3, #16]
 8002884:	615a      	str	r2, [r3, #20]
 8002886:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002888:	4b26      	ldr	r3, [pc, #152]	; (8002924 <MX_TIM3_Init+0xc0>)
 800288a:	4a27      	ldr	r2, [pc, #156]	; (8002928 <MX_TIM3_Init+0xc4>)
 800288c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800288e:	4b25      	ldr	r3, [pc, #148]	; (8002924 <MX_TIM3_Init+0xc0>)
 8002890:	2200      	movs	r2, #0
 8002892:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002894:	4b23      	ldr	r3, [pc, #140]	; (8002924 <MX_TIM3_Init+0xc0>)
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 90;
 800289a:	4b22      	ldr	r3, [pc, #136]	; (8002924 <MX_TIM3_Init+0xc0>)
 800289c:	225a      	movs	r2, #90	; 0x5a
 800289e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028a0:	4b20      	ldr	r3, [pc, #128]	; (8002924 <MX_TIM3_Init+0xc0>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028a6:	4b1f      	ldr	r3, [pc, #124]	; (8002924 <MX_TIM3_Init+0xc0>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80028ac:	481d      	ldr	r0, [pc, #116]	; (8002924 <MX_TIM3_Init+0xc0>)
 80028ae:	f00d fe63 	bl	8010578 <HAL_TIM_PWM_Init>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <MX_TIM3_Init+0x58>
		Error_Handler();
 80028b8:	f000 fbb2 	bl	8003020 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028bc:	2300      	movs	r3, #0
 80028be:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028c0:	2300      	movs	r3, #0
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80028c4:	f107 031c 	add.w	r3, r7, #28
 80028c8:	4619      	mov	r1, r3
 80028ca:	4816      	ldr	r0, [pc, #88]	; (8002924 <MX_TIM3_Init+0xc0>)
 80028cc:	f00f f8ea 	bl	8011aa4 <HAL_TIMEx_MasterConfigSynchronization>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <MX_TIM3_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 80028d6:	f000 fba3 	bl	8003020 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028da:	2360      	movs	r3, #96	; 0x60
 80028dc:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80028de:	2300      	movs	r3, #0
 80028e0:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028e2:	2300      	movs	r3, #0
 80028e4:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 80028ea:	463b      	mov	r3, r7
 80028ec:	2200      	movs	r2, #0
 80028ee:	4619      	mov	r1, r3
 80028f0:	480c      	ldr	r0, [pc, #48]	; (8002924 <MX_TIM3_Init+0xc0>)
 80028f2:	f00e fb09 	bl	8010f08 <HAL_TIM_PWM_ConfigChannel>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_TIM3_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 80028fc:	f000 fb90 	bl	8003020 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8002900:	463b      	mov	r3, r7
 8002902:	2204      	movs	r2, #4
 8002904:	4619      	mov	r1, r3
 8002906:	4807      	ldr	r0, [pc, #28]	; (8002924 <MX_TIM3_Init+0xc0>)
 8002908:	f00e fafe 	bl	8010f08 <HAL_TIM_PWM_ConfigChannel>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8002912:	f000 fb85 	bl	8003020 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8002916:	4803      	ldr	r0, [pc, #12]	; (8002924 <MX_TIM3_Init+0xc0>)
 8002918:	f001 f8b8 	bl	8003a8c <HAL_TIM_MspPostInit>

}
 800291c:	bf00      	nop
 800291e:	3728      	adds	r7, #40	; 0x28
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	24001190 	.word	0x24001190
 8002928:	40000400 	.word	0x40000400

0800292c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 800292c:	b580      	push	{r7, lr}
 800292e:	b08a      	sub	sp, #40	; 0x28
 8002930:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002932:	f107 031c 	add.w	r3, r7, #28
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	605a      	str	r2, [r3, #4]
 800293c:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800293e:	463b      	mov	r3, r7
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	611a      	str	r2, [r3, #16]
 800294c:	615a      	str	r2, [r3, #20]
 800294e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8002950:	4b32      	ldr	r3, [pc, #200]	; (8002a1c <MX_TIM4_Init+0xf0>)
 8002952:	4a33      	ldr	r2, [pc, #204]	; (8002a20 <MX_TIM4_Init+0xf4>)
 8002954:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 29;
 8002956:	4b31      	ldr	r3, [pc, #196]	; (8002a1c <MX_TIM4_Init+0xf0>)
 8002958:	221d      	movs	r2, #29
 800295a:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800295c:	4b2f      	ldr	r3, [pc, #188]	; (8002a1c <MX_TIM4_Init+0xf0>)
 800295e:	2200      	movs	r2, #0
 8002960:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 9999;
 8002962:	4b2e      	ldr	r3, [pc, #184]	; (8002a1c <MX_TIM4_Init+0xf0>)
 8002964:	f242 720f 	movw	r2, #9999	; 0x270f
 8002968:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800296a:	4b2c      	ldr	r3, [pc, #176]	; (8002a1c <MX_TIM4_Init+0xf0>)
 800296c:	2200      	movs	r2, #0
 800296e:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002970:	4b2a      	ldr	r3, [pc, #168]	; (8002a1c <MX_TIM4_Init+0xf0>)
 8002972:	2200      	movs	r2, #0
 8002974:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8002976:	4829      	ldr	r0, [pc, #164]	; (8002a1c <MX_TIM4_Init+0xf0>)
 8002978:	f00d fdfe 	bl	8010578 <HAL_TIM_PWM_Init>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <MX_TIM4_Init+0x5a>
		Error_Handler();
 8002982:	f000 fb4d 	bl	8003020 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002986:	2300      	movs	r3, #0
 8002988:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800298a:	2300      	movs	r3, #0
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800298e:	f107 031c 	add.w	r3, r7, #28
 8002992:	4619      	mov	r1, r3
 8002994:	4821      	ldr	r0, [pc, #132]	; (8002a1c <MX_TIM4_Init+0xf0>)
 8002996:	f00f f885 	bl	8011aa4 <HAL_TIMEx_MasterConfigSynchronization>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <MX_TIM4_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 80029a0:	f000 fb3e 	bl	8003020 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029a4:	2360      	movs	r3, #96	; 0x60
 80029a6:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029ac:	2300      	movs	r3, #0
 80029ae:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029b0:	2300      	movs	r3, #0
 80029b2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 80029b4:	463b      	mov	r3, r7
 80029b6:	2200      	movs	r2, #0
 80029b8:	4619      	mov	r1, r3
 80029ba:	4818      	ldr	r0, [pc, #96]	; (8002a1c <MX_TIM4_Init+0xf0>)
 80029bc:	f00e faa4 	bl	8010f08 <HAL_TIM_PWM_ConfigChannel>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <MX_TIM4_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 80029c6:	f000 fb2b 	bl	8003020 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 80029ca:	463b      	mov	r3, r7
 80029cc:	2204      	movs	r2, #4
 80029ce:	4619      	mov	r1, r3
 80029d0:	4812      	ldr	r0, [pc, #72]	; (8002a1c <MX_TIM4_Init+0xf0>)
 80029d2:	f00e fa99 	bl	8010f08 <HAL_TIM_PWM_ConfigChannel>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <MX_TIM4_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 80029dc:	f000 fb20 	bl	8003020 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 80029e0:	463b      	mov	r3, r7
 80029e2:	2208      	movs	r2, #8
 80029e4:	4619      	mov	r1, r3
 80029e6:	480d      	ldr	r0, [pc, #52]	; (8002a1c <MX_TIM4_Init+0xf0>)
 80029e8:	f00e fa8e 	bl	8010f08 <HAL_TIM_PWM_ConfigChannel>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <MX_TIM4_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 80029f2:	f000 fb15 	bl	8003020 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 80029f6:	463b      	mov	r3, r7
 80029f8:	220c      	movs	r2, #12
 80029fa:	4619      	mov	r1, r3
 80029fc:	4807      	ldr	r0, [pc, #28]	; (8002a1c <MX_TIM4_Init+0xf0>)
 80029fe:	f00e fa83 	bl	8010f08 <HAL_TIM_PWM_ConfigChannel>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_TIM4_Init+0xe0>
			!= HAL_OK) {
		Error_Handler();
 8002a08:	f000 fb0a 	bl	8003020 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8002a0c:	4803      	ldr	r0, [pc, #12]	; (8002a1c <MX_TIM4_Init+0xf0>)
 8002a0e:	f001 f83d 	bl	8003a8c <HAL_TIM_MspPostInit>

}
 8002a12:	bf00      	nop
 8002a14:	3728      	adds	r7, #40	; 0x28
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	240011dc 	.word	0x240011dc
 8002a20:	40000800 	.word	0x40000800

08002a24 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08a      	sub	sp, #40	; 0x28
 8002a28:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002a2a:	f107 031c 	add.w	r3, r7, #28
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	605a      	str	r2, [r3, #4]
 8002a34:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002a36:	463b      	mov	r3, r7
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	60da      	str	r2, [r3, #12]
 8002a42:	611a      	str	r2, [r3, #16]
 8002a44:	615a      	str	r2, [r3, #20]
 8002a46:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8002a48:	4b21      	ldr	r3, [pc, #132]	; (8002ad0 <MX_TIM5_Init+0xac>)
 8002a4a:	4a22      	ldr	r2, [pc, #136]	; (8002ad4 <MX_TIM5_Init+0xb0>)
 8002a4c:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8002a4e:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <MX_TIM5_Init+0xac>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a54:	4b1e      	ldr	r3, [pc, #120]	; (8002ad0 <MX_TIM5_Init+0xac>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 90;
 8002a5a:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <MX_TIM5_Init+0xac>)
 8002a5c:	225a      	movs	r2, #90	; 0x5a
 8002a5e:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a60:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <MX_TIM5_Init+0xac>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a66:	4b1a      	ldr	r3, [pc, #104]	; (8002ad0 <MX_TIM5_Init+0xac>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK) {
 8002a6c:	4818      	ldr	r0, [pc, #96]	; (8002ad0 <MX_TIM5_Init+0xac>)
 8002a6e:	f00d fd83 	bl	8010578 <HAL_TIM_PWM_Init>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_TIM5_Init+0x58>
		Error_Handler();
 8002a78:	f000 fad2 	bl	8003020 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a80:	2300      	movs	r3, #0
 8002a82:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8002a84:	f107 031c 	add.w	r3, r7, #28
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4811      	ldr	r0, [pc, #68]	; (8002ad0 <MX_TIM5_Init+0xac>)
 8002a8c:	f00f f80a 	bl	8011aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <MX_TIM5_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 8002a96:	f000 fac3 	bl	8003020 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a9a:	2360      	movs	r3, #96	; 0x60
 8002a9c:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4)
 8002aaa:	463b      	mov	r3, r7
 8002aac:	220c      	movs	r2, #12
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4807      	ldr	r0, [pc, #28]	; (8002ad0 <MX_TIM5_Init+0xac>)
 8002ab2:	f00e fa29 	bl	8010f08 <HAL_TIM_PWM_ConfigChannel>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_TIM5_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 8002abc:	f000 fab0 	bl	8003020 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 8002ac0:	4803      	ldr	r0, [pc, #12]	; (8002ad0 <MX_TIM5_Init+0xac>)
 8002ac2:	f000 ffe3 	bl	8003a8c <HAL_TIM_MspPostInit>

}
 8002ac6:	bf00      	nop
 8002ac8:	3728      	adds	r7, #40	; 0x28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	24001228 	.word	0x24001228
 8002ad4:	40000c00 	.word	0x40000c00

08002ad8 <MX_TIM13_Init>:
/**
 * @brief TIM13 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM13_Init(void) {
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
	/* USER CODE END TIM13_Init 0 */

	/* USER CODE BEGIN TIM13_Init 1 */

	/* USER CODE END TIM13_Init 1 */
	htim13.Instance = TIM13;
 8002adc:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <MX_TIM13_Init+0x40>)
 8002ade:	4a0f      	ldr	r2, [pc, #60]	; (8002b1c <MX_TIM13_Init+0x44>)
 8002ae0:	601a      	str	r2, [r3, #0]
	htim13.Init.Prescaler = 99;
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <MX_TIM13_Init+0x40>)
 8002ae4:	2263      	movs	r2, #99	; 0x63
 8002ae6:	605a      	str	r2, [r3, #4]
	htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <MX_TIM13_Init+0x40>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	609a      	str	r2, [r3, #8]
	htim13.Init.Period = 65535;
 8002aee:	4b0a      	ldr	r3, [pc, #40]	; (8002b18 <MX_TIM13_Init+0x40>)
 8002af0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002af4:	60da      	str	r2, [r3, #12]
	htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002af6:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <MX_TIM13_Init+0x40>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	611a      	str	r2, [r3, #16]
	htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002afc:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <MX_TIM13_Init+0x40>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim13) != HAL_OK) {
 8002b02:	4805      	ldr	r0, [pc, #20]	; (8002b18 <MX_TIM13_Init+0x40>)
 8002b04:	f00d fce1 	bl	80104ca <HAL_TIM_Base_Init>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <MX_TIM13_Init+0x3a>
		Error_Handler();
 8002b0e:	f000 fa87 	bl	8003020 <Error_Handler>
	}
	/* USER CODE BEGIN TIM13_Init 2 */

	/* USER CODE END TIM13_Init 2 */

}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	24001274 	.word	0x24001274
 8002b1c:	40001c00 	.word	0x40001c00

08002b20 <MX_TIM14_Init>:
/**
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void) {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
	/* USER CODE END TIM14_Init 0 */

	/* USER CODE BEGIN TIM14_Init 1 */

	/* USER CODE END TIM14_Init 1 */
	htim14.Instance = TIM14;
 8002b24:	4b0e      	ldr	r3, [pc, #56]	; (8002b60 <MX_TIM14_Init+0x40>)
 8002b26:	4a0f      	ldr	r2, [pc, #60]	; (8002b64 <MX_TIM14_Init+0x44>)
 8002b28:	601a      	str	r2, [r3, #0]
	htim14.Init.Prescaler = 99;
 8002b2a:	4b0d      	ldr	r3, [pc, #52]	; (8002b60 <MX_TIM14_Init+0x40>)
 8002b2c:	2263      	movs	r2, #99	; 0x63
 8002b2e:	605a      	str	r2, [r3, #4]
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b30:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <MX_TIM14_Init+0x40>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	609a      	str	r2, [r3, #8]
	htim14.Init.Period = 65535;
 8002b36:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <MX_TIM14_Init+0x40>)
 8002b38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b3c:	60da      	str	r2, [r3, #12]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b3e:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <MX_TIM14_Init+0x40>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	611a      	str	r2, [r3, #16]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b44:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <MX_TIM14_Init+0x40>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 8002b4a:	4805      	ldr	r0, [pc, #20]	; (8002b60 <MX_TIM14_Init+0x40>)
 8002b4c:	f00d fcbd 	bl	80104ca <HAL_TIM_Base_Init>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <MX_TIM14_Init+0x3a>
		Error_Handler();
 8002b56:	f000 fa63 	bl	8003020 <Error_Handler>
	}
	/* USER CODE BEGIN TIM14_Init 2 */

	/* USER CODE END TIM14_Init 2 */

}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	240012c0 	.word	0x240012c0
 8002b64:	40002000 	.word	0x40002000

08002b68 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8002b6c:	4b22      	ldr	r3, [pc, #136]	; (8002bf8 <MX_UART4_Init+0x90>)
 8002b6e:	4a23      	ldr	r2, [pc, #140]	; (8002bfc <MX_UART4_Init+0x94>)
 8002b70:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8002b72:	4b21      	ldr	r3, [pc, #132]	; (8002bf8 <MX_UART4_Init+0x90>)
 8002b74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b78:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002b7a:	4b1f      	ldr	r3, [pc, #124]	; (8002bf8 <MX_UART4_Init+0x90>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8002b80:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <MX_UART4_Init+0x90>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8002b86:	4b1c      	ldr	r3, [pc, #112]	; (8002bf8 <MX_UART4_Init+0x90>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8002b8c:	4b1a      	ldr	r3, [pc, #104]	; (8002bf8 <MX_UART4_Init+0x90>)
 8002b8e:	220c      	movs	r2, #12
 8002b90:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b92:	4b19      	ldr	r3, [pc, #100]	; (8002bf8 <MX_UART4_Init+0x90>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b98:	4b17      	ldr	r3, [pc, #92]	; (8002bf8 <MX_UART4_Init+0x90>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b9e:	4b16      	ldr	r3, [pc, #88]	; (8002bf8 <MX_UART4_Init+0x90>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ba4:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <MX_UART4_Init+0x90>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	625a      	str	r2, [r3, #36]	; 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002baa:	4b13      	ldr	r3, [pc, #76]	; (8002bf8 <MX_UART4_Init+0x90>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8002bb0:	4811      	ldr	r0, [pc, #68]	; (8002bf8 <MX_UART4_Init+0x90>)
 8002bb2:	f00f f831 	bl	8011c18 <HAL_UART_Init>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_UART4_Init+0x58>
		Error_Handler();
 8002bbc:	f000 fa30 	bl	8003020 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	480d      	ldr	r0, [pc, #52]	; (8002bf8 <MX_UART4_Init+0x90>)
 8002bc4:	f010 f937 	bl	8012e36 <HAL_UARTEx_SetTxFifoThreshold>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <MX_UART4_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8002bce:	f000 fa27 	bl	8003020 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	4808      	ldr	r0, [pc, #32]	; (8002bf8 <MX_UART4_Init+0x90>)
 8002bd6:	f010 f96c 	bl	8012eb2 <HAL_UARTEx_SetRxFifoThreshold>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <MX_UART4_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8002be0:	f000 fa1e 	bl	8003020 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK) {
 8002be4:	4804      	ldr	r0, [pc, #16]	; (8002bf8 <MX_UART4_Init+0x90>)
 8002be6:	f010 f8ed 	bl	8012dc4 <HAL_UARTEx_DisableFifoMode>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <MX_UART4_Init+0x8c>
		Error_Handler();
 8002bf0:	f000 fa16 	bl	8003020 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8002bf4:	bf00      	nop
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	24001564 	.word	0x24001564
 8002bfc:	40004c00 	.word	0x40004c00

08002c00 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8002c04:	4b22      	ldr	r3, [pc, #136]	; (8002c90 <MX_USART6_UART_Init+0x90>)
 8002c06:	4a23      	ldr	r2, [pc, #140]	; (8002c94 <MX_USART6_UART_Init+0x94>)
 8002c08:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8002c0a:	4b21      	ldr	r3, [pc, #132]	; (8002c90 <MX_USART6_UART_Init+0x90>)
 8002c0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c10:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002c12:	4b1f      	ldr	r3, [pc, #124]	; (8002c90 <MX_USART6_UART_Init+0x90>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8002c18:	4b1d      	ldr	r3, [pc, #116]	; (8002c90 <MX_USART6_UART_Init+0x90>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8002c1e:	4b1c      	ldr	r3, [pc, #112]	; (8002c90 <MX_USART6_UART_Init+0x90>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8002c24:	4b1a      	ldr	r3, [pc, #104]	; (8002c90 <MX_USART6_UART_Init+0x90>)
 8002c26:	220c      	movs	r2, #12
 8002c28:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c2a:	4b19      	ldr	r3, [pc, #100]	; (8002c90 <MX_USART6_UART_Init+0x90>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c30:	4b17      	ldr	r3, [pc, #92]	; (8002c90 <MX_USART6_UART_Init+0x90>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c36:	4b16      	ldr	r3, [pc, #88]	; (8002c90 <MX_USART6_UART_Init+0x90>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	621a      	str	r2, [r3, #32]
	huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c3c:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <MX_USART6_UART_Init+0x90>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c42:	4b13      	ldr	r3, [pc, #76]	; (8002c90 <MX_USART6_UART_Init+0x90>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8002c48:	4811      	ldr	r0, [pc, #68]	; (8002c90 <MX_USART6_UART_Init+0x90>)
 8002c4a:	f00e ffe5 	bl	8011c18 <HAL_UART_Init>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <MX_USART6_UART_Init+0x58>
		Error_Handler();
 8002c54:	f000 f9e4 	bl	8003020 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8)
 8002c58:	2100      	movs	r1, #0
 8002c5a:	480d      	ldr	r0, [pc, #52]	; (8002c90 <MX_USART6_UART_Init+0x90>)
 8002c5c:	f010 f8eb 	bl	8012e36 <HAL_UARTEx_SetTxFifoThreshold>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MX_USART6_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8002c66:	f000 f9db 	bl	8003020 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8)
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	4808      	ldr	r0, [pc, #32]	; (8002c90 <MX_USART6_UART_Init+0x90>)
 8002c6e:	f010 f920 	bl	8012eb2 <HAL_UARTEx_SetRxFifoThreshold>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <MX_USART6_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8002c78:	f000 f9d2 	bl	8003020 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK) {
 8002c7c:	4804      	ldr	r0, [pc, #16]	; (8002c90 <MX_USART6_UART_Init+0x90>)
 8002c7e:	f010 f8a1 	bl	8012dc4 <HAL_UARTEx_DisableFifoMode>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <MX_USART6_UART_Init+0x8c>
		Error_Handler();
 8002c88:	f000 f9ca 	bl	8003020 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8002c8c:	bf00      	nop
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	240015f8 	.word	0x240015f8
 8002c94:	40011400 	.word	0x40011400

08002c98 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002c9e:	4b2d      	ldr	r3, [pc, #180]	; (8002d54 <MX_DMA_Init+0xbc>)
 8002ca0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ca4:	4a2b      	ldr	r2, [pc, #172]	; (8002d54 <MX_DMA_Init+0xbc>)
 8002ca6:	f043 0301 	orr.w	r3, r3, #1
 8002caa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002cae:	4b29      	ldr	r3, [pc, #164]	; (8002d54 <MX_DMA_Init+0xbc>)
 8002cb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	607b      	str	r3, [r7, #4]
 8002cba:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002cbc:	4b25      	ldr	r3, [pc, #148]	; (8002d54 <MX_DMA_Init+0xbc>)
 8002cbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002cc2:	4a24      	ldr	r2, [pc, #144]	; (8002d54 <MX_DMA_Init+0xbc>)
 8002cc4:	f043 0302 	orr.w	r3, r3, #2
 8002cc8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002ccc:	4b21      	ldr	r3, [pc, #132]	; (8002d54 <MX_DMA_Init+0xbc>)
 8002cce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	603b      	str	r3, [r7, #0]
 8002cd8:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2100      	movs	r1, #0
 8002cde:	200b      	movs	r0, #11
 8002ce0:	f003 fbb5 	bl	800644e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002ce4:	200b      	movs	r0, #11
 8002ce6:	f003 fbcc 	bl	8006482 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002cea:	2200      	movs	r2, #0
 8002cec:	2100      	movs	r1, #0
 8002cee:	200c      	movs	r0, #12
 8002cf0:	f003 fbad 	bl	800644e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002cf4:	200c      	movs	r0, #12
 8002cf6:	f003 fbc4 	bl	8006482 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	200d      	movs	r0, #13
 8002d00:	f003 fba5 	bl	800644e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002d04:	200d      	movs	r0, #13
 8002d06:	f003 fbbc 	bl	8006482 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	200e      	movs	r0, #14
 8002d10:	f003 fb9d 	bl	800644e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002d14:	200e      	movs	r0, #14
 8002d16:	f003 fbb4 	bl	8006482 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	200f      	movs	r0, #15
 8002d20:	f003 fb95 	bl	800644e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002d24:	200f      	movs	r0, #15
 8002d26:	f003 fbac 	bl	8006482 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	2010      	movs	r0, #16
 8002d30:	f003 fb8d 	bl	800644e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002d34:	2010      	movs	r0, #16
 8002d36:	f003 fba4 	bl	8006482 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	2046      	movs	r0, #70	; 0x46
 8002d40:	f003 fb85 	bl	800644e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002d44:	2046      	movs	r0, #70	; 0x46
 8002d46:	f003 fb9c 	bl	8006482 <HAL_NVIC_EnableIRQ>

}
 8002d4a:	bf00      	nop
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	58024400 	.word	0x58024400

08002d58 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08c      	sub	sp, #48	; 0x30
 8002d5c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002d5e:	f107 031c 	add.w	r3, r7, #28
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	605a      	str	r2, [r3, #4]
 8002d68:	609a      	str	r2, [r3, #8]
 8002d6a:	60da      	str	r2, [r3, #12]
 8002d6c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002d6e:	4ba4      	ldr	r3, [pc, #656]	; (8003000 <MX_GPIO_Init+0x2a8>)
 8002d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d74:	4aa2      	ldr	r2, [pc, #648]	; (8003000 <MX_GPIO_Init+0x2a8>)
 8002d76:	f043 0310 	orr.w	r3, r3, #16
 8002d7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d7e:	4ba0      	ldr	r3, [pc, #640]	; (8003000 <MX_GPIO_Init+0x2a8>)
 8002d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d84:	f003 0310 	and.w	r3, r3, #16
 8002d88:	61bb      	str	r3, [r7, #24]
 8002d8a:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002d8c:	4b9c      	ldr	r3, [pc, #624]	; (8003000 <MX_GPIO_Init+0x2a8>)
 8002d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d92:	4a9b      	ldr	r2, [pc, #620]	; (8003000 <MX_GPIO_Init+0x2a8>)
 8002d94:	f043 0320 	orr.w	r3, r3, #32
 8002d98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d9c:	4b98      	ldr	r3, [pc, #608]	; (8003000 <MX_GPIO_Init+0x2a8>)
 8002d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002daa:	4b95      	ldr	r3, [pc, #596]	; (8003000 <MX_GPIO_Init+0x2a8>)
 8002dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002db0:	4a93      	ldr	r2, [pc, #588]	; (8003000 <MX_GPIO_Init+0x2a8>)
 8002db2:	f043 0304 	orr.w	r3, r3, #4
 8002db6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dba:	4b91      	ldr	r3, [pc, #580]	; (8003000 <MX_GPIO_Init+0x2a8>)
 8002dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	613b      	str	r3, [r7, #16]
 8002dc6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc8:	4b8d      	ldr	r3, [pc, #564]	; (8003000 <MX_GPIO_Init+0x2a8>)
 8002dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dce:	4a8c      	ldr	r2, [pc, #560]	; (8003000 <MX_GPIO_Init+0x2a8>)
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dd8:	4b89      	ldr	r3, [pc, #548]	; (8003000 <MX_GPIO_Init+0x2a8>)
 8002dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002de6:	4b86      	ldr	r3, [pc, #536]	; (8003000 <MX_GPIO_Init+0x2a8>)
 8002de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dec:	4a84      	ldr	r2, [pc, #528]	; (8003000 <MX_GPIO_Init+0x2a8>)
 8002dee:	f043 0302 	orr.w	r3, r3, #2
 8002df2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002df6:	4b82      	ldr	r3, [pc, #520]	; (8003000 <MX_GPIO_Init+0x2a8>)
 8002df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8002e04:	4b7e      	ldr	r3, [pc, #504]	; (8003000 <MX_GPIO_Init+0x2a8>)
 8002e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e0a:	4a7d      	ldr	r2, [pc, #500]	; (8003000 <MX_GPIO_Init+0x2a8>)
 8002e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e14:	4b7a      	ldr	r3, [pc, #488]	; (8003000 <MX_GPIO_Init+0x2a8>)
 8002e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1e:	607b      	str	r3, [r7, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002e22:	4b77      	ldr	r3, [pc, #476]	; (8003000 <MX_GPIO_Init+0x2a8>)
 8002e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e28:	4a75      	ldr	r2, [pc, #468]	; (8003000 <MX_GPIO_Init+0x2a8>)
 8002e2a:	f043 0308 	orr.w	r3, r3, #8
 8002e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e32:	4b73      	ldr	r3, [pc, #460]	; (8003000 <MX_GPIO_Init+0x2a8>)
 8002e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	603b      	str	r3, [r7, #0]
 8002e3e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | PYRO6_Pin | PYRO7_Pin | PYRO8_Pin,
 8002e40:	2200      	movs	r2, #0
 8002e42:	f241 5104 	movw	r1, #5380	; 0x1504
 8002e46:	486f      	ldr	r0, [pc, #444]	; (8003004 <MX_GPIO_Init+0x2ac>)
 8002e48:	f006 f92e 	bl	80090a8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ARM1_Pin | GPIO_PIN_15, GPIO_PIN_RESET);
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f248 0102 	movw	r1, #32770	; 0x8002
 8002e52:	486d      	ldr	r0, [pc, #436]	; (8003008 <MX_GPIO_Init+0x2b0>)
 8002e54:	f006 f928 	bl	80090a8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2130      	movs	r1, #48	; 0x30
 8002e5c:	486b      	ldr	r0, [pc, #428]	; (800300c <MX_GPIO_Init+0x2b4>)
 8002e5e:	f006 f923 	bl	80090a8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 8002e62:	2200      	movs	r2, #0
 8002e64:	2102      	movs	r1, #2
 8002e66:	486a      	ldr	r0, [pc, #424]	; (8003010 <MX_GPIO_Init+0x2b8>)
 8002e68:	f006 f91e 	bl	80090a8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, PYRO2_Pin | PYRO3_Pin | PYRO4_Pin, GPIO_PIN_RESET);
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8002e72:	4868      	ldr	r0, [pc, #416]	; (8003014 <MX_GPIO_Init+0x2bc>)
 8002e74:	f006 f918 	bl	80090a8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, PYRO5_Pin | GPIO_PIN_2 | GPIO_PIN_3,
 8002e78:	2200      	movs	r2, #0
 8002e7a:	210e      	movs	r1, #14
 8002e7c:	4866      	ldr	r0, [pc, #408]	; (8003018 <MX_GPIO_Init+0x2c0>)
 8002e7e:	f006 f913 	bl	80090a8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_0,
 8002e82:	2200      	movs	r2, #0
 8002e84:	f240 3101 	movw	r1, #769	; 0x301
 8002e88:	4864      	ldr	r0, [pc, #400]	; (800301c <MX_GPIO_Init+0x2c4>)
 8002e8a:	f006 f90d 	bl	80090a8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | PYRO6_Pin | PYRO7_Pin | PYRO8_Pin;
 8002e8e:	f241 5304 	movw	r3, #5380	; 0x1504
 8002e92:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e94:	2301      	movs	r3, #1
 8002e96:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ea0:	f107 031c 	add.w	r3, r7, #28
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4857      	ldr	r0, [pc, #348]	; (8003004 <MX_GPIO_Init+0x2ac>)
 8002ea8:	f005 ff3e 	bl	8008d28 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARM1_Pin PA15 */
	GPIO_InitStruct.Pin = ARM1_Pin | GPIO_PIN_15;
 8002eac:	f248 0302 	movw	r3, #32770	; 0x8002
 8002eb0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ebe:	f107 031c 	add.w	r3, r7, #28
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4850      	ldr	r0, [pc, #320]	; (8003008 <MX_GPIO_Init+0x2b0>)
 8002ec6:	f005 ff2f 	bl	8008d28 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC4 PC5 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8002eca:	2330      	movs	r3, #48	; 0x30
 8002ecc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eda:	f107 031c 	add.w	r3, r7, #28
 8002ede:	4619      	mov	r1, r3
 8002ee0:	484a      	ldr	r0, [pc, #296]	; (800300c <MX_GPIO_Init+0x2b4>)
 8002ee2:	f005 ff21 	bl	8008d28 <HAL_GPIO_Init>

	/*Configure GPIO pin : PYRO1_Pin */
	GPIO_InitStruct.Pin = PYRO1_Pin;
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eea:	2301      	movs	r3, #1
 8002eec:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 8002ef6:	f107 031c 	add.w	r3, r7, #28
 8002efa:	4619      	mov	r1, r3
 8002efc:	4844      	ldr	r0, [pc, #272]	; (8003010 <MX_GPIO_Init+0x2b8>)
 8002efe:	f005 ff13 	bl	8008d28 <HAL_GPIO_Init>

	/*Configure GPIO pin : CONT1_Pin */
	GPIO_InitStruct.Pin = CONT1_Pin;
 8002f02:	2304      	movs	r3, #4
 8002f04:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f06:	2300      	movs	r3, #0
 8002f08:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8002f0e:	f107 031c 	add.w	r3, r7, #28
 8002f12:	4619      	mov	r1, r3
 8002f14:	483e      	ldr	r0, [pc, #248]	; (8003010 <MX_GPIO_Init+0x2b8>)
 8002f16:	f005 ff07 	bl	8008d28 <HAL_GPIO_Init>

	/*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
	GPIO_InitStruct.Pin = PYRO2_Pin | PYRO3_Pin | PYRO4_Pin;
 8002f1a:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8002f1e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f20:	2301      	movs	r3, #1
 8002f22:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f2c:	f107 031c 	add.w	r3, r7, #28
 8002f30:	4619      	mov	r1, r3
 8002f32:	4838      	ldr	r0, [pc, #224]	; (8003014 <MX_GPIO_Init+0x2bc>)
 8002f34:	f005 fef8 	bl	8008d28 <HAL_GPIO_Init>

	/*Configure GPIO pins : CONT2_Pin CONT3_Pin */
	GPIO_InitStruct.Pin = CONT2_Pin | CONT3_Pin;
 8002f38:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002f3c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f42:	2301      	movs	r3, #1
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f46:	f107 031c 	add.w	r3, r7, #28
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4831      	ldr	r0, [pc, #196]	; (8003014 <MX_GPIO_Init+0x2bc>)
 8002f4e:	f005 feeb 	bl	8008d28 <HAL_GPIO_Init>

	/*Configure GPIO pin : CONT4_Pin */
	GPIO_InitStruct.Pin = CONT4_Pin;
 8002f52:	2301      	movs	r3, #1
 8002f54:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f56:	2300      	movs	r3, #0
 8002f58:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8002f5e:	f107 031c 	add.w	r3, r7, #28
 8002f62:	4619      	mov	r1, r3
 8002f64:	482c      	ldr	r0, [pc, #176]	; (8003018 <MX_GPIO_Init+0x2c0>)
 8002f66:	f005 fedf 	bl	8008d28 <HAL_GPIO_Init>

	/*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
	GPIO_InitStruct.Pin = PYRO5_Pin | GPIO_PIN_2 | GPIO_PIN_3;
 8002f6a:	230e      	movs	r3, #14
 8002f6c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f76:	2300      	movs	r3, #0
 8002f78:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f7a:	f107 031c 	add.w	r3, r7, #28
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4825      	ldr	r0, [pc, #148]	; (8003018 <MX_GPIO_Init+0x2c0>)
 8002f82:	f005 fed1 	bl	8008d28 <HAL_GPIO_Init>

	/*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
	GPIO_InitStruct.Pin = CONT5_Pin | CONT6_Pin | CONT7_Pin | CONT8_Pin;
 8002f86:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8002f8a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f90:	2301      	movs	r3, #1
 8002f92:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f94:	f107 031c 	add.w	r3, r7, #28
 8002f98:	4619      	mov	r1, r3
 8002f9a:	481a      	ldr	r0, [pc, #104]	; (8003004 <MX_GPIO_Init+0x2ac>)
 8002f9c:	f005 fec4 	bl	8008d28 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD8 PD9 PD0 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_0;
 8002fa0:	f240 3301 	movw	r3, #769	; 0x301
 8002fa4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fb2:	f107 031c 	add.w	r3, r7, #28
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4818      	ldr	r0, [pc, #96]	; (800301c <MX_GPIO_Init+0x2c4>)
 8002fba:	f005 feb5 	bl	8008d28 <HAL_GPIO_Init>

	/*Configure GPIO pin : Servo_ARM_CHECK_Pin */
	GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8002fbe:	2310      	movs	r3, #16
 8002fc0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002fca:	f107 031c 	add.w	r3, r7, #28
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4811      	ldr	r0, [pc, #68]	; (8003018 <MX_GPIO_Init+0x2c0>)
 8002fd2:	f005 fea9 	bl	8008d28 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002fd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fda:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fdc:	2302      	movs	r3, #2
 8002fde:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fec:	f107 031c 	add.w	r3, r7, #28
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4805      	ldr	r0, [pc, #20]	; (8003008 <MX_GPIO_Init+0x2b0>)
 8002ff4:	f005 fe98 	bl	8008d28 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002ff8:	bf00      	nop
 8002ffa:	3730      	adds	r7, #48	; 0x30
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	58024400 	.word	0x58024400
 8003004:	58021000 	.word	0x58021000
 8003008:	58020000 	.word	0x58020000
 800300c:	58020800 	.word	0x58020800
 8003010:	58020400 	.word	0x58020400
 8003014:	58021400 	.word	0x58021400
 8003018:	58021800 	.word	0x58021800
 800301c:	58020c00 	.word	0x58020c00

08003020 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003024:	b672      	cpsid	i
}
 8003026:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003028:	e7fe      	b.n	8003028 <Error_Handler+0x8>
	...

0800302c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003032:	4b0a      	ldr	r3, [pc, #40]	; (800305c <HAL_MspInit+0x30>)
 8003034:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003038:	4a08      	ldr	r2, [pc, #32]	; (800305c <HAL_MspInit+0x30>)
 800303a:	f043 0302 	orr.w	r3, r3, #2
 800303e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003042:	4b06      	ldr	r3, [pc, #24]	; (800305c <HAL_MspInit+0x30>)
 8003044:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	607b      	str	r3, [r7, #4]
 800304e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	58024400 	.word	0x58024400

08003060 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b08c      	sub	sp, #48	; 0x30
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003068:	f107 031c 	add.w	r3, r7, #28
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	605a      	str	r2, [r3, #4]
 8003072:	609a      	str	r2, [r3, #8]
 8003074:	60da      	str	r2, [r3, #12]
 8003076:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a5d      	ldr	r2, [pc, #372]	; (80031f4 <HAL_ADC_MspInit+0x194>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d159      	bne.n	8003136 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003082:	4b5d      	ldr	r3, [pc, #372]	; (80031f8 <HAL_ADC_MspInit+0x198>)
 8003084:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003088:	4a5b      	ldr	r2, [pc, #364]	; (80031f8 <HAL_ADC_MspInit+0x198>)
 800308a:	f043 0320 	orr.w	r3, r3, #32
 800308e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003092:	4b59      	ldr	r3, [pc, #356]	; (80031f8 <HAL_ADC_MspInit+0x198>)
 8003094:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003098:	f003 0320 	and.w	r3, r3, #32
 800309c:	61bb      	str	r3, [r7, #24]
 800309e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a0:	4b55      	ldr	r3, [pc, #340]	; (80031f8 <HAL_ADC_MspInit+0x198>)
 80030a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030a6:	4a54      	ldr	r2, [pc, #336]	; (80031f8 <HAL_ADC_MspInit+0x198>)
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030b0:	4b51      	ldr	r3, [pc, #324]	; (80031f8 <HAL_ADC_MspInit+0x198>)
 80030b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_INP14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80030be:	2304      	movs	r3, #4
 80030c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030c2:	2303      	movs	r3, #3
 80030c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ca:	f107 031c 	add.w	r3, r7, #28
 80030ce:	4619      	mov	r1, r3
 80030d0:	484a      	ldr	r0, [pc, #296]	; (80031fc <HAL_ADC_MspInit+0x19c>)
 80030d2:	f005 fe29 	bl	8008d28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 80030d6:	4b4a      	ldr	r3, [pc, #296]	; (8003200 <HAL_ADC_MspInit+0x1a0>)
 80030d8:	4a4a      	ldr	r2, [pc, #296]	; (8003204 <HAL_ADC_MspInit+0x1a4>)
 80030da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80030dc:	4b48      	ldr	r3, [pc, #288]	; (8003200 <HAL_ADC_MspInit+0x1a0>)
 80030de:	2209      	movs	r2, #9
 80030e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030e2:	4b47      	ldr	r3, [pc, #284]	; (8003200 <HAL_ADC_MspInit+0x1a0>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80030e8:	4b45      	ldr	r3, [pc, #276]	; (8003200 <HAL_ADC_MspInit+0x1a0>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80030ee:	4b44      	ldr	r3, [pc, #272]	; (8003200 <HAL_ADC_MspInit+0x1a0>)
 80030f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80030f6:	4b42      	ldr	r3, [pc, #264]	; (8003200 <HAL_ADC_MspInit+0x1a0>)
 80030f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80030fe:	4b40      	ldr	r3, [pc, #256]	; (8003200 <HAL_ADC_MspInit+0x1a0>)
 8003100:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003104:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003106:	4b3e      	ldr	r3, [pc, #248]	; (8003200 <HAL_ADC_MspInit+0x1a0>)
 8003108:	2200      	movs	r2, #0
 800310a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800310c:	4b3c      	ldr	r3, [pc, #240]	; (8003200 <HAL_ADC_MspInit+0x1a0>)
 800310e:	2200      	movs	r2, #0
 8003110:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003112:	4b3b      	ldr	r3, [pc, #236]	; (8003200 <HAL_ADC_MspInit+0x1a0>)
 8003114:	2200      	movs	r2, #0
 8003116:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003118:	4839      	ldr	r0, [pc, #228]	; (8003200 <HAL_ADC_MspInit+0x1a0>)
 800311a:	f003 f9cd 	bl	80064b8 <HAL_DMA_Init>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8003124:	f7ff ff7c 	bl	8003020 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a35      	ldr	r2, [pc, #212]	; (8003200 <HAL_ADC_MspInit+0x1a0>)
 800312c:	659a      	str	r2, [r3, #88]	; 0x58
 800312e:	4a34      	ldr	r2, [pc, #208]	; (8003200 <HAL_ADC_MspInit+0x1a0>)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003134:	e059      	b.n	80031ea <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a33      	ldr	r2, [pc, #204]	; (8003208 <HAL_ADC_MspInit+0x1a8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d154      	bne.n	80031ea <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003140:	4b2d      	ldr	r3, [pc, #180]	; (80031f8 <HAL_ADC_MspInit+0x198>)
 8003142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003146:	4a2c      	ldr	r2, [pc, #176]	; (80031f8 <HAL_ADC_MspInit+0x198>)
 8003148:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800314c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003150:	4b29      	ldr	r3, [pc, #164]	; (80031f8 <HAL_ADC_MspInit+0x198>)
 8003152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003156:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800315a:	613b      	str	r3, [r7, #16]
 800315c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800315e:	4b26      	ldr	r3, [pc, #152]	; (80031f8 <HAL_ADC_MspInit+0x198>)
 8003160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003164:	4a24      	ldr	r2, [pc, #144]	; (80031f8 <HAL_ADC_MspInit+0x198>)
 8003166:	f043 0304 	orr.w	r3, r3, #4
 800316a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800316e:	4b22      	ldr	r3, [pc, #136]	; (80031f8 <HAL_ADC_MspInit+0x198>)
 8003170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800317c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8003180:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8003184:	f001 f8b6 	bl	80042f4 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8003188:	4b20      	ldr	r3, [pc, #128]	; (800320c <HAL_ADC_MspInit+0x1ac>)
 800318a:	4a21      	ldr	r2, [pc, #132]	; (8003210 <HAL_ADC_MspInit+0x1b0>)
 800318c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800318e:	4b1f      	ldr	r3, [pc, #124]	; (800320c <HAL_ADC_MspInit+0x1ac>)
 8003190:	2273      	movs	r2, #115	; 0x73
 8003192:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003194:	4b1d      	ldr	r3, [pc, #116]	; (800320c <HAL_ADC_MspInit+0x1ac>)
 8003196:	2200      	movs	r2, #0
 8003198:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800319a:	4b1c      	ldr	r3, [pc, #112]	; (800320c <HAL_ADC_MspInit+0x1ac>)
 800319c:	2200      	movs	r2, #0
 800319e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80031a0:	4b1a      	ldr	r3, [pc, #104]	; (800320c <HAL_ADC_MspInit+0x1ac>)
 80031a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031a6:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80031a8:	4b18      	ldr	r3, [pc, #96]	; (800320c <HAL_ADC_MspInit+0x1ac>)
 80031aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031ae:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80031b0:	4b16      	ldr	r3, [pc, #88]	; (800320c <HAL_ADC_MspInit+0x1ac>)
 80031b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031b6:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80031b8:	4b14      	ldr	r3, [pc, #80]	; (800320c <HAL_ADC_MspInit+0x1ac>)
 80031ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031be:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 80031c0:	4b12      	ldr	r3, [pc, #72]	; (800320c <HAL_ADC_MspInit+0x1ac>)
 80031c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80031c6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031c8:	4b10      	ldr	r3, [pc, #64]	; (800320c <HAL_ADC_MspInit+0x1ac>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80031ce:	480f      	ldr	r0, [pc, #60]	; (800320c <HAL_ADC_MspInit+0x1ac>)
 80031d0:	f003 f972 	bl	80064b8 <HAL_DMA_Init>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 80031da:	f7ff ff21 	bl	8003020 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a0a      	ldr	r2, [pc, #40]	; (800320c <HAL_ADC_MspInit+0x1ac>)
 80031e2:	659a      	str	r2, [r3, #88]	; 0x58
 80031e4:	4a09      	ldr	r2, [pc, #36]	; (800320c <HAL_ADC_MspInit+0x1ac>)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80031ea:	bf00      	nop
 80031ec:	3730      	adds	r7, #48	; 0x30
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40022000 	.word	0x40022000
 80031f8:	58024400 	.word	0x58024400
 80031fc:	58020000 	.word	0x58020000
 8003200:	24000d4c 	.word	0x24000d4c
 8003204:	40020088 	.word	0x40020088
 8003208:	58026000 	.word	0x58026000
 800320c:	24000dc4 	.word	0x24000dc4
 8003210:	400204b8 	.word	0x400204b8

08003214 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b0b8      	sub	sp, #224	; 0xe0
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	60da      	str	r2, [r3, #12]
 800322a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800322c:	f107 0310 	add.w	r3, r7, #16
 8003230:	22b8      	movs	r2, #184	; 0xb8
 8003232:	2100      	movs	r1, #0
 8003234:	4618      	mov	r0, r3
 8003236:	f018 fe70 	bl	801bf1a <memset>
  if(hfdcan->Instance==FDCAN3)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a26      	ldr	r2, [pc, #152]	; (80032d8 <HAL_FDCAN_MspInit+0xc4>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d145      	bne.n	80032d0 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003244:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8003250:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003254:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003256:	f107 0310 	add.w	r3, r7, #16
 800325a:	4618      	mov	r0, r3
 800325c:	f008 fb52 	bl	800b904 <HAL_RCCEx_PeriphCLKConfig>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8003266:	f7ff fedb 	bl	8003020 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800326a:	4b1c      	ldr	r3, [pc, #112]	; (80032dc <HAL_FDCAN_MspInit+0xc8>)
 800326c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003270:	4a1a      	ldr	r2, [pc, #104]	; (80032dc <HAL_FDCAN_MspInit+0xc8>)
 8003272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003276:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800327a:	4b18      	ldr	r3, [pc, #96]	; (80032dc <HAL_FDCAN_MspInit+0xc8>)
 800327c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003288:	4b14      	ldr	r3, [pc, #80]	; (80032dc <HAL_FDCAN_MspInit+0xc8>)
 800328a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800328e:	4a13      	ldr	r2, [pc, #76]	; (80032dc <HAL_FDCAN_MspInit+0xc8>)
 8003290:	f043 0320 	orr.w	r3, r3, #32
 8003294:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003298:	4b10      	ldr	r3, [pc, #64]	; (80032dc <HAL_FDCAN_MspInit+0xc8>)
 800329a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	60bb      	str	r3, [r7, #8]
 80032a4:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032a6:	23c0      	movs	r3, #192	; 0xc0
 80032a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ac:	2302      	movs	r3, #2
 80032ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b8:	2300      	movs	r3, #0
 80032ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 80032be:	2302      	movs	r3, #2
 80032c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80032c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80032c8:	4619      	mov	r1, r3
 80032ca:	4805      	ldr	r0, [pc, #20]	; (80032e0 <HAL_FDCAN_MspInit+0xcc>)
 80032cc:	f005 fd2c 	bl	8008d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 80032d0:	bf00      	nop
 80032d2:	37e0      	adds	r7, #224	; 0xe0
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	4000d400 	.word	0x4000d400
 80032dc:	58024400 	.word	0x58024400
 80032e0:	58021400 	.word	0x58021400

080032e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b0b8      	sub	sp, #224	; 0xe0
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	605a      	str	r2, [r3, #4]
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	60da      	str	r2, [r3, #12]
 80032fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032fc:	f107 0310 	add.w	r3, r7, #16
 8003300:	22b8      	movs	r2, #184	; 0xb8
 8003302:	2100      	movs	r1, #0
 8003304:	4618      	mov	r0, r3
 8003306:	f018 fe08 	bl	801bf1a <memset>
  if(hi2c->Instance==I2C2)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a2a      	ldr	r2, [pc, #168]	; (80033b8 <HAL_I2C_MspInit+0xd4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d14d      	bne.n	80033b0 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003314:	f04f 0208 	mov.w	r2, #8
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8003320:	2300      	movs	r3, #0
 8003322:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003326:	f107 0310 	add.w	r3, r7, #16
 800332a:	4618      	mov	r0, r3
 800332c:	f008 faea 	bl	800b904 <HAL_RCCEx_PeriphCLKConfig>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8003336:	f7ff fe73 	bl	8003020 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800333a:	4b20      	ldr	r3, [pc, #128]	; (80033bc <HAL_I2C_MspInit+0xd8>)
 800333c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003340:	4a1e      	ldr	r2, [pc, #120]	; (80033bc <HAL_I2C_MspInit+0xd8>)
 8003342:	f043 0320 	orr.w	r3, r3, #32
 8003346:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800334a:	4b1c      	ldr	r3, [pc, #112]	; (80033bc <HAL_I2C_MspInit+0xd8>)
 800334c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003350:	f003 0320 	and.w	r3, r3, #32
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003358:	2303      	movs	r3, #3
 800335a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800335e:	2312      	movs	r3, #18
 8003360:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003364:	2300      	movs	r3, #0
 8003366:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336a:	2300      	movs	r3, #0
 800336c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003370:	2304      	movs	r3, #4
 8003372:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003376:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800337a:	4619      	mov	r1, r3
 800337c:	4810      	ldr	r0, [pc, #64]	; (80033c0 <HAL_I2C_MspInit+0xdc>)
 800337e:	f005 fcd3 	bl	8008d28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003382:	4b0e      	ldr	r3, [pc, #56]	; (80033bc <HAL_I2C_MspInit+0xd8>)
 8003384:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003388:	4a0c      	ldr	r2, [pc, #48]	; (80033bc <HAL_I2C_MspInit+0xd8>)
 800338a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800338e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003392:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <HAL_I2C_MspInit+0xd8>)
 8003394:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003398:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 80033a0:	2200      	movs	r2, #0
 80033a2:	2101      	movs	r1, #1
 80033a4:	2021      	movs	r0, #33	; 0x21
 80033a6:	f003 f852 	bl	800644e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80033aa:	2021      	movs	r0, #33	; 0x21
 80033ac:	f003 f869 	bl	8006482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80033b0:	bf00      	nop
 80033b2:	37e0      	adds	r7, #224	; 0xe0
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40005800 	.word	0x40005800
 80033bc:	58024400 	.word	0x58024400
 80033c0:	58021400 	.word	0x58021400

080033c4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b0ba      	sub	sp, #232	; 0xe8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	60da      	str	r2, [r3, #12]
 80033da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033dc:	f107 0318 	add.w	r3, r7, #24
 80033e0:	22b8      	movs	r2, #184	; 0xb8
 80033e2:	2100      	movs	r1, #0
 80033e4:	4618      	mov	r0, r3
 80033e6:	f018 fd98 	bl	801bf1a <memset>
  if(hsd->Instance==SDMMC2)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a5d      	ldr	r2, [pc, #372]	; (8003564 <HAL_SD_MspInit+0x1a0>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	f040 80b3 	bne.w	800355c <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80033f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8003402:	2300      	movs	r3, #0
 8003404:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003406:	f107 0318 	add.w	r3, r7, #24
 800340a:	4618      	mov	r0, r3
 800340c:	f008 fa7a 	bl	800b904 <HAL_RCCEx_PeriphCLKConfig>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8003416:	f7ff fe03 	bl	8003020 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 800341a:	4b53      	ldr	r3, [pc, #332]	; (8003568 <HAL_SD_MspInit+0x1a4>)
 800341c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003420:	4a51      	ldr	r2, [pc, #324]	; (8003568 <HAL_SD_MspInit+0x1a4>)
 8003422:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003426:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800342a:	4b4f      	ldr	r3, [pc, #316]	; (8003568 <HAL_SD_MspInit+0x1a4>)
 800342c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003430:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003434:	617b      	str	r3, [r7, #20]
 8003436:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003438:	4b4b      	ldr	r3, [pc, #300]	; (8003568 <HAL_SD_MspInit+0x1a4>)
 800343a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800343e:	4a4a      	ldr	r2, [pc, #296]	; (8003568 <HAL_SD_MspInit+0x1a4>)
 8003440:	f043 0308 	orr.w	r3, r3, #8
 8003444:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003448:	4b47      	ldr	r3, [pc, #284]	; (8003568 <HAL_SD_MspInit+0x1a4>)
 800344a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003456:	4b44      	ldr	r3, [pc, #272]	; (8003568 <HAL_SD_MspInit+0x1a4>)
 8003458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800345c:	4a42      	ldr	r2, [pc, #264]	; (8003568 <HAL_SD_MspInit+0x1a4>)
 800345e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003462:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003466:	4b40      	ldr	r3, [pc, #256]	; (8003568 <HAL_SD_MspInit+0x1a4>)
 8003468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800346c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003474:	2340      	movs	r3, #64	; 0x40
 8003476:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347a:	2302      	movs	r3, #2
 800347c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003480:	2300      	movs	r3, #0
 8003482:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003486:	2303      	movs	r3, #3
 8003488:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800348c:	230b      	movs	r3, #11
 800348e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003492:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003496:	4619      	mov	r1, r3
 8003498:	4834      	ldr	r0, [pc, #208]	; (800356c <HAL_SD_MspInit+0x1a8>)
 800349a:	f005 fc45 	bl	8008d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800349e:	2380      	movs	r3, #128	; 0x80
 80034a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a4:	2302      	movs	r3, #2
 80034a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034aa:	2301      	movs	r3, #1
 80034ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b0:	2303      	movs	r3, #3
 80034b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80034b6:	230b      	movs	r3, #11
 80034b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80034c0:	4619      	mov	r1, r3
 80034c2:	482a      	ldr	r0, [pc, #168]	; (800356c <HAL_SD_MspInit+0x1a8>)
 80034c4:	f005 fc30 	bl	8008d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80034c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d0:	2302      	movs	r3, #2
 80034d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034d6:	2301      	movs	r3, #1
 80034d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034dc:	2303      	movs	r3, #3
 80034de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80034e2:	230b      	movs	r3, #11
 80034e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80034ec:	4619      	mov	r1, r3
 80034ee:	4820      	ldr	r0, [pc, #128]	; (8003570 <HAL_SD_MspInit+0x1ac>)
 80034f0:	f005 fc1a 	bl	8008d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fc:	2302      	movs	r3, #2
 80034fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003502:	2300      	movs	r3, #0
 8003504:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003508:	2303      	movs	r3, #3
 800350a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800350e:	230b      	movs	r3, #11
 8003510:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003514:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003518:	4619      	mov	r1, r3
 800351a:	4815      	ldr	r0, [pc, #84]	; (8003570 <HAL_SD_MspInit+0x1ac>)
 800351c:	f005 fc04 	bl	8008d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003520:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003524:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003528:	2302      	movs	r3, #2
 800352a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352e:	2300      	movs	r3, #0
 8003530:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003534:	2303      	movs	r3, #3
 8003536:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 800353a:	230a      	movs	r3, #10
 800353c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003540:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003544:	4619      	mov	r1, r3
 8003546:	480a      	ldr	r0, [pc, #40]	; (8003570 <HAL_SD_MspInit+0x1ac>)
 8003548:	f005 fbee 	bl	8008d28 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 800354c:	2200      	movs	r2, #0
 800354e:	2100      	movs	r1, #0
 8003550:	207c      	movs	r0, #124	; 0x7c
 8003552:	f002 ff7c 	bl	800644e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8003556:	207c      	movs	r0, #124	; 0x7c
 8003558:	f002 ff93 	bl	8006482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 800355c:	bf00      	nop
 800355e:	37e8      	adds	r7, #232	; 0xe8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	48022400 	.word	0x48022400
 8003568:	58024400 	.word	0x58024400
 800356c:	58020c00 	.word	0x58020c00
 8003570:	58021800 	.word	0x58021800

08003574 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08e      	sub	sp, #56	; 0x38
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800357c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	605a      	str	r2, [r3, #4]
 8003586:	609a      	str	r2, [r3, #8]
 8003588:	60da      	str	r2, [r3, #12]
 800358a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a4f      	ldr	r2, [pc, #316]	; (80036d0 <HAL_SPI_MspInit+0x15c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d12e      	bne.n	80035f4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003596:	4b4f      	ldr	r3, [pc, #316]	; (80036d4 <HAL_SPI_MspInit+0x160>)
 8003598:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800359c:	4a4d      	ldr	r2, [pc, #308]	; (80036d4 <HAL_SPI_MspInit+0x160>)
 800359e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80035a6:	4b4b      	ldr	r3, [pc, #300]	; (80036d4 <HAL_SPI_MspInit+0x160>)
 80035a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035b0:	623b      	str	r3, [r7, #32]
 80035b2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b4:	4b47      	ldr	r3, [pc, #284]	; (80036d4 <HAL_SPI_MspInit+0x160>)
 80035b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035ba:	4a46      	ldr	r2, [pc, #280]	; (80036d4 <HAL_SPI_MspInit+0x160>)
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035c4:	4b43      	ldr	r3, [pc, #268]	; (80036d4 <HAL_SPI_MspInit+0x160>)
 80035c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	61fb      	str	r3, [r7, #28]
 80035d0:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80035d2:	23e0      	movs	r3, #224	; 0xe0
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d6:	2302      	movs	r3, #2
 80035d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035de:	2300      	movs	r3, #0
 80035e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035e2:	2305      	movs	r3, #5
 80035e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035ea:	4619      	mov	r1, r3
 80035ec:	483a      	ldr	r0, [pc, #232]	; (80036d8 <HAL_SPI_MspInit+0x164>)
 80035ee:	f005 fb9b 	bl	8008d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80035f2:	e068      	b.n	80036c6 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a38      	ldr	r2, [pc, #224]	; (80036dc <HAL_SPI_MspInit+0x168>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d12f      	bne.n	800365e <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80035fe:	4b35      	ldr	r3, [pc, #212]	; (80036d4 <HAL_SPI_MspInit+0x160>)
 8003600:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003604:	4a33      	ldr	r2, [pc, #204]	; (80036d4 <HAL_SPI_MspInit+0x160>)
 8003606:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800360a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800360e:	4b31      	ldr	r3, [pc, #196]	; (80036d4 <HAL_SPI_MspInit+0x160>)
 8003610:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003618:	61bb      	str	r3, [r7, #24]
 800361a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800361c:	4b2d      	ldr	r3, [pc, #180]	; (80036d4 <HAL_SPI_MspInit+0x160>)
 800361e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003622:	4a2c      	ldr	r2, [pc, #176]	; (80036d4 <HAL_SPI_MspInit+0x160>)
 8003624:	f043 0302 	orr.w	r3, r3, #2
 8003628:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800362c:	4b29      	ldr	r3, [pc, #164]	; (80036d4 <HAL_SPI_MspInit+0x160>)
 800362e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800363a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800363e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003640:	2302      	movs	r3, #2
 8003642:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003644:	2300      	movs	r3, #0
 8003646:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003648:	2300      	movs	r3, #0
 800364a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800364c:	2305      	movs	r3, #5
 800364e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003654:	4619      	mov	r1, r3
 8003656:	4822      	ldr	r0, [pc, #136]	; (80036e0 <HAL_SPI_MspInit+0x16c>)
 8003658:	f005 fb66 	bl	8008d28 <HAL_GPIO_Init>
}
 800365c:	e033      	b.n	80036c6 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a20      	ldr	r2, [pc, #128]	; (80036e4 <HAL_SPI_MspInit+0x170>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d12e      	bne.n	80036c6 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003668:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <HAL_SPI_MspInit+0x160>)
 800366a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800366e:	4a19      	ldr	r2, [pc, #100]	; (80036d4 <HAL_SPI_MspInit+0x160>)
 8003670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003674:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003678:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <HAL_SPI_MspInit+0x160>)
 800367a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800367e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003686:	4b13      	ldr	r3, [pc, #76]	; (80036d4 <HAL_SPI_MspInit+0x160>)
 8003688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800368c:	4a11      	ldr	r2, [pc, #68]	; (80036d4 <HAL_SPI_MspInit+0x160>)
 800368e:	f043 0304 	orr.w	r3, r3, #4
 8003692:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003696:	4b0f      	ldr	r3, [pc, #60]	; (80036d4 <HAL_SPI_MspInit+0x160>)
 8003698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80036a4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80036a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036aa:	2302      	movs	r3, #2
 80036ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b2:	2300      	movs	r3, #0
 80036b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80036b6:	2306      	movs	r3, #6
 80036b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036be:	4619      	mov	r1, r3
 80036c0:	4809      	ldr	r0, [pc, #36]	; (80036e8 <HAL_SPI_MspInit+0x174>)
 80036c2:	f005 fb31 	bl	8008d28 <HAL_GPIO_Init>
}
 80036c6:	bf00      	nop
 80036c8:	3738      	adds	r7, #56	; 0x38
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40013000 	.word	0x40013000
 80036d4:	58024400 	.word	0x58024400
 80036d8:	58020000 	.word	0x58020000
 80036dc:	40003800 	.word	0x40003800
 80036e0:	58020400 	.word	0x58020400
 80036e4:	40003c00 	.word	0x40003c00
 80036e8:	58020800 	.word	0x58020800

080036ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08c      	sub	sp, #48	; 0x30
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f4:	f107 031c 	add.w	r3, r7, #28
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	605a      	str	r2, [r3, #4]
 80036fe:	609a      	str	r2, [r3, #8]
 8003700:	60da      	str	r2, [r3, #12]
 8003702:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800370c:	d15d      	bne.n	80037ca <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800370e:	4b8e      	ldr	r3, [pc, #568]	; (8003948 <HAL_TIM_PWM_MspInit+0x25c>)
 8003710:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003714:	4a8c      	ldr	r2, [pc, #560]	; (8003948 <HAL_TIM_PWM_MspInit+0x25c>)
 8003716:	f043 0301 	orr.w	r3, r3, #1
 800371a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800371e:	4b8a      	ldr	r3, [pc, #552]	; (8003948 <HAL_TIM_PWM_MspInit+0x25c>)
 8003720:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	61bb      	str	r3, [r7, #24]
 800372a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800372c:	4b86      	ldr	r3, [pc, #536]	; (8003948 <HAL_TIM_PWM_MspInit+0x25c>)
 800372e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003732:	4a85      	ldr	r2, [pc, #532]	; (8003948 <HAL_TIM_PWM_MspInit+0x25c>)
 8003734:	f043 0301 	orr.w	r3, r3, #1
 8003738:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800373c:	4b82      	ldr	r3, [pc, #520]	; (8003948 <HAL_TIM_PWM_MspInit+0x25c>)
 800373e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	617b      	str	r3, [r7, #20]
 8003748:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800374a:	2301      	movs	r3, #1
 800374c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374e:	2302      	movs	r3, #2
 8003750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003752:	2300      	movs	r3, #0
 8003754:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003756:	2300      	movs	r3, #0
 8003758:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800375a:	2301      	movs	r3, #1
 800375c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800375e:	f107 031c 	add.w	r3, r7, #28
 8003762:	4619      	mov	r1, r3
 8003764:	4879      	ldr	r0, [pc, #484]	; (800394c <HAL_TIM_PWM_MspInit+0x260>)
 8003766:	f005 fadf 	bl	8008d28 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 800376a:	4b79      	ldr	r3, [pc, #484]	; (8003950 <HAL_TIM_PWM_MspInit+0x264>)
 800376c:	4a79      	ldr	r2, [pc, #484]	; (8003954 <HAL_TIM_PWM_MspInit+0x268>)
 800376e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8003770:	4b77      	ldr	r3, [pc, #476]	; (8003950 <HAL_TIM_PWM_MspInit+0x264>)
 8003772:	2214      	movs	r2, #20
 8003774:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003776:	4b76      	ldr	r3, [pc, #472]	; (8003950 <HAL_TIM_PWM_MspInit+0x264>)
 8003778:	2240      	movs	r2, #64	; 0x40
 800377a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800377c:	4b74      	ldr	r3, [pc, #464]	; (8003950 <HAL_TIM_PWM_MspInit+0x264>)
 800377e:	2200      	movs	r2, #0
 8003780:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003782:	4b73      	ldr	r3, [pc, #460]	; (8003950 <HAL_TIM_PWM_MspInit+0x264>)
 8003784:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003788:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800378a:	4b71      	ldr	r3, [pc, #452]	; (8003950 <HAL_TIM_PWM_MspInit+0x264>)
 800378c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003790:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003792:	4b6f      	ldr	r3, [pc, #444]	; (8003950 <HAL_TIM_PWM_MspInit+0x264>)
 8003794:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003798:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 800379a:	4b6d      	ldr	r3, [pc, #436]	; (8003950 <HAL_TIM_PWM_MspInit+0x264>)
 800379c:	2200      	movs	r2, #0
 800379e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80037a0:	4b6b      	ldr	r3, [pc, #428]	; (8003950 <HAL_TIM_PWM_MspInit+0x264>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037a6:	4b6a      	ldr	r3, [pc, #424]	; (8003950 <HAL_TIM_PWM_MspInit+0x264>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80037ac:	4868      	ldr	r0, [pc, #416]	; (8003950 <HAL_TIM_PWM_MspInit+0x264>)
 80037ae:	f002 fe83 	bl	80064b8 <HAL_DMA_Init>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 80037b8:	f7ff fc32 	bl	8003020 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a64      	ldr	r2, [pc, #400]	; (8003950 <HAL_TIM_PWM_MspInit+0x264>)
 80037c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80037c2:	4a63      	ldr	r2, [pc, #396]	; (8003950 <HAL_TIM_PWM_MspInit+0x264>)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80037c8:	e119      	b.n	80039fe <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a62      	ldr	r2, [pc, #392]	; (8003958 <HAL_TIM_PWM_MspInit+0x26c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d16d      	bne.n	80038b0 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037d4:	4b5c      	ldr	r3, [pc, #368]	; (8003948 <HAL_TIM_PWM_MspInit+0x25c>)
 80037d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037da:	4a5b      	ldr	r2, [pc, #364]	; (8003948 <HAL_TIM_PWM_MspInit+0x25c>)
 80037dc:	f043 0302 	orr.w	r3, r3, #2
 80037e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037e4:	4b58      	ldr	r3, [pc, #352]	; (8003948 <HAL_TIM_PWM_MspInit+0x25c>)
 80037e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	613b      	str	r3, [r7, #16]
 80037f0:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 80037f2:	4b5a      	ldr	r3, [pc, #360]	; (800395c <HAL_TIM_PWM_MspInit+0x270>)
 80037f4:	4a5a      	ldr	r2, [pc, #360]	; (8003960 <HAL_TIM_PWM_MspInit+0x274>)
 80037f6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 80037f8:	4b58      	ldr	r3, [pc, #352]	; (800395c <HAL_TIM_PWM_MspInit+0x270>)
 80037fa:	2218      	movs	r2, #24
 80037fc:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037fe:	4b57      	ldr	r3, [pc, #348]	; (800395c <HAL_TIM_PWM_MspInit+0x270>)
 8003800:	2240      	movs	r2, #64	; 0x40
 8003802:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003804:	4b55      	ldr	r3, [pc, #340]	; (800395c <HAL_TIM_PWM_MspInit+0x270>)
 8003806:	2200      	movs	r2, #0
 8003808:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800380a:	4b54      	ldr	r3, [pc, #336]	; (800395c <HAL_TIM_PWM_MspInit+0x270>)
 800380c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003810:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003812:	4b52      	ldr	r3, [pc, #328]	; (800395c <HAL_TIM_PWM_MspInit+0x270>)
 8003814:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003818:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800381a:	4b50      	ldr	r3, [pc, #320]	; (800395c <HAL_TIM_PWM_MspInit+0x270>)
 800381c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003820:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8003822:	4b4e      	ldr	r3, [pc, #312]	; (800395c <HAL_TIM_PWM_MspInit+0x270>)
 8003824:	2200      	movs	r2, #0
 8003826:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003828:	4b4c      	ldr	r3, [pc, #304]	; (800395c <HAL_TIM_PWM_MspInit+0x270>)
 800382a:	2200      	movs	r2, #0
 800382c:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800382e:	4b4b      	ldr	r3, [pc, #300]	; (800395c <HAL_TIM_PWM_MspInit+0x270>)
 8003830:	2200      	movs	r2, #0
 8003832:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8003834:	4849      	ldr	r0, [pc, #292]	; (800395c <HAL_TIM_PWM_MspInit+0x270>)
 8003836:	f002 fe3f 	bl	80064b8 <HAL_DMA_Init>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8003840:	f7ff fbee 	bl	8003020 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a45      	ldr	r2, [pc, #276]	; (800395c <HAL_TIM_PWM_MspInit+0x270>)
 8003848:	629a      	str	r2, [r3, #40]	; 0x28
 800384a:	4a44      	ldr	r2, [pc, #272]	; (800395c <HAL_TIM_PWM_MspInit+0x270>)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8003850:	4b44      	ldr	r3, [pc, #272]	; (8003964 <HAL_TIM_PWM_MspInit+0x278>)
 8003852:	4a45      	ldr	r2, [pc, #276]	; (8003968 <HAL_TIM_PWM_MspInit+0x27c>)
 8003854:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8003856:	4b43      	ldr	r3, [pc, #268]	; (8003964 <HAL_TIM_PWM_MspInit+0x278>)
 8003858:	2217      	movs	r2, #23
 800385a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800385c:	4b41      	ldr	r3, [pc, #260]	; (8003964 <HAL_TIM_PWM_MspInit+0x278>)
 800385e:	2240      	movs	r2, #64	; 0x40
 8003860:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003862:	4b40      	ldr	r3, [pc, #256]	; (8003964 <HAL_TIM_PWM_MspInit+0x278>)
 8003864:	2200      	movs	r2, #0
 8003866:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003868:	4b3e      	ldr	r3, [pc, #248]	; (8003964 <HAL_TIM_PWM_MspInit+0x278>)
 800386a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800386e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003870:	4b3c      	ldr	r3, [pc, #240]	; (8003964 <HAL_TIM_PWM_MspInit+0x278>)
 8003872:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003876:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003878:	4b3a      	ldr	r3, [pc, #232]	; (8003964 <HAL_TIM_PWM_MspInit+0x278>)
 800387a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800387e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8003880:	4b38      	ldr	r3, [pc, #224]	; (8003964 <HAL_TIM_PWM_MspInit+0x278>)
 8003882:	2200      	movs	r2, #0
 8003884:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003886:	4b37      	ldr	r3, [pc, #220]	; (8003964 <HAL_TIM_PWM_MspInit+0x278>)
 8003888:	2200      	movs	r2, #0
 800388a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800388c:	4b35      	ldr	r3, [pc, #212]	; (8003964 <HAL_TIM_PWM_MspInit+0x278>)
 800388e:	2200      	movs	r2, #0
 8003890:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8003892:	4834      	ldr	r0, [pc, #208]	; (8003964 <HAL_TIM_PWM_MspInit+0x278>)
 8003894:	f002 fe10 	bl	80064b8 <HAL_DMA_Init>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 800389e:	f7ff fbbf 	bl	8003020 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a2f      	ldr	r2, [pc, #188]	; (8003964 <HAL_TIM_PWM_MspInit+0x278>)
 80038a6:	625a      	str	r2, [r3, #36]	; 0x24
 80038a8:	4a2e      	ldr	r2, [pc, #184]	; (8003964 <HAL_TIM_PWM_MspInit+0x278>)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6393      	str	r3, [r2, #56]	; 0x38
}
 80038ae:	e0a6      	b.n	80039fe <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a2d      	ldr	r2, [pc, #180]	; (800396c <HAL_TIM_PWM_MspInit+0x280>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d15e      	bne.n	8003978 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80038ba:	4b23      	ldr	r3, [pc, #140]	; (8003948 <HAL_TIM_PWM_MspInit+0x25c>)
 80038bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038c0:	4a21      	ldr	r2, [pc, #132]	; (8003948 <HAL_TIM_PWM_MspInit+0x25c>)
 80038c2:	f043 0304 	orr.w	r3, r3, #4
 80038c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038ca:	4b1f      	ldr	r3, [pc, #124]	; (8003948 <HAL_TIM_PWM_MspInit+0x25c>)
 80038cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 80038d8:	4b25      	ldr	r3, [pc, #148]	; (8003970 <HAL_TIM_PWM_MspInit+0x284>)
 80038da:	4a26      	ldr	r2, [pc, #152]	; (8003974 <HAL_TIM_PWM_MspInit+0x288>)
 80038dc:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 80038de:	4b24      	ldr	r3, [pc, #144]	; (8003970 <HAL_TIM_PWM_MspInit+0x284>)
 80038e0:	221f      	movs	r2, #31
 80038e2:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038e4:	4b22      	ldr	r3, [pc, #136]	; (8003970 <HAL_TIM_PWM_MspInit+0x284>)
 80038e6:	2240      	movs	r2, #64	; 0x40
 80038e8:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80038ea:	4b21      	ldr	r3, [pc, #132]	; (8003970 <HAL_TIM_PWM_MspInit+0x284>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80038f0:	4b1f      	ldr	r3, [pc, #124]	; (8003970 <HAL_TIM_PWM_MspInit+0x284>)
 80038f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038f6:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80038f8:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <HAL_TIM_PWM_MspInit+0x284>)
 80038fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038fe:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003900:	4b1b      	ldr	r3, [pc, #108]	; (8003970 <HAL_TIM_PWM_MspInit+0x284>)
 8003902:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003906:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8003908:	4b19      	ldr	r3, [pc, #100]	; (8003970 <HAL_TIM_PWM_MspInit+0x284>)
 800390a:	2200      	movs	r2, #0
 800390c:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800390e:	4b18      	ldr	r3, [pc, #96]	; (8003970 <HAL_TIM_PWM_MspInit+0x284>)
 8003910:	2200      	movs	r2, #0
 8003912:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003914:	4b16      	ldr	r3, [pc, #88]	; (8003970 <HAL_TIM_PWM_MspInit+0x284>)
 8003916:	2200      	movs	r2, #0
 8003918:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 800391a:	4815      	ldr	r0, [pc, #84]	; (8003970 <HAL_TIM_PWM_MspInit+0x284>)
 800391c:	f002 fdcc 	bl	80064b8 <HAL_DMA_Init>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 8003926:	f7ff fb7b 	bl	8003020 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a10      	ldr	r2, [pc, #64]	; (8003970 <HAL_TIM_PWM_MspInit+0x284>)
 800392e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003930:	4a0f      	ldr	r2, [pc, #60]	; (8003970 <HAL_TIM_PWM_MspInit+0x284>)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003936:	2200      	movs	r2, #0
 8003938:	2100      	movs	r1, #0
 800393a:	201e      	movs	r0, #30
 800393c:	f002 fd87 	bl	800644e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003940:	201e      	movs	r0, #30
 8003942:	f002 fd9e 	bl	8006482 <HAL_NVIC_EnableIRQ>
}
 8003946:	e05a      	b.n	80039fe <HAL_TIM_PWM_MspInit+0x312>
 8003948:	58024400 	.word	0x58024400
 800394c:	58020000 	.word	0x58020000
 8003950:	2400130c 	.word	0x2400130c
 8003954:	40020028 	.word	0x40020028
 8003958:	40000400 	.word	0x40000400
 800395c:	24001384 	.word	0x24001384
 8003960:	40020058 	.word	0x40020058
 8003964:	240013fc 	.word	0x240013fc
 8003968:	40020070 	.word	0x40020070
 800396c:	40000800 	.word	0x40000800
 8003970:	24001474 	.word	0x24001474
 8003974:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a22      	ldr	r2, [pc, #136]	; (8003a08 <HAL_TIM_PWM_MspInit+0x31c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d13d      	bne.n	80039fe <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003982:	4b22      	ldr	r3, [pc, #136]	; (8003a0c <HAL_TIM_PWM_MspInit+0x320>)
 8003984:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003988:	4a20      	ldr	r2, [pc, #128]	; (8003a0c <HAL_TIM_PWM_MspInit+0x320>)
 800398a:	f043 0308 	orr.w	r3, r3, #8
 800398e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003992:	4b1e      	ldr	r3, [pc, #120]	; (8003a0c <HAL_TIM_PWM_MspInit+0x320>)
 8003994:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	60bb      	str	r3, [r7, #8]
 800399e:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 80039a0:	4b1b      	ldr	r3, [pc, #108]	; (8003a10 <HAL_TIM_PWM_MspInit+0x324>)
 80039a2:	4a1c      	ldr	r2, [pc, #112]	; (8003a14 <HAL_TIM_PWM_MspInit+0x328>)
 80039a4:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 80039a6:	4b1a      	ldr	r3, [pc, #104]	; (8003a10 <HAL_TIM_PWM_MspInit+0x324>)
 80039a8:	223a      	movs	r2, #58	; 0x3a
 80039aa:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039ac:	4b18      	ldr	r3, [pc, #96]	; (8003a10 <HAL_TIM_PWM_MspInit+0x324>)
 80039ae:	2240      	movs	r2, #64	; 0x40
 80039b0:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80039b2:	4b17      	ldr	r3, [pc, #92]	; (8003a10 <HAL_TIM_PWM_MspInit+0x324>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80039b8:	4b15      	ldr	r3, [pc, #84]	; (8003a10 <HAL_TIM_PWM_MspInit+0x324>)
 80039ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039be:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80039c0:	4b13      	ldr	r3, [pc, #76]	; (8003a10 <HAL_TIM_PWM_MspInit+0x324>)
 80039c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80039c6:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80039c8:	4b11      	ldr	r3, [pc, #68]	; (8003a10 <HAL_TIM_PWM_MspInit+0x324>)
 80039ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039ce:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 80039d0:	4b0f      	ldr	r3, [pc, #60]	; (8003a10 <HAL_TIM_PWM_MspInit+0x324>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80039d6:	4b0e      	ldr	r3, [pc, #56]	; (8003a10 <HAL_TIM_PWM_MspInit+0x324>)
 80039d8:	2200      	movs	r2, #0
 80039da:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039dc:	4b0c      	ldr	r3, [pc, #48]	; (8003a10 <HAL_TIM_PWM_MspInit+0x324>)
 80039de:	2200      	movs	r2, #0
 80039e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 80039e2:	480b      	ldr	r0, [pc, #44]	; (8003a10 <HAL_TIM_PWM_MspInit+0x324>)
 80039e4:	f002 fd68 	bl	80064b8 <HAL_DMA_Init>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 80039ee:	f7ff fb17 	bl	8003020 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a06      	ldr	r2, [pc, #24]	; (8003a10 <HAL_TIM_PWM_MspInit+0x324>)
 80039f6:	631a      	str	r2, [r3, #48]	; 0x30
 80039f8:	4a05      	ldr	r2, [pc, #20]	; (8003a10 <HAL_TIM_PWM_MspInit+0x324>)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80039fe:	bf00      	nop
 8003a00:	3730      	adds	r7, #48	; 0x30
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40000c00 	.word	0x40000c00
 8003a0c:	58024400 	.word	0x58024400
 8003a10:	240014ec 	.word	0x240014ec
 8003a14:	40020040 	.word	0x40020040

08003a18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a16      	ldr	r2, [pc, #88]	; (8003a80 <HAL_TIM_Base_MspInit+0x68>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d10f      	bne.n	8003a4a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003a2a:	4b16      	ldr	r3, [pc, #88]	; (8003a84 <HAL_TIM_Base_MspInit+0x6c>)
 8003a2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a30:	4a14      	ldr	r2, [pc, #80]	; (8003a84 <HAL_TIM_Base_MspInit+0x6c>)
 8003a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a3a:	4b12      	ldr	r3, [pc, #72]	; (8003a84 <HAL_TIM_Base_MspInit+0x6c>)
 8003a3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8003a48:	e013      	b.n	8003a72 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a0e      	ldr	r2, [pc, #56]	; (8003a88 <HAL_TIM_Base_MspInit+0x70>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d10e      	bne.n	8003a72 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003a54:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <HAL_TIM_Base_MspInit+0x6c>)
 8003a56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a5a:	4a0a      	ldr	r2, [pc, #40]	; (8003a84 <HAL_TIM_Base_MspInit+0x6c>)
 8003a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a60:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a64:	4b07      	ldr	r3, [pc, #28]	; (8003a84 <HAL_TIM_Base_MspInit+0x6c>)
 8003a66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6e:	60bb      	str	r3, [r7, #8]
 8003a70:	68bb      	ldr	r3, [r7, #8]
}
 8003a72:	bf00      	nop
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40001c00 	.word	0x40001c00
 8003a84:	58024400 	.word	0x58024400
 8003a88:	40002000 	.word	0x40002000

08003a8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b08c      	sub	sp, #48	; 0x30
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a94:	f107 031c 	add.w	r3, r7, #28
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	605a      	str	r2, [r3, #4]
 8003a9e:	609a      	str	r2, [r3, #8]
 8003aa0:	60da      	str	r2, [r3, #12]
 8003aa2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aac:	d120      	bne.n	8003af0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aae:	4b52      	ldr	r3, [pc, #328]	; (8003bf8 <HAL_TIM_MspPostInit+0x16c>)
 8003ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ab4:	4a50      	ldr	r2, [pc, #320]	; (8003bf8 <HAL_TIM_MspPostInit+0x16c>)
 8003ab6:	f043 0302 	orr.w	r3, r3, #2
 8003aba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003abe:	4b4e      	ldr	r3, [pc, #312]	; (8003bf8 <HAL_TIM_MspPostInit+0x16c>)
 8003ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	61bb      	str	r3, [r7, #24]
 8003aca:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ada:	2300      	movs	r3, #0
 8003adc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ae2:	f107 031c 	add.w	r3, r7, #28
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4844      	ldr	r0, [pc, #272]	; (8003bfc <HAL_TIM_MspPostInit+0x170>)
 8003aea:	f005 f91d 	bl	8008d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003aee:	e07f      	b.n	8003bf0 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a42      	ldr	r2, [pc, #264]	; (8003c00 <HAL_TIM_MspPostInit+0x174>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d11f      	bne.n	8003b3a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003afa:	4b3f      	ldr	r3, [pc, #252]	; (8003bf8 <HAL_TIM_MspPostInit+0x16c>)
 8003afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b00:	4a3d      	ldr	r2, [pc, #244]	; (8003bf8 <HAL_TIM_MspPostInit+0x16c>)
 8003b02:	f043 0302 	orr.w	r3, r3, #2
 8003b06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b0a:	4b3b      	ldr	r3, [pc, #236]	; (8003bf8 <HAL_TIM_MspPostInit+0x16c>)
 8003b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	617b      	str	r3, [r7, #20]
 8003b16:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003b18:	2330      	movs	r3, #48	; 0x30
 8003b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b20:	2302      	movs	r3, #2
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b24:	2300      	movs	r3, #0
 8003b26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b28:	2302      	movs	r3, #2
 8003b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b2c:	f107 031c 	add.w	r3, r7, #28
 8003b30:	4619      	mov	r1, r3
 8003b32:	4832      	ldr	r0, [pc, #200]	; (8003bfc <HAL_TIM_MspPostInit+0x170>)
 8003b34:	f005 f8f8 	bl	8008d28 <HAL_GPIO_Init>
}
 8003b38:	e05a      	b.n	8003bf0 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a31      	ldr	r2, [pc, #196]	; (8003c04 <HAL_TIM_MspPostInit+0x178>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d131      	bne.n	8003ba8 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b44:	4b2c      	ldr	r3, [pc, #176]	; (8003bf8 <HAL_TIM_MspPostInit+0x16c>)
 8003b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b4a:	4a2b      	ldr	r2, [pc, #172]	; (8003bf8 <HAL_TIM_MspPostInit+0x16c>)
 8003b4c:	f043 0308 	orr.w	r3, r3, #8
 8003b50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b54:	4b28      	ldr	r3, [pc, #160]	; (8003bf8 <HAL_TIM_MspPostInit+0x16c>)
 8003b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	613b      	str	r3, [r7, #16]
 8003b60:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003b62:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b68:	2302      	movs	r3, #2
 8003b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b70:	2300      	movs	r3, #0
 8003b72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003b74:	2302      	movs	r3, #2
 8003b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b78:	f107 031c 	add.w	r3, r7, #28
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4822      	ldr	r0, [pc, #136]	; (8003c08 <HAL_TIM_MspPostInit+0x17c>)
 8003b80:	f005 f8d2 	bl	8008d28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003b84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b8e:	2302      	movs	r3, #2
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b92:	2300      	movs	r3, #0
 8003b94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003b96:	2302      	movs	r3, #2
 8003b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b9a:	f107 031c 	add.w	r3, r7, #28
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4819      	ldr	r0, [pc, #100]	; (8003c08 <HAL_TIM_MspPostInit+0x17c>)
 8003ba2:	f005 f8c1 	bl	8008d28 <HAL_GPIO_Init>
}
 8003ba6:	e023      	b.n	8003bf0 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a17      	ldr	r2, [pc, #92]	; (8003c0c <HAL_TIM_MspPostInit+0x180>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d11e      	bne.n	8003bf0 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bb2:	4b11      	ldr	r3, [pc, #68]	; (8003bf8 <HAL_TIM_MspPostInit+0x16c>)
 8003bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bb8:	4a0f      	ldr	r2, [pc, #60]	; (8003bf8 <HAL_TIM_MspPostInit+0x16c>)
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003bc2:	4b0d      	ldr	r3, [pc, #52]	; (8003bf8 <HAL_TIM_MspPostInit+0x16c>)
 8003bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003bd0:	2308      	movs	r3, #8
 8003bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003be0:	2302      	movs	r3, #2
 8003be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003be4:	f107 031c 	add.w	r3, r7, #28
 8003be8:	4619      	mov	r1, r3
 8003bea:	4809      	ldr	r0, [pc, #36]	; (8003c10 <HAL_TIM_MspPostInit+0x184>)
 8003bec:	f005 f89c 	bl	8008d28 <HAL_GPIO_Init>
}
 8003bf0:	bf00      	nop
 8003bf2:	3730      	adds	r7, #48	; 0x30
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	58024400 	.word	0x58024400
 8003bfc:	58020400 	.word	0x58020400
 8003c00:	40000400 	.word	0x40000400
 8003c04:	40000800 	.word	0x40000800
 8003c08:	58020c00 	.word	0x58020c00
 8003c0c:	40000c00 	.word	0x40000c00
 8003c10:	58020000 	.word	0x58020000

08003c14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b0ba      	sub	sp, #232	; 0xe8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c1c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	605a      	str	r2, [r3, #4]
 8003c26:	609a      	str	r2, [r3, #8]
 8003c28:	60da      	str	r2, [r3, #12]
 8003c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c2c:	f107 0318 	add.w	r3, r7, #24
 8003c30:	22b8      	movs	r2, #184	; 0xb8
 8003c32:	2100      	movs	r1, #0
 8003c34:	4618      	mov	r0, r3
 8003c36:	f018 f970 	bl	801bf1a <memset>
  if(huart->Instance==UART4)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a4d      	ldr	r2, [pc, #308]	; (8003d74 <HAL_UART_MspInit+0x160>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d147      	bne.n	8003cd4 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003c44:	f04f 0202 	mov.w	r2, #2
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003c50:	2300      	movs	r3, #0
 8003c52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c56:	f107 0318 	add.w	r3, r7, #24
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f007 fe52 	bl	800b904 <HAL_RCCEx_PeriphCLKConfig>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003c66:	f7ff f9db 	bl	8003020 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003c6a:	4b43      	ldr	r3, [pc, #268]	; (8003d78 <HAL_UART_MspInit+0x164>)
 8003c6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c70:	4a41      	ldr	r2, [pc, #260]	; (8003d78 <HAL_UART_MspInit+0x164>)
 8003c72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c76:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c7a:	4b3f      	ldr	r3, [pc, #252]	; (8003d78 <HAL_UART_MspInit+0x164>)
 8003c7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c88:	4b3b      	ldr	r3, [pc, #236]	; (8003d78 <HAL_UART_MspInit+0x164>)
 8003c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c8e:	4a3a      	ldr	r2, [pc, #232]	; (8003d78 <HAL_UART_MspInit+0x164>)
 8003c90:	f043 0302 	orr.w	r3, r3, #2
 8003c94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c98:	4b37      	ldr	r3, [pc, #220]	; (8003d78 <HAL_UART_MspInit+0x164>)
 8003c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	613b      	str	r3, [r7, #16]
 8003ca4:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003ca6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003caa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003cc0:	2308      	movs	r3, #8
 8003cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cc6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003cca:	4619      	mov	r1, r3
 8003ccc:	482b      	ldr	r0, [pc, #172]	; (8003d7c <HAL_UART_MspInit+0x168>)
 8003cce:	f005 f82b 	bl	8008d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003cd2:	e04a      	b.n	8003d6a <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a29      	ldr	r2, [pc, #164]	; (8003d80 <HAL_UART_MspInit+0x16c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d145      	bne.n	8003d6a <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003cde:	f04f 0201 	mov.w	r2, #1
 8003ce2:	f04f 0300 	mov.w	r3, #0
 8003ce6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003cea:	2300      	movs	r3, #0
 8003cec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cf0:	f107 0318 	add.w	r3, r7, #24
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f007 fe05 	bl	800b904 <HAL_RCCEx_PeriphCLKConfig>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003d00:	f7ff f98e 	bl	8003020 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003d04:	4b1c      	ldr	r3, [pc, #112]	; (8003d78 <HAL_UART_MspInit+0x164>)
 8003d06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d0a:	4a1b      	ldr	r2, [pc, #108]	; (8003d78 <HAL_UART_MspInit+0x164>)
 8003d0c:	f043 0320 	orr.w	r3, r3, #32
 8003d10:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003d14:	4b18      	ldr	r3, [pc, #96]	; (8003d78 <HAL_UART_MspInit+0x164>)
 8003d16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d1a:	f003 0320 	and.w	r3, r3, #32
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d22:	4b15      	ldr	r3, [pc, #84]	; (8003d78 <HAL_UART_MspInit+0x164>)
 8003d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d28:	4a13      	ldr	r2, [pc, #76]	; (8003d78 <HAL_UART_MspInit+0x164>)
 8003d2a:	f043 0304 	orr.w	r3, r3, #4
 8003d2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d32:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <HAL_UART_MspInit+0x164>)
 8003d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d40:	23c0      	movs	r3, #192	; 0xc0
 8003d42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d46:	2302      	movs	r3, #2
 8003d48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d52:	2300      	movs	r3, #0
 8003d54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003d58:	2307      	movs	r3, #7
 8003d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d5e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003d62:	4619      	mov	r1, r3
 8003d64:	4807      	ldr	r0, [pc, #28]	; (8003d84 <HAL_UART_MspInit+0x170>)
 8003d66:	f004 ffdf 	bl	8008d28 <HAL_GPIO_Init>
}
 8003d6a:	bf00      	nop
 8003d6c:	37e8      	adds	r7, #232	; 0xe8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40004c00 	.word	0x40004c00
 8003d78:	58024400 	.word	0x58024400
 8003d7c:	58020400 	.word	0x58020400
 8003d80:	40011400 	.word	0x40011400
 8003d84:	58020800 	.word	0x58020800

08003d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d8c:	e7fe      	b.n	8003d8c <NMI_Handler+0x4>

08003d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d92:	e7fe      	b.n	8003d92 <HardFault_Handler+0x4>

08003d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d98:	e7fe      	b.n	8003d98 <MemManage_Handler+0x4>

08003d9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d9e:	e7fe      	b.n	8003d9e <BusFault_Handler+0x4>

08003da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003da4:	e7fe      	b.n	8003da4 <UsageFault_Handler+0x4>

08003da6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003da6:	b480      	push	{r7}
 8003da8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003daa:	bf00      	nop
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003db8:	bf00      	nop
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dc6:	bf00      	nop
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003dd4:	f000 fa4a 	bl	800426c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003dd8:	bf00      	nop
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8003de0:	4802      	ldr	r0, [pc, #8]	; (8003dec <DMA1_Stream0_IRQHandler+0x10>)
 8003de2:	f003 f92b 	bl	800703c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003de6:	bf00      	nop
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	24001474 	.word	0x24001474

08003df0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8003df4:	4802      	ldr	r0, [pc, #8]	; (8003e00 <DMA1_Stream1_IRQHandler+0x10>)
 8003df6:	f003 f921 	bl	800703c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003dfa:	bf00      	nop
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	2400130c 	.word	0x2400130c

08003e04 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003e08:	4802      	ldr	r0, [pc, #8]	; (8003e14 <DMA1_Stream2_IRQHandler+0x10>)
 8003e0a:	f003 f917 	bl	800703c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003e0e:	bf00      	nop
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	240014ec 	.word	0x240014ec

08003e18 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003e1c:	4802      	ldr	r0, [pc, #8]	; (8003e28 <DMA1_Stream3_IRQHandler+0x10>)
 8003e1e:	f003 f90d 	bl	800703c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003e22:	bf00      	nop
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	24001384 	.word	0x24001384

08003e2c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8003e30:	4802      	ldr	r0, [pc, #8]	; (8003e3c <DMA1_Stream4_IRQHandler+0x10>)
 8003e32:	f003 f903 	bl	800703c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003e36:	bf00      	nop
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	240013fc 	.word	0x240013fc

08003e40 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003e44:	4802      	ldr	r0, [pc, #8]	; (8003e50 <DMA1_Stream5_IRQHandler+0x10>)
 8003e46:	f003 f8f9 	bl	800703c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003e4a:	bf00      	nop
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	24000d4c 	.word	0x24000d4c

08003e54 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003e58:	4802      	ldr	r0, [pc, #8]	; (8003e64 <TIM4_IRQHandler+0x10>)
 8003e5a:	f00c ff35 	bl	8010cc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003e5e:	bf00      	nop
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	240011dc 	.word	0x240011dc

08003e68 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003e6c:	4802      	ldr	r0, [pc, #8]	; (8003e78 <I2C2_EV_IRQHandler+0x10>)
 8003e6e:	f005 f9c5 	bl	80091fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003e72:	bf00      	nop
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	24000edc 	.word	0x24000edc

08003e7c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003e80:	4802      	ldr	r0, [pc, #8]	; (8003e8c <DMA2_Stream7_IRQHandler+0x10>)
 8003e82:	f003 f8db 	bl	800703c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003e86:	bf00      	nop
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	24000dc4 	.word	0x24000dc4

08003e90 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003e94:	4802      	ldr	r0, [pc, #8]	; (8003ea0 <OTG_HS_IRQHandler+0x10>)
 8003e96:	f005 fbbb 	bl	8009610 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003e9a:	bf00      	nop
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	24002db8 	.word	0x24002db8

08003ea4 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8003ea8:	4802      	ldr	r0, [pc, #8]	; (8003eb4 <SDMMC2_IRQHandler+0x10>)
 8003eaa:	f00a fb81 	bl	800e5b0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8003eae:	bf00      	nop
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	24000f30 	.word	0x24000f30

08003eb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
  return 1;
 8003ebc:	2301      	movs	r3, #1
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <_kill>:

int _kill(int pid, int sig)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003ed2:	f018 f875 	bl	801bfc0 <__errno>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2216      	movs	r2, #22
 8003eda:	601a      	str	r2, [r3, #0]
  return -1;
 8003edc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <_exit>:

void _exit (int status)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7ff ffe7 	bl	8003ec8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003efa:	e7fe      	b.n	8003efa <_exit+0x12>

08003efc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f08:	2300      	movs	r3, #0
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	e00a      	b.n	8003f24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003f0e:	f3af 8000 	nop.w
 8003f12:	4601      	mov	r1, r0
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	60ba      	str	r2, [r7, #8]
 8003f1a:	b2ca      	uxtb	r2, r1
 8003f1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	3301      	adds	r3, #1
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	dbf0      	blt.n	8003f0e <_read+0x12>
  }

  return len;
 8003f2c:	687b      	ldr	r3, [r7, #4]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b086      	sub	sp, #24
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	60f8      	str	r0, [r7, #12]
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f42:	2300      	movs	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]
 8003f46:	e009      	b.n	8003f5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	60ba      	str	r2, [r7, #8]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	dbf1      	blt.n	8003f48 <_write+0x12>
  }
  return len;
 8003f64:	687b      	ldr	r3, [r7, #4]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3718      	adds	r7, #24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <_close>:

int _close(int file)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003f76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f96:	605a      	str	r2, [r3, #4]
  return 0;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <_isatty>:

int _isatty(int file)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003fae:	2301      	movs	r3, #1
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
	...

08003fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fe0:	4a14      	ldr	r2, [pc, #80]	; (8004034 <_sbrk+0x5c>)
 8003fe2:	4b15      	ldr	r3, [pc, #84]	; (8004038 <_sbrk+0x60>)
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fec:	4b13      	ldr	r3, [pc, #76]	; (800403c <_sbrk+0x64>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d102      	bne.n	8003ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ff4:	4b11      	ldr	r3, [pc, #68]	; (800403c <_sbrk+0x64>)
 8003ff6:	4a12      	ldr	r2, [pc, #72]	; (8004040 <_sbrk+0x68>)
 8003ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ffa:	4b10      	ldr	r3, [pc, #64]	; (800403c <_sbrk+0x64>)
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4413      	add	r3, r2
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	429a      	cmp	r2, r3
 8004006:	d207      	bcs.n	8004018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004008:	f017 ffda 	bl	801bfc0 <__errno>
 800400c:	4603      	mov	r3, r0
 800400e:	220c      	movs	r2, #12
 8004010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004012:	f04f 33ff 	mov.w	r3, #4294967295
 8004016:	e009      	b.n	800402c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004018:	4b08      	ldr	r3, [pc, #32]	; (800403c <_sbrk+0x64>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800401e:	4b07      	ldr	r3, [pc, #28]	; (800403c <_sbrk+0x64>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4413      	add	r3, r2
 8004026:	4a05      	ldr	r2, [pc, #20]	; (800403c <_sbrk+0x64>)
 8004028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800402a:	68fb      	ldr	r3, [r7, #12]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	24050000 	.word	0x24050000
 8004038:	00000800 	.word	0x00000800
 800403c:	2400168c 	.word	0x2400168c
 8004040:	24003630 	.word	0x24003630

08004044 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004048:	4b32      	ldr	r3, [pc, #200]	; (8004114 <SystemInit+0xd0>)
 800404a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404e:	4a31      	ldr	r2, [pc, #196]	; (8004114 <SystemInit+0xd0>)
 8004050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004058:	4b2f      	ldr	r3, [pc, #188]	; (8004118 <SystemInit+0xd4>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 030f 	and.w	r3, r3, #15
 8004060:	2b06      	cmp	r3, #6
 8004062:	d807      	bhi.n	8004074 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004064:	4b2c      	ldr	r3, [pc, #176]	; (8004118 <SystemInit+0xd4>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f023 030f 	bic.w	r3, r3, #15
 800406c:	4a2a      	ldr	r2, [pc, #168]	; (8004118 <SystemInit+0xd4>)
 800406e:	f043 0307 	orr.w	r3, r3, #7
 8004072:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004074:	4b29      	ldr	r3, [pc, #164]	; (800411c <SystemInit+0xd8>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a28      	ldr	r2, [pc, #160]	; (800411c <SystemInit+0xd8>)
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004080:	4b26      	ldr	r3, [pc, #152]	; (800411c <SystemInit+0xd8>)
 8004082:	2200      	movs	r2, #0
 8004084:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004086:	4b25      	ldr	r3, [pc, #148]	; (800411c <SystemInit+0xd8>)
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	4924      	ldr	r1, [pc, #144]	; (800411c <SystemInit+0xd8>)
 800408c:	4b24      	ldr	r3, [pc, #144]	; (8004120 <SystemInit+0xdc>)
 800408e:	4013      	ands	r3, r2
 8004090:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004092:	4b21      	ldr	r3, [pc, #132]	; (8004118 <SystemInit+0xd4>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b00      	cmp	r3, #0
 800409c:	d007      	beq.n	80040ae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800409e:	4b1e      	ldr	r3, [pc, #120]	; (8004118 <SystemInit+0xd4>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f023 030f 	bic.w	r3, r3, #15
 80040a6:	4a1c      	ldr	r2, [pc, #112]	; (8004118 <SystemInit+0xd4>)
 80040a8:	f043 0307 	orr.w	r3, r3, #7
 80040ac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80040ae:	4b1b      	ldr	r3, [pc, #108]	; (800411c <SystemInit+0xd8>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80040b4:	4b19      	ldr	r3, [pc, #100]	; (800411c <SystemInit+0xd8>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80040ba:	4b18      	ldr	r3, [pc, #96]	; (800411c <SystemInit+0xd8>)
 80040bc:	2200      	movs	r2, #0
 80040be:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80040c0:	4b16      	ldr	r3, [pc, #88]	; (800411c <SystemInit+0xd8>)
 80040c2:	4a18      	ldr	r2, [pc, #96]	; (8004124 <SystemInit+0xe0>)
 80040c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80040c6:	4b15      	ldr	r3, [pc, #84]	; (800411c <SystemInit+0xd8>)
 80040c8:	4a17      	ldr	r2, [pc, #92]	; (8004128 <SystemInit+0xe4>)
 80040ca:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80040cc:	4b13      	ldr	r3, [pc, #76]	; (800411c <SystemInit+0xd8>)
 80040ce:	4a17      	ldr	r2, [pc, #92]	; (800412c <SystemInit+0xe8>)
 80040d0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80040d2:	4b12      	ldr	r3, [pc, #72]	; (800411c <SystemInit+0xd8>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80040d8:	4b10      	ldr	r3, [pc, #64]	; (800411c <SystemInit+0xd8>)
 80040da:	4a14      	ldr	r2, [pc, #80]	; (800412c <SystemInit+0xe8>)
 80040dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80040de:	4b0f      	ldr	r3, [pc, #60]	; (800411c <SystemInit+0xd8>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80040e4:	4b0d      	ldr	r3, [pc, #52]	; (800411c <SystemInit+0xd8>)
 80040e6:	4a11      	ldr	r2, [pc, #68]	; (800412c <SystemInit+0xe8>)
 80040e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80040ea:	4b0c      	ldr	r3, [pc, #48]	; (800411c <SystemInit+0xd8>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80040f0:	4b0a      	ldr	r3, [pc, #40]	; (800411c <SystemInit+0xd8>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a09      	ldr	r2, [pc, #36]	; (800411c <SystemInit+0xd8>)
 80040f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80040fc:	4b07      	ldr	r3, [pc, #28]	; (800411c <SystemInit+0xd8>)
 80040fe:	2200      	movs	r2, #0
 8004100:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004102:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <SystemInit+0xec>)
 8004104:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004108:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800410a:	bf00      	nop
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	e000ed00 	.word	0xe000ed00
 8004118:	52002000 	.word	0x52002000
 800411c:	58024400 	.word	0x58024400
 8004120:	eaf6ed7f 	.word	0xeaf6ed7f
 8004124:	02020200 	.word	0x02020200
 8004128:	01ff0000 	.word	0x01ff0000
 800412c:	01010280 	.word	0x01010280
 8004130:	52004000 	.word	0x52004000

08004134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004134:	f8df d034 	ldr.w	sp, [pc, #52]	; 800416c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004138:	f7ff ff84 	bl	8004044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800413c:	480c      	ldr	r0, [pc, #48]	; (8004170 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800413e:	490d      	ldr	r1, [pc, #52]	; (8004174 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004140:	4a0d      	ldr	r2, [pc, #52]	; (8004178 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004144:	e002      	b.n	800414c <LoopCopyDataInit>

08004146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800414a:	3304      	adds	r3, #4

0800414c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800414c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800414e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004150:	d3f9      	bcc.n	8004146 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004152:	4a0a      	ldr	r2, [pc, #40]	; (800417c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004154:	4c0a      	ldr	r4, [pc, #40]	; (8004180 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004158:	e001      	b.n	800415e <LoopFillZerobss>

0800415a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800415a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800415c:	3204      	adds	r2, #4

0800415e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800415e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004160:	d3fb      	bcc.n	800415a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004162:	f017 ff33 	bl	801bfcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004166:	f7fd fa83 	bl	8001670 <main>
  bx  lr
 800416a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800416c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004170:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004174:	240002c8 	.word	0x240002c8
  ldr r2, =_sidata
 8004178:	08020a2c 	.word	0x08020a2c
  ldr r2, =_sbss
 800417c:	240002c8 	.word	0x240002c8
  ldr r4, =_ebss
 8004180:	24003630 	.word	0x24003630

08004184 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004184:	e7fe      	b.n	8004184 <ADC3_IRQHandler>
	...

08004188 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800418e:	2003      	movs	r0, #3
 8004190:	f002 f952 	bl	8006438 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004194:	f007 f9e0 	bl	800b558 <HAL_RCC_GetSysClockFreq>
 8004198:	4602      	mov	r2, r0
 800419a:	4b15      	ldr	r3, [pc, #84]	; (80041f0 <HAL_Init+0x68>)
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	0a1b      	lsrs	r3, r3, #8
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	4913      	ldr	r1, [pc, #76]	; (80041f4 <HAL_Init+0x6c>)
 80041a6:	5ccb      	ldrb	r3, [r1, r3]
 80041a8:	f003 031f 	and.w	r3, r3, #31
 80041ac:	fa22 f303 	lsr.w	r3, r2, r3
 80041b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041b2:	4b0f      	ldr	r3, [pc, #60]	; (80041f0 <HAL_Init+0x68>)
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	f003 030f 	and.w	r3, r3, #15
 80041ba:	4a0e      	ldr	r2, [pc, #56]	; (80041f4 <HAL_Init+0x6c>)
 80041bc:	5cd3      	ldrb	r3, [r2, r3]
 80041be:	f003 031f 	and.w	r3, r3, #31
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	fa22 f303 	lsr.w	r3, r2, r3
 80041c8:	4a0b      	ldr	r2, [pc, #44]	; (80041f8 <HAL_Init+0x70>)
 80041ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041cc:	4a0b      	ldr	r2, [pc, #44]	; (80041fc <HAL_Init+0x74>)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041d2:	200f      	movs	r0, #15
 80041d4:	f000 f814 	bl	8004200 <HAL_InitTick>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e002      	b.n	80041e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80041e2:	f7fe ff23 	bl	800302c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	58024400 	.word	0x58024400
 80041f4:	08020140 	.word	0x08020140
 80041f8:	24000004 	.word	0x24000004
 80041fc:	24000000 	.word	0x24000000

08004200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004208:	4b15      	ldr	r3, [pc, #84]	; (8004260 <HAL_InitTick+0x60>)
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e021      	b.n	8004258 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004214:	4b13      	ldr	r3, [pc, #76]	; (8004264 <HAL_InitTick+0x64>)
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	4b11      	ldr	r3, [pc, #68]	; (8004260 <HAL_InitTick+0x60>)
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	4619      	mov	r1, r3
 800421e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004222:	fbb3 f3f1 	udiv	r3, r3, r1
 8004226:	fbb2 f3f3 	udiv	r3, r2, r3
 800422a:	4618      	mov	r0, r3
 800422c:	f002 f937 	bl	800649e <HAL_SYSTICK_Config>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e00e      	b.n	8004258 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b0f      	cmp	r3, #15
 800423e:	d80a      	bhi.n	8004256 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004240:	2200      	movs	r2, #0
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	f04f 30ff 	mov.w	r0, #4294967295
 8004248:	f002 f901 	bl	800644e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800424c:	4a06      	ldr	r2, [pc, #24]	; (8004268 <HAL_InitTick+0x68>)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	e000      	b.n	8004258 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
}
 8004258:	4618      	mov	r0, r3
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	2400000c 	.word	0x2400000c
 8004264:	24000000 	.word	0x24000000
 8004268:	24000008 	.word	0x24000008

0800426c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004270:	4b06      	ldr	r3, [pc, #24]	; (800428c <HAL_IncTick+0x20>)
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	461a      	mov	r2, r3
 8004276:	4b06      	ldr	r3, [pc, #24]	; (8004290 <HAL_IncTick+0x24>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4413      	add	r3, r2
 800427c:	4a04      	ldr	r2, [pc, #16]	; (8004290 <HAL_IncTick+0x24>)
 800427e:	6013      	str	r3, [r2, #0]
}
 8004280:	bf00      	nop
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	2400000c 	.word	0x2400000c
 8004290:	24001690 	.word	0x24001690

08004294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  return uwTick;
 8004298:	4b03      	ldr	r3, [pc, #12]	; (80042a8 <HAL_GetTick+0x14>)
 800429a:	681b      	ldr	r3, [r3, #0]
}
 800429c:	4618      	mov	r0, r3
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	24001690 	.word	0x24001690

080042ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042b4:	f7ff ffee 	bl	8004294 <HAL_GetTick>
 80042b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c4:	d005      	beq.n	80042d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042c6:	4b0a      	ldr	r3, [pc, #40]	; (80042f0 <HAL_Delay+0x44>)
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	461a      	mov	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4413      	add	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80042d2:	bf00      	nop
 80042d4:	f7ff ffde 	bl	8004294 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d8f7      	bhi.n	80042d4 <HAL_Delay+0x28>
  {
  }
}
 80042e4:	bf00      	nop
 80042e6:	bf00      	nop
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	2400000c 	.word	0x2400000c

080042f4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80042fe:	4b07      	ldr	r3, [pc, #28]	; (800431c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	43db      	mvns	r3, r3
 8004306:	401a      	ands	r2, r3
 8004308:	4904      	ldr	r1, [pc, #16]	; (800431c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	4313      	orrs	r3, r2
 800430e:	604b      	str	r3, [r1, #4]
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	58000400 	.word	0x58000400

08004320 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	431a      	orrs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	609a      	str	r2, [r3, #8]
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004346:	b480      	push	{r7}
 8004348:	b083      	sub	sp, #12
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
 800434e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	609a      	str	r2, [r3, #8]
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800437c:	4618      	mov	r0, r3
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	3360      	adds	r3, #96	; 0x60
 800439a:	461a      	mov	r2, r3
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4a10      	ldr	r2, [pc, #64]	; (80043e8 <LL_ADC_SetOffset+0x60>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d10b      	bne.n	80043c4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80043c2:	e00b      	b.n	80043dc <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	430b      	orrs	r3, r1
 80043d6:	431a      	orrs	r2, r3
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	601a      	str	r2, [r3, #0]
}
 80043dc:	bf00      	nop
 80043de:	371c      	adds	r7, #28
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	58026000 	.word	0x58026000

080043ec <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	3360      	adds	r3, #96	; 0x60
 80043fa:	461a      	mov	r2, r3
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800440c:	4618      	mov	r0, r3
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f003 031f 	and.w	r3, r3, #31
 8004432:	6879      	ldr	r1, [r7, #4]
 8004434:	fa01 f303 	lsl.w	r3, r1, r3
 8004438:	431a      	orrs	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	611a      	str	r2, [r3, #16]
}
 800443e:	bf00      	nop
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
	...

0800444c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800444c:	b480      	push	{r7}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4a0c      	ldr	r2, [pc, #48]	; (800448c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00e      	beq.n	800447e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	3360      	adds	r3, #96	; 0x60
 8004464:	461a      	mov	r2, r3
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	431a      	orrs	r2, r3
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	601a      	str	r2, [r3, #0]
  }
}
 800447e:	bf00      	nop
 8004480:	371c      	adds	r7, #28
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	58026000 	.word	0x58026000

08004490 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4a0c      	ldr	r2, [pc, #48]	; (80044d0 <LL_ADC_SetOffsetSaturation+0x40>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d10e      	bne.n	80044c2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	3360      	adds	r3, #96	; 0x60
 80044a8:	461a      	mov	r2, r3
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	431a      	orrs	r2, r3
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80044c2:	bf00      	nop
 80044c4:	371c      	adds	r7, #28
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	58026000 	.word	0x58026000

080044d4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b087      	sub	sp, #28
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4a0c      	ldr	r2, [pc, #48]	; (8004514 <LL_ADC_SetOffsetSign+0x40>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d10e      	bne.n	8004506 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	3360      	adds	r3, #96	; 0x60
 80044ec:	461a      	mov	r2, r3
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	431a      	orrs	r2, r3
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8004506:	bf00      	nop
 8004508:	371c      	adds	r7, #28
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	58026000 	.word	0x58026000

08004518 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	3360      	adds	r3, #96	; 0x60
 8004528:	461a      	mov	r2, r3
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4413      	add	r3, r2
 8004530:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	4a0c      	ldr	r2, [pc, #48]	; (8004568 <LL_ADC_SetOffsetState+0x50>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d108      	bne.n	800454c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	431a      	orrs	r2, r3
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800454a:	e007      	b.n	800455c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	431a      	orrs	r2, r3
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	601a      	str	r2, [r3, #0]
}
 800455c:	bf00      	nop
 800455e:	371c      	adds	r7, #28
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	58026000 	.word	0x58026000

0800456c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004580:	2301      	movs	r3, #1
 8004582:	e000      	b.n	8004586 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004592:	b480      	push	{r7}
 8004594:	b087      	sub	sp, #28
 8004596:	af00      	add	r7, sp, #0
 8004598:	60f8      	str	r0, [r7, #12]
 800459a:	60b9      	str	r1, [r7, #8]
 800459c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	3330      	adds	r3, #48	; 0x30
 80045a2:	461a      	mov	r2, r3
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	0a1b      	lsrs	r3, r3, #8
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	f003 030c 	and.w	r3, r3, #12
 80045ae:	4413      	add	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f003 031f 	and.w	r3, r3, #31
 80045bc:	211f      	movs	r1, #31
 80045be:	fa01 f303 	lsl.w	r3, r1, r3
 80045c2:	43db      	mvns	r3, r3
 80045c4:	401a      	ands	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	0e9b      	lsrs	r3, r3, #26
 80045ca:	f003 011f 	and.w	r1, r3, #31
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f003 031f 	and.w	r3, r3, #31
 80045d4:	fa01 f303 	lsl.w	r3, r1, r3
 80045d8:	431a      	orrs	r2, r3
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80045de:	bf00      	nop
 80045e0:	371c      	adds	r7, #28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b087      	sub	sp, #28
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	60f8      	str	r0, [r7, #12]
 80045f2:	60b9      	str	r1, [r7, #8]
 80045f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3314      	adds	r3, #20
 80045fa:	461a      	mov	r2, r3
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	0e5b      	lsrs	r3, r3, #25
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	f003 0304 	and.w	r3, r3, #4
 8004606:	4413      	add	r3, r2
 8004608:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	0d1b      	lsrs	r3, r3, #20
 8004612:	f003 031f 	and.w	r3, r3, #31
 8004616:	2107      	movs	r1, #7
 8004618:	fa01 f303 	lsl.w	r3, r1, r3
 800461c:	43db      	mvns	r3, r3
 800461e:	401a      	ands	r2, r3
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	0d1b      	lsrs	r3, r3, #20
 8004624:	f003 031f 	and.w	r3, r3, #31
 8004628:	6879      	ldr	r1, [r7, #4]
 800462a:	fa01 f303 	lsl.w	r3, r1, r3
 800462e:	431a      	orrs	r2, r3
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004634:	bf00      	nop
 8004636:	371c      	adds	r7, #28
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4a1a      	ldr	r2, [pc, #104]	; (80046b8 <LL_ADC_SetChannelSingleDiff+0x78>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d115      	bne.n	8004680 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004660:	43db      	mvns	r3, r3
 8004662:	401a      	ands	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f003 0318 	and.w	r3, r3, #24
 800466a:	4914      	ldr	r1, [pc, #80]	; (80046bc <LL_ADC_SetChannelSingleDiff+0x7c>)
 800466c:	40d9      	lsrs	r1, r3
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	400b      	ands	r3, r1
 8004672:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004676:	431a      	orrs	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800467e:	e014      	b.n	80046aa <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800468c:	43db      	mvns	r3, r3
 800468e:	401a      	ands	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f003 0318 	and.w	r3, r3, #24
 8004696:	4909      	ldr	r1, [pc, #36]	; (80046bc <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004698:	40d9      	lsrs	r1, r3
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	400b      	ands	r3, r1
 800469e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046a2:	431a      	orrs	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80046aa:	bf00      	nop
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	58026000 	.word	0x58026000
 80046bc:	000fffff 	.word	0x000fffff

080046c0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f003 031f 	and.w	r3, r3, #31
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	4b04      	ldr	r3, [pc, #16]	; (8004718 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004706:	4013      	ands	r3, r2
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6093      	str	r3, [r2, #8]
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	5fffffc0 	.word	0x5fffffc0

0800471c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800472c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004730:	d101      	bne.n	8004736 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	4b05      	ldr	r3, [pc, #20]	; (8004768 <LL_ADC_EnableInternalRegulator+0x24>)
 8004752:	4013      	ands	r3, r2
 8004754:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	6fffffc0 	.word	0x6fffffc0

0800476c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800477c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004780:	d101      	bne.n	8004786 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	4b05      	ldr	r3, [pc, #20]	; (80047b8 <LL_ADC_Enable+0x24>)
 80047a2:	4013      	ands	r3, r2
 80047a4:	f043 0201 	orr.w	r2, r3, #1
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	7fffffc0 	.word	0x7fffffc0

080047bc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <LL_ADC_Disable+0x24>)
 80047ca:	4013      	ands	r3, r2
 80047cc:	f043 0202 	orr.w	r2, r3, #2
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	7fffffc0 	.word	0x7fffffc0

080047e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <LL_ADC_IsEnabled+0x18>
 80047f8:	2301      	movs	r3, #1
 80047fa:	e000      	b.n	80047fe <LL_ADC_IsEnabled+0x1a>
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b02      	cmp	r3, #2
 800481c:	d101      	bne.n	8004822 <LL_ADC_IsDisableOngoing+0x18>
 800481e:	2301      	movs	r3, #1
 8004820:	e000      	b.n	8004824 <LL_ADC_IsDisableOngoing+0x1a>
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	4b05      	ldr	r3, [pc, #20]	; (8004854 <LL_ADC_REG_StartConversion+0x24>)
 800483e:	4013      	ands	r3, r2
 8004840:	f043 0204 	orr.w	r2, r3, #4
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	7fffffc0 	.word	0x7fffffc0

08004858 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	4b05      	ldr	r3, [pc, #20]	; (800487c <LL_ADC_REG_StopConversion+0x24>)
 8004866:	4013      	ands	r3, r2
 8004868:	f043 0210 	orr.w	r2, r3, #16
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	7fffffc0 	.word	0x7fffffc0

08004880 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b04      	cmp	r3, #4
 8004892:	d101      	bne.n	8004898 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004894:	2301      	movs	r3, #1
 8004896:	e000      	b.n	800489a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
	...

080048a8 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	4b05      	ldr	r3, [pc, #20]	; (80048cc <LL_ADC_INJ_StopConversion+0x24>)
 80048b6:	4013      	ands	r3, r2
 80048b8:	f043 0220 	orr.w	r2, r3, #32
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	7fffffc0 	.word	0x7fffffc0

080048d0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d101      	bne.n	80048e8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80048e4:	2301      	movs	r3, #1
 80048e6:	e000      	b.n	80048ea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
	...

080048f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80048f8:	b590      	push	{r4, r7, lr}
 80048fa:	b089      	sub	sp, #36	; 0x24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004900:	2300      	movs	r3, #0
 8004902:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004904:	2300      	movs	r3, #0
 8004906:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e1ee      	b.n	8004cf0 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800491c:	2b00      	cmp	r3, #0
 800491e:	d109      	bne.n	8004934 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7fe fb9d 	bl	8003060 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff feef 	bl	800471c <LL_ADC_IsDeepPowerDownEnabled>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d004      	beq.n	800494e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4618      	mov	r0, r3
 800494a:	f7ff fed5 	bl	80046f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff ff0a 	bl	800476c <LL_ADC_IsInternalRegulatorEnabled>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d114      	bne.n	8004988 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4618      	mov	r0, r3
 8004964:	f7ff feee 	bl	8004744 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004968:	4b8e      	ldr	r3, [pc, #568]	; (8004ba4 <HAL_ADC_Init+0x2ac>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	099b      	lsrs	r3, r3, #6
 800496e:	4a8e      	ldr	r2, [pc, #568]	; (8004ba8 <HAL_ADC_Init+0x2b0>)
 8004970:	fba2 2303 	umull	r2, r3, r2, r3
 8004974:	099b      	lsrs	r3, r3, #6
 8004976:	3301      	adds	r3, #1
 8004978:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800497a:	e002      	b.n	8004982 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	3b01      	subs	r3, #1
 8004980:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1f9      	bne.n	800497c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4618      	mov	r0, r3
 800498e:	f7ff feed 	bl	800476c <LL_ADC_IsInternalRegulatorEnabled>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10d      	bne.n	80049b4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800499c:	f043 0210 	orr.w	r2, r3, #16
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049a8:	f043 0201 	orr.w	r2, r3, #1
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7ff ff61 	bl	8004880 <LL_ADC_REG_IsConversionOngoing>
 80049be:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049c4:	f003 0310 	and.w	r3, r3, #16
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f040 8188 	bne.w	8004cde <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f040 8184 	bne.w	8004cde <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049da:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80049de:	f043 0202 	orr.w	r2, r3, #2
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7ff fefa 	bl	80047e4 <LL_ADC_IsEnabled>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d136      	bne.n	8004a64 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a6c      	ldr	r2, [pc, #432]	; (8004bac <HAL_ADC_Init+0x2b4>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d004      	beq.n	8004a0a <HAL_ADC_Init+0x112>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a6a      	ldr	r2, [pc, #424]	; (8004bb0 <HAL_ADC_Init+0x2b8>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d10e      	bne.n	8004a28 <HAL_ADC_Init+0x130>
 8004a0a:	4868      	ldr	r0, [pc, #416]	; (8004bac <HAL_ADC_Init+0x2b4>)
 8004a0c:	f7ff feea 	bl	80047e4 <LL_ADC_IsEnabled>
 8004a10:	4604      	mov	r4, r0
 8004a12:	4867      	ldr	r0, [pc, #412]	; (8004bb0 <HAL_ADC_Init+0x2b8>)
 8004a14:	f7ff fee6 	bl	80047e4 <LL_ADC_IsEnabled>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	4323      	orrs	r3, r4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	bf0c      	ite	eq
 8004a20:	2301      	moveq	r3, #1
 8004a22:	2300      	movne	r3, #0
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	e008      	b.n	8004a3a <HAL_ADC_Init+0x142>
 8004a28:	4862      	ldr	r0, [pc, #392]	; (8004bb4 <HAL_ADC_Init+0x2bc>)
 8004a2a:	f7ff fedb 	bl	80047e4 <LL_ADC_IsEnabled>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	bf0c      	ite	eq
 8004a34:	2301      	moveq	r3, #1
 8004a36:	2300      	movne	r3, #0
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d012      	beq.n	8004a64 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a5a      	ldr	r2, [pc, #360]	; (8004bac <HAL_ADC_Init+0x2b4>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d004      	beq.n	8004a52 <HAL_ADC_Init+0x15a>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a58      	ldr	r2, [pc, #352]	; (8004bb0 <HAL_ADC_Init+0x2b8>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d101      	bne.n	8004a56 <HAL_ADC_Init+0x15e>
 8004a52:	4a59      	ldr	r2, [pc, #356]	; (8004bb8 <HAL_ADC_Init+0x2c0>)
 8004a54:	e000      	b.n	8004a58 <HAL_ADC_Init+0x160>
 8004a56:	4a59      	ldr	r2, [pc, #356]	; (8004bbc <HAL_ADC_Init+0x2c4>)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	4610      	mov	r0, r2
 8004a60:	f7ff fc5e 	bl	8004320 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a52      	ldr	r2, [pc, #328]	; (8004bb4 <HAL_ADC_Init+0x2bc>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d129      	bne.n	8004ac2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	7e5b      	ldrb	r3, [r3, #25]
 8004a72:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004a78:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004a7e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d013      	beq.n	8004ab0 <HAL_ADC_Init+0x1b8>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	2b0c      	cmp	r3, #12
 8004a8e:	d00d      	beq.n	8004aac <HAL_ADC_Init+0x1b4>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	2b1c      	cmp	r3, #28
 8004a96:	d007      	beq.n	8004aa8 <HAL_ADC_Init+0x1b0>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	2b18      	cmp	r3, #24
 8004a9e:	d101      	bne.n	8004aa4 <HAL_ADC_Init+0x1ac>
 8004aa0:	2318      	movs	r3, #24
 8004aa2:	e006      	b.n	8004ab2 <HAL_ADC_Init+0x1ba>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	e004      	b.n	8004ab2 <HAL_ADC_Init+0x1ba>
 8004aa8:	2310      	movs	r3, #16
 8004aaa:	e002      	b.n	8004ab2 <HAL_ADC_Init+0x1ba>
 8004aac:	2308      	movs	r3, #8
 8004aae:	e000      	b.n	8004ab2 <HAL_ADC_Init+0x1ba>
 8004ab0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004ab2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004aba:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004abc:	4313      	orrs	r3, r2
 8004abe:	61bb      	str	r3, [r7, #24]
 8004ac0:	e00e      	b.n	8004ae0 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	7e5b      	ldrb	r3, [r3, #25]
 8004ac6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004acc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004ad2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ada:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004adc:	4313      	orrs	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d106      	bne.n	8004af8 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aee:	3b01      	subs	r3, #1
 8004af0:	045b      	lsls	r3, r3, #17
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d009      	beq.n	8004b14 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b04:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a26      	ldr	r2, [pc, #152]	; (8004bb4 <HAL_ADC_Init+0x2bc>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d115      	bne.n	8004b4a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68da      	ldr	r2, [r3, #12]
 8004b24:	4b26      	ldr	r3, [pc, #152]	; (8004bc0 <HAL_ADC_Init+0x2c8>)
 8004b26:	4013      	ands	r3, r2
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6812      	ldr	r2, [r2, #0]
 8004b2c:	69b9      	ldr	r1, [r7, #24]
 8004b2e:	430b      	orrs	r3, r1
 8004b30:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	611a      	str	r2, [r3, #16]
 8004b48:	e009      	b.n	8004b5e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	4b1c      	ldr	r3, [pc, #112]	; (8004bc4 <HAL_ADC_Init+0x2cc>)
 8004b52:	4013      	ands	r3, r2
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6812      	ldr	r2, [r2, #0]
 8004b58:	69b9      	ldr	r1, [r7, #24]
 8004b5a:	430b      	orrs	r3, r1
 8004b5c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff fe8c 	bl	8004880 <LL_ADC_REG_IsConversionOngoing>
 8004b68:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7ff feae 	bl	80048d0 <LL_ADC_INJ_IsConversionOngoing>
 8004b74:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f040 808e 	bne.w	8004c9a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f040 808a 	bne.w	8004c9a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a0a      	ldr	r2, [pc, #40]	; (8004bb4 <HAL_ADC_Init+0x2bc>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d11b      	bne.n	8004bc8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	7e1b      	ldrb	r3, [r3, #24]
 8004b94:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b9c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	61bb      	str	r3, [r7, #24]
 8004ba2:	e018      	b.n	8004bd6 <HAL_ADC_Init+0x2de>
 8004ba4:	24000000 	.word	0x24000000
 8004ba8:	053e2d63 	.word	0x053e2d63
 8004bac:	40022000 	.word	0x40022000
 8004bb0:	40022100 	.word	0x40022100
 8004bb4:	58026000 	.word	0x58026000
 8004bb8:	40022300 	.word	0x40022300
 8004bbc:	58026300 	.word	0x58026300
 8004bc0:	fff04007 	.word	0xfff04007
 8004bc4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	7e1b      	ldrb	r3, [r3, #24]
 8004bcc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68da      	ldr	r2, [r3, #12]
 8004bdc:	4b46      	ldr	r3, [pc, #280]	; (8004cf8 <HAL_ADC_Init+0x400>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6812      	ldr	r2, [r2, #0]
 8004be4:	69b9      	ldr	r1, [r7, #24]
 8004be6:	430b      	orrs	r3, r1
 8004be8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d137      	bne.n	8004c64 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf8:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a3f      	ldr	r2, [pc, #252]	; (8004cfc <HAL_ADC_Init+0x404>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d116      	bne.n	8004c32 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	691a      	ldr	r2, [r3, #16]
 8004c0a:	4b3d      	ldr	r3, [pc, #244]	; (8004d00 <HAL_ADC_Init+0x408>)
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004c16:	4311      	orrs	r1, r2
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004c1c:	4311      	orrs	r1, r2
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004c22:	430a      	orrs	r2, r1
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0201 	orr.w	r2, r2, #1
 8004c2e:	611a      	str	r2, [r3, #16]
 8004c30:	e020      	b.n	8004c74 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	691a      	ldr	r2, [r3, #16]
 8004c38:	4b32      	ldr	r3, [pc, #200]	; (8004d04 <HAL_ADC_Init+0x40c>)
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c40:	3a01      	subs	r2, #1
 8004c42:	0411      	lsls	r1, r2, #16
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004c48:	4311      	orrs	r1, r2
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004c4e:	4311      	orrs	r1, r2
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004c54:	430a      	orrs	r2, r1
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f042 0201 	orr.w	r2, r2, #1
 8004c60:	611a      	str	r2, [r3, #16]
 8004c62:	e007      	b.n	8004c74 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	691a      	ldr	r2, [r3, #16]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0201 	bic.w	r2, r2, #1
 8004c72:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a1b      	ldr	r2, [pc, #108]	; (8004cfc <HAL_ADC_Init+0x404>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d002      	beq.n	8004c9a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f001 f909 	bl	8005eac <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d10c      	bne.n	8004cbc <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca8:	f023 010f 	bic.w	r1, r3, #15
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	1e5a      	subs	r2, r3, #1
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	631a      	str	r2, [r3, #48]	; 0x30
 8004cba:	e007      	b.n	8004ccc <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f022 020f 	bic.w	r2, r2, #15
 8004cca:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cd0:	f023 0303 	bic.w	r3, r3, #3
 8004cd4:	f043 0201 	orr.w	r2, r3, #1
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	661a      	str	r2, [r3, #96]	; 0x60
 8004cdc:	e007      	b.n	8004cee <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ce2:	f043 0210 	orr.w	r2, r3, #16
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004cee:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3724      	adds	r7, #36	; 0x24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd90      	pop	{r4, r7, pc}
 8004cf8:	ffffbffc 	.word	0xffffbffc
 8004cfc:	58026000 	.word	0x58026000
 8004d00:	fc00f81f 	.word	0xfc00f81f
 8004d04:	fc00f81e 	.word	0xfc00f81e

08004d08 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a5c      	ldr	r2, [pc, #368]	; (8004e88 <HAL_ADC_Start+0x180>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d004      	beq.n	8004d24 <HAL_ADC_Start+0x1c>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a5b      	ldr	r2, [pc, #364]	; (8004e8c <HAL_ADC_Start+0x184>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d101      	bne.n	8004d28 <HAL_ADC_Start+0x20>
 8004d24:	4b5a      	ldr	r3, [pc, #360]	; (8004e90 <HAL_ADC_Start+0x188>)
 8004d26:	e000      	b.n	8004d2a <HAL_ADC_Start+0x22>
 8004d28:	4b5a      	ldr	r3, [pc, #360]	; (8004e94 <HAL_ADC_Start+0x18c>)
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7ff fcc8 	bl	80046c0 <LL_ADC_GetMultimode>
 8004d30:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7ff fda2 	bl	8004880 <LL_ADC_REG_IsConversionOngoing>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f040 809a 	bne.w	8004e78 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d101      	bne.n	8004d52 <HAL_ADC_Start+0x4a>
 8004d4e:	2302      	movs	r3, #2
 8004d50:	e095      	b.n	8004e7e <HAL_ADC_Start+0x176>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 ffbc 	bl	8005cd8 <ADC_Enable>
 8004d60:	4603      	mov	r3, r0
 8004d62:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004d64:	7dfb      	ldrb	r3, [r7, #23]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f040 8081 	bne.w	8004e6e <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d70:	4b49      	ldr	r3, [pc, #292]	; (8004e98 <HAL_ADC_Start+0x190>)
 8004d72:	4013      	ands	r3, r2
 8004d74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a42      	ldr	r2, [pc, #264]	; (8004e8c <HAL_ADC_Start+0x184>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d002      	beq.n	8004d8c <HAL_ADC_Start+0x84>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	e000      	b.n	8004d8e <HAL_ADC_Start+0x86>
 8004d8c:	4b3e      	ldr	r3, [pc, #248]	; (8004e88 <HAL_ADC_Start+0x180>)
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6812      	ldr	r2, [r2, #0]
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d002      	beq.n	8004d9c <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d105      	bne.n	8004da8 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db4:	d106      	bne.n	8004dc4 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dba:	f023 0206 	bic.w	r2, r3, #6
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	665a      	str	r2, [r3, #100]	; 0x64
 8004dc2:	e002      	b.n	8004dca <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	221c      	movs	r2, #28
 8004dd0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a2b      	ldr	r2, [pc, #172]	; (8004e8c <HAL_ADC_Start+0x184>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d002      	beq.n	8004dea <HAL_ADC_Start+0xe2>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	e000      	b.n	8004dec <HAL_ADC_Start+0xe4>
 8004dea:	4b27      	ldr	r3, [pc, #156]	; (8004e88 <HAL_ADC_Start+0x180>)
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	6812      	ldr	r2, [r2, #0]
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d008      	beq.n	8004e06 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d005      	beq.n	8004e06 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	2b05      	cmp	r3, #5
 8004dfe:	d002      	beq.n	8004e06 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	2b09      	cmp	r3, #9
 8004e04:	d114      	bne.n	8004e30 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d007      	beq.n	8004e24 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004e1c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7ff fd01 	bl	8004830 <LL_ADC_REG_StartConversion>
 8004e2e:	e025      	b.n	8004e7c <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e34:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a12      	ldr	r2, [pc, #72]	; (8004e8c <HAL_ADC_Start+0x184>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d002      	beq.n	8004e4c <HAL_ADC_Start+0x144>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	e000      	b.n	8004e4e <HAL_ADC_Start+0x146>
 8004e4c:	4b0e      	ldr	r3, [pc, #56]	; (8004e88 <HAL_ADC_Start+0x180>)
 8004e4e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00f      	beq.n	8004e7c <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004e64:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	661a      	str	r2, [r3, #96]	; 0x60
 8004e6c:	e006      	b.n	8004e7c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8004e76:	e001      	b.n	8004e7c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004e78:	2302      	movs	r3, #2
 8004e7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3718      	adds	r7, #24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	40022000 	.word	0x40022000
 8004e8c:	40022100 	.word	0x40022100
 8004e90:	40022300 	.word	0x40022300
 8004e94:	58026300 	.word	0x58026300
 8004e98:	fffff0fe 	.word	0xfffff0fe

08004e9c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d101      	bne.n	8004eb2 <HAL_ADC_Stop+0x16>
 8004eae:	2302      	movs	r3, #2
 8004eb0:	e021      	b.n	8004ef6 <HAL_ADC_Stop+0x5a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004eba:	2103      	movs	r1, #3
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 fe4f 	bl	8005b60 <ADC_ConversionStop>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004ec6:	7bfb      	ldrb	r3, [r7, #15]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10f      	bne.n	8004eec <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 ff8d 	bl	8005dec <ADC_Disable>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004ed6:	7bfb      	ldrb	r3, [r7, #15]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d107      	bne.n	8004eec <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ee0:	4b07      	ldr	r3, [pc, #28]	; (8004f00 <HAL_ADC_Stop+0x64>)
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	f043 0201 	orr.w	r2, r3, #1
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	ffffeefe 	.word	0xffffeefe

08004f04 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b088      	sub	sp, #32
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a72      	ldr	r2, [pc, #456]	; (80050dc <HAL_ADC_PollForConversion+0x1d8>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d004      	beq.n	8004f22 <HAL_ADC_PollForConversion+0x1e>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a70      	ldr	r2, [pc, #448]	; (80050e0 <HAL_ADC_PollForConversion+0x1dc>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d101      	bne.n	8004f26 <HAL_ADC_PollForConversion+0x22>
 8004f22:	4b70      	ldr	r3, [pc, #448]	; (80050e4 <HAL_ADC_PollForConversion+0x1e0>)
 8004f24:	e000      	b.n	8004f28 <HAL_ADC_PollForConversion+0x24>
 8004f26:	4b70      	ldr	r3, [pc, #448]	; (80050e8 <HAL_ADC_PollForConversion+0x1e4>)
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7ff fbc9 	bl	80046c0 <LL_ADC_GetMultimode>
 8004f2e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d102      	bne.n	8004f3e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004f38:	2308      	movs	r3, #8
 8004f3a:	61fb      	str	r3, [r7, #28]
 8004f3c:	e037      	b.n	8004fae <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d005      	beq.n	8004f50 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	2b05      	cmp	r3, #5
 8004f48:	d002      	beq.n	8004f50 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2b09      	cmp	r3, #9
 8004f4e:	d111      	bne.n	8004f74 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d007      	beq.n	8004f6e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f62:	f043 0220 	orr.w	r2, r3, #32
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e0b1      	b.n	80050d2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004f6e:	2304      	movs	r3, #4
 8004f70:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004f72:	e01c      	b.n	8004fae <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a58      	ldr	r2, [pc, #352]	; (80050dc <HAL_ADC_PollForConversion+0x1d8>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d004      	beq.n	8004f88 <HAL_ADC_PollForConversion+0x84>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a57      	ldr	r2, [pc, #348]	; (80050e0 <HAL_ADC_PollForConversion+0x1dc>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d101      	bne.n	8004f8c <HAL_ADC_PollForConversion+0x88>
 8004f88:	4b56      	ldr	r3, [pc, #344]	; (80050e4 <HAL_ADC_PollForConversion+0x1e0>)
 8004f8a:	e000      	b.n	8004f8e <HAL_ADC_PollForConversion+0x8a>
 8004f8c:	4b56      	ldr	r3, [pc, #344]	; (80050e8 <HAL_ADC_PollForConversion+0x1e4>)
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7ff fba4 	bl	80046dc <LL_ADC_GetMultiDMATransfer>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d007      	beq.n	8004faa <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f9e:	f043 0220 	orr.w	r2, r3, #32
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e093      	b.n	80050d2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004faa:	2304      	movs	r3, #4
 8004fac:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004fae:	f7ff f971 	bl	8004294 <HAL_GetTick>
 8004fb2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004fb4:	e021      	b.n	8004ffa <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbc:	d01d      	beq.n	8004ffa <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004fbe:	f7ff f969 	bl	8004294 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d302      	bcc.n	8004fd4 <HAL_ADC_PollForConversion+0xd0>
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d112      	bne.n	8004ffa <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10b      	bne.n	8004ffa <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe6:	f043 0204 	orr.w	r2, r3, #4
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	661a      	str	r2, [r3, #96]	; 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

          return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e06b      	b.n	80050d2 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	4013      	ands	r3, r2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0d6      	beq.n	8004fb6 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800500c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	661a      	str	r2, [r3, #96]	; 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4618      	mov	r0, r3
 800501a:	f7ff faa7 	bl	800456c <LL_ADC_REG_IsTriggerSourceSWStart>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d01c      	beq.n	800505e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	7e5b      	ldrb	r3, [r3, #25]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d118      	bne.n	800505e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0308 	and.w	r3, r3, #8
 8005036:	2b08      	cmp	r3, #8
 8005038:	d111      	bne.n	800505e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800503e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	661a      	str	r2, [r3, #96]	; 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800504a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d105      	bne.n	800505e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005056:	f043 0201 	orr.w	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a1f      	ldr	r2, [pc, #124]	; (80050e0 <HAL_ADC_PollForConversion+0x1dc>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d002      	beq.n	800506e <HAL_ADC_PollForConversion+0x16a>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	e000      	b.n	8005070 <HAL_ADC_PollForConversion+0x16c>
 800506e:	4b1b      	ldr	r3, [pc, #108]	; (80050dc <HAL_ADC_PollForConversion+0x1d8>)
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6812      	ldr	r2, [r2, #0]
 8005074:	4293      	cmp	r3, r2
 8005076:	d008      	beq.n	800508a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d005      	beq.n	800508a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	2b05      	cmp	r3, #5
 8005082:	d002      	beq.n	800508a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	2b09      	cmp	r3, #9
 8005088:	d104      	bne.n	8005094 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	61bb      	str	r3, [r7, #24]
 8005092:	e00c      	b.n	80050ae <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a11      	ldr	r2, [pc, #68]	; (80050e0 <HAL_ADC_PollForConversion+0x1dc>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d002      	beq.n	80050a4 <HAL_ADC_PollForConversion+0x1a0>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	e000      	b.n	80050a6 <HAL_ADC_PollForConversion+0x1a2>
 80050a4:	4b0d      	ldr	r3, [pc, #52]	; (80050dc <HAL_ADC_PollForConversion+0x1d8>)
 80050a6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d104      	bne.n	80050be <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2208      	movs	r2, #8
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	e008      	b.n	80050d0 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d103      	bne.n	80050d0 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	220c      	movs	r2, #12
 80050ce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3720      	adds	r7, #32
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	40022000 	.word	0x40022000
 80050e0:	40022100 	.word	0x40022100
 80050e4:	40022300 	.word	0x40022300
 80050e8:	58026300 	.word	0x58026300

080050ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
	...

08005108 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005108:	b590      	push	{r4, r7, lr}
 800510a:	b0b9      	sub	sp, #228	; 0xe4
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005118:	2300      	movs	r3, #0
 800511a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005122:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	4aa9      	ldr	r2, [pc, #676]	; (80053d0 <HAL_ADC_ConfigChannel+0x2c8>)
 800512a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005132:	2b01      	cmp	r3, #1
 8005134:	d102      	bne.n	800513c <HAL_ADC_ConfigChannel+0x34>
 8005136:	2302      	movs	r3, #2
 8005138:	f000 bcfa 	b.w	8005b30 <HAL_ADC_ConfigChannel+0xa28>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4618      	mov	r0, r3
 800514a:	f7ff fb99 	bl	8004880 <LL_ADC_REG_IsConversionOngoing>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	f040 84de 	bne.w	8005b12 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a9e      	ldr	r2, [pc, #632]	; (80053d4 <HAL_ADC_ConfigChannel+0x2cc>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d033      	beq.n	80051c8 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005168:	2b00      	cmp	r3, #0
 800516a:	d108      	bne.n	800517e <HAL_ADC_ConfigChannel+0x76>
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	0e9b      	lsrs	r3, r3, #26
 8005172:	f003 031f 	and.w	r3, r3, #31
 8005176:	2201      	movs	r2, #1
 8005178:	fa02 f303 	lsl.w	r3, r2, r3
 800517c:	e01d      	b.n	80051ba <HAL_ADC_ConfigChannel+0xb2>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005186:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800518a:	fa93 f3a3 	rbit	r3, r3
 800518e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005192:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005196:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800519a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80051a2:	2320      	movs	r3, #32
 80051a4:	e004      	b.n	80051b0 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80051a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051aa:	fab3 f383 	clz	r3, r3
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	f003 031f 	and.w	r3, r3, #31
 80051b4:	2201      	movs	r2, #1
 80051b6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	6812      	ldr	r2, [r2, #0]
 80051be:	69d1      	ldr	r1, [r2, #28]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	6812      	ldr	r2, [r2, #0]
 80051c4:	430b      	orrs	r3, r1
 80051c6:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6818      	ldr	r0, [r3, #0]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	6859      	ldr	r1, [r3, #4]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	461a      	mov	r2, r3
 80051d6:	f7ff f9dc 	bl	8004592 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4618      	mov	r0, r3
 80051e0:	f7ff fb4e 	bl	8004880 <LL_ADC_REG_IsConversionOngoing>
 80051e4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff fb6f 	bl	80048d0 <LL_ADC_INJ_IsConversionOngoing>
 80051f2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80051f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f040 8270 	bne.w	80056e0 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005200:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005204:	2b00      	cmp	r3, #0
 8005206:	f040 826b 	bne.w	80056e0 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6818      	ldr	r0, [r3, #0]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	6819      	ldr	r1, [r3, #0]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	461a      	mov	r2, r3
 8005218:	f7ff f9e7 	bl	80045ea <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a6c      	ldr	r2, [pc, #432]	; (80053d4 <HAL_ADC_ConfigChannel+0x2cc>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d10d      	bne.n	8005242 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	695a      	ldr	r2, [r3, #20]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	08db      	lsrs	r3, r3, #3
 8005232:	f003 0303 	and.w	r3, r3, #3
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	fa02 f303 	lsl.w	r3, r2, r3
 800523c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005240:	e032      	b.n	80052a8 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005242:	4b65      	ldr	r3, [pc, #404]	; (80053d8 <HAL_ADC_ConfigChannel+0x2d0>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800524a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800524e:	d10b      	bne.n	8005268 <HAL_ADC_ConfigChannel+0x160>
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	695a      	ldr	r2, [r3, #20]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	089b      	lsrs	r3, r3, #2
 800525c:	f003 0307 	and.w	r3, r3, #7
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	fa02 f303 	lsl.w	r3, r2, r3
 8005266:	e01d      	b.n	80052a4 <HAL_ADC_ConfigChannel+0x19c>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	f003 0310 	and.w	r3, r3, #16
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10b      	bne.n	800528e <HAL_ADC_ConfigChannel+0x186>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	695a      	ldr	r2, [r3, #20]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	089b      	lsrs	r3, r3, #2
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	fa02 f303 	lsl.w	r3, r2, r3
 800528c:	e00a      	b.n	80052a4 <HAL_ADC_ConfigChannel+0x19c>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	695a      	ldr	r2, [r3, #20]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	089b      	lsrs	r3, r3, #2
 800529a:	f003 0304 	and.w	r3, r3, #4
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	fa02 f303 	lsl.w	r3, r2, r3
 80052a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	2b04      	cmp	r3, #4
 80052ae:	d048      	beq.n	8005342 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6818      	ldr	r0, [r3, #0]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	6919      	ldr	r1, [r3, #16]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052c0:	f7ff f862 	bl	8004388 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a42      	ldr	r2, [pc, #264]	; (80053d4 <HAL_ADC_ConfigChannel+0x2cc>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d119      	bne.n	8005302 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6818      	ldr	r0, [r3, #0]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	6919      	ldr	r1, [r3, #16]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	461a      	mov	r2, r3
 80052dc:	f7ff f8fa 	bl	80044d4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6818      	ldr	r0, [r3, #0]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	6919      	ldr	r1, [r3, #16]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d102      	bne.n	80052f8 <HAL_ADC_ConfigChannel+0x1f0>
 80052f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052f6:	e000      	b.n	80052fa <HAL_ADC_ConfigChannel+0x1f2>
 80052f8:	2300      	movs	r3, #0
 80052fa:	461a      	mov	r2, r3
 80052fc:	f7ff f8c8 	bl	8004490 <LL_ADC_SetOffsetSaturation>
 8005300:	e1ee      	b.n	80056e0 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6818      	ldr	r0, [r3, #0]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	6919      	ldr	r1, [r3, #16]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005310:	2b01      	cmp	r3, #1
 8005312:	d102      	bne.n	800531a <HAL_ADC_ConfigChannel+0x212>
 8005314:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005318:	e000      	b.n	800531c <HAL_ADC_ConfigChannel+0x214>
 800531a:	2300      	movs	r3, #0
 800531c:	461a      	mov	r2, r3
 800531e:	f7ff f895 	bl	800444c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6818      	ldr	r0, [r3, #0]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	6919      	ldr	r1, [r3, #16]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	7e1b      	ldrb	r3, [r3, #24]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d102      	bne.n	8005338 <HAL_ADC_ConfigChannel+0x230>
 8005332:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005336:	e000      	b.n	800533a <HAL_ADC_ConfigChannel+0x232>
 8005338:	2300      	movs	r3, #0
 800533a:	461a      	mov	r2, r3
 800533c:	f7ff f86c 	bl	8004418 <LL_ADC_SetDataRightShift>
 8005340:	e1ce      	b.n	80056e0 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a23      	ldr	r2, [pc, #140]	; (80053d4 <HAL_ADC_ConfigChannel+0x2cc>)
 8005348:	4293      	cmp	r3, r2
 800534a:	f040 8181 	bne.w	8005650 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2100      	movs	r1, #0
 8005354:	4618      	mov	r0, r3
 8005356:	f7ff f849 	bl	80043ec <LL_ADC_GetOffsetChannel>
 800535a:	4603      	mov	r3, r0
 800535c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10a      	bne.n	800537a <HAL_ADC_ConfigChannel+0x272>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2100      	movs	r1, #0
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff f83e 	bl	80043ec <LL_ADC_GetOffsetChannel>
 8005370:	4603      	mov	r3, r0
 8005372:	0e9b      	lsrs	r3, r3, #26
 8005374:	f003 021f 	and.w	r2, r3, #31
 8005378:	e01e      	b.n	80053b8 <HAL_ADC_ConfigChannel+0x2b0>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2100      	movs	r1, #0
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff f833 	bl	80043ec <LL_ADC_GetOffsetChannel>
 8005386:	4603      	mov	r3, r0
 8005388:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800538c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005390:	fa93 f3a3 	rbit	r3, r3
 8005394:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8005398:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800539c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80053a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80053a8:	2320      	movs	r3, #32
 80053aa:	e004      	b.n	80053b6 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80053ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80053b0:	fab3 f383 	clz	r3, r3
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	461a      	mov	r2, r3
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10b      	bne.n	80053dc <HAL_ADC_ConfigChannel+0x2d4>
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	0e9b      	lsrs	r3, r3, #26
 80053ca:	f003 031f 	and.w	r3, r3, #31
 80053ce:	e01e      	b.n	800540e <HAL_ADC_ConfigChannel+0x306>
 80053d0:	47ff0000 	.word	0x47ff0000
 80053d4:	58026000 	.word	0x58026000
 80053d8:	5c001000 	.word	0x5c001000
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053e8:	fa93 f3a3 	rbit	r3, r3
 80053ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80053f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80053f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80053f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8005400:	2320      	movs	r3, #32
 8005402:	e004      	b.n	800540e <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8005404:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005408:	fab3 f383 	clz	r3, r3
 800540c:	b2db      	uxtb	r3, r3
 800540e:	429a      	cmp	r2, r3
 8005410:	d106      	bne.n	8005420 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2200      	movs	r2, #0
 8005418:	2100      	movs	r1, #0
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff f87c 	bl	8004518 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2101      	movs	r1, #1
 8005426:	4618      	mov	r0, r3
 8005428:	f7fe ffe0 	bl	80043ec <LL_ADC_GetOffsetChannel>
 800542c:	4603      	mov	r3, r0
 800542e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10a      	bne.n	800544c <HAL_ADC_ConfigChannel+0x344>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2101      	movs	r1, #1
 800543c:	4618      	mov	r0, r3
 800543e:	f7fe ffd5 	bl	80043ec <LL_ADC_GetOffsetChannel>
 8005442:	4603      	mov	r3, r0
 8005444:	0e9b      	lsrs	r3, r3, #26
 8005446:	f003 021f 	and.w	r2, r3, #31
 800544a:	e01e      	b.n	800548a <HAL_ADC_ConfigChannel+0x382>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2101      	movs	r1, #1
 8005452:	4618      	mov	r0, r3
 8005454:	f7fe ffca 	bl	80043ec <LL_ADC_GetOffsetChannel>
 8005458:	4603      	mov	r3, r0
 800545a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800545e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005462:	fa93 f3a3 	rbit	r3, r3
 8005466:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800546a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800546e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8005472:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800547a:	2320      	movs	r3, #32
 800547c:	e004      	b.n	8005488 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800547e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005482:	fab3 f383 	clz	r3, r3
 8005486:	b2db      	uxtb	r3, r3
 8005488:	461a      	mov	r2, r3
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005492:	2b00      	cmp	r3, #0
 8005494:	d105      	bne.n	80054a2 <HAL_ADC_ConfigChannel+0x39a>
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	0e9b      	lsrs	r3, r3, #26
 800549c:	f003 031f 	and.w	r3, r3, #31
 80054a0:	e018      	b.n	80054d4 <HAL_ADC_ConfigChannel+0x3cc>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80054ae:	fa93 f3a3 	rbit	r3, r3
 80054b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80054b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80054ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80054be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80054c6:	2320      	movs	r3, #32
 80054c8:	e004      	b.n	80054d4 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80054ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054ce:	fab3 f383 	clz	r3, r3
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d106      	bne.n	80054e6 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2200      	movs	r2, #0
 80054de:	2101      	movs	r1, #1
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff f819 	bl	8004518 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2102      	movs	r1, #2
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7fe ff7d 	bl	80043ec <LL_ADC_GetOffsetChannel>
 80054f2:	4603      	mov	r3, r0
 80054f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10a      	bne.n	8005512 <HAL_ADC_ConfigChannel+0x40a>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2102      	movs	r1, #2
 8005502:	4618      	mov	r0, r3
 8005504:	f7fe ff72 	bl	80043ec <LL_ADC_GetOffsetChannel>
 8005508:	4603      	mov	r3, r0
 800550a:	0e9b      	lsrs	r3, r3, #26
 800550c:	f003 021f 	and.w	r2, r3, #31
 8005510:	e01e      	b.n	8005550 <HAL_ADC_ConfigChannel+0x448>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2102      	movs	r1, #2
 8005518:	4618      	mov	r0, r3
 800551a:	f7fe ff67 	bl	80043ec <LL_ADC_GetOffsetChannel>
 800551e:	4603      	mov	r3, r0
 8005520:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005524:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005528:	fa93 f3a3 	rbit	r3, r3
 800552c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8005530:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005534:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8005538:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8005540:	2320      	movs	r3, #32
 8005542:	e004      	b.n	800554e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8005544:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005548:	fab3 f383 	clz	r3, r3
 800554c:	b2db      	uxtb	r3, r3
 800554e:	461a      	mov	r2, r3
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005558:	2b00      	cmp	r3, #0
 800555a:	d105      	bne.n	8005568 <HAL_ADC_ConfigChannel+0x460>
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	0e9b      	lsrs	r3, r3, #26
 8005562:	f003 031f 	and.w	r3, r3, #31
 8005566:	e014      	b.n	8005592 <HAL_ADC_ConfigChannel+0x48a>
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800556e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005570:	fa93 f3a3 	rbit	r3, r3
 8005574:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8005576:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005578:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800557c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8005584:	2320      	movs	r3, #32
 8005586:	e004      	b.n	8005592 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8005588:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800558c:	fab3 f383 	clz	r3, r3
 8005590:	b2db      	uxtb	r3, r3
 8005592:	429a      	cmp	r2, r3
 8005594:	d106      	bne.n	80055a4 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2200      	movs	r2, #0
 800559c:	2102      	movs	r1, #2
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fe ffba 	bl	8004518 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2103      	movs	r1, #3
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fe ff1e 	bl	80043ec <LL_ADC_GetOffsetChannel>
 80055b0:	4603      	mov	r3, r0
 80055b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10a      	bne.n	80055d0 <HAL_ADC_ConfigChannel+0x4c8>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2103      	movs	r1, #3
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7fe ff13 	bl	80043ec <LL_ADC_GetOffsetChannel>
 80055c6:	4603      	mov	r3, r0
 80055c8:	0e9b      	lsrs	r3, r3, #26
 80055ca:	f003 021f 	and.w	r2, r3, #31
 80055ce:	e017      	b.n	8005600 <HAL_ADC_ConfigChannel+0x4f8>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2103      	movs	r1, #3
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fe ff08 	bl	80043ec <LL_ADC_GetOffsetChannel>
 80055dc:	4603      	mov	r3, r0
 80055de:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055e2:	fa93 f3a3 	rbit	r3, r3
 80055e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80055e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ea:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80055ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80055f2:	2320      	movs	r3, #32
 80055f4:	e003      	b.n	80055fe <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80055f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055f8:	fab3 f383 	clz	r3, r3
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	461a      	mov	r2, r3
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005608:	2b00      	cmp	r3, #0
 800560a:	d105      	bne.n	8005618 <HAL_ADC_ConfigChannel+0x510>
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	0e9b      	lsrs	r3, r3, #26
 8005612:	f003 031f 	and.w	r3, r3, #31
 8005616:	e011      	b.n	800563c <HAL_ADC_ConfigChannel+0x534>
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800561e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005620:	fa93 f3a3 	rbit	r3, r3
 8005624:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8005626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005628:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800562a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8005630:	2320      	movs	r3, #32
 8005632:	e003      	b.n	800563c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8005634:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005636:	fab3 f383 	clz	r3, r3
 800563a:	b2db      	uxtb	r3, r3
 800563c:	429a      	cmp	r2, r3
 800563e:	d14f      	bne.n	80056e0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2200      	movs	r2, #0
 8005646:	2103      	movs	r1, #3
 8005648:	4618      	mov	r0, r3
 800564a:	f7fe ff65 	bl	8004518 <LL_ADC_SetOffsetState>
 800564e:	e047      	b.n	80056e0 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005656:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	069b      	lsls	r3, r3, #26
 8005660:	429a      	cmp	r2, r3
 8005662:	d107      	bne.n	8005674 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005672:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800567a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	069b      	lsls	r3, r3, #26
 8005684:	429a      	cmp	r2, r3
 8005686:	d107      	bne.n	8005698 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005696:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800569e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	069b      	lsls	r3, r3, #26
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d107      	bne.n	80056bc <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80056ba:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	069b      	lsls	r3, r3, #26
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d107      	bne.n	80056e0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80056de:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7ff f87d 	bl	80047e4 <LL_ADC_IsEnabled>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f040 8219 	bne.w	8005b24 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6818      	ldr	r0, [r3, #0]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	6819      	ldr	r1, [r3, #0]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	461a      	mov	r2, r3
 8005700:	f7fe ff9e 	bl	8004640 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	4aa1      	ldr	r2, [pc, #644]	; (8005990 <HAL_ADC_ConfigChannel+0x888>)
 800570a:	4293      	cmp	r3, r2
 800570c:	f040 812e 	bne.w	800596c <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800571c:	2b00      	cmp	r3, #0
 800571e:	d10b      	bne.n	8005738 <HAL_ADC_ConfigChannel+0x630>
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	0e9b      	lsrs	r3, r3, #26
 8005726:	3301      	adds	r3, #1
 8005728:	f003 031f 	and.w	r3, r3, #31
 800572c:	2b09      	cmp	r3, #9
 800572e:	bf94      	ite	ls
 8005730:	2301      	movls	r3, #1
 8005732:	2300      	movhi	r3, #0
 8005734:	b2db      	uxtb	r3, r3
 8005736:	e019      	b.n	800576c <HAL_ADC_ConfigChannel+0x664>
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800573e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005740:	fa93 f3a3 	rbit	r3, r3
 8005744:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005748:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800574a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8005750:	2320      	movs	r3, #32
 8005752:	e003      	b.n	800575c <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8005754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005756:	fab3 f383 	clz	r3, r3
 800575a:	b2db      	uxtb	r3, r3
 800575c:	3301      	adds	r3, #1
 800575e:	f003 031f 	and.w	r3, r3, #31
 8005762:	2b09      	cmp	r3, #9
 8005764:	bf94      	ite	ls
 8005766:	2301      	movls	r3, #1
 8005768:	2300      	movhi	r3, #0
 800576a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800576c:	2b00      	cmp	r3, #0
 800576e:	d079      	beq.n	8005864 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005778:	2b00      	cmp	r3, #0
 800577a:	d107      	bne.n	800578c <HAL_ADC_ConfigChannel+0x684>
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	0e9b      	lsrs	r3, r3, #26
 8005782:	3301      	adds	r3, #1
 8005784:	069b      	lsls	r3, r3, #26
 8005786:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800578a:	e015      	b.n	80057b8 <HAL_ADC_ConfigChannel+0x6b0>
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005794:	fa93 f3a3 	rbit	r3, r3
 8005798:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800579a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800579c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800579e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80057a4:	2320      	movs	r3, #32
 80057a6:	e003      	b.n	80057b0 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80057a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057aa:	fab3 f383 	clz	r3, r3
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	3301      	adds	r3, #1
 80057b2:	069b      	lsls	r3, r3, #26
 80057b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d109      	bne.n	80057d8 <HAL_ADC_ConfigChannel+0x6d0>
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	0e9b      	lsrs	r3, r3, #26
 80057ca:	3301      	adds	r3, #1
 80057cc:	f003 031f 	and.w	r3, r3, #31
 80057d0:	2101      	movs	r1, #1
 80057d2:	fa01 f303 	lsl.w	r3, r1, r3
 80057d6:	e017      	b.n	8005808 <HAL_ADC_ConfigChannel+0x700>
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057e0:	fa93 f3a3 	rbit	r3, r3
 80057e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80057e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80057ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80057f0:	2320      	movs	r3, #32
 80057f2:	e003      	b.n	80057fc <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80057f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057f6:	fab3 f383 	clz	r3, r3
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	3301      	adds	r3, #1
 80057fe:	f003 031f 	and.w	r3, r3, #31
 8005802:	2101      	movs	r1, #1
 8005804:	fa01 f303 	lsl.w	r3, r1, r3
 8005808:	ea42 0103 	orr.w	r1, r2, r3
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10a      	bne.n	800582e <HAL_ADC_ConfigChannel+0x726>
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	0e9b      	lsrs	r3, r3, #26
 800581e:	3301      	adds	r3, #1
 8005820:	f003 021f 	and.w	r2, r3, #31
 8005824:	4613      	mov	r3, r2
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	4413      	add	r3, r2
 800582a:	051b      	lsls	r3, r3, #20
 800582c:	e018      	b.n	8005860 <HAL_ADC_ConfigChannel+0x758>
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005836:	fa93 f3a3 	rbit	r3, r3
 800583a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800583c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8005846:	2320      	movs	r3, #32
 8005848:	e003      	b.n	8005852 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800584a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584c:	fab3 f383 	clz	r3, r3
 8005850:	b2db      	uxtb	r3, r3
 8005852:	3301      	adds	r3, #1
 8005854:	f003 021f 	and.w	r2, r3, #31
 8005858:	4613      	mov	r3, r2
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	4413      	add	r3, r2
 800585e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005860:	430b      	orrs	r3, r1
 8005862:	e07e      	b.n	8005962 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800586c:	2b00      	cmp	r3, #0
 800586e:	d107      	bne.n	8005880 <HAL_ADC_ConfigChannel+0x778>
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	0e9b      	lsrs	r3, r3, #26
 8005876:	3301      	adds	r3, #1
 8005878:	069b      	lsls	r3, r3, #26
 800587a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800587e:	e015      	b.n	80058ac <HAL_ADC_ConfigChannel+0x7a4>
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	fa93 f3a3 	rbit	r3, r3
 800588c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8005898:	2320      	movs	r3, #32
 800589a:	e003      	b.n	80058a4 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 800589c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589e:	fab3 f383 	clz	r3, r3
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	3301      	adds	r3, #1
 80058a6:	069b      	lsls	r3, r3, #26
 80058a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d109      	bne.n	80058cc <HAL_ADC_ConfigChannel+0x7c4>
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	0e9b      	lsrs	r3, r3, #26
 80058be:	3301      	adds	r3, #1
 80058c0:	f003 031f 	and.w	r3, r3, #31
 80058c4:	2101      	movs	r1, #1
 80058c6:	fa01 f303 	lsl.w	r3, r1, r3
 80058ca:	e017      	b.n	80058fc <HAL_ADC_ConfigChannel+0x7f4>
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	fa93 f3a3 	rbit	r3, r3
 80058d8:	61bb      	str	r3, [r7, #24]
  return result;
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80058e4:	2320      	movs	r3, #32
 80058e6:	e003      	b.n	80058f0 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80058e8:	6a3b      	ldr	r3, [r7, #32]
 80058ea:	fab3 f383 	clz	r3, r3
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	3301      	adds	r3, #1
 80058f2:	f003 031f 	and.w	r3, r3, #31
 80058f6:	2101      	movs	r1, #1
 80058f8:	fa01 f303 	lsl.w	r3, r1, r3
 80058fc:	ea42 0103 	orr.w	r1, r2, r3
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10d      	bne.n	8005928 <HAL_ADC_ConfigChannel+0x820>
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	0e9b      	lsrs	r3, r3, #26
 8005912:	3301      	adds	r3, #1
 8005914:	f003 021f 	and.w	r2, r3, #31
 8005918:	4613      	mov	r3, r2
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	4413      	add	r3, r2
 800591e:	3b1e      	subs	r3, #30
 8005920:	051b      	lsls	r3, r3, #20
 8005922:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005926:	e01b      	b.n	8005960 <HAL_ADC_ConfigChannel+0x858>
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	fa93 f3a3 	rbit	r3, r3
 8005934:	60fb      	str	r3, [r7, #12]
  return result;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d101      	bne.n	8005944 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8005940:	2320      	movs	r3, #32
 8005942:	e003      	b.n	800594c <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	fab3 f383 	clz	r3, r3
 800594a:	b2db      	uxtb	r3, r3
 800594c:	3301      	adds	r3, #1
 800594e:	f003 021f 	and.w	r2, r3, #31
 8005952:	4613      	mov	r3, r2
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	4413      	add	r3, r2
 8005958:	3b1e      	subs	r3, #30
 800595a:	051b      	lsls	r3, r3, #20
 800595c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005960:	430b      	orrs	r3, r1
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	6892      	ldr	r2, [r2, #8]
 8005966:	4619      	mov	r1, r3
 8005968:	f7fe fe3f 	bl	80045ea <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	f280 80d7 	bge.w	8005b24 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a06      	ldr	r2, [pc, #24]	; (8005994 <HAL_ADC_ConfigChannel+0x88c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d004      	beq.n	800598a <HAL_ADC_ConfigChannel+0x882>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a04      	ldr	r2, [pc, #16]	; (8005998 <HAL_ADC_ConfigChannel+0x890>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d10a      	bne.n	80059a0 <HAL_ADC_ConfigChannel+0x898>
 800598a:	4b04      	ldr	r3, [pc, #16]	; (800599c <HAL_ADC_ConfigChannel+0x894>)
 800598c:	e009      	b.n	80059a2 <HAL_ADC_ConfigChannel+0x89a>
 800598e:	bf00      	nop
 8005990:	47ff0000 	.word	0x47ff0000
 8005994:	40022000 	.word	0x40022000
 8005998:	40022100 	.word	0x40022100
 800599c:	40022300 	.word	0x40022300
 80059a0:	4b65      	ldr	r3, [pc, #404]	; (8005b38 <HAL_ADC_ConfigChannel+0xa30>)
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7fe fce2 	bl	800436c <LL_ADC_GetCommonPathInternalCh>
 80059a8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a62      	ldr	r2, [pc, #392]	; (8005b3c <HAL_ADC_ConfigChannel+0xa34>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d004      	beq.n	80059c0 <HAL_ADC_ConfigChannel+0x8b8>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a61      	ldr	r2, [pc, #388]	; (8005b40 <HAL_ADC_ConfigChannel+0xa38>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d10e      	bne.n	80059de <HAL_ADC_ConfigChannel+0x8d6>
 80059c0:	485e      	ldr	r0, [pc, #376]	; (8005b3c <HAL_ADC_ConfigChannel+0xa34>)
 80059c2:	f7fe ff0f 	bl	80047e4 <LL_ADC_IsEnabled>
 80059c6:	4604      	mov	r4, r0
 80059c8:	485d      	ldr	r0, [pc, #372]	; (8005b40 <HAL_ADC_ConfigChannel+0xa38>)
 80059ca:	f7fe ff0b 	bl	80047e4 <LL_ADC_IsEnabled>
 80059ce:	4603      	mov	r3, r0
 80059d0:	4323      	orrs	r3, r4
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	bf0c      	ite	eq
 80059d6:	2301      	moveq	r3, #1
 80059d8:	2300      	movne	r3, #0
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	e008      	b.n	80059f0 <HAL_ADC_ConfigChannel+0x8e8>
 80059de:	4859      	ldr	r0, [pc, #356]	; (8005b44 <HAL_ADC_ConfigChannel+0xa3c>)
 80059e0:	f7fe ff00 	bl	80047e4 <LL_ADC_IsEnabled>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	bf0c      	ite	eq
 80059ea:	2301      	moveq	r3, #1
 80059ec:	2300      	movne	r3, #0
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 8084 	beq.w	8005afe <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a53      	ldr	r2, [pc, #332]	; (8005b48 <HAL_ADC_ConfigChannel+0xa40>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d132      	bne.n	8005a66 <HAL_ADC_ConfigChannel+0x95e>
 8005a00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d12c      	bne.n	8005a66 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a4c      	ldr	r2, [pc, #304]	; (8005b44 <HAL_ADC_ConfigChannel+0xa3c>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	f040 8086 	bne.w	8005b24 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a47      	ldr	r2, [pc, #284]	; (8005b3c <HAL_ADC_ConfigChannel+0xa34>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d004      	beq.n	8005a2c <HAL_ADC_ConfigChannel+0x924>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a46      	ldr	r2, [pc, #280]	; (8005b40 <HAL_ADC_ConfigChannel+0xa38>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d101      	bne.n	8005a30 <HAL_ADC_ConfigChannel+0x928>
 8005a2c:	4a47      	ldr	r2, [pc, #284]	; (8005b4c <HAL_ADC_ConfigChannel+0xa44>)
 8005a2e:	e000      	b.n	8005a32 <HAL_ADC_ConfigChannel+0x92a>
 8005a30:	4a41      	ldr	r2, [pc, #260]	; (8005b38 <HAL_ADC_ConfigChannel+0xa30>)
 8005a32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	4610      	mov	r0, r2
 8005a3e:	f7fe fc82 	bl	8004346 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a42:	4b43      	ldr	r3, [pc, #268]	; (8005b50 <HAL_ADC_ConfigChannel+0xa48>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	099b      	lsrs	r3, r3, #6
 8005a48:	4a42      	ldr	r2, [pc, #264]	; (8005b54 <HAL_ADC_ConfigChannel+0xa4c>)
 8005a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4e:	099b      	lsrs	r3, r3, #6
 8005a50:	3301      	adds	r3, #1
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005a56:	e002      	b.n	8005a5e <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1f9      	bne.n	8005a58 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a64:	e05e      	b.n	8005b24 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a3b      	ldr	r2, [pc, #236]	; (8005b58 <HAL_ADC_ConfigChannel+0xa50>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d120      	bne.n	8005ab2 <HAL_ADC_ConfigChannel+0x9aa>
 8005a70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d11a      	bne.n	8005ab2 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a30      	ldr	r2, [pc, #192]	; (8005b44 <HAL_ADC_ConfigChannel+0xa3c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d14e      	bne.n	8005b24 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a2c      	ldr	r2, [pc, #176]	; (8005b3c <HAL_ADC_ConfigChannel+0xa34>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d004      	beq.n	8005a9a <HAL_ADC_ConfigChannel+0x992>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a2a      	ldr	r2, [pc, #168]	; (8005b40 <HAL_ADC_ConfigChannel+0xa38>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d101      	bne.n	8005a9e <HAL_ADC_ConfigChannel+0x996>
 8005a9a:	4a2c      	ldr	r2, [pc, #176]	; (8005b4c <HAL_ADC_ConfigChannel+0xa44>)
 8005a9c:	e000      	b.n	8005aa0 <HAL_ADC_ConfigChannel+0x998>
 8005a9e:	4a26      	ldr	r2, [pc, #152]	; (8005b38 <HAL_ADC_ConfigChannel+0xa30>)
 8005aa0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	4610      	mov	r0, r2
 8005aac:	f7fe fc4b 	bl	8004346 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005ab0:	e038      	b.n	8005b24 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a29      	ldr	r2, [pc, #164]	; (8005b5c <HAL_ADC_ConfigChannel+0xa54>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d133      	bne.n	8005b24 <HAL_ADC_ConfigChannel+0xa1c>
 8005abc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ac0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d12d      	bne.n	8005b24 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a1d      	ldr	r2, [pc, #116]	; (8005b44 <HAL_ADC_ConfigChannel+0xa3c>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d128      	bne.n	8005b24 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a19      	ldr	r2, [pc, #100]	; (8005b3c <HAL_ADC_ConfigChannel+0xa34>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d004      	beq.n	8005ae6 <HAL_ADC_ConfigChannel+0x9de>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a17      	ldr	r2, [pc, #92]	; (8005b40 <HAL_ADC_ConfigChannel+0xa38>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d101      	bne.n	8005aea <HAL_ADC_ConfigChannel+0x9e2>
 8005ae6:	4a19      	ldr	r2, [pc, #100]	; (8005b4c <HAL_ADC_ConfigChannel+0xa44>)
 8005ae8:	e000      	b.n	8005aec <HAL_ADC_ConfigChannel+0x9e4>
 8005aea:	4a13      	ldr	r2, [pc, #76]	; (8005b38 <HAL_ADC_ConfigChannel+0xa30>)
 8005aec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005af0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005af4:	4619      	mov	r1, r3
 8005af6:	4610      	mov	r0, r2
 8005af8:	f7fe fc25 	bl	8004346 <LL_ADC_SetCommonPathInternalCh>
 8005afc:	e012      	b.n	8005b24 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b02:	f043 0220 	orr.w	r2, r3, #32
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8005b10:	e008      	b.n	8005b24 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b16:	f043 0220 	orr.w	r2, r3, #32
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005b2c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	37e4      	adds	r7, #228	; 0xe4
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd90      	pop	{r4, r7, pc}
 8005b38:	58026300 	.word	0x58026300
 8005b3c:	40022000 	.word	0x40022000
 8005b40:	40022100 	.word	0x40022100
 8005b44:	58026000 	.word	0x58026000
 8005b48:	c7520000 	.word	0xc7520000
 8005b4c:	40022300 	.word	0x40022300
 8005b50:	24000000 	.word	0x24000000
 8005b54:	053e2d63 	.word	0x053e2d63
 8005b58:	c3210000 	.word	0xc3210000
 8005b5c:	cb840000 	.word	0xcb840000

08005b60 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7fe fe82 	bl	8004880 <LL_ADC_REG_IsConversionOngoing>
 8005b7c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fe fea4 	bl	80048d0 <LL_ADC_INJ_IsConversionOngoing>
 8005b88:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d103      	bne.n	8005b98 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 8098 	beq.w	8005cc8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d02a      	beq.n	8005bfc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	7e5b      	ldrb	r3, [r3, #25]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d126      	bne.n	8005bfc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	7e1b      	ldrb	r3, [r3, #24]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d122      	bne.n	8005bfc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005bba:	e014      	b.n	8005be6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	4a45      	ldr	r2, [pc, #276]	; (8005cd4 <ADC_ConversionStop+0x174>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d90d      	bls.n	8005be0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bc8:	f043 0210 	orr.w	r2, r3, #16
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bd4:	f043 0201 	orr.w	r2, r3, #1
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e074      	b.n	8005cca <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	3301      	adds	r3, #1
 8005be4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf0:	2b40      	cmp	r3, #64	; 0x40
 8005bf2:	d1e3      	bne.n	8005bbc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2240      	movs	r2, #64	; 0x40
 8005bfa:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d014      	beq.n	8005c2c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fe fe3a 	bl	8004880 <LL_ADC_REG_IsConversionOngoing>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00c      	beq.n	8005c2c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fe fdf7 	bl	800480a <LL_ADC_IsDisableOngoing>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d104      	bne.n	8005c2c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7fe fe16 	bl	8004858 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d014      	beq.n	8005c5c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7fe fe4a 	bl	80048d0 <LL_ADC_INJ_IsConversionOngoing>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00c      	beq.n	8005c5c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fe fddf 	bl	800480a <LL_ADC_IsDisableOngoing>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d104      	bne.n	8005c5c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7fe fe26 	bl	80048a8 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d005      	beq.n	8005c6e <ADC_ConversionStop+0x10e>
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	2b03      	cmp	r3, #3
 8005c66:	d105      	bne.n	8005c74 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005c68:	230c      	movs	r3, #12
 8005c6a:	617b      	str	r3, [r7, #20]
        break;
 8005c6c:	e005      	b.n	8005c7a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005c6e:	2308      	movs	r3, #8
 8005c70:	617b      	str	r3, [r7, #20]
        break;
 8005c72:	e002      	b.n	8005c7a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005c74:	2304      	movs	r3, #4
 8005c76:	617b      	str	r3, [r7, #20]
        break;
 8005c78:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005c7a:	f7fe fb0b 	bl	8004294 <HAL_GetTick>
 8005c7e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005c80:	e01b      	b.n	8005cba <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005c82:	f7fe fb07 	bl	8004294 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	2b05      	cmp	r3, #5
 8005c8e:	d914      	bls.n	8005cba <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689a      	ldr	r2, [r3, #8]
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	4013      	ands	r3, r2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00d      	beq.n	8005cba <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ca2:	f043 0210 	orr.w	r2, r3, #16
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cae:	f043 0201 	orr.w	r2, r3, #1
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e007      	b.n	8005cca <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	689a      	ldr	r2, [r3, #8]
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1dc      	bne.n	8005c82 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3720      	adds	r7, #32
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	000cdbff 	.word	0x000cdbff

08005cd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7fe fd7d 	bl	80047e4 <LL_ADC_IsEnabled>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d16e      	bne.n	8005dce <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689a      	ldr	r2, [r3, #8]
 8005cf6:	4b38      	ldr	r3, [pc, #224]	; (8005dd8 <ADC_Enable+0x100>)
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00d      	beq.n	8005d1a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d02:	f043 0210 	orr.w	r2, r3, #16
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d0e:	f043 0201 	orr.w	r2, r3, #1
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e05a      	b.n	8005dd0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fe fd38 	bl	8004794 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005d24:	f7fe fab6 	bl	8004294 <HAL_GetTick>
 8005d28:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a2b      	ldr	r2, [pc, #172]	; (8005ddc <ADC_Enable+0x104>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d004      	beq.n	8005d3e <ADC_Enable+0x66>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a29      	ldr	r2, [pc, #164]	; (8005de0 <ADC_Enable+0x108>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d101      	bne.n	8005d42 <ADC_Enable+0x6a>
 8005d3e:	4b29      	ldr	r3, [pc, #164]	; (8005de4 <ADC_Enable+0x10c>)
 8005d40:	e000      	b.n	8005d44 <ADC_Enable+0x6c>
 8005d42:	4b29      	ldr	r3, [pc, #164]	; (8005de8 <ADC_Enable+0x110>)
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7fe fcbb 	bl	80046c0 <LL_ADC_GetMultimode>
 8005d4a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a23      	ldr	r2, [pc, #140]	; (8005de0 <ADC_Enable+0x108>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d002      	beq.n	8005d5c <ADC_Enable+0x84>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	e000      	b.n	8005d5e <ADC_Enable+0x86>
 8005d5c:	4b1f      	ldr	r3, [pc, #124]	; (8005ddc <ADC_Enable+0x104>)
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	6812      	ldr	r2, [r2, #0]
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d02c      	beq.n	8005dc0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d130      	bne.n	8005dce <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005d6c:	e028      	b.n	8005dc0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7fe fd36 	bl	80047e4 <LL_ADC_IsEnabled>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d104      	bne.n	8005d88 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fe fd06 	bl	8004794 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005d88:	f7fe fa84 	bl	8004294 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d914      	bls.n	8005dc0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d00d      	beq.n	8005dc0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005da8:	f043 0210 	orr.w	r2, r3, #16
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005db4:	f043 0201 	orr.w	r2, r3, #1
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e007      	b.n	8005dd0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d1cf      	bne.n	8005d6e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	8000003f 	.word	0x8000003f
 8005ddc:	40022000 	.word	0x40022000
 8005de0:	40022100 	.word	0x40022100
 8005de4:	40022300 	.word	0x40022300
 8005de8:	58026300 	.word	0x58026300

08005dec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fe fd06 	bl	800480a <LL_ADC_IsDisableOngoing>
 8005dfe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7fe fced 	bl	80047e4 <LL_ADC_IsEnabled>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d047      	beq.n	8005ea0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d144      	bne.n	8005ea0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f003 030d 	and.w	r3, r3, #13
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d10c      	bne.n	8005e3e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7fe fcc7 	bl	80047bc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2203      	movs	r2, #3
 8005e34:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005e36:	f7fe fa2d 	bl	8004294 <HAL_GetTick>
 8005e3a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005e3c:	e029      	b.n	8005e92 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e42:	f043 0210 	orr.w	r2, r3, #16
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e4e:	f043 0201 	orr.w	r2, r3, #1
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e023      	b.n	8005ea2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005e5a:	f7fe fa1b 	bl	8004294 <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d914      	bls.n	8005e92 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00d      	beq.n	8005e92 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e7a:	f043 0210 	orr.w	r2, r3, #16
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e86:	f043 0201 	orr.w	r2, r3, #1
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e007      	b.n	8005ea2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1dc      	bne.n	8005e5a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
	...

08005eac <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a6c      	ldr	r2, [pc, #432]	; (800606c <ADC_ConfigureBoostMode+0x1c0>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d004      	beq.n	8005ec8 <ADC_ConfigureBoostMode+0x1c>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a6b      	ldr	r2, [pc, #428]	; (8006070 <ADC_ConfigureBoostMode+0x1c4>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d109      	bne.n	8005edc <ADC_ConfigureBoostMode+0x30>
 8005ec8:	4b6a      	ldr	r3, [pc, #424]	; (8006074 <ADC_ConfigureBoostMode+0x1c8>)
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	bf14      	ite	ne
 8005ed4:	2301      	movne	r3, #1
 8005ed6:	2300      	moveq	r3, #0
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	e008      	b.n	8005eee <ADC_ConfigureBoostMode+0x42>
 8005edc:	4b66      	ldr	r3, [pc, #408]	; (8006078 <ADC_ConfigureBoostMode+0x1cc>)
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	bf14      	ite	ne
 8005ee8:	2301      	movne	r3, #1
 8005eea:	2300      	moveq	r3, #0
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d01c      	beq.n	8005f2c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005ef2:	f005 fcab 	bl	800b84c <HAL_RCC_GetHCLKFreq>
 8005ef6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f00:	d010      	beq.n	8005f24 <ADC_ConfigureBoostMode+0x78>
 8005f02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f06:	d873      	bhi.n	8005ff0 <ADC_ConfigureBoostMode+0x144>
 8005f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f0c:	d002      	beq.n	8005f14 <ADC_ConfigureBoostMode+0x68>
 8005f0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f12:	d16d      	bne.n	8005ff0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	0c1b      	lsrs	r3, r3, #16
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f20:	60fb      	str	r3, [r7, #12]
        break;
 8005f22:	e068      	b.n	8005ff6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	089b      	lsrs	r3, r3, #2
 8005f28:	60fb      	str	r3, [r7, #12]
        break;
 8005f2a:	e064      	b.n	8005ff6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005f2c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005f30:	f04f 0100 	mov.w	r1, #0
 8005f34:	f006 fe86 	bl	800cc44 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f38:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005f42:	d051      	beq.n	8005fe8 <ADC_ConfigureBoostMode+0x13c>
 8005f44:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005f48:	d854      	bhi.n	8005ff4 <ADC_ConfigureBoostMode+0x148>
 8005f4a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005f4e:	d047      	beq.n	8005fe0 <ADC_ConfigureBoostMode+0x134>
 8005f50:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005f54:	d84e      	bhi.n	8005ff4 <ADC_ConfigureBoostMode+0x148>
 8005f56:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005f5a:	d03d      	beq.n	8005fd8 <ADC_ConfigureBoostMode+0x12c>
 8005f5c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005f60:	d848      	bhi.n	8005ff4 <ADC_ConfigureBoostMode+0x148>
 8005f62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f66:	d033      	beq.n	8005fd0 <ADC_ConfigureBoostMode+0x124>
 8005f68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f6c:	d842      	bhi.n	8005ff4 <ADC_ConfigureBoostMode+0x148>
 8005f6e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005f72:	d029      	beq.n	8005fc8 <ADC_ConfigureBoostMode+0x11c>
 8005f74:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005f78:	d83c      	bhi.n	8005ff4 <ADC_ConfigureBoostMode+0x148>
 8005f7a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005f7e:	d01a      	beq.n	8005fb6 <ADC_ConfigureBoostMode+0x10a>
 8005f80:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005f84:	d836      	bhi.n	8005ff4 <ADC_ConfigureBoostMode+0x148>
 8005f86:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005f8a:	d014      	beq.n	8005fb6 <ADC_ConfigureBoostMode+0x10a>
 8005f8c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005f90:	d830      	bhi.n	8005ff4 <ADC_ConfigureBoostMode+0x148>
 8005f92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f96:	d00e      	beq.n	8005fb6 <ADC_ConfigureBoostMode+0x10a>
 8005f98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f9c:	d82a      	bhi.n	8005ff4 <ADC_ConfigureBoostMode+0x148>
 8005f9e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005fa2:	d008      	beq.n	8005fb6 <ADC_ConfigureBoostMode+0x10a>
 8005fa4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005fa8:	d824      	bhi.n	8005ff4 <ADC_ConfigureBoostMode+0x148>
 8005faa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fae:	d002      	beq.n	8005fb6 <ADC_ConfigureBoostMode+0x10a>
 8005fb0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005fb4:	d11e      	bne.n	8005ff4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	0c9b      	lsrs	r3, r3, #18
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc4:	60fb      	str	r3, [r7, #12]
        break;
 8005fc6:	e016      	b.n	8005ff6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	091b      	lsrs	r3, r3, #4
 8005fcc:	60fb      	str	r3, [r7, #12]
        break;
 8005fce:	e012      	b.n	8005ff6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	095b      	lsrs	r3, r3, #5
 8005fd4:	60fb      	str	r3, [r7, #12]
        break;
 8005fd6:	e00e      	b.n	8005ff6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	099b      	lsrs	r3, r3, #6
 8005fdc:	60fb      	str	r3, [r7, #12]
        break;
 8005fde:	e00a      	b.n	8005ff6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	09db      	lsrs	r3, r3, #7
 8005fe4:	60fb      	str	r3, [r7, #12]
        break;
 8005fe6:	e006      	b.n	8005ff6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	0a1b      	lsrs	r3, r3, #8
 8005fec:	60fb      	str	r3, [r7, #12]
        break;
 8005fee:	e002      	b.n	8005ff6 <ADC_ConfigureBoostMode+0x14a>
        break;
 8005ff0:	bf00      	nop
 8005ff2:	e000      	b.n	8005ff6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005ff4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	085b      	lsrs	r3, r3, #1
 8005ffa:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	4a1f      	ldr	r2, [pc, #124]	; (800607c <ADC_ConfigureBoostMode+0x1d0>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d808      	bhi.n	8006016 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689a      	ldr	r2, [r3, #8]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006012:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006014:	e025      	b.n	8006062 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	4a19      	ldr	r2, [pc, #100]	; (8006080 <ADC_ConfigureBoostMode+0x1d4>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d80a      	bhi.n	8006034 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006030:	609a      	str	r2, [r3, #8]
}
 8006032:	e016      	b.n	8006062 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	4a13      	ldr	r2, [pc, #76]	; (8006084 <ADC_ConfigureBoostMode+0x1d8>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d80a      	bhi.n	8006052 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800604e:	609a      	str	r2, [r3, #8]
}
 8006050:	e007      	b.n	8006062 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006060:	609a      	str	r2, [r3, #8]
}
 8006062:	bf00      	nop
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	40022000 	.word	0x40022000
 8006070:	40022100 	.word	0x40022100
 8006074:	40022300 	.word	0x40022300
 8006078:	58026300 	.word	0x58026300
 800607c:	005f5e10 	.word	0x005f5e10
 8006080:	00bebc20 	.word	0x00bebc20
 8006084:	017d7840 	.word	0x017d7840

08006088 <LL_ADC_IsEnabled>:
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	2b01      	cmp	r3, #1
 800609a:	d101      	bne.n	80060a0 <LL_ADC_IsEnabled+0x18>
 800609c:	2301      	movs	r3, #1
 800609e:	e000      	b.n	80060a2 <LL_ADC_IsEnabled+0x1a>
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <LL_ADC_REG_IsConversionOngoing>:
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f003 0304 	and.w	r3, r3, #4
 80060be:	2b04      	cmp	r3, #4
 80060c0:	d101      	bne.n	80060c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80060c2:	2301      	movs	r3, #1
 80060c4:	e000      	b.n	80060c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80060d4:	b590      	push	{r4, r7, lr}
 80060d6:	b0a3      	sub	sp, #140	; 0x8c
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060de:	2300      	movs	r3, #0
 80060e0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d101      	bne.n	80060f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80060ee:	2302      	movs	r3, #2
 80060f0:	e0c1      	b.n	8006276 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80060fa:	2300      	movs	r3, #0
 80060fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80060fe:	2300      	movs	r3, #0
 8006100:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a5e      	ldr	r2, [pc, #376]	; (8006280 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d102      	bne.n	8006112 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800610c:	4b5d      	ldr	r3, [pc, #372]	; (8006284 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800610e:	60fb      	str	r3, [r7, #12]
 8006110:	e001      	b.n	8006116 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006112:	2300      	movs	r3, #0
 8006114:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10b      	bne.n	8006134 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006120:	f043 0220 	orr.w	r2, r3, #32
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e0a0      	b.n	8006276 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4618      	mov	r0, r3
 8006138:	f7ff ffb9 	bl	80060ae <LL_ADC_REG_IsConversionOngoing>
 800613c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4618      	mov	r0, r3
 8006146:	f7ff ffb2 	bl	80060ae <LL_ADC_REG_IsConversionOngoing>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	f040 8081 	bne.w	8006254 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006152:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006156:	2b00      	cmp	r3, #0
 8006158:	d17c      	bne.n	8006254 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a48      	ldr	r2, [pc, #288]	; (8006280 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d004      	beq.n	800616e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a46      	ldr	r2, [pc, #280]	; (8006284 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d101      	bne.n	8006172 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800616e:	4b46      	ldr	r3, [pc, #280]	; (8006288 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006170:	e000      	b.n	8006174 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8006172:	4b46      	ldr	r3, [pc, #280]	; (800628c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006174:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d039      	beq.n	80061f2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800617e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	431a      	orrs	r2, r3
 800618c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800618e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a3a      	ldr	r2, [pc, #232]	; (8006280 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d004      	beq.n	80061a4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a39      	ldr	r2, [pc, #228]	; (8006284 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d10e      	bne.n	80061c2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80061a4:	4836      	ldr	r0, [pc, #216]	; (8006280 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80061a6:	f7ff ff6f 	bl	8006088 <LL_ADC_IsEnabled>
 80061aa:	4604      	mov	r4, r0
 80061ac:	4835      	ldr	r0, [pc, #212]	; (8006284 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80061ae:	f7ff ff6b 	bl	8006088 <LL_ADC_IsEnabled>
 80061b2:	4603      	mov	r3, r0
 80061b4:	4323      	orrs	r3, r4
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	bf0c      	ite	eq
 80061ba:	2301      	moveq	r3, #1
 80061bc:	2300      	movne	r3, #0
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	e008      	b.n	80061d4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80061c2:	4833      	ldr	r0, [pc, #204]	; (8006290 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80061c4:	f7ff ff60 	bl	8006088 <LL_ADC_IsEnabled>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	bf0c      	ite	eq
 80061ce:	2301      	moveq	r3, #1
 80061d0:	2300      	movne	r3, #0
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d047      	beq.n	8006268 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80061d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061da:	689a      	ldr	r2, [r3, #8]
 80061dc:	4b2d      	ldr	r3, [pc, #180]	; (8006294 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80061de:	4013      	ands	r3, r2
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	6811      	ldr	r1, [r2, #0]
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	6892      	ldr	r2, [r2, #8]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	431a      	orrs	r2, r3
 80061ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061ee:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80061f0:	e03a      	b.n	8006268 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80061f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80061fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061fc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a1f      	ldr	r2, [pc, #124]	; (8006280 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d004      	beq.n	8006212 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a1d      	ldr	r2, [pc, #116]	; (8006284 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d10e      	bne.n	8006230 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8006212:	481b      	ldr	r0, [pc, #108]	; (8006280 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006214:	f7ff ff38 	bl	8006088 <LL_ADC_IsEnabled>
 8006218:	4604      	mov	r4, r0
 800621a:	481a      	ldr	r0, [pc, #104]	; (8006284 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800621c:	f7ff ff34 	bl	8006088 <LL_ADC_IsEnabled>
 8006220:	4603      	mov	r3, r0
 8006222:	4323      	orrs	r3, r4
 8006224:	2b00      	cmp	r3, #0
 8006226:	bf0c      	ite	eq
 8006228:	2301      	moveq	r3, #1
 800622a:	2300      	movne	r3, #0
 800622c:	b2db      	uxtb	r3, r3
 800622e:	e008      	b.n	8006242 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8006230:	4817      	ldr	r0, [pc, #92]	; (8006290 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8006232:	f7ff ff29 	bl	8006088 <LL_ADC_IsEnabled>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	bf0c      	ite	eq
 800623c:	2301      	moveq	r3, #1
 800623e:	2300      	movne	r3, #0
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d010      	beq.n	8006268 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006246:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006248:	689a      	ldr	r2, [r3, #8]
 800624a:	4b12      	ldr	r3, [pc, #72]	; (8006294 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800624c:	4013      	ands	r3, r2
 800624e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006250:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006252:	e009      	b.n	8006268 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006258:	f043 0220 	orr.w	r2, r3, #32
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8006266:	e000      	b.n	800626a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006268:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8006272:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8006276:	4618      	mov	r0, r3
 8006278:	378c      	adds	r7, #140	; 0x8c
 800627a:	46bd      	mov	sp, r7
 800627c:	bd90      	pop	{r4, r7, pc}
 800627e:	bf00      	nop
 8006280:	40022000 	.word	0x40022000
 8006284:	40022100 	.word	0x40022100
 8006288:	40022300 	.word	0x40022300
 800628c:	58026300 	.word	0x58026300
 8006290:	58026000 	.word	0x58026000
 8006294:	fffff0e0 	.word	0xfffff0e0

08006298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80062a8:	4b0b      	ldr	r3, [pc, #44]	; (80062d8 <__NVIC_SetPriorityGrouping+0x40>)
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80062b4:	4013      	ands	r3, r2
 80062b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80062c0:	4b06      	ldr	r3, [pc, #24]	; (80062dc <__NVIC_SetPriorityGrouping+0x44>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80062c6:	4a04      	ldr	r2, [pc, #16]	; (80062d8 <__NVIC_SetPriorityGrouping+0x40>)
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	60d3      	str	r3, [r2, #12]
}
 80062cc:	bf00      	nop
 80062ce:	3714      	adds	r7, #20
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr
 80062d8:	e000ed00 	.word	0xe000ed00
 80062dc:	05fa0000 	.word	0x05fa0000

080062e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80062e0:	b480      	push	{r7}
 80062e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062e4:	4b04      	ldr	r3, [pc, #16]	; (80062f8 <__NVIC_GetPriorityGrouping+0x18>)
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	0a1b      	lsrs	r3, r3, #8
 80062ea:	f003 0307 	and.w	r3, r3, #7
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr
 80062f8:	e000ed00 	.word	0xe000ed00

080062fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	4603      	mov	r3, r0
 8006304:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006306:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800630a:	2b00      	cmp	r3, #0
 800630c:	db0b      	blt.n	8006326 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800630e:	88fb      	ldrh	r3, [r7, #6]
 8006310:	f003 021f 	and.w	r2, r3, #31
 8006314:	4907      	ldr	r1, [pc, #28]	; (8006334 <__NVIC_EnableIRQ+0x38>)
 8006316:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800631a:	095b      	lsrs	r3, r3, #5
 800631c:	2001      	movs	r0, #1
 800631e:	fa00 f202 	lsl.w	r2, r0, r2
 8006322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006326:	bf00      	nop
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	e000e100 	.word	0xe000e100

08006338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	4603      	mov	r3, r0
 8006340:	6039      	str	r1, [r7, #0]
 8006342:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006344:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006348:	2b00      	cmp	r3, #0
 800634a:	db0a      	blt.n	8006362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	b2da      	uxtb	r2, r3
 8006350:	490c      	ldr	r1, [pc, #48]	; (8006384 <__NVIC_SetPriority+0x4c>)
 8006352:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006356:	0112      	lsls	r2, r2, #4
 8006358:	b2d2      	uxtb	r2, r2
 800635a:	440b      	add	r3, r1
 800635c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006360:	e00a      	b.n	8006378 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	b2da      	uxtb	r2, r3
 8006366:	4908      	ldr	r1, [pc, #32]	; (8006388 <__NVIC_SetPriority+0x50>)
 8006368:	88fb      	ldrh	r3, [r7, #6]
 800636a:	f003 030f 	and.w	r3, r3, #15
 800636e:	3b04      	subs	r3, #4
 8006370:	0112      	lsls	r2, r2, #4
 8006372:	b2d2      	uxtb	r2, r2
 8006374:	440b      	add	r3, r1
 8006376:	761a      	strb	r2, [r3, #24]
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr
 8006384:	e000e100 	.word	0xe000e100
 8006388:	e000ed00 	.word	0xe000ed00

0800638c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800638c:	b480      	push	{r7}
 800638e:	b089      	sub	sp, #36	; 0x24
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f003 0307 	and.w	r3, r3, #7
 800639e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	f1c3 0307 	rsb	r3, r3, #7
 80063a6:	2b04      	cmp	r3, #4
 80063a8:	bf28      	it	cs
 80063aa:	2304      	movcs	r3, #4
 80063ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	3304      	adds	r3, #4
 80063b2:	2b06      	cmp	r3, #6
 80063b4:	d902      	bls.n	80063bc <NVIC_EncodePriority+0x30>
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	3b03      	subs	r3, #3
 80063ba:	e000      	b.n	80063be <NVIC_EncodePriority+0x32>
 80063bc:	2300      	movs	r3, #0
 80063be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063c0:	f04f 32ff 	mov.w	r2, #4294967295
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ca:	43da      	mvns	r2, r3
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	401a      	ands	r2, r3
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80063d4:	f04f 31ff 	mov.w	r1, #4294967295
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	fa01 f303 	lsl.w	r3, r1, r3
 80063de:	43d9      	mvns	r1, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063e4:	4313      	orrs	r3, r2
         );
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3724      	adds	r7, #36	; 0x24
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
	...

080063f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	3b01      	subs	r3, #1
 8006400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006404:	d301      	bcc.n	800640a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006406:	2301      	movs	r3, #1
 8006408:	e00f      	b.n	800642a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800640a:	4a0a      	ldr	r2, [pc, #40]	; (8006434 <SysTick_Config+0x40>)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	3b01      	subs	r3, #1
 8006410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006412:	210f      	movs	r1, #15
 8006414:	f04f 30ff 	mov.w	r0, #4294967295
 8006418:	f7ff ff8e 	bl	8006338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800641c:	4b05      	ldr	r3, [pc, #20]	; (8006434 <SysTick_Config+0x40>)
 800641e:	2200      	movs	r2, #0
 8006420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006422:	4b04      	ldr	r3, [pc, #16]	; (8006434 <SysTick_Config+0x40>)
 8006424:	2207      	movs	r2, #7
 8006426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3708      	adds	r7, #8
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	e000e010 	.word	0xe000e010

08006438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7ff ff29 	bl	8006298 <__NVIC_SetPriorityGrouping>
}
 8006446:	bf00      	nop
 8006448:	3708      	adds	r7, #8
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b086      	sub	sp, #24
 8006452:	af00      	add	r7, sp, #0
 8006454:	4603      	mov	r3, r0
 8006456:	60b9      	str	r1, [r7, #8]
 8006458:	607a      	str	r2, [r7, #4]
 800645a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800645c:	f7ff ff40 	bl	80062e0 <__NVIC_GetPriorityGrouping>
 8006460:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	68b9      	ldr	r1, [r7, #8]
 8006466:	6978      	ldr	r0, [r7, #20]
 8006468:	f7ff ff90 	bl	800638c <NVIC_EncodePriority>
 800646c:	4602      	mov	r2, r0
 800646e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006472:	4611      	mov	r1, r2
 8006474:	4618      	mov	r0, r3
 8006476:	f7ff ff5f 	bl	8006338 <__NVIC_SetPriority>
}
 800647a:	bf00      	nop
 800647c:	3718      	adds	r7, #24
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b082      	sub	sp, #8
 8006486:	af00      	add	r7, sp, #0
 8006488:	4603      	mov	r3, r0
 800648a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800648c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006490:	4618      	mov	r0, r3
 8006492:	f7ff ff33 	bl	80062fc <__NVIC_EnableIRQ>
}
 8006496:	bf00      	nop
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b082      	sub	sp, #8
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7ff ffa4 	bl	80063f4 <SysTick_Config>
 80064ac:	4603      	mov	r3, r0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
	...

080064b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80064c0:	f7fd fee8 	bl	8004294 <HAL_GetTick>
 80064c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e312      	b.n	8006af6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a66      	ldr	r2, [pc, #408]	; (8006670 <HAL_DMA_Init+0x1b8>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d04a      	beq.n	8006570 <HAL_DMA_Init+0xb8>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a65      	ldr	r2, [pc, #404]	; (8006674 <HAL_DMA_Init+0x1bc>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d045      	beq.n	8006570 <HAL_DMA_Init+0xb8>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a63      	ldr	r2, [pc, #396]	; (8006678 <HAL_DMA_Init+0x1c0>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d040      	beq.n	8006570 <HAL_DMA_Init+0xb8>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a62      	ldr	r2, [pc, #392]	; (800667c <HAL_DMA_Init+0x1c4>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d03b      	beq.n	8006570 <HAL_DMA_Init+0xb8>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a60      	ldr	r2, [pc, #384]	; (8006680 <HAL_DMA_Init+0x1c8>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d036      	beq.n	8006570 <HAL_DMA_Init+0xb8>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a5f      	ldr	r2, [pc, #380]	; (8006684 <HAL_DMA_Init+0x1cc>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d031      	beq.n	8006570 <HAL_DMA_Init+0xb8>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a5d      	ldr	r2, [pc, #372]	; (8006688 <HAL_DMA_Init+0x1d0>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d02c      	beq.n	8006570 <HAL_DMA_Init+0xb8>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a5c      	ldr	r2, [pc, #368]	; (800668c <HAL_DMA_Init+0x1d4>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d027      	beq.n	8006570 <HAL_DMA_Init+0xb8>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a5a      	ldr	r2, [pc, #360]	; (8006690 <HAL_DMA_Init+0x1d8>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d022      	beq.n	8006570 <HAL_DMA_Init+0xb8>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a59      	ldr	r2, [pc, #356]	; (8006694 <HAL_DMA_Init+0x1dc>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d01d      	beq.n	8006570 <HAL_DMA_Init+0xb8>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a57      	ldr	r2, [pc, #348]	; (8006698 <HAL_DMA_Init+0x1e0>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d018      	beq.n	8006570 <HAL_DMA_Init+0xb8>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a56      	ldr	r2, [pc, #344]	; (800669c <HAL_DMA_Init+0x1e4>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d013      	beq.n	8006570 <HAL_DMA_Init+0xb8>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a54      	ldr	r2, [pc, #336]	; (80066a0 <HAL_DMA_Init+0x1e8>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d00e      	beq.n	8006570 <HAL_DMA_Init+0xb8>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a53      	ldr	r2, [pc, #332]	; (80066a4 <HAL_DMA_Init+0x1ec>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d009      	beq.n	8006570 <HAL_DMA_Init+0xb8>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a51      	ldr	r2, [pc, #324]	; (80066a8 <HAL_DMA_Init+0x1f0>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d004      	beq.n	8006570 <HAL_DMA_Init+0xb8>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a50      	ldr	r2, [pc, #320]	; (80066ac <HAL_DMA_Init+0x1f4>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d101      	bne.n	8006574 <HAL_DMA_Init+0xbc>
 8006570:	2301      	movs	r3, #1
 8006572:	e000      	b.n	8006576 <HAL_DMA_Init+0xbe>
 8006574:	2300      	movs	r3, #0
 8006576:	2b00      	cmp	r3, #0
 8006578:	f000 813c 	beq.w	80067f4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2202      	movs	r2, #2
 8006580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a37      	ldr	r2, [pc, #220]	; (8006670 <HAL_DMA_Init+0x1b8>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d04a      	beq.n	800662c <HAL_DMA_Init+0x174>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a36      	ldr	r2, [pc, #216]	; (8006674 <HAL_DMA_Init+0x1bc>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d045      	beq.n	800662c <HAL_DMA_Init+0x174>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a34      	ldr	r2, [pc, #208]	; (8006678 <HAL_DMA_Init+0x1c0>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d040      	beq.n	800662c <HAL_DMA_Init+0x174>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a33      	ldr	r2, [pc, #204]	; (800667c <HAL_DMA_Init+0x1c4>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d03b      	beq.n	800662c <HAL_DMA_Init+0x174>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a31      	ldr	r2, [pc, #196]	; (8006680 <HAL_DMA_Init+0x1c8>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d036      	beq.n	800662c <HAL_DMA_Init+0x174>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a30      	ldr	r2, [pc, #192]	; (8006684 <HAL_DMA_Init+0x1cc>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d031      	beq.n	800662c <HAL_DMA_Init+0x174>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a2e      	ldr	r2, [pc, #184]	; (8006688 <HAL_DMA_Init+0x1d0>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d02c      	beq.n	800662c <HAL_DMA_Init+0x174>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a2d      	ldr	r2, [pc, #180]	; (800668c <HAL_DMA_Init+0x1d4>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d027      	beq.n	800662c <HAL_DMA_Init+0x174>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a2b      	ldr	r2, [pc, #172]	; (8006690 <HAL_DMA_Init+0x1d8>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d022      	beq.n	800662c <HAL_DMA_Init+0x174>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a2a      	ldr	r2, [pc, #168]	; (8006694 <HAL_DMA_Init+0x1dc>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d01d      	beq.n	800662c <HAL_DMA_Init+0x174>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a28      	ldr	r2, [pc, #160]	; (8006698 <HAL_DMA_Init+0x1e0>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d018      	beq.n	800662c <HAL_DMA_Init+0x174>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a27      	ldr	r2, [pc, #156]	; (800669c <HAL_DMA_Init+0x1e4>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d013      	beq.n	800662c <HAL_DMA_Init+0x174>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a25      	ldr	r2, [pc, #148]	; (80066a0 <HAL_DMA_Init+0x1e8>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d00e      	beq.n	800662c <HAL_DMA_Init+0x174>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a24      	ldr	r2, [pc, #144]	; (80066a4 <HAL_DMA_Init+0x1ec>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d009      	beq.n	800662c <HAL_DMA_Init+0x174>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a22      	ldr	r2, [pc, #136]	; (80066a8 <HAL_DMA_Init+0x1f0>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d004      	beq.n	800662c <HAL_DMA_Init+0x174>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a21      	ldr	r2, [pc, #132]	; (80066ac <HAL_DMA_Init+0x1f4>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d108      	bne.n	800663e <HAL_DMA_Init+0x186>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 0201 	bic.w	r2, r2, #1
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	e007      	b.n	800664e <HAL_DMA_Init+0x196>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0201 	bic.w	r2, r2, #1
 800664c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800664e:	e02f      	b.n	80066b0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006650:	f7fd fe20 	bl	8004294 <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	2b05      	cmp	r3, #5
 800665c:	d928      	bls.n	80066b0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2220      	movs	r2, #32
 8006662:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2203      	movs	r2, #3
 8006668:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e242      	b.n	8006af6 <HAL_DMA_Init+0x63e>
 8006670:	40020010 	.word	0x40020010
 8006674:	40020028 	.word	0x40020028
 8006678:	40020040 	.word	0x40020040
 800667c:	40020058 	.word	0x40020058
 8006680:	40020070 	.word	0x40020070
 8006684:	40020088 	.word	0x40020088
 8006688:	400200a0 	.word	0x400200a0
 800668c:	400200b8 	.word	0x400200b8
 8006690:	40020410 	.word	0x40020410
 8006694:	40020428 	.word	0x40020428
 8006698:	40020440 	.word	0x40020440
 800669c:	40020458 	.word	0x40020458
 80066a0:	40020470 	.word	0x40020470
 80066a4:	40020488 	.word	0x40020488
 80066a8:	400204a0 	.word	0x400204a0
 80066ac:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0301 	and.w	r3, r3, #1
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1c8      	bne.n	8006650 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	4b83      	ldr	r3, [pc, #524]	; (80068d8 <HAL_DMA_Init+0x420>)
 80066ca:	4013      	ands	r3, r2
 80066cc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80066d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066ee:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a1b      	ldr	r3, [r3, #32]
 80066f4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006700:	2b04      	cmp	r3, #4
 8006702:	d107      	bne.n	8006714 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670c:	4313      	orrs	r3, r2
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4313      	orrs	r3, r2
 8006712:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	2b28      	cmp	r3, #40	; 0x28
 800671a:	d903      	bls.n	8006724 <HAL_DMA_Init+0x26c>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	2b2e      	cmp	r3, #46	; 0x2e
 8006722:	d91f      	bls.n	8006764 <HAL_DMA_Init+0x2ac>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	2b3e      	cmp	r3, #62	; 0x3e
 800672a:	d903      	bls.n	8006734 <HAL_DMA_Init+0x27c>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	2b42      	cmp	r3, #66	; 0x42
 8006732:	d917      	bls.n	8006764 <HAL_DMA_Init+0x2ac>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	2b46      	cmp	r3, #70	; 0x46
 800673a:	d903      	bls.n	8006744 <HAL_DMA_Init+0x28c>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	2b48      	cmp	r3, #72	; 0x48
 8006742:	d90f      	bls.n	8006764 <HAL_DMA_Init+0x2ac>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	2b4e      	cmp	r3, #78	; 0x4e
 800674a:	d903      	bls.n	8006754 <HAL_DMA_Init+0x29c>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	2b52      	cmp	r3, #82	; 0x52
 8006752:	d907      	bls.n	8006764 <HAL_DMA_Init+0x2ac>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	2b73      	cmp	r3, #115	; 0x73
 800675a:	d905      	bls.n	8006768 <HAL_DMA_Init+0x2b0>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	2b77      	cmp	r3, #119	; 0x77
 8006762:	d801      	bhi.n	8006768 <HAL_DMA_Init+0x2b0>
 8006764:	2301      	movs	r3, #1
 8006766:	e000      	b.n	800676a <HAL_DMA_Init+0x2b2>
 8006768:	2300      	movs	r3, #0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006774:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	695b      	ldr	r3, [r3, #20]
 8006784:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f023 0307 	bic.w	r3, r3, #7
 800678c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	4313      	orrs	r3, r2
 8006796:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679c:	2b04      	cmp	r3, #4
 800679e:	d117      	bne.n	80067d0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00e      	beq.n	80067d0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f001 fdca 	bl	800834c <DMA_CheckFifoParam>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d008      	beq.n	80067d0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2240      	movs	r2, #64	; 0x40
 80067c2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e192      	b.n	8006af6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f001 fd05 	bl	80081e8 <DMA_CalcBaseAndBitshift>
 80067de:	4603      	mov	r3, r0
 80067e0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e6:	f003 031f 	and.w	r3, r3, #31
 80067ea:	223f      	movs	r2, #63	; 0x3f
 80067ec:	409a      	lsls	r2, r3
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	609a      	str	r2, [r3, #8]
 80067f2:	e0c8      	b.n	8006986 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a38      	ldr	r2, [pc, #224]	; (80068dc <HAL_DMA_Init+0x424>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d022      	beq.n	8006844 <HAL_DMA_Init+0x38c>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a37      	ldr	r2, [pc, #220]	; (80068e0 <HAL_DMA_Init+0x428>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d01d      	beq.n	8006844 <HAL_DMA_Init+0x38c>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a35      	ldr	r2, [pc, #212]	; (80068e4 <HAL_DMA_Init+0x42c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d018      	beq.n	8006844 <HAL_DMA_Init+0x38c>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a34      	ldr	r2, [pc, #208]	; (80068e8 <HAL_DMA_Init+0x430>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d013      	beq.n	8006844 <HAL_DMA_Init+0x38c>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a32      	ldr	r2, [pc, #200]	; (80068ec <HAL_DMA_Init+0x434>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d00e      	beq.n	8006844 <HAL_DMA_Init+0x38c>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a31      	ldr	r2, [pc, #196]	; (80068f0 <HAL_DMA_Init+0x438>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d009      	beq.n	8006844 <HAL_DMA_Init+0x38c>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a2f      	ldr	r2, [pc, #188]	; (80068f4 <HAL_DMA_Init+0x43c>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d004      	beq.n	8006844 <HAL_DMA_Init+0x38c>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a2e      	ldr	r2, [pc, #184]	; (80068f8 <HAL_DMA_Init+0x440>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d101      	bne.n	8006848 <HAL_DMA_Init+0x390>
 8006844:	2301      	movs	r3, #1
 8006846:	e000      	b.n	800684a <HAL_DMA_Init+0x392>
 8006848:	2300      	movs	r3, #0
 800684a:	2b00      	cmp	r3, #0
 800684c:	f000 8092 	beq.w	8006974 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a21      	ldr	r2, [pc, #132]	; (80068dc <HAL_DMA_Init+0x424>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d021      	beq.n	800689e <HAL_DMA_Init+0x3e6>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a20      	ldr	r2, [pc, #128]	; (80068e0 <HAL_DMA_Init+0x428>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d01c      	beq.n	800689e <HAL_DMA_Init+0x3e6>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a1e      	ldr	r2, [pc, #120]	; (80068e4 <HAL_DMA_Init+0x42c>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d017      	beq.n	800689e <HAL_DMA_Init+0x3e6>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a1d      	ldr	r2, [pc, #116]	; (80068e8 <HAL_DMA_Init+0x430>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d012      	beq.n	800689e <HAL_DMA_Init+0x3e6>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a1b      	ldr	r2, [pc, #108]	; (80068ec <HAL_DMA_Init+0x434>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d00d      	beq.n	800689e <HAL_DMA_Init+0x3e6>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a1a      	ldr	r2, [pc, #104]	; (80068f0 <HAL_DMA_Init+0x438>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d008      	beq.n	800689e <HAL_DMA_Init+0x3e6>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a18      	ldr	r2, [pc, #96]	; (80068f4 <HAL_DMA_Init+0x43c>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d003      	beq.n	800689e <HAL_DMA_Init+0x3e6>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a17      	ldr	r2, [pc, #92]	; (80068f8 <HAL_DMA_Init+0x440>)
 800689c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2202      	movs	r2, #2
 80068a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	4b10      	ldr	r3, [pc, #64]	; (80068fc <HAL_DMA_Init+0x444>)
 80068ba:	4013      	ands	r3, r2
 80068bc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	2b40      	cmp	r3, #64	; 0x40
 80068c4:	d01c      	beq.n	8006900 <HAL_DMA_Init+0x448>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	2b80      	cmp	r3, #128	; 0x80
 80068cc:	d102      	bne.n	80068d4 <HAL_DMA_Init+0x41c>
 80068ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80068d2:	e016      	b.n	8006902 <HAL_DMA_Init+0x44a>
 80068d4:	2300      	movs	r3, #0
 80068d6:	e014      	b.n	8006902 <HAL_DMA_Init+0x44a>
 80068d8:	fe10803f 	.word	0xfe10803f
 80068dc:	58025408 	.word	0x58025408
 80068e0:	5802541c 	.word	0x5802541c
 80068e4:	58025430 	.word	0x58025430
 80068e8:	58025444 	.word	0x58025444
 80068ec:	58025458 	.word	0x58025458
 80068f0:	5802546c 	.word	0x5802546c
 80068f4:	58025480 	.word	0x58025480
 80068f8:	58025494 	.word	0x58025494
 80068fc:	fffe000f 	.word	0xfffe000f
 8006900:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	68d2      	ldr	r2, [r2, #12]
 8006906:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006908:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006910:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006918:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006920:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006928:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006930:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	4313      	orrs	r3, r2
 8006936:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	461a      	mov	r2, r3
 8006946:	4b6e      	ldr	r3, [pc, #440]	; (8006b00 <HAL_DMA_Init+0x648>)
 8006948:	4413      	add	r3, r2
 800694a:	4a6e      	ldr	r2, [pc, #440]	; (8006b04 <HAL_DMA_Init+0x64c>)
 800694c:	fba2 2303 	umull	r2, r3, r2, r3
 8006950:	091b      	lsrs	r3, r3, #4
 8006952:	009a      	lsls	r2, r3, #2
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f001 fc45 	bl	80081e8 <DMA_CalcBaseAndBitshift>
 800695e:	4603      	mov	r3, r0
 8006960:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006966:	f003 031f 	and.w	r3, r3, #31
 800696a:	2201      	movs	r2, #1
 800696c:	409a      	lsls	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	605a      	str	r2, [r3, #4]
 8006972:	e008      	b.n	8006986 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2240      	movs	r2, #64	; 0x40
 8006978:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2203      	movs	r2, #3
 800697e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e0b7      	b.n	8006af6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a5f      	ldr	r2, [pc, #380]	; (8006b08 <HAL_DMA_Init+0x650>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d072      	beq.n	8006a76 <HAL_DMA_Init+0x5be>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a5d      	ldr	r2, [pc, #372]	; (8006b0c <HAL_DMA_Init+0x654>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d06d      	beq.n	8006a76 <HAL_DMA_Init+0x5be>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a5c      	ldr	r2, [pc, #368]	; (8006b10 <HAL_DMA_Init+0x658>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d068      	beq.n	8006a76 <HAL_DMA_Init+0x5be>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a5a      	ldr	r2, [pc, #360]	; (8006b14 <HAL_DMA_Init+0x65c>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d063      	beq.n	8006a76 <HAL_DMA_Init+0x5be>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a59      	ldr	r2, [pc, #356]	; (8006b18 <HAL_DMA_Init+0x660>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d05e      	beq.n	8006a76 <HAL_DMA_Init+0x5be>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a57      	ldr	r2, [pc, #348]	; (8006b1c <HAL_DMA_Init+0x664>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d059      	beq.n	8006a76 <HAL_DMA_Init+0x5be>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a56      	ldr	r2, [pc, #344]	; (8006b20 <HAL_DMA_Init+0x668>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d054      	beq.n	8006a76 <HAL_DMA_Init+0x5be>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a54      	ldr	r2, [pc, #336]	; (8006b24 <HAL_DMA_Init+0x66c>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d04f      	beq.n	8006a76 <HAL_DMA_Init+0x5be>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a53      	ldr	r2, [pc, #332]	; (8006b28 <HAL_DMA_Init+0x670>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d04a      	beq.n	8006a76 <HAL_DMA_Init+0x5be>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a51      	ldr	r2, [pc, #324]	; (8006b2c <HAL_DMA_Init+0x674>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d045      	beq.n	8006a76 <HAL_DMA_Init+0x5be>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a50      	ldr	r2, [pc, #320]	; (8006b30 <HAL_DMA_Init+0x678>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d040      	beq.n	8006a76 <HAL_DMA_Init+0x5be>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a4e      	ldr	r2, [pc, #312]	; (8006b34 <HAL_DMA_Init+0x67c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d03b      	beq.n	8006a76 <HAL_DMA_Init+0x5be>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a4d      	ldr	r2, [pc, #308]	; (8006b38 <HAL_DMA_Init+0x680>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d036      	beq.n	8006a76 <HAL_DMA_Init+0x5be>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a4b      	ldr	r2, [pc, #300]	; (8006b3c <HAL_DMA_Init+0x684>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d031      	beq.n	8006a76 <HAL_DMA_Init+0x5be>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a4a      	ldr	r2, [pc, #296]	; (8006b40 <HAL_DMA_Init+0x688>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d02c      	beq.n	8006a76 <HAL_DMA_Init+0x5be>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a48      	ldr	r2, [pc, #288]	; (8006b44 <HAL_DMA_Init+0x68c>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d027      	beq.n	8006a76 <HAL_DMA_Init+0x5be>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a47      	ldr	r2, [pc, #284]	; (8006b48 <HAL_DMA_Init+0x690>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d022      	beq.n	8006a76 <HAL_DMA_Init+0x5be>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a45      	ldr	r2, [pc, #276]	; (8006b4c <HAL_DMA_Init+0x694>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d01d      	beq.n	8006a76 <HAL_DMA_Init+0x5be>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a44      	ldr	r2, [pc, #272]	; (8006b50 <HAL_DMA_Init+0x698>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d018      	beq.n	8006a76 <HAL_DMA_Init+0x5be>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a42      	ldr	r2, [pc, #264]	; (8006b54 <HAL_DMA_Init+0x69c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d013      	beq.n	8006a76 <HAL_DMA_Init+0x5be>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a41      	ldr	r2, [pc, #260]	; (8006b58 <HAL_DMA_Init+0x6a0>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d00e      	beq.n	8006a76 <HAL_DMA_Init+0x5be>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a3f      	ldr	r2, [pc, #252]	; (8006b5c <HAL_DMA_Init+0x6a4>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d009      	beq.n	8006a76 <HAL_DMA_Init+0x5be>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a3e      	ldr	r2, [pc, #248]	; (8006b60 <HAL_DMA_Init+0x6a8>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d004      	beq.n	8006a76 <HAL_DMA_Init+0x5be>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a3c      	ldr	r2, [pc, #240]	; (8006b64 <HAL_DMA_Init+0x6ac>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d101      	bne.n	8006a7a <HAL_DMA_Init+0x5c2>
 8006a76:	2301      	movs	r3, #1
 8006a78:	e000      	b.n	8006a7c <HAL_DMA_Init+0x5c4>
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d032      	beq.n	8006ae6 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f001 fcdf 	bl	8008444 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	2b80      	cmp	r3, #128	; 0x80
 8006a8c:	d102      	bne.n	8006a94 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685a      	ldr	r2, [r3, #4]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a9c:	b2d2      	uxtb	r2, r2
 8006a9e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006aa8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d010      	beq.n	8006ad4 <HAL_DMA_Init+0x61c>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	2b08      	cmp	r3, #8
 8006ab8:	d80c      	bhi.n	8006ad4 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f001 fd5c 	bl	8008578 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006ad0:	605a      	str	r2, [r3, #4]
 8006ad2:	e008      	b.n	8006ae6 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3718      	adds	r7, #24
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	a7fdabf8 	.word	0xa7fdabf8
 8006b04:	cccccccd 	.word	0xcccccccd
 8006b08:	40020010 	.word	0x40020010
 8006b0c:	40020028 	.word	0x40020028
 8006b10:	40020040 	.word	0x40020040
 8006b14:	40020058 	.word	0x40020058
 8006b18:	40020070 	.word	0x40020070
 8006b1c:	40020088 	.word	0x40020088
 8006b20:	400200a0 	.word	0x400200a0
 8006b24:	400200b8 	.word	0x400200b8
 8006b28:	40020410 	.word	0x40020410
 8006b2c:	40020428 	.word	0x40020428
 8006b30:	40020440 	.word	0x40020440
 8006b34:	40020458 	.word	0x40020458
 8006b38:	40020470 	.word	0x40020470
 8006b3c:	40020488 	.word	0x40020488
 8006b40:	400204a0 	.word	0x400204a0
 8006b44:	400204b8 	.word	0x400204b8
 8006b48:	58025408 	.word	0x58025408
 8006b4c:	5802541c 	.word	0x5802541c
 8006b50:	58025430 	.word	0x58025430
 8006b54:	58025444 	.word	0x58025444
 8006b58:	58025458 	.word	0x58025458
 8006b5c:	5802546c 	.word	0x5802546c
 8006b60:	58025480 	.word	0x58025480
 8006b64:	58025494 	.word	0x58025494

08006b68 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
 8006b74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b76:	2300      	movs	r3, #0
 8006b78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d101      	bne.n	8006b84 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e226      	b.n	8006fd2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d101      	bne.n	8006b92 <HAL_DMA_Start_IT+0x2a>
 8006b8e:	2302      	movs	r3, #2
 8006b90:	e21f      	b.n	8006fd2 <HAL_DMA_Start_IT+0x46a>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	f040 820a 	bne.w	8006fbc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2202      	movs	r2, #2
 8006bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a68      	ldr	r2, [pc, #416]	; (8006d5c <HAL_DMA_Start_IT+0x1f4>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d04a      	beq.n	8006c56 <HAL_DMA_Start_IT+0xee>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a66      	ldr	r2, [pc, #408]	; (8006d60 <HAL_DMA_Start_IT+0x1f8>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d045      	beq.n	8006c56 <HAL_DMA_Start_IT+0xee>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a65      	ldr	r2, [pc, #404]	; (8006d64 <HAL_DMA_Start_IT+0x1fc>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d040      	beq.n	8006c56 <HAL_DMA_Start_IT+0xee>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a63      	ldr	r2, [pc, #396]	; (8006d68 <HAL_DMA_Start_IT+0x200>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d03b      	beq.n	8006c56 <HAL_DMA_Start_IT+0xee>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a62      	ldr	r2, [pc, #392]	; (8006d6c <HAL_DMA_Start_IT+0x204>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d036      	beq.n	8006c56 <HAL_DMA_Start_IT+0xee>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a60      	ldr	r2, [pc, #384]	; (8006d70 <HAL_DMA_Start_IT+0x208>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d031      	beq.n	8006c56 <HAL_DMA_Start_IT+0xee>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a5f      	ldr	r2, [pc, #380]	; (8006d74 <HAL_DMA_Start_IT+0x20c>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d02c      	beq.n	8006c56 <HAL_DMA_Start_IT+0xee>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a5d      	ldr	r2, [pc, #372]	; (8006d78 <HAL_DMA_Start_IT+0x210>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d027      	beq.n	8006c56 <HAL_DMA_Start_IT+0xee>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a5c      	ldr	r2, [pc, #368]	; (8006d7c <HAL_DMA_Start_IT+0x214>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d022      	beq.n	8006c56 <HAL_DMA_Start_IT+0xee>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a5a      	ldr	r2, [pc, #360]	; (8006d80 <HAL_DMA_Start_IT+0x218>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d01d      	beq.n	8006c56 <HAL_DMA_Start_IT+0xee>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a59      	ldr	r2, [pc, #356]	; (8006d84 <HAL_DMA_Start_IT+0x21c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d018      	beq.n	8006c56 <HAL_DMA_Start_IT+0xee>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a57      	ldr	r2, [pc, #348]	; (8006d88 <HAL_DMA_Start_IT+0x220>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d013      	beq.n	8006c56 <HAL_DMA_Start_IT+0xee>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a56      	ldr	r2, [pc, #344]	; (8006d8c <HAL_DMA_Start_IT+0x224>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d00e      	beq.n	8006c56 <HAL_DMA_Start_IT+0xee>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a54      	ldr	r2, [pc, #336]	; (8006d90 <HAL_DMA_Start_IT+0x228>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d009      	beq.n	8006c56 <HAL_DMA_Start_IT+0xee>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a53      	ldr	r2, [pc, #332]	; (8006d94 <HAL_DMA_Start_IT+0x22c>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d004      	beq.n	8006c56 <HAL_DMA_Start_IT+0xee>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a51      	ldr	r2, [pc, #324]	; (8006d98 <HAL_DMA_Start_IT+0x230>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d108      	bne.n	8006c68 <HAL_DMA_Start_IT+0x100>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 0201 	bic.w	r2, r2, #1
 8006c64:	601a      	str	r2, [r3, #0]
 8006c66:	e007      	b.n	8006c78 <HAL_DMA_Start_IT+0x110>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f022 0201 	bic.w	r2, r2, #1
 8006c76:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	68b9      	ldr	r1, [r7, #8]
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f001 f906 	bl	8007e90 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a34      	ldr	r2, [pc, #208]	; (8006d5c <HAL_DMA_Start_IT+0x1f4>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d04a      	beq.n	8006d24 <HAL_DMA_Start_IT+0x1bc>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a33      	ldr	r2, [pc, #204]	; (8006d60 <HAL_DMA_Start_IT+0x1f8>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d045      	beq.n	8006d24 <HAL_DMA_Start_IT+0x1bc>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a31      	ldr	r2, [pc, #196]	; (8006d64 <HAL_DMA_Start_IT+0x1fc>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d040      	beq.n	8006d24 <HAL_DMA_Start_IT+0x1bc>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a30      	ldr	r2, [pc, #192]	; (8006d68 <HAL_DMA_Start_IT+0x200>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d03b      	beq.n	8006d24 <HAL_DMA_Start_IT+0x1bc>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a2e      	ldr	r2, [pc, #184]	; (8006d6c <HAL_DMA_Start_IT+0x204>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d036      	beq.n	8006d24 <HAL_DMA_Start_IT+0x1bc>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a2d      	ldr	r2, [pc, #180]	; (8006d70 <HAL_DMA_Start_IT+0x208>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d031      	beq.n	8006d24 <HAL_DMA_Start_IT+0x1bc>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a2b      	ldr	r2, [pc, #172]	; (8006d74 <HAL_DMA_Start_IT+0x20c>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d02c      	beq.n	8006d24 <HAL_DMA_Start_IT+0x1bc>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a2a      	ldr	r2, [pc, #168]	; (8006d78 <HAL_DMA_Start_IT+0x210>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d027      	beq.n	8006d24 <HAL_DMA_Start_IT+0x1bc>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a28      	ldr	r2, [pc, #160]	; (8006d7c <HAL_DMA_Start_IT+0x214>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d022      	beq.n	8006d24 <HAL_DMA_Start_IT+0x1bc>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a27      	ldr	r2, [pc, #156]	; (8006d80 <HAL_DMA_Start_IT+0x218>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d01d      	beq.n	8006d24 <HAL_DMA_Start_IT+0x1bc>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a25      	ldr	r2, [pc, #148]	; (8006d84 <HAL_DMA_Start_IT+0x21c>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d018      	beq.n	8006d24 <HAL_DMA_Start_IT+0x1bc>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a24      	ldr	r2, [pc, #144]	; (8006d88 <HAL_DMA_Start_IT+0x220>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d013      	beq.n	8006d24 <HAL_DMA_Start_IT+0x1bc>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a22      	ldr	r2, [pc, #136]	; (8006d8c <HAL_DMA_Start_IT+0x224>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d00e      	beq.n	8006d24 <HAL_DMA_Start_IT+0x1bc>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a21      	ldr	r2, [pc, #132]	; (8006d90 <HAL_DMA_Start_IT+0x228>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d009      	beq.n	8006d24 <HAL_DMA_Start_IT+0x1bc>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a1f      	ldr	r2, [pc, #124]	; (8006d94 <HAL_DMA_Start_IT+0x22c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d004      	beq.n	8006d24 <HAL_DMA_Start_IT+0x1bc>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a1e      	ldr	r2, [pc, #120]	; (8006d98 <HAL_DMA_Start_IT+0x230>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d101      	bne.n	8006d28 <HAL_DMA_Start_IT+0x1c0>
 8006d24:	2301      	movs	r3, #1
 8006d26:	e000      	b.n	8006d2a <HAL_DMA_Start_IT+0x1c2>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d036      	beq.n	8006d9c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f023 021e 	bic.w	r2, r3, #30
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f042 0216 	orr.w	r2, r2, #22
 8006d40:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d03e      	beq.n	8006dc8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f042 0208 	orr.w	r2, r2, #8
 8006d58:	601a      	str	r2, [r3, #0]
 8006d5a:	e035      	b.n	8006dc8 <HAL_DMA_Start_IT+0x260>
 8006d5c:	40020010 	.word	0x40020010
 8006d60:	40020028 	.word	0x40020028
 8006d64:	40020040 	.word	0x40020040
 8006d68:	40020058 	.word	0x40020058
 8006d6c:	40020070 	.word	0x40020070
 8006d70:	40020088 	.word	0x40020088
 8006d74:	400200a0 	.word	0x400200a0
 8006d78:	400200b8 	.word	0x400200b8
 8006d7c:	40020410 	.word	0x40020410
 8006d80:	40020428 	.word	0x40020428
 8006d84:	40020440 	.word	0x40020440
 8006d88:	40020458 	.word	0x40020458
 8006d8c:	40020470 	.word	0x40020470
 8006d90:	40020488 	.word	0x40020488
 8006d94:	400204a0 	.word	0x400204a0
 8006d98:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f023 020e 	bic.w	r2, r3, #14
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f042 020a 	orr.w	r2, r2, #10
 8006dae:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d007      	beq.n	8006dc8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f042 0204 	orr.w	r2, r2, #4
 8006dc6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a83      	ldr	r2, [pc, #524]	; (8006fdc <HAL_DMA_Start_IT+0x474>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d072      	beq.n	8006eb8 <HAL_DMA_Start_IT+0x350>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a82      	ldr	r2, [pc, #520]	; (8006fe0 <HAL_DMA_Start_IT+0x478>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d06d      	beq.n	8006eb8 <HAL_DMA_Start_IT+0x350>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a80      	ldr	r2, [pc, #512]	; (8006fe4 <HAL_DMA_Start_IT+0x47c>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d068      	beq.n	8006eb8 <HAL_DMA_Start_IT+0x350>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a7f      	ldr	r2, [pc, #508]	; (8006fe8 <HAL_DMA_Start_IT+0x480>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d063      	beq.n	8006eb8 <HAL_DMA_Start_IT+0x350>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a7d      	ldr	r2, [pc, #500]	; (8006fec <HAL_DMA_Start_IT+0x484>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d05e      	beq.n	8006eb8 <HAL_DMA_Start_IT+0x350>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a7c      	ldr	r2, [pc, #496]	; (8006ff0 <HAL_DMA_Start_IT+0x488>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d059      	beq.n	8006eb8 <HAL_DMA_Start_IT+0x350>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a7a      	ldr	r2, [pc, #488]	; (8006ff4 <HAL_DMA_Start_IT+0x48c>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d054      	beq.n	8006eb8 <HAL_DMA_Start_IT+0x350>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a79      	ldr	r2, [pc, #484]	; (8006ff8 <HAL_DMA_Start_IT+0x490>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d04f      	beq.n	8006eb8 <HAL_DMA_Start_IT+0x350>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a77      	ldr	r2, [pc, #476]	; (8006ffc <HAL_DMA_Start_IT+0x494>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d04a      	beq.n	8006eb8 <HAL_DMA_Start_IT+0x350>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a76      	ldr	r2, [pc, #472]	; (8007000 <HAL_DMA_Start_IT+0x498>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d045      	beq.n	8006eb8 <HAL_DMA_Start_IT+0x350>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a74      	ldr	r2, [pc, #464]	; (8007004 <HAL_DMA_Start_IT+0x49c>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d040      	beq.n	8006eb8 <HAL_DMA_Start_IT+0x350>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a73      	ldr	r2, [pc, #460]	; (8007008 <HAL_DMA_Start_IT+0x4a0>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d03b      	beq.n	8006eb8 <HAL_DMA_Start_IT+0x350>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a71      	ldr	r2, [pc, #452]	; (800700c <HAL_DMA_Start_IT+0x4a4>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d036      	beq.n	8006eb8 <HAL_DMA_Start_IT+0x350>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a70      	ldr	r2, [pc, #448]	; (8007010 <HAL_DMA_Start_IT+0x4a8>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d031      	beq.n	8006eb8 <HAL_DMA_Start_IT+0x350>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a6e      	ldr	r2, [pc, #440]	; (8007014 <HAL_DMA_Start_IT+0x4ac>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d02c      	beq.n	8006eb8 <HAL_DMA_Start_IT+0x350>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a6d      	ldr	r2, [pc, #436]	; (8007018 <HAL_DMA_Start_IT+0x4b0>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d027      	beq.n	8006eb8 <HAL_DMA_Start_IT+0x350>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a6b      	ldr	r2, [pc, #428]	; (800701c <HAL_DMA_Start_IT+0x4b4>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d022      	beq.n	8006eb8 <HAL_DMA_Start_IT+0x350>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a6a      	ldr	r2, [pc, #424]	; (8007020 <HAL_DMA_Start_IT+0x4b8>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d01d      	beq.n	8006eb8 <HAL_DMA_Start_IT+0x350>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a68      	ldr	r2, [pc, #416]	; (8007024 <HAL_DMA_Start_IT+0x4bc>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d018      	beq.n	8006eb8 <HAL_DMA_Start_IT+0x350>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a67      	ldr	r2, [pc, #412]	; (8007028 <HAL_DMA_Start_IT+0x4c0>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d013      	beq.n	8006eb8 <HAL_DMA_Start_IT+0x350>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a65      	ldr	r2, [pc, #404]	; (800702c <HAL_DMA_Start_IT+0x4c4>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d00e      	beq.n	8006eb8 <HAL_DMA_Start_IT+0x350>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a64      	ldr	r2, [pc, #400]	; (8007030 <HAL_DMA_Start_IT+0x4c8>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d009      	beq.n	8006eb8 <HAL_DMA_Start_IT+0x350>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a62      	ldr	r2, [pc, #392]	; (8007034 <HAL_DMA_Start_IT+0x4cc>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d004      	beq.n	8006eb8 <HAL_DMA_Start_IT+0x350>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a61      	ldr	r2, [pc, #388]	; (8007038 <HAL_DMA_Start_IT+0x4d0>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d101      	bne.n	8006ebc <HAL_DMA_Start_IT+0x354>
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e000      	b.n	8006ebe <HAL_DMA_Start_IT+0x356>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d01a      	beq.n	8006ef8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d007      	beq.n	8006ee0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ede:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d007      	beq.n	8006ef8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ef2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ef6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a37      	ldr	r2, [pc, #220]	; (8006fdc <HAL_DMA_Start_IT+0x474>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d04a      	beq.n	8006f98 <HAL_DMA_Start_IT+0x430>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a36      	ldr	r2, [pc, #216]	; (8006fe0 <HAL_DMA_Start_IT+0x478>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d045      	beq.n	8006f98 <HAL_DMA_Start_IT+0x430>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a34      	ldr	r2, [pc, #208]	; (8006fe4 <HAL_DMA_Start_IT+0x47c>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d040      	beq.n	8006f98 <HAL_DMA_Start_IT+0x430>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a33      	ldr	r2, [pc, #204]	; (8006fe8 <HAL_DMA_Start_IT+0x480>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d03b      	beq.n	8006f98 <HAL_DMA_Start_IT+0x430>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a31      	ldr	r2, [pc, #196]	; (8006fec <HAL_DMA_Start_IT+0x484>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d036      	beq.n	8006f98 <HAL_DMA_Start_IT+0x430>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a30      	ldr	r2, [pc, #192]	; (8006ff0 <HAL_DMA_Start_IT+0x488>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d031      	beq.n	8006f98 <HAL_DMA_Start_IT+0x430>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a2e      	ldr	r2, [pc, #184]	; (8006ff4 <HAL_DMA_Start_IT+0x48c>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d02c      	beq.n	8006f98 <HAL_DMA_Start_IT+0x430>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a2d      	ldr	r2, [pc, #180]	; (8006ff8 <HAL_DMA_Start_IT+0x490>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d027      	beq.n	8006f98 <HAL_DMA_Start_IT+0x430>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a2b      	ldr	r2, [pc, #172]	; (8006ffc <HAL_DMA_Start_IT+0x494>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d022      	beq.n	8006f98 <HAL_DMA_Start_IT+0x430>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a2a      	ldr	r2, [pc, #168]	; (8007000 <HAL_DMA_Start_IT+0x498>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d01d      	beq.n	8006f98 <HAL_DMA_Start_IT+0x430>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a28      	ldr	r2, [pc, #160]	; (8007004 <HAL_DMA_Start_IT+0x49c>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d018      	beq.n	8006f98 <HAL_DMA_Start_IT+0x430>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a27      	ldr	r2, [pc, #156]	; (8007008 <HAL_DMA_Start_IT+0x4a0>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d013      	beq.n	8006f98 <HAL_DMA_Start_IT+0x430>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a25      	ldr	r2, [pc, #148]	; (800700c <HAL_DMA_Start_IT+0x4a4>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d00e      	beq.n	8006f98 <HAL_DMA_Start_IT+0x430>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a24      	ldr	r2, [pc, #144]	; (8007010 <HAL_DMA_Start_IT+0x4a8>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d009      	beq.n	8006f98 <HAL_DMA_Start_IT+0x430>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a22      	ldr	r2, [pc, #136]	; (8007014 <HAL_DMA_Start_IT+0x4ac>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d004      	beq.n	8006f98 <HAL_DMA_Start_IT+0x430>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a21      	ldr	r2, [pc, #132]	; (8007018 <HAL_DMA_Start_IT+0x4b0>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d108      	bne.n	8006faa <HAL_DMA_Start_IT+0x442>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f042 0201 	orr.w	r2, r2, #1
 8006fa6:	601a      	str	r2, [r3, #0]
 8006fa8:	e012      	b.n	8006fd0 <HAL_DMA_Start_IT+0x468>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f042 0201 	orr.w	r2, r2, #1
 8006fb8:	601a      	str	r2, [r3, #0]
 8006fba:	e009      	b.n	8006fd0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fc2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3718      	adds	r7, #24
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	40020010 	.word	0x40020010
 8006fe0:	40020028 	.word	0x40020028
 8006fe4:	40020040 	.word	0x40020040
 8006fe8:	40020058 	.word	0x40020058
 8006fec:	40020070 	.word	0x40020070
 8006ff0:	40020088 	.word	0x40020088
 8006ff4:	400200a0 	.word	0x400200a0
 8006ff8:	400200b8 	.word	0x400200b8
 8006ffc:	40020410 	.word	0x40020410
 8007000:	40020428 	.word	0x40020428
 8007004:	40020440 	.word	0x40020440
 8007008:	40020458 	.word	0x40020458
 800700c:	40020470 	.word	0x40020470
 8007010:	40020488 	.word	0x40020488
 8007014:	400204a0 	.word	0x400204a0
 8007018:	400204b8 	.word	0x400204b8
 800701c:	58025408 	.word	0x58025408
 8007020:	5802541c 	.word	0x5802541c
 8007024:	58025430 	.word	0x58025430
 8007028:	58025444 	.word	0x58025444
 800702c:	58025458 	.word	0x58025458
 8007030:	5802546c 	.word	0x5802546c
 8007034:	58025480 	.word	0x58025480
 8007038:	58025494 	.word	0x58025494

0800703c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b08a      	sub	sp, #40	; 0x28
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007044:	2300      	movs	r3, #0
 8007046:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007048:	4b67      	ldr	r3, [pc, #412]	; (80071e8 <HAL_DMA_IRQHandler+0x1ac>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a67      	ldr	r2, [pc, #412]	; (80071ec <HAL_DMA_IRQHandler+0x1b0>)
 800704e:	fba2 2303 	umull	r2, r3, r2, r3
 8007052:	0a9b      	lsrs	r3, r3, #10
 8007054:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800705a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007060:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007062:	6a3b      	ldr	r3, [r7, #32]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a5f      	ldr	r2, [pc, #380]	; (80071f0 <HAL_DMA_IRQHandler+0x1b4>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d04a      	beq.n	800710e <HAL_DMA_IRQHandler+0xd2>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a5d      	ldr	r2, [pc, #372]	; (80071f4 <HAL_DMA_IRQHandler+0x1b8>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d045      	beq.n	800710e <HAL_DMA_IRQHandler+0xd2>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a5c      	ldr	r2, [pc, #368]	; (80071f8 <HAL_DMA_IRQHandler+0x1bc>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d040      	beq.n	800710e <HAL_DMA_IRQHandler+0xd2>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a5a      	ldr	r2, [pc, #360]	; (80071fc <HAL_DMA_IRQHandler+0x1c0>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d03b      	beq.n	800710e <HAL_DMA_IRQHandler+0xd2>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a59      	ldr	r2, [pc, #356]	; (8007200 <HAL_DMA_IRQHandler+0x1c4>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d036      	beq.n	800710e <HAL_DMA_IRQHandler+0xd2>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a57      	ldr	r2, [pc, #348]	; (8007204 <HAL_DMA_IRQHandler+0x1c8>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d031      	beq.n	800710e <HAL_DMA_IRQHandler+0xd2>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a56      	ldr	r2, [pc, #344]	; (8007208 <HAL_DMA_IRQHandler+0x1cc>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d02c      	beq.n	800710e <HAL_DMA_IRQHandler+0xd2>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a54      	ldr	r2, [pc, #336]	; (800720c <HAL_DMA_IRQHandler+0x1d0>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d027      	beq.n	800710e <HAL_DMA_IRQHandler+0xd2>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a53      	ldr	r2, [pc, #332]	; (8007210 <HAL_DMA_IRQHandler+0x1d4>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d022      	beq.n	800710e <HAL_DMA_IRQHandler+0xd2>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a51      	ldr	r2, [pc, #324]	; (8007214 <HAL_DMA_IRQHandler+0x1d8>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d01d      	beq.n	800710e <HAL_DMA_IRQHandler+0xd2>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a50      	ldr	r2, [pc, #320]	; (8007218 <HAL_DMA_IRQHandler+0x1dc>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d018      	beq.n	800710e <HAL_DMA_IRQHandler+0xd2>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a4e      	ldr	r2, [pc, #312]	; (800721c <HAL_DMA_IRQHandler+0x1e0>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d013      	beq.n	800710e <HAL_DMA_IRQHandler+0xd2>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a4d      	ldr	r2, [pc, #308]	; (8007220 <HAL_DMA_IRQHandler+0x1e4>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d00e      	beq.n	800710e <HAL_DMA_IRQHandler+0xd2>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a4b      	ldr	r2, [pc, #300]	; (8007224 <HAL_DMA_IRQHandler+0x1e8>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d009      	beq.n	800710e <HAL_DMA_IRQHandler+0xd2>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a4a      	ldr	r2, [pc, #296]	; (8007228 <HAL_DMA_IRQHandler+0x1ec>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d004      	beq.n	800710e <HAL_DMA_IRQHandler+0xd2>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a48      	ldr	r2, [pc, #288]	; (800722c <HAL_DMA_IRQHandler+0x1f0>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d101      	bne.n	8007112 <HAL_DMA_IRQHandler+0xd6>
 800710e:	2301      	movs	r3, #1
 8007110:	e000      	b.n	8007114 <HAL_DMA_IRQHandler+0xd8>
 8007112:	2300      	movs	r3, #0
 8007114:	2b00      	cmp	r3, #0
 8007116:	f000 842b 	beq.w	8007970 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800711e:	f003 031f 	and.w	r3, r3, #31
 8007122:	2208      	movs	r2, #8
 8007124:	409a      	lsls	r2, r3
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	4013      	ands	r3, r2
 800712a:	2b00      	cmp	r3, #0
 800712c:	f000 80a2 	beq.w	8007274 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a2e      	ldr	r2, [pc, #184]	; (80071f0 <HAL_DMA_IRQHandler+0x1b4>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d04a      	beq.n	80071d0 <HAL_DMA_IRQHandler+0x194>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a2d      	ldr	r2, [pc, #180]	; (80071f4 <HAL_DMA_IRQHandler+0x1b8>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d045      	beq.n	80071d0 <HAL_DMA_IRQHandler+0x194>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a2b      	ldr	r2, [pc, #172]	; (80071f8 <HAL_DMA_IRQHandler+0x1bc>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d040      	beq.n	80071d0 <HAL_DMA_IRQHandler+0x194>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a2a      	ldr	r2, [pc, #168]	; (80071fc <HAL_DMA_IRQHandler+0x1c0>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d03b      	beq.n	80071d0 <HAL_DMA_IRQHandler+0x194>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a28      	ldr	r2, [pc, #160]	; (8007200 <HAL_DMA_IRQHandler+0x1c4>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d036      	beq.n	80071d0 <HAL_DMA_IRQHandler+0x194>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a27      	ldr	r2, [pc, #156]	; (8007204 <HAL_DMA_IRQHandler+0x1c8>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d031      	beq.n	80071d0 <HAL_DMA_IRQHandler+0x194>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a25      	ldr	r2, [pc, #148]	; (8007208 <HAL_DMA_IRQHandler+0x1cc>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d02c      	beq.n	80071d0 <HAL_DMA_IRQHandler+0x194>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a24      	ldr	r2, [pc, #144]	; (800720c <HAL_DMA_IRQHandler+0x1d0>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d027      	beq.n	80071d0 <HAL_DMA_IRQHandler+0x194>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a22      	ldr	r2, [pc, #136]	; (8007210 <HAL_DMA_IRQHandler+0x1d4>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d022      	beq.n	80071d0 <HAL_DMA_IRQHandler+0x194>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a21      	ldr	r2, [pc, #132]	; (8007214 <HAL_DMA_IRQHandler+0x1d8>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d01d      	beq.n	80071d0 <HAL_DMA_IRQHandler+0x194>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a1f      	ldr	r2, [pc, #124]	; (8007218 <HAL_DMA_IRQHandler+0x1dc>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d018      	beq.n	80071d0 <HAL_DMA_IRQHandler+0x194>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a1e      	ldr	r2, [pc, #120]	; (800721c <HAL_DMA_IRQHandler+0x1e0>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d013      	beq.n	80071d0 <HAL_DMA_IRQHandler+0x194>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a1c      	ldr	r2, [pc, #112]	; (8007220 <HAL_DMA_IRQHandler+0x1e4>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d00e      	beq.n	80071d0 <HAL_DMA_IRQHandler+0x194>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a1b      	ldr	r2, [pc, #108]	; (8007224 <HAL_DMA_IRQHandler+0x1e8>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d009      	beq.n	80071d0 <HAL_DMA_IRQHandler+0x194>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a19      	ldr	r2, [pc, #100]	; (8007228 <HAL_DMA_IRQHandler+0x1ec>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d004      	beq.n	80071d0 <HAL_DMA_IRQHandler+0x194>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a18      	ldr	r2, [pc, #96]	; (800722c <HAL_DMA_IRQHandler+0x1f0>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d12f      	bne.n	8007230 <HAL_DMA_IRQHandler+0x1f4>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0304 	and.w	r3, r3, #4
 80071da:	2b00      	cmp	r3, #0
 80071dc:	bf14      	ite	ne
 80071de:	2301      	movne	r3, #1
 80071e0:	2300      	moveq	r3, #0
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	e02e      	b.n	8007244 <HAL_DMA_IRQHandler+0x208>
 80071e6:	bf00      	nop
 80071e8:	24000000 	.word	0x24000000
 80071ec:	1b4e81b5 	.word	0x1b4e81b5
 80071f0:	40020010 	.word	0x40020010
 80071f4:	40020028 	.word	0x40020028
 80071f8:	40020040 	.word	0x40020040
 80071fc:	40020058 	.word	0x40020058
 8007200:	40020070 	.word	0x40020070
 8007204:	40020088 	.word	0x40020088
 8007208:	400200a0 	.word	0x400200a0
 800720c:	400200b8 	.word	0x400200b8
 8007210:	40020410 	.word	0x40020410
 8007214:	40020428 	.word	0x40020428
 8007218:	40020440 	.word	0x40020440
 800721c:	40020458 	.word	0x40020458
 8007220:	40020470 	.word	0x40020470
 8007224:	40020488 	.word	0x40020488
 8007228:	400204a0 	.word	0x400204a0
 800722c:	400204b8 	.word	0x400204b8
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 0308 	and.w	r3, r3, #8
 800723a:	2b00      	cmp	r3, #0
 800723c:	bf14      	ite	ne
 800723e:	2301      	movne	r3, #1
 8007240:	2300      	moveq	r3, #0
 8007242:	b2db      	uxtb	r3, r3
 8007244:	2b00      	cmp	r3, #0
 8007246:	d015      	beq.n	8007274 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f022 0204 	bic.w	r2, r2, #4
 8007256:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800725c:	f003 031f 	and.w	r3, r3, #31
 8007260:	2208      	movs	r2, #8
 8007262:	409a      	lsls	r2, r3
 8007264:	6a3b      	ldr	r3, [r7, #32]
 8007266:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800726c:	f043 0201 	orr.w	r2, r3, #1
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007278:	f003 031f 	and.w	r3, r3, #31
 800727c:	69ba      	ldr	r2, [r7, #24]
 800727e:	fa22 f303 	lsr.w	r3, r2, r3
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	2b00      	cmp	r3, #0
 8007288:	d06e      	beq.n	8007368 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a69      	ldr	r2, [pc, #420]	; (8007434 <HAL_DMA_IRQHandler+0x3f8>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d04a      	beq.n	800732a <HAL_DMA_IRQHandler+0x2ee>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a67      	ldr	r2, [pc, #412]	; (8007438 <HAL_DMA_IRQHandler+0x3fc>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d045      	beq.n	800732a <HAL_DMA_IRQHandler+0x2ee>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a66      	ldr	r2, [pc, #408]	; (800743c <HAL_DMA_IRQHandler+0x400>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d040      	beq.n	800732a <HAL_DMA_IRQHandler+0x2ee>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a64      	ldr	r2, [pc, #400]	; (8007440 <HAL_DMA_IRQHandler+0x404>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d03b      	beq.n	800732a <HAL_DMA_IRQHandler+0x2ee>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a63      	ldr	r2, [pc, #396]	; (8007444 <HAL_DMA_IRQHandler+0x408>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d036      	beq.n	800732a <HAL_DMA_IRQHandler+0x2ee>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a61      	ldr	r2, [pc, #388]	; (8007448 <HAL_DMA_IRQHandler+0x40c>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d031      	beq.n	800732a <HAL_DMA_IRQHandler+0x2ee>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a60      	ldr	r2, [pc, #384]	; (800744c <HAL_DMA_IRQHandler+0x410>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d02c      	beq.n	800732a <HAL_DMA_IRQHandler+0x2ee>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a5e      	ldr	r2, [pc, #376]	; (8007450 <HAL_DMA_IRQHandler+0x414>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d027      	beq.n	800732a <HAL_DMA_IRQHandler+0x2ee>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a5d      	ldr	r2, [pc, #372]	; (8007454 <HAL_DMA_IRQHandler+0x418>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d022      	beq.n	800732a <HAL_DMA_IRQHandler+0x2ee>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a5b      	ldr	r2, [pc, #364]	; (8007458 <HAL_DMA_IRQHandler+0x41c>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d01d      	beq.n	800732a <HAL_DMA_IRQHandler+0x2ee>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a5a      	ldr	r2, [pc, #360]	; (800745c <HAL_DMA_IRQHandler+0x420>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d018      	beq.n	800732a <HAL_DMA_IRQHandler+0x2ee>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a58      	ldr	r2, [pc, #352]	; (8007460 <HAL_DMA_IRQHandler+0x424>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d013      	beq.n	800732a <HAL_DMA_IRQHandler+0x2ee>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a57      	ldr	r2, [pc, #348]	; (8007464 <HAL_DMA_IRQHandler+0x428>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d00e      	beq.n	800732a <HAL_DMA_IRQHandler+0x2ee>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a55      	ldr	r2, [pc, #340]	; (8007468 <HAL_DMA_IRQHandler+0x42c>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d009      	beq.n	800732a <HAL_DMA_IRQHandler+0x2ee>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a54      	ldr	r2, [pc, #336]	; (800746c <HAL_DMA_IRQHandler+0x430>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d004      	beq.n	800732a <HAL_DMA_IRQHandler+0x2ee>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a52      	ldr	r2, [pc, #328]	; (8007470 <HAL_DMA_IRQHandler+0x434>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d10a      	bne.n	8007340 <HAL_DMA_IRQHandler+0x304>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	695b      	ldr	r3, [r3, #20]
 8007330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007334:	2b00      	cmp	r3, #0
 8007336:	bf14      	ite	ne
 8007338:	2301      	movne	r3, #1
 800733a:	2300      	moveq	r3, #0
 800733c:	b2db      	uxtb	r3, r3
 800733e:	e003      	b.n	8007348 <HAL_DMA_IRQHandler+0x30c>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2300      	movs	r3, #0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00d      	beq.n	8007368 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007350:	f003 031f 	and.w	r3, r3, #31
 8007354:	2201      	movs	r2, #1
 8007356:	409a      	lsls	r2, r3
 8007358:	6a3b      	ldr	r3, [r7, #32]
 800735a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007360:	f043 0202 	orr.w	r2, r3, #2
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800736c:	f003 031f 	and.w	r3, r3, #31
 8007370:	2204      	movs	r2, #4
 8007372:	409a      	lsls	r2, r3
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	4013      	ands	r3, r2
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 808f 	beq.w	800749c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a2c      	ldr	r2, [pc, #176]	; (8007434 <HAL_DMA_IRQHandler+0x3f8>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d04a      	beq.n	800741e <HAL_DMA_IRQHandler+0x3e2>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a2a      	ldr	r2, [pc, #168]	; (8007438 <HAL_DMA_IRQHandler+0x3fc>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d045      	beq.n	800741e <HAL_DMA_IRQHandler+0x3e2>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a29      	ldr	r2, [pc, #164]	; (800743c <HAL_DMA_IRQHandler+0x400>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d040      	beq.n	800741e <HAL_DMA_IRQHandler+0x3e2>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a27      	ldr	r2, [pc, #156]	; (8007440 <HAL_DMA_IRQHandler+0x404>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d03b      	beq.n	800741e <HAL_DMA_IRQHandler+0x3e2>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a26      	ldr	r2, [pc, #152]	; (8007444 <HAL_DMA_IRQHandler+0x408>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d036      	beq.n	800741e <HAL_DMA_IRQHandler+0x3e2>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a24      	ldr	r2, [pc, #144]	; (8007448 <HAL_DMA_IRQHandler+0x40c>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d031      	beq.n	800741e <HAL_DMA_IRQHandler+0x3e2>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a23      	ldr	r2, [pc, #140]	; (800744c <HAL_DMA_IRQHandler+0x410>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d02c      	beq.n	800741e <HAL_DMA_IRQHandler+0x3e2>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a21      	ldr	r2, [pc, #132]	; (8007450 <HAL_DMA_IRQHandler+0x414>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d027      	beq.n	800741e <HAL_DMA_IRQHandler+0x3e2>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a20      	ldr	r2, [pc, #128]	; (8007454 <HAL_DMA_IRQHandler+0x418>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d022      	beq.n	800741e <HAL_DMA_IRQHandler+0x3e2>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a1e      	ldr	r2, [pc, #120]	; (8007458 <HAL_DMA_IRQHandler+0x41c>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d01d      	beq.n	800741e <HAL_DMA_IRQHandler+0x3e2>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a1d      	ldr	r2, [pc, #116]	; (800745c <HAL_DMA_IRQHandler+0x420>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d018      	beq.n	800741e <HAL_DMA_IRQHandler+0x3e2>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a1b      	ldr	r2, [pc, #108]	; (8007460 <HAL_DMA_IRQHandler+0x424>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d013      	beq.n	800741e <HAL_DMA_IRQHandler+0x3e2>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a1a      	ldr	r2, [pc, #104]	; (8007464 <HAL_DMA_IRQHandler+0x428>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d00e      	beq.n	800741e <HAL_DMA_IRQHandler+0x3e2>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a18      	ldr	r2, [pc, #96]	; (8007468 <HAL_DMA_IRQHandler+0x42c>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d009      	beq.n	800741e <HAL_DMA_IRQHandler+0x3e2>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a17      	ldr	r2, [pc, #92]	; (800746c <HAL_DMA_IRQHandler+0x430>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d004      	beq.n	800741e <HAL_DMA_IRQHandler+0x3e2>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a15      	ldr	r2, [pc, #84]	; (8007470 <HAL_DMA_IRQHandler+0x434>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d12a      	bne.n	8007474 <HAL_DMA_IRQHandler+0x438>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 0302 	and.w	r3, r3, #2
 8007428:	2b00      	cmp	r3, #0
 800742a:	bf14      	ite	ne
 800742c:	2301      	movne	r3, #1
 800742e:	2300      	moveq	r3, #0
 8007430:	b2db      	uxtb	r3, r3
 8007432:	e023      	b.n	800747c <HAL_DMA_IRQHandler+0x440>
 8007434:	40020010 	.word	0x40020010
 8007438:	40020028 	.word	0x40020028
 800743c:	40020040 	.word	0x40020040
 8007440:	40020058 	.word	0x40020058
 8007444:	40020070 	.word	0x40020070
 8007448:	40020088 	.word	0x40020088
 800744c:	400200a0 	.word	0x400200a0
 8007450:	400200b8 	.word	0x400200b8
 8007454:	40020410 	.word	0x40020410
 8007458:	40020428 	.word	0x40020428
 800745c:	40020440 	.word	0x40020440
 8007460:	40020458 	.word	0x40020458
 8007464:	40020470 	.word	0x40020470
 8007468:	40020488 	.word	0x40020488
 800746c:	400204a0 	.word	0x400204a0
 8007470:	400204b8 	.word	0x400204b8
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2300      	movs	r3, #0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00d      	beq.n	800749c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007484:	f003 031f 	and.w	r3, r3, #31
 8007488:	2204      	movs	r2, #4
 800748a:	409a      	lsls	r2, r3
 800748c:	6a3b      	ldr	r3, [r7, #32]
 800748e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007494:	f043 0204 	orr.w	r2, r3, #4
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074a0:	f003 031f 	and.w	r3, r3, #31
 80074a4:	2210      	movs	r2, #16
 80074a6:	409a      	lsls	r2, r3
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	4013      	ands	r3, r2
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f000 80a6 	beq.w	80075fe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a85      	ldr	r2, [pc, #532]	; (80076cc <HAL_DMA_IRQHandler+0x690>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d04a      	beq.n	8007552 <HAL_DMA_IRQHandler+0x516>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a83      	ldr	r2, [pc, #524]	; (80076d0 <HAL_DMA_IRQHandler+0x694>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d045      	beq.n	8007552 <HAL_DMA_IRQHandler+0x516>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a82      	ldr	r2, [pc, #520]	; (80076d4 <HAL_DMA_IRQHandler+0x698>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d040      	beq.n	8007552 <HAL_DMA_IRQHandler+0x516>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a80      	ldr	r2, [pc, #512]	; (80076d8 <HAL_DMA_IRQHandler+0x69c>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d03b      	beq.n	8007552 <HAL_DMA_IRQHandler+0x516>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a7f      	ldr	r2, [pc, #508]	; (80076dc <HAL_DMA_IRQHandler+0x6a0>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d036      	beq.n	8007552 <HAL_DMA_IRQHandler+0x516>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a7d      	ldr	r2, [pc, #500]	; (80076e0 <HAL_DMA_IRQHandler+0x6a4>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d031      	beq.n	8007552 <HAL_DMA_IRQHandler+0x516>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a7c      	ldr	r2, [pc, #496]	; (80076e4 <HAL_DMA_IRQHandler+0x6a8>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d02c      	beq.n	8007552 <HAL_DMA_IRQHandler+0x516>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a7a      	ldr	r2, [pc, #488]	; (80076e8 <HAL_DMA_IRQHandler+0x6ac>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d027      	beq.n	8007552 <HAL_DMA_IRQHandler+0x516>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a79      	ldr	r2, [pc, #484]	; (80076ec <HAL_DMA_IRQHandler+0x6b0>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d022      	beq.n	8007552 <HAL_DMA_IRQHandler+0x516>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a77      	ldr	r2, [pc, #476]	; (80076f0 <HAL_DMA_IRQHandler+0x6b4>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d01d      	beq.n	8007552 <HAL_DMA_IRQHandler+0x516>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a76      	ldr	r2, [pc, #472]	; (80076f4 <HAL_DMA_IRQHandler+0x6b8>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d018      	beq.n	8007552 <HAL_DMA_IRQHandler+0x516>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a74      	ldr	r2, [pc, #464]	; (80076f8 <HAL_DMA_IRQHandler+0x6bc>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d013      	beq.n	8007552 <HAL_DMA_IRQHandler+0x516>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a73      	ldr	r2, [pc, #460]	; (80076fc <HAL_DMA_IRQHandler+0x6c0>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d00e      	beq.n	8007552 <HAL_DMA_IRQHandler+0x516>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a71      	ldr	r2, [pc, #452]	; (8007700 <HAL_DMA_IRQHandler+0x6c4>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d009      	beq.n	8007552 <HAL_DMA_IRQHandler+0x516>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a70      	ldr	r2, [pc, #448]	; (8007704 <HAL_DMA_IRQHandler+0x6c8>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d004      	beq.n	8007552 <HAL_DMA_IRQHandler+0x516>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a6e      	ldr	r2, [pc, #440]	; (8007708 <HAL_DMA_IRQHandler+0x6cc>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d10a      	bne.n	8007568 <HAL_DMA_IRQHandler+0x52c>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 0308 	and.w	r3, r3, #8
 800755c:	2b00      	cmp	r3, #0
 800755e:	bf14      	ite	ne
 8007560:	2301      	movne	r3, #1
 8007562:	2300      	moveq	r3, #0
 8007564:	b2db      	uxtb	r3, r3
 8007566:	e009      	b.n	800757c <HAL_DMA_IRQHandler+0x540>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 0304 	and.w	r3, r3, #4
 8007572:	2b00      	cmp	r3, #0
 8007574:	bf14      	ite	ne
 8007576:	2301      	movne	r3, #1
 8007578:	2300      	moveq	r3, #0
 800757a:	b2db      	uxtb	r3, r3
 800757c:	2b00      	cmp	r3, #0
 800757e:	d03e      	beq.n	80075fe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007584:	f003 031f 	and.w	r3, r3, #31
 8007588:	2210      	movs	r2, #16
 800758a:	409a      	lsls	r2, r3
 800758c:	6a3b      	ldr	r3, [r7, #32]
 800758e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d018      	beq.n	80075d0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d108      	bne.n	80075be <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d024      	beq.n	80075fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	4798      	blx	r3
 80075bc:	e01f      	b.n	80075fe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d01b      	beq.n	80075fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	4798      	blx	r3
 80075ce:	e016      	b.n	80075fe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d107      	bne.n	80075ee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f022 0208 	bic.w	r2, r2, #8
 80075ec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d003      	beq.n	80075fe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007602:	f003 031f 	and.w	r3, r3, #31
 8007606:	2220      	movs	r2, #32
 8007608:	409a      	lsls	r2, r3
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	4013      	ands	r3, r2
 800760e:	2b00      	cmp	r3, #0
 8007610:	f000 8110 	beq.w	8007834 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a2c      	ldr	r2, [pc, #176]	; (80076cc <HAL_DMA_IRQHandler+0x690>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d04a      	beq.n	80076b4 <HAL_DMA_IRQHandler+0x678>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a2b      	ldr	r2, [pc, #172]	; (80076d0 <HAL_DMA_IRQHandler+0x694>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d045      	beq.n	80076b4 <HAL_DMA_IRQHandler+0x678>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a29      	ldr	r2, [pc, #164]	; (80076d4 <HAL_DMA_IRQHandler+0x698>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d040      	beq.n	80076b4 <HAL_DMA_IRQHandler+0x678>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a28      	ldr	r2, [pc, #160]	; (80076d8 <HAL_DMA_IRQHandler+0x69c>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d03b      	beq.n	80076b4 <HAL_DMA_IRQHandler+0x678>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a26      	ldr	r2, [pc, #152]	; (80076dc <HAL_DMA_IRQHandler+0x6a0>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d036      	beq.n	80076b4 <HAL_DMA_IRQHandler+0x678>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a25      	ldr	r2, [pc, #148]	; (80076e0 <HAL_DMA_IRQHandler+0x6a4>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d031      	beq.n	80076b4 <HAL_DMA_IRQHandler+0x678>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a23      	ldr	r2, [pc, #140]	; (80076e4 <HAL_DMA_IRQHandler+0x6a8>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d02c      	beq.n	80076b4 <HAL_DMA_IRQHandler+0x678>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a22      	ldr	r2, [pc, #136]	; (80076e8 <HAL_DMA_IRQHandler+0x6ac>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d027      	beq.n	80076b4 <HAL_DMA_IRQHandler+0x678>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a20      	ldr	r2, [pc, #128]	; (80076ec <HAL_DMA_IRQHandler+0x6b0>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d022      	beq.n	80076b4 <HAL_DMA_IRQHandler+0x678>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a1f      	ldr	r2, [pc, #124]	; (80076f0 <HAL_DMA_IRQHandler+0x6b4>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d01d      	beq.n	80076b4 <HAL_DMA_IRQHandler+0x678>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a1d      	ldr	r2, [pc, #116]	; (80076f4 <HAL_DMA_IRQHandler+0x6b8>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d018      	beq.n	80076b4 <HAL_DMA_IRQHandler+0x678>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a1c      	ldr	r2, [pc, #112]	; (80076f8 <HAL_DMA_IRQHandler+0x6bc>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d013      	beq.n	80076b4 <HAL_DMA_IRQHandler+0x678>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a1a      	ldr	r2, [pc, #104]	; (80076fc <HAL_DMA_IRQHandler+0x6c0>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d00e      	beq.n	80076b4 <HAL_DMA_IRQHandler+0x678>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a19      	ldr	r2, [pc, #100]	; (8007700 <HAL_DMA_IRQHandler+0x6c4>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d009      	beq.n	80076b4 <HAL_DMA_IRQHandler+0x678>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a17      	ldr	r2, [pc, #92]	; (8007704 <HAL_DMA_IRQHandler+0x6c8>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d004      	beq.n	80076b4 <HAL_DMA_IRQHandler+0x678>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a16      	ldr	r2, [pc, #88]	; (8007708 <HAL_DMA_IRQHandler+0x6cc>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d12b      	bne.n	800770c <HAL_DMA_IRQHandler+0x6d0>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 0310 	and.w	r3, r3, #16
 80076be:	2b00      	cmp	r3, #0
 80076c0:	bf14      	ite	ne
 80076c2:	2301      	movne	r3, #1
 80076c4:	2300      	moveq	r3, #0
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	e02a      	b.n	8007720 <HAL_DMA_IRQHandler+0x6e4>
 80076ca:	bf00      	nop
 80076cc:	40020010 	.word	0x40020010
 80076d0:	40020028 	.word	0x40020028
 80076d4:	40020040 	.word	0x40020040
 80076d8:	40020058 	.word	0x40020058
 80076dc:	40020070 	.word	0x40020070
 80076e0:	40020088 	.word	0x40020088
 80076e4:	400200a0 	.word	0x400200a0
 80076e8:	400200b8 	.word	0x400200b8
 80076ec:	40020410 	.word	0x40020410
 80076f0:	40020428 	.word	0x40020428
 80076f4:	40020440 	.word	0x40020440
 80076f8:	40020458 	.word	0x40020458
 80076fc:	40020470 	.word	0x40020470
 8007700:	40020488 	.word	0x40020488
 8007704:	400204a0 	.word	0x400204a0
 8007708:	400204b8 	.word	0x400204b8
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 0302 	and.w	r3, r3, #2
 8007716:	2b00      	cmp	r3, #0
 8007718:	bf14      	ite	ne
 800771a:	2301      	movne	r3, #1
 800771c:	2300      	moveq	r3, #0
 800771e:	b2db      	uxtb	r3, r3
 8007720:	2b00      	cmp	r3, #0
 8007722:	f000 8087 	beq.w	8007834 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800772a:	f003 031f 	and.w	r3, r3, #31
 800772e:	2220      	movs	r2, #32
 8007730:	409a      	lsls	r2, r3
 8007732:	6a3b      	ldr	r3, [r7, #32]
 8007734:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800773c:	b2db      	uxtb	r3, r3
 800773e:	2b04      	cmp	r3, #4
 8007740:	d139      	bne.n	80077b6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f022 0216 	bic.w	r2, r2, #22
 8007750:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	695a      	ldr	r2, [r3, #20]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007760:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007766:	2b00      	cmp	r3, #0
 8007768:	d103      	bne.n	8007772 <HAL_DMA_IRQHandler+0x736>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800776e:	2b00      	cmp	r3, #0
 8007770:	d007      	beq.n	8007782 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f022 0208 	bic.w	r2, r2, #8
 8007780:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007786:	f003 031f 	and.w	r3, r3, #31
 800778a:	223f      	movs	r2, #63	; 0x3f
 800778c:	409a      	lsls	r2, r3
 800778e:	6a3b      	ldr	r3, [r7, #32]
 8007790:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f000 834a 	beq.w	8007e40 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	4798      	blx	r3
          }
          return;
 80077b4:	e344      	b.n	8007e40 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d018      	beq.n	80077f6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d108      	bne.n	80077e4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d02c      	beq.n	8007834 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	4798      	blx	r3
 80077e2:	e027      	b.n	8007834 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d023      	beq.n	8007834 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	4798      	blx	r3
 80077f4:	e01e      	b.n	8007834 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10f      	bne.n	8007824 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f022 0210 	bic.w	r2, r2, #16
 8007812:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007828:	2b00      	cmp	r3, #0
 800782a:	d003      	beq.n	8007834 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 8306 	beq.w	8007e4a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007842:	f003 0301 	and.w	r3, r3, #1
 8007846:	2b00      	cmp	r3, #0
 8007848:	f000 8088 	beq.w	800795c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2204      	movs	r2, #4
 8007850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a7a      	ldr	r2, [pc, #488]	; (8007a44 <HAL_DMA_IRQHandler+0xa08>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d04a      	beq.n	80078f4 <HAL_DMA_IRQHandler+0x8b8>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a79      	ldr	r2, [pc, #484]	; (8007a48 <HAL_DMA_IRQHandler+0xa0c>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d045      	beq.n	80078f4 <HAL_DMA_IRQHandler+0x8b8>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a77      	ldr	r2, [pc, #476]	; (8007a4c <HAL_DMA_IRQHandler+0xa10>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d040      	beq.n	80078f4 <HAL_DMA_IRQHandler+0x8b8>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a76      	ldr	r2, [pc, #472]	; (8007a50 <HAL_DMA_IRQHandler+0xa14>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d03b      	beq.n	80078f4 <HAL_DMA_IRQHandler+0x8b8>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a74      	ldr	r2, [pc, #464]	; (8007a54 <HAL_DMA_IRQHandler+0xa18>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d036      	beq.n	80078f4 <HAL_DMA_IRQHandler+0x8b8>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a73      	ldr	r2, [pc, #460]	; (8007a58 <HAL_DMA_IRQHandler+0xa1c>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d031      	beq.n	80078f4 <HAL_DMA_IRQHandler+0x8b8>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a71      	ldr	r2, [pc, #452]	; (8007a5c <HAL_DMA_IRQHandler+0xa20>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d02c      	beq.n	80078f4 <HAL_DMA_IRQHandler+0x8b8>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a70      	ldr	r2, [pc, #448]	; (8007a60 <HAL_DMA_IRQHandler+0xa24>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d027      	beq.n	80078f4 <HAL_DMA_IRQHandler+0x8b8>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a6e      	ldr	r2, [pc, #440]	; (8007a64 <HAL_DMA_IRQHandler+0xa28>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d022      	beq.n	80078f4 <HAL_DMA_IRQHandler+0x8b8>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a6d      	ldr	r2, [pc, #436]	; (8007a68 <HAL_DMA_IRQHandler+0xa2c>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d01d      	beq.n	80078f4 <HAL_DMA_IRQHandler+0x8b8>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a6b      	ldr	r2, [pc, #428]	; (8007a6c <HAL_DMA_IRQHandler+0xa30>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d018      	beq.n	80078f4 <HAL_DMA_IRQHandler+0x8b8>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a6a      	ldr	r2, [pc, #424]	; (8007a70 <HAL_DMA_IRQHandler+0xa34>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d013      	beq.n	80078f4 <HAL_DMA_IRQHandler+0x8b8>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a68      	ldr	r2, [pc, #416]	; (8007a74 <HAL_DMA_IRQHandler+0xa38>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d00e      	beq.n	80078f4 <HAL_DMA_IRQHandler+0x8b8>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a67      	ldr	r2, [pc, #412]	; (8007a78 <HAL_DMA_IRQHandler+0xa3c>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d009      	beq.n	80078f4 <HAL_DMA_IRQHandler+0x8b8>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a65      	ldr	r2, [pc, #404]	; (8007a7c <HAL_DMA_IRQHandler+0xa40>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d004      	beq.n	80078f4 <HAL_DMA_IRQHandler+0x8b8>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a64      	ldr	r2, [pc, #400]	; (8007a80 <HAL_DMA_IRQHandler+0xa44>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d108      	bne.n	8007906 <HAL_DMA_IRQHandler+0x8ca>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f022 0201 	bic.w	r2, r2, #1
 8007902:	601a      	str	r2, [r3, #0]
 8007904:	e007      	b.n	8007916 <HAL_DMA_IRQHandler+0x8da>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f022 0201 	bic.w	r2, r2, #1
 8007914:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	3301      	adds	r3, #1
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800791e:	429a      	cmp	r2, r3
 8007920:	d307      	bcc.n	8007932 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 0301 	and.w	r3, r3, #1
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1f2      	bne.n	8007916 <HAL_DMA_IRQHandler+0x8da>
 8007930:	e000      	b.n	8007934 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007932:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 0301 	and.w	r3, r3, #1
 800793e:	2b00      	cmp	r3, #0
 8007940:	d004      	beq.n	800794c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2203      	movs	r2, #3
 8007946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800794a:	e003      	b.n	8007954 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007960:	2b00      	cmp	r3, #0
 8007962:	f000 8272 	beq.w	8007e4a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	4798      	blx	r3
 800796e:	e26c      	b.n	8007e4a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a43      	ldr	r2, [pc, #268]	; (8007a84 <HAL_DMA_IRQHandler+0xa48>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d022      	beq.n	80079c0 <HAL_DMA_IRQHandler+0x984>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a42      	ldr	r2, [pc, #264]	; (8007a88 <HAL_DMA_IRQHandler+0xa4c>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d01d      	beq.n	80079c0 <HAL_DMA_IRQHandler+0x984>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a40      	ldr	r2, [pc, #256]	; (8007a8c <HAL_DMA_IRQHandler+0xa50>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d018      	beq.n	80079c0 <HAL_DMA_IRQHandler+0x984>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a3f      	ldr	r2, [pc, #252]	; (8007a90 <HAL_DMA_IRQHandler+0xa54>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d013      	beq.n	80079c0 <HAL_DMA_IRQHandler+0x984>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a3d      	ldr	r2, [pc, #244]	; (8007a94 <HAL_DMA_IRQHandler+0xa58>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d00e      	beq.n	80079c0 <HAL_DMA_IRQHandler+0x984>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a3c      	ldr	r2, [pc, #240]	; (8007a98 <HAL_DMA_IRQHandler+0xa5c>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d009      	beq.n	80079c0 <HAL_DMA_IRQHandler+0x984>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a3a      	ldr	r2, [pc, #232]	; (8007a9c <HAL_DMA_IRQHandler+0xa60>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d004      	beq.n	80079c0 <HAL_DMA_IRQHandler+0x984>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a39      	ldr	r2, [pc, #228]	; (8007aa0 <HAL_DMA_IRQHandler+0xa64>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d101      	bne.n	80079c4 <HAL_DMA_IRQHandler+0x988>
 80079c0:	2301      	movs	r3, #1
 80079c2:	e000      	b.n	80079c6 <HAL_DMA_IRQHandler+0x98a>
 80079c4:	2300      	movs	r3, #0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f000 823f 	beq.w	8007e4a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079d8:	f003 031f 	and.w	r3, r3, #31
 80079dc:	2204      	movs	r2, #4
 80079de:	409a      	lsls	r2, r3
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	4013      	ands	r3, r2
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f000 80cd 	beq.w	8007b84 <HAL_DMA_IRQHandler+0xb48>
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	f003 0304 	and.w	r3, r3, #4
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 80c7 	beq.w	8007b84 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079fa:	f003 031f 	and.w	r3, r3, #31
 80079fe:	2204      	movs	r2, #4
 8007a00:	409a      	lsls	r2, r3
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d049      	beq.n	8007aa4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d109      	bne.n	8007a2e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f000 8210 	beq.w	8007e44 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a2c:	e20a      	b.n	8007e44 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f000 8206 	beq.w	8007e44 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a40:	e200      	b.n	8007e44 <HAL_DMA_IRQHandler+0xe08>
 8007a42:	bf00      	nop
 8007a44:	40020010 	.word	0x40020010
 8007a48:	40020028 	.word	0x40020028
 8007a4c:	40020040 	.word	0x40020040
 8007a50:	40020058 	.word	0x40020058
 8007a54:	40020070 	.word	0x40020070
 8007a58:	40020088 	.word	0x40020088
 8007a5c:	400200a0 	.word	0x400200a0
 8007a60:	400200b8 	.word	0x400200b8
 8007a64:	40020410 	.word	0x40020410
 8007a68:	40020428 	.word	0x40020428
 8007a6c:	40020440 	.word	0x40020440
 8007a70:	40020458 	.word	0x40020458
 8007a74:	40020470 	.word	0x40020470
 8007a78:	40020488 	.word	0x40020488
 8007a7c:	400204a0 	.word	0x400204a0
 8007a80:	400204b8 	.word	0x400204b8
 8007a84:	58025408 	.word	0x58025408
 8007a88:	5802541c 	.word	0x5802541c
 8007a8c:	58025430 	.word	0x58025430
 8007a90:	58025444 	.word	0x58025444
 8007a94:	58025458 	.word	0x58025458
 8007a98:	5802546c 	.word	0x5802546c
 8007a9c:	58025480 	.word	0x58025480
 8007aa0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	f003 0320 	and.w	r3, r3, #32
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d160      	bne.n	8007b70 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a7f      	ldr	r2, [pc, #508]	; (8007cb0 <HAL_DMA_IRQHandler+0xc74>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d04a      	beq.n	8007b4e <HAL_DMA_IRQHandler+0xb12>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a7d      	ldr	r2, [pc, #500]	; (8007cb4 <HAL_DMA_IRQHandler+0xc78>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d045      	beq.n	8007b4e <HAL_DMA_IRQHandler+0xb12>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a7c      	ldr	r2, [pc, #496]	; (8007cb8 <HAL_DMA_IRQHandler+0xc7c>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d040      	beq.n	8007b4e <HAL_DMA_IRQHandler+0xb12>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a7a      	ldr	r2, [pc, #488]	; (8007cbc <HAL_DMA_IRQHandler+0xc80>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d03b      	beq.n	8007b4e <HAL_DMA_IRQHandler+0xb12>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a79      	ldr	r2, [pc, #484]	; (8007cc0 <HAL_DMA_IRQHandler+0xc84>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d036      	beq.n	8007b4e <HAL_DMA_IRQHandler+0xb12>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a77      	ldr	r2, [pc, #476]	; (8007cc4 <HAL_DMA_IRQHandler+0xc88>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d031      	beq.n	8007b4e <HAL_DMA_IRQHandler+0xb12>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a76      	ldr	r2, [pc, #472]	; (8007cc8 <HAL_DMA_IRQHandler+0xc8c>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d02c      	beq.n	8007b4e <HAL_DMA_IRQHandler+0xb12>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a74      	ldr	r2, [pc, #464]	; (8007ccc <HAL_DMA_IRQHandler+0xc90>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d027      	beq.n	8007b4e <HAL_DMA_IRQHandler+0xb12>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a73      	ldr	r2, [pc, #460]	; (8007cd0 <HAL_DMA_IRQHandler+0xc94>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d022      	beq.n	8007b4e <HAL_DMA_IRQHandler+0xb12>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a71      	ldr	r2, [pc, #452]	; (8007cd4 <HAL_DMA_IRQHandler+0xc98>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d01d      	beq.n	8007b4e <HAL_DMA_IRQHandler+0xb12>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a70      	ldr	r2, [pc, #448]	; (8007cd8 <HAL_DMA_IRQHandler+0xc9c>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d018      	beq.n	8007b4e <HAL_DMA_IRQHandler+0xb12>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a6e      	ldr	r2, [pc, #440]	; (8007cdc <HAL_DMA_IRQHandler+0xca0>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d013      	beq.n	8007b4e <HAL_DMA_IRQHandler+0xb12>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a6d      	ldr	r2, [pc, #436]	; (8007ce0 <HAL_DMA_IRQHandler+0xca4>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d00e      	beq.n	8007b4e <HAL_DMA_IRQHandler+0xb12>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a6b      	ldr	r2, [pc, #428]	; (8007ce4 <HAL_DMA_IRQHandler+0xca8>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d009      	beq.n	8007b4e <HAL_DMA_IRQHandler+0xb12>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a6a      	ldr	r2, [pc, #424]	; (8007ce8 <HAL_DMA_IRQHandler+0xcac>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d004      	beq.n	8007b4e <HAL_DMA_IRQHandler+0xb12>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a68      	ldr	r2, [pc, #416]	; (8007cec <HAL_DMA_IRQHandler+0xcb0>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d108      	bne.n	8007b60 <HAL_DMA_IRQHandler+0xb24>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f022 0208 	bic.w	r2, r2, #8
 8007b5c:	601a      	str	r2, [r3, #0]
 8007b5e:	e007      	b.n	8007b70 <HAL_DMA_IRQHandler+0xb34>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f022 0204 	bic.w	r2, r2, #4
 8007b6e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f000 8165 	beq.w	8007e44 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b82:	e15f      	b.n	8007e44 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b88:	f003 031f 	and.w	r3, r3, #31
 8007b8c:	2202      	movs	r2, #2
 8007b8e:	409a      	lsls	r2, r3
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	4013      	ands	r3, r2
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 80c5 	beq.w	8007d24 <HAL_DMA_IRQHandler+0xce8>
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	f003 0302 	and.w	r3, r3, #2
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f000 80bf 	beq.w	8007d24 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007baa:	f003 031f 	and.w	r3, r3, #31
 8007bae:	2202      	movs	r2, #2
 8007bb0:	409a      	lsls	r2, r3
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d018      	beq.n	8007bf2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d109      	bne.n	8007bde <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f000 813a 	beq.w	8007e48 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bdc:	e134      	b.n	8007e48 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f000 8130 	beq.w	8007e48 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bf0:	e12a      	b.n	8007e48 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	f003 0320 	and.w	r3, r3, #32
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f040 8089 	bne.w	8007d10 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a2b      	ldr	r2, [pc, #172]	; (8007cb0 <HAL_DMA_IRQHandler+0xc74>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d04a      	beq.n	8007c9e <HAL_DMA_IRQHandler+0xc62>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a29      	ldr	r2, [pc, #164]	; (8007cb4 <HAL_DMA_IRQHandler+0xc78>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d045      	beq.n	8007c9e <HAL_DMA_IRQHandler+0xc62>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a28      	ldr	r2, [pc, #160]	; (8007cb8 <HAL_DMA_IRQHandler+0xc7c>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d040      	beq.n	8007c9e <HAL_DMA_IRQHandler+0xc62>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a26      	ldr	r2, [pc, #152]	; (8007cbc <HAL_DMA_IRQHandler+0xc80>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d03b      	beq.n	8007c9e <HAL_DMA_IRQHandler+0xc62>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a25      	ldr	r2, [pc, #148]	; (8007cc0 <HAL_DMA_IRQHandler+0xc84>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d036      	beq.n	8007c9e <HAL_DMA_IRQHandler+0xc62>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a23      	ldr	r2, [pc, #140]	; (8007cc4 <HAL_DMA_IRQHandler+0xc88>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d031      	beq.n	8007c9e <HAL_DMA_IRQHandler+0xc62>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a22      	ldr	r2, [pc, #136]	; (8007cc8 <HAL_DMA_IRQHandler+0xc8c>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d02c      	beq.n	8007c9e <HAL_DMA_IRQHandler+0xc62>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a20      	ldr	r2, [pc, #128]	; (8007ccc <HAL_DMA_IRQHandler+0xc90>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d027      	beq.n	8007c9e <HAL_DMA_IRQHandler+0xc62>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a1f      	ldr	r2, [pc, #124]	; (8007cd0 <HAL_DMA_IRQHandler+0xc94>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d022      	beq.n	8007c9e <HAL_DMA_IRQHandler+0xc62>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a1d      	ldr	r2, [pc, #116]	; (8007cd4 <HAL_DMA_IRQHandler+0xc98>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d01d      	beq.n	8007c9e <HAL_DMA_IRQHandler+0xc62>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a1c      	ldr	r2, [pc, #112]	; (8007cd8 <HAL_DMA_IRQHandler+0xc9c>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d018      	beq.n	8007c9e <HAL_DMA_IRQHandler+0xc62>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a1a      	ldr	r2, [pc, #104]	; (8007cdc <HAL_DMA_IRQHandler+0xca0>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d013      	beq.n	8007c9e <HAL_DMA_IRQHandler+0xc62>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a19      	ldr	r2, [pc, #100]	; (8007ce0 <HAL_DMA_IRQHandler+0xca4>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d00e      	beq.n	8007c9e <HAL_DMA_IRQHandler+0xc62>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a17      	ldr	r2, [pc, #92]	; (8007ce4 <HAL_DMA_IRQHandler+0xca8>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d009      	beq.n	8007c9e <HAL_DMA_IRQHandler+0xc62>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a16      	ldr	r2, [pc, #88]	; (8007ce8 <HAL_DMA_IRQHandler+0xcac>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d004      	beq.n	8007c9e <HAL_DMA_IRQHandler+0xc62>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a14      	ldr	r2, [pc, #80]	; (8007cec <HAL_DMA_IRQHandler+0xcb0>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d128      	bne.n	8007cf0 <HAL_DMA_IRQHandler+0xcb4>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f022 0214 	bic.w	r2, r2, #20
 8007cac:	601a      	str	r2, [r3, #0]
 8007cae:	e027      	b.n	8007d00 <HAL_DMA_IRQHandler+0xcc4>
 8007cb0:	40020010 	.word	0x40020010
 8007cb4:	40020028 	.word	0x40020028
 8007cb8:	40020040 	.word	0x40020040
 8007cbc:	40020058 	.word	0x40020058
 8007cc0:	40020070 	.word	0x40020070
 8007cc4:	40020088 	.word	0x40020088
 8007cc8:	400200a0 	.word	0x400200a0
 8007ccc:	400200b8 	.word	0x400200b8
 8007cd0:	40020410 	.word	0x40020410
 8007cd4:	40020428 	.word	0x40020428
 8007cd8:	40020440 	.word	0x40020440
 8007cdc:	40020458 	.word	0x40020458
 8007ce0:	40020470 	.word	0x40020470
 8007ce4:	40020488 	.word	0x40020488
 8007ce8:	400204a0 	.word	0x400204a0
 8007cec:	400204b8 	.word	0x400204b8
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f022 020a 	bic.w	r2, r2, #10
 8007cfe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f000 8097 	beq.w	8007e48 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d22:	e091      	b.n	8007e48 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d28:	f003 031f 	and.w	r3, r3, #31
 8007d2c:	2208      	movs	r2, #8
 8007d2e:	409a      	lsls	r2, r3
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	4013      	ands	r3, r2
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f000 8088 	beq.w	8007e4a <HAL_DMA_IRQHandler+0xe0e>
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	f003 0308 	and.w	r3, r3, #8
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f000 8082 	beq.w	8007e4a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a41      	ldr	r2, [pc, #260]	; (8007e50 <HAL_DMA_IRQHandler+0xe14>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d04a      	beq.n	8007de6 <HAL_DMA_IRQHandler+0xdaa>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a3f      	ldr	r2, [pc, #252]	; (8007e54 <HAL_DMA_IRQHandler+0xe18>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d045      	beq.n	8007de6 <HAL_DMA_IRQHandler+0xdaa>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a3e      	ldr	r2, [pc, #248]	; (8007e58 <HAL_DMA_IRQHandler+0xe1c>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d040      	beq.n	8007de6 <HAL_DMA_IRQHandler+0xdaa>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a3c      	ldr	r2, [pc, #240]	; (8007e5c <HAL_DMA_IRQHandler+0xe20>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d03b      	beq.n	8007de6 <HAL_DMA_IRQHandler+0xdaa>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a3b      	ldr	r2, [pc, #236]	; (8007e60 <HAL_DMA_IRQHandler+0xe24>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d036      	beq.n	8007de6 <HAL_DMA_IRQHandler+0xdaa>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a39      	ldr	r2, [pc, #228]	; (8007e64 <HAL_DMA_IRQHandler+0xe28>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d031      	beq.n	8007de6 <HAL_DMA_IRQHandler+0xdaa>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a38      	ldr	r2, [pc, #224]	; (8007e68 <HAL_DMA_IRQHandler+0xe2c>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d02c      	beq.n	8007de6 <HAL_DMA_IRQHandler+0xdaa>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a36      	ldr	r2, [pc, #216]	; (8007e6c <HAL_DMA_IRQHandler+0xe30>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d027      	beq.n	8007de6 <HAL_DMA_IRQHandler+0xdaa>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a35      	ldr	r2, [pc, #212]	; (8007e70 <HAL_DMA_IRQHandler+0xe34>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d022      	beq.n	8007de6 <HAL_DMA_IRQHandler+0xdaa>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a33      	ldr	r2, [pc, #204]	; (8007e74 <HAL_DMA_IRQHandler+0xe38>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d01d      	beq.n	8007de6 <HAL_DMA_IRQHandler+0xdaa>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a32      	ldr	r2, [pc, #200]	; (8007e78 <HAL_DMA_IRQHandler+0xe3c>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d018      	beq.n	8007de6 <HAL_DMA_IRQHandler+0xdaa>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a30      	ldr	r2, [pc, #192]	; (8007e7c <HAL_DMA_IRQHandler+0xe40>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d013      	beq.n	8007de6 <HAL_DMA_IRQHandler+0xdaa>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a2f      	ldr	r2, [pc, #188]	; (8007e80 <HAL_DMA_IRQHandler+0xe44>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d00e      	beq.n	8007de6 <HAL_DMA_IRQHandler+0xdaa>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a2d      	ldr	r2, [pc, #180]	; (8007e84 <HAL_DMA_IRQHandler+0xe48>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d009      	beq.n	8007de6 <HAL_DMA_IRQHandler+0xdaa>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a2c      	ldr	r2, [pc, #176]	; (8007e88 <HAL_DMA_IRQHandler+0xe4c>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d004      	beq.n	8007de6 <HAL_DMA_IRQHandler+0xdaa>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a2a      	ldr	r2, [pc, #168]	; (8007e8c <HAL_DMA_IRQHandler+0xe50>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d108      	bne.n	8007df8 <HAL_DMA_IRQHandler+0xdbc>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f022 021c 	bic.w	r2, r2, #28
 8007df4:	601a      	str	r2, [r3, #0]
 8007df6:	e007      	b.n	8007e08 <HAL_DMA_IRQHandler+0xdcc>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f022 020e 	bic.w	r2, r2, #14
 8007e06:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e0c:	f003 031f 	and.w	r3, r3, #31
 8007e10:	2201      	movs	r2, #1
 8007e12:	409a      	lsls	r2, r3
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d009      	beq.n	8007e4a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	4798      	blx	r3
 8007e3e:	e004      	b.n	8007e4a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007e40:	bf00      	nop
 8007e42:	e002      	b.n	8007e4a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e44:	bf00      	nop
 8007e46:	e000      	b.n	8007e4a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e48:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007e4a:	3728      	adds	r7, #40	; 0x28
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	40020010 	.word	0x40020010
 8007e54:	40020028 	.word	0x40020028
 8007e58:	40020040 	.word	0x40020040
 8007e5c:	40020058 	.word	0x40020058
 8007e60:	40020070 	.word	0x40020070
 8007e64:	40020088 	.word	0x40020088
 8007e68:	400200a0 	.word	0x400200a0
 8007e6c:	400200b8 	.word	0x400200b8
 8007e70:	40020410 	.word	0x40020410
 8007e74:	40020428 	.word	0x40020428
 8007e78:	40020440 	.word	0x40020440
 8007e7c:	40020458 	.word	0x40020458
 8007e80:	40020470 	.word	0x40020470
 8007e84:	40020488 	.word	0x40020488
 8007e88:	400204a0 	.word	0x400204a0
 8007e8c:	400204b8 	.word	0x400204b8

08007e90 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b087      	sub	sp, #28
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
 8007e9c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ea2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ea8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a7f      	ldr	r2, [pc, #508]	; (80080ac <DMA_SetConfig+0x21c>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d072      	beq.n	8007f9a <DMA_SetConfig+0x10a>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a7d      	ldr	r2, [pc, #500]	; (80080b0 <DMA_SetConfig+0x220>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d06d      	beq.n	8007f9a <DMA_SetConfig+0x10a>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a7c      	ldr	r2, [pc, #496]	; (80080b4 <DMA_SetConfig+0x224>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d068      	beq.n	8007f9a <DMA_SetConfig+0x10a>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a7a      	ldr	r2, [pc, #488]	; (80080b8 <DMA_SetConfig+0x228>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d063      	beq.n	8007f9a <DMA_SetConfig+0x10a>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a79      	ldr	r2, [pc, #484]	; (80080bc <DMA_SetConfig+0x22c>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d05e      	beq.n	8007f9a <DMA_SetConfig+0x10a>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a77      	ldr	r2, [pc, #476]	; (80080c0 <DMA_SetConfig+0x230>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d059      	beq.n	8007f9a <DMA_SetConfig+0x10a>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a76      	ldr	r2, [pc, #472]	; (80080c4 <DMA_SetConfig+0x234>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d054      	beq.n	8007f9a <DMA_SetConfig+0x10a>
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a74      	ldr	r2, [pc, #464]	; (80080c8 <DMA_SetConfig+0x238>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d04f      	beq.n	8007f9a <DMA_SetConfig+0x10a>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a73      	ldr	r2, [pc, #460]	; (80080cc <DMA_SetConfig+0x23c>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d04a      	beq.n	8007f9a <DMA_SetConfig+0x10a>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a71      	ldr	r2, [pc, #452]	; (80080d0 <DMA_SetConfig+0x240>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d045      	beq.n	8007f9a <DMA_SetConfig+0x10a>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a70      	ldr	r2, [pc, #448]	; (80080d4 <DMA_SetConfig+0x244>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d040      	beq.n	8007f9a <DMA_SetConfig+0x10a>
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a6e      	ldr	r2, [pc, #440]	; (80080d8 <DMA_SetConfig+0x248>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d03b      	beq.n	8007f9a <DMA_SetConfig+0x10a>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a6d      	ldr	r2, [pc, #436]	; (80080dc <DMA_SetConfig+0x24c>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d036      	beq.n	8007f9a <DMA_SetConfig+0x10a>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a6b      	ldr	r2, [pc, #428]	; (80080e0 <DMA_SetConfig+0x250>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d031      	beq.n	8007f9a <DMA_SetConfig+0x10a>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a6a      	ldr	r2, [pc, #424]	; (80080e4 <DMA_SetConfig+0x254>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d02c      	beq.n	8007f9a <DMA_SetConfig+0x10a>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a68      	ldr	r2, [pc, #416]	; (80080e8 <DMA_SetConfig+0x258>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d027      	beq.n	8007f9a <DMA_SetConfig+0x10a>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a67      	ldr	r2, [pc, #412]	; (80080ec <DMA_SetConfig+0x25c>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d022      	beq.n	8007f9a <DMA_SetConfig+0x10a>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a65      	ldr	r2, [pc, #404]	; (80080f0 <DMA_SetConfig+0x260>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d01d      	beq.n	8007f9a <DMA_SetConfig+0x10a>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a64      	ldr	r2, [pc, #400]	; (80080f4 <DMA_SetConfig+0x264>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d018      	beq.n	8007f9a <DMA_SetConfig+0x10a>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a62      	ldr	r2, [pc, #392]	; (80080f8 <DMA_SetConfig+0x268>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d013      	beq.n	8007f9a <DMA_SetConfig+0x10a>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a61      	ldr	r2, [pc, #388]	; (80080fc <DMA_SetConfig+0x26c>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d00e      	beq.n	8007f9a <DMA_SetConfig+0x10a>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a5f      	ldr	r2, [pc, #380]	; (8008100 <DMA_SetConfig+0x270>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d009      	beq.n	8007f9a <DMA_SetConfig+0x10a>
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a5e      	ldr	r2, [pc, #376]	; (8008104 <DMA_SetConfig+0x274>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d004      	beq.n	8007f9a <DMA_SetConfig+0x10a>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a5c      	ldr	r2, [pc, #368]	; (8008108 <DMA_SetConfig+0x278>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d101      	bne.n	8007f9e <DMA_SetConfig+0x10e>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e000      	b.n	8007fa0 <DMA_SetConfig+0x110>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00d      	beq.n	8007fc0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007fac:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d004      	beq.n	8007fc0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007fbe:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a39      	ldr	r2, [pc, #228]	; (80080ac <DMA_SetConfig+0x21c>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d04a      	beq.n	8008060 <DMA_SetConfig+0x1d0>
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a38      	ldr	r2, [pc, #224]	; (80080b0 <DMA_SetConfig+0x220>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d045      	beq.n	8008060 <DMA_SetConfig+0x1d0>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a36      	ldr	r2, [pc, #216]	; (80080b4 <DMA_SetConfig+0x224>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d040      	beq.n	8008060 <DMA_SetConfig+0x1d0>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a35      	ldr	r2, [pc, #212]	; (80080b8 <DMA_SetConfig+0x228>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d03b      	beq.n	8008060 <DMA_SetConfig+0x1d0>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a33      	ldr	r2, [pc, #204]	; (80080bc <DMA_SetConfig+0x22c>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d036      	beq.n	8008060 <DMA_SetConfig+0x1d0>
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a32      	ldr	r2, [pc, #200]	; (80080c0 <DMA_SetConfig+0x230>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d031      	beq.n	8008060 <DMA_SetConfig+0x1d0>
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a30      	ldr	r2, [pc, #192]	; (80080c4 <DMA_SetConfig+0x234>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d02c      	beq.n	8008060 <DMA_SetConfig+0x1d0>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a2f      	ldr	r2, [pc, #188]	; (80080c8 <DMA_SetConfig+0x238>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d027      	beq.n	8008060 <DMA_SetConfig+0x1d0>
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a2d      	ldr	r2, [pc, #180]	; (80080cc <DMA_SetConfig+0x23c>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d022      	beq.n	8008060 <DMA_SetConfig+0x1d0>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a2c      	ldr	r2, [pc, #176]	; (80080d0 <DMA_SetConfig+0x240>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d01d      	beq.n	8008060 <DMA_SetConfig+0x1d0>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a2a      	ldr	r2, [pc, #168]	; (80080d4 <DMA_SetConfig+0x244>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d018      	beq.n	8008060 <DMA_SetConfig+0x1d0>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a29      	ldr	r2, [pc, #164]	; (80080d8 <DMA_SetConfig+0x248>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d013      	beq.n	8008060 <DMA_SetConfig+0x1d0>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a27      	ldr	r2, [pc, #156]	; (80080dc <DMA_SetConfig+0x24c>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d00e      	beq.n	8008060 <DMA_SetConfig+0x1d0>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a26      	ldr	r2, [pc, #152]	; (80080e0 <DMA_SetConfig+0x250>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d009      	beq.n	8008060 <DMA_SetConfig+0x1d0>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a24      	ldr	r2, [pc, #144]	; (80080e4 <DMA_SetConfig+0x254>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d004      	beq.n	8008060 <DMA_SetConfig+0x1d0>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a23      	ldr	r2, [pc, #140]	; (80080e8 <DMA_SetConfig+0x258>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d101      	bne.n	8008064 <DMA_SetConfig+0x1d4>
 8008060:	2301      	movs	r3, #1
 8008062:	e000      	b.n	8008066 <DMA_SetConfig+0x1d6>
 8008064:	2300      	movs	r3, #0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d059      	beq.n	800811e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800806e:	f003 031f 	and.w	r3, r3, #31
 8008072:	223f      	movs	r2, #63	; 0x3f
 8008074:	409a      	lsls	r2, r3
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008088:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	2b40      	cmp	r3, #64	; 0x40
 8008098:	d138      	bne.n	800810c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68ba      	ldr	r2, [r7, #8]
 80080a8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80080aa:	e086      	b.n	80081ba <DMA_SetConfig+0x32a>
 80080ac:	40020010 	.word	0x40020010
 80080b0:	40020028 	.word	0x40020028
 80080b4:	40020040 	.word	0x40020040
 80080b8:	40020058 	.word	0x40020058
 80080bc:	40020070 	.word	0x40020070
 80080c0:	40020088 	.word	0x40020088
 80080c4:	400200a0 	.word	0x400200a0
 80080c8:	400200b8 	.word	0x400200b8
 80080cc:	40020410 	.word	0x40020410
 80080d0:	40020428 	.word	0x40020428
 80080d4:	40020440 	.word	0x40020440
 80080d8:	40020458 	.word	0x40020458
 80080dc:	40020470 	.word	0x40020470
 80080e0:	40020488 	.word	0x40020488
 80080e4:	400204a0 	.word	0x400204a0
 80080e8:	400204b8 	.word	0x400204b8
 80080ec:	58025408 	.word	0x58025408
 80080f0:	5802541c 	.word	0x5802541c
 80080f4:	58025430 	.word	0x58025430
 80080f8:	58025444 	.word	0x58025444
 80080fc:	58025458 	.word	0x58025458
 8008100:	5802546c 	.word	0x5802546c
 8008104:	58025480 	.word	0x58025480
 8008108:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68ba      	ldr	r2, [r7, #8]
 8008112:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	60da      	str	r2, [r3, #12]
}
 800811c:	e04d      	b.n	80081ba <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a29      	ldr	r2, [pc, #164]	; (80081c8 <DMA_SetConfig+0x338>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d022      	beq.n	800816e <DMA_SetConfig+0x2de>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a27      	ldr	r2, [pc, #156]	; (80081cc <DMA_SetConfig+0x33c>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d01d      	beq.n	800816e <DMA_SetConfig+0x2de>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a26      	ldr	r2, [pc, #152]	; (80081d0 <DMA_SetConfig+0x340>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d018      	beq.n	800816e <DMA_SetConfig+0x2de>
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a24      	ldr	r2, [pc, #144]	; (80081d4 <DMA_SetConfig+0x344>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d013      	beq.n	800816e <DMA_SetConfig+0x2de>
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a23      	ldr	r2, [pc, #140]	; (80081d8 <DMA_SetConfig+0x348>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d00e      	beq.n	800816e <DMA_SetConfig+0x2de>
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a21      	ldr	r2, [pc, #132]	; (80081dc <DMA_SetConfig+0x34c>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d009      	beq.n	800816e <DMA_SetConfig+0x2de>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a20      	ldr	r2, [pc, #128]	; (80081e0 <DMA_SetConfig+0x350>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d004      	beq.n	800816e <DMA_SetConfig+0x2de>
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a1e      	ldr	r2, [pc, #120]	; (80081e4 <DMA_SetConfig+0x354>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d101      	bne.n	8008172 <DMA_SetConfig+0x2e2>
 800816e:	2301      	movs	r3, #1
 8008170:	e000      	b.n	8008174 <DMA_SetConfig+0x2e4>
 8008172:	2300      	movs	r3, #0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d020      	beq.n	80081ba <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800817c:	f003 031f 	and.w	r3, r3, #31
 8008180:	2201      	movs	r2, #1
 8008182:	409a      	lsls	r2, r3
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	683a      	ldr	r2, [r7, #0]
 800818e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	2b40      	cmp	r3, #64	; 0x40
 8008196:	d108      	bne.n	80081aa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	60da      	str	r2, [r3, #12]
}
 80081a8:	e007      	b.n	80081ba <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	60da      	str	r2, [r3, #12]
}
 80081ba:	bf00      	nop
 80081bc:	371c      	adds	r7, #28
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	58025408 	.word	0x58025408
 80081cc:	5802541c 	.word	0x5802541c
 80081d0:	58025430 	.word	0x58025430
 80081d4:	58025444 	.word	0x58025444
 80081d8:	58025458 	.word	0x58025458
 80081dc:	5802546c 	.word	0x5802546c
 80081e0:	58025480 	.word	0x58025480
 80081e4:	58025494 	.word	0x58025494

080081e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a42      	ldr	r2, [pc, #264]	; (8008300 <DMA_CalcBaseAndBitshift+0x118>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d04a      	beq.n	8008290 <DMA_CalcBaseAndBitshift+0xa8>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a41      	ldr	r2, [pc, #260]	; (8008304 <DMA_CalcBaseAndBitshift+0x11c>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d045      	beq.n	8008290 <DMA_CalcBaseAndBitshift+0xa8>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a3f      	ldr	r2, [pc, #252]	; (8008308 <DMA_CalcBaseAndBitshift+0x120>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d040      	beq.n	8008290 <DMA_CalcBaseAndBitshift+0xa8>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a3e      	ldr	r2, [pc, #248]	; (800830c <DMA_CalcBaseAndBitshift+0x124>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d03b      	beq.n	8008290 <DMA_CalcBaseAndBitshift+0xa8>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a3c      	ldr	r2, [pc, #240]	; (8008310 <DMA_CalcBaseAndBitshift+0x128>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d036      	beq.n	8008290 <DMA_CalcBaseAndBitshift+0xa8>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a3b      	ldr	r2, [pc, #236]	; (8008314 <DMA_CalcBaseAndBitshift+0x12c>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d031      	beq.n	8008290 <DMA_CalcBaseAndBitshift+0xa8>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a39      	ldr	r2, [pc, #228]	; (8008318 <DMA_CalcBaseAndBitshift+0x130>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d02c      	beq.n	8008290 <DMA_CalcBaseAndBitshift+0xa8>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a38      	ldr	r2, [pc, #224]	; (800831c <DMA_CalcBaseAndBitshift+0x134>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d027      	beq.n	8008290 <DMA_CalcBaseAndBitshift+0xa8>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a36      	ldr	r2, [pc, #216]	; (8008320 <DMA_CalcBaseAndBitshift+0x138>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d022      	beq.n	8008290 <DMA_CalcBaseAndBitshift+0xa8>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a35      	ldr	r2, [pc, #212]	; (8008324 <DMA_CalcBaseAndBitshift+0x13c>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d01d      	beq.n	8008290 <DMA_CalcBaseAndBitshift+0xa8>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a33      	ldr	r2, [pc, #204]	; (8008328 <DMA_CalcBaseAndBitshift+0x140>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d018      	beq.n	8008290 <DMA_CalcBaseAndBitshift+0xa8>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a32      	ldr	r2, [pc, #200]	; (800832c <DMA_CalcBaseAndBitshift+0x144>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d013      	beq.n	8008290 <DMA_CalcBaseAndBitshift+0xa8>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a30      	ldr	r2, [pc, #192]	; (8008330 <DMA_CalcBaseAndBitshift+0x148>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d00e      	beq.n	8008290 <DMA_CalcBaseAndBitshift+0xa8>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a2f      	ldr	r2, [pc, #188]	; (8008334 <DMA_CalcBaseAndBitshift+0x14c>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d009      	beq.n	8008290 <DMA_CalcBaseAndBitshift+0xa8>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a2d      	ldr	r2, [pc, #180]	; (8008338 <DMA_CalcBaseAndBitshift+0x150>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d004      	beq.n	8008290 <DMA_CalcBaseAndBitshift+0xa8>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a2c      	ldr	r2, [pc, #176]	; (800833c <DMA_CalcBaseAndBitshift+0x154>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d101      	bne.n	8008294 <DMA_CalcBaseAndBitshift+0xac>
 8008290:	2301      	movs	r3, #1
 8008292:	e000      	b.n	8008296 <DMA_CalcBaseAndBitshift+0xae>
 8008294:	2300      	movs	r3, #0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d024      	beq.n	80082e4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	3b10      	subs	r3, #16
 80082a2:	4a27      	ldr	r2, [pc, #156]	; (8008340 <DMA_CalcBaseAndBitshift+0x158>)
 80082a4:	fba2 2303 	umull	r2, r3, r2, r3
 80082a8:	091b      	lsrs	r3, r3, #4
 80082aa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f003 0307 	and.w	r3, r3, #7
 80082b2:	4a24      	ldr	r2, [pc, #144]	; (8008344 <DMA_CalcBaseAndBitshift+0x15c>)
 80082b4:	5cd3      	ldrb	r3, [r2, r3]
 80082b6:	461a      	mov	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2b03      	cmp	r3, #3
 80082c0:	d908      	bls.n	80082d4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	461a      	mov	r2, r3
 80082c8:	4b1f      	ldr	r3, [pc, #124]	; (8008348 <DMA_CalcBaseAndBitshift+0x160>)
 80082ca:	4013      	ands	r3, r2
 80082cc:	1d1a      	adds	r2, r3, #4
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	659a      	str	r2, [r3, #88]	; 0x58
 80082d2:	e00d      	b.n	80082f0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	461a      	mov	r2, r3
 80082da:	4b1b      	ldr	r3, [pc, #108]	; (8008348 <DMA_CalcBaseAndBitshift+0x160>)
 80082dc:	4013      	ands	r3, r2
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	6593      	str	r3, [r2, #88]	; 0x58
 80082e2:	e005      	b.n	80082f0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3714      	adds	r7, #20
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr
 8008300:	40020010 	.word	0x40020010
 8008304:	40020028 	.word	0x40020028
 8008308:	40020040 	.word	0x40020040
 800830c:	40020058 	.word	0x40020058
 8008310:	40020070 	.word	0x40020070
 8008314:	40020088 	.word	0x40020088
 8008318:	400200a0 	.word	0x400200a0
 800831c:	400200b8 	.word	0x400200b8
 8008320:	40020410 	.word	0x40020410
 8008324:	40020428 	.word	0x40020428
 8008328:	40020440 	.word	0x40020440
 800832c:	40020458 	.word	0x40020458
 8008330:	40020470 	.word	0x40020470
 8008334:	40020488 	.word	0x40020488
 8008338:	400204a0 	.word	0x400204a0
 800833c:	400204b8 	.word	0x400204b8
 8008340:	aaaaaaab 	.word	0xaaaaaaab
 8008344:	08020150 	.word	0x08020150
 8008348:	fffffc00 	.word	0xfffffc00

0800834c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800834c:	b480      	push	{r7}
 800834e:	b085      	sub	sp, #20
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008354:	2300      	movs	r3, #0
 8008356:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d120      	bne.n	80083a2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008364:	2b03      	cmp	r3, #3
 8008366:	d858      	bhi.n	800841a <DMA_CheckFifoParam+0xce>
 8008368:	a201      	add	r2, pc, #4	; (adr r2, 8008370 <DMA_CheckFifoParam+0x24>)
 800836a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836e:	bf00      	nop
 8008370:	08008381 	.word	0x08008381
 8008374:	08008393 	.word	0x08008393
 8008378:	08008381 	.word	0x08008381
 800837c:	0800841b 	.word	0x0800841b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008384:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008388:	2b00      	cmp	r3, #0
 800838a:	d048      	beq.n	800841e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008390:	e045      	b.n	800841e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008396:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800839a:	d142      	bne.n	8008422 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80083a0:	e03f      	b.n	8008422 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	699b      	ldr	r3, [r3, #24]
 80083a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083aa:	d123      	bne.n	80083f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b0:	2b03      	cmp	r3, #3
 80083b2:	d838      	bhi.n	8008426 <DMA_CheckFifoParam+0xda>
 80083b4:	a201      	add	r2, pc, #4	; (adr r2, 80083bc <DMA_CheckFifoParam+0x70>)
 80083b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ba:	bf00      	nop
 80083bc:	080083cd 	.word	0x080083cd
 80083c0:	080083d3 	.word	0x080083d3
 80083c4:	080083cd 	.word	0x080083cd
 80083c8:	080083e5 	.word	0x080083e5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	73fb      	strb	r3, [r7, #15]
        break;
 80083d0:	e030      	b.n	8008434 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d025      	beq.n	800842a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80083e2:	e022      	b.n	800842a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80083ec:	d11f      	bne.n	800842e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80083f2:	e01c      	b.n	800842e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d902      	bls.n	8008402 <DMA_CheckFifoParam+0xb6>
 80083fc:	2b03      	cmp	r3, #3
 80083fe:	d003      	beq.n	8008408 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008400:	e018      	b.n	8008434 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	73fb      	strb	r3, [r7, #15]
        break;
 8008406:	e015      	b.n	8008434 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00e      	beq.n	8008432 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	73fb      	strb	r3, [r7, #15]
    break;
 8008418:	e00b      	b.n	8008432 <DMA_CheckFifoParam+0xe6>
        break;
 800841a:	bf00      	nop
 800841c:	e00a      	b.n	8008434 <DMA_CheckFifoParam+0xe8>
        break;
 800841e:	bf00      	nop
 8008420:	e008      	b.n	8008434 <DMA_CheckFifoParam+0xe8>
        break;
 8008422:	bf00      	nop
 8008424:	e006      	b.n	8008434 <DMA_CheckFifoParam+0xe8>
        break;
 8008426:	bf00      	nop
 8008428:	e004      	b.n	8008434 <DMA_CheckFifoParam+0xe8>
        break;
 800842a:	bf00      	nop
 800842c:	e002      	b.n	8008434 <DMA_CheckFifoParam+0xe8>
        break;
 800842e:	bf00      	nop
 8008430:	e000      	b.n	8008434 <DMA_CheckFifoParam+0xe8>
    break;
 8008432:	bf00      	nop
    }
  }

  return status;
 8008434:	7bfb      	ldrb	r3, [r7, #15]
}
 8008436:	4618      	mov	r0, r3
 8008438:	3714      	adds	r7, #20
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop

08008444 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a38      	ldr	r2, [pc, #224]	; (8008538 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d022      	beq.n	80084a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a36      	ldr	r2, [pc, #216]	; (800853c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d01d      	beq.n	80084a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a35      	ldr	r2, [pc, #212]	; (8008540 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d018      	beq.n	80084a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a33      	ldr	r2, [pc, #204]	; (8008544 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d013      	beq.n	80084a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a32      	ldr	r2, [pc, #200]	; (8008548 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d00e      	beq.n	80084a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a30      	ldr	r2, [pc, #192]	; (800854c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d009      	beq.n	80084a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a2f      	ldr	r2, [pc, #188]	; (8008550 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d004      	beq.n	80084a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a2d      	ldr	r2, [pc, #180]	; (8008554 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d101      	bne.n	80084a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80084a2:	2301      	movs	r3, #1
 80084a4:	e000      	b.n	80084a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80084a6:	2300      	movs	r3, #0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d01a      	beq.n	80084e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	3b08      	subs	r3, #8
 80084b4:	4a28      	ldr	r2, [pc, #160]	; (8008558 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80084b6:	fba2 2303 	umull	r2, r3, r2, r3
 80084ba:	091b      	lsrs	r3, r3, #4
 80084bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	4b26      	ldr	r3, [pc, #152]	; (800855c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80084c2:	4413      	add	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	461a      	mov	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a24      	ldr	r2, [pc, #144]	; (8008560 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80084d0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f003 031f 	and.w	r3, r3, #31
 80084d8:	2201      	movs	r2, #1
 80084da:	409a      	lsls	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80084e0:	e024      	b.n	800852c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	3b10      	subs	r3, #16
 80084ea:	4a1e      	ldr	r2, [pc, #120]	; (8008564 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80084ec:	fba2 2303 	umull	r2, r3, r2, r3
 80084f0:	091b      	lsrs	r3, r3, #4
 80084f2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	4a1c      	ldr	r2, [pc, #112]	; (8008568 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d806      	bhi.n	800850a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	4a1b      	ldr	r2, [pc, #108]	; (800856c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d902      	bls.n	800850a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	3308      	adds	r3, #8
 8008508:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	4b18      	ldr	r3, [pc, #96]	; (8008570 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800850e:	4413      	add	r3, r2
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	461a      	mov	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a16      	ldr	r2, [pc, #88]	; (8008574 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800851c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f003 031f 	and.w	r3, r3, #31
 8008524:	2201      	movs	r2, #1
 8008526:	409a      	lsls	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800852c:	bf00      	nop
 800852e:	3714      	adds	r7, #20
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr
 8008538:	58025408 	.word	0x58025408
 800853c:	5802541c 	.word	0x5802541c
 8008540:	58025430 	.word	0x58025430
 8008544:	58025444 	.word	0x58025444
 8008548:	58025458 	.word	0x58025458
 800854c:	5802546c 	.word	0x5802546c
 8008550:	58025480 	.word	0x58025480
 8008554:	58025494 	.word	0x58025494
 8008558:	cccccccd 	.word	0xcccccccd
 800855c:	16009600 	.word	0x16009600
 8008560:	58025880 	.word	0x58025880
 8008564:	aaaaaaab 	.word	0xaaaaaaab
 8008568:	400204b8 	.word	0x400204b8
 800856c:	4002040f 	.word	0x4002040f
 8008570:	10008200 	.word	0x10008200
 8008574:	40020880 	.word	0x40020880

08008578 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	b2db      	uxtb	r3, r3
 8008586:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d04a      	beq.n	8008624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2b08      	cmp	r3, #8
 8008592:	d847      	bhi.n	8008624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a25      	ldr	r2, [pc, #148]	; (8008630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d022      	beq.n	80085e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a24      	ldr	r2, [pc, #144]	; (8008634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d01d      	beq.n	80085e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a22      	ldr	r2, [pc, #136]	; (8008638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d018      	beq.n	80085e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a21      	ldr	r2, [pc, #132]	; (800863c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d013      	beq.n	80085e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a1f      	ldr	r2, [pc, #124]	; (8008640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d00e      	beq.n	80085e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a1e      	ldr	r2, [pc, #120]	; (8008644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d009      	beq.n	80085e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a1c      	ldr	r2, [pc, #112]	; (8008648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d004      	beq.n	80085e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a1b      	ldr	r2, [pc, #108]	; (800864c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d101      	bne.n	80085e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80085e4:	2301      	movs	r3, #1
 80085e6:	e000      	b.n	80085ea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80085e8:	2300      	movs	r3, #0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00a      	beq.n	8008604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	4b17      	ldr	r3, [pc, #92]	; (8008650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80085f2:	4413      	add	r3, r2
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	461a      	mov	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a15      	ldr	r2, [pc, #84]	; (8008654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008600:	671a      	str	r2, [r3, #112]	; 0x70
 8008602:	e009      	b.n	8008618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	4b14      	ldr	r3, [pc, #80]	; (8008658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008608:	4413      	add	r3, r2
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	461a      	mov	r2, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4a11      	ldr	r2, [pc, #68]	; (800865c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008616:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	3b01      	subs	r3, #1
 800861c:	2201      	movs	r2, #1
 800861e:	409a      	lsls	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008624:	bf00      	nop
 8008626:	3714      	adds	r7, #20
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr
 8008630:	58025408 	.word	0x58025408
 8008634:	5802541c 	.word	0x5802541c
 8008638:	58025430 	.word	0x58025430
 800863c:	58025444 	.word	0x58025444
 8008640:	58025458 	.word	0x58025458
 8008644:	5802546c 	.word	0x5802546c
 8008648:	58025480 	.word	0x58025480
 800864c:	58025494 	.word	0x58025494
 8008650:	1600963f 	.word	0x1600963f
 8008654:	58025940 	.word	0x58025940
 8008658:	1000823f 	.word	0x1000823f
 800865c:	40020940 	.word	0x40020940

08008660 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b098      	sub	sp, #96	; 0x60
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8008668:	4a84      	ldr	r2, [pc, #528]	; (800887c <HAL_FDCAN_Init+0x21c>)
 800866a:	f107 030c 	add.w	r3, r7, #12
 800866e:	4611      	mov	r1, r2
 8008670:	224c      	movs	r2, #76	; 0x4c
 8008672:	4618      	mov	r0, r3
 8008674:	f013 fcd9 	bl	801c02a <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d101      	bne.n	8008682 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e1c6      	b.n	8008a10 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a7e      	ldr	r2, [pc, #504]	; (8008880 <HAL_FDCAN_Init+0x220>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d106      	bne.n	800869a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008694:	461a      	mov	r2, r3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d106      	bne.n	80086b4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f7fa fdb0 	bl	8003214 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	699a      	ldr	r2, [r3, #24]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f022 0210 	bic.w	r2, r2, #16
 80086c2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80086c4:	f7fb fde6 	bl	8004294 <HAL_GetTick>
 80086c8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80086ca:	e014      	b.n	80086f6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80086cc:	f7fb fde2 	bl	8004294 <HAL_GetTick>
 80086d0:	4602      	mov	r2, r0
 80086d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	2b0a      	cmp	r3, #10
 80086d8:	d90d      	bls.n	80086f6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80086e0:	f043 0201 	orr.w	r2, r3, #1
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2203      	movs	r2, #3
 80086ee:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	e18c      	b.n	8008a10 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	699b      	ldr	r3, [r3, #24]
 80086fc:	f003 0308 	and.w	r3, r3, #8
 8008700:	2b08      	cmp	r3, #8
 8008702:	d0e3      	beq.n	80086cc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	699a      	ldr	r2, [r3, #24]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f042 0201 	orr.w	r2, r2, #1
 8008712:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008714:	f7fb fdbe 	bl	8004294 <HAL_GetTick>
 8008718:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800871a:	e014      	b.n	8008746 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800871c:	f7fb fdba 	bl	8004294 <HAL_GetTick>
 8008720:	4602      	mov	r2, r0
 8008722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	2b0a      	cmp	r3, #10
 8008728:	d90d      	bls.n	8008746 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008730:	f043 0201 	orr.w	r2, r3, #1
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2203      	movs	r2, #3
 800873e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	e164      	b.n	8008a10 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	699b      	ldr	r3, [r3, #24]
 800874c:	f003 0301 	and.w	r3, r3, #1
 8008750:	2b00      	cmp	r3, #0
 8008752:	d0e3      	beq.n	800871c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	699a      	ldr	r2, [r3, #24]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f042 0202 	orr.w	r2, r2, #2
 8008762:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	7c1b      	ldrb	r3, [r3, #16]
 8008768:	2b01      	cmp	r3, #1
 800876a:	d108      	bne.n	800877e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	699a      	ldr	r2, [r3, #24]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800877a:	619a      	str	r2, [r3, #24]
 800877c:	e007      	b.n	800878e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	699a      	ldr	r2, [r3, #24]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800878c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	7c5b      	ldrb	r3, [r3, #17]
 8008792:	2b01      	cmp	r3, #1
 8008794:	d108      	bne.n	80087a8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	699a      	ldr	r2, [r3, #24]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80087a4:	619a      	str	r2, [r3, #24]
 80087a6:	e007      	b.n	80087b8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	699a      	ldr	r2, [r3, #24]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80087b6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	7c9b      	ldrb	r3, [r3, #18]
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d108      	bne.n	80087d2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	699a      	ldr	r2, [r3, #24]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80087ce:	619a      	str	r2, [r3, #24]
 80087d0:	e007      	b.n	80087e2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	699a      	ldr	r2, [r3, #24]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80087e0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	689a      	ldr	r2, [r3, #8]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	430a      	orrs	r2, r1
 80087f6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	699a      	ldr	r2, [r3, #24]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8008806:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	691a      	ldr	r2, [r3, #16]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f022 0210 	bic.w	r2, r2, #16
 8008816:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	2b01      	cmp	r3, #1
 800881e:	d108      	bne.n	8008832 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	699a      	ldr	r2, [r3, #24]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f042 0204 	orr.w	r2, r2, #4
 800882e:	619a      	str	r2, [r3, #24]
 8008830:	e030      	b.n	8008894 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d02c      	beq.n	8008894 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	2b02      	cmp	r3, #2
 8008840:	d020      	beq.n	8008884 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	699a      	ldr	r2, [r3, #24]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008850:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	691a      	ldr	r2, [r3, #16]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f042 0210 	orr.w	r2, r2, #16
 8008860:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	2b03      	cmp	r3, #3
 8008868:	d114      	bne.n	8008894 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	699a      	ldr	r2, [r3, #24]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f042 0220 	orr.w	r2, r2, #32
 8008878:	619a      	str	r2, [r3, #24]
 800887a:	e00b      	b.n	8008894 <HAL_FDCAN_Init+0x234>
 800887c:	0801fff4 	.word	0x0801fff4
 8008880:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	699a      	ldr	r2, [r3, #24]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f042 0220 	orr.w	r2, r2, #32
 8008892:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	3b01      	subs	r3, #1
 800889a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	69db      	ldr	r3, [r3, #28]
 80088a0:	3b01      	subs	r3, #1
 80088a2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80088a4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a1b      	ldr	r3, [r3, #32]
 80088aa:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80088ac:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	695b      	ldr	r3, [r3, #20]
 80088b4:	3b01      	subs	r3, #1
 80088b6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80088bc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80088be:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088c8:	d115      	bne.n	80088f6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ce:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d4:	3b01      	subs	r3, #1
 80088d6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80088d8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088de:	3b01      	subs	r3, #1
 80088e0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80088e2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ea:	3b01      	subs	r3, #1
 80088ec:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80088f2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80088f4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00a      	beq.n	8008914 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	430a      	orrs	r2, r1
 8008910:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800891c:	4413      	add	r3, r2
 800891e:	2b00      	cmp	r3, #0
 8008920:	d011      	beq.n	8008946 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800892a:	f023 0107 	bic.w	r1, r3, #7
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	3360      	adds	r3, #96	; 0x60
 8008936:	443b      	add	r3, r7
 8008938:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	430a      	orrs	r2, r1
 8008942:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800894a:	2b00      	cmp	r3, #0
 800894c:	d011      	beq.n	8008972 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008956:	f023 0107 	bic.w	r1, r3, #7
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	3360      	adds	r3, #96	; 0x60
 8008962:	443b      	add	r3, r7
 8008964:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	430a      	orrs	r2, r1
 800896e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008976:	2b00      	cmp	r3, #0
 8008978:	d012      	beq.n	80089a0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008982:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	3360      	adds	r3, #96	; 0x60
 800898e:	443b      	add	r3, r7
 8008990:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008994:	011a      	lsls	r2, r3, #4
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	430a      	orrs	r2, r1
 800899c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d012      	beq.n	80089ce <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80089b0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	3360      	adds	r3, #96	; 0x60
 80089bc:	443b      	add	r3, r7
 80089be:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80089c2:	021a      	lsls	r2, r3, #8
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	430a      	orrs	r2, r1
 80089ca:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a11      	ldr	r2, [pc, #68]	; (8008a18 <HAL_FDCAN_Init+0x3b8>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d107      	bne.n	80089e8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	689a      	ldr	r2, [r3, #8]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	f022 0203 	bic.w	r2, r2, #3
 80089e6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 f80b 	bl	8008a1c <FDCAN_CalcultateRamBlockAddresses>
 8008a06:	4603      	mov	r3, r0
 8008a08:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8008a0c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3760      	adds	r7, #96	; 0x60
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	4000a000 	.word	0x4000a000

08008a1c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a28:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008a32:	4ba7      	ldr	r3, [pc, #668]	; (8008cd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008a34:	4013      	ands	r3, r2
 8008a36:	68ba      	ldr	r2, [r7, #8]
 8008a38:	0091      	lsls	r1, r2, #2
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	6812      	ldr	r2, [r2, #0]
 8008a3e:	430b      	orrs	r3, r1
 8008a40:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a4c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a54:	041a      	lsls	r2, r3, #16
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	430a      	orrs	r2, r1
 8008a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	4413      	add	r3, r2
 8008a68:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008a72:	4b97      	ldr	r3, [pc, #604]	; (8008cd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008a74:	4013      	ands	r3, r2
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	0091      	lsls	r1, r2, #2
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	6812      	ldr	r2, [r2, #0]
 8008a7e:	430b      	orrs	r3, r1
 8008a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a8c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a94:	041a      	lsls	r2, r3, #16
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	430a      	orrs	r2, r1
 8008a9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aa4:	005b      	lsls	r3, r3, #1
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008ab4:	4b86      	ldr	r3, [pc, #536]	; (8008cd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	0091      	lsls	r1, r2, #2
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	6812      	ldr	r2, [r2, #0]
 8008ac0:	430b      	orrs	r3, r1
 8008ac2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008ace:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad6:	041a      	lsls	r2, r3, #16
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	430a      	orrs	r2, r1
 8008ade:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008aea:	fb02 f303 	mul.w	r3, r2, r3
 8008aee:	68ba      	ldr	r2, [r7, #8]
 8008af0:	4413      	add	r3, r2
 8008af2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008afc:	4b74      	ldr	r3, [pc, #464]	; (8008cd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008afe:	4013      	ands	r3, r2
 8008b00:	68ba      	ldr	r2, [r7, #8]
 8008b02:	0091      	lsls	r1, r2, #2
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	6812      	ldr	r2, [r2, #0]
 8008b08:	430b      	orrs	r3, r1
 8008b0a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b16:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b1e:	041a      	lsls	r2, r3, #16
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	430a      	orrs	r2, r1
 8008b26:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008b32:	fb02 f303 	mul.w	r3, r2, r3
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	4413      	add	r3, r2
 8008b3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8008b44:	4b62      	ldr	r3, [pc, #392]	; (8008cd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008b46:	4013      	ands	r3, r2
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	0091      	lsls	r1, r2, #2
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	6812      	ldr	r2, [r2, #0]
 8008b50:	430b      	orrs	r3, r1
 8008b52:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008b5e:	fb02 f303 	mul.w	r3, r2, r3
 8008b62:	68ba      	ldr	r2, [r7, #8]
 8008b64:	4413      	add	r3, r2
 8008b66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8008b70:	4b57      	ldr	r3, [pc, #348]	; (8008cd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008b72:	4013      	ands	r3, r2
 8008b74:	68ba      	ldr	r2, [r7, #8]
 8008b76:	0091      	lsls	r1, r2, #2
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	6812      	ldr	r2, [r2, #0]
 8008b7c:	430b      	orrs	r3, r1
 8008b7e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008b8a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b92:	041a      	lsls	r2, r3, #16
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	430a      	orrs	r2, r1
 8008b9a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ba2:	005b      	lsls	r3, r3, #1
 8008ba4:	68ba      	ldr	r2, [r7, #8]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8008bb2:	4b47      	ldr	r3, [pc, #284]	; (8008cd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008bb4:	4013      	ands	r3, r2
 8008bb6:	68ba      	ldr	r2, [r7, #8]
 8008bb8:	0091      	lsls	r1, r2, #2
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	6812      	ldr	r2, [r2, #0]
 8008bbe:	430b      	orrs	r3, r1
 8008bc0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008bcc:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bd4:	041a      	lsls	r2, r3, #16
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	430a      	orrs	r2, r1
 8008bdc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008be8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bf0:	061a      	lsls	r2, r3, #24
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	430a      	orrs	r2, r1
 8008bf8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c00:	4b34      	ldr	r3, [pc, #208]	; (8008cd4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8008c02:	4413      	add	r3, r2
 8008c04:	009a      	lsls	r2, r3, #2
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	441a      	add	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c22:	00db      	lsls	r3, r3, #3
 8008c24:	441a      	add	r2, r3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c32:	6879      	ldr	r1, [r7, #4]
 8008c34:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8008c36:	fb01 f303 	mul.w	r3, r1, r3
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	441a      	add	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c4a:	6879      	ldr	r1, [r7, #4]
 8008c4c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8008c4e:	fb01 f303 	mul.w	r3, r1, r3
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	441a      	add	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c62:	6879      	ldr	r1, [r7, #4]
 8008c64:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8008c66:	fb01 f303 	mul.w	r3, r1, r3
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	441a      	add	r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c7e:	00db      	lsls	r3, r3, #3
 8008c80:	441a      	add	r2, r3
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c92:	6879      	ldr	r1, [r7, #4]
 8008c94:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008c96:	fb01 f303 	mul.w	r3, r1, r3
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	441a      	add	r2, r3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cae:	6879      	ldr	r1, [r7, #4]
 8008cb0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008cb2:	fb01 f303 	mul.w	r3, r1, r3
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	441a      	add	r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cc6:	4a04      	ldr	r2, [pc, #16]	; (8008cd8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d915      	bls.n	8008cf8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008ccc:	e006      	b.n	8008cdc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8008cce:	bf00      	nop
 8008cd0:	ffff0003 	.word	0xffff0003
 8008cd4:	10002b00 	.word	0x10002b00
 8008cd8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ce2:	f043 0220 	orr.w	r2, r3, #32
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2203      	movs	r2, #3
 8008cf0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e010      	b.n	8008d1a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cfc:	60fb      	str	r3, [r7, #12]
 8008cfe:	e005      	b.n	8008d0c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2200      	movs	r2, #0
 8008d04:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	3304      	adds	r3, #4
 8008d0a:	60fb      	str	r3, [r7, #12]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d3f3      	bcc.n	8008d00 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3714      	adds	r7, #20
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr
 8008d26:	bf00      	nop

08008d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b089      	sub	sp, #36	; 0x24
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008d32:	2300      	movs	r3, #0
 8008d34:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008d36:	4b86      	ldr	r3, [pc, #536]	; (8008f50 <HAL_GPIO_Init+0x228>)
 8008d38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008d3a:	e18c      	b.n	8009056 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	2101      	movs	r1, #1
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	fa01 f303 	lsl.w	r3, r1, r3
 8008d48:	4013      	ands	r3, r2
 8008d4a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f000 817e 	beq.w	8009050 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	f003 0303 	and.w	r3, r3, #3
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d005      	beq.n	8008d6c <HAL_GPIO_Init+0x44>
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	f003 0303 	and.w	r3, r3, #3
 8008d68:	2b02      	cmp	r3, #2
 8008d6a:	d130      	bne.n	8008dce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	005b      	lsls	r3, r3, #1
 8008d76:	2203      	movs	r2, #3
 8008d78:	fa02 f303 	lsl.w	r3, r2, r3
 8008d7c:	43db      	mvns	r3, r3
 8008d7e:	69ba      	ldr	r2, [r7, #24]
 8008d80:	4013      	ands	r3, r2
 8008d82:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	68da      	ldr	r2, [r3, #12]
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	005b      	lsls	r3, r3, #1
 8008d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d90:	69ba      	ldr	r2, [r7, #24]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	69ba      	ldr	r2, [r7, #24]
 8008d9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008da2:	2201      	movs	r2, #1
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	fa02 f303 	lsl.w	r3, r2, r3
 8008daa:	43db      	mvns	r3, r3
 8008dac:	69ba      	ldr	r2, [r7, #24]
 8008dae:	4013      	ands	r3, r2
 8008db0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	091b      	lsrs	r3, r3, #4
 8008db8:	f003 0201 	and.w	r2, r3, #1
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008dc2:	69ba      	ldr	r2, [r7, #24]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	69ba      	ldr	r2, [r7, #24]
 8008dcc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	f003 0303 	and.w	r3, r3, #3
 8008dd6:	2b03      	cmp	r3, #3
 8008dd8:	d017      	beq.n	8008e0a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	005b      	lsls	r3, r3, #1
 8008de4:	2203      	movs	r2, #3
 8008de6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dea:	43db      	mvns	r3, r3
 8008dec:	69ba      	ldr	r2, [r7, #24]
 8008dee:	4013      	ands	r3, r2
 8008df0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	689a      	ldr	r2, [r3, #8]
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	005b      	lsls	r3, r3, #1
 8008dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8008dfe:	69ba      	ldr	r2, [r7, #24]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	69ba      	ldr	r2, [r7, #24]
 8008e08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	f003 0303 	and.w	r3, r3, #3
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d123      	bne.n	8008e5e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	08da      	lsrs	r2, r3, #3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	3208      	adds	r2, #8
 8008e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	f003 0307 	and.w	r3, r3, #7
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	220f      	movs	r2, #15
 8008e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e32:	43db      	mvns	r3, r3
 8008e34:	69ba      	ldr	r2, [r7, #24]
 8008e36:	4013      	ands	r3, r2
 8008e38:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	691a      	ldr	r2, [r3, #16]
 8008e3e:	69fb      	ldr	r3, [r7, #28]
 8008e40:	f003 0307 	and.w	r3, r3, #7
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	fa02 f303 	lsl.w	r3, r2, r3
 8008e4a:	69ba      	ldr	r2, [r7, #24]
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	08da      	lsrs	r2, r3, #3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	3208      	adds	r2, #8
 8008e58:	69b9      	ldr	r1, [r7, #24]
 8008e5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	005b      	lsls	r3, r3, #1
 8008e68:	2203      	movs	r2, #3
 8008e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e6e:	43db      	mvns	r3, r3
 8008e70:	69ba      	ldr	r2, [r7, #24]
 8008e72:	4013      	ands	r3, r2
 8008e74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	f003 0203 	and.w	r2, r3, #3
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	005b      	lsls	r3, r3, #1
 8008e82:	fa02 f303 	lsl.w	r3, r2, r3
 8008e86:	69ba      	ldr	r2, [r7, #24]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	69ba      	ldr	r2, [r7, #24]
 8008e90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	f000 80d8 	beq.w	8009050 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008ea0:	4b2c      	ldr	r3, [pc, #176]	; (8008f54 <HAL_GPIO_Init+0x22c>)
 8008ea2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008ea6:	4a2b      	ldr	r2, [pc, #172]	; (8008f54 <HAL_GPIO_Init+0x22c>)
 8008ea8:	f043 0302 	orr.w	r3, r3, #2
 8008eac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008eb0:	4b28      	ldr	r3, [pc, #160]	; (8008f54 <HAL_GPIO_Init+0x22c>)
 8008eb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008eb6:	f003 0302 	and.w	r3, r3, #2
 8008eba:	60fb      	str	r3, [r7, #12]
 8008ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008ebe:	4a26      	ldr	r2, [pc, #152]	; (8008f58 <HAL_GPIO_Init+0x230>)
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	089b      	lsrs	r3, r3, #2
 8008ec4:	3302      	adds	r3, #2
 8008ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	f003 0303 	and.w	r3, r3, #3
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	220f      	movs	r2, #15
 8008ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eda:	43db      	mvns	r3, r3
 8008edc:	69ba      	ldr	r2, [r7, #24]
 8008ede:	4013      	ands	r3, r2
 8008ee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a1d      	ldr	r2, [pc, #116]	; (8008f5c <HAL_GPIO_Init+0x234>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d04a      	beq.n	8008f80 <HAL_GPIO_Init+0x258>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4a1c      	ldr	r2, [pc, #112]	; (8008f60 <HAL_GPIO_Init+0x238>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d02b      	beq.n	8008f4a <HAL_GPIO_Init+0x222>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4a1b      	ldr	r2, [pc, #108]	; (8008f64 <HAL_GPIO_Init+0x23c>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d025      	beq.n	8008f46 <HAL_GPIO_Init+0x21e>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4a1a      	ldr	r2, [pc, #104]	; (8008f68 <HAL_GPIO_Init+0x240>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d01f      	beq.n	8008f42 <HAL_GPIO_Init+0x21a>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4a19      	ldr	r2, [pc, #100]	; (8008f6c <HAL_GPIO_Init+0x244>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d019      	beq.n	8008f3e <HAL_GPIO_Init+0x216>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a18      	ldr	r2, [pc, #96]	; (8008f70 <HAL_GPIO_Init+0x248>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d013      	beq.n	8008f3a <HAL_GPIO_Init+0x212>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4a17      	ldr	r2, [pc, #92]	; (8008f74 <HAL_GPIO_Init+0x24c>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d00d      	beq.n	8008f36 <HAL_GPIO_Init+0x20e>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4a16      	ldr	r2, [pc, #88]	; (8008f78 <HAL_GPIO_Init+0x250>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d007      	beq.n	8008f32 <HAL_GPIO_Init+0x20a>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4a15      	ldr	r2, [pc, #84]	; (8008f7c <HAL_GPIO_Init+0x254>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d101      	bne.n	8008f2e <HAL_GPIO_Init+0x206>
 8008f2a:	2309      	movs	r3, #9
 8008f2c:	e029      	b.n	8008f82 <HAL_GPIO_Init+0x25a>
 8008f2e:	230a      	movs	r3, #10
 8008f30:	e027      	b.n	8008f82 <HAL_GPIO_Init+0x25a>
 8008f32:	2307      	movs	r3, #7
 8008f34:	e025      	b.n	8008f82 <HAL_GPIO_Init+0x25a>
 8008f36:	2306      	movs	r3, #6
 8008f38:	e023      	b.n	8008f82 <HAL_GPIO_Init+0x25a>
 8008f3a:	2305      	movs	r3, #5
 8008f3c:	e021      	b.n	8008f82 <HAL_GPIO_Init+0x25a>
 8008f3e:	2304      	movs	r3, #4
 8008f40:	e01f      	b.n	8008f82 <HAL_GPIO_Init+0x25a>
 8008f42:	2303      	movs	r3, #3
 8008f44:	e01d      	b.n	8008f82 <HAL_GPIO_Init+0x25a>
 8008f46:	2302      	movs	r3, #2
 8008f48:	e01b      	b.n	8008f82 <HAL_GPIO_Init+0x25a>
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e019      	b.n	8008f82 <HAL_GPIO_Init+0x25a>
 8008f4e:	bf00      	nop
 8008f50:	58000080 	.word	0x58000080
 8008f54:	58024400 	.word	0x58024400
 8008f58:	58000400 	.word	0x58000400
 8008f5c:	58020000 	.word	0x58020000
 8008f60:	58020400 	.word	0x58020400
 8008f64:	58020800 	.word	0x58020800
 8008f68:	58020c00 	.word	0x58020c00
 8008f6c:	58021000 	.word	0x58021000
 8008f70:	58021400 	.word	0x58021400
 8008f74:	58021800 	.word	0x58021800
 8008f78:	58021c00 	.word	0x58021c00
 8008f7c:	58022400 	.word	0x58022400
 8008f80:	2300      	movs	r3, #0
 8008f82:	69fa      	ldr	r2, [r7, #28]
 8008f84:	f002 0203 	and.w	r2, r2, #3
 8008f88:	0092      	lsls	r2, r2, #2
 8008f8a:	4093      	lsls	r3, r2
 8008f8c:	69ba      	ldr	r2, [r7, #24]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008f92:	4938      	ldr	r1, [pc, #224]	; (8009074 <HAL_GPIO_Init+0x34c>)
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	089b      	lsrs	r3, r3, #2
 8008f98:	3302      	adds	r3, #2
 8008f9a:	69ba      	ldr	r2, [r7, #24]
 8008f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	43db      	mvns	r3, r3
 8008fac:	69ba      	ldr	r2, [r7, #24]
 8008fae:	4013      	ands	r3, r2
 8008fb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d003      	beq.n	8008fc6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008fbe:	69ba      	ldr	r2, [r7, #24]
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008fc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	43db      	mvns	r3, r3
 8008fda:	69ba      	ldr	r2, [r7, #24]
 8008fdc:	4013      	ands	r3, r2
 8008fde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d003      	beq.n	8008ff4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008fec:	69ba      	ldr	r2, [r7, #24]
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008ff4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	43db      	mvns	r3, r3
 8009006:	69ba      	ldr	r2, [r7, #24]
 8009008:	4013      	ands	r3, r2
 800900a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009014:	2b00      	cmp	r3, #0
 8009016:	d003      	beq.n	8009020 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8009018:	69ba      	ldr	r2, [r7, #24]
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	4313      	orrs	r3, r2
 800901e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	69ba      	ldr	r2, [r7, #24]
 8009024:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	43db      	mvns	r3, r3
 8009030:	69ba      	ldr	r2, [r7, #24]
 8009032:	4013      	ands	r3, r2
 8009034:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800903e:	2b00      	cmp	r3, #0
 8009040:	d003      	beq.n	800904a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8009042:	69ba      	ldr	r2, [r7, #24]
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	4313      	orrs	r3, r2
 8009048:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	69ba      	ldr	r2, [r7, #24]
 800904e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	3301      	adds	r3, #1
 8009054:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	fa22 f303 	lsr.w	r3, r2, r3
 8009060:	2b00      	cmp	r3, #0
 8009062:	f47f ae6b 	bne.w	8008d3c <HAL_GPIO_Init+0x14>
  }
}
 8009066:	bf00      	nop
 8009068:	bf00      	nop
 800906a:	3724      	adds	r7, #36	; 0x24
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr
 8009074:	58000400 	.word	0x58000400

08009078 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	460b      	mov	r3, r1
 8009082:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	691a      	ldr	r2, [r3, #16]
 8009088:	887b      	ldrh	r3, [r7, #2]
 800908a:	4013      	ands	r3, r2
 800908c:	2b00      	cmp	r3, #0
 800908e:	d002      	beq.n	8009096 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009090:	2301      	movs	r3, #1
 8009092:	73fb      	strb	r3, [r7, #15]
 8009094:	e001      	b.n	800909a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009096:	2300      	movs	r3, #0
 8009098:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800909a:	7bfb      	ldrb	r3, [r7, #15]
}
 800909c:	4618      	mov	r0, r3
 800909e:	3714      	adds	r7, #20
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	460b      	mov	r3, r1
 80090b2:	807b      	strh	r3, [r7, #2]
 80090b4:	4613      	mov	r3, r2
 80090b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80090b8:	787b      	ldrb	r3, [r7, #1]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d003      	beq.n	80090c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80090be:	887a      	ldrh	r2, [r7, #2]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80090c4:	e003      	b.n	80090ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80090c6:	887b      	ldrh	r3, [r7, #2]
 80090c8:	041a      	lsls	r2, r3, #16
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	619a      	str	r2, [r3, #24]
}
 80090ce:	bf00      	nop
 80090d0:	370c      	adds	r7, #12
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
	...

080090dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d101      	bne.n	80090ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	e07f      	b.n	80091ee <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d106      	bne.n	8009108 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f7fa f8ee 	bl	80032e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2224      	movs	r2, #36	; 0x24
 800910c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f022 0201 	bic.w	r2, r2, #1
 800911e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	685a      	ldr	r2, [r3, #4]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800912c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	689a      	ldr	r2, [r3, #8]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800913c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	2b01      	cmp	r3, #1
 8009144:	d107      	bne.n	8009156 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	689a      	ldr	r2, [r3, #8]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009152:	609a      	str	r2, [r3, #8]
 8009154:	e006      	b.n	8009164 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	689a      	ldr	r2, [r3, #8]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009162:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	2b02      	cmp	r3, #2
 800916a:	d104      	bne.n	8009176 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009174:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	6859      	ldr	r1, [r3, #4]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	4b1d      	ldr	r3, [pc, #116]	; (80091f8 <HAL_I2C_Init+0x11c>)
 8009182:	430b      	orrs	r3, r1
 8009184:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	68da      	ldr	r2, [r3, #12]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009194:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	691a      	ldr	r2, [r3, #16]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	695b      	ldr	r3, [r3, #20]
 800919e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	699b      	ldr	r3, [r3, #24]
 80091a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	430a      	orrs	r2, r1
 80091ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	69d9      	ldr	r1, [r3, #28]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a1a      	ldr	r2, [r3, #32]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	430a      	orrs	r2, r1
 80091be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f042 0201 	orr.w	r2, r2, #1
 80091ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2220      	movs	r2, #32
 80091da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3708      	adds	r7, #8
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	02008000 	.word	0x02008000

080091fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	699b      	ldr	r3, [r3, #24]
 800920a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009218:	2b00      	cmp	r3, #0
 800921a:	d005      	beq.n	8009228 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009220:	68ba      	ldr	r2, [r7, #8]
 8009222:	68f9      	ldr	r1, [r7, #12]
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	4798      	blx	r3
  }
}
 8009228:	bf00      	nop
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009240:	b2db      	uxtb	r3, r3
 8009242:	2b20      	cmp	r3, #32
 8009244:	d138      	bne.n	80092b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800924c:	2b01      	cmp	r3, #1
 800924e:	d101      	bne.n	8009254 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009250:	2302      	movs	r3, #2
 8009252:	e032      	b.n	80092ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2224      	movs	r2, #36	; 0x24
 8009260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f022 0201 	bic.w	r2, r2, #1
 8009272:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009282:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	6819      	ldr	r1, [r3, #0]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	683a      	ldr	r2, [r7, #0]
 8009290:	430a      	orrs	r2, r1
 8009292:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f042 0201 	orr.w	r2, r2, #1
 80092a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2220      	movs	r2, #32
 80092a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80092b4:	2300      	movs	r3, #0
 80092b6:	e000      	b.n	80092ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80092b8:	2302      	movs	r3, #2
  }
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	370c      	adds	r7, #12
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr

080092c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80092c6:	b480      	push	{r7}
 80092c8:	b085      	sub	sp, #20
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
 80092ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	2b20      	cmp	r3, #32
 80092da:	d139      	bne.n	8009350 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d101      	bne.n	80092ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80092e6:	2302      	movs	r3, #2
 80092e8:	e033      	b.n	8009352 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2201      	movs	r2, #1
 80092ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2224      	movs	r2, #36	; 0x24
 80092f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f022 0201 	bic.w	r2, r2, #1
 8009308:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009318:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	021b      	lsls	r3, r3, #8
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	4313      	orrs	r3, r2
 8009322:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	68fa      	ldr	r2, [r7, #12]
 800932a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f042 0201 	orr.w	r2, r2, #1
 800933a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2220      	movs	r2, #32
 8009340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800934c:	2300      	movs	r3, #0
 800934e:	e000      	b.n	8009352 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009350:	2302      	movs	r3, #2
  }
}
 8009352:	4618      	mov	r0, r3
 8009354:	3714      	adds	r7, #20
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr

0800935e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800935e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009360:	b08f      	sub	sp, #60	; 0x3c
 8009362:	af0a      	add	r7, sp, #40	; 0x28
 8009364:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d101      	bne.n	8009370 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800936c:	2301      	movs	r3, #1
 800936e:	e116      	b.n	800959e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800937c:	b2db      	uxtb	r3, r3
 800937e:	2b00      	cmp	r3, #0
 8009380:	d106      	bne.n	8009390 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f011 fb26 	bl	801a9dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2203      	movs	r2, #3
 8009394:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800939c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d102      	bne.n	80093aa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4618      	mov	r0, r3
 80093b0:	f00a fcf7 	bl	8013da2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	603b      	str	r3, [r7, #0]
 80093ba:	687e      	ldr	r6, [r7, #4]
 80093bc:	466d      	mov	r5, sp
 80093be:	f106 0410 	add.w	r4, r6, #16
 80093c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80093c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80093c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80093c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80093ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80093ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80093d2:	1d33      	adds	r3, r6, #4
 80093d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80093d6:	6838      	ldr	r0, [r7, #0]
 80093d8:	f00a fbc2 	bl	8013b60 <USB_CoreInit>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d005      	beq.n	80093ee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2202      	movs	r2, #2
 80093e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e0d7      	b.n	800959e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2100      	movs	r1, #0
 80093f4:	4618      	mov	r0, r3
 80093f6:	f00a fce5 	bl	8013dc4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093fa:	2300      	movs	r3, #0
 80093fc:	73fb      	strb	r3, [r7, #15]
 80093fe:	e04a      	b.n	8009496 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009400:	7bfa      	ldrb	r2, [r7, #15]
 8009402:	6879      	ldr	r1, [r7, #4]
 8009404:	4613      	mov	r3, r2
 8009406:	00db      	lsls	r3, r3, #3
 8009408:	4413      	add	r3, r2
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	440b      	add	r3, r1
 800940e:	333d      	adds	r3, #61	; 0x3d
 8009410:	2201      	movs	r2, #1
 8009412:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009414:	7bfa      	ldrb	r2, [r7, #15]
 8009416:	6879      	ldr	r1, [r7, #4]
 8009418:	4613      	mov	r3, r2
 800941a:	00db      	lsls	r3, r3, #3
 800941c:	4413      	add	r3, r2
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	440b      	add	r3, r1
 8009422:	333c      	adds	r3, #60	; 0x3c
 8009424:	7bfa      	ldrb	r2, [r7, #15]
 8009426:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009428:	7bfa      	ldrb	r2, [r7, #15]
 800942a:	7bfb      	ldrb	r3, [r7, #15]
 800942c:	b298      	uxth	r0, r3
 800942e:	6879      	ldr	r1, [r7, #4]
 8009430:	4613      	mov	r3, r2
 8009432:	00db      	lsls	r3, r3, #3
 8009434:	4413      	add	r3, r2
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	440b      	add	r3, r1
 800943a:	3356      	adds	r3, #86	; 0x56
 800943c:	4602      	mov	r2, r0
 800943e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009440:	7bfa      	ldrb	r2, [r7, #15]
 8009442:	6879      	ldr	r1, [r7, #4]
 8009444:	4613      	mov	r3, r2
 8009446:	00db      	lsls	r3, r3, #3
 8009448:	4413      	add	r3, r2
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	440b      	add	r3, r1
 800944e:	3340      	adds	r3, #64	; 0x40
 8009450:	2200      	movs	r2, #0
 8009452:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009454:	7bfa      	ldrb	r2, [r7, #15]
 8009456:	6879      	ldr	r1, [r7, #4]
 8009458:	4613      	mov	r3, r2
 800945a:	00db      	lsls	r3, r3, #3
 800945c:	4413      	add	r3, r2
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	440b      	add	r3, r1
 8009462:	3344      	adds	r3, #68	; 0x44
 8009464:	2200      	movs	r2, #0
 8009466:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009468:	7bfa      	ldrb	r2, [r7, #15]
 800946a:	6879      	ldr	r1, [r7, #4]
 800946c:	4613      	mov	r3, r2
 800946e:	00db      	lsls	r3, r3, #3
 8009470:	4413      	add	r3, r2
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	440b      	add	r3, r1
 8009476:	3348      	adds	r3, #72	; 0x48
 8009478:	2200      	movs	r2, #0
 800947a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800947c:	7bfa      	ldrb	r2, [r7, #15]
 800947e:	6879      	ldr	r1, [r7, #4]
 8009480:	4613      	mov	r3, r2
 8009482:	00db      	lsls	r3, r3, #3
 8009484:	4413      	add	r3, r2
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	440b      	add	r3, r1
 800948a:	334c      	adds	r3, #76	; 0x4c
 800948c:	2200      	movs	r2, #0
 800948e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009490:	7bfb      	ldrb	r3, [r7, #15]
 8009492:	3301      	adds	r3, #1
 8009494:	73fb      	strb	r3, [r7, #15]
 8009496:	7bfa      	ldrb	r2, [r7, #15]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	429a      	cmp	r2, r3
 800949e:	d3af      	bcc.n	8009400 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80094a0:	2300      	movs	r3, #0
 80094a2:	73fb      	strb	r3, [r7, #15]
 80094a4:	e044      	b.n	8009530 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80094a6:	7bfa      	ldrb	r2, [r7, #15]
 80094a8:	6879      	ldr	r1, [r7, #4]
 80094aa:	4613      	mov	r3, r2
 80094ac:	00db      	lsls	r3, r3, #3
 80094ae:	4413      	add	r3, r2
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	440b      	add	r3, r1
 80094b4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80094b8:	2200      	movs	r2, #0
 80094ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80094bc:	7bfa      	ldrb	r2, [r7, #15]
 80094be:	6879      	ldr	r1, [r7, #4]
 80094c0:	4613      	mov	r3, r2
 80094c2:	00db      	lsls	r3, r3, #3
 80094c4:	4413      	add	r3, r2
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	440b      	add	r3, r1
 80094ca:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80094ce:	7bfa      	ldrb	r2, [r7, #15]
 80094d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80094d2:	7bfa      	ldrb	r2, [r7, #15]
 80094d4:	6879      	ldr	r1, [r7, #4]
 80094d6:	4613      	mov	r3, r2
 80094d8:	00db      	lsls	r3, r3, #3
 80094da:	4413      	add	r3, r2
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	440b      	add	r3, r1
 80094e0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80094e4:	2200      	movs	r2, #0
 80094e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80094e8:	7bfa      	ldrb	r2, [r7, #15]
 80094ea:	6879      	ldr	r1, [r7, #4]
 80094ec:	4613      	mov	r3, r2
 80094ee:	00db      	lsls	r3, r3, #3
 80094f0:	4413      	add	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	440b      	add	r3, r1
 80094f6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80094fa:	2200      	movs	r2, #0
 80094fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80094fe:	7bfa      	ldrb	r2, [r7, #15]
 8009500:	6879      	ldr	r1, [r7, #4]
 8009502:	4613      	mov	r3, r2
 8009504:	00db      	lsls	r3, r3, #3
 8009506:	4413      	add	r3, r2
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	440b      	add	r3, r1
 800950c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009510:	2200      	movs	r2, #0
 8009512:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009514:	7bfa      	ldrb	r2, [r7, #15]
 8009516:	6879      	ldr	r1, [r7, #4]
 8009518:	4613      	mov	r3, r2
 800951a:	00db      	lsls	r3, r3, #3
 800951c:	4413      	add	r3, r2
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	440b      	add	r3, r1
 8009522:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009526:	2200      	movs	r2, #0
 8009528:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800952a:	7bfb      	ldrb	r3, [r7, #15]
 800952c:	3301      	adds	r3, #1
 800952e:	73fb      	strb	r3, [r7, #15]
 8009530:	7bfa      	ldrb	r2, [r7, #15]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	429a      	cmp	r2, r3
 8009538:	d3b5      	bcc.n	80094a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	603b      	str	r3, [r7, #0]
 8009540:	687e      	ldr	r6, [r7, #4]
 8009542:	466d      	mov	r5, sp
 8009544:	f106 0410 	add.w	r4, r6, #16
 8009548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800954a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800954c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800954e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009550:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009554:	e885 0003 	stmia.w	r5, {r0, r1}
 8009558:	1d33      	adds	r3, r6, #4
 800955a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800955c:	6838      	ldr	r0, [r7, #0]
 800955e:	f00a fc7d 	bl	8013e5c <USB_DevInit>
 8009562:	4603      	mov	r3, r0
 8009564:	2b00      	cmp	r3, #0
 8009566:	d005      	beq.n	8009574 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2202      	movs	r2, #2
 800956c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009570:	2301      	movs	r3, #1
 8009572:	e014      	b.n	800959e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2201      	movs	r2, #1
 8009580:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009588:	2b01      	cmp	r3, #1
 800958a:	d102      	bne.n	8009592 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f001 f96f 	bl	800a870 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4618      	mov	r0, r3
 8009598:	f00b fcbf 	bl	8014f1a <USB_DevDisconnect>

  return HAL_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3714      	adds	r7, #20
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080095a6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b084      	sub	sp, #16
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d101      	bne.n	80095c2 <HAL_PCD_Start+0x1c>
 80095be:	2302      	movs	r3, #2
 80095c0:	e022      	b.n	8009608 <HAL_PCD_Start+0x62>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2201      	movs	r2, #1
 80095c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d109      	bne.n	80095ea <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d105      	bne.n	80095ea <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4618      	mov	r0, r3
 80095f0:	f00a fbc6 	bl	8013d80 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4618      	mov	r0, r3
 80095fa:	f00b fc6d 	bl	8014ed8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009606:	2300      	movs	r3, #0
}
 8009608:	4618      	mov	r0, r3
 800960a:	3710      	adds	r7, #16
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009610:	b590      	push	{r4, r7, lr}
 8009612:	b08d      	sub	sp, #52	; 0x34
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800961e:	6a3b      	ldr	r3, [r7, #32]
 8009620:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4618      	mov	r0, r3
 8009628:	f00b fd2b 	bl	8015082 <USB_GetMode>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	f040 84b7 	bne.w	8009fa2 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4618      	mov	r0, r3
 800963a:	f00b fc8f 	bl	8014f5c <USB_ReadInterrupts>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	f000 84ad 	beq.w	8009fa0 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	0a1b      	lsrs	r3, r3, #8
 8009650:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4618      	mov	r0, r3
 8009660:	f00b fc7c 	bl	8014f5c <USB_ReadInterrupts>
 8009664:	4603      	mov	r3, r0
 8009666:	f003 0302 	and.w	r3, r3, #2
 800966a:	2b02      	cmp	r3, #2
 800966c:	d107      	bne.n	800967e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	695a      	ldr	r2, [r3, #20]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f002 0202 	and.w	r2, r2, #2
 800967c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4618      	mov	r0, r3
 8009684:	f00b fc6a 	bl	8014f5c <USB_ReadInterrupts>
 8009688:	4603      	mov	r3, r0
 800968a:	f003 0310 	and.w	r3, r3, #16
 800968e:	2b10      	cmp	r3, #16
 8009690:	d161      	bne.n	8009756 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	699a      	ldr	r2, [r3, #24]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f022 0210 	bic.w	r2, r2, #16
 80096a0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80096a2:	6a3b      	ldr	r3, [r7, #32]
 80096a4:	6a1b      	ldr	r3, [r3, #32]
 80096a6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	f003 020f 	and.w	r2, r3, #15
 80096ae:	4613      	mov	r3, r2
 80096b0:	00db      	lsls	r3, r3, #3
 80096b2:	4413      	add	r3, r2
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	4413      	add	r3, r2
 80096be:	3304      	adds	r3, #4
 80096c0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	0c5b      	lsrs	r3, r3, #17
 80096c6:	f003 030f 	and.w	r3, r3, #15
 80096ca:	2b02      	cmp	r3, #2
 80096cc:	d124      	bne.n	8009718 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80096ce:	69ba      	ldr	r2, [r7, #24]
 80096d0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80096d4:	4013      	ands	r3, r2
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d035      	beq.n	8009746 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	091b      	lsrs	r3, r3, #4
 80096e2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80096e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	461a      	mov	r2, r3
 80096ec:	6a38      	ldr	r0, [r7, #32]
 80096ee:	f00b faa1 	bl	8014c34 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	68da      	ldr	r2, [r3, #12]
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	091b      	lsrs	r3, r3, #4
 80096fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80096fe:	441a      	add	r2, r3
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	695a      	ldr	r2, [r3, #20]
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	091b      	lsrs	r3, r3, #4
 800970c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009710:	441a      	add	r2, r3
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	615a      	str	r2, [r3, #20]
 8009716:	e016      	b.n	8009746 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	0c5b      	lsrs	r3, r3, #17
 800971c:	f003 030f 	and.w	r3, r3, #15
 8009720:	2b06      	cmp	r3, #6
 8009722:	d110      	bne.n	8009746 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800972a:	2208      	movs	r2, #8
 800972c:	4619      	mov	r1, r3
 800972e:	6a38      	ldr	r0, [r7, #32]
 8009730:	f00b fa80 	bl	8014c34 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	695a      	ldr	r2, [r3, #20]
 8009738:	69bb      	ldr	r3, [r7, #24]
 800973a:	091b      	lsrs	r3, r3, #4
 800973c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009740:	441a      	add	r2, r3
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	699a      	ldr	r2, [r3, #24]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f042 0210 	orr.w	r2, r2, #16
 8009754:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4618      	mov	r0, r3
 800975c:	f00b fbfe 	bl	8014f5c <USB_ReadInterrupts>
 8009760:	4603      	mov	r3, r0
 8009762:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009766:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800976a:	f040 80a7 	bne.w	80098bc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800976e:	2300      	movs	r3, #0
 8009770:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4618      	mov	r0, r3
 8009778:	f00b fc03 	bl	8014f82 <USB_ReadDevAllOutEpInterrupt>
 800977c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800977e:	e099      	b.n	80098b4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009782:	f003 0301 	and.w	r3, r3, #1
 8009786:	2b00      	cmp	r3, #0
 8009788:	f000 808e 	beq.w	80098a8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009792:	b2d2      	uxtb	r2, r2
 8009794:	4611      	mov	r1, r2
 8009796:	4618      	mov	r0, r3
 8009798:	f00b fc27 	bl	8014fea <USB_ReadDevOutEPInterrupt>
 800979c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	f003 0301 	and.w	r3, r3, #1
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00c      	beq.n	80097c2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80097a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097aa:	015a      	lsls	r2, r3, #5
 80097ac:	69fb      	ldr	r3, [r7, #28]
 80097ae:	4413      	add	r3, r2
 80097b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097b4:	461a      	mov	r2, r3
 80097b6:	2301      	movs	r3, #1
 80097b8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80097ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 fed1 	bl	800a564 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	f003 0308 	and.w	r3, r3, #8
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00c      	beq.n	80097e6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80097cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ce:	015a      	lsls	r2, r3, #5
 80097d0:	69fb      	ldr	r3, [r7, #28]
 80097d2:	4413      	add	r3, r2
 80097d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097d8:	461a      	mov	r2, r3
 80097da:	2308      	movs	r3, #8
 80097dc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80097de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 ffa7 	bl	800a734 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	f003 0310 	and.w	r3, r3, #16
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d008      	beq.n	8009802 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80097f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f2:	015a      	lsls	r2, r3, #5
 80097f4:	69fb      	ldr	r3, [r7, #28]
 80097f6:	4413      	add	r3, r2
 80097f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097fc:	461a      	mov	r2, r3
 80097fe:	2310      	movs	r3, #16
 8009800:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	f003 0302 	and.w	r3, r3, #2
 8009808:	2b00      	cmp	r3, #0
 800980a:	d030      	beq.n	800986e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800980c:	6a3b      	ldr	r3, [r7, #32]
 800980e:	695b      	ldr	r3, [r3, #20]
 8009810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009814:	2b80      	cmp	r3, #128	; 0x80
 8009816:	d109      	bne.n	800982c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	69fa      	ldr	r2, [r7, #28]
 8009822:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009826:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800982a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800982c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800982e:	4613      	mov	r3, r2
 8009830:	00db      	lsls	r3, r3, #3
 8009832:	4413      	add	r3, r2
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	4413      	add	r3, r2
 800983e:	3304      	adds	r3, #4
 8009840:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	78db      	ldrb	r3, [r3, #3]
 8009846:	2b01      	cmp	r3, #1
 8009848:	d108      	bne.n	800985c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	2200      	movs	r2, #0
 800984e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009852:	b2db      	uxtb	r3, r3
 8009854:	4619      	mov	r1, r3
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f011 f9b8 	bl	801abcc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800985c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985e:	015a      	lsls	r2, r3, #5
 8009860:	69fb      	ldr	r3, [r7, #28]
 8009862:	4413      	add	r3, r2
 8009864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009868:	461a      	mov	r2, r3
 800986a:	2302      	movs	r3, #2
 800986c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	f003 0320 	and.w	r3, r3, #32
 8009874:	2b00      	cmp	r3, #0
 8009876:	d008      	beq.n	800988a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987a:	015a      	lsls	r2, r3, #5
 800987c:	69fb      	ldr	r3, [r7, #28]
 800987e:	4413      	add	r3, r2
 8009880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009884:	461a      	mov	r2, r3
 8009886:	2320      	movs	r3, #32
 8009888:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009890:	2b00      	cmp	r3, #0
 8009892:	d009      	beq.n	80098a8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009896:	015a      	lsls	r2, r3, #5
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	4413      	add	r3, r2
 800989c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098a0:	461a      	mov	r2, r3
 80098a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80098a6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80098a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098aa:	3301      	adds	r3, #1
 80098ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80098ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b0:	085b      	lsrs	r3, r3, #1
 80098b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80098b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f47f af62 	bne.w	8009780 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4618      	mov	r0, r3
 80098c2:	f00b fb4b 	bl	8014f5c <USB_ReadInterrupts>
 80098c6:	4603      	mov	r3, r0
 80098c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80098cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80098d0:	f040 80db 	bne.w	8009a8a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4618      	mov	r0, r3
 80098da:	f00b fb6c 	bl	8014fb6 <USB_ReadDevAllInEpInterrupt>
 80098de:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80098e0:	2300      	movs	r3, #0
 80098e2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80098e4:	e0cd      	b.n	8009a82 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80098e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e8:	f003 0301 	and.w	r3, r3, #1
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f000 80c2 	beq.w	8009a76 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098f8:	b2d2      	uxtb	r2, r2
 80098fa:	4611      	mov	r1, r2
 80098fc:	4618      	mov	r0, r3
 80098fe:	f00b fb92 	bl	8015026 <USB_ReadDevInEPInterrupt>
 8009902:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	f003 0301 	and.w	r3, r3, #1
 800990a:	2b00      	cmp	r3, #0
 800990c:	d057      	beq.n	80099be <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800990e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009910:	f003 030f 	and.w	r3, r3, #15
 8009914:	2201      	movs	r2, #1
 8009916:	fa02 f303 	lsl.w	r3, r2, r3
 800991a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	43db      	mvns	r3, r3
 8009928:	69f9      	ldr	r1, [r7, #28]
 800992a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800992e:	4013      	ands	r3, r2
 8009930:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009934:	015a      	lsls	r2, r3, #5
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	4413      	add	r3, r2
 800993a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800993e:	461a      	mov	r2, r3
 8009940:	2301      	movs	r3, #1
 8009942:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	2b01      	cmp	r3, #1
 800994a:	d132      	bne.n	80099b2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800994c:	6879      	ldr	r1, [r7, #4]
 800994e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009950:	4613      	mov	r3, r2
 8009952:	00db      	lsls	r3, r3, #3
 8009954:	4413      	add	r3, r2
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	440b      	add	r3, r1
 800995a:	3348      	adds	r3, #72	; 0x48
 800995c:	6819      	ldr	r1, [r3, #0]
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009962:	4613      	mov	r3, r2
 8009964:	00db      	lsls	r3, r3, #3
 8009966:	4413      	add	r3, r2
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	4403      	add	r3, r0
 800996c:	3344      	adds	r3, #68	; 0x44
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4419      	add	r1, r3
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009976:	4613      	mov	r3, r2
 8009978:	00db      	lsls	r3, r3, #3
 800997a:	4413      	add	r3, r2
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	4403      	add	r3, r0
 8009980:	3348      	adds	r3, #72	; 0x48
 8009982:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009986:	2b00      	cmp	r3, #0
 8009988:	d113      	bne.n	80099b2 <HAL_PCD_IRQHandler+0x3a2>
 800998a:	6879      	ldr	r1, [r7, #4]
 800998c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800998e:	4613      	mov	r3, r2
 8009990:	00db      	lsls	r3, r3, #3
 8009992:	4413      	add	r3, r2
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	440b      	add	r3, r1
 8009998:	334c      	adds	r3, #76	; 0x4c
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d108      	bne.n	80099b2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6818      	ldr	r0, [r3, #0]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80099aa:	461a      	mov	r2, r3
 80099ac:	2101      	movs	r1, #1
 80099ae:	f00b fb9b 	bl	80150e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80099b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	4619      	mov	r1, r3
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f011 f882 	bl	801aac2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	f003 0308 	and.w	r3, r3, #8
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d008      	beq.n	80099da <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80099c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ca:	015a      	lsls	r2, r3, #5
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	4413      	add	r3, r2
 80099d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099d4:	461a      	mov	r2, r3
 80099d6:	2308      	movs	r3, #8
 80099d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	f003 0310 	and.w	r3, r3, #16
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d008      	beq.n	80099f6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80099e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e6:	015a      	lsls	r2, r3, #5
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	4413      	add	r3, r2
 80099ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099f0:	461a      	mov	r2, r3
 80099f2:	2310      	movs	r3, #16
 80099f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d008      	beq.n	8009a12 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a02:	015a      	lsls	r2, r3, #5
 8009a04:	69fb      	ldr	r3, [r7, #28]
 8009a06:	4413      	add	r3, r2
 8009a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	2340      	movs	r3, #64	; 0x40
 8009a10:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	f003 0302 	and.w	r3, r3, #2
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d023      	beq.n	8009a64 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009a1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a1e:	6a38      	ldr	r0, [r7, #32]
 8009a20:	f00a fb7a 	bl	8014118 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8009a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a26:	4613      	mov	r3, r2
 8009a28:	00db      	lsls	r3, r3, #3
 8009a2a:	4413      	add	r3, r2
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	3338      	adds	r3, #56	; 0x38
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	4413      	add	r3, r2
 8009a34:	3304      	adds	r3, #4
 8009a36:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	78db      	ldrb	r3, [r3, #3]
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d108      	bne.n	8009a52 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	2200      	movs	r2, #0
 8009a44:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f011 f8cf 	bl	801abf0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a54:	015a      	lsls	r2, r3, #5
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	4413      	add	r3, r2
 8009a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a5e:	461a      	mov	r2, r3
 8009a60:	2302      	movs	r3, #2
 8009a62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d003      	beq.n	8009a76 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009a6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 fcea 	bl	800a44a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a78:	3301      	adds	r3, #1
 8009a7a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7e:	085b      	lsrs	r3, r3, #1
 8009a80:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	f47f af2e 	bne.w	80098e6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f00b fa64 	bl	8014f5c <USB_ReadInterrupts>
 8009a94:	4603      	mov	r3, r0
 8009a96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a9e:	d122      	bne.n	8009ae6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	69fa      	ldr	r2, [r7, #28]
 8009aaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009aae:	f023 0301 	bic.w	r3, r3, #1
 8009ab2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d108      	bne.n	8009ad0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009ac6:	2100      	movs	r1, #0
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 fef5 	bl	800a8b8 <HAL_PCDEx_LPM_Callback>
 8009ace:	e002      	b.n	8009ad6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f011 f86d 	bl	801abb0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	695a      	ldr	r2, [r3, #20]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009ae4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4618      	mov	r0, r3
 8009aec:	f00b fa36 	bl	8014f5c <USB_ReadInterrupts>
 8009af0:	4603      	mov	r3, r0
 8009af2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009af6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009afa:	d112      	bne.n	8009b22 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	f003 0301 	and.w	r3, r3, #1
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d102      	bne.n	8009b12 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f011 f829 	bl	801ab64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	695a      	ldr	r2, [r3, #20]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009b20:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4618      	mov	r0, r3
 8009b28:	f00b fa18 	bl	8014f5c <USB_ReadInterrupts>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b36:	d121      	bne.n	8009b7c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	695a      	ldr	r2, [r3, #20]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8009b46:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d111      	bne.n	8009b76 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2201      	movs	r2, #1
 8009b56:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b60:	089b      	lsrs	r3, r3, #2
 8009b62:	f003 020f 	and.w	r2, r3, #15
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009b6c:	2101      	movs	r1, #1
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 fea2 	bl	800a8b8 <HAL_PCDEx_LPM_Callback>
 8009b74:	e002      	b.n	8009b7c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f010 fff4 	bl	801ab64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4618      	mov	r0, r3
 8009b82:	f00b f9eb 	bl	8014f5c <USB_ReadInterrupts>
 8009b86:	4603      	mov	r3, r0
 8009b88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b90:	f040 80b7 	bne.w	8009d02 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	69fa      	ldr	r2, [r7, #28]
 8009b9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ba2:	f023 0301 	bic.w	r3, r3, #1
 8009ba6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2110      	movs	r1, #16
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f00a fab2 	bl	8014118 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bb8:	e046      	b.n	8009c48 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bbc:	015a      	lsls	r2, r3, #5
 8009bbe:	69fb      	ldr	r3, [r7, #28]
 8009bc0:	4413      	add	r3, r2
 8009bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009bcc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd0:	015a      	lsls	r2, r3, #5
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bde:	0151      	lsls	r1, r2, #5
 8009be0:	69fa      	ldr	r2, [r7, #28]
 8009be2:	440a      	add	r2, r1
 8009be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009be8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009bec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf0:	015a      	lsls	r2, r3, #5
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009c00:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c04:	015a      	lsls	r2, r3, #5
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	4413      	add	r3, r2
 8009c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c12:	0151      	lsls	r1, r2, #5
 8009c14:	69fa      	ldr	r2, [r7, #28]
 8009c16:	440a      	add	r2, r1
 8009c18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c20:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c24:	015a      	lsls	r2, r3, #5
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	4413      	add	r3, r2
 8009c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c32:	0151      	lsls	r1, r2, #5
 8009c34:	69fa      	ldr	r2, [r7, #28]
 8009c36:	440a      	add	r2, r1
 8009c38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009c40:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c44:	3301      	adds	r3, #1
 8009c46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d3b3      	bcc.n	8009bba <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c58:	69db      	ldr	r3, [r3, #28]
 8009c5a:	69fa      	ldr	r2, [r7, #28]
 8009c5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c60:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009c64:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d016      	beq.n	8009c9c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c78:	69fa      	ldr	r2, [r7, #28]
 8009c7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c7e:	f043 030b 	orr.w	r3, r3, #11
 8009c82:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c8e:	69fa      	ldr	r2, [r7, #28]
 8009c90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c94:	f043 030b 	orr.w	r3, r3, #11
 8009c98:	6453      	str	r3, [r2, #68]	; 0x44
 8009c9a:	e015      	b.n	8009cc8 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ca2:	695a      	ldr	r2, [r3, #20]
 8009ca4:	69fb      	ldr	r3, [r7, #28]
 8009ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009caa:	4619      	mov	r1, r3
 8009cac:	f242 032b 	movw	r3, #8235	; 0x202b
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cba:	691b      	ldr	r3, [r3, #16]
 8009cbc:	69fa      	ldr	r2, [r7, #28]
 8009cbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cc2:	f043 030b 	orr.w	r3, r3, #11
 8009cc6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009cc8:	69fb      	ldr	r3, [r7, #28]
 8009cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	69fa      	ldr	r2, [r7, #28]
 8009cd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cd6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009cda:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6818      	ldr	r0, [r3, #0]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	68db      	ldr	r3, [r3, #12]
 8009ce4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009cec:	461a      	mov	r2, r3
 8009cee:	f00b f9fb 	bl	80150e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	695a      	ldr	r2, [r3, #20]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009d00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4618      	mov	r0, r3
 8009d08:	f00b f928 	bl	8014f5c <USB_ReadInterrupts>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d16:	d124      	bne.n	8009d62 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f00b f9bf 	bl	80150a0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4618      	mov	r0, r3
 8009d28:	f00a fa73 	bl	8014212 <USB_GetDevSpeed>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	461a      	mov	r2, r3
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681c      	ldr	r4, [r3, #0]
 8009d38:	f001 fd88 	bl	800b84c <HAL_RCC_GetHCLKFreq>
 8009d3c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	461a      	mov	r2, r3
 8009d46:	4620      	mov	r0, r4
 8009d48:	f009 ff78 	bl	8013c3c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f010 fee0 	bl	801ab12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	695a      	ldr	r2, [r3, #20]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009d60:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4618      	mov	r0, r3
 8009d68:	f00b f8f8 	bl	8014f5c <USB_ReadInterrupts>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	f003 0308 	and.w	r3, r3, #8
 8009d72:	2b08      	cmp	r3, #8
 8009d74:	d10a      	bne.n	8009d8c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f010 febd 	bl	801aaf6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	695a      	ldr	r2, [r3, #20]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f002 0208 	and.w	r2, r2, #8
 8009d8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4618      	mov	r0, r3
 8009d92:	f00b f8e3 	bl	8014f5c <USB_ReadInterrupts>
 8009d96:	4603      	mov	r3, r0
 8009d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d9c:	2b80      	cmp	r3, #128	; 0x80
 8009d9e:	d122      	bne.n	8009de6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009da0:	6a3b      	ldr	r3, [r7, #32]
 8009da2:	699b      	ldr	r3, [r3, #24]
 8009da4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009da8:	6a3b      	ldr	r3, [r7, #32]
 8009daa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009dac:	2301      	movs	r3, #1
 8009dae:	627b      	str	r3, [r7, #36]	; 0x24
 8009db0:	e014      	b.n	8009ddc <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009db2:	6879      	ldr	r1, [r7, #4]
 8009db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009db6:	4613      	mov	r3, r2
 8009db8:	00db      	lsls	r3, r3, #3
 8009dba:	4413      	add	r3, r2
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	440b      	add	r3, r1
 8009dc0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d105      	bne.n	8009dd6 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	4619      	mov	r1, r3
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 fb09 	bl	800a3e8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd8:	3301      	adds	r3, #1
 8009dda:	627b      	str	r3, [r7, #36]	; 0x24
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d3e5      	bcc.n	8009db2 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4618      	mov	r0, r3
 8009dec:	f00b f8b6 	bl	8014f5c <USB_ReadInterrupts>
 8009df0:	4603      	mov	r3, r0
 8009df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009df6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dfa:	d13b      	bne.n	8009e74 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8009e00:	e02b      	b.n	8009e5a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e04:	015a      	lsls	r2, r3, #5
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	4413      	add	r3, r2
 8009e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009e12:	6879      	ldr	r1, [r7, #4]
 8009e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e16:	4613      	mov	r3, r2
 8009e18:	00db      	lsls	r3, r3, #3
 8009e1a:	4413      	add	r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	440b      	add	r3, r1
 8009e20:	3340      	adds	r3, #64	; 0x40
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d115      	bne.n	8009e54 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009e28:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	da12      	bge.n	8009e54 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009e2e:	6879      	ldr	r1, [r7, #4]
 8009e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e32:	4613      	mov	r3, r2
 8009e34:	00db      	lsls	r3, r3, #3
 8009e36:	4413      	add	r3, r2
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	440b      	add	r3, r1
 8009e3c:	333f      	adds	r3, #63	; 0x3f
 8009e3e:	2201      	movs	r2, #1
 8009e40:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 faca 	bl	800a3e8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e56:	3301      	adds	r3, #1
 8009e58:	627b      	str	r3, [r7, #36]	; 0x24
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d3ce      	bcc.n	8009e02 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	695a      	ldr	r2, [r3, #20]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009e72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f00b f86f 	bl	8014f5c <USB_ReadInterrupts>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e88:	d155      	bne.n	8009f36 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8009e8e:	e045      	b.n	8009f1c <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e92:	015a      	lsls	r2, r3, #5
 8009e94:	69fb      	ldr	r3, [r7, #28]
 8009e96:	4413      	add	r3, r2
 8009e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009ea0:	6879      	ldr	r1, [r7, #4]
 8009ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	00db      	lsls	r3, r3, #3
 8009ea8:	4413      	add	r3, r2
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	440b      	add	r3, r1
 8009eae:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d12e      	bne.n	8009f16 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009eb8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	da2b      	bge.n	8009f16 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8009eca:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d121      	bne.n	8009f16 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009ed2:	6879      	ldr	r1, [r7, #4]
 8009ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ed6:	4613      	mov	r3, r2
 8009ed8:	00db      	lsls	r3, r3, #3
 8009eda:	4413      	add	r3, r2
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	440b      	add	r3, r1
 8009ee0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009ee8:	6a3b      	ldr	r3, [r7, #32]
 8009eea:	699b      	ldr	r3, [r3, #24]
 8009eec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009ef0:	6a3b      	ldr	r3, [r7, #32]
 8009ef2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009ef4:	6a3b      	ldr	r3, [r7, #32]
 8009ef6:	695b      	ldr	r3, [r3, #20]
 8009ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d10a      	bne.n	8009f16 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009f00:	69fb      	ldr	r3, [r7, #28]
 8009f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	69fa      	ldr	r2, [r7, #28]
 8009f0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009f12:	6053      	str	r3, [r2, #4]
            break;
 8009f14:	e007      	b.n	8009f26 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f18:	3301      	adds	r3, #1
 8009f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d3b4      	bcc.n	8009e90 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	695a      	ldr	r2, [r3, #20]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009f34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f00b f80e 	bl	8014f5c <USB_ReadInterrupts>
 8009f40:	4603      	mov	r3, r0
 8009f42:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f4a:	d10a      	bne.n	8009f62 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f010 fe61 	bl	801ac14 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	695a      	ldr	r2, [r3, #20]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009f60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4618      	mov	r0, r3
 8009f68:	f00a fff8 	bl	8014f5c <USB_ReadInterrupts>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	f003 0304 	and.w	r3, r3, #4
 8009f72:	2b04      	cmp	r3, #4
 8009f74:	d115      	bne.n	8009fa2 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009f7e:	69bb      	ldr	r3, [r7, #24]
 8009f80:	f003 0304 	and.w	r3, r3, #4
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d002      	beq.n	8009f8e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f010 fe51 	bl	801ac30 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	6859      	ldr	r1, [r3, #4]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	69ba      	ldr	r2, [r7, #24]
 8009f9a:	430a      	orrs	r2, r1
 8009f9c:	605a      	str	r2, [r3, #4]
 8009f9e:	e000      	b.n	8009fa2 <HAL_PCD_IRQHandler+0x992>
      return;
 8009fa0:	bf00      	nop
    }
  }
}
 8009fa2:	3734      	adds	r7, #52	; 0x34
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd90      	pop	{r4, r7, pc}

08009fa8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	d101      	bne.n	8009fc2 <HAL_PCD_SetAddress+0x1a>
 8009fbe:	2302      	movs	r3, #2
 8009fc0:	e013      	b.n	8009fea <HAL_PCD_SetAddress+0x42>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	78fa      	ldrb	r2, [r7, #3]
 8009fce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	78fa      	ldrb	r2, [r7, #3]
 8009fd8:	4611      	mov	r1, r2
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f00a ff56 	bl	8014e8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3708      	adds	r7, #8
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009ff2:	b580      	push	{r7, lr}
 8009ff4:	b084      	sub	sp, #16
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
 8009ffa:	4608      	mov	r0, r1
 8009ffc:	4611      	mov	r1, r2
 8009ffe:	461a      	mov	r2, r3
 800a000:	4603      	mov	r3, r0
 800a002:	70fb      	strb	r3, [r7, #3]
 800a004:	460b      	mov	r3, r1
 800a006:	803b      	strh	r3, [r7, #0]
 800a008:	4613      	mov	r3, r2
 800a00a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a00c:	2300      	movs	r3, #0
 800a00e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a010:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a014:	2b00      	cmp	r3, #0
 800a016:	da0f      	bge.n	800a038 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a018:	78fb      	ldrb	r3, [r7, #3]
 800a01a:	f003 020f 	and.w	r2, r3, #15
 800a01e:	4613      	mov	r3, r2
 800a020:	00db      	lsls	r3, r3, #3
 800a022:	4413      	add	r3, r2
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	3338      	adds	r3, #56	; 0x38
 800a028:	687a      	ldr	r2, [r7, #4]
 800a02a:	4413      	add	r3, r2
 800a02c:	3304      	adds	r3, #4
 800a02e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2201      	movs	r2, #1
 800a034:	705a      	strb	r2, [r3, #1]
 800a036:	e00f      	b.n	800a058 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a038:	78fb      	ldrb	r3, [r7, #3]
 800a03a:	f003 020f 	and.w	r2, r3, #15
 800a03e:	4613      	mov	r3, r2
 800a040:	00db      	lsls	r3, r3, #3
 800a042:	4413      	add	r3, r2
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a04a:	687a      	ldr	r2, [r7, #4]
 800a04c:	4413      	add	r3, r2
 800a04e:	3304      	adds	r3, #4
 800a050:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2200      	movs	r2, #0
 800a056:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a058:	78fb      	ldrb	r3, [r7, #3]
 800a05a:	f003 030f 	and.w	r3, r3, #15
 800a05e:	b2da      	uxtb	r2, r3
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a064:	883a      	ldrh	r2, [r7, #0]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	78ba      	ldrb	r2, [r7, #2]
 800a06e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	785b      	ldrb	r3, [r3, #1]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d004      	beq.n	800a082 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	b29a      	uxth	r2, r3
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a082:	78bb      	ldrb	r3, [r7, #2]
 800a084:	2b02      	cmp	r3, #2
 800a086:	d102      	bne.n	800a08e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a094:	2b01      	cmp	r3, #1
 800a096:	d101      	bne.n	800a09c <HAL_PCD_EP_Open+0xaa>
 800a098:	2302      	movs	r3, #2
 800a09a:	e00e      	b.n	800a0ba <HAL_PCD_EP_Open+0xc8>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	68f9      	ldr	r1, [r7, #12]
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f00a f8d6 	bl	801425c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800a0b8:	7afb      	ldrb	r3, [r7, #11]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b084      	sub	sp, #16
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a0ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	da0f      	bge.n	800a0f6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a0d6:	78fb      	ldrb	r3, [r7, #3]
 800a0d8:	f003 020f 	and.w	r2, r3, #15
 800a0dc:	4613      	mov	r3, r2
 800a0de:	00db      	lsls	r3, r3, #3
 800a0e0:	4413      	add	r3, r2
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	3338      	adds	r3, #56	; 0x38
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	3304      	adds	r3, #4
 800a0ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	705a      	strb	r2, [r3, #1]
 800a0f4:	e00f      	b.n	800a116 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a0f6:	78fb      	ldrb	r3, [r7, #3]
 800a0f8:	f003 020f 	and.w	r2, r3, #15
 800a0fc:	4613      	mov	r3, r2
 800a0fe:	00db      	lsls	r3, r3, #3
 800a100:	4413      	add	r3, r2
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	4413      	add	r3, r2
 800a10c:	3304      	adds	r3, #4
 800a10e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2200      	movs	r2, #0
 800a114:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a116:	78fb      	ldrb	r3, [r7, #3]
 800a118:	f003 030f 	and.w	r3, r3, #15
 800a11c:	b2da      	uxtb	r2, r3
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d101      	bne.n	800a130 <HAL_PCD_EP_Close+0x6e>
 800a12c:	2302      	movs	r3, #2
 800a12e:	e00e      	b.n	800a14e <HAL_PCD_EP_Close+0x8c>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	68f9      	ldr	r1, [r7, #12]
 800a13e:	4618      	mov	r0, r3
 800a140:	f00a f914 	bl	801436c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800a14c:	2300      	movs	r3, #0
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3710      	adds	r7, #16
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a156:	b580      	push	{r7, lr}
 800a158:	b086      	sub	sp, #24
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	60f8      	str	r0, [r7, #12]
 800a15e:	607a      	str	r2, [r7, #4]
 800a160:	603b      	str	r3, [r7, #0]
 800a162:	460b      	mov	r3, r1
 800a164:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a166:	7afb      	ldrb	r3, [r7, #11]
 800a168:	f003 020f 	and.w	r2, r3, #15
 800a16c:	4613      	mov	r3, r2
 800a16e:	00db      	lsls	r3, r3, #3
 800a170:	4413      	add	r3, r2
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a178:	68fa      	ldr	r2, [r7, #12]
 800a17a:	4413      	add	r3, r2
 800a17c:	3304      	adds	r3, #4
 800a17e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	683a      	ldr	r2, [r7, #0]
 800a18a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	2200      	movs	r2, #0
 800a190:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	2200      	movs	r2, #0
 800a196:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a198:	7afb      	ldrb	r3, [r7, #11]
 800a19a:	f003 030f 	and.w	r3, r3, #15
 800a19e:	b2da      	uxtb	r2, r3
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	68db      	ldr	r3, [r3, #12]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d102      	bne.n	800a1b2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6818      	ldr	r0, [r3, #0]
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	68db      	ldr	r3, [r3, #12]
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	461a      	mov	r2, r3
 800a1be:	6979      	ldr	r1, [r7, #20]
 800a1c0:	f00a f9b0 	bl	8014524 <USB_EPStartXfer>

  return HAL_OK;
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3718      	adds	r7, #24
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a1ce:	b480      	push	{r7}
 800a1d0:	b083      	sub	sp, #12
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a1da:	78fb      	ldrb	r3, [r7, #3]
 800a1dc:	f003 020f 	and.w	r2, r3, #15
 800a1e0:	6879      	ldr	r1, [r7, #4]
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	00db      	lsls	r3, r3, #3
 800a1e6:	4413      	add	r3, r2
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	440b      	add	r3, r1
 800a1ec:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800a1f0:	681b      	ldr	r3, [r3, #0]
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	370c      	adds	r7, #12
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr

0800a1fe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b086      	sub	sp, #24
 800a202:	af00      	add	r7, sp, #0
 800a204:	60f8      	str	r0, [r7, #12]
 800a206:	607a      	str	r2, [r7, #4]
 800a208:	603b      	str	r3, [r7, #0]
 800a20a:	460b      	mov	r3, r1
 800a20c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a20e:	7afb      	ldrb	r3, [r7, #11]
 800a210:	f003 020f 	and.w	r2, r3, #15
 800a214:	4613      	mov	r3, r2
 800a216:	00db      	lsls	r3, r3, #3
 800a218:	4413      	add	r3, r2
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	3338      	adds	r3, #56	; 0x38
 800a21e:	68fa      	ldr	r2, [r7, #12]
 800a220:	4413      	add	r3, r2
 800a222:	3304      	adds	r3, #4
 800a224:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	683a      	ldr	r2, [r7, #0]
 800a230:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	2200      	movs	r2, #0
 800a236:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	2201      	movs	r2, #1
 800a23c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a23e:	7afb      	ldrb	r3, [r7, #11]
 800a240:	f003 030f 	and.w	r3, r3, #15
 800a244:	b2da      	uxtb	r2, r3
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d102      	bne.n	800a258 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	6818      	ldr	r0, [r3, #0]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	b2db      	uxtb	r3, r3
 800a262:	461a      	mov	r2, r3
 800a264:	6979      	ldr	r1, [r7, #20]
 800a266:	f00a f95d 	bl	8014524 <USB_EPStartXfer>

  return HAL_OK;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3718      	adds	r7, #24
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	460b      	mov	r3, r1
 800a27e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a280:	78fb      	ldrb	r3, [r7, #3]
 800a282:	f003 020f 	and.w	r2, r3, #15
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d901      	bls.n	800a292 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a28e:	2301      	movs	r3, #1
 800a290:	e050      	b.n	800a334 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a292:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a296:	2b00      	cmp	r3, #0
 800a298:	da0f      	bge.n	800a2ba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a29a:	78fb      	ldrb	r3, [r7, #3]
 800a29c:	f003 020f 	and.w	r2, r3, #15
 800a2a0:	4613      	mov	r3, r2
 800a2a2:	00db      	lsls	r3, r3, #3
 800a2a4:	4413      	add	r3, r2
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	3338      	adds	r3, #56	; 0x38
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	3304      	adds	r3, #4
 800a2b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	705a      	strb	r2, [r3, #1]
 800a2b8:	e00d      	b.n	800a2d6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a2ba:	78fa      	ldrb	r2, [r7, #3]
 800a2bc:	4613      	mov	r3, r2
 800a2be:	00db      	lsls	r3, r3, #3
 800a2c0:	4413      	add	r3, r2
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	4413      	add	r3, r2
 800a2cc:	3304      	adds	r3, #4
 800a2ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a2dc:	78fb      	ldrb	r3, [r7, #3]
 800a2de:	f003 030f 	and.w	r3, r3, #15
 800a2e2:	b2da      	uxtb	r2, r3
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	d101      	bne.n	800a2f6 <HAL_PCD_EP_SetStall+0x82>
 800a2f2:	2302      	movs	r3, #2
 800a2f4:	e01e      	b.n	800a334 <HAL_PCD_EP_SetStall+0xc0>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	68f9      	ldr	r1, [r7, #12]
 800a304:	4618      	mov	r0, r3
 800a306:	f00a fced 	bl	8014ce4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a30a:	78fb      	ldrb	r3, [r7, #3]
 800a30c:	f003 030f 	and.w	r3, r3, #15
 800a310:	2b00      	cmp	r3, #0
 800a312:	d10a      	bne.n	800a32a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6818      	ldr	r0, [r3, #0]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	b2d9      	uxtb	r1, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a324:	461a      	mov	r2, r3
 800a326:	f00a fedf 	bl	80150e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2200      	movs	r2, #0
 800a32e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a332:	2300      	movs	r3, #0
}
 800a334:	4618      	mov	r0, r3
 800a336:	3710      	adds	r7, #16
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	460b      	mov	r3, r1
 800a346:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a348:	78fb      	ldrb	r3, [r7, #3]
 800a34a:	f003 020f 	and.w	r2, r3, #15
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	429a      	cmp	r2, r3
 800a354:	d901      	bls.n	800a35a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a356:	2301      	movs	r3, #1
 800a358:	e042      	b.n	800a3e0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a35a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	da0f      	bge.n	800a382 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a362:	78fb      	ldrb	r3, [r7, #3]
 800a364:	f003 020f 	and.w	r2, r3, #15
 800a368:	4613      	mov	r3, r2
 800a36a:	00db      	lsls	r3, r3, #3
 800a36c:	4413      	add	r3, r2
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	3338      	adds	r3, #56	; 0x38
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	4413      	add	r3, r2
 800a376:	3304      	adds	r3, #4
 800a378:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2201      	movs	r2, #1
 800a37e:	705a      	strb	r2, [r3, #1]
 800a380:	e00f      	b.n	800a3a2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a382:	78fb      	ldrb	r3, [r7, #3]
 800a384:	f003 020f 	and.w	r2, r3, #15
 800a388:	4613      	mov	r3, r2
 800a38a:	00db      	lsls	r3, r3, #3
 800a38c:	4413      	add	r3, r2
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	4413      	add	r3, r2
 800a398:	3304      	adds	r3, #4
 800a39a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a3a8:	78fb      	ldrb	r3, [r7, #3]
 800a3aa:	f003 030f 	and.w	r3, r3, #15
 800a3ae:	b2da      	uxtb	r2, r3
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d101      	bne.n	800a3c2 <HAL_PCD_EP_ClrStall+0x86>
 800a3be:	2302      	movs	r3, #2
 800a3c0:	e00e      	b.n	800a3e0 <HAL_PCD_EP_ClrStall+0xa4>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	68f9      	ldr	r1, [r7, #12]
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f00a fcf5 	bl	8014dc0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a3de:	2300      	movs	r3, #0
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3710      	adds	r7, #16
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a3f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	da0c      	bge.n	800a416 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a3fc:	78fb      	ldrb	r3, [r7, #3]
 800a3fe:	f003 020f 	and.w	r2, r3, #15
 800a402:	4613      	mov	r3, r2
 800a404:	00db      	lsls	r3, r3, #3
 800a406:	4413      	add	r3, r2
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	3338      	adds	r3, #56	; 0x38
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	4413      	add	r3, r2
 800a410:	3304      	adds	r3, #4
 800a412:	60fb      	str	r3, [r7, #12]
 800a414:	e00c      	b.n	800a430 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a416:	78fb      	ldrb	r3, [r7, #3]
 800a418:	f003 020f 	and.w	r2, r3, #15
 800a41c:	4613      	mov	r3, r2
 800a41e:	00db      	lsls	r3, r3, #3
 800a420:	4413      	add	r3, r2
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	4413      	add	r3, r2
 800a42c:	3304      	adds	r3, #4
 800a42e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	68f9      	ldr	r1, [r7, #12]
 800a436:	4618      	mov	r0, r3
 800a438:	f00a fb14 	bl	8014a64 <USB_EPStopXfer>
 800a43c:	4603      	mov	r3, r0
 800a43e:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a440:	7afb      	ldrb	r3, [r7, #11]
}
 800a442:	4618      	mov	r0, r3
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b08a      	sub	sp, #40	; 0x28
 800a44e:	af02      	add	r7, sp, #8
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a45e:	683a      	ldr	r2, [r7, #0]
 800a460:	4613      	mov	r3, r2
 800a462:	00db      	lsls	r3, r3, #3
 800a464:	4413      	add	r3, r2
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	3338      	adds	r3, #56	; 0x38
 800a46a:	687a      	ldr	r2, [r7, #4]
 800a46c:	4413      	add	r3, r2
 800a46e:	3304      	adds	r3, #4
 800a470:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	695a      	ldr	r2, [r3, #20]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	691b      	ldr	r3, [r3, #16]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d901      	bls.n	800a482 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
 800a480:	e06c      	b.n	800a55c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	691a      	ldr	r2, [r3, #16]
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	695b      	ldr	r3, [r3, #20]
 800a48a:	1ad3      	subs	r3, r2, r3
 800a48c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	69fa      	ldr	r2, [r7, #28]
 800a494:	429a      	cmp	r2, r3
 800a496:	d902      	bls.n	800a49e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a49e:	69fb      	ldr	r3, [r7, #28]
 800a4a0:	3303      	adds	r3, #3
 800a4a2:	089b      	lsrs	r3, r3, #2
 800a4a4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a4a6:	e02b      	b.n	800a500 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	691a      	ldr	r2, [r3, #16]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	695b      	ldr	r3, [r3, #20]
 800a4b0:	1ad3      	subs	r3, r2, r3
 800a4b2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	69fa      	ldr	r2, [r7, #28]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d902      	bls.n	800a4c4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	689b      	ldr	r3, [r3, #8]
 800a4c2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a4c4:	69fb      	ldr	r3, [r7, #28]
 800a4c6:	3303      	adds	r3, #3
 800a4c8:	089b      	lsrs	r3, r3, #2
 800a4ca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	68d9      	ldr	r1, [r3, #12]
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	b2da      	uxtb	r2, r3
 800a4d4:	69fb      	ldr	r3, [r7, #28]
 800a4d6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	9300      	str	r3, [sp, #0]
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	6978      	ldr	r0, [r7, #20]
 800a4e4:	f00a fb68 	bl	8014bb8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	68da      	ldr	r2, [r3, #12]
 800a4ec:	69fb      	ldr	r3, [r7, #28]
 800a4ee:	441a      	add	r2, r3
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	695a      	ldr	r2, [r3, #20]
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	441a      	add	r2, r3
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	015a      	lsls	r2, r3, #5
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	4413      	add	r3, r2
 800a508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a50c:	699b      	ldr	r3, [r3, #24]
 800a50e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a510:	69ba      	ldr	r2, [r7, #24]
 800a512:	429a      	cmp	r2, r3
 800a514:	d809      	bhi.n	800a52a <PCD_WriteEmptyTxFifo+0xe0>
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	695a      	ldr	r2, [r3, #20]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a51e:	429a      	cmp	r2, r3
 800a520:	d203      	bcs.n	800a52a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	691b      	ldr	r3, [r3, #16]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d1be      	bne.n	800a4a8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	691a      	ldr	r2, [r3, #16]
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	695b      	ldr	r3, [r3, #20]
 800a532:	429a      	cmp	r2, r3
 800a534:	d811      	bhi.n	800a55a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	f003 030f 	and.w	r3, r3, #15
 800a53c:	2201      	movs	r2, #1
 800a53e:	fa02 f303 	lsl.w	r3, r2, r3
 800a542:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a54a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	43db      	mvns	r3, r3
 800a550:	6939      	ldr	r1, [r7, #16]
 800a552:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a556:	4013      	ands	r3, r2
 800a558:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a55a:	2300      	movs	r3, #0
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3720      	adds	r7, #32
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b088      	sub	sp, #32
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a578:	69fb      	ldr	r3, [r7, #28]
 800a57a:	333c      	adds	r3, #60	; 0x3c
 800a57c:	3304      	adds	r3, #4
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	015a      	lsls	r2, r3, #5
 800a586:	69bb      	ldr	r3, [r7, #24]
 800a588:	4413      	add	r3, r2
 800a58a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	2b01      	cmp	r3, #1
 800a598:	d17b      	bne.n	800a692 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	f003 0308 	and.w	r3, r3, #8
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d015      	beq.n	800a5d0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	4a61      	ldr	r2, [pc, #388]	; (800a72c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	f240 80b9 	bls.w	800a720 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f000 80b3 	beq.w	800a720 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	015a      	lsls	r2, r3, #5
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5cc:	6093      	str	r3, [r2, #8]
 800a5ce:	e0a7      	b.n	800a720 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	f003 0320 	and.w	r3, r3, #32
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d009      	beq.n	800a5ee <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	015a      	lsls	r2, r3, #5
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	4413      	add	r3, r2
 800a5e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	2320      	movs	r3, #32
 800a5ea:	6093      	str	r3, [r2, #8]
 800a5ec:	e098      	b.n	800a720 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	f040 8093 	bne.w	800a720 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	4a4b      	ldr	r2, [pc, #300]	; (800a72c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d90f      	bls.n	800a622 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d00a      	beq.n	800a622 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	015a      	lsls	r2, r3, #5
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	4413      	add	r3, r2
 800a614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a618:	461a      	mov	r2, r3
 800a61a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a61e:	6093      	str	r3, [r2, #8]
 800a620:	e07e      	b.n	800a720 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800a622:	683a      	ldr	r2, [r7, #0]
 800a624:	4613      	mov	r3, r2
 800a626:	00db      	lsls	r3, r3, #3
 800a628:	4413      	add	r3, r2
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a630:	687a      	ldr	r2, [r7, #4]
 800a632:	4413      	add	r3, r2
 800a634:	3304      	adds	r3, #4
 800a636:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	6a1a      	ldr	r2, [r3, #32]
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	0159      	lsls	r1, r3, #5
 800a640:	69bb      	ldr	r3, [r7, #24]
 800a642:	440b      	add	r3, r1
 800a644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a648:	691b      	ldr	r3, [r3, #16]
 800a64a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a64e:	1ad2      	subs	r2, r2, r3
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d114      	bne.n	800a684 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	691b      	ldr	r3, [r3, #16]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d109      	bne.n	800a676 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6818      	ldr	r0, [r3, #0]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a66c:	461a      	mov	r2, r3
 800a66e:	2101      	movs	r1, #1
 800a670:	f00a fd3a 	bl	80150e8 <USB_EP0_OutStart>
 800a674:	e006      	b.n	800a684 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	68da      	ldr	r2, [r3, #12]
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	695b      	ldr	r3, [r3, #20]
 800a67e:	441a      	add	r2, r3
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	b2db      	uxtb	r3, r3
 800a688:	4619      	mov	r1, r3
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f010 f9fe 	bl	801aa8c <HAL_PCD_DataOutStageCallback>
 800a690:	e046      	b.n	800a720 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	4a26      	ldr	r2, [pc, #152]	; (800a730 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d124      	bne.n	800a6e4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d00a      	beq.n	800a6ba <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	015a      	lsls	r2, r3, #5
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6b6:	6093      	str	r3, [r2, #8]
 800a6b8:	e032      	b.n	800a720 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	f003 0320 	and.w	r3, r3, #32
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d008      	beq.n	800a6d6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	015a      	lsls	r2, r3, #5
 800a6c8:	69bb      	ldr	r3, [r7, #24]
 800a6ca:	4413      	add	r3, r2
 800a6cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	2320      	movs	r3, #32
 800a6d4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	b2db      	uxtb	r3, r3
 800a6da:	4619      	mov	r1, r3
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f010 f9d5 	bl	801aa8c <HAL_PCD_DataOutStageCallback>
 800a6e2:	e01d      	b.n	800a720 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d114      	bne.n	800a714 <PCD_EP_OutXfrComplete_int+0x1b0>
 800a6ea:	6879      	ldr	r1, [r7, #4]
 800a6ec:	683a      	ldr	r2, [r7, #0]
 800a6ee:	4613      	mov	r3, r2
 800a6f0:	00db      	lsls	r3, r3, #3
 800a6f2:	4413      	add	r3, r2
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	440b      	add	r3, r1
 800a6f8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d108      	bne.n	800a714 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6818      	ldr	r0, [r3, #0]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a70c:	461a      	mov	r2, r3
 800a70e:	2100      	movs	r1, #0
 800a710:	f00a fcea 	bl	80150e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	b2db      	uxtb	r3, r3
 800a718:	4619      	mov	r1, r3
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f010 f9b6 	bl	801aa8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a720:	2300      	movs	r3, #0
}
 800a722:	4618      	mov	r0, r3
 800a724:	3720      	adds	r7, #32
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	bf00      	nop
 800a72c:	4f54300a 	.word	0x4f54300a
 800a730:	4f54310a 	.word	0x4f54310a

0800a734 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b086      	sub	sp, #24
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	333c      	adds	r3, #60	; 0x3c
 800a74c:	3304      	adds	r3, #4
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	015a      	lsls	r2, r3, #5
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	4413      	add	r3, r2
 800a75a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	4a15      	ldr	r2, [pc, #84]	; (800a7bc <PCD_EP_OutSetupPacket_int+0x88>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d90e      	bls.n	800a788 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a770:	2b00      	cmp	r3, #0
 800a772:	d009      	beq.n	800a788 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	015a      	lsls	r2, r3, #5
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	4413      	add	r3, r2
 800a77c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a780:	461a      	mov	r2, r3
 800a782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a786:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f010 f96d 	bl	801aa68 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	4a0a      	ldr	r2, [pc, #40]	; (800a7bc <PCD_EP_OutSetupPacket_int+0x88>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d90c      	bls.n	800a7b0 <PCD_EP_OutSetupPacket_int+0x7c>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	68db      	ldr	r3, [r3, #12]
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d108      	bne.n	800a7b0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6818      	ldr	r0, [r3, #0]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	2101      	movs	r1, #1
 800a7ac:	f00a fc9c 	bl	80150e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3718      	adds	r7, #24
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	4f54300a 	.word	0x4f54300a

0800a7c0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b085      	sub	sp, #20
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	70fb      	strb	r3, [r7, #3]
 800a7cc:	4613      	mov	r3, r2
 800a7ce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a7d8:	78fb      	ldrb	r3, [r7, #3]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d107      	bne.n	800a7ee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a7de:	883b      	ldrh	r3, [r7, #0]
 800a7e0:	0419      	lsls	r1, r3, #16
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	68ba      	ldr	r2, [r7, #8]
 800a7e8:	430a      	orrs	r2, r1
 800a7ea:	629a      	str	r2, [r3, #40]	; 0x28
 800a7ec:	e028      	b.n	800a840 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7f4:	0c1b      	lsrs	r3, r3, #16
 800a7f6:	68ba      	ldr	r2, [r7, #8]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	73fb      	strb	r3, [r7, #15]
 800a800:	e00d      	b.n	800a81e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	7bfb      	ldrb	r3, [r7, #15]
 800a808:	3340      	adds	r3, #64	; 0x40
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	4413      	add	r3, r2
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	0c1b      	lsrs	r3, r3, #16
 800a812:	68ba      	ldr	r2, [r7, #8]
 800a814:	4413      	add	r3, r2
 800a816:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a818:	7bfb      	ldrb	r3, [r7, #15]
 800a81a:	3301      	adds	r3, #1
 800a81c:	73fb      	strb	r3, [r7, #15]
 800a81e:	7bfa      	ldrb	r2, [r7, #15]
 800a820:	78fb      	ldrb	r3, [r7, #3]
 800a822:	3b01      	subs	r3, #1
 800a824:	429a      	cmp	r2, r3
 800a826:	d3ec      	bcc.n	800a802 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a828:	883b      	ldrh	r3, [r7, #0]
 800a82a:	0418      	lsls	r0, r3, #16
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6819      	ldr	r1, [r3, #0]
 800a830:	78fb      	ldrb	r3, [r7, #3]
 800a832:	3b01      	subs	r3, #1
 800a834:	68ba      	ldr	r2, [r7, #8]
 800a836:	4302      	orrs	r2, r0
 800a838:	3340      	adds	r3, #64	; 0x40
 800a83a:	009b      	lsls	r3, r3, #2
 800a83c:	440b      	add	r3, r1
 800a83e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a840:	2300      	movs	r3, #0
}
 800a842:	4618      	mov	r0, r3
 800a844:	3714      	adds	r7, #20
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr

0800a84e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a84e:	b480      	push	{r7}
 800a850:	b083      	sub	sp, #12
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
 800a856:	460b      	mov	r3, r1
 800a858:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	887a      	ldrh	r2, [r7, #2]
 800a860:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a862:	2300      	movs	r3, #0
}
 800a864:	4618      	mov	r0, r3
 800a866:	370c      	adds	r7, #12
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr

0800a870 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a870:	b480      	push	{r7}
 800a872:	b085      	sub	sp, #20
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2201      	movs	r2, #1
 800a882:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	699b      	ldr	r3, [r3, #24]
 800a892:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a89e:	4b05      	ldr	r3, [pc, #20]	; (800a8b4 <HAL_PCDEx_ActivateLPM+0x44>)
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	68fa      	ldr	r2, [r7, #12]
 800a8a4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a8a6:	2300      	movs	r3, #0
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3714      	adds	r7, #20
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr
 800a8b4:	10000003 	.word	0x10000003

0800a8b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a8c4:	bf00      	nop
 800a8c6:	370c      	adds	r7, #12
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b084      	sub	sp, #16
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a8d8:	4b19      	ldr	r3, [pc, #100]	; (800a940 <HAL_PWREx_ConfigSupply+0x70>)
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	f003 0304 	and.w	r3, r3, #4
 800a8e0:	2b04      	cmp	r3, #4
 800a8e2:	d00a      	beq.n	800a8fa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a8e4:	4b16      	ldr	r3, [pc, #88]	; (800a940 <HAL_PWREx_ConfigSupply+0x70>)
 800a8e6:	68db      	ldr	r3, [r3, #12]
 800a8e8:	f003 0307 	and.w	r3, r3, #7
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d001      	beq.n	800a8f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e01f      	b.n	800a936 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	e01d      	b.n	800a936 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a8fa:	4b11      	ldr	r3, [pc, #68]	; (800a940 <HAL_PWREx_ConfigSupply+0x70>)
 800a8fc:	68db      	ldr	r3, [r3, #12]
 800a8fe:	f023 0207 	bic.w	r2, r3, #7
 800a902:	490f      	ldr	r1, [pc, #60]	; (800a940 <HAL_PWREx_ConfigSupply+0x70>)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4313      	orrs	r3, r2
 800a908:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a90a:	f7f9 fcc3 	bl	8004294 <HAL_GetTick>
 800a90e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a910:	e009      	b.n	800a926 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a912:	f7f9 fcbf 	bl	8004294 <HAL_GetTick>
 800a916:	4602      	mov	r2, r0
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	1ad3      	subs	r3, r2, r3
 800a91c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a920:	d901      	bls.n	800a926 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a922:	2301      	movs	r3, #1
 800a924:	e007      	b.n	800a936 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a926:	4b06      	ldr	r3, [pc, #24]	; (800a940 <HAL_PWREx_ConfigSupply+0x70>)
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a92e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a932:	d1ee      	bne.n	800a912 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3710      	adds	r7, #16
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	58024800 	.word	0x58024800

0800a944 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800a944:	b480      	push	{r7}
 800a946:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a948:	4b05      	ldr	r3, [pc, #20]	; (800a960 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a94a:	68db      	ldr	r3, [r3, #12]
 800a94c:	4a04      	ldr	r2, [pc, #16]	; (800a960 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a94e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a952:	60d3      	str	r3, [r2, #12]
}
 800a954:	bf00      	nop
 800a956:	46bd      	mov	sp, r7
 800a958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95c:	4770      	bx	lr
 800a95e:	bf00      	nop
 800a960:	58024800 	.word	0x58024800

0800a964 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b08c      	sub	sp, #48	; 0x30
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d101      	bne.n	800a976 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a972:	2301      	movs	r3, #1
 800a974:	e3c8      	b.n	800b108 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f003 0301 	and.w	r3, r3, #1
 800a97e:	2b00      	cmp	r3, #0
 800a980:	f000 8087 	beq.w	800aa92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a984:	4b88      	ldr	r3, [pc, #544]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800a986:	691b      	ldr	r3, [r3, #16]
 800a988:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a98c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a98e:	4b86      	ldr	r3, [pc, #536]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800a990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a992:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a996:	2b10      	cmp	r3, #16
 800a998:	d007      	beq.n	800a9aa <HAL_RCC_OscConfig+0x46>
 800a99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a99c:	2b18      	cmp	r3, #24
 800a99e:	d110      	bne.n	800a9c2 <HAL_RCC_OscConfig+0x5e>
 800a9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a2:	f003 0303 	and.w	r3, r3, #3
 800a9a6:	2b02      	cmp	r3, #2
 800a9a8:	d10b      	bne.n	800a9c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a9aa:	4b7f      	ldr	r3, [pc, #508]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d06c      	beq.n	800aa90 <HAL_RCC_OscConfig+0x12c>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d168      	bne.n	800aa90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e3a2      	b.n	800b108 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9ca:	d106      	bne.n	800a9da <HAL_RCC_OscConfig+0x76>
 800a9cc:	4b76      	ldr	r3, [pc, #472]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a75      	ldr	r2, [pc, #468]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800a9d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9d6:	6013      	str	r3, [r2, #0]
 800a9d8:	e02e      	b.n	800aa38 <HAL_RCC_OscConfig+0xd4>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d10c      	bne.n	800a9fc <HAL_RCC_OscConfig+0x98>
 800a9e2:	4b71      	ldr	r3, [pc, #452]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	4a70      	ldr	r2, [pc, #448]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800a9e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9ec:	6013      	str	r3, [r2, #0]
 800a9ee:	4b6e      	ldr	r3, [pc, #440]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4a6d      	ldr	r2, [pc, #436]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800a9f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a9f8:	6013      	str	r3, [r2, #0]
 800a9fa:	e01d      	b.n	800aa38 <HAL_RCC_OscConfig+0xd4>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aa04:	d10c      	bne.n	800aa20 <HAL_RCC_OscConfig+0xbc>
 800aa06:	4b68      	ldr	r3, [pc, #416]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4a67      	ldr	r2, [pc, #412]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800aa0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa10:	6013      	str	r3, [r2, #0]
 800aa12:	4b65      	ldr	r3, [pc, #404]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4a64      	ldr	r2, [pc, #400]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800aa18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa1c:	6013      	str	r3, [r2, #0]
 800aa1e:	e00b      	b.n	800aa38 <HAL_RCC_OscConfig+0xd4>
 800aa20:	4b61      	ldr	r3, [pc, #388]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4a60      	ldr	r2, [pc, #384]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800aa26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa2a:	6013      	str	r3, [r2, #0]
 800aa2c:	4b5e      	ldr	r3, [pc, #376]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4a5d      	ldr	r2, [pc, #372]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800aa32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aa36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d013      	beq.n	800aa68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa40:	f7f9 fc28 	bl	8004294 <HAL_GetTick>
 800aa44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aa46:	e008      	b.n	800aa5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aa48:	f7f9 fc24 	bl	8004294 <HAL_GetTick>
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa50:	1ad3      	subs	r3, r2, r3
 800aa52:	2b64      	cmp	r3, #100	; 0x64
 800aa54:	d901      	bls.n	800aa5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800aa56:	2303      	movs	r3, #3
 800aa58:	e356      	b.n	800b108 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aa5a:	4b53      	ldr	r3, [pc, #332]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d0f0      	beq.n	800aa48 <HAL_RCC_OscConfig+0xe4>
 800aa66:	e014      	b.n	800aa92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa68:	f7f9 fc14 	bl	8004294 <HAL_GetTick>
 800aa6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800aa6e:	e008      	b.n	800aa82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aa70:	f7f9 fc10 	bl	8004294 <HAL_GetTick>
 800aa74:	4602      	mov	r2, r0
 800aa76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa78:	1ad3      	subs	r3, r2, r3
 800aa7a:	2b64      	cmp	r3, #100	; 0x64
 800aa7c:	d901      	bls.n	800aa82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800aa7e:	2303      	movs	r3, #3
 800aa80:	e342      	b.n	800b108 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800aa82:	4b49      	ldr	r3, [pc, #292]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d1f0      	bne.n	800aa70 <HAL_RCC_OscConfig+0x10c>
 800aa8e:	e000      	b.n	800aa92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f003 0302 	and.w	r3, r3, #2
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	f000 808c 	beq.w	800abb8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aaa0:	4b41      	ldr	r3, [pc, #260]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800aaa2:	691b      	ldr	r3, [r3, #16]
 800aaa4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aaa8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aaaa:	4b3f      	ldr	r3, [pc, #252]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800aaac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800aab0:	6a3b      	ldr	r3, [r7, #32]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d007      	beq.n	800aac6 <HAL_RCC_OscConfig+0x162>
 800aab6:	6a3b      	ldr	r3, [r7, #32]
 800aab8:	2b18      	cmp	r3, #24
 800aaba:	d137      	bne.n	800ab2c <HAL_RCC_OscConfig+0x1c8>
 800aabc:	69fb      	ldr	r3, [r7, #28]
 800aabe:	f003 0303 	and.w	r3, r3, #3
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d132      	bne.n	800ab2c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aac6:	4b38      	ldr	r3, [pc, #224]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f003 0304 	and.w	r3, r3, #4
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d005      	beq.n	800aade <HAL_RCC_OscConfig+0x17a>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d101      	bne.n	800aade <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800aada:	2301      	movs	r3, #1
 800aadc:	e314      	b.n	800b108 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aade:	4b32      	ldr	r3, [pc, #200]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f023 0219 	bic.w	r2, r3, #25
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	68db      	ldr	r3, [r3, #12]
 800aaea:	492f      	ldr	r1, [pc, #188]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800aaec:	4313      	orrs	r3, r2
 800aaee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaf0:	f7f9 fbd0 	bl	8004294 <HAL_GetTick>
 800aaf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aaf6:	e008      	b.n	800ab0a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aaf8:	f7f9 fbcc 	bl	8004294 <HAL_GetTick>
 800aafc:	4602      	mov	r2, r0
 800aafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab00:	1ad3      	subs	r3, r2, r3
 800ab02:	2b02      	cmp	r3, #2
 800ab04:	d901      	bls.n	800ab0a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800ab06:	2303      	movs	r3, #3
 800ab08:	e2fe      	b.n	800b108 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ab0a:	4b27      	ldr	r3, [pc, #156]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f003 0304 	and.w	r3, r3, #4
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d0f0      	beq.n	800aaf8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab16:	4b24      	ldr	r3, [pc, #144]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	691b      	ldr	r3, [r3, #16]
 800ab22:	061b      	lsls	r3, r3, #24
 800ab24:	4920      	ldr	r1, [pc, #128]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800ab26:	4313      	orrs	r3, r2
 800ab28:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ab2a:	e045      	b.n	800abb8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	68db      	ldr	r3, [r3, #12]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d026      	beq.n	800ab82 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ab34:	4b1c      	ldr	r3, [pc, #112]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f023 0219 	bic.w	r2, r3, #25
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	4919      	ldr	r1, [pc, #100]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800ab42:	4313      	orrs	r3, r2
 800ab44:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab46:	f7f9 fba5 	bl	8004294 <HAL_GetTick>
 800ab4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ab4c:	e008      	b.n	800ab60 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab4e:	f7f9 fba1 	bl	8004294 <HAL_GetTick>
 800ab52:	4602      	mov	r2, r0
 800ab54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab56:	1ad3      	subs	r3, r2, r3
 800ab58:	2b02      	cmp	r3, #2
 800ab5a:	d901      	bls.n	800ab60 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800ab5c:	2303      	movs	r3, #3
 800ab5e:	e2d3      	b.n	800b108 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ab60:	4b11      	ldr	r3, [pc, #68]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f003 0304 	and.w	r3, r3, #4
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d0f0      	beq.n	800ab4e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab6c:	4b0e      	ldr	r3, [pc, #56]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	691b      	ldr	r3, [r3, #16]
 800ab78:	061b      	lsls	r3, r3, #24
 800ab7a:	490b      	ldr	r1, [pc, #44]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	604b      	str	r3, [r1, #4]
 800ab80:	e01a      	b.n	800abb8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ab82:	4b09      	ldr	r3, [pc, #36]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4a08      	ldr	r2, [pc, #32]	; (800aba8 <HAL_RCC_OscConfig+0x244>)
 800ab88:	f023 0301 	bic.w	r3, r3, #1
 800ab8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab8e:	f7f9 fb81 	bl	8004294 <HAL_GetTick>
 800ab92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ab94:	e00a      	b.n	800abac <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab96:	f7f9 fb7d 	bl	8004294 <HAL_GetTick>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9e:	1ad3      	subs	r3, r2, r3
 800aba0:	2b02      	cmp	r3, #2
 800aba2:	d903      	bls.n	800abac <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800aba4:	2303      	movs	r3, #3
 800aba6:	e2af      	b.n	800b108 <HAL_RCC_OscConfig+0x7a4>
 800aba8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800abac:	4b96      	ldr	r3, [pc, #600]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f003 0304 	and.w	r3, r3, #4
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d1ee      	bne.n	800ab96 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f003 0310 	and.w	r3, r3, #16
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d06a      	beq.n	800ac9a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800abc4:	4b90      	ldr	r3, [pc, #576]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800abc6:	691b      	ldr	r3, [r3, #16]
 800abc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800abcc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800abce:	4b8e      	ldr	r3, [pc, #568]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800abd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800abd4:	69bb      	ldr	r3, [r7, #24]
 800abd6:	2b08      	cmp	r3, #8
 800abd8:	d007      	beq.n	800abea <HAL_RCC_OscConfig+0x286>
 800abda:	69bb      	ldr	r3, [r7, #24]
 800abdc:	2b18      	cmp	r3, #24
 800abde:	d11b      	bne.n	800ac18 <HAL_RCC_OscConfig+0x2b4>
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	f003 0303 	and.w	r3, r3, #3
 800abe6:	2b01      	cmp	r3, #1
 800abe8:	d116      	bne.n	800ac18 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800abea:	4b87      	ldr	r3, [pc, #540]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d005      	beq.n	800ac02 <HAL_RCC_OscConfig+0x29e>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	69db      	ldr	r3, [r3, #28]
 800abfa:	2b80      	cmp	r3, #128	; 0x80
 800abfc:	d001      	beq.n	800ac02 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800abfe:	2301      	movs	r3, #1
 800ac00:	e282      	b.n	800b108 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ac02:	4b81      	ldr	r3, [pc, #516]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6a1b      	ldr	r3, [r3, #32]
 800ac0e:	061b      	lsls	r3, r3, #24
 800ac10:	497d      	ldr	r1, [pc, #500]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800ac12:	4313      	orrs	r3, r2
 800ac14:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ac16:	e040      	b.n	800ac9a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	69db      	ldr	r3, [r3, #28]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d023      	beq.n	800ac68 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800ac20:	4b79      	ldr	r3, [pc, #484]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a78      	ldr	r2, [pc, #480]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800ac26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac2c:	f7f9 fb32 	bl	8004294 <HAL_GetTick>
 800ac30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ac32:	e008      	b.n	800ac46 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ac34:	f7f9 fb2e 	bl	8004294 <HAL_GetTick>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3c:	1ad3      	subs	r3, r2, r3
 800ac3e:	2b02      	cmp	r3, #2
 800ac40:	d901      	bls.n	800ac46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800ac42:	2303      	movs	r3, #3
 800ac44:	e260      	b.n	800b108 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ac46:	4b70      	ldr	r3, [pc, #448]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d0f0      	beq.n	800ac34 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ac52:	4b6d      	ldr	r3, [pc, #436]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800ac54:	68db      	ldr	r3, [r3, #12]
 800ac56:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6a1b      	ldr	r3, [r3, #32]
 800ac5e:	061b      	lsls	r3, r3, #24
 800ac60:	4969      	ldr	r1, [pc, #420]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800ac62:	4313      	orrs	r3, r2
 800ac64:	60cb      	str	r3, [r1, #12]
 800ac66:	e018      	b.n	800ac9a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ac68:	4b67      	ldr	r3, [pc, #412]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a66      	ldr	r2, [pc, #408]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800ac6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac74:	f7f9 fb0e 	bl	8004294 <HAL_GetTick>
 800ac78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ac7a:	e008      	b.n	800ac8e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ac7c:	f7f9 fb0a 	bl	8004294 <HAL_GetTick>
 800ac80:	4602      	mov	r2, r0
 800ac82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac84:	1ad3      	subs	r3, r2, r3
 800ac86:	2b02      	cmp	r3, #2
 800ac88:	d901      	bls.n	800ac8e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800ac8a:	2303      	movs	r3, #3
 800ac8c:	e23c      	b.n	800b108 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ac8e:	4b5e      	ldr	r3, [pc, #376]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d1f0      	bne.n	800ac7c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f003 0308 	and.w	r3, r3, #8
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d036      	beq.n	800ad14 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	695b      	ldr	r3, [r3, #20]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d019      	beq.n	800ace2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800acae:	4b56      	ldr	r3, [pc, #344]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800acb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acb2:	4a55      	ldr	r2, [pc, #340]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800acb4:	f043 0301 	orr.w	r3, r3, #1
 800acb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acba:	f7f9 faeb 	bl	8004294 <HAL_GetTick>
 800acbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800acc0:	e008      	b.n	800acd4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800acc2:	f7f9 fae7 	bl	8004294 <HAL_GetTick>
 800acc6:	4602      	mov	r2, r0
 800acc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acca:	1ad3      	subs	r3, r2, r3
 800accc:	2b02      	cmp	r3, #2
 800acce:	d901      	bls.n	800acd4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800acd0:	2303      	movs	r3, #3
 800acd2:	e219      	b.n	800b108 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800acd4:	4b4c      	ldr	r3, [pc, #304]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800acd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acd8:	f003 0302 	and.w	r3, r3, #2
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d0f0      	beq.n	800acc2 <HAL_RCC_OscConfig+0x35e>
 800ace0:	e018      	b.n	800ad14 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ace2:	4b49      	ldr	r3, [pc, #292]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800ace4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ace6:	4a48      	ldr	r2, [pc, #288]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800ace8:	f023 0301 	bic.w	r3, r3, #1
 800acec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acee:	f7f9 fad1 	bl	8004294 <HAL_GetTick>
 800acf2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800acf4:	e008      	b.n	800ad08 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800acf6:	f7f9 facd 	bl	8004294 <HAL_GetTick>
 800acfa:	4602      	mov	r2, r0
 800acfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfe:	1ad3      	subs	r3, r2, r3
 800ad00:	2b02      	cmp	r3, #2
 800ad02:	d901      	bls.n	800ad08 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800ad04:	2303      	movs	r3, #3
 800ad06:	e1ff      	b.n	800b108 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ad08:	4b3f      	ldr	r3, [pc, #252]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800ad0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad0c:	f003 0302 	and.w	r3, r3, #2
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d1f0      	bne.n	800acf6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f003 0320 	and.w	r3, r3, #32
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d036      	beq.n	800ad8e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	699b      	ldr	r3, [r3, #24]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d019      	beq.n	800ad5c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ad28:	4b37      	ldr	r3, [pc, #220]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4a36      	ldr	r2, [pc, #216]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800ad2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ad32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ad34:	f7f9 faae 	bl	8004294 <HAL_GetTick>
 800ad38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ad3a:	e008      	b.n	800ad4e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ad3c:	f7f9 faaa 	bl	8004294 <HAL_GetTick>
 800ad40:	4602      	mov	r2, r0
 800ad42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad44:	1ad3      	subs	r3, r2, r3
 800ad46:	2b02      	cmp	r3, #2
 800ad48:	d901      	bls.n	800ad4e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800ad4a:	2303      	movs	r3, #3
 800ad4c:	e1dc      	b.n	800b108 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ad4e:	4b2e      	ldr	r3, [pc, #184]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d0f0      	beq.n	800ad3c <HAL_RCC_OscConfig+0x3d8>
 800ad5a:	e018      	b.n	800ad8e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ad5c:	4b2a      	ldr	r3, [pc, #168]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a29      	ldr	r2, [pc, #164]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800ad62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ad68:	f7f9 fa94 	bl	8004294 <HAL_GetTick>
 800ad6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ad6e:	e008      	b.n	800ad82 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ad70:	f7f9 fa90 	bl	8004294 <HAL_GetTick>
 800ad74:	4602      	mov	r2, r0
 800ad76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad78:	1ad3      	subs	r3, r2, r3
 800ad7a:	2b02      	cmp	r3, #2
 800ad7c:	d901      	bls.n	800ad82 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800ad7e:	2303      	movs	r3, #3
 800ad80:	e1c2      	b.n	800b108 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ad82:	4b21      	ldr	r3, [pc, #132]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d1f0      	bne.n	800ad70 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f003 0304 	and.w	r3, r3, #4
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	f000 8086 	beq.w	800aea8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ad9c:	4b1b      	ldr	r3, [pc, #108]	; (800ae0c <HAL_RCC_OscConfig+0x4a8>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a1a      	ldr	r2, [pc, #104]	; (800ae0c <HAL_RCC_OscConfig+0x4a8>)
 800ada2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ada6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ada8:	f7f9 fa74 	bl	8004294 <HAL_GetTick>
 800adac:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800adae:	e008      	b.n	800adc2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800adb0:	f7f9 fa70 	bl	8004294 <HAL_GetTick>
 800adb4:	4602      	mov	r2, r0
 800adb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb8:	1ad3      	subs	r3, r2, r3
 800adba:	2b64      	cmp	r3, #100	; 0x64
 800adbc:	d901      	bls.n	800adc2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800adbe:	2303      	movs	r3, #3
 800adc0:	e1a2      	b.n	800b108 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800adc2:	4b12      	ldr	r3, [pc, #72]	; (800ae0c <HAL_RCC_OscConfig+0x4a8>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d0f0      	beq.n	800adb0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	2b01      	cmp	r3, #1
 800add4:	d106      	bne.n	800ade4 <HAL_RCC_OscConfig+0x480>
 800add6:	4b0c      	ldr	r3, [pc, #48]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800add8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adda:	4a0b      	ldr	r2, [pc, #44]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800addc:	f043 0301 	orr.w	r3, r3, #1
 800ade0:	6713      	str	r3, [r2, #112]	; 0x70
 800ade2:	e032      	b.n	800ae4a <HAL_RCC_OscConfig+0x4e6>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d111      	bne.n	800ae10 <HAL_RCC_OscConfig+0x4ac>
 800adec:	4b06      	ldr	r3, [pc, #24]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800adee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adf0:	4a05      	ldr	r2, [pc, #20]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800adf2:	f023 0301 	bic.w	r3, r3, #1
 800adf6:	6713      	str	r3, [r2, #112]	; 0x70
 800adf8:	4b03      	ldr	r3, [pc, #12]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800adfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adfc:	4a02      	ldr	r2, [pc, #8]	; (800ae08 <HAL_RCC_OscConfig+0x4a4>)
 800adfe:	f023 0304 	bic.w	r3, r3, #4
 800ae02:	6713      	str	r3, [r2, #112]	; 0x70
 800ae04:	e021      	b.n	800ae4a <HAL_RCC_OscConfig+0x4e6>
 800ae06:	bf00      	nop
 800ae08:	58024400 	.word	0x58024400
 800ae0c:	58024800 	.word	0x58024800
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	2b05      	cmp	r3, #5
 800ae16:	d10c      	bne.n	800ae32 <HAL_RCC_OscConfig+0x4ce>
 800ae18:	4b83      	ldr	r3, [pc, #524]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800ae1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae1c:	4a82      	ldr	r2, [pc, #520]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800ae1e:	f043 0304 	orr.w	r3, r3, #4
 800ae22:	6713      	str	r3, [r2, #112]	; 0x70
 800ae24:	4b80      	ldr	r3, [pc, #512]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800ae26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae28:	4a7f      	ldr	r2, [pc, #508]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800ae2a:	f043 0301 	orr.w	r3, r3, #1
 800ae2e:	6713      	str	r3, [r2, #112]	; 0x70
 800ae30:	e00b      	b.n	800ae4a <HAL_RCC_OscConfig+0x4e6>
 800ae32:	4b7d      	ldr	r3, [pc, #500]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800ae34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae36:	4a7c      	ldr	r2, [pc, #496]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800ae38:	f023 0301 	bic.w	r3, r3, #1
 800ae3c:	6713      	str	r3, [r2, #112]	; 0x70
 800ae3e:	4b7a      	ldr	r3, [pc, #488]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800ae40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae42:	4a79      	ldr	r2, [pc, #484]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800ae44:	f023 0304 	bic.w	r3, r3, #4
 800ae48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d015      	beq.n	800ae7e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae52:	f7f9 fa1f 	bl	8004294 <HAL_GetTick>
 800ae56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ae58:	e00a      	b.n	800ae70 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae5a:	f7f9 fa1b 	bl	8004294 <HAL_GetTick>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae62:	1ad3      	subs	r3, r2, r3
 800ae64:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d901      	bls.n	800ae70 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800ae6c:	2303      	movs	r3, #3
 800ae6e:	e14b      	b.n	800b108 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ae70:	4b6d      	ldr	r3, [pc, #436]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800ae72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae74:	f003 0302 	and.w	r3, r3, #2
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d0ee      	beq.n	800ae5a <HAL_RCC_OscConfig+0x4f6>
 800ae7c:	e014      	b.n	800aea8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae7e:	f7f9 fa09 	bl	8004294 <HAL_GetTick>
 800ae82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ae84:	e00a      	b.n	800ae9c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae86:	f7f9 fa05 	bl	8004294 <HAL_GetTick>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae8e:	1ad3      	subs	r3, r2, r3
 800ae90:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d901      	bls.n	800ae9c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800ae98:	2303      	movs	r3, #3
 800ae9a:	e135      	b.n	800b108 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ae9c:	4b62      	ldr	r3, [pc, #392]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800ae9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aea0:	f003 0302 	and.w	r3, r3, #2
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d1ee      	bne.n	800ae86 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	f000 812a 	beq.w	800b106 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800aeb2:	4b5d      	ldr	r3, [pc, #372]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800aeb4:	691b      	ldr	r3, [r3, #16]
 800aeb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aeba:	2b18      	cmp	r3, #24
 800aebc:	f000 80ba 	beq.w	800b034 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec4:	2b02      	cmp	r3, #2
 800aec6:	f040 8095 	bne.w	800aff4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aeca:	4b57      	ldr	r3, [pc, #348]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a56      	ldr	r2, [pc, #344]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800aed0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aed6:	f7f9 f9dd 	bl	8004294 <HAL_GetTick>
 800aeda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aedc:	e008      	b.n	800aef0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aede:	f7f9 f9d9 	bl	8004294 <HAL_GetTick>
 800aee2:	4602      	mov	r2, r0
 800aee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee6:	1ad3      	subs	r3, r2, r3
 800aee8:	2b02      	cmp	r3, #2
 800aeea:	d901      	bls.n	800aef0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800aeec:	2303      	movs	r3, #3
 800aeee:	e10b      	b.n	800b108 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aef0:	4b4d      	ldr	r3, [pc, #308]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d1f0      	bne.n	800aede <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aefc:	4b4a      	ldr	r3, [pc, #296]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800aefe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800af00:	4b4a      	ldr	r3, [pc, #296]	; (800b02c <HAL_RCC_OscConfig+0x6c8>)
 800af02:	4013      	ands	r3, r2
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800af0c:	0112      	lsls	r2, r2, #4
 800af0e:	430a      	orrs	r2, r1
 800af10:	4945      	ldr	r1, [pc, #276]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800af12:	4313      	orrs	r3, r2
 800af14:	628b      	str	r3, [r1, #40]	; 0x28
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af1a:	3b01      	subs	r3, #1
 800af1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af24:	3b01      	subs	r3, #1
 800af26:	025b      	lsls	r3, r3, #9
 800af28:	b29b      	uxth	r3, r3
 800af2a:	431a      	orrs	r2, r3
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af30:	3b01      	subs	r3, #1
 800af32:	041b      	lsls	r3, r3, #16
 800af34:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800af38:	431a      	orrs	r2, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af3e:	3b01      	subs	r3, #1
 800af40:	061b      	lsls	r3, r3, #24
 800af42:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800af46:	4938      	ldr	r1, [pc, #224]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800af48:	4313      	orrs	r3, r2
 800af4a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800af4c:	4b36      	ldr	r3, [pc, #216]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800af4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af50:	4a35      	ldr	r2, [pc, #212]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800af52:	f023 0301 	bic.w	r3, r3, #1
 800af56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800af58:	4b33      	ldr	r3, [pc, #204]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800af5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af5c:	4b34      	ldr	r3, [pc, #208]	; (800b030 <HAL_RCC_OscConfig+0x6cc>)
 800af5e:	4013      	ands	r3, r2
 800af60:	687a      	ldr	r2, [r7, #4]
 800af62:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800af64:	00d2      	lsls	r2, r2, #3
 800af66:	4930      	ldr	r1, [pc, #192]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800af68:	4313      	orrs	r3, r2
 800af6a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800af6c:	4b2e      	ldr	r3, [pc, #184]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800af6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af70:	f023 020c 	bic.w	r2, r3, #12
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af78:	492b      	ldr	r1, [pc, #172]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800af7a:	4313      	orrs	r3, r2
 800af7c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800af7e:	4b2a      	ldr	r3, [pc, #168]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800af80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af82:	f023 0202 	bic.w	r2, r3, #2
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af8a:	4927      	ldr	r1, [pc, #156]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800af8c:	4313      	orrs	r3, r2
 800af8e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800af90:	4b25      	ldr	r3, [pc, #148]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800af92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af94:	4a24      	ldr	r2, [pc, #144]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800af96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af9c:	4b22      	ldr	r3, [pc, #136]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800af9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa0:	4a21      	ldr	r2, [pc, #132]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800afa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afa6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800afa8:	4b1f      	ldr	r3, [pc, #124]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800afaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afac:	4a1e      	ldr	r2, [pc, #120]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800afae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800afb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800afb4:	4b1c      	ldr	r3, [pc, #112]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800afb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afb8:	4a1b      	ldr	r2, [pc, #108]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800afba:	f043 0301 	orr.w	r3, r3, #1
 800afbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800afc0:	4b19      	ldr	r3, [pc, #100]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4a18      	ldr	r2, [pc, #96]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800afc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800afca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afcc:	f7f9 f962 	bl	8004294 <HAL_GetTick>
 800afd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800afd2:	e008      	b.n	800afe6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800afd4:	f7f9 f95e 	bl	8004294 <HAL_GetTick>
 800afd8:	4602      	mov	r2, r0
 800afda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afdc:	1ad3      	subs	r3, r2, r3
 800afde:	2b02      	cmp	r3, #2
 800afe0:	d901      	bls.n	800afe6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800afe2:	2303      	movs	r3, #3
 800afe4:	e090      	b.n	800b108 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800afe6:	4b10      	ldr	r3, [pc, #64]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d0f0      	beq.n	800afd4 <HAL_RCC_OscConfig+0x670>
 800aff2:	e088      	b.n	800b106 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aff4:	4b0c      	ldr	r3, [pc, #48]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	4a0b      	ldr	r2, [pc, #44]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800affa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800affe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b000:	f7f9 f948 	bl	8004294 <HAL_GetTick>
 800b004:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b006:	e008      	b.n	800b01a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b008:	f7f9 f944 	bl	8004294 <HAL_GetTick>
 800b00c:	4602      	mov	r2, r0
 800b00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b010:	1ad3      	subs	r3, r2, r3
 800b012:	2b02      	cmp	r3, #2
 800b014:	d901      	bls.n	800b01a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800b016:	2303      	movs	r3, #3
 800b018:	e076      	b.n	800b108 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b01a:	4b03      	ldr	r3, [pc, #12]	; (800b028 <HAL_RCC_OscConfig+0x6c4>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b022:	2b00      	cmp	r3, #0
 800b024:	d1f0      	bne.n	800b008 <HAL_RCC_OscConfig+0x6a4>
 800b026:	e06e      	b.n	800b106 <HAL_RCC_OscConfig+0x7a2>
 800b028:	58024400 	.word	0x58024400
 800b02c:	fffffc0c 	.word	0xfffffc0c
 800b030:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b034:	4b36      	ldr	r3, [pc, #216]	; (800b110 <HAL_RCC_OscConfig+0x7ac>)
 800b036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b038:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b03a:	4b35      	ldr	r3, [pc, #212]	; (800b110 <HAL_RCC_OscConfig+0x7ac>)
 800b03c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b03e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b044:	2b01      	cmp	r3, #1
 800b046:	d031      	beq.n	800b0ac <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	f003 0203 	and.w	r2, r3, #3
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b052:	429a      	cmp	r2, r3
 800b054:	d12a      	bne.n	800b0ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	091b      	lsrs	r3, r3, #4
 800b05a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b062:	429a      	cmp	r2, r3
 800b064:	d122      	bne.n	800b0ac <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b070:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b072:	429a      	cmp	r2, r3
 800b074:	d11a      	bne.n	800b0ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	0a5b      	lsrs	r3, r3, #9
 800b07a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b082:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b084:	429a      	cmp	r2, r3
 800b086:	d111      	bne.n	800b0ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	0c1b      	lsrs	r3, r3, #16
 800b08c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b094:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b096:	429a      	cmp	r2, r3
 800b098:	d108      	bne.n	800b0ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	0e1b      	lsrs	r3, r3, #24
 800b09e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d001      	beq.n	800b0b0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	e02b      	b.n	800b108 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b0b0:	4b17      	ldr	r3, [pc, #92]	; (800b110 <HAL_RCC_OscConfig+0x7ac>)
 800b0b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0b4:	08db      	lsrs	r3, r3, #3
 800b0b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b0ba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0c0:	693a      	ldr	r2, [r7, #16]
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d01f      	beq.n	800b106 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b0c6:	4b12      	ldr	r3, [pc, #72]	; (800b110 <HAL_RCC_OscConfig+0x7ac>)
 800b0c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ca:	4a11      	ldr	r2, [pc, #68]	; (800b110 <HAL_RCC_OscConfig+0x7ac>)
 800b0cc:	f023 0301 	bic.w	r3, r3, #1
 800b0d0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b0d2:	f7f9 f8df 	bl	8004294 <HAL_GetTick>
 800b0d6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b0d8:	bf00      	nop
 800b0da:	f7f9 f8db 	bl	8004294 <HAL_GetTick>
 800b0de:	4602      	mov	r2, r0
 800b0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d0f9      	beq.n	800b0da <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b0e6:	4b0a      	ldr	r3, [pc, #40]	; (800b110 <HAL_RCC_OscConfig+0x7ac>)
 800b0e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0ea:	4b0a      	ldr	r3, [pc, #40]	; (800b114 <HAL_RCC_OscConfig+0x7b0>)
 800b0ec:	4013      	ands	r3, r2
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b0f2:	00d2      	lsls	r2, r2, #3
 800b0f4:	4906      	ldr	r1, [pc, #24]	; (800b110 <HAL_RCC_OscConfig+0x7ac>)
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b0fa:	4b05      	ldr	r3, [pc, #20]	; (800b110 <HAL_RCC_OscConfig+0x7ac>)
 800b0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0fe:	4a04      	ldr	r2, [pc, #16]	; (800b110 <HAL_RCC_OscConfig+0x7ac>)
 800b100:	f043 0301 	orr.w	r3, r3, #1
 800b104:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b106:	2300      	movs	r3, #0
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3730      	adds	r7, #48	; 0x30
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	58024400 	.word	0x58024400
 800b114:	ffff0007 	.word	0xffff0007

0800b118 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b086      	sub	sp, #24
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d101      	bne.n	800b12c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b128:	2301      	movs	r3, #1
 800b12a:	e19c      	b.n	800b466 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b12c:	4b8a      	ldr	r3, [pc, #552]	; (800b358 <HAL_RCC_ClockConfig+0x240>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f003 030f 	and.w	r3, r3, #15
 800b134:	683a      	ldr	r2, [r7, #0]
 800b136:	429a      	cmp	r2, r3
 800b138:	d910      	bls.n	800b15c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b13a:	4b87      	ldr	r3, [pc, #540]	; (800b358 <HAL_RCC_ClockConfig+0x240>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f023 020f 	bic.w	r2, r3, #15
 800b142:	4985      	ldr	r1, [pc, #532]	; (800b358 <HAL_RCC_ClockConfig+0x240>)
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	4313      	orrs	r3, r2
 800b148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b14a:	4b83      	ldr	r3, [pc, #524]	; (800b358 <HAL_RCC_ClockConfig+0x240>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f003 030f 	and.w	r3, r3, #15
 800b152:	683a      	ldr	r2, [r7, #0]
 800b154:	429a      	cmp	r2, r3
 800b156:	d001      	beq.n	800b15c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b158:	2301      	movs	r3, #1
 800b15a:	e184      	b.n	800b466 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f003 0304 	and.w	r3, r3, #4
 800b164:	2b00      	cmp	r3, #0
 800b166:	d010      	beq.n	800b18a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	691a      	ldr	r2, [r3, #16]
 800b16c:	4b7b      	ldr	r3, [pc, #492]	; (800b35c <HAL_RCC_ClockConfig+0x244>)
 800b16e:	699b      	ldr	r3, [r3, #24]
 800b170:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b174:	429a      	cmp	r2, r3
 800b176:	d908      	bls.n	800b18a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b178:	4b78      	ldr	r3, [pc, #480]	; (800b35c <HAL_RCC_ClockConfig+0x244>)
 800b17a:	699b      	ldr	r3, [r3, #24]
 800b17c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	691b      	ldr	r3, [r3, #16]
 800b184:	4975      	ldr	r1, [pc, #468]	; (800b35c <HAL_RCC_ClockConfig+0x244>)
 800b186:	4313      	orrs	r3, r2
 800b188:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f003 0308 	and.w	r3, r3, #8
 800b192:	2b00      	cmp	r3, #0
 800b194:	d010      	beq.n	800b1b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	695a      	ldr	r2, [r3, #20]
 800b19a:	4b70      	ldr	r3, [pc, #448]	; (800b35c <HAL_RCC_ClockConfig+0x244>)
 800b19c:	69db      	ldr	r3, [r3, #28]
 800b19e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d908      	bls.n	800b1b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b1a6:	4b6d      	ldr	r3, [pc, #436]	; (800b35c <HAL_RCC_ClockConfig+0x244>)
 800b1a8:	69db      	ldr	r3, [r3, #28]
 800b1aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	695b      	ldr	r3, [r3, #20]
 800b1b2:	496a      	ldr	r1, [pc, #424]	; (800b35c <HAL_RCC_ClockConfig+0x244>)
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f003 0310 	and.w	r3, r3, #16
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d010      	beq.n	800b1e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	699a      	ldr	r2, [r3, #24]
 800b1c8:	4b64      	ldr	r3, [pc, #400]	; (800b35c <HAL_RCC_ClockConfig+0x244>)
 800b1ca:	69db      	ldr	r3, [r3, #28]
 800b1cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d908      	bls.n	800b1e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b1d4:	4b61      	ldr	r3, [pc, #388]	; (800b35c <HAL_RCC_ClockConfig+0x244>)
 800b1d6:	69db      	ldr	r3, [r3, #28]
 800b1d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	699b      	ldr	r3, [r3, #24]
 800b1e0:	495e      	ldr	r1, [pc, #376]	; (800b35c <HAL_RCC_ClockConfig+0x244>)
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f003 0320 	and.w	r3, r3, #32
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d010      	beq.n	800b214 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	69da      	ldr	r2, [r3, #28]
 800b1f6:	4b59      	ldr	r3, [pc, #356]	; (800b35c <HAL_RCC_ClockConfig+0x244>)
 800b1f8:	6a1b      	ldr	r3, [r3, #32]
 800b1fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d908      	bls.n	800b214 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b202:	4b56      	ldr	r3, [pc, #344]	; (800b35c <HAL_RCC_ClockConfig+0x244>)
 800b204:	6a1b      	ldr	r3, [r3, #32]
 800b206:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	69db      	ldr	r3, [r3, #28]
 800b20e:	4953      	ldr	r1, [pc, #332]	; (800b35c <HAL_RCC_ClockConfig+0x244>)
 800b210:	4313      	orrs	r3, r2
 800b212:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f003 0302 	and.w	r3, r3, #2
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d010      	beq.n	800b242 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	68da      	ldr	r2, [r3, #12]
 800b224:	4b4d      	ldr	r3, [pc, #308]	; (800b35c <HAL_RCC_ClockConfig+0x244>)
 800b226:	699b      	ldr	r3, [r3, #24]
 800b228:	f003 030f 	and.w	r3, r3, #15
 800b22c:	429a      	cmp	r2, r3
 800b22e:	d908      	bls.n	800b242 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b230:	4b4a      	ldr	r3, [pc, #296]	; (800b35c <HAL_RCC_ClockConfig+0x244>)
 800b232:	699b      	ldr	r3, [r3, #24]
 800b234:	f023 020f 	bic.w	r2, r3, #15
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	68db      	ldr	r3, [r3, #12]
 800b23c:	4947      	ldr	r1, [pc, #284]	; (800b35c <HAL_RCC_ClockConfig+0x244>)
 800b23e:	4313      	orrs	r3, r2
 800b240:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f003 0301 	and.w	r3, r3, #1
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d055      	beq.n	800b2fa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b24e:	4b43      	ldr	r3, [pc, #268]	; (800b35c <HAL_RCC_ClockConfig+0x244>)
 800b250:	699b      	ldr	r3, [r3, #24]
 800b252:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	4940      	ldr	r1, [pc, #256]	; (800b35c <HAL_RCC_ClockConfig+0x244>)
 800b25c:	4313      	orrs	r3, r2
 800b25e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	2b02      	cmp	r3, #2
 800b266:	d107      	bne.n	800b278 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b268:	4b3c      	ldr	r3, [pc, #240]	; (800b35c <HAL_RCC_ClockConfig+0x244>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b270:	2b00      	cmp	r3, #0
 800b272:	d121      	bne.n	800b2b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b274:	2301      	movs	r3, #1
 800b276:	e0f6      	b.n	800b466 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	2b03      	cmp	r3, #3
 800b27e:	d107      	bne.n	800b290 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b280:	4b36      	ldr	r3, [pc, #216]	; (800b35c <HAL_RCC_ClockConfig+0x244>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d115      	bne.n	800b2b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b28c:	2301      	movs	r3, #1
 800b28e:	e0ea      	b.n	800b466 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	2b01      	cmp	r3, #1
 800b296:	d107      	bne.n	800b2a8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b298:	4b30      	ldr	r3, [pc, #192]	; (800b35c <HAL_RCC_ClockConfig+0x244>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d109      	bne.n	800b2b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	e0de      	b.n	800b466 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b2a8:	4b2c      	ldr	r3, [pc, #176]	; (800b35c <HAL_RCC_ClockConfig+0x244>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f003 0304 	and.w	r3, r3, #4
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d101      	bne.n	800b2b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	e0d6      	b.n	800b466 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b2b8:	4b28      	ldr	r3, [pc, #160]	; (800b35c <HAL_RCC_ClockConfig+0x244>)
 800b2ba:	691b      	ldr	r3, [r3, #16]
 800b2bc:	f023 0207 	bic.w	r2, r3, #7
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	4925      	ldr	r1, [pc, #148]	; (800b35c <HAL_RCC_ClockConfig+0x244>)
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2ca:	f7f8 ffe3 	bl	8004294 <HAL_GetTick>
 800b2ce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2d0:	e00a      	b.n	800b2e8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b2d2:	f7f8 ffdf 	bl	8004294 <HAL_GetTick>
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	1ad3      	subs	r3, r2, r3
 800b2dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d901      	bls.n	800b2e8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b2e4:	2303      	movs	r3, #3
 800b2e6:	e0be      	b.n	800b466 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2e8:	4b1c      	ldr	r3, [pc, #112]	; (800b35c <HAL_RCC_ClockConfig+0x244>)
 800b2ea:	691b      	ldr	r3, [r3, #16]
 800b2ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	00db      	lsls	r3, r3, #3
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d1eb      	bne.n	800b2d2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f003 0302 	and.w	r3, r3, #2
 800b302:	2b00      	cmp	r3, #0
 800b304:	d010      	beq.n	800b328 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	68da      	ldr	r2, [r3, #12]
 800b30a:	4b14      	ldr	r3, [pc, #80]	; (800b35c <HAL_RCC_ClockConfig+0x244>)
 800b30c:	699b      	ldr	r3, [r3, #24]
 800b30e:	f003 030f 	and.w	r3, r3, #15
 800b312:	429a      	cmp	r2, r3
 800b314:	d208      	bcs.n	800b328 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b316:	4b11      	ldr	r3, [pc, #68]	; (800b35c <HAL_RCC_ClockConfig+0x244>)
 800b318:	699b      	ldr	r3, [r3, #24]
 800b31a:	f023 020f 	bic.w	r2, r3, #15
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	68db      	ldr	r3, [r3, #12]
 800b322:	490e      	ldr	r1, [pc, #56]	; (800b35c <HAL_RCC_ClockConfig+0x244>)
 800b324:	4313      	orrs	r3, r2
 800b326:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b328:	4b0b      	ldr	r3, [pc, #44]	; (800b358 <HAL_RCC_ClockConfig+0x240>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f003 030f 	and.w	r3, r3, #15
 800b330:	683a      	ldr	r2, [r7, #0]
 800b332:	429a      	cmp	r2, r3
 800b334:	d214      	bcs.n	800b360 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b336:	4b08      	ldr	r3, [pc, #32]	; (800b358 <HAL_RCC_ClockConfig+0x240>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f023 020f 	bic.w	r2, r3, #15
 800b33e:	4906      	ldr	r1, [pc, #24]	; (800b358 <HAL_RCC_ClockConfig+0x240>)
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	4313      	orrs	r3, r2
 800b344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b346:	4b04      	ldr	r3, [pc, #16]	; (800b358 <HAL_RCC_ClockConfig+0x240>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f003 030f 	and.w	r3, r3, #15
 800b34e:	683a      	ldr	r2, [r7, #0]
 800b350:	429a      	cmp	r2, r3
 800b352:	d005      	beq.n	800b360 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b354:	2301      	movs	r3, #1
 800b356:	e086      	b.n	800b466 <HAL_RCC_ClockConfig+0x34e>
 800b358:	52002000 	.word	0x52002000
 800b35c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f003 0304 	and.w	r3, r3, #4
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d010      	beq.n	800b38e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	691a      	ldr	r2, [r3, #16]
 800b370:	4b3f      	ldr	r3, [pc, #252]	; (800b470 <HAL_RCC_ClockConfig+0x358>)
 800b372:	699b      	ldr	r3, [r3, #24]
 800b374:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b378:	429a      	cmp	r2, r3
 800b37a:	d208      	bcs.n	800b38e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b37c:	4b3c      	ldr	r3, [pc, #240]	; (800b470 <HAL_RCC_ClockConfig+0x358>)
 800b37e:	699b      	ldr	r3, [r3, #24]
 800b380:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	691b      	ldr	r3, [r3, #16]
 800b388:	4939      	ldr	r1, [pc, #228]	; (800b470 <HAL_RCC_ClockConfig+0x358>)
 800b38a:	4313      	orrs	r3, r2
 800b38c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f003 0308 	and.w	r3, r3, #8
 800b396:	2b00      	cmp	r3, #0
 800b398:	d010      	beq.n	800b3bc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	695a      	ldr	r2, [r3, #20]
 800b39e:	4b34      	ldr	r3, [pc, #208]	; (800b470 <HAL_RCC_ClockConfig+0x358>)
 800b3a0:	69db      	ldr	r3, [r3, #28]
 800b3a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d208      	bcs.n	800b3bc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b3aa:	4b31      	ldr	r3, [pc, #196]	; (800b470 <HAL_RCC_ClockConfig+0x358>)
 800b3ac:	69db      	ldr	r3, [r3, #28]
 800b3ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	695b      	ldr	r3, [r3, #20]
 800b3b6:	492e      	ldr	r1, [pc, #184]	; (800b470 <HAL_RCC_ClockConfig+0x358>)
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f003 0310 	and.w	r3, r3, #16
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d010      	beq.n	800b3ea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	699a      	ldr	r2, [r3, #24]
 800b3cc:	4b28      	ldr	r3, [pc, #160]	; (800b470 <HAL_RCC_ClockConfig+0x358>)
 800b3ce:	69db      	ldr	r3, [r3, #28]
 800b3d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d208      	bcs.n	800b3ea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b3d8:	4b25      	ldr	r3, [pc, #148]	; (800b470 <HAL_RCC_ClockConfig+0x358>)
 800b3da:	69db      	ldr	r3, [r3, #28]
 800b3dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	699b      	ldr	r3, [r3, #24]
 800b3e4:	4922      	ldr	r1, [pc, #136]	; (800b470 <HAL_RCC_ClockConfig+0x358>)
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f003 0320 	and.w	r3, r3, #32
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d010      	beq.n	800b418 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	69da      	ldr	r2, [r3, #28]
 800b3fa:	4b1d      	ldr	r3, [pc, #116]	; (800b470 <HAL_RCC_ClockConfig+0x358>)
 800b3fc:	6a1b      	ldr	r3, [r3, #32]
 800b3fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b402:	429a      	cmp	r2, r3
 800b404:	d208      	bcs.n	800b418 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b406:	4b1a      	ldr	r3, [pc, #104]	; (800b470 <HAL_RCC_ClockConfig+0x358>)
 800b408:	6a1b      	ldr	r3, [r3, #32]
 800b40a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	69db      	ldr	r3, [r3, #28]
 800b412:	4917      	ldr	r1, [pc, #92]	; (800b470 <HAL_RCC_ClockConfig+0x358>)
 800b414:	4313      	orrs	r3, r2
 800b416:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b418:	f000 f89e 	bl	800b558 <HAL_RCC_GetSysClockFreq>
 800b41c:	4602      	mov	r2, r0
 800b41e:	4b14      	ldr	r3, [pc, #80]	; (800b470 <HAL_RCC_ClockConfig+0x358>)
 800b420:	699b      	ldr	r3, [r3, #24]
 800b422:	0a1b      	lsrs	r3, r3, #8
 800b424:	f003 030f 	and.w	r3, r3, #15
 800b428:	4912      	ldr	r1, [pc, #72]	; (800b474 <HAL_RCC_ClockConfig+0x35c>)
 800b42a:	5ccb      	ldrb	r3, [r1, r3]
 800b42c:	f003 031f 	and.w	r3, r3, #31
 800b430:	fa22 f303 	lsr.w	r3, r2, r3
 800b434:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b436:	4b0e      	ldr	r3, [pc, #56]	; (800b470 <HAL_RCC_ClockConfig+0x358>)
 800b438:	699b      	ldr	r3, [r3, #24]
 800b43a:	f003 030f 	and.w	r3, r3, #15
 800b43e:	4a0d      	ldr	r2, [pc, #52]	; (800b474 <HAL_RCC_ClockConfig+0x35c>)
 800b440:	5cd3      	ldrb	r3, [r2, r3]
 800b442:	f003 031f 	and.w	r3, r3, #31
 800b446:	693a      	ldr	r2, [r7, #16]
 800b448:	fa22 f303 	lsr.w	r3, r2, r3
 800b44c:	4a0a      	ldr	r2, [pc, #40]	; (800b478 <HAL_RCC_ClockConfig+0x360>)
 800b44e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b450:	4a0a      	ldr	r2, [pc, #40]	; (800b47c <HAL_RCC_ClockConfig+0x364>)
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b456:	4b0a      	ldr	r3, [pc, #40]	; (800b480 <HAL_RCC_ClockConfig+0x368>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7f8 fed0 	bl	8004200 <HAL_InitTick>
 800b460:	4603      	mov	r3, r0
 800b462:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b464:	7bfb      	ldrb	r3, [r7, #15]
}
 800b466:	4618      	mov	r0, r3
 800b468:	3718      	adds	r7, #24
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	58024400 	.word	0x58024400
 800b474:	08020140 	.word	0x08020140
 800b478:	24000004 	.word	0x24000004
 800b47c:	24000000 	.word	0x24000000
 800b480:	24000008 	.word	0x24000008

0800b484 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b08c      	sub	sp, #48	; 0x30
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d12a      	bne.n	800b4ec <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b496:	4b2d      	ldr	r3, [pc, #180]	; (800b54c <HAL_RCC_MCOConfig+0xc8>)
 800b498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b49c:	4a2b      	ldr	r2, [pc, #172]	; (800b54c <HAL_RCC_MCOConfig+0xc8>)
 800b49e:	f043 0301 	orr.w	r3, r3, #1
 800b4a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b4a6:	4b29      	ldr	r3, [pc, #164]	; (800b54c <HAL_RCC_MCOConfig+0xc8>)
 800b4a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b4ac:	f003 0301 	and.w	r3, r3, #1
 800b4b0:	61bb      	str	r3, [r7, #24]
 800b4b2:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b4b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4ba:	2302      	movs	r3, #2
 800b4bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4be:	2303      	movs	r3, #3
 800b4c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b4ca:	f107 031c 	add.w	r3, r7, #28
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	481f      	ldr	r0, [pc, #124]	; (800b550 <HAL_RCC_MCOConfig+0xcc>)
 800b4d2:	f7fd fc29 	bl	8008d28 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b4d6:	4b1d      	ldr	r3, [pc, #116]	; (800b54c <HAL_RCC_MCOConfig+0xc8>)
 800b4d8:	691b      	ldr	r3, [r3, #16]
 800b4da:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800b4de:	68b9      	ldr	r1, [r7, #8]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	430b      	orrs	r3, r1
 800b4e4:	4919      	ldr	r1, [pc, #100]	; (800b54c <HAL_RCC_MCOConfig+0xc8>)
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800b4ea:	e02a      	b.n	800b542 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800b4ec:	4b17      	ldr	r3, [pc, #92]	; (800b54c <HAL_RCC_MCOConfig+0xc8>)
 800b4ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b4f2:	4a16      	ldr	r2, [pc, #88]	; (800b54c <HAL_RCC_MCOConfig+0xc8>)
 800b4f4:	f043 0304 	orr.w	r3, r3, #4
 800b4f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b4fc:	4b13      	ldr	r3, [pc, #76]	; (800b54c <HAL_RCC_MCOConfig+0xc8>)
 800b4fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b502:	f003 0304 	and.w	r3, r3, #4
 800b506:	617b      	str	r3, [r7, #20]
 800b508:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b50a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b50e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b510:	2302      	movs	r3, #2
 800b512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b514:	2303      	movs	r3, #3
 800b516:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b518:	2300      	movs	r3, #0
 800b51a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b51c:	2300      	movs	r3, #0
 800b51e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b520:	f107 031c 	add.w	r3, r7, #28
 800b524:	4619      	mov	r1, r3
 800b526:	480b      	ldr	r0, [pc, #44]	; (800b554 <HAL_RCC_MCOConfig+0xd0>)
 800b528:	f7fd fbfe 	bl	8008d28 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b52c:	4b07      	ldr	r3, [pc, #28]	; (800b54c <HAL_RCC_MCOConfig+0xc8>)
 800b52e:	691b      	ldr	r3, [r3, #16]
 800b530:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	01d9      	lsls	r1, r3, #7
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	430b      	orrs	r3, r1
 800b53c:	4903      	ldr	r1, [pc, #12]	; (800b54c <HAL_RCC_MCOConfig+0xc8>)
 800b53e:	4313      	orrs	r3, r2
 800b540:	610b      	str	r3, [r1, #16]
}
 800b542:	bf00      	nop
 800b544:	3730      	adds	r7, #48	; 0x30
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	58024400 	.word	0x58024400
 800b550:	58020000 	.word	0x58020000
 800b554:	58020800 	.word	0x58020800

0800b558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b558:	b480      	push	{r7}
 800b55a:	b089      	sub	sp, #36	; 0x24
 800b55c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b55e:	4bb3      	ldr	r3, [pc, #716]	; (800b82c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b560:	691b      	ldr	r3, [r3, #16]
 800b562:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b566:	2b18      	cmp	r3, #24
 800b568:	f200 8155 	bhi.w	800b816 <HAL_RCC_GetSysClockFreq+0x2be>
 800b56c:	a201      	add	r2, pc, #4	; (adr r2, 800b574 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b56e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b572:	bf00      	nop
 800b574:	0800b5d9 	.word	0x0800b5d9
 800b578:	0800b817 	.word	0x0800b817
 800b57c:	0800b817 	.word	0x0800b817
 800b580:	0800b817 	.word	0x0800b817
 800b584:	0800b817 	.word	0x0800b817
 800b588:	0800b817 	.word	0x0800b817
 800b58c:	0800b817 	.word	0x0800b817
 800b590:	0800b817 	.word	0x0800b817
 800b594:	0800b5ff 	.word	0x0800b5ff
 800b598:	0800b817 	.word	0x0800b817
 800b59c:	0800b817 	.word	0x0800b817
 800b5a0:	0800b817 	.word	0x0800b817
 800b5a4:	0800b817 	.word	0x0800b817
 800b5a8:	0800b817 	.word	0x0800b817
 800b5ac:	0800b817 	.word	0x0800b817
 800b5b0:	0800b817 	.word	0x0800b817
 800b5b4:	0800b605 	.word	0x0800b605
 800b5b8:	0800b817 	.word	0x0800b817
 800b5bc:	0800b817 	.word	0x0800b817
 800b5c0:	0800b817 	.word	0x0800b817
 800b5c4:	0800b817 	.word	0x0800b817
 800b5c8:	0800b817 	.word	0x0800b817
 800b5cc:	0800b817 	.word	0x0800b817
 800b5d0:	0800b817 	.word	0x0800b817
 800b5d4:	0800b60b 	.word	0x0800b60b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5d8:	4b94      	ldr	r3, [pc, #592]	; (800b82c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f003 0320 	and.w	r3, r3, #32
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d009      	beq.n	800b5f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b5e4:	4b91      	ldr	r3, [pc, #580]	; (800b82c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	08db      	lsrs	r3, r3, #3
 800b5ea:	f003 0303 	and.w	r3, r3, #3
 800b5ee:	4a90      	ldr	r2, [pc, #576]	; (800b830 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b5f0:	fa22 f303 	lsr.w	r3, r2, r3
 800b5f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b5f6:	e111      	b.n	800b81c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b5f8:	4b8d      	ldr	r3, [pc, #564]	; (800b830 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b5fa:	61bb      	str	r3, [r7, #24]
      break;
 800b5fc:	e10e      	b.n	800b81c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b5fe:	4b8d      	ldr	r3, [pc, #564]	; (800b834 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b600:	61bb      	str	r3, [r7, #24]
      break;
 800b602:	e10b      	b.n	800b81c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b604:	4b8c      	ldr	r3, [pc, #560]	; (800b838 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b606:	61bb      	str	r3, [r7, #24]
      break;
 800b608:	e108      	b.n	800b81c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b60a:	4b88      	ldr	r3, [pc, #544]	; (800b82c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b60c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b60e:	f003 0303 	and.w	r3, r3, #3
 800b612:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b614:	4b85      	ldr	r3, [pc, #532]	; (800b82c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b618:	091b      	lsrs	r3, r3, #4
 800b61a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b61e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b620:	4b82      	ldr	r3, [pc, #520]	; (800b82c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b624:	f003 0301 	and.w	r3, r3, #1
 800b628:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b62a:	4b80      	ldr	r3, [pc, #512]	; (800b82c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b62c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b62e:	08db      	lsrs	r3, r3, #3
 800b630:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b634:	68fa      	ldr	r2, [r7, #12]
 800b636:	fb02 f303 	mul.w	r3, r2, r3
 800b63a:	ee07 3a90 	vmov	s15, r3
 800b63e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b642:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	f000 80e1 	beq.w	800b810 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	2b02      	cmp	r3, #2
 800b652:	f000 8083 	beq.w	800b75c <HAL_RCC_GetSysClockFreq+0x204>
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	2b02      	cmp	r3, #2
 800b65a:	f200 80a1 	bhi.w	800b7a0 <HAL_RCC_GetSysClockFreq+0x248>
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d003      	beq.n	800b66c <HAL_RCC_GetSysClockFreq+0x114>
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	2b01      	cmp	r3, #1
 800b668:	d056      	beq.n	800b718 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b66a:	e099      	b.n	800b7a0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b66c:	4b6f      	ldr	r3, [pc, #444]	; (800b82c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f003 0320 	and.w	r3, r3, #32
 800b674:	2b00      	cmp	r3, #0
 800b676:	d02d      	beq.n	800b6d4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b678:	4b6c      	ldr	r3, [pc, #432]	; (800b82c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	08db      	lsrs	r3, r3, #3
 800b67e:	f003 0303 	and.w	r3, r3, #3
 800b682:	4a6b      	ldr	r2, [pc, #428]	; (800b830 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b684:	fa22 f303 	lsr.w	r3, r2, r3
 800b688:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	ee07 3a90 	vmov	s15, r3
 800b690:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	ee07 3a90 	vmov	s15, r3
 800b69a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b69e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6a2:	4b62      	ldr	r3, [pc, #392]	; (800b82c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6aa:	ee07 3a90 	vmov	s15, r3
 800b6ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6b2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b6b6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b83c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b6ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6ce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b6d2:	e087      	b.n	800b7e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	ee07 3a90 	vmov	s15, r3
 800b6da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6de:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b840 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b6e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6e6:	4b51      	ldr	r3, [pc, #324]	; (800b82c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6ee:	ee07 3a90 	vmov	s15, r3
 800b6f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6f6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b6fa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b83c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b6fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b70a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b70e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b712:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b716:	e065      	b.n	800b7e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	ee07 3a90 	vmov	s15, r3
 800b71e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b722:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b844 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b72a:	4b40      	ldr	r3, [pc, #256]	; (800b82c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b72c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b72e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b732:	ee07 3a90 	vmov	s15, r3
 800b736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b73a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b73e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b83c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b74a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b74e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b752:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b756:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b75a:	e043      	b.n	800b7e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	ee07 3a90 	vmov	s15, r3
 800b762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b766:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b848 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b76a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b76e:	4b2f      	ldr	r3, [pc, #188]	; (800b82c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b776:	ee07 3a90 	vmov	s15, r3
 800b77a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b77e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b782:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b83c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b78a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b78e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b79a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b79e:	e021      	b.n	800b7e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	ee07 3a90 	vmov	s15, r3
 800b7a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b844 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b7ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7b2:	4b1e      	ldr	r3, [pc, #120]	; (800b82c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7ba:	ee07 3a90 	vmov	s15, r3
 800b7be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7c2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b7c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b83c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b7ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b7e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b7e4:	4b11      	ldr	r3, [pc, #68]	; (800b82c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7e8:	0a5b      	lsrs	r3, r3, #9
 800b7ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	ee07 3a90 	vmov	s15, r3
 800b7f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b7fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800b800:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b808:	ee17 3a90 	vmov	r3, s15
 800b80c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b80e:	e005      	b.n	800b81c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b810:	2300      	movs	r3, #0
 800b812:	61bb      	str	r3, [r7, #24]
      break;
 800b814:	e002      	b.n	800b81c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b816:	4b07      	ldr	r3, [pc, #28]	; (800b834 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b818:	61bb      	str	r3, [r7, #24]
      break;
 800b81a:	bf00      	nop
  }

  return sysclockfreq;
 800b81c:	69bb      	ldr	r3, [r7, #24]
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3724      	adds	r7, #36	; 0x24
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr
 800b82a:	bf00      	nop
 800b82c:	58024400 	.word	0x58024400
 800b830:	03d09000 	.word	0x03d09000
 800b834:	003d0900 	.word	0x003d0900
 800b838:	02faf080 	.word	0x02faf080
 800b83c:	46000000 	.word	0x46000000
 800b840:	4c742400 	.word	0x4c742400
 800b844:	4a742400 	.word	0x4a742400
 800b848:	4c3ebc20 	.word	0x4c3ebc20

0800b84c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b082      	sub	sp, #8
 800b850:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b852:	f7ff fe81 	bl	800b558 <HAL_RCC_GetSysClockFreq>
 800b856:	4602      	mov	r2, r0
 800b858:	4b10      	ldr	r3, [pc, #64]	; (800b89c <HAL_RCC_GetHCLKFreq+0x50>)
 800b85a:	699b      	ldr	r3, [r3, #24]
 800b85c:	0a1b      	lsrs	r3, r3, #8
 800b85e:	f003 030f 	and.w	r3, r3, #15
 800b862:	490f      	ldr	r1, [pc, #60]	; (800b8a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800b864:	5ccb      	ldrb	r3, [r1, r3]
 800b866:	f003 031f 	and.w	r3, r3, #31
 800b86a:	fa22 f303 	lsr.w	r3, r2, r3
 800b86e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b870:	4b0a      	ldr	r3, [pc, #40]	; (800b89c <HAL_RCC_GetHCLKFreq+0x50>)
 800b872:	699b      	ldr	r3, [r3, #24]
 800b874:	f003 030f 	and.w	r3, r3, #15
 800b878:	4a09      	ldr	r2, [pc, #36]	; (800b8a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800b87a:	5cd3      	ldrb	r3, [r2, r3]
 800b87c:	f003 031f 	and.w	r3, r3, #31
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	fa22 f303 	lsr.w	r3, r2, r3
 800b886:	4a07      	ldr	r2, [pc, #28]	; (800b8a4 <HAL_RCC_GetHCLKFreq+0x58>)
 800b888:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b88a:	4a07      	ldr	r2, [pc, #28]	; (800b8a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b890:	4b04      	ldr	r3, [pc, #16]	; (800b8a4 <HAL_RCC_GetHCLKFreq+0x58>)
 800b892:	681b      	ldr	r3, [r3, #0]
}
 800b894:	4618      	mov	r0, r3
 800b896:	3708      	adds	r7, #8
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}
 800b89c:	58024400 	.word	0x58024400
 800b8a0:	08020140 	.word	0x08020140
 800b8a4:	24000004 	.word	0x24000004
 800b8a8:	24000000 	.word	0x24000000

0800b8ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b8b0:	f7ff ffcc 	bl	800b84c <HAL_RCC_GetHCLKFreq>
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	4b06      	ldr	r3, [pc, #24]	; (800b8d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b8b8:	69db      	ldr	r3, [r3, #28]
 800b8ba:	091b      	lsrs	r3, r3, #4
 800b8bc:	f003 0307 	and.w	r3, r3, #7
 800b8c0:	4904      	ldr	r1, [pc, #16]	; (800b8d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b8c2:	5ccb      	ldrb	r3, [r1, r3]
 800b8c4:	f003 031f 	and.w	r3, r3, #31
 800b8c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	bd80      	pop	{r7, pc}
 800b8d0:	58024400 	.word	0x58024400
 800b8d4:	08020140 	.word	0x08020140

0800b8d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b8dc:	f7ff ffb6 	bl	800b84c <HAL_RCC_GetHCLKFreq>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	4b06      	ldr	r3, [pc, #24]	; (800b8fc <HAL_RCC_GetPCLK2Freq+0x24>)
 800b8e4:	69db      	ldr	r3, [r3, #28]
 800b8e6:	0a1b      	lsrs	r3, r3, #8
 800b8e8:	f003 0307 	and.w	r3, r3, #7
 800b8ec:	4904      	ldr	r1, [pc, #16]	; (800b900 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b8ee:	5ccb      	ldrb	r3, [r1, r3]
 800b8f0:	f003 031f 	and.w	r3, r3, #31
 800b8f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	58024400 	.word	0x58024400
 800b900:	08020140 	.word	0x08020140

0800b904 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b908:	b0c6      	sub	sp, #280	; 0x118
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b910:	2300      	movs	r3, #0
 800b912:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b916:	2300      	movs	r3, #0
 800b918:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b91c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b924:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b928:	2500      	movs	r5, #0
 800b92a:	ea54 0305 	orrs.w	r3, r4, r5
 800b92e:	d049      	beq.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b934:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b936:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b93a:	d02f      	beq.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b93c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b940:	d828      	bhi.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b942:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b946:	d01a      	beq.n	800b97e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b948:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b94c:	d822      	bhi.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d003      	beq.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b952:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b956:	d007      	beq.n	800b968 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b958:	e01c      	b.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b95a:	4bab      	ldr	r3, [pc, #684]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b95c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95e:	4aaa      	ldr	r2, [pc, #680]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b964:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b966:	e01a      	b.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b96c:	3308      	adds	r3, #8
 800b96e:	2102      	movs	r1, #2
 800b970:	4618      	mov	r0, r3
 800b972:	f002 fa49 	bl	800de08 <RCCEx_PLL2_Config>
 800b976:	4603      	mov	r3, r0
 800b978:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b97c:	e00f      	b.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b97e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b982:	3328      	adds	r3, #40	; 0x28
 800b984:	2102      	movs	r1, #2
 800b986:	4618      	mov	r0, r3
 800b988:	f002 faf0 	bl	800df6c <RCCEx_PLL3_Config>
 800b98c:	4603      	mov	r3, r0
 800b98e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b992:	e004      	b.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b994:	2301      	movs	r3, #1
 800b996:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b99a:	e000      	b.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b99c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b99e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d10a      	bne.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b9a6:	4b98      	ldr	r3, [pc, #608]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b9a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9aa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b9ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9b4:	4a94      	ldr	r2, [pc, #592]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b9b6:	430b      	orrs	r3, r1
 800b9b8:	6513      	str	r3, [r2, #80]	; 0x50
 800b9ba:	e003      	b.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b9c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9cc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b9d0:	f04f 0900 	mov.w	r9, #0
 800b9d4:	ea58 0309 	orrs.w	r3, r8, r9
 800b9d8:	d047      	beq.n	800ba6a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b9da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9e0:	2b04      	cmp	r3, #4
 800b9e2:	d82a      	bhi.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b9e4:	a201      	add	r2, pc, #4	; (adr r2, 800b9ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b9e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ea:	bf00      	nop
 800b9ec:	0800ba01 	.word	0x0800ba01
 800b9f0:	0800ba0f 	.word	0x0800ba0f
 800b9f4:	0800ba25 	.word	0x0800ba25
 800b9f8:	0800ba43 	.word	0x0800ba43
 800b9fc:	0800ba43 	.word	0x0800ba43
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba00:	4b81      	ldr	r3, [pc, #516]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba04:	4a80      	ldr	r2, [pc, #512]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba0c:	e01a      	b.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba12:	3308      	adds	r3, #8
 800ba14:	2100      	movs	r1, #0
 800ba16:	4618      	mov	r0, r3
 800ba18:	f002 f9f6 	bl	800de08 <RCCEx_PLL2_Config>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba22:	e00f      	b.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ba24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba28:	3328      	adds	r3, #40	; 0x28
 800ba2a:	2100      	movs	r1, #0
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f002 fa9d 	bl	800df6c <RCCEx_PLL3_Config>
 800ba32:	4603      	mov	r3, r0
 800ba34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba38:	e004      	b.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ba40:	e000      	b.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ba42:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d10a      	bne.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ba4c:	4b6e      	ldr	r3, [pc, #440]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba50:	f023 0107 	bic.w	r1, r3, #7
 800ba54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba5a:	4a6b      	ldr	r2, [pc, #428]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba5c:	430b      	orrs	r3, r1
 800ba5e:	6513      	str	r3, [r2, #80]	; 0x50
 800ba60:	e003      	b.n	800ba6a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba66:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ba6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba72:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800ba76:	f04f 0b00 	mov.w	fp, #0
 800ba7a:	ea5a 030b 	orrs.w	r3, sl, fp
 800ba7e:	d05b      	beq.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ba80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ba88:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800ba8c:	d03b      	beq.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800ba8e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800ba92:	d834      	bhi.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ba94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ba98:	d037      	beq.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800ba9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ba9e:	d82e      	bhi.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800baa0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800baa4:	d033      	beq.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800baa6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800baaa:	d828      	bhi.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800baac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bab0:	d01a      	beq.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800bab2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bab6:	d822      	bhi.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d003      	beq.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800babc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bac0:	d007      	beq.n	800bad2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800bac2:	e01c      	b.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bac4:	4b50      	ldr	r3, [pc, #320]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bac8:	4a4f      	ldr	r2, [pc, #316]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800baca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bace:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bad0:	e01e      	b.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bad6:	3308      	adds	r3, #8
 800bad8:	2100      	movs	r1, #0
 800bada:	4618      	mov	r0, r3
 800badc:	f002 f994 	bl	800de08 <RCCEx_PLL2_Config>
 800bae0:	4603      	mov	r3, r0
 800bae2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bae6:	e013      	b.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baec:	3328      	adds	r3, #40	; 0x28
 800baee:	2100      	movs	r1, #0
 800baf0:	4618      	mov	r0, r3
 800baf2:	f002 fa3b 	bl	800df6c <RCCEx_PLL3_Config>
 800baf6:	4603      	mov	r3, r0
 800baf8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bafc:	e008      	b.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bafe:	2301      	movs	r3, #1
 800bb00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bb04:	e004      	b.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bb06:	bf00      	nop
 800bb08:	e002      	b.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bb0a:	bf00      	nop
 800bb0c:	e000      	b.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bb0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d10b      	bne.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bb18:	4b3b      	ldr	r3, [pc, #236]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb1c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800bb20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bb28:	4a37      	ldr	r2, [pc, #220]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb2a:	430b      	orrs	r3, r1
 800bb2c:	6593      	str	r3, [r2, #88]	; 0x58
 800bb2e:	e003      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb34:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bb38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb40:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800bb44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bb48:	2300      	movs	r3, #0
 800bb4a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bb4e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800bb52:	460b      	mov	r3, r1
 800bb54:	4313      	orrs	r3, r2
 800bb56:	d05d      	beq.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800bb58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb5c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bb60:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800bb64:	d03b      	beq.n	800bbde <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800bb66:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800bb6a:	d834      	bhi.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bb6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bb70:	d037      	beq.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800bb72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bb76:	d82e      	bhi.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bb78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bb7c:	d033      	beq.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800bb7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bb82:	d828      	bhi.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bb84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb88:	d01a      	beq.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800bb8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb8e:	d822      	bhi.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d003      	beq.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800bb94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bb98:	d007      	beq.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800bb9a:	e01c      	b.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb9c:	4b1a      	ldr	r3, [pc, #104]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba0:	4a19      	ldr	r2, [pc, #100]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bba6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bba8:	e01e      	b.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbae:	3308      	adds	r3, #8
 800bbb0:	2100      	movs	r1, #0
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f002 f928 	bl	800de08 <RCCEx_PLL2_Config>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bbbe:	e013      	b.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bbc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbc4:	3328      	adds	r3, #40	; 0x28
 800bbc6:	2100      	movs	r1, #0
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f002 f9cf 	bl	800df6c <RCCEx_PLL3_Config>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bbd4:	e008      	b.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bbdc:	e004      	b.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bbde:	bf00      	nop
 800bbe0:	e002      	b.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bbe2:	bf00      	nop
 800bbe4:	e000      	b.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bbe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbe8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d10d      	bne.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bbf0:	4b05      	ldr	r3, [pc, #20]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bbf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbf4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800bbf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbfc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bc00:	4a01      	ldr	r2, [pc, #4]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc02:	430b      	orrs	r3, r1
 800bc04:	6593      	str	r3, [r2, #88]	; 0x58
 800bc06:	e005      	b.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800bc08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc10:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800bc14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800bc20:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bc24:	2300      	movs	r3, #0
 800bc26:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bc2a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800bc2e:	460b      	mov	r3, r1
 800bc30:	4313      	orrs	r3, r2
 800bc32:	d03a      	beq.n	800bcaa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800bc34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc3a:	2b30      	cmp	r3, #48	; 0x30
 800bc3c:	d01f      	beq.n	800bc7e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800bc3e:	2b30      	cmp	r3, #48	; 0x30
 800bc40:	d819      	bhi.n	800bc76 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bc42:	2b20      	cmp	r3, #32
 800bc44:	d00c      	beq.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800bc46:	2b20      	cmp	r3, #32
 800bc48:	d815      	bhi.n	800bc76 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d019      	beq.n	800bc82 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800bc4e:	2b10      	cmp	r3, #16
 800bc50:	d111      	bne.n	800bc76 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc52:	4baa      	ldr	r3, [pc, #680]	; (800befc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc56:	4aa9      	ldr	r2, [pc, #676]	; (800befc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bc5e:	e011      	b.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bc60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc64:	3308      	adds	r3, #8
 800bc66:	2102      	movs	r1, #2
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f002 f8cd 	bl	800de08 <RCCEx_PLL2_Config>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bc74:	e006      	b.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bc76:	2301      	movs	r3, #1
 800bc78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bc7c:	e002      	b.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bc7e:	bf00      	nop
 800bc80:	e000      	b.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bc82:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d10a      	bne.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800bc8c:	4b9b      	ldr	r3, [pc, #620]	; (800befc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc90:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800bc94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc9a:	4a98      	ldr	r2, [pc, #608]	; (800befc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc9c:	430b      	orrs	r3, r1
 800bc9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bca0:	e003      	b.n	800bcaa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bca2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bca6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bcaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800bcb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bcba:	2300      	movs	r3, #0
 800bcbc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bcc0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	d051      	beq.n	800bd6e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800bcca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bcd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bcd4:	d035      	beq.n	800bd42 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800bcd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bcda:	d82e      	bhi.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bcdc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bce0:	d031      	beq.n	800bd46 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800bce2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bce6:	d828      	bhi.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bce8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcec:	d01a      	beq.n	800bd24 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800bcee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcf2:	d822      	bhi.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d003      	beq.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800bcf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcfc:	d007      	beq.n	800bd0e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800bcfe:	e01c      	b.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd00:	4b7e      	ldr	r3, [pc, #504]	; (800befc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd04:	4a7d      	ldr	r2, [pc, #500]	; (800befc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bd0c:	e01c      	b.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd12:	3308      	adds	r3, #8
 800bd14:	2100      	movs	r1, #0
 800bd16:	4618      	mov	r0, r3
 800bd18:	f002 f876 	bl	800de08 <RCCEx_PLL2_Config>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bd22:	e011      	b.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bd24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd28:	3328      	adds	r3, #40	; 0x28
 800bd2a:	2100      	movs	r1, #0
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f002 f91d 	bl	800df6c <RCCEx_PLL3_Config>
 800bd32:	4603      	mov	r3, r0
 800bd34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bd38:	e006      	b.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bd40:	e002      	b.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bd42:	bf00      	nop
 800bd44:	e000      	b.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bd46:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d10a      	bne.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bd50:	4b6a      	ldr	r3, [pc, #424]	; (800befc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd54:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800bd58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd5e:	4a67      	ldr	r2, [pc, #412]	; (800befc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd60:	430b      	orrs	r3, r1
 800bd62:	6513      	str	r3, [r2, #80]	; 0x50
 800bd64:	e003      	b.n	800bd6e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd6a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bd6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd76:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800bd7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bd7e:	2300      	movs	r3, #0
 800bd80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bd84:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800bd88:	460b      	mov	r3, r1
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	d053      	beq.n	800be36 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bd8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bd98:	d033      	beq.n	800be02 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800bd9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bd9e:	d82c      	bhi.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bda0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bda4:	d02f      	beq.n	800be06 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800bda6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bdaa:	d826      	bhi.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bdac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bdb0:	d02b      	beq.n	800be0a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800bdb2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bdb6:	d820      	bhi.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bdb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdbc:	d012      	beq.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800bdbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdc2:	d81a      	bhi.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d022      	beq.n	800be0e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800bdc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdcc:	d115      	bne.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bdce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdd2:	3308      	adds	r3, #8
 800bdd4:	2101      	movs	r1, #1
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f002 f816 	bl	800de08 <RCCEx_PLL2_Config>
 800bddc:	4603      	mov	r3, r0
 800bdde:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bde2:	e015      	b.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bde4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bde8:	3328      	adds	r3, #40	; 0x28
 800bdea:	2101      	movs	r1, #1
 800bdec:	4618      	mov	r0, r3
 800bdee:	f002 f8bd 	bl	800df6c <RCCEx_PLL3_Config>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bdf8:	e00a      	b.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800be00:	e006      	b.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800be02:	bf00      	nop
 800be04:	e004      	b.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800be06:	bf00      	nop
 800be08:	e002      	b.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800be0a:	bf00      	nop
 800be0c:	e000      	b.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800be0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be14:	2b00      	cmp	r3, #0
 800be16:	d10a      	bne.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800be18:	4b38      	ldr	r3, [pc, #224]	; (800befc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be1c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800be20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be26:	4a35      	ldr	r2, [pc, #212]	; (800befc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be28:	430b      	orrs	r3, r1
 800be2a:	6513      	str	r3, [r2, #80]	; 0x50
 800be2c:	e003      	b.n	800be36 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be2e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be32:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800be36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800be42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800be46:	2300      	movs	r3, #0
 800be48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800be4c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800be50:	460b      	mov	r3, r1
 800be52:	4313      	orrs	r3, r2
 800be54:	d058      	beq.n	800bf08 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800be56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800be5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be62:	d033      	beq.n	800becc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800be64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be68:	d82c      	bhi.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800be6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be6e:	d02f      	beq.n	800bed0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800be70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be74:	d826      	bhi.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800be76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800be7a:	d02b      	beq.n	800bed4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800be7c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800be80:	d820      	bhi.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800be82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be86:	d012      	beq.n	800beae <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800be88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be8c:	d81a      	bhi.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d022      	beq.n	800bed8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800be92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be96:	d115      	bne.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be9c:	3308      	adds	r3, #8
 800be9e:	2101      	movs	r1, #1
 800bea0:	4618      	mov	r0, r3
 800bea2:	f001 ffb1 	bl	800de08 <RCCEx_PLL2_Config>
 800bea6:	4603      	mov	r3, r0
 800bea8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800beac:	e015      	b.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800beae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beb2:	3328      	adds	r3, #40	; 0x28
 800beb4:	2101      	movs	r1, #1
 800beb6:	4618      	mov	r0, r3
 800beb8:	f002 f858 	bl	800df6c <RCCEx_PLL3_Config>
 800bebc:	4603      	mov	r3, r0
 800bebe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bec2:	e00a      	b.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bec4:	2301      	movs	r3, #1
 800bec6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800beca:	e006      	b.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800becc:	bf00      	nop
 800bece:	e004      	b.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bed0:	bf00      	nop
 800bed2:	e002      	b.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bed4:	bf00      	nop
 800bed6:	e000      	b.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800beda:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d10e      	bne.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bee2:	4b06      	ldr	r3, [pc, #24]	; (800befc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bee6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800beea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bef2:	4a02      	ldr	r2, [pc, #8]	; (800befc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bef4:	430b      	orrs	r3, r1
 800bef6:	6593      	str	r3, [r2, #88]	; 0x58
 800bef8:	e006      	b.n	800bf08 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800befa:	bf00      	nop
 800befc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf04:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bf08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf10:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800bf14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bf18:	2300      	movs	r3, #0
 800bf1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bf1e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800bf22:	460b      	mov	r3, r1
 800bf24:	4313      	orrs	r3, r2
 800bf26:	d037      	beq.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bf28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf32:	d00e      	beq.n	800bf52 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bf34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf38:	d816      	bhi.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d018      	beq.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bf3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf42:	d111      	bne.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf44:	4bc4      	ldr	r3, [pc, #784]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf48:	4ac3      	ldr	r2, [pc, #780]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bf50:	e00f      	b.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf56:	3308      	adds	r3, #8
 800bf58:	2101      	movs	r1, #1
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f001 ff54 	bl	800de08 <RCCEx_PLL2_Config>
 800bf60:	4603      	mov	r3, r0
 800bf62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bf66:	e004      	b.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bf6e:	e000      	b.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bf70:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf72:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d10a      	bne.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bf7a:	4bb7      	ldr	r3, [pc, #732]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf7e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bf82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf88:	4ab3      	ldr	r2, [pc, #716]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf8a:	430b      	orrs	r3, r1
 800bf8c:	6513      	str	r3, [r2, #80]	; 0x50
 800bf8e:	e003      	b.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf94:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bf98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800bfa4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bfae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	d039      	beq.n	800c02c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bfb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfbe:	2b03      	cmp	r3, #3
 800bfc0:	d81c      	bhi.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bfc2:	a201      	add	r2, pc, #4	; (adr r2, 800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bfc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfc8:	0800c005 	.word	0x0800c005
 800bfcc:	0800bfd9 	.word	0x0800bfd9
 800bfd0:	0800bfe7 	.word	0x0800bfe7
 800bfd4:	0800c005 	.word	0x0800c005
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bfd8:	4b9f      	ldr	r3, [pc, #636]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfdc:	4a9e      	ldr	r2, [pc, #632]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bfe2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bfe4:	e00f      	b.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bfe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfea:	3308      	adds	r3, #8
 800bfec:	2102      	movs	r1, #2
 800bfee:	4618      	mov	r0, r3
 800bff0:	f001 ff0a 	bl	800de08 <RCCEx_PLL2_Config>
 800bff4:	4603      	mov	r3, r0
 800bff6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bffa:	e004      	b.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bffc:	2301      	movs	r3, #1
 800bffe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c002:	e000      	b.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800c004:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c006:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d10a      	bne.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c00e:	4b92      	ldr	r3, [pc, #584]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c012:	f023 0103 	bic.w	r1, r3, #3
 800c016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c01a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c01c:	4a8e      	ldr	r2, [pc, #568]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c01e:	430b      	orrs	r3, r1
 800c020:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c022:	e003      	b.n	800c02c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c024:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c028:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c02c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c034:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800c038:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c03c:	2300      	movs	r3, #0
 800c03e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c042:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c046:	460b      	mov	r3, r1
 800c048:	4313      	orrs	r3, r2
 800c04a:	f000 8099 	beq.w	800c180 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c04e:	4b83      	ldr	r3, [pc, #524]	; (800c25c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	4a82      	ldr	r2, [pc, #520]	; (800c25c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c058:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c05a:	f7f8 f91b 	bl	8004294 <HAL_GetTick>
 800c05e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c062:	e00b      	b.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c064:	f7f8 f916 	bl	8004294 <HAL_GetTick>
 800c068:	4602      	mov	r2, r0
 800c06a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c06e:	1ad3      	subs	r3, r2, r3
 800c070:	2b64      	cmp	r3, #100	; 0x64
 800c072:	d903      	bls.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800c074:	2303      	movs	r3, #3
 800c076:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c07a:	e005      	b.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c07c:	4b77      	ldr	r3, [pc, #476]	; (800c25c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c084:	2b00      	cmp	r3, #0
 800c086:	d0ed      	beq.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800c088:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d173      	bne.n	800c178 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c090:	4b71      	ldr	r3, [pc, #452]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c092:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c094:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c098:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c09c:	4053      	eors	r3, r2
 800c09e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d015      	beq.n	800c0d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c0a6:	4b6c      	ldr	r3, [pc, #432]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c0b2:	4b69      	ldr	r3, [pc, #420]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0b6:	4a68      	ldr	r2, [pc, #416]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c0bc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c0be:	4b66      	ldr	r3, [pc, #408]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0c2:	4a65      	ldr	r2, [pc, #404]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c0c8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c0ca:	4a63      	ldr	r2, [pc, #396]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0d0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c0d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c0da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0de:	d118      	bne.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0e0:	f7f8 f8d8 	bl	8004294 <HAL_GetTick>
 800c0e4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c0e8:	e00d      	b.n	800c106 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c0ea:	f7f8 f8d3 	bl	8004294 <HAL_GetTick>
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c0f4:	1ad2      	subs	r2, r2, r3
 800c0f6:	f241 3388 	movw	r3, #5000	; 0x1388
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d903      	bls.n	800c106 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800c0fe:	2303      	movs	r3, #3
 800c100:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800c104:	e005      	b.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c106:	4b54      	ldr	r3, [pc, #336]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c10a:	f003 0302 	and.w	r3, r3, #2
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d0eb      	beq.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800c112:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c116:	2b00      	cmp	r3, #0
 800c118:	d129      	bne.n	800c16e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c11a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c11e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c126:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c12a:	d10e      	bne.n	800c14a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800c12c:	4b4a      	ldr	r3, [pc, #296]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c12e:	691b      	ldr	r3, [r3, #16]
 800c130:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800c134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c138:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c13c:	091a      	lsrs	r2, r3, #4
 800c13e:	4b48      	ldr	r3, [pc, #288]	; (800c260 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800c140:	4013      	ands	r3, r2
 800c142:	4a45      	ldr	r2, [pc, #276]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c144:	430b      	orrs	r3, r1
 800c146:	6113      	str	r3, [r2, #16]
 800c148:	e005      	b.n	800c156 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800c14a:	4b43      	ldr	r3, [pc, #268]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c14c:	691b      	ldr	r3, [r3, #16]
 800c14e:	4a42      	ldr	r2, [pc, #264]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c150:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c154:	6113      	str	r3, [r2, #16]
 800c156:	4b40      	ldr	r3, [pc, #256]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c158:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c15a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c15e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c166:	4a3c      	ldr	r2, [pc, #240]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c168:	430b      	orrs	r3, r1
 800c16a:	6713      	str	r3, [r2, #112]	; 0x70
 800c16c:	e008      	b.n	800c180 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c16e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c172:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800c176:	e003      	b.n	800c180 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c178:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c17c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c188:	f002 0301 	and.w	r3, r2, #1
 800c18c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c190:	2300      	movs	r3, #0
 800c192:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c196:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800c19a:	460b      	mov	r3, r1
 800c19c:	4313      	orrs	r3, r2
 800c19e:	f000 808f 	beq.w	800c2c0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c1a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1a8:	2b28      	cmp	r3, #40	; 0x28
 800c1aa:	d871      	bhi.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c1ac:	a201      	add	r2, pc, #4	; (adr r2, 800c1b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c1ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1b2:	bf00      	nop
 800c1b4:	0800c299 	.word	0x0800c299
 800c1b8:	0800c291 	.word	0x0800c291
 800c1bc:	0800c291 	.word	0x0800c291
 800c1c0:	0800c291 	.word	0x0800c291
 800c1c4:	0800c291 	.word	0x0800c291
 800c1c8:	0800c291 	.word	0x0800c291
 800c1cc:	0800c291 	.word	0x0800c291
 800c1d0:	0800c291 	.word	0x0800c291
 800c1d4:	0800c265 	.word	0x0800c265
 800c1d8:	0800c291 	.word	0x0800c291
 800c1dc:	0800c291 	.word	0x0800c291
 800c1e0:	0800c291 	.word	0x0800c291
 800c1e4:	0800c291 	.word	0x0800c291
 800c1e8:	0800c291 	.word	0x0800c291
 800c1ec:	0800c291 	.word	0x0800c291
 800c1f0:	0800c291 	.word	0x0800c291
 800c1f4:	0800c27b 	.word	0x0800c27b
 800c1f8:	0800c291 	.word	0x0800c291
 800c1fc:	0800c291 	.word	0x0800c291
 800c200:	0800c291 	.word	0x0800c291
 800c204:	0800c291 	.word	0x0800c291
 800c208:	0800c291 	.word	0x0800c291
 800c20c:	0800c291 	.word	0x0800c291
 800c210:	0800c291 	.word	0x0800c291
 800c214:	0800c299 	.word	0x0800c299
 800c218:	0800c291 	.word	0x0800c291
 800c21c:	0800c291 	.word	0x0800c291
 800c220:	0800c291 	.word	0x0800c291
 800c224:	0800c291 	.word	0x0800c291
 800c228:	0800c291 	.word	0x0800c291
 800c22c:	0800c291 	.word	0x0800c291
 800c230:	0800c291 	.word	0x0800c291
 800c234:	0800c299 	.word	0x0800c299
 800c238:	0800c291 	.word	0x0800c291
 800c23c:	0800c291 	.word	0x0800c291
 800c240:	0800c291 	.word	0x0800c291
 800c244:	0800c291 	.word	0x0800c291
 800c248:	0800c291 	.word	0x0800c291
 800c24c:	0800c291 	.word	0x0800c291
 800c250:	0800c291 	.word	0x0800c291
 800c254:	0800c299 	.word	0x0800c299
 800c258:	58024400 	.word	0x58024400
 800c25c:	58024800 	.word	0x58024800
 800c260:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c268:	3308      	adds	r3, #8
 800c26a:	2101      	movs	r1, #1
 800c26c:	4618      	mov	r0, r3
 800c26e:	f001 fdcb 	bl	800de08 <RCCEx_PLL2_Config>
 800c272:	4603      	mov	r3, r0
 800c274:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c278:	e00f      	b.n	800c29a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c27a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c27e:	3328      	adds	r3, #40	; 0x28
 800c280:	2101      	movs	r1, #1
 800c282:	4618      	mov	r0, r3
 800c284:	f001 fe72 	bl	800df6c <RCCEx_PLL3_Config>
 800c288:	4603      	mov	r3, r0
 800c28a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c28e:	e004      	b.n	800c29a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c290:	2301      	movs	r3, #1
 800c292:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c296:	e000      	b.n	800c29a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c29a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d10a      	bne.n	800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c2a2:	4bbf      	ldr	r3, [pc, #764]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c2a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2a6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800c2aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c2b0:	4abb      	ldr	r2, [pc, #748]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c2b2:	430b      	orrs	r3, r1
 800c2b4:	6553      	str	r3, [r2, #84]	; 0x54
 800c2b6:	e003      	b.n	800c2c0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c2bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c2c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c8:	f002 0302 	and.w	r3, r2, #2
 800c2cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c2d6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800c2da:	460b      	mov	r3, r1
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	d041      	beq.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c2e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2e6:	2b05      	cmp	r3, #5
 800c2e8:	d824      	bhi.n	800c334 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800c2ea:	a201      	add	r2, pc, #4	; (adr r2, 800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800c2ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2f0:	0800c33d 	.word	0x0800c33d
 800c2f4:	0800c309 	.word	0x0800c309
 800c2f8:	0800c31f 	.word	0x0800c31f
 800c2fc:	0800c33d 	.word	0x0800c33d
 800c300:	0800c33d 	.word	0x0800c33d
 800c304:	0800c33d 	.word	0x0800c33d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c30c:	3308      	adds	r3, #8
 800c30e:	2101      	movs	r1, #1
 800c310:	4618      	mov	r0, r3
 800c312:	f001 fd79 	bl	800de08 <RCCEx_PLL2_Config>
 800c316:	4603      	mov	r3, r0
 800c318:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c31c:	e00f      	b.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c31e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c322:	3328      	adds	r3, #40	; 0x28
 800c324:	2101      	movs	r1, #1
 800c326:	4618      	mov	r0, r3
 800c328:	f001 fe20 	bl	800df6c <RCCEx_PLL3_Config>
 800c32c:	4603      	mov	r3, r0
 800c32e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c332:	e004      	b.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c334:	2301      	movs	r3, #1
 800c336:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c33a:	e000      	b.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800c33c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c33e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c342:	2b00      	cmp	r3, #0
 800c344:	d10a      	bne.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c346:	4b96      	ldr	r3, [pc, #600]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c34a:	f023 0107 	bic.w	r1, r3, #7
 800c34e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c354:	4a92      	ldr	r2, [pc, #584]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c356:	430b      	orrs	r3, r1
 800c358:	6553      	str	r3, [r2, #84]	; 0x54
 800c35a:	e003      	b.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c35c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c360:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36c:	f002 0304 	and.w	r3, r2, #4
 800c370:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c374:	2300      	movs	r3, #0
 800c376:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c37a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c37e:	460b      	mov	r3, r1
 800c380:	4313      	orrs	r3, r2
 800c382:	d044      	beq.n	800c40e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c38c:	2b05      	cmp	r3, #5
 800c38e:	d825      	bhi.n	800c3dc <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800c390:	a201      	add	r2, pc, #4	; (adr r2, 800c398 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800c392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c396:	bf00      	nop
 800c398:	0800c3e5 	.word	0x0800c3e5
 800c39c:	0800c3b1 	.word	0x0800c3b1
 800c3a0:	0800c3c7 	.word	0x0800c3c7
 800c3a4:	0800c3e5 	.word	0x0800c3e5
 800c3a8:	0800c3e5 	.word	0x0800c3e5
 800c3ac:	0800c3e5 	.word	0x0800c3e5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c3b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3b4:	3308      	adds	r3, #8
 800c3b6:	2101      	movs	r1, #1
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f001 fd25 	bl	800de08 <RCCEx_PLL2_Config>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c3c4:	e00f      	b.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c3c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3ca:	3328      	adds	r3, #40	; 0x28
 800c3cc:	2101      	movs	r1, #1
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f001 fdcc 	bl	800df6c <RCCEx_PLL3_Config>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c3da:	e004      	b.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3dc:	2301      	movs	r3, #1
 800c3de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c3e2:	e000      	b.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800c3e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d10b      	bne.n	800c406 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c3ee:	4b6c      	ldr	r3, [pc, #432]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c3f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3f2:	f023 0107 	bic.w	r1, r3, #7
 800c3f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3fe:	4a68      	ldr	r2, [pc, #416]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c400:	430b      	orrs	r3, r1
 800c402:	6593      	str	r3, [r2, #88]	; 0x58
 800c404:	e003      	b.n	800c40e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c406:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c40a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c40e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c416:	f002 0320 	and.w	r3, r2, #32
 800c41a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c41e:	2300      	movs	r3, #0
 800c420:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c424:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c428:	460b      	mov	r3, r1
 800c42a:	4313      	orrs	r3, r2
 800c42c:	d055      	beq.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c42e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c432:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c436:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c43a:	d033      	beq.n	800c4a4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800c43c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c440:	d82c      	bhi.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c446:	d02f      	beq.n	800c4a8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c44c:	d826      	bhi.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c44e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c452:	d02b      	beq.n	800c4ac <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c454:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c458:	d820      	bhi.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c45a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c45e:	d012      	beq.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800c460:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c464:	d81a      	bhi.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c466:	2b00      	cmp	r3, #0
 800c468:	d022      	beq.n	800c4b0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c46a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c46e:	d115      	bne.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c470:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c474:	3308      	adds	r3, #8
 800c476:	2100      	movs	r1, #0
 800c478:	4618      	mov	r0, r3
 800c47a:	f001 fcc5 	bl	800de08 <RCCEx_PLL2_Config>
 800c47e:	4603      	mov	r3, r0
 800c480:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c484:	e015      	b.n	800c4b2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c48a:	3328      	adds	r3, #40	; 0x28
 800c48c:	2102      	movs	r1, #2
 800c48e:	4618      	mov	r0, r3
 800c490:	f001 fd6c 	bl	800df6c <RCCEx_PLL3_Config>
 800c494:	4603      	mov	r3, r0
 800c496:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c49a:	e00a      	b.n	800c4b2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c49c:	2301      	movs	r3, #1
 800c49e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c4a2:	e006      	b.n	800c4b2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c4a4:	bf00      	nop
 800c4a6:	e004      	b.n	800c4b2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c4a8:	bf00      	nop
 800c4aa:	e002      	b.n	800c4b2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c4ac:	bf00      	nop
 800c4ae:	e000      	b.n	800c4b2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c4b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d10b      	bne.n	800c4d2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c4ba:	4b39      	ldr	r3, [pc, #228]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c4bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4be:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c4c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4ca:	4a35      	ldr	r2, [pc, #212]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c4cc:	430b      	orrs	r3, r1
 800c4ce:	6553      	str	r3, [r2, #84]	; 0x54
 800c4d0:	e003      	b.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c4d6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c4da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c4e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c4f0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c4f4:	460b      	mov	r3, r1
 800c4f6:	4313      	orrs	r3, r2
 800c4f8:	d058      	beq.n	800c5ac <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c502:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c506:	d033      	beq.n	800c570 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800c508:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c50c:	d82c      	bhi.n	800c568 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c50e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c512:	d02f      	beq.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c518:	d826      	bhi.n	800c568 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c51a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c51e:	d02b      	beq.n	800c578 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c520:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c524:	d820      	bhi.n	800c568 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c526:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c52a:	d012      	beq.n	800c552 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800c52c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c530:	d81a      	bhi.n	800c568 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c532:	2b00      	cmp	r3, #0
 800c534:	d022      	beq.n	800c57c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c53a:	d115      	bne.n	800c568 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c53c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c540:	3308      	adds	r3, #8
 800c542:	2100      	movs	r1, #0
 800c544:	4618      	mov	r0, r3
 800c546:	f001 fc5f 	bl	800de08 <RCCEx_PLL2_Config>
 800c54a:	4603      	mov	r3, r0
 800c54c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c550:	e015      	b.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c552:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c556:	3328      	adds	r3, #40	; 0x28
 800c558:	2102      	movs	r1, #2
 800c55a:	4618      	mov	r0, r3
 800c55c:	f001 fd06 	bl	800df6c <RCCEx_PLL3_Config>
 800c560:	4603      	mov	r3, r0
 800c562:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c566:	e00a      	b.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c568:	2301      	movs	r3, #1
 800c56a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c56e:	e006      	b.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c570:	bf00      	nop
 800c572:	e004      	b.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c574:	bf00      	nop
 800c576:	e002      	b.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c578:	bf00      	nop
 800c57a:	e000      	b.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c57c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c57e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c582:	2b00      	cmp	r3, #0
 800c584:	d10e      	bne.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c586:	4b06      	ldr	r3, [pc, #24]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c58a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c58e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c592:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c596:	4a02      	ldr	r2, [pc, #8]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c598:	430b      	orrs	r3, r1
 800c59a:	6593      	str	r3, [r2, #88]	; 0x58
 800c59c:	e006      	b.n	800c5ac <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800c59e:	bf00      	nop
 800c5a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c5a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c5ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c5b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c5bc:	2300      	movs	r3, #0
 800c5be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c5c2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c5c6:	460b      	mov	r3, r1
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	d055      	beq.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c5cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c5d4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c5d8:	d033      	beq.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800c5da:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c5de:	d82c      	bhi.n	800c63a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c5e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c5e4:	d02f      	beq.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c5e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c5ea:	d826      	bhi.n	800c63a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c5ec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c5f0:	d02b      	beq.n	800c64a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c5f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c5f6:	d820      	bhi.n	800c63a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c5f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c5fc:	d012      	beq.n	800c624 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800c5fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c602:	d81a      	bhi.n	800c63a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c604:	2b00      	cmp	r3, #0
 800c606:	d022      	beq.n	800c64e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c608:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c60c:	d115      	bne.n	800c63a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c60e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c612:	3308      	adds	r3, #8
 800c614:	2100      	movs	r1, #0
 800c616:	4618      	mov	r0, r3
 800c618:	f001 fbf6 	bl	800de08 <RCCEx_PLL2_Config>
 800c61c:	4603      	mov	r3, r0
 800c61e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c622:	e015      	b.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c628:	3328      	adds	r3, #40	; 0x28
 800c62a:	2102      	movs	r1, #2
 800c62c:	4618      	mov	r0, r3
 800c62e:	f001 fc9d 	bl	800df6c <RCCEx_PLL3_Config>
 800c632:	4603      	mov	r3, r0
 800c634:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c638:	e00a      	b.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c63a:	2301      	movs	r3, #1
 800c63c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c640:	e006      	b.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c642:	bf00      	nop
 800c644:	e004      	b.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c646:	bf00      	nop
 800c648:	e002      	b.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c64a:	bf00      	nop
 800c64c:	e000      	b.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c64e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c650:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c654:	2b00      	cmp	r3, #0
 800c656:	d10b      	bne.n	800c670 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c658:	4ba0      	ldr	r3, [pc, #640]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c65a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c65c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c664:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c668:	4a9c      	ldr	r2, [pc, #624]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c66a:	430b      	orrs	r3, r1
 800c66c:	6593      	str	r3, [r2, #88]	; 0x58
 800c66e:	e003      	b.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c670:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c674:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c680:	f002 0308 	and.w	r3, r2, #8
 800c684:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c688:	2300      	movs	r3, #0
 800c68a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c68e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c692:	460b      	mov	r3, r1
 800c694:	4313      	orrs	r3, r2
 800c696:	d01e      	beq.n	800c6d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c69c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6a4:	d10c      	bne.n	800c6c0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c6a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6aa:	3328      	adds	r3, #40	; 0x28
 800c6ac:	2102      	movs	r1, #2
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f001 fc5c 	bl	800df6c <RCCEx_PLL3_Config>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d002      	beq.n	800c6c0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c6c0:	4b86      	ldr	r3, [pc, #536]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c6c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c6c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6d0:	4a82      	ldr	r2, [pc, #520]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c6d2:	430b      	orrs	r3, r1
 800c6d4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c6d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6de:	f002 0310 	and.w	r3, r2, #16
 800c6e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c6ec:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c6f0:	460b      	mov	r3, r1
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	d01e      	beq.n	800c734 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c6f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c6fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c702:	d10c      	bne.n	800c71e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c708:	3328      	adds	r3, #40	; 0x28
 800c70a:	2102      	movs	r1, #2
 800c70c:	4618      	mov	r0, r3
 800c70e:	f001 fc2d 	bl	800df6c <RCCEx_PLL3_Config>
 800c712:	4603      	mov	r3, r0
 800c714:	2b00      	cmp	r3, #0
 800c716:	d002      	beq.n	800c71e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c718:	2301      	movs	r3, #1
 800c71a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c71e:	4b6f      	ldr	r3, [pc, #444]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c722:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c72a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c72e:	4a6b      	ldr	r2, [pc, #428]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c730:	430b      	orrs	r3, r1
 800c732:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c73c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c740:	67bb      	str	r3, [r7, #120]	; 0x78
 800c742:	2300      	movs	r3, #0
 800c744:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c746:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c74a:	460b      	mov	r3, r1
 800c74c:	4313      	orrs	r3, r2
 800c74e:	d03e      	beq.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c754:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c758:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c75c:	d022      	beq.n	800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c75e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c762:	d81b      	bhi.n	800c79c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c764:	2b00      	cmp	r3, #0
 800c766:	d003      	beq.n	800c770 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c76c:	d00b      	beq.n	800c786 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c76e:	e015      	b.n	800c79c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c774:	3308      	adds	r3, #8
 800c776:	2100      	movs	r1, #0
 800c778:	4618      	mov	r0, r3
 800c77a:	f001 fb45 	bl	800de08 <RCCEx_PLL2_Config>
 800c77e:	4603      	mov	r3, r0
 800c780:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c784:	e00f      	b.n	800c7a6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c78a:	3328      	adds	r3, #40	; 0x28
 800c78c:	2102      	movs	r1, #2
 800c78e:	4618      	mov	r0, r3
 800c790:	f001 fbec 	bl	800df6c <RCCEx_PLL3_Config>
 800c794:	4603      	mov	r3, r0
 800c796:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c79a:	e004      	b.n	800c7a6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c79c:	2301      	movs	r3, #1
 800c79e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c7a2:	e000      	b.n	800c7a6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c7a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d10b      	bne.n	800c7c6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c7ae:	4b4b      	ldr	r3, [pc, #300]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c7b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7b2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c7b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c7be:	4a47      	ldr	r2, [pc, #284]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c7c0:	430b      	orrs	r3, r1
 800c7c2:	6593      	str	r3, [r2, #88]	; 0x58
 800c7c4:	e003      	b.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c7ca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c7ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c7da:	673b      	str	r3, [r7, #112]	; 0x70
 800c7dc:	2300      	movs	r3, #0
 800c7de:	677b      	str	r3, [r7, #116]	; 0x74
 800c7e0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c7e4:	460b      	mov	r3, r1
 800c7e6:	4313      	orrs	r3, r2
 800c7e8:	d03b      	beq.n	800c862 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c7ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c7f6:	d01f      	beq.n	800c838 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c7f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c7fc:	d818      	bhi.n	800c830 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800c7fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c802:	d003      	beq.n	800c80c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800c804:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c808:	d007      	beq.n	800c81a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800c80a:	e011      	b.n	800c830 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c80c:	4b33      	ldr	r3, [pc, #204]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c810:	4a32      	ldr	r2, [pc, #200]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c816:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c818:	e00f      	b.n	800c83a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c81a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c81e:	3328      	adds	r3, #40	; 0x28
 800c820:	2101      	movs	r1, #1
 800c822:	4618      	mov	r0, r3
 800c824:	f001 fba2 	bl	800df6c <RCCEx_PLL3_Config>
 800c828:	4603      	mov	r3, r0
 800c82a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800c82e:	e004      	b.n	800c83a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c830:	2301      	movs	r3, #1
 800c832:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c836:	e000      	b.n	800c83a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800c838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c83a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d10b      	bne.n	800c85a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c842:	4b26      	ldr	r3, [pc, #152]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c846:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c84a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c84e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c852:	4a22      	ldr	r2, [pc, #136]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c854:	430b      	orrs	r3, r1
 800c856:	6553      	str	r3, [r2, #84]	; 0x54
 800c858:	e003      	b.n	800c862 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c85a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c85e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c86e:	66bb      	str	r3, [r7, #104]	; 0x68
 800c870:	2300      	movs	r3, #0
 800c872:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c874:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c878:	460b      	mov	r3, r1
 800c87a:	4313      	orrs	r3, r2
 800c87c:	d034      	beq.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c87e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c884:	2b00      	cmp	r3, #0
 800c886:	d003      	beq.n	800c890 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800c888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c88c:	d007      	beq.n	800c89e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800c88e:	e011      	b.n	800c8b4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c890:	4b12      	ldr	r3, [pc, #72]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c894:	4a11      	ldr	r2, [pc, #68]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c89a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c89c:	e00e      	b.n	800c8bc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c89e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8a2:	3308      	adds	r3, #8
 800c8a4:	2102      	movs	r1, #2
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f001 faae 	bl	800de08 <RCCEx_PLL2_Config>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c8b2:	e003      	b.n	800c8bc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c8ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c8bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d10d      	bne.n	800c8e0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c8c4:	4b05      	ldr	r3, [pc, #20]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c8c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c8cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8d2:	4a02      	ldr	r2, [pc, #8]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c8d4:	430b      	orrs	r3, r1
 800c8d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c8d8:	e006      	b.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800c8da:	bf00      	nop
 800c8dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c8e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c8e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c8f4:	663b      	str	r3, [r7, #96]	; 0x60
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	667b      	str	r3, [r7, #100]	; 0x64
 800c8fa:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c8fe:	460b      	mov	r3, r1
 800c900:	4313      	orrs	r3, r2
 800c902:	d00c      	beq.n	800c91e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c908:	3328      	adds	r3, #40	; 0x28
 800c90a:	2102      	movs	r1, #2
 800c90c:	4618      	mov	r0, r3
 800c90e:	f001 fb2d 	bl	800df6c <RCCEx_PLL3_Config>
 800c912:	4603      	mov	r3, r0
 800c914:	2b00      	cmp	r3, #0
 800c916:	d002      	beq.n	800c91e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800c918:	2301      	movs	r3, #1
 800c91a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c91e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c926:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c92a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c92c:	2300      	movs	r3, #0
 800c92e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c930:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c934:	460b      	mov	r3, r1
 800c936:	4313      	orrs	r3, r2
 800c938:	d036      	beq.n	800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c93a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c93e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c940:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c944:	d018      	beq.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800c946:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c94a:	d811      	bhi.n	800c970 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c94c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c950:	d014      	beq.n	800c97c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800c952:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c956:	d80b      	bhi.n	800c970 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d011      	beq.n	800c980 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800c95c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c960:	d106      	bne.n	800c970 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c962:	4bb7      	ldr	r3, [pc, #732]	; (800cc40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c966:	4ab6      	ldr	r2, [pc, #728]	; (800cc40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c96c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c96e:	e008      	b.n	800c982 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c970:	2301      	movs	r3, #1
 800c972:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c976:	e004      	b.n	800c982 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c978:	bf00      	nop
 800c97a:	e002      	b.n	800c982 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c97c:	bf00      	nop
 800c97e:	e000      	b.n	800c982 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c980:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c982:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c986:	2b00      	cmp	r3, #0
 800c988:	d10a      	bne.n	800c9a0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c98a:	4bad      	ldr	r3, [pc, #692]	; (800cc40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c98c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c98e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c996:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c998:	4aa9      	ldr	r2, [pc, #676]	; (800cc40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c99a:	430b      	orrs	r3, r1
 800c99c:	6553      	str	r3, [r2, #84]	; 0x54
 800c99e:	e003      	b.n	800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c9a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c9a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c9b4:	653b      	str	r3, [r7, #80]	; 0x50
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	657b      	str	r3, [r7, #84]	; 0x54
 800c9ba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c9be:	460b      	mov	r3, r1
 800c9c0:	4313      	orrs	r3, r2
 800c9c2:	d009      	beq.n	800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c9c4:	4b9e      	ldr	r3, [pc, #632]	; (800cc40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c9cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9d2:	4a9b      	ldr	r2, [pc, #620]	; (800cc40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9d4:	430b      	orrs	r3, r1
 800c9d6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c9d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c9e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c9ea:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c9ee:	460b      	mov	r3, r1
 800c9f0:	4313      	orrs	r3, r2
 800c9f2:	d009      	beq.n	800ca08 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c9f4:	4b92      	ldr	r3, [pc, #584]	; (800cc40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9f8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c9fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca02:	4a8f      	ldr	r2, [pc, #572]	; (800cc40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca04:	430b      	orrs	r3, r1
 800ca06:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ca08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca10:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800ca14:	643b      	str	r3, [r7, #64]	; 0x40
 800ca16:	2300      	movs	r3, #0
 800ca18:	647b      	str	r3, [r7, #68]	; 0x44
 800ca1a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800ca1e:	460b      	mov	r3, r1
 800ca20:	4313      	orrs	r3, r2
 800ca22:	d00e      	beq.n	800ca42 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ca24:	4b86      	ldr	r3, [pc, #536]	; (800cc40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca26:	691b      	ldr	r3, [r3, #16]
 800ca28:	4a85      	ldr	r2, [pc, #532]	; (800cc40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ca2e:	6113      	str	r3, [r2, #16]
 800ca30:	4b83      	ldr	r3, [pc, #524]	; (800cc40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca32:	6919      	ldr	r1, [r3, #16]
 800ca34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ca3c:	4a80      	ldr	r2, [pc, #512]	; (800cc40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca3e:	430b      	orrs	r3, r1
 800ca40:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ca42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800ca4e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca50:	2300      	movs	r3, #0
 800ca52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca54:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800ca58:	460b      	mov	r3, r1
 800ca5a:	4313      	orrs	r3, r2
 800ca5c:	d009      	beq.n	800ca72 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ca5e:	4b78      	ldr	r3, [pc, #480]	; (800cc40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca62:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ca66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca6c:	4a74      	ldr	r2, [pc, #464]	; (800cc40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca6e:	430b      	orrs	r3, r1
 800ca70:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ca72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca7a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800ca7e:	633b      	str	r3, [r7, #48]	; 0x30
 800ca80:	2300      	movs	r3, #0
 800ca82:	637b      	str	r3, [r7, #52]	; 0x34
 800ca84:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800ca88:	460b      	mov	r3, r1
 800ca8a:	4313      	orrs	r3, r2
 800ca8c:	d00a      	beq.n	800caa4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ca8e:	4b6c      	ldr	r3, [pc, #432]	; (800cc40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca92:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800ca96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca9e:	4a68      	ldr	r2, [pc, #416]	; (800cc40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800caa0:	430b      	orrs	r3, r1
 800caa2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800caa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800caa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caac:	2100      	movs	r1, #0
 800caae:	62b9      	str	r1, [r7, #40]	; 0x28
 800cab0:	f003 0301 	and.w	r3, r3, #1
 800cab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cab6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800caba:	460b      	mov	r3, r1
 800cabc:	4313      	orrs	r3, r2
 800cabe:	d011      	beq.n	800cae4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cac4:	3308      	adds	r3, #8
 800cac6:	2100      	movs	r1, #0
 800cac8:	4618      	mov	r0, r3
 800caca:	f001 f99d 	bl	800de08 <RCCEx_PLL2_Config>
 800cace:	4603      	mov	r3, r0
 800cad0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800cad4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d003      	beq.n	800cae4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cadc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cae0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800cae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caec:	2100      	movs	r1, #0
 800caee:	6239      	str	r1, [r7, #32]
 800caf0:	f003 0302 	and.w	r3, r3, #2
 800caf4:	627b      	str	r3, [r7, #36]	; 0x24
 800caf6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800cafa:	460b      	mov	r3, r1
 800cafc:	4313      	orrs	r3, r2
 800cafe:	d011      	beq.n	800cb24 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cb00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb04:	3308      	adds	r3, #8
 800cb06:	2101      	movs	r1, #1
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f001 f97d 	bl	800de08 <RCCEx_PLL2_Config>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800cb14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d003      	beq.n	800cb24 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cb20:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800cb24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb2c:	2100      	movs	r1, #0
 800cb2e:	61b9      	str	r1, [r7, #24]
 800cb30:	f003 0304 	and.w	r3, r3, #4
 800cb34:	61fb      	str	r3, [r7, #28]
 800cb36:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800cb3a:	460b      	mov	r3, r1
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	d011      	beq.n	800cb64 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cb40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb44:	3308      	adds	r3, #8
 800cb46:	2102      	movs	r1, #2
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f001 f95d 	bl	800de08 <RCCEx_PLL2_Config>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800cb54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d003      	beq.n	800cb64 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cb60:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800cb64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6c:	2100      	movs	r1, #0
 800cb6e:	6139      	str	r1, [r7, #16]
 800cb70:	f003 0308 	and.w	r3, r3, #8
 800cb74:	617b      	str	r3, [r7, #20]
 800cb76:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800cb7a:	460b      	mov	r3, r1
 800cb7c:	4313      	orrs	r3, r2
 800cb7e:	d011      	beq.n	800cba4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cb80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb84:	3328      	adds	r3, #40	; 0x28
 800cb86:	2100      	movs	r1, #0
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f001 f9ef 	bl	800df6c <RCCEx_PLL3_Config>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800cb94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d003      	beq.n	800cba4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cba0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800cba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbac:	2100      	movs	r1, #0
 800cbae:	60b9      	str	r1, [r7, #8]
 800cbb0:	f003 0310 	and.w	r3, r3, #16
 800cbb4:	60fb      	str	r3, [r7, #12]
 800cbb6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800cbba:	460b      	mov	r3, r1
 800cbbc:	4313      	orrs	r3, r2
 800cbbe:	d011      	beq.n	800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cbc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbc4:	3328      	adds	r3, #40	; 0x28
 800cbc6:	2101      	movs	r1, #1
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f001 f9cf 	bl	800df6c <RCCEx_PLL3_Config>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800cbd4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d003      	beq.n	800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbdc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cbe0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800cbe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbec:	2100      	movs	r1, #0
 800cbee:	6039      	str	r1, [r7, #0]
 800cbf0:	f003 0320 	and.w	r3, r3, #32
 800cbf4:	607b      	str	r3, [r7, #4]
 800cbf6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cbfa:	460b      	mov	r3, r1
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	d011      	beq.n	800cc24 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cc00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc04:	3328      	adds	r3, #40	; 0x28
 800cc06:	2102      	movs	r1, #2
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f001 f9af 	bl	800df6c <RCCEx_PLL3_Config>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800cc14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d003      	beq.n	800cc24 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cc20:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800cc24:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d101      	bne.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	e000      	b.n	800cc32 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800cc30:	2301      	movs	r3, #1
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cc3e:	bf00      	nop
 800cc40:	58024400 	.word	0x58024400

0800cc44 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b090      	sub	sp, #64	; 0x40
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800cc4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc52:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800cc56:	430b      	orrs	r3, r1
 800cc58:	f040 8094 	bne.w	800cd84 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800cc5c:	4b9b      	ldr	r3, [pc, #620]	; (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc60:	f003 0307 	and.w	r3, r3, #7
 800cc64:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cc66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc68:	2b04      	cmp	r3, #4
 800cc6a:	f200 8087 	bhi.w	800cd7c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800cc6e:	a201      	add	r2, pc, #4	; (adr r2, 800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800cc70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc74:	0800cc89 	.word	0x0800cc89
 800cc78:	0800ccb1 	.word	0x0800ccb1
 800cc7c:	0800ccd9 	.word	0x0800ccd9
 800cc80:	0800cd75 	.word	0x0800cd75
 800cc84:	0800cd01 	.word	0x0800cd01
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cc88:	4b90      	ldr	r3, [pc, #576]	; (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc94:	d108      	bne.n	800cca8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f000 ff62 	bl	800db64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cca4:	f000 bc93 	b.w	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccac:	f000 bc8f 	b.w	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ccb0:	4b86      	ldr	r3, [pc, #536]	; (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ccbc:	d108      	bne.n	800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccbe:	f107 0318 	add.w	r3, r7, #24
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f000 fca6 	bl	800d614 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ccc8:	69bb      	ldr	r3, [r7, #24]
 800ccca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cccc:	f000 bc7f 	b.w	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccd4:	f000 bc7b 	b.w	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ccd8:	4b7c      	ldr	r3, [pc, #496]	; (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cce0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cce4:	d108      	bne.n	800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cce6:	f107 030c 	add.w	r3, r7, #12
 800ccea:	4618      	mov	r0, r3
 800ccec:	f000 fde6 	bl	800d8bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccf4:	f000 bc6b 	b.w	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccfc:	f000 bc67 	b.w	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cd00:	4b72      	ldr	r3, [pc, #456]	; (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cd08:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cd0a:	4b70      	ldr	r3, [pc, #448]	; (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f003 0304 	and.w	r3, r3, #4
 800cd12:	2b04      	cmp	r3, #4
 800cd14:	d10c      	bne.n	800cd30 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800cd16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d109      	bne.n	800cd30 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd1c:	4b6b      	ldr	r3, [pc, #428]	; (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	08db      	lsrs	r3, r3, #3
 800cd22:	f003 0303 	and.w	r3, r3, #3
 800cd26:	4a6a      	ldr	r2, [pc, #424]	; (800ced0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800cd28:	fa22 f303 	lsr.w	r3, r2, r3
 800cd2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd2e:	e01f      	b.n	800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cd30:	4b66      	ldr	r3, [pc, #408]	; (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd3c:	d106      	bne.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800cd3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd44:	d102      	bne.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cd46:	4b63      	ldr	r3, [pc, #396]	; (800ced4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800cd48:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd4a:	e011      	b.n	800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cd4c:	4b5f      	ldr	r3, [pc, #380]	; (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd58:	d106      	bne.n	800cd68 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800cd5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd60:	d102      	bne.n	800cd68 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cd62:	4b5d      	ldr	r3, [pc, #372]	; (800ced8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cd64:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd66:	e003      	b.n	800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cd6c:	f000 bc2f 	b.w	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cd70:	f000 bc2d 	b.w	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cd74:	4b59      	ldr	r3, [pc, #356]	; (800cedc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cd76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd78:	f000 bc29 	b.w	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd80:	f000 bc25 	b.w	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800cd84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd88:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800cd8c:	430b      	orrs	r3, r1
 800cd8e:	f040 80a7 	bne.w	800cee0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800cd92:	4b4e      	ldr	r3, [pc, #312]	; (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd96:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800cd9a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cda2:	d054      	beq.n	800ce4e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800cda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cdaa:	f200 808b 	bhi.w	800cec4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cdae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cdb4:	f000 8083 	beq.w	800cebe <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800cdb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cdbe:	f200 8081 	bhi.w	800cec4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cdc8:	d02f      	beq.n	800ce2a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800cdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cdd0:	d878      	bhi.n	800cec4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d004      	beq.n	800cde2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800cdd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cdde:	d012      	beq.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800cde0:	e070      	b.n	800cec4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cde2:	4b3a      	ldr	r3, [pc, #232]	; (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cdea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cdee:	d107      	bne.n	800ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cdf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f000 feb5 	bl	800db64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cdfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdfe:	e3e6      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce00:	2300      	movs	r3, #0
 800ce02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce04:	e3e3      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce06:	4b31      	ldr	r3, [pc, #196]	; (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce12:	d107      	bne.n	800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce14:	f107 0318 	add.w	r3, r7, #24
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f000 fbfb 	bl	800d614 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ce1e:	69bb      	ldr	r3, [r7, #24]
 800ce20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce22:	e3d4      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce24:	2300      	movs	r3, #0
 800ce26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce28:	e3d1      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce2a:	4b28      	ldr	r3, [pc, #160]	; (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce36:	d107      	bne.n	800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce38:	f107 030c 	add.w	r3, r7, #12
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f000 fd3d 	bl	800d8bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce46:	e3c2      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce4c:	e3bf      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ce4e:	4b1f      	ldr	r3, [pc, #124]	; (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ce50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ce56:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ce58:	4b1c      	ldr	r3, [pc, #112]	; (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f003 0304 	and.w	r3, r3, #4
 800ce60:	2b04      	cmp	r3, #4
 800ce62:	d10c      	bne.n	800ce7e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800ce64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d109      	bne.n	800ce7e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce6a:	4b18      	ldr	r3, [pc, #96]	; (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	08db      	lsrs	r3, r3, #3
 800ce70:	f003 0303 	and.w	r3, r3, #3
 800ce74:	4a16      	ldr	r2, [pc, #88]	; (800ced0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ce76:	fa22 f303 	lsr.w	r3, r2, r3
 800ce7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce7c:	e01e      	b.n	800cebc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ce7e:	4b13      	ldr	r3, [pc, #76]	; (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce8a:	d106      	bne.n	800ce9a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800ce8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce92:	d102      	bne.n	800ce9a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ce94:	4b0f      	ldr	r3, [pc, #60]	; (800ced4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800ce96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce98:	e010      	b.n	800cebc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ce9a:	4b0c      	ldr	r3, [pc, #48]	; (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cea2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cea6:	d106      	bne.n	800ceb6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800cea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ceae:	d102      	bne.n	800ceb6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ceb0:	4b09      	ldr	r3, [pc, #36]	; (800ced8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ceb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ceb4:	e002      	b.n	800cebc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ceba:	e388      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cebc:	e387      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cebe:	4b07      	ldr	r3, [pc, #28]	; (800cedc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cec0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cec2:	e384      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cec4:	2300      	movs	r3, #0
 800cec6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cec8:	e381      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ceca:	bf00      	nop
 800cecc:	58024400 	.word	0x58024400
 800ced0:	03d09000 	.word	0x03d09000
 800ced4:	003d0900 	.word	0x003d0900
 800ced8:	02faf080 	.word	0x02faf080
 800cedc:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800cee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cee4:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800cee8:	430b      	orrs	r3, r1
 800ceea:	f040 809c 	bne.w	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ceee:	4b9e      	ldr	r3, [pc, #632]	; (800d168 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cef2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800cef6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cefa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cefe:	d054      	beq.n	800cfaa <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800cf00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cf06:	f200 808b 	bhi.w	800d020 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cf0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cf10:	f000 8083 	beq.w	800d01a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800cf14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf16:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cf1a:	f200 8081 	bhi.w	800d020 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cf1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf24:	d02f      	beq.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800cf26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf2c:	d878      	bhi.n	800d020 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cf2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d004      	beq.n	800cf3e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800cf34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cf3a:	d012      	beq.n	800cf62 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800cf3c:	e070      	b.n	800d020 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cf3e:	4b8a      	ldr	r3, [pc, #552]	; (800d168 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf4a:	d107      	bne.n	800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf50:	4618      	mov	r0, r3
 800cf52:	f000 fe07 	bl	800db64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cf56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf5a:	e338      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf60:	e335      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf62:	4b81      	ldr	r3, [pc, #516]	; (800d168 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf6e:	d107      	bne.n	800cf80 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf70:	f107 0318 	add.w	r3, r7, #24
 800cf74:	4618      	mov	r0, r3
 800cf76:	f000 fb4d 	bl	800d614 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cf7a:	69bb      	ldr	r3, [r7, #24]
 800cf7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf7e:	e326      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf80:	2300      	movs	r3, #0
 800cf82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf84:	e323      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cf86:	4b78      	ldr	r3, [pc, #480]	; (800d168 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf92:	d107      	bne.n	800cfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf94:	f107 030c 	add.w	r3, r7, #12
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f000 fc8f 	bl	800d8bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfa2:	e314      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfa8:	e311      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cfaa:	4b6f      	ldr	r3, [pc, #444]	; (800d168 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cfac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cfb2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cfb4:	4b6c      	ldr	r3, [pc, #432]	; (800d168 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f003 0304 	and.w	r3, r3, #4
 800cfbc:	2b04      	cmp	r3, #4
 800cfbe:	d10c      	bne.n	800cfda <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800cfc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d109      	bne.n	800cfda <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cfc6:	4b68      	ldr	r3, [pc, #416]	; (800d168 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	08db      	lsrs	r3, r3, #3
 800cfcc:	f003 0303 	and.w	r3, r3, #3
 800cfd0:	4a66      	ldr	r2, [pc, #408]	; (800d16c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800cfd2:	fa22 f303 	lsr.w	r3, r2, r3
 800cfd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfd8:	e01e      	b.n	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cfda:	4b63      	ldr	r3, [pc, #396]	; (800d168 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfe6:	d106      	bne.n	800cff6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800cfe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cfee:	d102      	bne.n	800cff6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cff0:	4b5f      	ldr	r3, [pc, #380]	; (800d170 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800cff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cff4:	e010      	b.n	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cff6:	4b5c      	ldr	r3, [pc, #368]	; (800d168 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cffe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d002:	d106      	bne.n	800d012 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800d004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d006:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d00a:	d102      	bne.n	800d012 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d00c:	4b59      	ldr	r3, [pc, #356]	; (800d174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d00e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d010:	e002      	b.n	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d012:	2300      	movs	r3, #0
 800d014:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d016:	e2da      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d018:	e2d9      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d01a:	4b57      	ldr	r3, [pc, #348]	; (800d178 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d01c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d01e:	e2d6      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d020:	2300      	movs	r3, #0
 800d022:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d024:	e2d3      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800d026:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d02a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800d02e:	430b      	orrs	r3, r1
 800d030:	f040 80a7 	bne.w	800d182 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800d034:	4b4c      	ldr	r3, [pc, #304]	; (800d168 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d038:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800d03c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d040:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d044:	d055      	beq.n	800d0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800d046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d048:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d04c:	f200 8096 	bhi.w	800d17c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d052:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d056:	f000 8084 	beq.w	800d162 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800d05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d05c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d060:	f200 808c 	bhi.w	800d17c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d06a:	d030      	beq.n	800d0ce <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800d06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d06e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d072:	f200 8083 	bhi.w	800d17c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d004      	beq.n	800d086 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800d07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d07e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d082:	d012      	beq.n	800d0aa <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800d084:	e07a      	b.n	800d17c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d086:	4b38      	ldr	r3, [pc, #224]	; (800d168 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d08e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d092:	d107      	bne.n	800d0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d098:	4618      	mov	r0, r3
 800d09a:	f000 fd63 	bl	800db64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0a2:	e294      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0a8:	e291      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d0aa:	4b2f      	ldr	r3, [pc, #188]	; (800d168 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d0b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d0b6:	d107      	bne.n	800d0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0b8:	f107 0318 	add.w	r3, r7, #24
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f000 faa9 	bl	800d614 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d0c2:	69bb      	ldr	r3, [r7, #24]
 800d0c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0c6:	e282      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0cc:	e27f      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d0ce:	4b26      	ldr	r3, [pc, #152]	; (800d168 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d0d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d0da:	d107      	bne.n	800d0ec <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0dc:	f107 030c 	add.w	r3, r7, #12
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f000 fbeb 	bl	800d8bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0ea:	e270      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0f0:	e26d      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d0f2:	4b1d      	ldr	r3, [pc, #116]	; (800d168 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d0f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d0fa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d0fc:	4b1a      	ldr	r3, [pc, #104]	; (800d168 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f003 0304 	and.w	r3, r3, #4
 800d104:	2b04      	cmp	r3, #4
 800d106:	d10c      	bne.n	800d122 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800d108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d109      	bne.n	800d122 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d10e:	4b16      	ldr	r3, [pc, #88]	; (800d168 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	08db      	lsrs	r3, r3, #3
 800d114:	f003 0303 	and.w	r3, r3, #3
 800d118:	4a14      	ldr	r2, [pc, #80]	; (800d16c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800d11a:	fa22 f303 	lsr.w	r3, r2, r3
 800d11e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d120:	e01e      	b.n	800d160 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d122:	4b11      	ldr	r3, [pc, #68]	; (800d168 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d12a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d12e:	d106      	bne.n	800d13e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800d130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d132:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d136:	d102      	bne.n	800d13e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d138:	4b0d      	ldr	r3, [pc, #52]	; (800d170 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d13a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d13c:	e010      	b.n	800d160 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d13e:	4b0a      	ldr	r3, [pc, #40]	; (800d168 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d146:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d14a:	d106      	bne.n	800d15a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800d14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d14e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d152:	d102      	bne.n	800d15a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d154:	4b07      	ldr	r3, [pc, #28]	; (800d174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d156:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d158:	e002      	b.n	800d160 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d15a:	2300      	movs	r3, #0
 800d15c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d15e:	e236      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d160:	e235      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d162:	4b05      	ldr	r3, [pc, #20]	; (800d178 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d164:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d166:	e232      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d168:	58024400 	.word	0x58024400
 800d16c:	03d09000 	.word	0x03d09000
 800d170:	003d0900 	.word	0x003d0900
 800d174:	02faf080 	.word	0x02faf080
 800d178:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800d17c:	2300      	movs	r3, #0
 800d17e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d180:	e225      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800d182:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d186:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800d18a:	430b      	orrs	r3, r1
 800d18c:	f040 8085 	bne.w	800d29a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800d190:	4b9c      	ldr	r3, [pc, #624]	; (800d404 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d194:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800d198:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800d19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d19c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d1a0:	d06b      	beq.n	800d27a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800d1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d1a8:	d874      	bhi.n	800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d1b0:	d056      	beq.n	800d260 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800d1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d1b8:	d86c      	bhi.n	800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d1c0:	d03b      	beq.n	800d23a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800d1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d1c8:	d864      	bhi.n	800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d1d0:	d021      	beq.n	800d216 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800d1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d1d8:	d85c      	bhi.n	800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d004      	beq.n	800d1ea <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800d1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1e6:	d004      	beq.n	800d1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800d1e8:	e054      	b.n	800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800d1ea:	f7fe fb5f 	bl	800b8ac <HAL_RCC_GetPCLK1Freq>
 800d1ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d1f0:	e1ed      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d1f2:	4b84      	ldr	r3, [pc, #528]	; (800d404 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d1fe:	d107      	bne.n	800d210 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d200:	f107 0318 	add.w	r3, r7, #24
 800d204:	4618      	mov	r0, r3
 800d206:	f000 fa05 	bl	800d614 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d20a:	69fb      	ldr	r3, [r7, #28]
 800d20c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d20e:	e1de      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d210:	2300      	movs	r3, #0
 800d212:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d214:	e1db      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d216:	4b7b      	ldr	r3, [pc, #492]	; (800d404 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d21e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d222:	d107      	bne.n	800d234 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d224:	f107 030c 	add.w	r3, r7, #12
 800d228:	4618      	mov	r0, r3
 800d22a:	f000 fb47 	bl	800d8bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d232:	e1cc      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d234:	2300      	movs	r3, #0
 800d236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d238:	e1c9      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d23a:	4b72      	ldr	r3, [pc, #456]	; (800d404 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f003 0304 	and.w	r3, r3, #4
 800d242:	2b04      	cmp	r3, #4
 800d244:	d109      	bne.n	800d25a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d246:	4b6f      	ldr	r3, [pc, #444]	; (800d404 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	08db      	lsrs	r3, r3, #3
 800d24c:	f003 0303 	and.w	r3, r3, #3
 800d250:	4a6d      	ldr	r2, [pc, #436]	; (800d408 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d252:	fa22 f303 	lsr.w	r3, r2, r3
 800d256:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d258:	e1b9      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d25a:	2300      	movs	r3, #0
 800d25c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d25e:	e1b6      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d260:	4b68      	ldr	r3, [pc, #416]	; (800d404 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d268:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d26c:	d102      	bne.n	800d274 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800d26e:	4b67      	ldr	r3, [pc, #412]	; (800d40c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d270:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d272:	e1ac      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d274:	2300      	movs	r3, #0
 800d276:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d278:	e1a9      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d27a:	4b62      	ldr	r3, [pc, #392]	; (800d404 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d282:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d286:	d102      	bne.n	800d28e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800d288:	4b61      	ldr	r3, [pc, #388]	; (800d410 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d28a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d28c:	e19f      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d28e:	2300      	movs	r3, #0
 800d290:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d292:	e19c      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d294:	2300      	movs	r3, #0
 800d296:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d298:	e199      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d29a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d29e:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800d2a2:	430b      	orrs	r3, r1
 800d2a4:	d173      	bne.n	800d38e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800d2a6:	4b57      	ldr	r3, [pc, #348]	; (800d404 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d2a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d2ae:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d2b6:	d02f      	beq.n	800d318 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800d2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d2be:	d863      	bhi.n	800d388 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800d2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d004      	beq.n	800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800d2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2cc:	d012      	beq.n	800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800d2ce:	e05b      	b.n	800d388 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d2d0:	4b4c      	ldr	r3, [pc, #304]	; (800d404 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d2dc:	d107      	bne.n	800d2ee <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2de:	f107 0318 	add.w	r3, r7, #24
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f000 f996 	bl	800d614 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d2e8:	69bb      	ldr	r3, [r7, #24]
 800d2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2ec:	e16f      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2f2:	e16c      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d2f4:	4b43      	ldr	r3, [pc, #268]	; (800d404 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d2fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d300:	d107      	bne.n	800d312 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d302:	f107 030c 	add.w	r3, r7, #12
 800d306:	4618      	mov	r0, r3
 800d308:	f000 fad8 	bl	800d8bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d310:	e15d      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d312:	2300      	movs	r3, #0
 800d314:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d316:	e15a      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d318:	4b3a      	ldr	r3, [pc, #232]	; (800d404 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d31a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d31c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d320:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d322:	4b38      	ldr	r3, [pc, #224]	; (800d404 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f003 0304 	and.w	r3, r3, #4
 800d32a:	2b04      	cmp	r3, #4
 800d32c:	d10c      	bne.n	800d348 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800d32e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d330:	2b00      	cmp	r3, #0
 800d332:	d109      	bne.n	800d348 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d334:	4b33      	ldr	r3, [pc, #204]	; (800d404 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	08db      	lsrs	r3, r3, #3
 800d33a:	f003 0303 	and.w	r3, r3, #3
 800d33e:	4a32      	ldr	r2, [pc, #200]	; (800d408 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d340:	fa22 f303 	lsr.w	r3, r2, r3
 800d344:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d346:	e01e      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d348:	4b2e      	ldr	r3, [pc, #184]	; (800d404 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d350:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d354:	d106      	bne.n	800d364 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800d356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d358:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d35c:	d102      	bne.n	800d364 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d35e:	4b2b      	ldr	r3, [pc, #172]	; (800d40c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d360:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d362:	e010      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d364:	4b27      	ldr	r3, [pc, #156]	; (800d404 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d36c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d370:	d106      	bne.n	800d380 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800d372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d378:	d102      	bne.n	800d380 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d37a:	4b25      	ldr	r3, [pc, #148]	; (800d410 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d37c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d37e:	e002      	b.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d380:	2300      	movs	r3, #0
 800d382:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d384:	e123      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d386:	e122      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d388:	2300      	movs	r3, #0
 800d38a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d38c:	e11f      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d38e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d392:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800d396:	430b      	orrs	r3, r1
 800d398:	d13c      	bne.n	800d414 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d39a:	4b1a      	ldr	r3, [pc, #104]	; (800d404 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d39c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d39e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d3a2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d004      	beq.n	800d3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800d3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d3b0:	d012      	beq.n	800d3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800d3b2:	e023      	b.n	800d3fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d3b4:	4b13      	ldr	r3, [pc, #76]	; (800d404 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d3bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d3c0:	d107      	bne.n	800d3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d3c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f000 fbcc 	bl	800db64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3d0:	e0fd      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3d6:	e0fa      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d3d8:	4b0a      	ldr	r3, [pc, #40]	; (800d404 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d3e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d3e4:	d107      	bne.n	800d3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3e6:	f107 0318 	add.w	r3, r7, #24
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f000 f912 	bl	800d614 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d3f0:	6a3b      	ldr	r3, [r7, #32]
 800d3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3f4:	e0eb      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3fa:	e0e8      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d400:	e0e5      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d402:	bf00      	nop
 800d404:	58024400 	.word	0x58024400
 800d408:	03d09000 	.word	0x03d09000
 800d40c:	003d0900 	.word	0x003d0900
 800d410:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d414:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d418:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800d41c:	430b      	orrs	r3, r1
 800d41e:	f040 8085 	bne.w	800d52c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d422:	4b6d      	ldr	r3, [pc, #436]	; (800d5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d426:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800d42a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d42e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d432:	d06b      	beq.n	800d50c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800d434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d436:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d43a:	d874      	bhi.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d43e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d442:	d056      	beq.n	800d4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800d444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d44a:	d86c      	bhi.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d44e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d452:	d03b      	beq.n	800d4cc <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800d454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d456:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d45a:	d864      	bhi.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d45e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d462:	d021      	beq.n	800d4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800d464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d466:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d46a:	d85c      	bhi.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d004      	beq.n	800d47c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800d472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d474:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d478:	d004      	beq.n	800d484 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800d47a:	e054      	b.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d47c:	f000 f8b4 	bl	800d5e8 <HAL_RCCEx_GetD3PCLK1Freq>
 800d480:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d482:	e0a4      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d484:	4b54      	ldr	r3, [pc, #336]	; (800d5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d48c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d490:	d107      	bne.n	800d4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d492:	f107 0318 	add.w	r3, r7, #24
 800d496:	4618      	mov	r0, r3
 800d498:	f000 f8bc 	bl	800d614 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d49c:	69fb      	ldr	r3, [r7, #28]
 800d49e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d4a0:	e095      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d4a6:	e092      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d4a8:	4b4b      	ldr	r3, [pc, #300]	; (800d5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d4b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d4b4:	d107      	bne.n	800d4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d4b6:	f107 030c 	add.w	r3, r7, #12
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f000 f9fe 	bl	800d8bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d4c4:	e083      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d4ca:	e080      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d4cc:	4b42      	ldr	r3, [pc, #264]	; (800d5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	f003 0304 	and.w	r3, r3, #4
 800d4d4:	2b04      	cmp	r3, #4
 800d4d6:	d109      	bne.n	800d4ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d4d8:	4b3f      	ldr	r3, [pc, #252]	; (800d5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	08db      	lsrs	r3, r3, #3
 800d4de:	f003 0303 	and.w	r3, r3, #3
 800d4e2:	4a3e      	ldr	r2, [pc, #248]	; (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800d4e4:	fa22 f303 	lsr.w	r3, r2, r3
 800d4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d4ea:	e070      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d4f0:	e06d      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d4f2:	4b39      	ldr	r3, [pc, #228]	; (800d5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4fe:	d102      	bne.n	800d506 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800d500:	4b37      	ldr	r3, [pc, #220]	; (800d5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d502:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d504:	e063      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d506:	2300      	movs	r3, #0
 800d508:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d50a:	e060      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d50c:	4b32      	ldr	r3, [pc, #200]	; (800d5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d514:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d518:	d102      	bne.n	800d520 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800d51a:	4b32      	ldr	r3, [pc, #200]	; (800d5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d51c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d51e:	e056      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d520:	2300      	movs	r3, #0
 800d522:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d524:	e053      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d526:	2300      	movs	r3, #0
 800d528:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d52a:	e050      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d52c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d530:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800d534:	430b      	orrs	r3, r1
 800d536:	d148      	bne.n	800d5ca <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d538:	4b27      	ldr	r3, [pc, #156]	; (800d5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d53a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d53c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d540:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d544:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d548:	d02a      	beq.n	800d5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800d54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d54c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d550:	d838      	bhi.n	800d5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800d552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d554:	2b00      	cmp	r3, #0
 800d556:	d004      	beq.n	800d562 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800d558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d55a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d55e:	d00d      	beq.n	800d57c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800d560:	e030      	b.n	800d5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d562:	4b1d      	ldr	r3, [pc, #116]	; (800d5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d56a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d56e:	d102      	bne.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800d570:	4b1c      	ldr	r3, [pc, #112]	; (800d5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d572:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d574:	e02b      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d576:	2300      	movs	r3, #0
 800d578:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d57a:	e028      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d57c:	4b16      	ldr	r3, [pc, #88]	; (800d5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d584:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d588:	d107      	bne.n	800d59a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d58a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d58e:	4618      	mov	r0, r3
 800d590:	f000 fae8 	bl	800db64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d596:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d598:	e019      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d59a:	2300      	movs	r3, #0
 800d59c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d59e:	e016      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d5a0:	4b0d      	ldr	r3, [pc, #52]	; (800d5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d5a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d5ac:	d107      	bne.n	800d5be <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d5ae:	f107 0318 	add.w	r3, r7, #24
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	f000 f82e 	bl	800d614 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d5b8:	69fb      	ldr	r3, [r7, #28]
 800d5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d5bc:	e007      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5c2:	e004      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5c8:	e001      	b.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800d5ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3740      	adds	r7, #64	; 0x40
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}
 800d5d8:	58024400 	.word	0x58024400
 800d5dc:	03d09000 	.word	0x03d09000
 800d5e0:	003d0900 	.word	0x003d0900
 800d5e4:	02faf080 	.word	0x02faf080

0800d5e8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d5ec:	f7fe f92e 	bl	800b84c <HAL_RCC_GetHCLKFreq>
 800d5f0:	4602      	mov	r2, r0
 800d5f2:	4b06      	ldr	r3, [pc, #24]	; (800d60c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d5f4:	6a1b      	ldr	r3, [r3, #32]
 800d5f6:	091b      	lsrs	r3, r3, #4
 800d5f8:	f003 0307 	and.w	r3, r3, #7
 800d5fc:	4904      	ldr	r1, [pc, #16]	; (800d610 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d5fe:	5ccb      	ldrb	r3, [r1, r3]
 800d600:	f003 031f 	and.w	r3, r3, #31
 800d604:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d608:	4618      	mov	r0, r3
 800d60a:	bd80      	pop	{r7, pc}
 800d60c:	58024400 	.word	0x58024400
 800d610:	08020140 	.word	0x08020140

0800d614 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d614:	b480      	push	{r7}
 800d616:	b089      	sub	sp, #36	; 0x24
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d61c:	4ba1      	ldr	r3, [pc, #644]	; (800d8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d61e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d620:	f003 0303 	and.w	r3, r3, #3
 800d624:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d626:	4b9f      	ldr	r3, [pc, #636]	; (800d8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d62a:	0b1b      	lsrs	r3, r3, #12
 800d62c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d630:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d632:	4b9c      	ldr	r3, [pc, #624]	; (800d8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d636:	091b      	lsrs	r3, r3, #4
 800d638:	f003 0301 	and.w	r3, r3, #1
 800d63c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d63e:	4b99      	ldr	r3, [pc, #612]	; (800d8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d642:	08db      	lsrs	r3, r3, #3
 800d644:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d648:	693a      	ldr	r2, [r7, #16]
 800d64a:	fb02 f303 	mul.w	r3, r2, r3
 800d64e:	ee07 3a90 	vmov	s15, r3
 800d652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d656:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	f000 8111 	beq.w	800d884 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d662:	69bb      	ldr	r3, [r7, #24]
 800d664:	2b02      	cmp	r3, #2
 800d666:	f000 8083 	beq.w	800d770 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d66a:	69bb      	ldr	r3, [r7, #24]
 800d66c:	2b02      	cmp	r3, #2
 800d66e:	f200 80a1 	bhi.w	800d7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d672:	69bb      	ldr	r3, [r7, #24]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d003      	beq.n	800d680 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d678:	69bb      	ldr	r3, [r7, #24]
 800d67a:	2b01      	cmp	r3, #1
 800d67c:	d056      	beq.n	800d72c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d67e:	e099      	b.n	800d7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d680:	4b88      	ldr	r3, [pc, #544]	; (800d8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	f003 0320 	and.w	r3, r3, #32
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d02d      	beq.n	800d6e8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d68c:	4b85      	ldr	r3, [pc, #532]	; (800d8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	08db      	lsrs	r3, r3, #3
 800d692:	f003 0303 	and.w	r3, r3, #3
 800d696:	4a84      	ldr	r2, [pc, #528]	; (800d8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d698:	fa22 f303 	lsr.w	r3, r2, r3
 800d69c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	ee07 3a90 	vmov	s15, r3
 800d6a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	ee07 3a90 	vmov	s15, r3
 800d6ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6b6:	4b7b      	ldr	r3, [pc, #492]	; (800d8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d6b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6be:	ee07 3a90 	vmov	s15, r3
 800d6c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d8ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d6ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d6e6:	e087      	b.n	800d7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d6e8:	697b      	ldr	r3, [r7, #20]
 800d6ea:	ee07 3a90 	vmov	s15, r3
 800d6ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d6f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6fa:	4b6a      	ldr	r3, [pc, #424]	; (800d8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d702:	ee07 3a90 	vmov	s15, r3
 800d706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d70a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d70e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d8ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d71a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d71e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d722:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d72a:	e065      	b.n	800d7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d72c:	697b      	ldr	r3, [r7, #20]
 800d72e:	ee07 3a90 	vmov	s15, r3
 800d732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d736:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d8b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d73a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d73e:	4b59      	ldr	r3, [pc, #356]	; (800d8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d746:	ee07 3a90 	vmov	s15, r3
 800d74a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d74e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d752:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d8ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d75a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d75e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d76a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d76e:	e043      	b.n	800d7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	ee07 3a90 	vmov	s15, r3
 800d776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d77a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d77e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d782:	4b48      	ldr	r3, [pc, #288]	; (800d8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d78a:	ee07 3a90 	vmov	s15, r3
 800d78e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d792:	ed97 6a03 	vldr	s12, [r7, #12]
 800d796:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d8ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d79a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d79e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d7a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d7b2:	e021      	b.n	800d7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	ee07 3a90 	vmov	s15, r3
 800d7ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d8b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d7c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7c6:	4b37      	ldr	r3, [pc, #220]	; (800d8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7ce:	ee07 3a90 	vmov	s15, r3
 800d7d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7da:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d8ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d7de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d7ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d7f6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d7f8:	4b2a      	ldr	r3, [pc, #168]	; (800d8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d7fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7fc:	0a5b      	lsrs	r3, r3, #9
 800d7fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d802:	ee07 3a90 	vmov	s15, r3
 800d806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d80a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d80e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d812:	edd7 6a07 	vldr	s13, [r7, #28]
 800d816:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d81a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d81e:	ee17 2a90 	vmov	r2, s15
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d826:	4b1f      	ldr	r3, [pc, #124]	; (800d8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d82a:	0c1b      	lsrs	r3, r3, #16
 800d82c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d830:	ee07 3a90 	vmov	s15, r3
 800d834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d838:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d83c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d840:	edd7 6a07 	vldr	s13, [r7, #28]
 800d844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d848:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d84c:	ee17 2a90 	vmov	r2, s15
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d854:	4b13      	ldr	r3, [pc, #76]	; (800d8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d858:	0e1b      	lsrs	r3, r3, #24
 800d85a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d85e:	ee07 3a90 	vmov	s15, r3
 800d862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d866:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d86a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d86e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d872:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d87a:	ee17 2a90 	vmov	r2, s15
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d882:	e008      	b.n	800d896 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2200      	movs	r2, #0
 800d888:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2200      	movs	r2, #0
 800d88e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2200      	movs	r2, #0
 800d894:	609a      	str	r2, [r3, #8]
}
 800d896:	bf00      	nop
 800d898:	3724      	adds	r7, #36	; 0x24
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr
 800d8a2:	bf00      	nop
 800d8a4:	58024400 	.word	0x58024400
 800d8a8:	03d09000 	.word	0x03d09000
 800d8ac:	46000000 	.word	0x46000000
 800d8b0:	4c742400 	.word	0x4c742400
 800d8b4:	4a742400 	.word	0x4a742400
 800d8b8:	4c3ebc20 	.word	0x4c3ebc20

0800d8bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b089      	sub	sp, #36	; 0x24
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d8c4:	4ba1      	ldr	r3, [pc, #644]	; (800db4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8c8:	f003 0303 	and.w	r3, r3, #3
 800d8cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d8ce:	4b9f      	ldr	r3, [pc, #636]	; (800db4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8d2:	0d1b      	lsrs	r3, r3, #20
 800d8d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d8d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d8da:	4b9c      	ldr	r3, [pc, #624]	; (800db4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8de:	0a1b      	lsrs	r3, r3, #8
 800d8e0:	f003 0301 	and.w	r3, r3, #1
 800d8e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d8e6:	4b99      	ldr	r3, [pc, #612]	; (800db4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8ea:	08db      	lsrs	r3, r3, #3
 800d8ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d8f0:	693a      	ldr	r2, [r7, #16]
 800d8f2:	fb02 f303 	mul.w	r3, r2, r3
 800d8f6:	ee07 3a90 	vmov	s15, r3
 800d8fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	2b00      	cmp	r3, #0
 800d906:	f000 8111 	beq.w	800db2c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d90a:	69bb      	ldr	r3, [r7, #24]
 800d90c:	2b02      	cmp	r3, #2
 800d90e:	f000 8083 	beq.w	800da18 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d912:	69bb      	ldr	r3, [r7, #24]
 800d914:	2b02      	cmp	r3, #2
 800d916:	f200 80a1 	bhi.w	800da5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d91a:	69bb      	ldr	r3, [r7, #24]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d003      	beq.n	800d928 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d920:	69bb      	ldr	r3, [r7, #24]
 800d922:	2b01      	cmp	r3, #1
 800d924:	d056      	beq.n	800d9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d926:	e099      	b.n	800da5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d928:	4b88      	ldr	r3, [pc, #544]	; (800db4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	f003 0320 	and.w	r3, r3, #32
 800d930:	2b00      	cmp	r3, #0
 800d932:	d02d      	beq.n	800d990 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d934:	4b85      	ldr	r3, [pc, #532]	; (800db4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	08db      	lsrs	r3, r3, #3
 800d93a:	f003 0303 	and.w	r3, r3, #3
 800d93e:	4a84      	ldr	r2, [pc, #528]	; (800db50 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d940:	fa22 f303 	lsr.w	r3, r2, r3
 800d944:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	ee07 3a90 	vmov	s15, r3
 800d94c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	ee07 3a90 	vmov	s15, r3
 800d956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d95a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d95e:	4b7b      	ldr	r3, [pc, #492]	; (800db4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d966:	ee07 3a90 	vmov	s15, r3
 800d96a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d96e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d972:	eddf 5a78 	vldr	s11, [pc, #480]	; 800db54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d97a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d97e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d98a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d98e:	e087      	b.n	800daa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	ee07 3a90 	vmov	s15, r3
 800d996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d99a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800db58 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d99e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9a2:	4b6a      	ldr	r3, [pc, #424]	; (800db4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9aa:	ee07 3a90 	vmov	s15, r3
 800d9ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800db54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d9ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d9d2:	e065      	b.n	800daa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	ee07 3a90 	vmov	s15, r3
 800d9da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800db5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d9e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9e6:	4b59      	ldr	r3, [pc, #356]	; (800db4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d9e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9ee:	ee07 3a90 	vmov	s15, r3
 800d9f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800db54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d9fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da16:	e043      	b.n	800daa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	ee07 3a90 	vmov	s15, r3
 800da1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da22:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800db60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800da26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da2a:	4b48      	ldr	r3, [pc, #288]	; (800db4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da32:	ee07 3a90 	vmov	s15, r3
 800da36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800da3e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800db54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800da42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da5a:	e021      	b.n	800daa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	ee07 3a90 	vmov	s15, r3
 800da62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da66:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800db5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800da6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da6e:	4b37      	ldr	r3, [pc, #220]	; (800db4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da76:	ee07 3a90 	vmov	s15, r3
 800da7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800da82:	eddf 5a34 	vldr	s11, [pc, #208]	; 800db54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800da86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da9e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800daa0:	4b2a      	ldr	r3, [pc, #168]	; (800db4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800daa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daa4:	0a5b      	lsrs	r3, r3, #9
 800daa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daaa:	ee07 3a90 	vmov	s15, r3
 800daae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dab2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dab6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800daba:	edd7 6a07 	vldr	s13, [r7, #28]
 800dabe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dac2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dac6:	ee17 2a90 	vmov	r2, s15
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800dace:	4b1f      	ldr	r3, [pc, #124]	; (800db4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dad2:	0c1b      	lsrs	r3, r3, #16
 800dad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dad8:	ee07 3a90 	vmov	s15, r3
 800dadc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dae0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dae4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dae8:	edd7 6a07 	vldr	s13, [r7, #28]
 800daec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800daf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800daf4:	ee17 2a90 	vmov	r2, s15
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800dafc:	4b13      	ldr	r3, [pc, #76]	; (800db4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dafe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db00:	0e1b      	lsrs	r3, r3, #24
 800db02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db06:	ee07 3a90 	vmov	s15, r3
 800db0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800db12:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db16:	edd7 6a07 	vldr	s13, [r7, #28]
 800db1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db22:	ee17 2a90 	vmov	r2, s15
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800db2a:	e008      	b.n	800db3e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2200      	movs	r2, #0
 800db30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2200      	movs	r2, #0
 800db36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2200      	movs	r2, #0
 800db3c:	609a      	str	r2, [r3, #8]
}
 800db3e:	bf00      	nop
 800db40:	3724      	adds	r7, #36	; 0x24
 800db42:	46bd      	mov	sp, r7
 800db44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db48:	4770      	bx	lr
 800db4a:	bf00      	nop
 800db4c:	58024400 	.word	0x58024400
 800db50:	03d09000 	.word	0x03d09000
 800db54:	46000000 	.word	0x46000000
 800db58:	4c742400 	.word	0x4c742400
 800db5c:	4a742400 	.word	0x4a742400
 800db60:	4c3ebc20 	.word	0x4c3ebc20

0800db64 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800db64:	b480      	push	{r7}
 800db66:	b089      	sub	sp, #36	; 0x24
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800db6c:	4ba0      	ldr	r3, [pc, #640]	; (800ddf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db70:	f003 0303 	and.w	r3, r3, #3
 800db74:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800db76:	4b9e      	ldr	r3, [pc, #632]	; (800ddf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db7a:	091b      	lsrs	r3, r3, #4
 800db7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db80:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800db82:	4b9b      	ldr	r3, [pc, #620]	; (800ddf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db86:	f003 0301 	and.w	r3, r3, #1
 800db8a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800db8c:	4b98      	ldr	r3, [pc, #608]	; (800ddf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db90:	08db      	lsrs	r3, r3, #3
 800db92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800db96:	693a      	ldr	r2, [r7, #16]
 800db98:	fb02 f303 	mul.w	r3, r2, r3
 800db9c:	ee07 3a90 	vmov	s15, r3
 800dba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dba4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	f000 8111 	beq.w	800ddd2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800dbb0:	69bb      	ldr	r3, [r7, #24]
 800dbb2:	2b02      	cmp	r3, #2
 800dbb4:	f000 8083 	beq.w	800dcbe <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800dbb8:	69bb      	ldr	r3, [r7, #24]
 800dbba:	2b02      	cmp	r3, #2
 800dbbc:	f200 80a1 	bhi.w	800dd02 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800dbc0:	69bb      	ldr	r3, [r7, #24]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d003      	beq.n	800dbce <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800dbc6:	69bb      	ldr	r3, [r7, #24]
 800dbc8:	2b01      	cmp	r3, #1
 800dbca:	d056      	beq.n	800dc7a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800dbcc:	e099      	b.n	800dd02 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dbce:	4b88      	ldr	r3, [pc, #544]	; (800ddf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	f003 0320 	and.w	r3, r3, #32
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d02d      	beq.n	800dc36 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dbda:	4b85      	ldr	r3, [pc, #532]	; (800ddf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	08db      	lsrs	r3, r3, #3
 800dbe0:	f003 0303 	and.w	r3, r3, #3
 800dbe4:	4a83      	ldr	r2, [pc, #524]	; (800ddf4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800dbe6:	fa22 f303 	lsr.w	r3, r2, r3
 800dbea:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	ee07 3a90 	vmov	s15, r3
 800dbf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	ee07 3a90 	vmov	s15, r3
 800dbfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc04:	4b7a      	ldr	r3, [pc, #488]	; (800ddf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc0c:	ee07 3a90 	vmov	s15, r3
 800dc10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc14:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc18:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ddf8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dc1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc30:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800dc34:	e087      	b.n	800dd46 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	ee07 3a90 	vmov	s15, r3
 800dc3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc40:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ddfc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800dc44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc48:	4b69      	ldr	r3, [pc, #420]	; (800ddf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc50:	ee07 3a90 	vmov	s15, r3
 800dc54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc58:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc5c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ddf8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dc60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dc78:	e065      	b.n	800dd46 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	ee07 3a90 	vmov	s15, r3
 800dc80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc84:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800de00 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800dc88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc8c:	4b58      	ldr	r3, [pc, #352]	; (800ddf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc94:	ee07 3a90 	vmov	s15, r3
 800dc98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc9c:	ed97 6a03 	vldr	s12, [r7, #12]
 800dca0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ddf8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dca4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dca8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dcac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dcb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dcb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dcbc:	e043      	b.n	800dd46 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	ee07 3a90 	vmov	s15, r3
 800dcc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcc8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800de04 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800dccc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dcd0:	4b47      	ldr	r3, [pc, #284]	; (800ddf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dcd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcd8:	ee07 3a90 	vmov	s15, r3
 800dcdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dce0:	ed97 6a03 	vldr	s12, [r7, #12]
 800dce4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ddf8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dce8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dcec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dcf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dcf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dcf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcfc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dd00:	e021      	b.n	800dd46 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	ee07 3a90 	vmov	s15, r3
 800dd08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd0c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ddfc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800dd10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd14:	4b36      	ldr	r3, [pc, #216]	; (800ddf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dd16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd1c:	ee07 3a90 	vmov	s15, r3
 800dd20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd24:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd28:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ddf8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dd2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dd38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dd44:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800dd46:	4b2a      	ldr	r3, [pc, #168]	; (800ddf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dd48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd4a:	0a5b      	lsrs	r3, r3, #9
 800dd4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd50:	ee07 3a90 	vmov	s15, r3
 800dd54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dd5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dd60:	edd7 6a07 	vldr	s13, [r7, #28]
 800dd64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd6c:	ee17 2a90 	vmov	r2, s15
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800dd74:	4b1e      	ldr	r3, [pc, #120]	; (800ddf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dd76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd78:	0c1b      	lsrs	r3, r3, #16
 800dd7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd7e:	ee07 3a90 	vmov	s15, r3
 800dd82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dd8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dd8e:	edd7 6a07 	vldr	s13, [r7, #28]
 800dd92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd9a:	ee17 2a90 	vmov	r2, s15
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800dda2:	4b13      	ldr	r3, [pc, #76]	; (800ddf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dda4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dda6:	0e1b      	lsrs	r3, r3, #24
 800dda8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddac:	ee07 3a90 	vmov	s15, r3
 800ddb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ddb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ddbc:	edd7 6a07 	vldr	s13, [r7, #28]
 800ddc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ddc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ddc8:	ee17 2a90 	vmov	r2, s15
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ddd0:	e008      	b.n	800dde4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2200      	movs	r2, #0
 800dddc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2200      	movs	r2, #0
 800dde2:	609a      	str	r2, [r3, #8]
}
 800dde4:	bf00      	nop
 800dde6:	3724      	adds	r7, #36	; 0x24
 800dde8:	46bd      	mov	sp, r7
 800ddea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddee:	4770      	bx	lr
 800ddf0:	58024400 	.word	0x58024400
 800ddf4:	03d09000 	.word	0x03d09000
 800ddf8:	46000000 	.word	0x46000000
 800ddfc:	4c742400 	.word	0x4c742400
 800de00:	4a742400 	.word	0x4a742400
 800de04:	4c3ebc20 	.word	0x4c3ebc20

0800de08 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b084      	sub	sp, #16
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800de12:	2300      	movs	r3, #0
 800de14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800de16:	4b53      	ldr	r3, [pc, #332]	; (800df64 <RCCEx_PLL2_Config+0x15c>)
 800de18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de1a:	f003 0303 	and.w	r3, r3, #3
 800de1e:	2b03      	cmp	r3, #3
 800de20:	d101      	bne.n	800de26 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800de22:	2301      	movs	r3, #1
 800de24:	e099      	b.n	800df5a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800de26:	4b4f      	ldr	r3, [pc, #316]	; (800df64 <RCCEx_PLL2_Config+0x15c>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	4a4e      	ldr	r2, [pc, #312]	; (800df64 <RCCEx_PLL2_Config+0x15c>)
 800de2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800de30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de32:	f7f6 fa2f 	bl	8004294 <HAL_GetTick>
 800de36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800de38:	e008      	b.n	800de4c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800de3a:	f7f6 fa2b 	bl	8004294 <HAL_GetTick>
 800de3e:	4602      	mov	r2, r0
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	1ad3      	subs	r3, r2, r3
 800de44:	2b02      	cmp	r3, #2
 800de46:	d901      	bls.n	800de4c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800de48:	2303      	movs	r3, #3
 800de4a:	e086      	b.n	800df5a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800de4c:	4b45      	ldr	r3, [pc, #276]	; (800df64 <RCCEx_PLL2_Config+0x15c>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800de54:	2b00      	cmp	r3, #0
 800de56:	d1f0      	bne.n	800de3a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800de58:	4b42      	ldr	r3, [pc, #264]	; (800df64 <RCCEx_PLL2_Config+0x15c>)
 800de5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de5c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	031b      	lsls	r3, r3, #12
 800de66:	493f      	ldr	r1, [pc, #252]	; (800df64 <RCCEx_PLL2_Config+0x15c>)
 800de68:	4313      	orrs	r3, r2
 800de6a:	628b      	str	r3, [r1, #40]	; 0x28
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	685b      	ldr	r3, [r3, #4]
 800de70:	3b01      	subs	r3, #1
 800de72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	689b      	ldr	r3, [r3, #8]
 800de7a:	3b01      	subs	r3, #1
 800de7c:	025b      	lsls	r3, r3, #9
 800de7e:	b29b      	uxth	r3, r3
 800de80:	431a      	orrs	r2, r3
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	68db      	ldr	r3, [r3, #12]
 800de86:	3b01      	subs	r3, #1
 800de88:	041b      	lsls	r3, r3, #16
 800de8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800de8e:	431a      	orrs	r2, r3
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	691b      	ldr	r3, [r3, #16]
 800de94:	3b01      	subs	r3, #1
 800de96:	061b      	lsls	r3, r3, #24
 800de98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800de9c:	4931      	ldr	r1, [pc, #196]	; (800df64 <RCCEx_PLL2_Config+0x15c>)
 800de9e:	4313      	orrs	r3, r2
 800dea0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800dea2:	4b30      	ldr	r3, [pc, #192]	; (800df64 <RCCEx_PLL2_Config+0x15c>)
 800dea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dea6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	695b      	ldr	r3, [r3, #20]
 800deae:	492d      	ldr	r1, [pc, #180]	; (800df64 <RCCEx_PLL2_Config+0x15c>)
 800deb0:	4313      	orrs	r3, r2
 800deb2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800deb4:	4b2b      	ldr	r3, [pc, #172]	; (800df64 <RCCEx_PLL2_Config+0x15c>)
 800deb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deb8:	f023 0220 	bic.w	r2, r3, #32
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	699b      	ldr	r3, [r3, #24]
 800dec0:	4928      	ldr	r1, [pc, #160]	; (800df64 <RCCEx_PLL2_Config+0x15c>)
 800dec2:	4313      	orrs	r3, r2
 800dec4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800dec6:	4b27      	ldr	r3, [pc, #156]	; (800df64 <RCCEx_PLL2_Config+0x15c>)
 800dec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deca:	4a26      	ldr	r2, [pc, #152]	; (800df64 <RCCEx_PLL2_Config+0x15c>)
 800decc:	f023 0310 	bic.w	r3, r3, #16
 800ded0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ded2:	4b24      	ldr	r3, [pc, #144]	; (800df64 <RCCEx_PLL2_Config+0x15c>)
 800ded4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ded6:	4b24      	ldr	r3, [pc, #144]	; (800df68 <RCCEx_PLL2_Config+0x160>)
 800ded8:	4013      	ands	r3, r2
 800deda:	687a      	ldr	r2, [r7, #4]
 800dedc:	69d2      	ldr	r2, [r2, #28]
 800dede:	00d2      	lsls	r2, r2, #3
 800dee0:	4920      	ldr	r1, [pc, #128]	; (800df64 <RCCEx_PLL2_Config+0x15c>)
 800dee2:	4313      	orrs	r3, r2
 800dee4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800dee6:	4b1f      	ldr	r3, [pc, #124]	; (800df64 <RCCEx_PLL2_Config+0x15c>)
 800dee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deea:	4a1e      	ldr	r2, [pc, #120]	; (800df64 <RCCEx_PLL2_Config+0x15c>)
 800deec:	f043 0310 	orr.w	r3, r3, #16
 800def0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d106      	bne.n	800df06 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800def8:	4b1a      	ldr	r3, [pc, #104]	; (800df64 <RCCEx_PLL2_Config+0x15c>)
 800defa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800defc:	4a19      	ldr	r2, [pc, #100]	; (800df64 <RCCEx_PLL2_Config+0x15c>)
 800defe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800df02:	62d3      	str	r3, [r2, #44]	; 0x2c
 800df04:	e00f      	b.n	800df26 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	2b01      	cmp	r3, #1
 800df0a:	d106      	bne.n	800df1a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800df0c:	4b15      	ldr	r3, [pc, #84]	; (800df64 <RCCEx_PLL2_Config+0x15c>)
 800df0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df10:	4a14      	ldr	r2, [pc, #80]	; (800df64 <RCCEx_PLL2_Config+0x15c>)
 800df12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800df16:	62d3      	str	r3, [r2, #44]	; 0x2c
 800df18:	e005      	b.n	800df26 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800df1a:	4b12      	ldr	r3, [pc, #72]	; (800df64 <RCCEx_PLL2_Config+0x15c>)
 800df1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df1e:	4a11      	ldr	r2, [pc, #68]	; (800df64 <RCCEx_PLL2_Config+0x15c>)
 800df20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800df24:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800df26:	4b0f      	ldr	r3, [pc, #60]	; (800df64 <RCCEx_PLL2_Config+0x15c>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	4a0e      	ldr	r2, [pc, #56]	; (800df64 <RCCEx_PLL2_Config+0x15c>)
 800df2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800df30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800df32:	f7f6 f9af 	bl	8004294 <HAL_GetTick>
 800df36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800df38:	e008      	b.n	800df4c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800df3a:	f7f6 f9ab 	bl	8004294 <HAL_GetTick>
 800df3e:	4602      	mov	r2, r0
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	1ad3      	subs	r3, r2, r3
 800df44:	2b02      	cmp	r3, #2
 800df46:	d901      	bls.n	800df4c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800df48:	2303      	movs	r3, #3
 800df4a:	e006      	b.n	800df5a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800df4c:	4b05      	ldr	r3, [pc, #20]	; (800df64 <RCCEx_PLL2_Config+0x15c>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800df54:	2b00      	cmp	r3, #0
 800df56:	d0f0      	beq.n	800df3a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800df58:	7bfb      	ldrb	r3, [r7, #15]
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	3710      	adds	r7, #16
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}
 800df62:	bf00      	nop
 800df64:	58024400 	.word	0x58024400
 800df68:	ffff0007 	.word	0xffff0007

0800df6c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b084      	sub	sp, #16
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800df76:	2300      	movs	r3, #0
 800df78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800df7a:	4b53      	ldr	r3, [pc, #332]	; (800e0c8 <RCCEx_PLL3_Config+0x15c>)
 800df7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df7e:	f003 0303 	and.w	r3, r3, #3
 800df82:	2b03      	cmp	r3, #3
 800df84:	d101      	bne.n	800df8a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800df86:	2301      	movs	r3, #1
 800df88:	e099      	b.n	800e0be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800df8a:	4b4f      	ldr	r3, [pc, #316]	; (800e0c8 <RCCEx_PLL3_Config+0x15c>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	4a4e      	ldr	r2, [pc, #312]	; (800e0c8 <RCCEx_PLL3_Config+0x15c>)
 800df90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800df94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800df96:	f7f6 f97d 	bl	8004294 <HAL_GetTick>
 800df9a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800df9c:	e008      	b.n	800dfb0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800df9e:	f7f6 f979 	bl	8004294 <HAL_GetTick>
 800dfa2:	4602      	mov	r2, r0
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	1ad3      	subs	r3, r2, r3
 800dfa8:	2b02      	cmp	r3, #2
 800dfaa:	d901      	bls.n	800dfb0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dfac:	2303      	movs	r3, #3
 800dfae:	e086      	b.n	800e0be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dfb0:	4b45      	ldr	r3, [pc, #276]	; (800e0c8 <RCCEx_PLL3_Config+0x15c>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d1f0      	bne.n	800df9e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800dfbc:	4b42      	ldr	r3, [pc, #264]	; (800e0c8 <RCCEx_PLL3_Config+0x15c>)
 800dfbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfc0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	051b      	lsls	r3, r3, #20
 800dfca:	493f      	ldr	r1, [pc, #252]	; (800e0c8 <RCCEx_PLL3_Config+0x15c>)
 800dfcc:	4313      	orrs	r3, r2
 800dfce:	628b      	str	r3, [r1, #40]	; 0x28
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	685b      	ldr	r3, [r3, #4]
 800dfd4:	3b01      	subs	r3, #1
 800dfd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	689b      	ldr	r3, [r3, #8]
 800dfde:	3b01      	subs	r3, #1
 800dfe0:	025b      	lsls	r3, r3, #9
 800dfe2:	b29b      	uxth	r3, r3
 800dfe4:	431a      	orrs	r2, r3
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	68db      	ldr	r3, [r3, #12]
 800dfea:	3b01      	subs	r3, #1
 800dfec:	041b      	lsls	r3, r3, #16
 800dfee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dff2:	431a      	orrs	r2, r3
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	691b      	ldr	r3, [r3, #16]
 800dff8:	3b01      	subs	r3, #1
 800dffa:	061b      	lsls	r3, r3, #24
 800dffc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e000:	4931      	ldr	r1, [pc, #196]	; (800e0c8 <RCCEx_PLL3_Config+0x15c>)
 800e002:	4313      	orrs	r3, r2
 800e004:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e006:	4b30      	ldr	r3, [pc, #192]	; (800e0c8 <RCCEx_PLL3_Config+0x15c>)
 800e008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e00a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	695b      	ldr	r3, [r3, #20]
 800e012:	492d      	ldr	r1, [pc, #180]	; (800e0c8 <RCCEx_PLL3_Config+0x15c>)
 800e014:	4313      	orrs	r3, r2
 800e016:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e018:	4b2b      	ldr	r3, [pc, #172]	; (800e0c8 <RCCEx_PLL3_Config+0x15c>)
 800e01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e01c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	699b      	ldr	r3, [r3, #24]
 800e024:	4928      	ldr	r1, [pc, #160]	; (800e0c8 <RCCEx_PLL3_Config+0x15c>)
 800e026:	4313      	orrs	r3, r2
 800e028:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e02a:	4b27      	ldr	r3, [pc, #156]	; (800e0c8 <RCCEx_PLL3_Config+0x15c>)
 800e02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e02e:	4a26      	ldr	r2, [pc, #152]	; (800e0c8 <RCCEx_PLL3_Config+0x15c>)
 800e030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e034:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e036:	4b24      	ldr	r3, [pc, #144]	; (800e0c8 <RCCEx_PLL3_Config+0x15c>)
 800e038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e03a:	4b24      	ldr	r3, [pc, #144]	; (800e0cc <RCCEx_PLL3_Config+0x160>)
 800e03c:	4013      	ands	r3, r2
 800e03e:	687a      	ldr	r2, [r7, #4]
 800e040:	69d2      	ldr	r2, [r2, #28]
 800e042:	00d2      	lsls	r2, r2, #3
 800e044:	4920      	ldr	r1, [pc, #128]	; (800e0c8 <RCCEx_PLL3_Config+0x15c>)
 800e046:	4313      	orrs	r3, r2
 800e048:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e04a:	4b1f      	ldr	r3, [pc, #124]	; (800e0c8 <RCCEx_PLL3_Config+0x15c>)
 800e04c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e04e:	4a1e      	ldr	r2, [pc, #120]	; (800e0c8 <RCCEx_PLL3_Config+0x15c>)
 800e050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e054:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d106      	bne.n	800e06a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e05c:	4b1a      	ldr	r3, [pc, #104]	; (800e0c8 <RCCEx_PLL3_Config+0x15c>)
 800e05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e060:	4a19      	ldr	r2, [pc, #100]	; (800e0c8 <RCCEx_PLL3_Config+0x15c>)
 800e062:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e066:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e068:	e00f      	b.n	800e08a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	2b01      	cmp	r3, #1
 800e06e:	d106      	bne.n	800e07e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e070:	4b15      	ldr	r3, [pc, #84]	; (800e0c8 <RCCEx_PLL3_Config+0x15c>)
 800e072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e074:	4a14      	ldr	r2, [pc, #80]	; (800e0c8 <RCCEx_PLL3_Config+0x15c>)
 800e076:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e07a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e07c:	e005      	b.n	800e08a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e07e:	4b12      	ldr	r3, [pc, #72]	; (800e0c8 <RCCEx_PLL3_Config+0x15c>)
 800e080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e082:	4a11      	ldr	r2, [pc, #68]	; (800e0c8 <RCCEx_PLL3_Config+0x15c>)
 800e084:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e088:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e08a:	4b0f      	ldr	r3, [pc, #60]	; (800e0c8 <RCCEx_PLL3_Config+0x15c>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	4a0e      	ldr	r2, [pc, #56]	; (800e0c8 <RCCEx_PLL3_Config+0x15c>)
 800e090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e094:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e096:	f7f6 f8fd 	bl	8004294 <HAL_GetTick>
 800e09a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e09c:	e008      	b.n	800e0b0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e09e:	f7f6 f8f9 	bl	8004294 <HAL_GetTick>
 800e0a2:	4602      	mov	r2, r0
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	1ad3      	subs	r3, r2, r3
 800e0a8:	2b02      	cmp	r3, #2
 800e0aa:	d901      	bls.n	800e0b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e0ac:	2303      	movs	r3, #3
 800e0ae:	e006      	b.n	800e0be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e0b0:	4b05      	ldr	r3, [pc, #20]	; (800e0c8 <RCCEx_PLL3_Config+0x15c>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d0f0      	beq.n	800e09e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0be:	4618      	mov	r0, r3
 800e0c0:	3710      	adds	r7, #16
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}
 800e0c6:	bf00      	nop
 800e0c8:	58024400 	.word	0x58024400
 800e0cc:	ffff0007 	.word	0xffff0007

0800e0d0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b08a      	sub	sp, #40	; 0x28
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d101      	bne.n	800e0e2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800e0de:	2301      	movs	r3, #1
 800e0e0:	e075      	b.n	800e1ce <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e0e8:	b2db      	uxtb	r3, r3
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d105      	bne.n	800e0fa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	f7f5 f965 	bl	80033c4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2204      	movs	r2, #4
 800e0fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	f000 f868 	bl	800e1d8 <HAL_SD_InitCard>
 800e108:	4603      	mov	r3, r0
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d001      	beq.n	800e112 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800e10e:	2301      	movs	r3, #1
 800e110:	e05d      	b.n	800e1ce <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800e112:	f107 0308 	add.w	r3, r7, #8
 800e116:	4619      	mov	r1, r3
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	f000 fdaf 	bl	800ec7c <HAL_SD_GetCardStatus>
 800e11e:	4603      	mov	r3, r0
 800e120:	2b00      	cmp	r3, #0
 800e122:	d001      	beq.n	800e128 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800e124:	2301      	movs	r3, #1
 800e126:	e052      	b.n	800e1ce <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800e128:	7e3b      	ldrb	r3, [r7, #24]
 800e12a:	b2db      	uxtb	r3, r3
 800e12c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800e12e:	7e7b      	ldrb	r3, [r7, #25]
 800e130:	b2db      	uxtb	r3, r3
 800e132:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e138:	2b01      	cmp	r3, #1
 800e13a:	d10a      	bne.n	800e152 <HAL_SD_Init+0x82>
 800e13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d102      	bne.n	800e148 <HAL_SD_Init+0x78>
 800e142:	6a3b      	ldr	r3, [r7, #32]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d004      	beq.n	800e152 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e14e:	659a      	str	r2, [r3, #88]	; 0x58
 800e150:	e00b      	b.n	800e16a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e156:	2b01      	cmp	r3, #1
 800e158:	d104      	bne.n	800e164 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e160:	659a      	str	r2, [r3, #88]	; 0x58
 800e162:	e002      	b.n	800e16a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2200      	movs	r2, #0
 800e168:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	68db      	ldr	r3, [r3, #12]
 800e16e:	4619      	mov	r1, r3
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f000 fe6d 	bl	800ee50 <HAL_SD_ConfigWideBusOperation>
 800e176:	4603      	mov	r3, r0
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d001      	beq.n	800e180 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800e17c:	2301      	movs	r3, #1
 800e17e:	e026      	b.n	800e1ce <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800e180:	f7f6 f888 	bl	8004294 <HAL_GetTick>
 800e184:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e186:	e011      	b.n	800e1ac <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e188:	f7f6 f884 	bl	8004294 <HAL_GetTick>
 800e18c:	4602      	mov	r2, r0
 800e18e:	69fb      	ldr	r3, [r7, #28]
 800e190:	1ad3      	subs	r3, r2, r3
 800e192:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e196:	d109      	bne.n	800e1ac <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e19e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800e1a8:	2303      	movs	r3, #3
 800e1aa:	e010      	b.n	800e1ce <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f000 ff61 	bl	800f074 <HAL_SD_GetCardState>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	2b04      	cmp	r3, #4
 800e1b6:	d1e7      	bne.n	800e188 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2201      	movs	r2, #1
 800e1c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800e1cc:	2300      	movs	r3, #0
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3728      	adds	r7, #40	; 0x28
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}
	...

0800e1d8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e1d8:	b590      	push	{r4, r7, lr}
 800e1da:	b08d      	sub	sp, #52	; 0x34
 800e1dc:	af02      	add	r7, sp, #8
 800e1de:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e1f0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e1f4:	f04f 0100 	mov.w	r1, #0
 800e1f8:	f7fe fd24 	bl	800cc44 <HAL_RCCEx_GetPeriphCLKFreq>
 800e1fc:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800e1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e200:	2b00      	cmp	r3, #0
 800e202:	d109      	bne.n	800e218 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2201      	movs	r2, #1
 800e208:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e212:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e214:	2301      	movs	r3, #1
 800e216:	e070      	b.n	800e2fa <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800e218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21a:	0a1b      	lsrs	r3, r3, #8
 800e21c:	4a39      	ldr	r2, [pc, #228]	; (800e304 <HAL_SD_InitCard+0x12c>)
 800e21e:	fba2 2303 	umull	r2, r3, r2, r3
 800e222:	091b      	lsrs	r3, r3, #4
 800e224:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681c      	ldr	r4, [r3, #0]
 800e22a:	466a      	mov	r2, sp
 800e22c:	f107 0318 	add.w	r3, r7, #24
 800e230:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e234:	e882 0003 	stmia.w	r2, {r0, r1}
 800e238:	f107 030c 	add.w	r3, r7, #12
 800e23c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e23e:	4620      	mov	r0, r4
 800e240:	f004 fec4 	bl	8012fcc <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	4618      	mov	r0, r3
 800e24a:	f004 ff07 	bl	801305c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800e24e:	69fb      	ldr	r3, [r7, #28]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d005      	beq.n	800e260 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800e254:	69fb      	ldr	r3, [r7, #28]
 800e256:	005b      	lsls	r3, r3, #1
 800e258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e25a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e25e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800e260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e262:	2b00      	cmp	r3, #0
 800e264:	d007      	beq.n	800e276 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800e266:	4a28      	ldr	r2, [pc, #160]	; (800e308 <HAL_SD_InitCard+0x130>)
 800e268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e26a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e26e:	3301      	adds	r3, #1
 800e270:	4618      	mov	r0, r3
 800e272:	f7f6 f81b 	bl	80042ac <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f000 ffea 	bl	800f250 <SD_PowerON>
 800e27c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e27e:	6a3b      	ldr	r3, [r7, #32]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d00b      	beq.n	800e29c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2201      	movs	r2, #1
 800e288:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e290:	6a3b      	ldr	r3, [r7, #32]
 800e292:	431a      	orrs	r2, r3
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e298:	2301      	movs	r3, #1
 800e29a:	e02e      	b.n	800e2fa <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f000 ff09 	bl	800f0b4 <SD_InitCard>
 800e2a2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e2a4:	6a3b      	ldr	r3, [r7, #32]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d00b      	beq.n	800e2c2 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2201      	movs	r2, #1
 800e2ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2b6:	6a3b      	ldr	r3, [r7, #32]
 800e2b8:	431a      	orrs	r2, r3
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e2be:	2301      	movs	r3, #1
 800e2c0:	e01b      	b.n	800e2fa <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f004 ff5c 	bl	8013188 <SDMMC_CmdBlockLength>
 800e2d0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e2d2:	6a3b      	ldr	r3, [r7, #32]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d00f      	beq.n	800e2f8 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	4a0b      	ldr	r2, [pc, #44]	; (800e30c <HAL_SD_InitCard+0x134>)
 800e2de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2e4:	6a3b      	ldr	r3, [r7, #32]
 800e2e6:	431a      	orrs	r2, r3
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2201      	movs	r2, #1
 800e2f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e2f4:	2301      	movs	r3, #1
 800e2f6:	e000      	b.n	800e2fa <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800e2f8:	2300      	movs	r3, #0
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	372c      	adds	r7, #44	; 0x2c
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd90      	pop	{r4, r7, pc}
 800e302:	bf00      	nop
 800e304:	014f8b59 	.word	0x014f8b59
 800e308:	00012110 	.word	0x00012110
 800e30c:	1fe00fff 	.word	0x1fe00fff

0800e310 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b08c      	sub	sp, #48	; 0x30
 800e314:	af00      	add	r7, sp, #0
 800e316:	60f8      	str	r0, [r7, #12]
 800e318:	60b9      	str	r1, [r7, #8]
 800e31a:	607a      	str	r2, [r7, #4]
 800e31c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d107      	bne.n	800e338 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e32c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e334:	2301      	movs	r3, #1
 800e336:	e08d      	b.n	800e454 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e33e:	b2db      	uxtb	r3, r3
 800e340:	2b01      	cmp	r3, #1
 800e342:	f040 8086 	bne.w	800e452 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	2200      	movs	r2, #0
 800e34a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e34c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	441a      	add	r2, r3
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e356:	429a      	cmp	r2, r3
 800e358:	d907      	bls.n	800e36a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e35e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e366:	2301      	movs	r3, #1
 800e368:	e074      	b.n	800e454 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	2203      	movs	r2, #3
 800e36e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	2200      	movs	r2, #0
 800e378:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	68ba      	ldr	r2, [r7, #8]
 800e37e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	025a      	lsls	r2, r3, #9
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e38c:	2b01      	cmp	r3, #1
 800e38e:	d002      	beq.n	800e396 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800e390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e392:	025b      	lsls	r3, r3, #9
 800e394:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e396:	f04f 33ff 	mov.w	r3, #4294967295
 800e39a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	025b      	lsls	r3, r3, #9
 800e3a0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e3a2:	2390      	movs	r3, #144	; 0x90
 800e3a4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e3a6:	2302      	movs	r3, #2
 800e3a8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	f107 0210 	add.w	r2, r7, #16
 800e3ba:	4611      	mov	r1, r2
 800e3bc:	4618      	mov	r0, r3
 800e3be:	f004 feb7 	bl	8013130 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	68da      	ldr	r2, [r3, #12]
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e3d0:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	68ba      	ldr	r2, [r7, #8]
 800e3d8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	2201      	movs	r2, #1
 800e3e0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	2b01      	cmp	r3, #1
 800e3e6:	d90a      	bls.n	800e3fe <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	2282      	movs	r2, #130	; 0x82
 800e3ec:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f004 ff0d 	bl	8013214 <SDMMC_CmdReadMultiBlock>
 800e3fa:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e3fc:	e009      	b.n	800e412 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	2281      	movs	r2, #129	; 0x81
 800e402:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e40a:	4618      	mov	r0, r3
 800e40c:	f004 fedf 	bl	80131ce <SDMMC_CmdReadSingleBlock>
 800e410:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800e412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e414:	2b00      	cmp	r3, #0
 800e416:	d012      	beq.n	800e43e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	4a0f      	ldr	r2, [pc, #60]	; (800e45c <HAL_SD_ReadBlocks_DMA+0x14c>)
 800e41e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e426:	431a      	orrs	r2, r3
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	2201      	movs	r2, #1
 800e430:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	2200      	movs	r2, #0
 800e438:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800e43a:	2301      	movs	r3, #1
 800e43c:	e00a      	b.n	800e454 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800e44c:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800e44e:	2300      	movs	r3, #0
 800e450:	e000      	b.n	800e454 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e452:	2302      	movs	r3, #2
  }
}
 800e454:	4618      	mov	r0, r3
 800e456:	3730      	adds	r7, #48	; 0x30
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}
 800e45c:	1fe00fff 	.word	0x1fe00fff

0800e460 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b08c      	sub	sp, #48	; 0x30
 800e464:	af00      	add	r7, sp, #0
 800e466:	60f8      	str	r0, [r7, #12]
 800e468:	60b9      	str	r1, [r7, #8]
 800e46a:	607a      	str	r2, [r7, #4]
 800e46c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d107      	bne.n	800e488 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e47c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e484:	2301      	movs	r3, #1
 800e486:	e08d      	b.n	800e5a4 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e48e:	b2db      	uxtb	r3, r3
 800e490:	2b01      	cmp	r3, #1
 800e492:	f040 8086 	bne.w	800e5a2 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	2200      	movs	r2, #0
 800e49a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e49c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	441a      	add	r2, r3
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	d907      	bls.n	800e4ba <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4ae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	e074      	b.n	800e5a4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	2203      	movs	r2, #3
 800e4be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	68ba      	ldr	r2, [r7, #8]
 800e4ce:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	025a      	lsls	r2, r3, #9
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4dc:	2b01      	cmp	r3, #1
 800e4de:	d002      	beq.n	800e4e6 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800e4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e2:	025b      	lsls	r3, r3, #9
 800e4e4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e4e6:	f04f 33ff 	mov.w	r3, #4294967295
 800e4ea:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	025b      	lsls	r3, r3, #9
 800e4f0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e4f2:	2390      	movs	r3, #144	; 0x90
 800e4f4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e4fe:	2300      	movs	r3, #0
 800e500:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	f107 0210 	add.w	r2, r7, #16
 800e50a:	4611      	mov	r1, r2
 800e50c:	4618      	mov	r0, r3
 800e50e:	f004 fe0f 	bl	8013130 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	68da      	ldr	r2, [r3, #12]
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e520:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	68ba      	ldr	r2, [r7, #8]
 800e528:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	2201      	movs	r2, #1
 800e530:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	2b01      	cmp	r3, #1
 800e536:	d90a      	bls.n	800e54e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	22a0      	movs	r2, #160	; 0xa0
 800e53c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e544:	4618      	mov	r0, r3
 800e546:	f004 feab 	bl	80132a0 <SDMMC_CmdWriteMultiBlock>
 800e54a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e54c:	e009      	b.n	800e562 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	2290      	movs	r2, #144	; 0x90
 800e552:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e55a:	4618      	mov	r0, r3
 800e55c:	f004 fe7d 	bl	801325a <SDMMC_CmdWriteSingleBlock>
 800e560:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800e562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e564:	2b00      	cmp	r3, #0
 800e566:	d012      	beq.n	800e58e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	4a0f      	ldr	r2, [pc, #60]	; (800e5ac <HAL_SD_WriteBlocks_DMA+0x14c>)
 800e56e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e576:	431a      	orrs	r2, r3
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	2201      	movs	r2, #1
 800e580:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	2200      	movs	r2, #0
 800e588:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800e58a:	2301      	movs	r3, #1
 800e58c:	e00a      	b.n	800e5a4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800e59c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	e000      	b.n	800e5a4 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e5a2:	2302      	movs	r3, #2
  }
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3730      	adds	r7, #48	; 0x30
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}
 800e5ac:	1fe00fff 	.word	0x1fe00fff

0800e5b0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b084      	sub	sp, #16
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5bc:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d008      	beq.n	800e5de <HAL_SD_IRQHandler+0x2e>
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	f003 0308 	and.w	r3, r3, #8
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d003      	beq.n	800e5de <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f001 f926 	bl	800f828 <SD_Read_IT>
 800e5dc:	e19a      	b.n	800e914 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	f000 80ac 	beq.w	800e746 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e5f6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681a      	ldr	r2, [r3, #0]
 800e602:	4b59      	ldr	r3, [pc, #356]	; (800e768 <HAL_SD_IRQHandler+0x1b8>)
 800e604:	400b      	ands	r3, r1
 800e606:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e616:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	68da      	ldr	r2, [r3, #12]
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e626:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	f003 0308 	and.w	r3, r3, #8
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d038      	beq.n	800e6a4 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	f003 0302 	and.w	r3, r3, #2
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d104      	bne.n	800e646 <HAL_SD_IRQHandler+0x96>
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	f003 0320 	and.w	r3, r3, #32
 800e642:	2b00      	cmp	r3, #0
 800e644:	d011      	beq.n	800e66a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	4618      	mov	r0, r3
 800e64c:	f004 fe4c 	bl	80132e8 <SDMMC_CmdStopTransfer>
 800e650:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d008      	beq.n	800e66a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e65c:	68bb      	ldr	r3, [r7, #8]
 800e65e:	431a      	orrs	r2, r3
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800e664:	6878      	ldr	r0, [r7, #4]
 800e666:	f000 f95b 	bl	800e920 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	4a3f      	ldr	r2, [pc, #252]	; (800e76c <HAL_SD_IRQHandler+0x1bc>)
 800e670:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	2201      	movs	r2, #1
 800e676:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2200      	movs	r2, #0
 800e67e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	f003 0301 	and.w	r3, r3, #1
 800e686:	2b00      	cmp	r3, #0
 800e688:	d104      	bne.n	800e694 <HAL_SD_IRQHandler+0xe4>
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	f003 0302 	and.w	r3, r3, #2
 800e690:	2b00      	cmp	r3, #0
 800e692:	d003      	beq.n	800e69c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	f006 fe55 	bl	8015344 <HAL_SD_RxCpltCallback>
 800e69a:	e13b      	b.n	800e914 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f006 fe47 	bl	8015330 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e6a2:	e137      	b.n	800e914 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	f000 8132 	beq.w	800e914 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	2200      	movs	r2, #0
 800e6be:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	f003 0302 	and.w	r3, r3, #2
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d104      	bne.n	800e6dc <HAL_SD_IRQHandler+0x12c>
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	f003 0320 	and.w	r3, r3, #32
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d011      	beq.n	800e700 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f004 fe01 	bl	80132e8 <SDMMC_CmdStopTransfer>
 800e6e6:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d008      	beq.n	800e700 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	431a      	orrs	r2, r3
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800e6fa:	6878      	ldr	r0, [r7, #4]
 800e6fc:	f000 f910 	bl	800e920 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	2201      	movs	r2, #1
 800e704:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2200      	movs	r2, #0
 800e70c:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	f003 0310 	and.w	r3, r3, #16
 800e714:	2b00      	cmp	r3, #0
 800e716:	d104      	bne.n	800e722 <HAL_SD_IRQHandler+0x172>
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	f003 0320 	and.w	r3, r3, #32
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d002      	beq.n	800e728 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800e722:	6878      	ldr	r0, [r7, #4]
 800e724:	f006 fe04 	bl	8015330 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	f003 0301 	and.w	r3, r3, #1
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d105      	bne.n	800e73e <HAL_SD_IRQHandler+0x18e>
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	f003 0302 	and.w	r3, r3, #2
 800e738:	2b00      	cmp	r3, #0
 800e73a:	f000 80eb 	beq.w	800e914 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800e73e:	6878      	ldr	r0, [r7, #4]
 800e740:	f006 fe00 	bl	8015344 <HAL_SD_RxCpltCallback>
}
 800e744:	e0e6      	b.n	800e914 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e74c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e750:	2b00      	cmp	r3, #0
 800e752:	d00d      	beq.n	800e770 <HAL_SD_IRQHandler+0x1c0>
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	f003 0308 	and.w	r3, r3, #8
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d008      	beq.n	800e770 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f001 f8a8 	bl	800f8b4 <SD_Write_IT>
 800e764:	e0d6      	b.n	800e914 <HAL_SD_IRQHandler+0x364>
 800e766:	bf00      	nop
 800e768:	ffff3ec5 	.word	0xffff3ec5
 800e76c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e776:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	f000 809d 	beq.w	800e8ba <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e786:	f003 0302 	and.w	r3, r3, #2
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d005      	beq.n	800e79a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e792:	f043 0202 	orr.w	r2, r3, #2
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7a0:	f003 0308 	and.w	r3, r3, #8
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d005      	beq.n	800e7b4 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7ac:	f043 0208 	orr.w	r2, r3, #8
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7ba:	f003 0320 	and.w	r3, r3, #32
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d005      	beq.n	800e7ce <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7c6:	f043 0220 	orr.w	r2, r3, #32
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7d4:	f003 0310 	and.w	r3, r3, #16
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d005      	beq.n	800e7e8 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7e0:	f043 0210 	orr.w	r2, r3, #16
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	4a4b      	ldr	r2, [pc, #300]	; (800e91c <HAL_SD_IRQHandler+0x36c>)
 800e7ee:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e7fe:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	68da      	ldr	r2, [r3, #12]
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e80e:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e81e:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	68da      	ldr	r2, [r3, #12]
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e82e:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	4618      	mov	r0, r3
 800e836:	f004 fd57 	bl	80132e8 <SDMMC_CmdStopTransfer>
 800e83a:	4602      	mov	r2, r0
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e840:	431a      	orrs	r2, r3
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	68da      	ldr	r2, [r3, #12]
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e854:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e85e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	f003 0308 	and.w	r3, r3, #8
 800e866:	2b00      	cmp	r3, #0
 800e868:	d00a      	beq.n	800e880 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2201      	movs	r2, #1
 800e86e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2200      	movs	r2, #0
 800e876:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f000 f851 	bl	800e920 <HAL_SD_ErrorCallback>
}
 800e87e:	e049      	b.n	800e914 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e886:	2b00      	cmp	r3, #0
 800e888:	d044      	beq.n	800e914 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d040      	beq.n	800e914 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e8a0:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2201      	movs	r2, #1
 800e8ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f000 f834 	bl	800e920 <HAL_SD_ErrorCallback>
}
 800e8b8:	e02c      	b.n	800e914 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d025      	beq.n	800e914 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8d0:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8d8:	f003 0304 	and.w	r3, r3, #4
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d10c      	bne.n	800e8fa <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	f003 0320 	and.w	r3, r3, #32
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d003      	beq.n	800e8f2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800e8ea:	6878      	ldr	r0, [r7, #4]
 800e8ec:	f001 f84a 	bl	800f984 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800e8f0:	e010      	b.n	800e914 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800e8f2:	6878      	ldr	r0, [r7, #4]
 800e8f4:	f001 f832 	bl	800f95c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800e8f8:	e00c      	b.n	800e914 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	f003 0320 	and.w	r3, r3, #32
 800e900:	2b00      	cmp	r3, #0
 800e902:	d003      	beq.n	800e90c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800e904:	6878      	ldr	r0, [r7, #4]
 800e906:	f001 f833 	bl	800f970 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800e90a:	e003      	b.n	800e914 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800e90c:	6878      	ldr	r0, [r7, #4]
 800e90e:	f001 f81b 	bl	800f948 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800e912:	e7ff      	b.n	800e914 <HAL_SD_IRQHandler+0x364>
 800e914:	bf00      	nop
 800e916:	3710      	adds	r7, #16
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}
 800e91c:	18000f3a 	.word	0x18000f3a

0800e920 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800e920:	b480      	push	{r7}
 800e922:	b083      	sub	sp, #12
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800e928:	bf00      	nop
 800e92a:	370c      	adds	r7, #12
 800e92c:	46bd      	mov	sp, r7
 800e92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e932:	4770      	bx	lr

0800e934 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e934:	b480      	push	{r7}
 800e936:	b083      	sub	sp, #12
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
 800e93c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e942:	0f9b      	lsrs	r3, r3, #30
 800e944:	b2da      	uxtb	r2, r3
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e94e:	0e9b      	lsrs	r3, r3, #26
 800e950:	b2db      	uxtb	r3, r3
 800e952:	f003 030f 	and.w	r3, r3, #15
 800e956:	b2da      	uxtb	r2, r3
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e960:	0e1b      	lsrs	r3, r3, #24
 800e962:	b2db      	uxtb	r3, r3
 800e964:	f003 0303 	and.w	r3, r3, #3
 800e968:	b2da      	uxtb	r2, r3
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e972:	0c1b      	lsrs	r3, r3, #16
 800e974:	b2da      	uxtb	r2, r3
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e97e:	0a1b      	lsrs	r3, r3, #8
 800e980:	b2da      	uxtb	r2, r3
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e98a:	b2da      	uxtb	r2, r3
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e994:	0d1b      	lsrs	r3, r3, #20
 800e996:	b29a      	uxth	r2, r3
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e9a0:	0c1b      	lsrs	r3, r3, #16
 800e9a2:	b2db      	uxtb	r3, r3
 800e9a4:	f003 030f 	and.w	r3, r3, #15
 800e9a8:	b2da      	uxtb	r2, r3
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e9b2:	0bdb      	lsrs	r3, r3, #15
 800e9b4:	b2db      	uxtb	r3, r3
 800e9b6:	f003 0301 	and.w	r3, r3, #1
 800e9ba:	b2da      	uxtb	r2, r3
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e9c4:	0b9b      	lsrs	r3, r3, #14
 800e9c6:	b2db      	uxtb	r3, r3
 800e9c8:	f003 0301 	and.w	r3, r3, #1
 800e9cc:	b2da      	uxtb	r2, r3
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e9d6:	0b5b      	lsrs	r3, r3, #13
 800e9d8:	b2db      	uxtb	r3, r3
 800e9da:	f003 0301 	and.w	r3, r3, #1
 800e9de:	b2da      	uxtb	r2, r3
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e9e8:	0b1b      	lsrs	r3, r3, #12
 800e9ea:	b2db      	uxtb	r3, r3
 800e9ec:	f003 0301 	and.w	r3, r3, #1
 800e9f0:	b2da      	uxtb	r2, r3
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d163      	bne.n	800eacc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea08:	009a      	lsls	r2, r3, #2
 800ea0a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ea0e:	4013      	ands	r3, r2
 800ea10:	687a      	ldr	r2, [r7, #4]
 800ea12:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800ea14:	0f92      	lsrs	r2, r2, #30
 800ea16:	431a      	orrs	r2, r3
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea20:	0edb      	lsrs	r3, r3, #27
 800ea22:	b2db      	uxtb	r3, r3
 800ea24:	f003 0307 	and.w	r3, r3, #7
 800ea28:	b2da      	uxtb	r2, r3
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea32:	0e1b      	lsrs	r3, r3, #24
 800ea34:	b2db      	uxtb	r3, r3
 800ea36:	f003 0307 	and.w	r3, r3, #7
 800ea3a:	b2da      	uxtb	r2, r3
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea44:	0d5b      	lsrs	r3, r3, #21
 800ea46:	b2db      	uxtb	r3, r3
 800ea48:	f003 0307 	and.w	r3, r3, #7
 800ea4c:	b2da      	uxtb	r2, r3
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea56:	0c9b      	lsrs	r3, r3, #18
 800ea58:	b2db      	uxtb	r3, r3
 800ea5a:	f003 0307 	and.w	r3, r3, #7
 800ea5e:	b2da      	uxtb	r2, r3
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea68:	0bdb      	lsrs	r3, r3, #15
 800ea6a:	b2db      	uxtb	r3, r3
 800ea6c:	f003 0307 	and.w	r3, r3, #7
 800ea70:	b2da      	uxtb	r2, r3
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	691b      	ldr	r3, [r3, #16]
 800ea7a:	1c5a      	adds	r2, r3, #1
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	7e1b      	ldrb	r3, [r3, #24]
 800ea84:	b2db      	uxtb	r3, r3
 800ea86:	f003 0307 	and.w	r3, r3, #7
 800ea8a:	3302      	adds	r3, #2
 800ea8c:	2201      	movs	r2, #1
 800ea8e:	fa02 f303 	lsl.w	r3, r2, r3
 800ea92:	687a      	ldr	r2, [r7, #4]
 800ea94:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ea96:	fb03 f202 	mul.w	r2, r3, r2
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	7a1b      	ldrb	r3, [r3, #8]
 800eaa2:	b2db      	uxtb	r3, r3
 800eaa4:	f003 030f 	and.w	r3, r3, #15
 800eaa8:	2201      	movs	r2, #1
 800eaaa:	409a      	lsls	r2, r3
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eab4:	687a      	ldr	r2, [r7, #4]
 800eab6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800eab8:	0a52      	lsrs	r2, r2, #9
 800eaba:	fb03 f202 	mul.w	r2, r3, r2
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eac8:	655a      	str	r2, [r3, #84]	; 0x54
 800eaca:	e031      	b.n	800eb30 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ead0:	2b01      	cmp	r3, #1
 800ead2:	d11d      	bne.n	800eb10 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ead8:	041b      	lsls	r3, r3, #16
 800eada:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eae2:	0c1b      	lsrs	r3, r3, #16
 800eae4:	431a      	orrs	r2, r3
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	691b      	ldr	r3, [r3, #16]
 800eaee:	3301      	adds	r3, #1
 800eaf0:	029a      	lsls	r2, r3, #10
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eb04:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	655a      	str	r2, [r3, #84]	; 0x54
 800eb0e:	e00f      	b.n	800eb30 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	4a58      	ldr	r2, [pc, #352]	; (800ec78 <HAL_SD_GetCardCSD+0x344>)
 800eb16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2201      	movs	r2, #1
 800eb28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800eb2c:	2301      	movs	r3, #1
 800eb2e:	e09d      	b.n	800ec6c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb34:	0b9b      	lsrs	r3, r3, #14
 800eb36:	b2db      	uxtb	r3, r3
 800eb38:	f003 0301 	and.w	r3, r3, #1
 800eb3c:	b2da      	uxtb	r2, r3
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb46:	09db      	lsrs	r3, r3, #7
 800eb48:	b2db      	uxtb	r3, r3
 800eb4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb4e:	b2da      	uxtb	r2, r3
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb58:	b2db      	uxtb	r3, r3
 800eb5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb5e:	b2da      	uxtb	r2, r3
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb68:	0fdb      	lsrs	r3, r3, #31
 800eb6a:	b2da      	uxtb	r2, r3
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb74:	0f5b      	lsrs	r3, r3, #29
 800eb76:	b2db      	uxtb	r3, r3
 800eb78:	f003 0303 	and.w	r3, r3, #3
 800eb7c:	b2da      	uxtb	r2, r3
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb86:	0e9b      	lsrs	r3, r3, #26
 800eb88:	b2db      	uxtb	r3, r3
 800eb8a:	f003 0307 	and.w	r3, r3, #7
 800eb8e:	b2da      	uxtb	r2, r3
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb98:	0d9b      	lsrs	r3, r3, #22
 800eb9a:	b2db      	uxtb	r3, r3
 800eb9c:	f003 030f 	and.w	r3, r3, #15
 800eba0:	b2da      	uxtb	r2, r3
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ebaa:	0d5b      	lsrs	r3, r3, #21
 800ebac:	b2db      	uxtb	r3, r3
 800ebae:	f003 0301 	and.w	r3, r3, #1
 800ebb2:	b2da      	uxtb	r2, r3
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ebc6:	0c1b      	lsrs	r3, r3, #16
 800ebc8:	b2db      	uxtb	r3, r3
 800ebca:	f003 0301 	and.w	r3, r3, #1
 800ebce:	b2da      	uxtb	r2, r3
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ebda:	0bdb      	lsrs	r3, r3, #15
 800ebdc:	b2db      	uxtb	r3, r3
 800ebde:	f003 0301 	and.w	r3, r3, #1
 800ebe2:	b2da      	uxtb	r2, r3
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ebee:	0b9b      	lsrs	r3, r3, #14
 800ebf0:	b2db      	uxtb	r3, r3
 800ebf2:	f003 0301 	and.w	r3, r3, #1
 800ebf6:	b2da      	uxtb	r2, r3
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ec02:	0b5b      	lsrs	r3, r3, #13
 800ec04:	b2db      	uxtb	r3, r3
 800ec06:	f003 0301 	and.w	r3, r3, #1
 800ec0a:	b2da      	uxtb	r2, r3
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ec16:	0b1b      	lsrs	r3, r3, #12
 800ec18:	b2db      	uxtb	r3, r3
 800ec1a:	f003 0301 	and.w	r3, r3, #1
 800ec1e:	b2da      	uxtb	r2, r3
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ec2a:	0a9b      	lsrs	r3, r3, #10
 800ec2c:	b2db      	uxtb	r3, r3
 800ec2e:	f003 0303 	and.w	r3, r3, #3
 800ec32:	b2da      	uxtb	r2, r3
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ec3e:	0a1b      	lsrs	r3, r3, #8
 800ec40:	b2db      	uxtb	r3, r3
 800ec42:	f003 0303 	and.w	r3, r3, #3
 800ec46:	b2da      	uxtb	r2, r3
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ec52:	085b      	lsrs	r3, r3, #1
 800ec54:	b2db      	uxtb	r3, r3
 800ec56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec5a:	b2da      	uxtb	r2, r3
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	2201      	movs	r2, #1
 800ec66:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ec6a:	2300      	movs	r3, #0
}
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	370c      	adds	r7, #12
 800ec70:	46bd      	mov	sp, r7
 800ec72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec76:	4770      	bx	lr
 800ec78:	1fe00fff 	.word	0x1fe00fff

0800ec7c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b094      	sub	sp, #80	; 0x50
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
 800ec84:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ec86:	2300      	movs	r3, #0
 800ec88:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ec92:	b2db      	uxtb	r3, r3
 800ec94:	2b03      	cmp	r3, #3
 800ec96:	d101      	bne.n	800ec9c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800ec98:	2301      	movs	r3, #1
 800ec9a:	e0a7      	b.n	800edec <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800ec9c:	f107 0308 	add.w	r3, r7, #8
 800eca0:	4619      	mov	r1, r3
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	f000 fb62 	bl	800f36c <SD_SendSDStatus>
 800eca8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ecaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d011      	beq.n	800ecd4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	4a4f      	ldr	r2, [pc, #316]	; (800edf4 <HAL_SD_GetCardStatus+0x178>)
 800ecb6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ecbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecbe:	431a      	orrs	r2, r3
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2201      	movs	r2, #1
 800ecc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800eccc:	2301      	movs	r3, #1
 800ecce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ecd2:	e070      	b.n	800edb6 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	099b      	lsrs	r3, r3, #6
 800ecd8:	b2db      	uxtb	r3, r3
 800ecda:	f003 0303 	and.w	r3, r3, #3
 800ecde:	b2da      	uxtb	r2, r3
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	095b      	lsrs	r3, r3, #5
 800ece8:	b2db      	uxtb	r3, r3
 800ecea:	f003 0301 	and.w	r3, r3, #1
 800ecee:	b2da      	uxtb	r2, r3
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ecf4:	68bb      	ldr	r3, [r7, #8]
 800ecf6:	0a1b      	lsrs	r3, r3, #8
 800ecf8:	b29b      	uxth	r3, r3
 800ecfa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ecfe:	b29a      	uxth	r2, r3
 800ed00:	68bb      	ldr	r3, [r7, #8]
 800ed02:	0e1b      	lsrs	r3, r3, #24
 800ed04:	b29b      	uxth	r3, r3
 800ed06:	4313      	orrs	r3, r2
 800ed08:	b29a      	uxth	r2, r3
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	061a      	lsls	r2, r3, #24
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	021b      	lsls	r3, r3, #8
 800ed16:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ed1a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	0a1b      	lsrs	r3, r3, #8
 800ed20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ed24:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	0e1b      	lsrs	r3, r3, #24
 800ed2a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	b2da      	uxtb	r2, r3
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ed38:	693b      	ldr	r3, [r7, #16]
 800ed3a:	0a1b      	lsrs	r3, r3, #8
 800ed3c:	b2da      	uxtb	r2, r3
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800ed42:	693b      	ldr	r3, [r7, #16]
 800ed44:	0d1b      	lsrs	r3, r3, #20
 800ed46:	b2db      	uxtb	r3, r3
 800ed48:	f003 030f 	and.w	r3, r3, #15
 800ed4c:	b2da      	uxtb	r2, r3
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ed52:	693b      	ldr	r3, [r7, #16]
 800ed54:	0c1b      	lsrs	r3, r3, #16
 800ed56:	b29b      	uxth	r3, r3
 800ed58:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ed5c:	b29a      	uxth	r2, r3
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	b29b      	uxth	r3, r3
 800ed62:	b2db      	uxtb	r3, r3
 800ed64:	b29b      	uxth	r3, r3
 800ed66:	4313      	orrs	r3, r2
 800ed68:	b29a      	uxth	r2, r3
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	0a9b      	lsrs	r3, r3, #10
 800ed72:	b2db      	uxtb	r3, r3
 800ed74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed78:	b2da      	uxtb	r2, r3
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800ed7e:	697b      	ldr	r3, [r7, #20]
 800ed80:	0a1b      	lsrs	r3, r3, #8
 800ed82:	b2db      	uxtb	r3, r3
 800ed84:	f003 0303 	and.w	r3, r3, #3
 800ed88:	b2da      	uxtb	r2, r3
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	091b      	lsrs	r3, r3, #4
 800ed92:	b2db      	uxtb	r3, r3
 800ed94:	f003 030f 	and.w	r3, r3, #15
 800ed98:	b2da      	uxtb	r2, r3
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ed9e:	697b      	ldr	r3, [r7, #20]
 800eda0:	b2db      	uxtb	r3, r3
 800eda2:	f003 030f 	and.w	r3, r3, #15
 800eda6:	b2da      	uxtb	r2, r3
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800edac:	69bb      	ldr	r3, [r7, #24]
 800edae:	0e1b      	lsrs	r3, r3, #24
 800edb0:	b2da      	uxtb	r2, r3
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	f44f 7100 	mov.w	r1, #512	; 0x200
 800edbe:	4618      	mov	r0, r3
 800edc0:	f004 f9e2 	bl	8013188 <SDMMC_CmdBlockLength>
 800edc4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800edc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d00d      	beq.n	800ede8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	4a08      	ldr	r2, [pc, #32]	; (800edf4 <HAL_SD_GetCardStatus+0x178>)
 800edd2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800edd8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2201      	movs	r2, #1
 800edde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800ede2:	2301      	movs	r3, #1
 800ede4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800ede8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800edec:	4618      	mov	r0, r3
 800edee:	3750      	adds	r7, #80	; 0x50
 800edf0:	46bd      	mov	sp, r7
 800edf2:	bd80      	pop	{r7, pc}
 800edf4:	1fe00fff 	.word	0x1fe00fff

0800edf8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800edf8:	b480      	push	{r7}
 800edfa:	b083      	sub	sp, #12
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
 800ee00:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ee42:	2300      	movs	r3, #0
}
 800ee44:	4618      	mov	r0, r3
 800ee46:	370c      	adds	r7, #12
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4e:	4770      	bx	lr

0800ee50 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ee50:	b590      	push	{r4, r7, lr}
 800ee52:	b08d      	sub	sp, #52	; 0x34
 800ee54:	af02      	add	r7, sp, #8
 800ee56:	6078      	str	r0, [r7, #4]
 800ee58:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2203      	movs	r2, #3
 800ee64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee6c:	2b03      	cmp	r3, #3
 800ee6e:	d02e      	beq.n	800eece <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee76:	d106      	bne.n	800ee86 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	635a      	str	r2, [r3, #52]	; 0x34
 800ee84:	e029      	b.n	800eeda <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800ee86:	683b      	ldr	r3, [r7, #0]
 800ee88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ee8c:	d10a      	bne.n	800eea4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ee8e:	6878      	ldr	r0, [r7, #4]
 800ee90:	f000 fb64 	bl	800f55c <SD_WideBus_Enable>
 800ee94:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee9a:	6a3b      	ldr	r3, [r7, #32]
 800ee9c:	431a      	orrs	r2, r3
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	635a      	str	r2, [r3, #52]	; 0x34
 800eea2:	e01a      	b.n	800eeda <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d10a      	bne.n	800eec0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f000 fba1 	bl	800f5f2 <SD_WideBus_Disable>
 800eeb0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eeb6:	6a3b      	ldr	r3, [r7, #32]
 800eeb8:	431a      	orrs	r2, r3
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	635a      	str	r2, [r3, #52]	; 0x34
 800eebe:	e00c      	b.n	800eeda <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eec4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	635a      	str	r2, [r3, #52]	; 0x34
 800eecc:	e005      	b.n	800eeda <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eed2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d007      	beq.n	800eef2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	4a5f      	ldr	r2, [pc, #380]	; (800f064 <HAL_SD_ConfigWideBusOperation+0x214>)
 800eee8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800eeea:	2301      	movs	r3, #1
 800eeec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eef0:	e096      	b.n	800f020 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800eef2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800eef6:	f04f 0100 	mov.w	r1, #0
 800eefa:	f7fd fea3 	bl	800cc44 <HAL_RCCEx_GetPeriphCLKFreq>
 800eefe:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800ef00:	69fb      	ldr	r3, [r7, #28]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	f000 8083 	beq.w	800f00e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	685b      	ldr	r3, [r3, #4]
 800ef0c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	689b      	ldr	r3, [r3, #8]
 800ef12:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	691b      	ldr	r3, [r3, #16]
 800ef1c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	695a      	ldr	r2, [r3, #20]
 800ef22:	69fb      	ldr	r3, [r7, #28]
 800ef24:	4950      	ldr	r1, [pc, #320]	; (800f068 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ef26:	fba1 1303 	umull	r1, r3, r1, r3
 800ef2a:	0e1b      	lsrs	r3, r3, #24
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	d303      	bcc.n	800ef38 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	695b      	ldr	r3, [r3, #20]
 800ef34:	61bb      	str	r3, [r7, #24]
 800ef36:	e05a      	b.n	800efee <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef40:	d103      	bne.n	800ef4a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	695b      	ldr	r3, [r3, #20]
 800ef46:	61bb      	str	r3, [r7, #24]
 800ef48:	e051      	b.n	800efee <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef52:	d126      	bne.n	800efa2 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	695b      	ldr	r3, [r3, #20]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d10e      	bne.n	800ef7a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800ef5c:	69fb      	ldr	r3, [r7, #28]
 800ef5e:	4a43      	ldr	r2, [pc, #268]	; (800f06c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ef60:	4293      	cmp	r3, r2
 800ef62:	d906      	bls.n	800ef72 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ef64:	69fb      	ldr	r3, [r7, #28]
 800ef66:	4a40      	ldr	r2, [pc, #256]	; (800f068 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ef68:	fba2 2303 	umull	r2, r3, r2, r3
 800ef6c:	0e5b      	lsrs	r3, r3, #25
 800ef6e:	61bb      	str	r3, [r7, #24]
 800ef70:	e03d      	b.n	800efee <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	695b      	ldr	r3, [r3, #20]
 800ef76:	61bb      	str	r3, [r7, #24]
 800ef78:	e039      	b.n	800efee <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	695b      	ldr	r3, [r3, #20]
 800ef7e:	005b      	lsls	r3, r3, #1
 800ef80:	69fa      	ldr	r2, [r7, #28]
 800ef82:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef86:	4a39      	ldr	r2, [pc, #228]	; (800f06c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ef88:	4293      	cmp	r3, r2
 800ef8a:	d906      	bls.n	800ef9a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ef8c:	69fb      	ldr	r3, [r7, #28]
 800ef8e:	4a36      	ldr	r2, [pc, #216]	; (800f068 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ef90:	fba2 2303 	umull	r2, r3, r2, r3
 800ef94:	0e5b      	lsrs	r3, r3, #25
 800ef96:	61bb      	str	r3, [r7, #24]
 800ef98:	e029      	b.n	800efee <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	695b      	ldr	r3, [r3, #20]
 800ef9e:	61bb      	str	r3, [r7, #24]
 800efa0:	e025      	b.n	800efee <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	695b      	ldr	r3, [r3, #20]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d10e      	bne.n	800efc8 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800efaa:	69fb      	ldr	r3, [r7, #28]
 800efac:	4a30      	ldr	r2, [pc, #192]	; (800f070 <HAL_SD_ConfigWideBusOperation+0x220>)
 800efae:	4293      	cmp	r3, r2
 800efb0:	d906      	bls.n	800efc0 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800efb2:	69fb      	ldr	r3, [r7, #28]
 800efb4:	4a2c      	ldr	r2, [pc, #176]	; (800f068 <HAL_SD_ConfigWideBusOperation+0x218>)
 800efb6:	fba2 2303 	umull	r2, r3, r2, r3
 800efba:	0e1b      	lsrs	r3, r3, #24
 800efbc:	61bb      	str	r3, [r7, #24]
 800efbe:	e016      	b.n	800efee <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	695b      	ldr	r3, [r3, #20]
 800efc4:	61bb      	str	r3, [r7, #24]
 800efc6:	e012      	b.n	800efee <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	695b      	ldr	r3, [r3, #20]
 800efcc:	005b      	lsls	r3, r3, #1
 800efce:	69fa      	ldr	r2, [r7, #28]
 800efd0:	fbb2 f3f3 	udiv	r3, r2, r3
 800efd4:	4a26      	ldr	r2, [pc, #152]	; (800f070 <HAL_SD_ConfigWideBusOperation+0x220>)
 800efd6:	4293      	cmp	r3, r2
 800efd8:	d906      	bls.n	800efe8 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800efda:	69fb      	ldr	r3, [r7, #28]
 800efdc:	4a22      	ldr	r2, [pc, #136]	; (800f068 <HAL_SD_ConfigWideBusOperation+0x218>)
 800efde:	fba2 2303 	umull	r2, r3, r2, r3
 800efe2:	0e1b      	lsrs	r3, r3, #24
 800efe4:	61bb      	str	r3, [r7, #24]
 800efe6:	e002      	b.n	800efee <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	695b      	ldr	r3, [r3, #20]
 800efec:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681c      	ldr	r4, [r3, #0]
 800eff2:	466a      	mov	r2, sp
 800eff4:	f107 0314 	add.w	r3, r7, #20
 800eff8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800effc:	e882 0003 	stmia.w	r2, {r0, r1}
 800f000:	f107 0308 	add.w	r3, r7, #8
 800f004:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f006:	4620      	mov	r0, r4
 800f008:	f003 ffe0 	bl	8012fcc <SDMMC_Init>
 800f00c:	e008      	b.n	800f020 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f012:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800f01a:	2301      	movs	r3, #1
 800f01c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f028:	4618      	mov	r0, r3
 800f02a:	f004 f8ad 	bl	8013188 <SDMMC_CmdBlockLength>
 800f02e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f030:	6a3b      	ldr	r3, [r7, #32]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d00c      	beq.n	800f050 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	4a0a      	ldr	r2, [pc, #40]	; (800f064 <HAL_SD_ConfigWideBusOperation+0x214>)
 800f03c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f042:	6a3b      	ldr	r3, [r7, #32]
 800f044:	431a      	orrs	r2, r3
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800f04a:	2301      	movs	r3, #1
 800f04c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2201      	movs	r2, #1
 800f054:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800f058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800f05c:	4618      	mov	r0, r3
 800f05e:	372c      	adds	r7, #44	; 0x2c
 800f060:	46bd      	mov	sp, r7
 800f062:	bd90      	pop	{r4, r7, pc}
 800f064:	1fe00fff 	.word	0x1fe00fff
 800f068:	55e63b89 	.word	0x55e63b89
 800f06c:	02faf080 	.word	0x02faf080
 800f070:	017d7840 	.word	0x017d7840

0800f074 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b086      	sub	sp, #24
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800f07c:	2300      	movs	r3, #0
 800f07e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800f080:	f107 030c 	add.w	r3, r7, #12
 800f084:	4619      	mov	r1, r3
 800f086:	6878      	ldr	r0, [r7, #4]
 800f088:	f000 fa40 	bl	800f50c <SD_SendStatus>
 800f08c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d005      	beq.n	800f0a0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f098:	697b      	ldr	r3, [r7, #20]
 800f09a:	431a      	orrs	r2, r3
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	0a5b      	lsrs	r3, r3, #9
 800f0a4:	f003 030f 	and.w	r3, r3, #15
 800f0a8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800f0aa:	693b      	ldr	r3, [r7, #16]
}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	3718      	adds	r7, #24
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}

0800f0b4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b090      	sub	sp, #64	; 0x40
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800f0bc:	2300      	movs	r3, #0
 800f0be:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800f0c0:	f7f5 f8e8 	bl	8004294 <HAL_GetTick>
 800f0c4:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f003 ffd7 	bl	801307e <SDMMC_GetPowerState>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d102      	bne.n	800f0dc <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f0d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800f0da:	e0b5      	b.n	800f248 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0e0:	2b03      	cmp	r3, #3
 800f0e2:	d02e      	beq.n	800f142 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f004 fa22 	bl	8013532 <SDMMC_CmdSendCID>
 800f0ee:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800f0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d001      	beq.n	800f0fa <SD_InitCard+0x46>
    {
      return errorstate;
 800f0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f8:	e0a6      	b.n	800f248 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	2100      	movs	r1, #0
 800f100:	4618      	mov	r0, r3
 800f102:	f004 f802 	bl	801310a <SDMMC_GetResponse>
 800f106:	4602      	mov	r2, r0
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	2104      	movs	r1, #4
 800f112:	4618      	mov	r0, r3
 800f114:	f003 fff9 	bl	801310a <SDMMC_GetResponse>
 800f118:	4602      	mov	r2, r0
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	2108      	movs	r1, #8
 800f124:	4618      	mov	r0, r3
 800f126:	f003 fff0 	bl	801310a <SDMMC_GetResponse>
 800f12a:	4602      	mov	r2, r0
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	210c      	movs	r1, #12
 800f136:	4618      	mov	r0, r3
 800f138:	f003 ffe7 	bl	801310a <SDMMC_GetResponse>
 800f13c:	4602      	mov	r2, r0
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f146:	2b03      	cmp	r3, #3
 800f148:	d01d      	beq.n	800f186 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800f14a:	e019      	b.n	800f180 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	f107 020a 	add.w	r2, r7, #10
 800f154:	4611      	mov	r1, r2
 800f156:	4618      	mov	r0, r3
 800f158:	f004 fa2a 	bl	80135b0 <SDMMC_CmdSetRelAdd>
 800f15c:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800f15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f160:	2b00      	cmp	r3, #0
 800f162:	d001      	beq.n	800f168 <SD_InitCard+0xb4>
      {
        return errorstate;
 800f164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f166:	e06f      	b.n	800f248 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800f168:	f7f5 f894 	bl	8004294 <HAL_GetTick>
 800f16c:	4602      	mov	r2, r0
 800f16e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f170:	1ad3      	subs	r3, r2, r3
 800f172:	f241 3287 	movw	r2, #4999	; 0x1387
 800f176:	4293      	cmp	r3, r2
 800f178:	d902      	bls.n	800f180 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800f17a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f17e:	e063      	b.n	800f248 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800f180:	897b      	ldrh	r3, [r7, #10]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d0e2      	beq.n	800f14c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f18a:	2b03      	cmp	r3, #3
 800f18c:	d036      	beq.n	800f1fc <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800f18e:	897b      	ldrh	r3, [r7, #10]
 800f190:	461a      	mov	r2, r3
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681a      	ldr	r2, [r3, #0]
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f19e:	041b      	lsls	r3, r3, #16
 800f1a0:	4619      	mov	r1, r3
 800f1a2:	4610      	mov	r0, r2
 800f1a4:	f004 f9e4 	bl	8013570 <SDMMC_CmdSendCSD>
 800f1a8:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800f1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d001      	beq.n	800f1b4 <SD_InitCard+0x100>
    {
      return errorstate;
 800f1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1b2:	e049      	b.n	800f248 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	2100      	movs	r1, #0
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f003 ffa5 	bl	801310a <SDMMC_GetResponse>
 800f1c0:	4602      	mov	r2, r0
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	2104      	movs	r1, #4
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f003 ff9c 	bl	801310a <SDMMC_GetResponse>
 800f1d2:	4602      	mov	r2, r0
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	2108      	movs	r1, #8
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f003 ff93 	bl	801310a <SDMMC_GetResponse>
 800f1e4:	4602      	mov	r2, r0
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	210c      	movs	r1, #12
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f003 ff8a 	bl	801310a <SDMMC_GetResponse>
 800f1f6:	4602      	mov	r2, r0
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	2104      	movs	r1, #4
 800f202:	4618      	mov	r0, r3
 800f204:	f003 ff81 	bl	801310a <SDMMC_GetResponse>
 800f208:	4603      	mov	r3, r0
 800f20a:	0d1a      	lsrs	r2, r3, #20
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800f210:	f107 030c 	add.w	r3, r7, #12
 800f214:	4619      	mov	r1, r3
 800f216:	6878      	ldr	r0, [r7, #4]
 800f218:	f7ff fb8c 	bl	800e934 <HAL_SD_GetCardCSD>
 800f21c:	4603      	mov	r3, r0
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d002      	beq.n	800f228 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f222:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f226:	e00f      	b.n	800f248 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681a      	ldr	r2, [r3, #0]
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f230:	041b      	lsls	r3, r3, #16
 800f232:	4619      	mov	r1, r3
 800f234:	4610      	mov	r0, r2
 800f236:	f004 f893 	bl	8013360 <SDMMC_CmdSelDesel>
 800f23a:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800f23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d001      	beq.n	800f246 <SD_InitCard+0x192>
  {
    return errorstate;
 800f242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f244:	e000      	b.n	800f248 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800f246:	2300      	movs	r3, #0
}
 800f248:	4618      	mov	r0, r3
 800f24a:	3740      	adds	r7, #64	; 0x40
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}

0800f250 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b086      	sub	sp, #24
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f258:	2300      	movs	r3, #0
 800f25a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800f25c:	2300      	movs	r3, #0
 800f25e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800f260:	2300      	movs	r3, #0
 800f262:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	4618      	mov	r0, r3
 800f26a:	f004 f89c 	bl	80133a6 <SDMMC_CmdGoIdleState>
 800f26e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d001      	beq.n	800f27a <SD_PowerON+0x2a>
  {
    return errorstate;
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	e072      	b.n	800f360 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	4618      	mov	r0, r3
 800f280:	f004 f8af 	bl	80133e2 <SDMMC_CmdOperCond>
 800f284:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f28c:	d10d      	bne.n	800f2aa <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	2200      	movs	r2, #0
 800f292:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	4618      	mov	r0, r3
 800f29a:	f004 f884 	bl	80133a6 <SDMMC_CmdGoIdleState>
 800f29e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d004      	beq.n	800f2b0 <SD_PowerON+0x60>
    {
      return errorstate;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	e05a      	b.n	800f360 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	2201      	movs	r2, #1
 800f2ae:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2b4:	2b01      	cmp	r3, #1
 800f2b6:	d137      	bne.n	800f328 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	2100      	movs	r1, #0
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f004 f8af 	bl	8013422 <SDMMC_CmdAppCommand>
 800f2c4:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d02d      	beq.n	800f328 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f2cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f2d0:	e046      	b.n	800f360 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	2100      	movs	r1, #0
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f004 f8a2 	bl	8013422 <SDMMC_CmdAppCommand>
 800f2de:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d001      	beq.n	800f2ea <SD_PowerON+0x9a>
    {
      return errorstate;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	e03a      	b.n	800f360 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	491e      	ldr	r1, [pc, #120]	; (800f368 <SD_PowerON+0x118>)
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f004 f8b9 	bl	8013468 <SDMMC_CmdAppOperCommand>
 800f2f6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d002      	beq.n	800f304 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f2fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f302:	e02d      	b.n	800f360 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	2100      	movs	r1, #0
 800f30a:	4618      	mov	r0, r3
 800f30c:	f003 fefd 	bl	801310a <SDMMC_GetResponse>
 800f310:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	0fdb      	lsrs	r3, r3, #31
 800f316:	2b01      	cmp	r3, #1
 800f318:	d101      	bne.n	800f31e <SD_PowerON+0xce>
 800f31a:	2301      	movs	r3, #1
 800f31c:	e000      	b.n	800f320 <SD_PowerON+0xd0>
 800f31e:	2300      	movs	r3, #0
 800f320:	613b      	str	r3, [r7, #16]

    count++;
 800f322:	68bb      	ldr	r3, [r7, #8]
 800f324:	3301      	adds	r3, #1
 800f326:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800f328:	68bb      	ldr	r3, [r7, #8]
 800f32a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f32e:	4293      	cmp	r3, r2
 800f330:	d802      	bhi.n	800f338 <SD_PowerON+0xe8>
 800f332:	693b      	ldr	r3, [r7, #16]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d0cc      	beq.n	800f2d2 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800f338:	68bb      	ldr	r3, [r7, #8]
 800f33a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f33e:	4293      	cmp	r3, r2
 800f340:	d902      	bls.n	800f348 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f342:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f346:	e00b      	b.n	800f360 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2200      	movs	r2, #0
 800f34c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800f34e:	697b      	ldr	r3, [r7, #20]
 800f350:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f354:	2b00      	cmp	r3, #0
 800f356:	d002      	beq.n	800f35e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2201      	movs	r2, #1
 800f35c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800f35e:	2300      	movs	r3, #0
}
 800f360:	4618      	mov	r0, r3
 800f362:	3718      	adds	r7, #24
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}
 800f368:	c1100000 	.word	0xc1100000

0800f36c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b08c      	sub	sp, #48	; 0x30
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f376:	f7f4 ff8d 	bl	8004294 <HAL_GetTick>
 800f37a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	2100      	movs	r1, #0
 800f386:	4618      	mov	r0, r3
 800f388:	f003 febf 	bl	801310a <SDMMC_GetResponse>
 800f38c:	4603      	mov	r3, r0
 800f38e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f392:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f396:	d102      	bne.n	800f39e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f398:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f39c:	e0b0      	b.n	800f500 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	2140      	movs	r1, #64	; 0x40
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f003 feef 	bl	8013188 <SDMMC_CmdBlockLength>
 800f3aa:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f3ac:	6a3b      	ldr	r3, [r7, #32]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d005      	beq.n	800f3be <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f3ba:	6a3b      	ldr	r3, [r7, #32]
 800f3bc:	e0a0      	b.n	800f500 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681a      	ldr	r2, [r3, #0]
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3c6:	041b      	lsls	r3, r3, #16
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	4610      	mov	r0, r2
 800f3cc:	f004 f829 	bl	8013422 <SDMMC_CmdAppCommand>
 800f3d0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f3d2:	6a3b      	ldr	r3, [r7, #32]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d005      	beq.n	800f3e4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f3e0:	6a3b      	ldr	r3, [r7, #32]
 800f3e2:	e08d      	b.n	800f500 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f3e4:	f04f 33ff 	mov.w	r3, #4294967295
 800f3e8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800f3ea:	2340      	movs	r3, #64	; 0x40
 800f3ec:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800f3ee:	2360      	movs	r3, #96	; 0x60
 800f3f0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f3f2:	2302      	movs	r3, #2
 800f3f4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f3fa:	2301      	movs	r3, #1
 800f3fc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	f107 0208 	add.w	r2, r7, #8
 800f406:	4611      	mov	r1, r2
 800f408:	4618      	mov	r0, r3
 800f40a:	f003 fe91 	bl	8013130 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	4618      	mov	r0, r3
 800f414:	f004 f911 	bl	801363a <SDMMC_CmdStatusRegister>
 800f418:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f41a:	6a3b      	ldr	r3, [r7, #32]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d02b      	beq.n	800f478 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f428:	6a3b      	ldr	r3, [r7, #32]
 800f42a:	e069      	b.n	800f500 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f432:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f436:	2b00      	cmp	r3, #0
 800f438:	d013      	beq.n	800f462 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800f43a:	2300      	movs	r3, #0
 800f43c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f43e:	e00d      	b.n	800f45c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	4618      	mov	r0, r3
 800f446:	f003 fdeb 	bl	8013020 <SDMMC_ReadFIFO>
 800f44a:	4602      	mov	r2, r0
 800f44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f44e:	601a      	str	r2, [r3, #0]
        pData++;
 800f450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f452:	3304      	adds	r3, #4
 800f454:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800f456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f458:	3301      	adds	r3, #1
 800f45a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f45e:	2b07      	cmp	r3, #7
 800f460:	d9ee      	bls.n	800f440 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f462:	f7f4 ff17 	bl	8004294 <HAL_GetTick>
 800f466:	4602      	mov	r2, r0
 800f468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f46a:	1ad3      	subs	r3, r2, r3
 800f46c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f470:	d102      	bne.n	800f478 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f472:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f476:	e043      	b.n	800f500 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f47e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800f482:	2b00      	cmp	r3, #0
 800f484:	d0d2      	beq.n	800f42c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f48c:	f003 0308 	and.w	r3, r3, #8
 800f490:	2b00      	cmp	r3, #0
 800f492:	d001      	beq.n	800f498 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f494:	2308      	movs	r3, #8
 800f496:	e033      	b.n	800f500 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f49e:	f003 0302 	and.w	r3, r3, #2
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d001      	beq.n	800f4aa <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f4a6:	2302      	movs	r3, #2
 800f4a8:	e02a      	b.n	800f500 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4b0:	f003 0320 	and.w	r3, r3, #32
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d017      	beq.n	800f4e8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800f4b8:	2320      	movs	r3, #32
 800f4ba:	e021      	b.n	800f500 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f003 fdad 	bl	8013020 <SDMMC_ReadFIFO>
 800f4c6:	4602      	mov	r2, r0
 800f4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ca:	601a      	str	r2, [r3, #0]
    pData++;
 800f4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ce:	3304      	adds	r3, #4
 800f4d0:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f4d2:	f7f4 fedf 	bl	8004294 <HAL_GetTick>
 800f4d6:	4602      	mov	r2, r0
 800f4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4da:	1ad3      	subs	r3, r2, r3
 800f4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4e0:	d102      	bne.n	800f4e8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f4e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f4e6:	e00b      	b.n	800f500 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d1e2      	bne.n	800f4bc <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	4a03      	ldr	r2, [pc, #12]	; (800f508 <SD_SendSDStatus+0x19c>)
 800f4fc:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800f4fe:	2300      	movs	r3, #0
}
 800f500:	4618      	mov	r0, r3
 800f502:	3730      	adds	r7, #48	; 0x30
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}
 800f508:	18000f3a 	.word	0x18000f3a

0800f50c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b084      	sub	sp, #16
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
 800f514:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d102      	bne.n	800f522 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800f51c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f520:	e018      	b.n	800f554 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681a      	ldr	r2, [r3, #0]
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f52a:	041b      	lsls	r3, r3, #16
 800f52c:	4619      	mov	r1, r3
 800f52e:	4610      	mov	r0, r2
 800f530:	f004 f860 	bl	80135f4 <SDMMC_CmdSendStatus>
 800f534:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d001      	beq.n	800f540 <SD_SendStatus+0x34>
  {
    return errorstate;
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	e009      	b.n	800f554 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	2100      	movs	r1, #0
 800f546:	4618      	mov	r0, r3
 800f548:	f003 fddf 	bl	801310a <SDMMC_GetResponse>
 800f54c:	4602      	mov	r2, r0
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800f552:	2300      	movs	r3, #0
}
 800f554:	4618      	mov	r0, r3
 800f556:	3710      	adds	r7, #16
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}

0800f55c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b086      	sub	sp, #24
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f564:	2300      	movs	r3, #0
 800f566:	60fb      	str	r3, [r7, #12]
 800f568:	2300      	movs	r3, #0
 800f56a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	2100      	movs	r1, #0
 800f572:	4618      	mov	r0, r3
 800f574:	f003 fdc9 	bl	801310a <SDMMC_GetResponse>
 800f578:	4603      	mov	r3, r0
 800f57a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f57e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f582:	d102      	bne.n	800f58a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f584:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f588:	e02f      	b.n	800f5ea <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f58a:	f107 030c 	add.w	r3, r7, #12
 800f58e:	4619      	mov	r1, r3
 800f590:	6878      	ldr	r0, [r7, #4]
 800f592:	f000 f879 	bl	800f688 <SD_FindSCR>
 800f596:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d001      	beq.n	800f5a2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	e023      	b.n	800f5ea <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f5a2:	693b      	ldr	r3, [r7, #16]
 800f5a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d01c      	beq.n	800f5e6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	681a      	ldr	r2, [r3, #0]
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5b4:	041b      	lsls	r3, r3, #16
 800f5b6:	4619      	mov	r1, r3
 800f5b8:	4610      	mov	r0, r2
 800f5ba:	f003 ff32 	bl	8013422 <SDMMC_CmdAppCommand>
 800f5be:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d001      	beq.n	800f5ca <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f5c6:	697b      	ldr	r3, [r7, #20]
 800f5c8:	e00f      	b.n	800f5ea <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	2102      	movs	r1, #2
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f003 ff69 	bl	80134a8 <SDMMC_CmdBusWidth>
 800f5d6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f5d8:	697b      	ldr	r3, [r7, #20]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d001      	beq.n	800f5e2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	e003      	b.n	800f5ea <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	e001      	b.n	800f5ea <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f5e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	3718      	adds	r7, #24
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}

0800f5f2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f5f2:	b580      	push	{r7, lr}
 800f5f4:	b086      	sub	sp, #24
 800f5f6:	af00      	add	r7, sp, #0
 800f5f8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	60fb      	str	r3, [r7, #12]
 800f5fe:	2300      	movs	r3, #0
 800f600:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	2100      	movs	r1, #0
 800f608:	4618      	mov	r0, r3
 800f60a:	f003 fd7e 	bl	801310a <SDMMC_GetResponse>
 800f60e:	4603      	mov	r3, r0
 800f610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f614:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f618:	d102      	bne.n	800f620 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f61a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f61e:	e02f      	b.n	800f680 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f620:	f107 030c 	add.w	r3, r7, #12
 800f624:	4619      	mov	r1, r3
 800f626:	6878      	ldr	r0, [r7, #4]
 800f628:	f000 f82e 	bl	800f688 <SD_FindSCR>
 800f62c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d001      	beq.n	800f638 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f634:	697b      	ldr	r3, [r7, #20]
 800f636:	e023      	b.n	800f680 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f638:	693b      	ldr	r3, [r7, #16]
 800f63a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d01c      	beq.n	800f67c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681a      	ldr	r2, [r3, #0]
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f64a:	041b      	lsls	r3, r3, #16
 800f64c:	4619      	mov	r1, r3
 800f64e:	4610      	mov	r0, r2
 800f650:	f003 fee7 	bl	8013422 <SDMMC_CmdAppCommand>
 800f654:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f656:	697b      	ldr	r3, [r7, #20]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d001      	beq.n	800f660 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f65c:	697b      	ldr	r3, [r7, #20]
 800f65e:	e00f      	b.n	800f680 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	2100      	movs	r1, #0
 800f666:	4618      	mov	r0, r3
 800f668:	f003 ff1e 	bl	80134a8 <SDMMC_CmdBusWidth>
 800f66c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d001      	beq.n	800f678 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f674:	697b      	ldr	r3, [r7, #20]
 800f676:	e003      	b.n	800f680 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f678:	2300      	movs	r3, #0
 800f67a:	e001      	b.n	800f680 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f67c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f680:	4618      	mov	r0, r3
 800f682:	3718      	adds	r7, #24
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}

0800f688 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b08e      	sub	sp, #56	; 0x38
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f692:	f7f4 fdff 	bl	8004294 <HAL_GetTick>
 800f696:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800f698:	2300      	movs	r3, #0
 800f69a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800f69c:	2300      	movs	r3, #0
 800f69e:	60bb      	str	r3, [r7, #8]
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	2108      	movs	r1, #8
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f003 fd6a 	bl	8013188 <SDMMC_CmdBlockLength>
 800f6b4:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d001      	beq.n	800f6c0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800f6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6be:	e0ad      	b.n	800f81c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681a      	ldr	r2, [r3, #0]
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6c8:	041b      	lsls	r3, r3, #16
 800f6ca:	4619      	mov	r1, r3
 800f6cc:	4610      	mov	r0, r2
 800f6ce:	f003 fea8 	bl	8013422 <SDMMC_CmdAppCommand>
 800f6d2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d001      	beq.n	800f6de <SD_FindSCR+0x56>
  {
    return errorstate;
 800f6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6dc:	e09e      	b.n	800f81c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f6de:	f04f 33ff 	mov.w	r3, #4294967295
 800f6e2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f6e4:	2308      	movs	r3, #8
 800f6e6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800f6e8:	2330      	movs	r3, #48	; 0x30
 800f6ea:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f6ec:	2302      	movs	r3, #2
 800f6ee:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f6f4:	2301      	movs	r3, #1
 800f6f6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	f107 0210 	add.w	r2, r7, #16
 800f700:	4611      	mov	r1, r2
 800f702:	4618      	mov	r0, r3
 800f704:	f003 fd14 	bl	8013130 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	4618      	mov	r0, r3
 800f70e:	f003 feee 	bl	80134ee <SDMMC_CmdSendSCR>
 800f712:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f716:	2b00      	cmp	r3, #0
 800f718:	d027      	beq.n	800f76a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800f71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f71c:	e07e      	b.n	800f81c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f724:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d113      	bne.n	800f754 <SD_FindSCR+0xcc>
 800f72c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d110      	bne.n	800f754 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	4618      	mov	r0, r3
 800f738:	f003 fc72 	bl	8013020 <SDMMC_ReadFIFO>
 800f73c:	4603      	mov	r3, r0
 800f73e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	4618      	mov	r0, r3
 800f746:	f003 fc6b 	bl	8013020 <SDMMC_ReadFIFO>
 800f74a:	4603      	mov	r3, r0
 800f74c:	60fb      	str	r3, [r7, #12]
      index++;
 800f74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f750:	3301      	adds	r3, #1
 800f752:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f754:	f7f4 fd9e 	bl	8004294 <HAL_GetTick>
 800f758:	4602      	mov	r2, r0
 800f75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f75c:	1ad3      	subs	r3, r2, r3
 800f75e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f762:	d102      	bne.n	800f76a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f764:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f768:	e058      	b.n	800f81c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f770:	f240 532a 	movw	r3, #1322	; 0x52a
 800f774:	4013      	ands	r3, r2
 800f776:	2b00      	cmp	r3, #0
 800f778:	d0d1      	beq.n	800f71e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f780:	f003 0308 	and.w	r3, r3, #8
 800f784:	2b00      	cmp	r3, #0
 800f786:	d005      	beq.n	800f794 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	2208      	movs	r2, #8
 800f78e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f790:	2308      	movs	r3, #8
 800f792:	e043      	b.n	800f81c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f79a:	f003 0302 	and.w	r3, r3, #2
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d005      	beq.n	800f7ae <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	2202      	movs	r2, #2
 800f7a8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f7aa:	2302      	movs	r3, #2
 800f7ac:	e036      	b.n	800f81c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7b4:	f003 0320 	and.w	r3, r3, #32
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d005      	beq.n	800f7c8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	2220      	movs	r2, #32
 800f7c2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800f7c4:	2320      	movs	r3, #32
 800f7c6:	e029      	b.n	800f81c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	4a15      	ldr	r2, [pc, #84]	; (800f824 <SD_FindSCR+0x19c>)
 800f7ce:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	061a      	lsls	r2, r3, #24
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	021b      	lsls	r3, r3, #8
 800f7d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f7dc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	0a1b      	lsrs	r3, r3, #8
 800f7e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f7e6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	0e1b      	lsrs	r3, r3, #24
 800f7ec:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7f0:	601a      	str	r2, [r3, #0]
    scr++;
 800f7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7f4:	3304      	adds	r3, #4
 800f7f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f7f8:	68bb      	ldr	r3, [r7, #8]
 800f7fa:	061a      	lsls	r2, r3, #24
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	021b      	lsls	r3, r3, #8
 800f800:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f804:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	0a1b      	lsrs	r3, r3, #8
 800f80a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f80e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	0e1b      	lsrs	r3, r3, #24
 800f814:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f818:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800f81a:	2300      	movs	r3, #0
}
 800f81c:	4618      	mov	r0, r3
 800f81e:	3738      	adds	r7, #56	; 0x38
 800f820:	46bd      	mov	sp, r7
 800f822:	bd80      	pop	{r7, pc}
 800f824:	18000f3a 	.word	0x18000f3a

0800f828 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b086      	sub	sp, #24
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f834:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f83a:	2b1f      	cmp	r3, #31
 800f83c:	d936      	bls.n	800f8ac <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800f83e:	2300      	movs	r3, #0
 800f840:	617b      	str	r3, [r7, #20]
 800f842:	e027      	b.n	800f894 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	4618      	mov	r0, r3
 800f84a:	f003 fbe9 	bl	8013020 <SDMMC_ReadFIFO>
 800f84e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	b2da      	uxtb	r2, r3
 800f854:	693b      	ldr	r3, [r7, #16]
 800f856:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f858:	693b      	ldr	r3, [r7, #16]
 800f85a:	3301      	adds	r3, #1
 800f85c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	0a1b      	lsrs	r3, r3, #8
 800f862:	b2da      	uxtb	r2, r3
 800f864:	693b      	ldr	r3, [r7, #16]
 800f866:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f868:	693b      	ldr	r3, [r7, #16]
 800f86a:	3301      	adds	r3, #1
 800f86c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	0c1b      	lsrs	r3, r3, #16
 800f872:	b2da      	uxtb	r2, r3
 800f874:	693b      	ldr	r3, [r7, #16]
 800f876:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f878:	693b      	ldr	r3, [r7, #16]
 800f87a:	3301      	adds	r3, #1
 800f87c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	0e1b      	lsrs	r3, r3, #24
 800f882:	b2da      	uxtb	r2, r3
 800f884:	693b      	ldr	r3, [r7, #16]
 800f886:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f888:	693b      	ldr	r3, [r7, #16]
 800f88a:	3301      	adds	r3, #1
 800f88c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800f88e:	697b      	ldr	r3, [r7, #20]
 800f890:	3301      	adds	r3, #1
 800f892:	617b      	str	r3, [r7, #20]
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	2b07      	cmp	r3, #7
 800f898:	d9d4      	bls.n	800f844 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	693a      	ldr	r2, [r7, #16]
 800f89e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8a4:	f1a3 0220 	sub.w	r2, r3, #32
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800f8ac:	bf00      	nop
 800f8ae:	3718      	adds	r7, #24
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	bd80      	pop	{r7, pc}

0800f8b4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b086      	sub	sp, #24
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	69db      	ldr	r3, [r3, #28]
 800f8c0:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	6a1b      	ldr	r3, [r3, #32]
 800f8c6:	2b1f      	cmp	r3, #31
 800f8c8:	d93a      	bls.n	800f940 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	617b      	str	r3, [r7, #20]
 800f8ce:	e02b      	b.n	800f928 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800f8d0:	693b      	ldr	r3, [r7, #16]
 800f8d2:	781b      	ldrb	r3, [r3, #0]
 800f8d4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	3301      	adds	r3, #1
 800f8da:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800f8dc:	693b      	ldr	r3, [r7, #16]
 800f8de:	781b      	ldrb	r3, [r3, #0]
 800f8e0:	021a      	lsls	r2, r3, #8
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	4313      	orrs	r3, r2
 800f8e6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f8e8:	693b      	ldr	r3, [r7, #16]
 800f8ea:	3301      	adds	r3, #1
 800f8ec:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800f8ee:	693b      	ldr	r3, [r7, #16]
 800f8f0:	781b      	ldrb	r3, [r3, #0]
 800f8f2:	041a      	lsls	r2, r3, #16
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	4313      	orrs	r3, r2
 800f8f8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f8fa:	693b      	ldr	r3, [r7, #16]
 800f8fc:	3301      	adds	r3, #1
 800f8fe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800f900:	693b      	ldr	r3, [r7, #16]
 800f902:	781b      	ldrb	r3, [r3, #0]
 800f904:	061a      	lsls	r2, r3, #24
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	4313      	orrs	r3, r2
 800f90a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f90c:	693b      	ldr	r3, [r7, #16]
 800f90e:	3301      	adds	r3, #1
 800f910:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	f107 020c 	add.w	r2, r7, #12
 800f91a:	4611      	mov	r1, r2
 800f91c:	4618      	mov	r0, r3
 800f91e:	f003 fb8c 	bl	801303a <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	3301      	adds	r3, #1
 800f926:	617b      	str	r3, [r7, #20]
 800f928:	697b      	ldr	r3, [r7, #20]
 800f92a:	2b07      	cmp	r3, #7
 800f92c:	d9d0      	bls.n	800f8d0 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	693a      	ldr	r2, [r7, #16]
 800f932:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	6a1b      	ldr	r3, [r3, #32]
 800f938:	f1a3 0220 	sub.w	r2, r3, #32
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	621a      	str	r2, [r3, #32]
  }
}
 800f940:	bf00      	nop
 800f942:	3718      	adds	r7, #24
 800f944:	46bd      	mov	sp, r7
 800f946:	bd80      	pop	{r7, pc}

0800f948 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800f948:	b480      	push	{r7}
 800f94a:	b083      	sub	sp, #12
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800f950:	bf00      	nop
 800f952:	370c      	adds	r7, #12
 800f954:	46bd      	mov	sp, r7
 800f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95a:	4770      	bx	lr

0800f95c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800f95c:	b480      	push	{r7}
 800f95e:	b083      	sub	sp, #12
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800f964:	bf00      	nop
 800f966:	370c      	adds	r7, #12
 800f968:	46bd      	mov	sp, r7
 800f96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96e:	4770      	bx	lr

0800f970 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800f970:	b480      	push	{r7}
 800f972:	b083      	sub	sp, #12
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800f978:	bf00      	nop
 800f97a:	370c      	adds	r7, #12
 800f97c:	46bd      	mov	sp, r7
 800f97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f982:	4770      	bx	lr

0800f984 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800f984:	b480      	push	{r7}
 800f986:	b083      	sub	sp, #12
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800f98c:	bf00      	nop
 800f98e:	370c      	adds	r7, #12
 800f990:	46bd      	mov	sp, r7
 800f992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f996:	4770      	bx	lr

0800f998 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b084      	sub	sp, #16
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d101      	bne.n	800f9aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f9a6:	2301      	movs	r3, #1
 800f9a8:	e10f      	b.n	800fbca <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	4a87      	ldr	r2, [pc, #540]	; (800fbd4 <HAL_SPI_Init+0x23c>)
 800f9b6:	4293      	cmp	r3, r2
 800f9b8:	d00f      	beq.n	800f9da <HAL_SPI_Init+0x42>
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	4a86      	ldr	r2, [pc, #536]	; (800fbd8 <HAL_SPI_Init+0x240>)
 800f9c0:	4293      	cmp	r3, r2
 800f9c2:	d00a      	beq.n	800f9da <HAL_SPI_Init+0x42>
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	4a84      	ldr	r2, [pc, #528]	; (800fbdc <HAL_SPI_Init+0x244>)
 800f9ca:	4293      	cmp	r3, r2
 800f9cc:	d005      	beq.n	800f9da <HAL_SPI_Init+0x42>
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	68db      	ldr	r3, [r3, #12]
 800f9d2:	2b0f      	cmp	r3, #15
 800f9d4:	d901      	bls.n	800f9da <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800f9d6:	2301      	movs	r3, #1
 800f9d8:	e0f7      	b.n	800fbca <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	f000 fd5a 	bl	8010494 <SPI_GetPacketSize>
 800f9e0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	4a7b      	ldr	r2, [pc, #492]	; (800fbd4 <HAL_SPI_Init+0x23c>)
 800f9e8:	4293      	cmp	r3, r2
 800f9ea:	d00c      	beq.n	800fa06 <HAL_SPI_Init+0x6e>
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	4a79      	ldr	r2, [pc, #484]	; (800fbd8 <HAL_SPI_Init+0x240>)
 800f9f2:	4293      	cmp	r3, r2
 800f9f4:	d007      	beq.n	800fa06 <HAL_SPI_Init+0x6e>
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	4a78      	ldr	r2, [pc, #480]	; (800fbdc <HAL_SPI_Init+0x244>)
 800f9fc:	4293      	cmp	r3, r2
 800f9fe:	d002      	beq.n	800fa06 <HAL_SPI_Init+0x6e>
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	2b08      	cmp	r3, #8
 800fa04:	d811      	bhi.n	800fa2a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800fa0a:	4a72      	ldr	r2, [pc, #456]	; (800fbd4 <HAL_SPI_Init+0x23c>)
 800fa0c:	4293      	cmp	r3, r2
 800fa0e:	d009      	beq.n	800fa24 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	4a70      	ldr	r2, [pc, #448]	; (800fbd8 <HAL_SPI_Init+0x240>)
 800fa16:	4293      	cmp	r3, r2
 800fa18:	d004      	beq.n	800fa24 <HAL_SPI_Init+0x8c>
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	4a6f      	ldr	r2, [pc, #444]	; (800fbdc <HAL_SPI_Init+0x244>)
 800fa20:	4293      	cmp	r3, r2
 800fa22:	d104      	bne.n	800fa2e <HAL_SPI_Init+0x96>
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	2b10      	cmp	r3, #16
 800fa28:	d901      	bls.n	800fa2e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	e0cd      	b.n	800fbca <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fa34:	b2db      	uxtb	r3, r3
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d106      	bne.n	800fa48 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	f7f3 fd96 	bl	8003574 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	2202      	movs	r2, #2
 800fa4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	681a      	ldr	r2, [r3, #0]
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	f022 0201 	bic.w	r2, r2, #1
 800fa5e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	689b      	ldr	r3, [r3, #8]
 800fa66:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800fa6a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	699b      	ldr	r3, [r3, #24]
 800fa70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800fa74:	d119      	bne.n	800faaa <HAL_SPI_Init+0x112>
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	685b      	ldr	r3, [r3, #4]
 800fa7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fa7e:	d103      	bne.n	800fa88 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d008      	beq.n	800fa9a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d10c      	bne.n	800faaa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800fa94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fa98:	d107      	bne.n	800faaa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	681a      	ldr	r2, [r3, #0]
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800faa8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	685b      	ldr	r3, [r3, #4]
 800faae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d00f      	beq.n	800fad6 <HAL_SPI_Init+0x13e>
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	68db      	ldr	r3, [r3, #12]
 800faba:	2b06      	cmp	r3, #6
 800fabc:	d90b      	bls.n	800fad6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	430a      	orrs	r2, r1
 800fad2:	601a      	str	r2, [r3, #0]
 800fad4:	e007      	b.n	800fae6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	681a      	ldr	r2, [r3, #0]
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fae4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	69da      	ldr	r2, [r3, #28]
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800faee:	431a      	orrs	r2, r3
 800faf0:	68bb      	ldr	r3, [r7, #8]
 800faf2:	431a      	orrs	r2, r3
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800faf8:	ea42 0103 	orr.w	r1, r2, r3
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	68da      	ldr	r2, [r3, #12]
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	430a      	orrs	r2, r1
 800fb06:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb10:	431a      	orrs	r2, r3
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb16:	431a      	orrs	r2, r3
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	699b      	ldr	r3, [r3, #24]
 800fb1c:	431a      	orrs	r2, r3
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	691b      	ldr	r3, [r3, #16]
 800fb22:	431a      	orrs	r2, r3
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	695b      	ldr	r3, [r3, #20]
 800fb28:	431a      	orrs	r2, r3
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	6a1b      	ldr	r3, [r3, #32]
 800fb2e:	431a      	orrs	r2, r3
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	685b      	ldr	r3, [r3, #4]
 800fb34:	431a      	orrs	r2, r3
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb3a:	431a      	orrs	r2, r3
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	689b      	ldr	r3, [r3, #8]
 800fb40:	431a      	orrs	r2, r3
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb46:	ea42 0103 	orr.w	r1, r2, r3
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	430a      	orrs	r2, r1
 800fb54:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	685b      	ldr	r3, [r3, #4]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d113      	bne.n	800fb86 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	689b      	ldr	r3, [r3, #8]
 800fb64:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fb70:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	689b      	ldr	r3, [r3, #8]
 800fb78:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fb84:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	f022 0201 	bic.w	r2, r2, #1
 800fb94:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	685b      	ldr	r3, [r3, #4]
 800fb9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d00a      	beq.n	800fbb8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	68db      	ldr	r3, [r3, #12]
 800fba8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	430a      	orrs	r2, r1
 800fbb6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2200      	movs	r2, #0
 800fbbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	2201      	movs	r2, #1
 800fbc4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800fbc8:	2300      	movs	r3, #0
}
 800fbca:	4618      	mov	r0, r3
 800fbcc:	3710      	adds	r7, #16
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}
 800fbd2:	bf00      	nop
 800fbd4:	40013000 	.word	0x40013000
 800fbd8:	40003800 	.word	0x40003800
 800fbdc:	40003c00 	.word	0x40003c00

0800fbe0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b08a      	sub	sp, #40	; 0x28
 800fbe4:	af02      	add	r7, sp, #8
 800fbe6:	60f8      	str	r0, [r7, #12]
 800fbe8:	60b9      	str	r1, [r7, #8]
 800fbea:	603b      	str	r3, [r7, #0]
 800fbec:	4613      	mov	r3, r2
 800fbee:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	3320      	adds	r3, #32
 800fbf6:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fc02:	2b01      	cmp	r3, #1
 800fc04:	d101      	bne.n	800fc0a <HAL_SPI_Transmit+0x2a>
 800fc06:	2302      	movs	r3, #2
 800fc08:	e1e1      	b.n	800ffce <HAL_SPI_Transmit+0x3ee>
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	2201      	movs	r2, #1
 800fc0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fc12:	f7f4 fb3f 	bl	8004294 <HAL_GetTick>
 800fc16:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fc1e:	b2db      	uxtb	r3, r3
 800fc20:	2b01      	cmp	r3, #1
 800fc22:	d007      	beq.n	800fc34 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800fc24:	2302      	movs	r3, #2
 800fc26:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fc30:	7efb      	ldrb	r3, [r7, #27]
 800fc32:	e1cc      	b.n	800ffce <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800fc34:	68bb      	ldr	r3, [r7, #8]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d002      	beq.n	800fc40 <HAL_SPI_Transmit+0x60>
 800fc3a:	88fb      	ldrh	r3, [r7, #6]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d107      	bne.n	800fc50 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800fc40:	2301      	movs	r3, #1
 800fc42:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	2200      	movs	r2, #0
 800fc48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fc4c:	7efb      	ldrb	r3, [r7, #27]
 800fc4e:	e1be      	b.n	800ffce <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	2203      	movs	r2, #3
 800fc54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	68ba      	ldr	r2, [r7, #8]
 800fc64:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	88fa      	ldrh	r2, [r7, #6]
 800fc6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	88fa      	ldrh	r2, [r7, #6]
 800fc72:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	2200      	movs	r2, #0
 800fc7a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	2200      	movs	r2, #0
 800fc80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	2200      	movs	r2, #0
 800fc88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	2200      	movs	r2, #0
 800fc90:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	2200      	movs	r2, #0
 800fc96:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	689b      	ldr	r3, [r3, #8]
 800fc9c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800fca0:	d108      	bne.n	800fcb4 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	681a      	ldr	r2, [r3, #0]
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fcb0:	601a      	str	r2, [r3, #0]
 800fcb2:	e009      	b.n	800fcc8 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	68db      	ldr	r3, [r3, #12]
 800fcba:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fcc6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	685a      	ldr	r2, [r3, #4]
 800fcce:	4b96      	ldr	r3, [pc, #600]	; (800ff28 <HAL_SPI_Transmit+0x348>)
 800fcd0:	4013      	ands	r3, r2
 800fcd2:	88f9      	ldrh	r1, [r7, #6]
 800fcd4:	68fa      	ldr	r2, [r7, #12]
 800fcd6:	6812      	ldr	r2, [r2, #0]
 800fcd8:	430b      	orrs	r3, r1
 800fcda:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	681a      	ldr	r2, [r3, #0]
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	f042 0201 	orr.w	r2, r2, #1
 800fcea:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	685b      	ldr	r3, [r3, #4]
 800fcf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fcf4:	d107      	bne.n	800fd06 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	681a      	ldr	r2, [r3, #0]
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fd04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	68db      	ldr	r3, [r3, #12]
 800fd0a:	2b0f      	cmp	r3, #15
 800fd0c:	d947      	bls.n	800fd9e <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800fd0e:	e03f      	b.n	800fd90 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	695b      	ldr	r3, [r3, #20]
 800fd16:	f003 0302 	and.w	r3, r3, #2
 800fd1a:	2b02      	cmp	r3, #2
 800fd1c:	d114      	bne.n	800fd48 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	6812      	ldr	r2, [r2, #0]
 800fd28:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd2e:	1d1a      	adds	r2, r3, #4
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fd3a:	b29b      	uxth	r3, r3
 800fd3c:	3b01      	subs	r3, #1
 800fd3e:	b29a      	uxth	r2, r3
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fd46:	e023      	b.n	800fd90 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fd48:	f7f4 faa4 	bl	8004294 <HAL_GetTick>
 800fd4c:	4602      	mov	r2, r0
 800fd4e:	697b      	ldr	r3, [r7, #20]
 800fd50:	1ad3      	subs	r3, r2, r3
 800fd52:	683a      	ldr	r2, [r7, #0]
 800fd54:	429a      	cmp	r2, r3
 800fd56:	d803      	bhi.n	800fd60 <HAL_SPI_Transmit+0x180>
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd5e:	d102      	bne.n	800fd66 <HAL_SPI_Transmit+0x186>
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d114      	bne.n	800fd90 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fd66:	68f8      	ldr	r0, [r7, #12]
 800fd68:	f000 fac6 	bl	80102f8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	2200      	movs	r2, #0
 800fd70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	2201      	movs	r2, #1
 800fd88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fd8c:	2303      	movs	r3, #3
 800fd8e:	e11e      	b.n	800ffce <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fd96:	b29b      	uxth	r3, r3
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d1b9      	bne.n	800fd10 <HAL_SPI_Transmit+0x130>
 800fd9c:	e0f1      	b.n	800ff82 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	68db      	ldr	r3, [r3, #12]
 800fda2:	2b07      	cmp	r3, #7
 800fda4:	f240 80e6 	bls.w	800ff74 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800fda8:	e05d      	b.n	800fe66 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	695b      	ldr	r3, [r3, #20]
 800fdb0:	f003 0302 	and.w	r3, r3, #2
 800fdb4:	2b02      	cmp	r3, #2
 800fdb6:	d132      	bne.n	800fe1e <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fdbe:	b29b      	uxth	r3, r3
 800fdc0:	2b01      	cmp	r3, #1
 800fdc2:	d918      	bls.n	800fdf6 <HAL_SPI_Transmit+0x216>
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d014      	beq.n	800fdf6 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	6812      	ldr	r2, [r2, #0]
 800fdd6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fddc:	1d1a      	adds	r2, r3, #4
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fde8:	b29b      	uxth	r3, r3
 800fdea:	3b02      	subs	r3, #2
 800fdec:	b29a      	uxth	r2, r3
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fdf4:	e037      	b.n	800fe66 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fdfa:	881a      	ldrh	r2, [r3, #0]
 800fdfc:	69fb      	ldr	r3, [r7, #28]
 800fdfe:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe04:	1c9a      	adds	r2, r3, #2
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fe10:	b29b      	uxth	r3, r3
 800fe12:	3b01      	subs	r3, #1
 800fe14:	b29a      	uxth	r2, r3
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fe1c:	e023      	b.n	800fe66 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fe1e:	f7f4 fa39 	bl	8004294 <HAL_GetTick>
 800fe22:	4602      	mov	r2, r0
 800fe24:	697b      	ldr	r3, [r7, #20]
 800fe26:	1ad3      	subs	r3, r2, r3
 800fe28:	683a      	ldr	r2, [r7, #0]
 800fe2a:	429a      	cmp	r2, r3
 800fe2c:	d803      	bhi.n	800fe36 <HAL_SPI_Transmit+0x256>
 800fe2e:	683b      	ldr	r3, [r7, #0]
 800fe30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe34:	d102      	bne.n	800fe3c <HAL_SPI_Transmit+0x25c>
 800fe36:	683b      	ldr	r3, [r7, #0]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d114      	bne.n	800fe66 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fe3c:	68f8      	ldr	r0, [r7, #12]
 800fe3e:	f000 fa5b 	bl	80102f8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	2200      	movs	r2, #0
 800fe46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	2201      	movs	r2, #1
 800fe5e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fe62:	2303      	movs	r3, #3
 800fe64:	e0b3      	b.n	800ffce <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fe6c:	b29b      	uxth	r3, r3
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d19b      	bne.n	800fdaa <HAL_SPI_Transmit+0x1ca>
 800fe72:	e086      	b.n	800ff82 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	695b      	ldr	r3, [r3, #20]
 800fe7a:	f003 0302 	and.w	r3, r3, #2
 800fe7e:	2b02      	cmp	r3, #2
 800fe80:	d154      	bne.n	800ff2c <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fe88:	b29b      	uxth	r3, r3
 800fe8a:	2b03      	cmp	r3, #3
 800fe8c:	d918      	bls.n	800fec0 <HAL_SPI_Transmit+0x2e0>
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe92:	2b40      	cmp	r3, #64	; 0x40
 800fe94:	d914      	bls.n	800fec0 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	6812      	ldr	r2, [r2, #0]
 800fea0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fea6:	1d1a      	adds	r2, r3, #4
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800feb2:	b29b      	uxth	r3, r3
 800feb4:	3b04      	subs	r3, #4
 800feb6:	b29a      	uxth	r2, r3
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800febe:	e059      	b.n	800ff74 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fec6:	b29b      	uxth	r3, r3
 800fec8:	2b01      	cmp	r3, #1
 800feca:	d917      	bls.n	800fefc <HAL_SPI_Transmit+0x31c>
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d013      	beq.n	800fefc <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fed8:	881a      	ldrh	r2, [r3, #0]
 800feda:	69fb      	ldr	r3, [r7, #28]
 800fedc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fee2:	1c9a      	adds	r2, r3, #2
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800feee:	b29b      	uxth	r3, r3
 800fef0:	3b02      	subs	r3, #2
 800fef2:	b29a      	uxth	r2, r3
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fefa:	e03b      	b.n	800ff74 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	3320      	adds	r3, #32
 800ff06:	7812      	ldrb	r2, [r2, #0]
 800ff08:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ff0e:	1c5a      	adds	r2, r3, #1
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ff1a:	b29b      	uxth	r3, r3
 800ff1c:	3b01      	subs	r3, #1
 800ff1e:	b29a      	uxth	r2, r3
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ff26:	e025      	b.n	800ff74 <HAL_SPI_Transmit+0x394>
 800ff28:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ff2c:	f7f4 f9b2 	bl	8004294 <HAL_GetTick>
 800ff30:	4602      	mov	r2, r0
 800ff32:	697b      	ldr	r3, [r7, #20]
 800ff34:	1ad3      	subs	r3, r2, r3
 800ff36:	683a      	ldr	r2, [r7, #0]
 800ff38:	429a      	cmp	r2, r3
 800ff3a:	d803      	bhi.n	800ff44 <HAL_SPI_Transmit+0x364>
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff42:	d102      	bne.n	800ff4a <HAL_SPI_Transmit+0x36a>
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d114      	bne.n	800ff74 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ff4a:	68f8      	ldr	r0, [r7, #12]
 800ff4c:	f000 f9d4 	bl	80102f8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	2200      	movs	r2, #0
 800ff54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	2201      	movs	r2, #1
 800ff6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ff70:	2303      	movs	r3, #3
 800ff72:	e02c      	b.n	800ffce <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ff7a:	b29b      	uxth	r3, r3
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	f47f af79 	bne.w	800fe74 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	9300      	str	r3, [sp, #0]
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	2200      	movs	r2, #0
 800ff8a:	2108      	movs	r1, #8
 800ff8c:	68f8      	ldr	r0, [r7, #12]
 800ff8e:	f000 fa53 	bl	8010438 <SPI_WaitOnFlagUntilTimeout>
 800ff92:	4603      	mov	r3, r0
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d007      	beq.n	800ffa8 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff9e:	f043 0220 	orr.w	r2, r3, #32
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ffa8:	68f8      	ldr	r0, [r7, #12]
 800ffaa:	f000 f9a5 	bl	80102f8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	2201      	movs	r2, #1
 800ffba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d001      	beq.n	800ffcc <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800ffc8:	2301      	movs	r3, #1
 800ffca:	e000      	b.n	800ffce <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800ffcc:	7efb      	ldrb	r3, [r7, #27]
}
 800ffce:	4618      	mov	r0, r3
 800ffd0:	3720      	adds	r7, #32
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	bd80      	pop	{r7, pc}
 800ffd6:	bf00      	nop

0800ffd8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b088      	sub	sp, #32
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	60f8      	str	r0, [r7, #12]
 800ffe0:	60b9      	str	r1, [r7, #8]
 800ffe2:	603b      	str	r3, [r7, #0]
 800ffe4:	4613      	mov	r3, r2
 800ffe6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ffe8:	2300      	movs	r3, #0
 800ffea:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	3330      	adds	r3, #48	; 0x30
 800fff2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fffa:	2b01      	cmp	r3, #1
 800fffc:	d101      	bne.n	8010002 <HAL_SPI_Receive+0x2a>
 800fffe:	2302      	movs	r3, #2
 8010000:	e173      	b.n	80102ea <HAL_SPI_Receive+0x312>
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	2201      	movs	r2, #1
 8010006:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801000a:	f7f4 f943 	bl	8004294 <HAL_GetTick>
 801000e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010016:	b2db      	uxtb	r3, r3
 8010018:	2b01      	cmp	r3, #1
 801001a:	d007      	beq.n	801002c <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 801001c:	2302      	movs	r3, #2
 801001e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	2200      	movs	r2, #0
 8010024:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010028:	7ffb      	ldrb	r3, [r7, #31]
 801002a:	e15e      	b.n	80102ea <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d002      	beq.n	8010038 <HAL_SPI_Receive+0x60>
 8010032:	88fb      	ldrh	r3, [r7, #6]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d107      	bne.n	8010048 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 8010038:	2301      	movs	r3, #1
 801003a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	2200      	movs	r2, #0
 8010040:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010044:	7ffb      	ldrb	r3, [r7, #31]
 8010046:	e150      	b.n	80102ea <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	2204      	movs	r2, #4
 801004c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	2200      	movs	r2, #0
 8010054:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	68ba      	ldr	r2, [r7, #8]
 801005c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	88fa      	ldrh	r2, [r7, #6]
 8010062:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	88fa      	ldrh	r2, [r7, #6]
 801006a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	2200      	movs	r2, #0
 8010072:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	2200      	movs	r2, #0
 8010078:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	2200      	movs	r2, #0
 8010080:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	2200      	movs	r2, #0
 8010088:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	2200      	movs	r2, #0
 801008e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	689b      	ldr	r3, [r3, #8]
 8010094:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8010098:	d108      	bne.n	80100ac <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	681a      	ldr	r2, [r3, #0]
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80100a8:	601a      	str	r2, [r3, #0]
 80100aa:	e009      	b.n	80100c0 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	68db      	ldr	r3, [r3, #12]
 80100b2:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80100be:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	685a      	ldr	r2, [r3, #4]
 80100c6:	4b8b      	ldr	r3, [pc, #556]	; (80102f4 <HAL_SPI_Receive+0x31c>)
 80100c8:	4013      	ands	r3, r2
 80100ca:	88f9      	ldrh	r1, [r7, #6]
 80100cc:	68fa      	ldr	r2, [r7, #12]
 80100ce:	6812      	ldr	r2, [r2, #0]
 80100d0:	430b      	orrs	r3, r1
 80100d2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	681a      	ldr	r2, [r3, #0]
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	f042 0201 	orr.w	r2, r2, #1
 80100e2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	685b      	ldr	r3, [r3, #4]
 80100e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80100ec:	d107      	bne.n	80100fe <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	681a      	ldr	r2, [r3, #0]
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80100fc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	68db      	ldr	r3, [r3, #12]
 8010102:	2b0f      	cmp	r3, #15
 8010104:	d948      	bls.n	8010198 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8010106:	e040      	b.n	801018a <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	695a      	ldr	r2, [r3, #20]
 801010e:	f248 0308 	movw	r3, #32776	; 0x8008
 8010112:	4013      	ands	r3, r2
 8010114:	2b00      	cmp	r3, #0
 8010116:	d014      	beq.n	8010142 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	681a      	ldr	r2, [r3, #0]
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010120:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8010122:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010128:	1d1a      	adds	r2, r3, #4
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010134:	b29b      	uxth	r3, r3
 8010136:	3b01      	subs	r3, #1
 8010138:	b29a      	uxth	r2, r3
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010140:	e023      	b.n	801018a <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010142:	f7f4 f8a7 	bl	8004294 <HAL_GetTick>
 8010146:	4602      	mov	r2, r0
 8010148:	697b      	ldr	r3, [r7, #20]
 801014a:	1ad3      	subs	r3, r2, r3
 801014c:	683a      	ldr	r2, [r7, #0]
 801014e:	429a      	cmp	r2, r3
 8010150:	d803      	bhi.n	801015a <HAL_SPI_Receive+0x182>
 8010152:	683b      	ldr	r3, [r7, #0]
 8010154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010158:	d102      	bne.n	8010160 <HAL_SPI_Receive+0x188>
 801015a:	683b      	ldr	r3, [r7, #0]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d114      	bne.n	801018a <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010160:	68f8      	ldr	r0, [r7, #12]
 8010162:	f000 f8c9 	bl	80102f8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	2200      	movs	r2, #0
 801016a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010174:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	2201      	movs	r2, #1
 8010182:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010186:	2303      	movs	r3, #3
 8010188:	e0af      	b.n	80102ea <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010190:	b29b      	uxth	r3, r3
 8010192:	2b00      	cmp	r3, #0
 8010194:	d1b8      	bne.n	8010108 <HAL_SPI_Receive+0x130>
 8010196:	e095      	b.n	80102c4 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	68db      	ldr	r3, [r3, #12]
 801019c:	2b07      	cmp	r3, #7
 801019e:	f240 808b 	bls.w	80102b8 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80101a2:	e03f      	b.n	8010224 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	695b      	ldr	r3, [r3, #20]
 80101aa:	f003 0301 	and.w	r3, r3, #1
 80101ae:	2b01      	cmp	r3, #1
 80101b0:	d114      	bne.n	80101dc <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80101b6:	69ba      	ldr	r2, [r7, #24]
 80101b8:	8812      	ldrh	r2, [r2, #0]
 80101ba:	b292      	uxth	r2, r2
 80101bc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80101c2:	1c9a      	adds	r2, r3, #2
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80101ce:	b29b      	uxth	r3, r3
 80101d0:	3b01      	subs	r3, #1
 80101d2:	b29a      	uxth	r2, r3
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80101da:	e023      	b.n	8010224 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80101dc:	f7f4 f85a 	bl	8004294 <HAL_GetTick>
 80101e0:	4602      	mov	r2, r0
 80101e2:	697b      	ldr	r3, [r7, #20]
 80101e4:	1ad3      	subs	r3, r2, r3
 80101e6:	683a      	ldr	r2, [r7, #0]
 80101e8:	429a      	cmp	r2, r3
 80101ea:	d803      	bhi.n	80101f4 <HAL_SPI_Receive+0x21c>
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101f2:	d102      	bne.n	80101fa <HAL_SPI_Receive+0x222>
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d114      	bne.n	8010224 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80101fa:	68f8      	ldr	r0, [r7, #12]
 80101fc:	f000 f87c 	bl	80102f8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	2200      	movs	r2, #0
 8010204:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801020e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	2201      	movs	r2, #1
 801021c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010220:	2303      	movs	r3, #3
 8010222:	e062      	b.n	80102ea <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801022a:	b29b      	uxth	r3, r3
 801022c:	2b00      	cmp	r3, #0
 801022e:	d1b9      	bne.n	80101a4 <HAL_SPI_Receive+0x1cc>
 8010230:	e048      	b.n	80102c4 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	695b      	ldr	r3, [r3, #20]
 8010238:	f003 0301 	and.w	r3, r3, #1
 801023c:	2b01      	cmp	r3, #1
 801023e:	d117      	bne.n	8010270 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801024c:	7812      	ldrb	r2, [r2, #0]
 801024e:	b2d2      	uxtb	r2, r2
 8010250:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010256:	1c5a      	adds	r2, r3, #1
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010262:	b29b      	uxth	r3, r3
 8010264:	3b01      	subs	r3, #1
 8010266:	b29a      	uxth	r2, r3
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801026e:	e023      	b.n	80102b8 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010270:	f7f4 f810 	bl	8004294 <HAL_GetTick>
 8010274:	4602      	mov	r2, r0
 8010276:	697b      	ldr	r3, [r7, #20]
 8010278:	1ad3      	subs	r3, r2, r3
 801027a:	683a      	ldr	r2, [r7, #0]
 801027c:	429a      	cmp	r2, r3
 801027e:	d803      	bhi.n	8010288 <HAL_SPI_Receive+0x2b0>
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010286:	d102      	bne.n	801028e <HAL_SPI_Receive+0x2b6>
 8010288:	683b      	ldr	r3, [r7, #0]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d114      	bne.n	80102b8 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801028e:	68f8      	ldr	r0, [r7, #12]
 8010290:	f000 f832 	bl	80102f8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	2200      	movs	r2, #0
 8010298:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80102a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	2201      	movs	r2, #1
 80102b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80102b4:	2303      	movs	r3, #3
 80102b6:	e018      	b.n	80102ea <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80102be:	b29b      	uxth	r3, r3
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d1b6      	bne.n	8010232 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80102c4:	68f8      	ldr	r0, [r7, #12]
 80102c6:	f000 f817 	bl	80102f8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	2200      	movs	r2, #0
 80102ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	2201      	movs	r2, #1
 80102d6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d001      	beq.n	80102e8 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 80102e4:	2301      	movs	r3, #1
 80102e6:	e000      	b.n	80102ea <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 80102e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80102ea:	4618      	mov	r0, r3
 80102ec:	3720      	adds	r7, #32
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bd80      	pop	{r7, pc}
 80102f2:	bf00      	nop
 80102f4:	ffff0000 	.word	0xffff0000

080102f8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80102f8:	b480      	push	{r7}
 80102fa:	b085      	sub	sp, #20
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	695b      	ldr	r3, [r3, #20]
 8010306:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	699a      	ldr	r2, [r3, #24]
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	f042 0208 	orr.w	r2, r2, #8
 8010316:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	699a      	ldr	r2, [r3, #24]
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	f042 0210 	orr.w	r2, r2, #16
 8010326:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	681a      	ldr	r2, [r3, #0]
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	f022 0201 	bic.w	r2, r2, #1
 8010336:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	6919      	ldr	r1, [r3, #16]
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	681a      	ldr	r2, [r3, #0]
 8010342:	4b3c      	ldr	r3, [pc, #240]	; (8010434 <SPI_CloseTransfer+0x13c>)
 8010344:	400b      	ands	r3, r1
 8010346:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	689a      	ldr	r2, [r3, #8]
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8010356:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801035e:	b2db      	uxtb	r3, r3
 8010360:	2b04      	cmp	r3, #4
 8010362:	d014      	beq.n	801038e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	f003 0320 	and.w	r3, r3, #32
 801036a:	2b00      	cmp	r3, #0
 801036c:	d00f      	beq.n	801038e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010374:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	699a      	ldr	r2, [r3, #24]
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	f042 0220 	orr.w	r2, r2, #32
 801038c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010394:	b2db      	uxtb	r3, r3
 8010396:	2b03      	cmp	r3, #3
 8010398:	d014      	beq.n	80103c4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d00f      	beq.n	80103c4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80103aa:	f043 0204 	orr.w	r2, r3, #4
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	699a      	ldr	r2, [r3, #24]
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80103c2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d00f      	beq.n	80103ee <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80103d4:	f043 0201 	orr.w	r2, r3, #1
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	699a      	ldr	r2, [r3, #24]
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80103ec:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d00f      	beq.n	8010418 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80103fe:	f043 0208 	orr.w	r2, r3, #8
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	699a      	ldr	r2, [r3, #24]
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010416:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	2200      	movs	r2, #0
 801041c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2200      	movs	r2, #0
 8010424:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8010428:	bf00      	nop
 801042a:	3714      	adds	r7, #20
 801042c:	46bd      	mov	sp, r7
 801042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010432:	4770      	bx	lr
 8010434:	fffffc90 	.word	0xfffffc90

08010438 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b084      	sub	sp, #16
 801043c:	af00      	add	r7, sp, #0
 801043e:	60f8      	str	r0, [r7, #12]
 8010440:	60b9      	str	r1, [r7, #8]
 8010442:	603b      	str	r3, [r7, #0]
 8010444:	4613      	mov	r3, r2
 8010446:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010448:	e010      	b.n	801046c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801044a:	f7f3 ff23 	bl	8004294 <HAL_GetTick>
 801044e:	4602      	mov	r2, r0
 8010450:	69bb      	ldr	r3, [r7, #24]
 8010452:	1ad3      	subs	r3, r2, r3
 8010454:	683a      	ldr	r2, [r7, #0]
 8010456:	429a      	cmp	r2, r3
 8010458:	d803      	bhi.n	8010462 <SPI_WaitOnFlagUntilTimeout+0x2a>
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010460:	d102      	bne.n	8010468 <SPI_WaitOnFlagUntilTimeout+0x30>
 8010462:	683b      	ldr	r3, [r7, #0]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d101      	bne.n	801046c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8010468:	2303      	movs	r3, #3
 801046a:	e00f      	b.n	801048c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	695a      	ldr	r2, [r3, #20]
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	4013      	ands	r3, r2
 8010476:	68ba      	ldr	r2, [r7, #8]
 8010478:	429a      	cmp	r2, r3
 801047a:	bf0c      	ite	eq
 801047c:	2301      	moveq	r3, #1
 801047e:	2300      	movne	r3, #0
 8010480:	b2db      	uxtb	r3, r3
 8010482:	461a      	mov	r2, r3
 8010484:	79fb      	ldrb	r3, [r7, #7]
 8010486:	429a      	cmp	r2, r3
 8010488:	d0df      	beq.n	801044a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 801048a:	2300      	movs	r3, #0
}
 801048c:	4618      	mov	r0, r3
 801048e:	3710      	adds	r7, #16
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}

08010494 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8010494:	b480      	push	{r7}
 8010496:	b085      	sub	sp, #20
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104a0:	095b      	lsrs	r3, r3, #5
 80104a2:	3301      	adds	r3, #1
 80104a4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	68db      	ldr	r3, [r3, #12]
 80104aa:	3301      	adds	r3, #1
 80104ac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80104ae:	68bb      	ldr	r3, [r7, #8]
 80104b0:	3307      	adds	r3, #7
 80104b2:	08db      	lsrs	r3, r3, #3
 80104b4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	68fa      	ldr	r2, [r7, #12]
 80104ba:	fb02 f303 	mul.w	r3, r2, r3
}
 80104be:	4618      	mov	r0, r3
 80104c0:	3714      	adds	r7, #20
 80104c2:	46bd      	mov	sp, r7
 80104c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c8:	4770      	bx	lr

080104ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80104ca:	b580      	push	{r7, lr}
 80104cc:	b082      	sub	sp, #8
 80104ce:	af00      	add	r7, sp, #0
 80104d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d101      	bne.n	80104dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80104d8:	2301      	movs	r3, #1
 80104da:	e049      	b.n	8010570 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80104e2:	b2db      	uxtb	r3, r3
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d106      	bne.n	80104f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2200      	movs	r2, #0
 80104ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80104f0:	6878      	ldr	r0, [r7, #4]
 80104f2:	f7f3 fa91 	bl	8003a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	2202      	movs	r2, #2
 80104fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681a      	ldr	r2, [r3, #0]
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	3304      	adds	r3, #4
 8010506:	4619      	mov	r1, r3
 8010508:	4610      	mov	r0, r2
 801050a:	f000 ff29 	bl	8011360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	2201      	movs	r2, #1
 8010512:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2201      	movs	r2, #1
 801051a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	2201      	movs	r2, #1
 8010522:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	2201      	movs	r2, #1
 801052a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	2201      	movs	r2, #1
 8010532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	2201      	movs	r2, #1
 801053a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	2201      	movs	r2, #1
 8010542:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	2201      	movs	r2, #1
 801054a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	2201      	movs	r2, #1
 8010552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	2201      	movs	r2, #1
 801055a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2201      	movs	r2, #1
 8010562:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	2201      	movs	r2, #1
 801056a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801056e:	2300      	movs	r3, #0
}
 8010570:	4618      	mov	r0, r3
 8010572:	3708      	adds	r7, #8
 8010574:	46bd      	mov	sp, r7
 8010576:	bd80      	pop	{r7, pc}

08010578 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b082      	sub	sp, #8
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d101      	bne.n	801058a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010586:	2301      	movs	r3, #1
 8010588:	e049      	b.n	801061e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010590:	b2db      	uxtb	r3, r3
 8010592:	2b00      	cmp	r3, #0
 8010594:	d106      	bne.n	80105a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	2200      	movs	r2, #0
 801059a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801059e:	6878      	ldr	r0, [r7, #4]
 80105a0:	f7f3 f8a4 	bl	80036ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2202      	movs	r2, #2
 80105a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681a      	ldr	r2, [r3, #0]
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	3304      	adds	r3, #4
 80105b4:	4619      	mov	r1, r3
 80105b6:	4610      	mov	r0, r2
 80105b8:	f000 fed2 	bl	8011360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2201      	movs	r2, #1
 80105c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2201      	movs	r2, #1
 80105c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	2201      	movs	r2, #1
 80105d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	2201      	movs	r2, #1
 80105d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2201      	movs	r2, #1
 80105e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2201      	movs	r2, #1
 80105e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	2201      	movs	r2, #1
 80105f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2201      	movs	r2, #1
 80105f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2201      	movs	r2, #1
 8010600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	2201      	movs	r2, #1
 8010608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2201      	movs	r2, #1
 8010610:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2201      	movs	r2, #1
 8010618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801061c:	2300      	movs	r3, #0
}
 801061e:	4618      	mov	r0, r3
 8010620:	3708      	adds	r7, #8
 8010622:	46bd      	mov	sp, r7
 8010624:	bd80      	pop	{r7, pc}
	...

08010628 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b084      	sub	sp, #16
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
 8010630:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010632:	683b      	ldr	r3, [r7, #0]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d109      	bne.n	801064c <HAL_TIM_PWM_Start+0x24>
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801063e:	b2db      	uxtb	r3, r3
 8010640:	2b01      	cmp	r3, #1
 8010642:	bf14      	ite	ne
 8010644:	2301      	movne	r3, #1
 8010646:	2300      	moveq	r3, #0
 8010648:	b2db      	uxtb	r3, r3
 801064a:	e03c      	b.n	80106c6 <HAL_TIM_PWM_Start+0x9e>
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	2b04      	cmp	r3, #4
 8010650:	d109      	bne.n	8010666 <HAL_TIM_PWM_Start+0x3e>
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010658:	b2db      	uxtb	r3, r3
 801065a:	2b01      	cmp	r3, #1
 801065c:	bf14      	ite	ne
 801065e:	2301      	movne	r3, #1
 8010660:	2300      	moveq	r3, #0
 8010662:	b2db      	uxtb	r3, r3
 8010664:	e02f      	b.n	80106c6 <HAL_TIM_PWM_Start+0x9e>
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	2b08      	cmp	r3, #8
 801066a:	d109      	bne.n	8010680 <HAL_TIM_PWM_Start+0x58>
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010672:	b2db      	uxtb	r3, r3
 8010674:	2b01      	cmp	r3, #1
 8010676:	bf14      	ite	ne
 8010678:	2301      	movne	r3, #1
 801067a:	2300      	moveq	r3, #0
 801067c:	b2db      	uxtb	r3, r3
 801067e:	e022      	b.n	80106c6 <HAL_TIM_PWM_Start+0x9e>
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	2b0c      	cmp	r3, #12
 8010684:	d109      	bne.n	801069a <HAL_TIM_PWM_Start+0x72>
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801068c:	b2db      	uxtb	r3, r3
 801068e:	2b01      	cmp	r3, #1
 8010690:	bf14      	ite	ne
 8010692:	2301      	movne	r3, #1
 8010694:	2300      	moveq	r3, #0
 8010696:	b2db      	uxtb	r3, r3
 8010698:	e015      	b.n	80106c6 <HAL_TIM_PWM_Start+0x9e>
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	2b10      	cmp	r3, #16
 801069e:	d109      	bne.n	80106b4 <HAL_TIM_PWM_Start+0x8c>
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80106a6:	b2db      	uxtb	r3, r3
 80106a8:	2b01      	cmp	r3, #1
 80106aa:	bf14      	ite	ne
 80106ac:	2301      	movne	r3, #1
 80106ae:	2300      	moveq	r3, #0
 80106b0:	b2db      	uxtb	r3, r3
 80106b2:	e008      	b.n	80106c6 <HAL_TIM_PWM_Start+0x9e>
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80106ba:	b2db      	uxtb	r3, r3
 80106bc:	2b01      	cmp	r3, #1
 80106be:	bf14      	ite	ne
 80106c0:	2301      	movne	r3, #1
 80106c2:	2300      	moveq	r3, #0
 80106c4:	b2db      	uxtb	r3, r3
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d001      	beq.n	80106ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80106ca:	2301      	movs	r3, #1
 80106cc:	e0ab      	b.n	8010826 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80106ce:	683b      	ldr	r3, [r7, #0]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d104      	bne.n	80106de <HAL_TIM_PWM_Start+0xb6>
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	2202      	movs	r2, #2
 80106d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80106dc:	e023      	b.n	8010726 <HAL_TIM_PWM_Start+0xfe>
 80106de:	683b      	ldr	r3, [r7, #0]
 80106e0:	2b04      	cmp	r3, #4
 80106e2:	d104      	bne.n	80106ee <HAL_TIM_PWM_Start+0xc6>
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2202      	movs	r2, #2
 80106e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80106ec:	e01b      	b.n	8010726 <HAL_TIM_PWM_Start+0xfe>
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	2b08      	cmp	r3, #8
 80106f2:	d104      	bne.n	80106fe <HAL_TIM_PWM_Start+0xd6>
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	2202      	movs	r2, #2
 80106f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80106fc:	e013      	b.n	8010726 <HAL_TIM_PWM_Start+0xfe>
 80106fe:	683b      	ldr	r3, [r7, #0]
 8010700:	2b0c      	cmp	r3, #12
 8010702:	d104      	bne.n	801070e <HAL_TIM_PWM_Start+0xe6>
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	2202      	movs	r2, #2
 8010708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801070c:	e00b      	b.n	8010726 <HAL_TIM_PWM_Start+0xfe>
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	2b10      	cmp	r3, #16
 8010712:	d104      	bne.n	801071e <HAL_TIM_PWM_Start+0xf6>
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	2202      	movs	r2, #2
 8010718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801071c:	e003      	b.n	8010726 <HAL_TIM_PWM_Start+0xfe>
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	2202      	movs	r2, #2
 8010722:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	2201      	movs	r2, #1
 801072c:	6839      	ldr	r1, [r7, #0]
 801072e:	4618      	mov	r0, r3
 8010730:	f001 f992 	bl	8011a58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	4a3d      	ldr	r2, [pc, #244]	; (8010830 <HAL_TIM_PWM_Start+0x208>)
 801073a:	4293      	cmp	r3, r2
 801073c:	d013      	beq.n	8010766 <HAL_TIM_PWM_Start+0x13e>
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	4a3c      	ldr	r2, [pc, #240]	; (8010834 <HAL_TIM_PWM_Start+0x20c>)
 8010744:	4293      	cmp	r3, r2
 8010746:	d00e      	beq.n	8010766 <HAL_TIM_PWM_Start+0x13e>
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	4a3a      	ldr	r2, [pc, #232]	; (8010838 <HAL_TIM_PWM_Start+0x210>)
 801074e:	4293      	cmp	r3, r2
 8010750:	d009      	beq.n	8010766 <HAL_TIM_PWM_Start+0x13e>
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	4a39      	ldr	r2, [pc, #228]	; (801083c <HAL_TIM_PWM_Start+0x214>)
 8010758:	4293      	cmp	r3, r2
 801075a:	d004      	beq.n	8010766 <HAL_TIM_PWM_Start+0x13e>
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	4a37      	ldr	r2, [pc, #220]	; (8010840 <HAL_TIM_PWM_Start+0x218>)
 8010762:	4293      	cmp	r3, r2
 8010764:	d101      	bne.n	801076a <HAL_TIM_PWM_Start+0x142>
 8010766:	2301      	movs	r3, #1
 8010768:	e000      	b.n	801076c <HAL_TIM_PWM_Start+0x144>
 801076a:	2300      	movs	r3, #0
 801076c:	2b00      	cmp	r3, #0
 801076e:	d007      	beq.n	8010780 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801077e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	4a2a      	ldr	r2, [pc, #168]	; (8010830 <HAL_TIM_PWM_Start+0x208>)
 8010786:	4293      	cmp	r3, r2
 8010788:	d02c      	beq.n	80107e4 <HAL_TIM_PWM_Start+0x1bc>
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010792:	d027      	beq.n	80107e4 <HAL_TIM_PWM_Start+0x1bc>
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	4a2a      	ldr	r2, [pc, #168]	; (8010844 <HAL_TIM_PWM_Start+0x21c>)
 801079a:	4293      	cmp	r3, r2
 801079c:	d022      	beq.n	80107e4 <HAL_TIM_PWM_Start+0x1bc>
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	4a29      	ldr	r2, [pc, #164]	; (8010848 <HAL_TIM_PWM_Start+0x220>)
 80107a4:	4293      	cmp	r3, r2
 80107a6:	d01d      	beq.n	80107e4 <HAL_TIM_PWM_Start+0x1bc>
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	4a27      	ldr	r2, [pc, #156]	; (801084c <HAL_TIM_PWM_Start+0x224>)
 80107ae:	4293      	cmp	r3, r2
 80107b0:	d018      	beq.n	80107e4 <HAL_TIM_PWM_Start+0x1bc>
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	4a1f      	ldr	r2, [pc, #124]	; (8010834 <HAL_TIM_PWM_Start+0x20c>)
 80107b8:	4293      	cmp	r3, r2
 80107ba:	d013      	beq.n	80107e4 <HAL_TIM_PWM_Start+0x1bc>
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	4a23      	ldr	r2, [pc, #140]	; (8010850 <HAL_TIM_PWM_Start+0x228>)
 80107c2:	4293      	cmp	r3, r2
 80107c4:	d00e      	beq.n	80107e4 <HAL_TIM_PWM_Start+0x1bc>
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	4a1b      	ldr	r2, [pc, #108]	; (8010838 <HAL_TIM_PWM_Start+0x210>)
 80107cc:	4293      	cmp	r3, r2
 80107ce:	d009      	beq.n	80107e4 <HAL_TIM_PWM_Start+0x1bc>
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	4a1f      	ldr	r2, [pc, #124]	; (8010854 <HAL_TIM_PWM_Start+0x22c>)
 80107d6:	4293      	cmp	r3, r2
 80107d8:	d004      	beq.n	80107e4 <HAL_TIM_PWM_Start+0x1bc>
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	4a1e      	ldr	r2, [pc, #120]	; (8010858 <HAL_TIM_PWM_Start+0x230>)
 80107e0:	4293      	cmp	r3, r2
 80107e2:	d115      	bne.n	8010810 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	689a      	ldr	r2, [r3, #8]
 80107ea:	4b1c      	ldr	r3, [pc, #112]	; (801085c <HAL_TIM_PWM_Start+0x234>)
 80107ec:	4013      	ands	r3, r2
 80107ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	2b06      	cmp	r3, #6
 80107f4:	d015      	beq.n	8010822 <HAL_TIM_PWM_Start+0x1fa>
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80107fc:	d011      	beq.n	8010822 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	681a      	ldr	r2, [r3, #0]
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	f042 0201 	orr.w	r2, r2, #1
 801080c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801080e:	e008      	b.n	8010822 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	681a      	ldr	r2, [r3, #0]
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	f042 0201 	orr.w	r2, r2, #1
 801081e:	601a      	str	r2, [r3, #0]
 8010820:	e000      	b.n	8010824 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010822:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010824:	2300      	movs	r3, #0
}
 8010826:	4618      	mov	r0, r3
 8010828:	3710      	adds	r7, #16
 801082a:	46bd      	mov	sp, r7
 801082c:	bd80      	pop	{r7, pc}
 801082e:	bf00      	nop
 8010830:	40010000 	.word	0x40010000
 8010834:	40010400 	.word	0x40010400
 8010838:	40014000 	.word	0x40014000
 801083c:	40014400 	.word	0x40014400
 8010840:	40014800 	.word	0x40014800
 8010844:	40000400 	.word	0x40000400
 8010848:	40000800 	.word	0x40000800
 801084c:	40000c00 	.word	0x40000c00
 8010850:	40001800 	.word	0x40001800
 8010854:	4000e000 	.word	0x4000e000
 8010858:	4000e400 	.word	0x4000e400
 801085c:	00010007 	.word	0x00010007

08010860 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b086      	sub	sp, #24
 8010864:	af00      	add	r7, sp, #0
 8010866:	60f8      	str	r0, [r7, #12]
 8010868:	60b9      	str	r1, [r7, #8]
 801086a:	607a      	str	r2, [r7, #4]
 801086c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 801086e:	2300      	movs	r3, #0
 8010870:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8010872:	68bb      	ldr	r3, [r7, #8]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d109      	bne.n	801088c <HAL_TIM_PWM_Start_DMA+0x2c>
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801087e:	b2db      	uxtb	r3, r3
 8010880:	2b02      	cmp	r3, #2
 8010882:	bf0c      	ite	eq
 8010884:	2301      	moveq	r3, #1
 8010886:	2300      	movne	r3, #0
 8010888:	b2db      	uxtb	r3, r3
 801088a:	e03c      	b.n	8010906 <HAL_TIM_PWM_Start_DMA+0xa6>
 801088c:	68bb      	ldr	r3, [r7, #8]
 801088e:	2b04      	cmp	r3, #4
 8010890:	d109      	bne.n	80108a6 <HAL_TIM_PWM_Start_DMA+0x46>
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010898:	b2db      	uxtb	r3, r3
 801089a:	2b02      	cmp	r3, #2
 801089c:	bf0c      	ite	eq
 801089e:	2301      	moveq	r3, #1
 80108a0:	2300      	movne	r3, #0
 80108a2:	b2db      	uxtb	r3, r3
 80108a4:	e02f      	b.n	8010906 <HAL_TIM_PWM_Start_DMA+0xa6>
 80108a6:	68bb      	ldr	r3, [r7, #8]
 80108a8:	2b08      	cmp	r3, #8
 80108aa:	d109      	bne.n	80108c0 <HAL_TIM_PWM_Start_DMA+0x60>
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80108b2:	b2db      	uxtb	r3, r3
 80108b4:	2b02      	cmp	r3, #2
 80108b6:	bf0c      	ite	eq
 80108b8:	2301      	moveq	r3, #1
 80108ba:	2300      	movne	r3, #0
 80108bc:	b2db      	uxtb	r3, r3
 80108be:	e022      	b.n	8010906 <HAL_TIM_PWM_Start_DMA+0xa6>
 80108c0:	68bb      	ldr	r3, [r7, #8]
 80108c2:	2b0c      	cmp	r3, #12
 80108c4:	d109      	bne.n	80108da <HAL_TIM_PWM_Start_DMA+0x7a>
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80108cc:	b2db      	uxtb	r3, r3
 80108ce:	2b02      	cmp	r3, #2
 80108d0:	bf0c      	ite	eq
 80108d2:	2301      	moveq	r3, #1
 80108d4:	2300      	movne	r3, #0
 80108d6:	b2db      	uxtb	r3, r3
 80108d8:	e015      	b.n	8010906 <HAL_TIM_PWM_Start_DMA+0xa6>
 80108da:	68bb      	ldr	r3, [r7, #8]
 80108dc:	2b10      	cmp	r3, #16
 80108de:	d109      	bne.n	80108f4 <HAL_TIM_PWM_Start_DMA+0x94>
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80108e6:	b2db      	uxtb	r3, r3
 80108e8:	2b02      	cmp	r3, #2
 80108ea:	bf0c      	ite	eq
 80108ec:	2301      	moveq	r3, #1
 80108ee:	2300      	movne	r3, #0
 80108f0:	b2db      	uxtb	r3, r3
 80108f2:	e008      	b.n	8010906 <HAL_TIM_PWM_Start_DMA+0xa6>
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80108fa:	b2db      	uxtb	r3, r3
 80108fc:	2b02      	cmp	r3, #2
 80108fe:	bf0c      	ite	eq
 8010900:	2301      	moveq	r3, #1
 8010902:	2300      	movne	r3, #0
 8010904:	b2db      	uxtb	r3, r3
 8010906:	2b00      	cmp	r3, #0
 8010908:	d001      	beq.n	801090e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 801090a:	2302      	movs	r3, #2
 801090c:	e1ba      	b.n	8010c84 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 801090e:	68bb      	ldr	r3, [r7, #8]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d109      	bne.n	8010928 <HAL_TIM_PWM_Start_DMA+0xc8>
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801091a:	b2db      	uxtb	r3, r3
 801091c:	2b01      	cmp	r3, #1
 801091e:	bf0c      	ite	eq
 8010920:	2301      	moveq	r3, #1
 8010922:	2300      	movne	r3, #0
 8010924:	b2db      	uxtb	r3, r3
 8010926:	e03c      	b.n	80109a2 <HAL_TIM_PWM_Start_DMA+0x142>
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	2b04      	cmp	r3, #4
 801092c:	d109      	bne.n	8010942 <HAL_TIM_PWM_Start_DMA+0xe2>
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010934:	b2db      	uxtb	r3, r3
 8010936:	2b01      	cmp	r3, #1
 8010938:	bf0c      	ite	eq
 801093a:	2301      	moveq	r3, #1
 801093c:	2300      	movne	r3, #0
 801093e:	b2db      	uxtb	r3, r3
 8010940:	e02f      	b.n	80109a2 <HAL_TIM_PWM_Start_DMA+0x142>
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	2b08      	cmp	r3, #8
 8010946:	d109      	bne.n	801095c <HAL_TIM_PWM_Start_DMA+0xfc>
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801094e:	b2db      	uxtb	r3, r3
 8010950:	2b01      	cmp	r3, #1
 8010952:	bf0c      	ite	eq
 8010954:	2301      	moveq	r3, #1
 8010956:	2300      	movne	r3, #0
 8010958:	b2db      	uxtb	r3, r3
 801095a:	e022      	b.n	80109a2 <HAL_TIM_PWM_Start_DMA+0x142>
 801095c:	68bb      	ldr	r3, [r7, #8]
 801095e:	2b0c      	cmp	r3, #12
 8010960:	d109      	bne.n	8010976 <HAL_TIM_PWM_Start_DMA+0x116>
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010968:	b2db      	uxtb	r3, r3
 801096a:	2b01      	cmp	r3, #1
 801096c:	bf0c      	ite	eq
 801096e:	2301      	moveq	r3, #1
 8010970:	2300      	movne	r3, #0
 8010972:	b2db      	uxtb	r3, r3
 8010974:	e015      	b.n	80109a2 <HAL_TIM_PWM_Start_DMA+0x142>
 8010976:	68bb      	ldr	r3, [r7, #8]
 8010978:	2b10      	cmp	r3, #16
 801097a:	d109      	bne.n	8010990 <HAL_TIM_PWM_Start_DMA+0x130>
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010982:	b2db      	uxtb	r3, r3
 8010984:	2b01      	cmp	r3, #1
 8010986:	bf0c      	ite	eq
 8010988:	2301      	moveq	r3, #1
 801098a:	2300      	movne	r3, #0
 801098c:	b2db      	uxtb	r3, r3
 801098e:	e008      	b.n	80109a2 <HAL_TIM_PWM_Start_DMA+0x142>
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010996:	b2db      	uxtb	r3, r3
 8010998:	2b01      	cmp	r3, #1
 801099a:	bf0c      	ite	eq
 801099c:	2301      	moveq	r3, #1
 801099e:	2300      	movne	r3, #0
 80109a0:	b2db      	uxtb	r3, r3
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d034      	beq.n	8010a10 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d002      	beq.n	80109b2 <HAL_TIM_PWM_Start_DMA+0x152>
 80109ac:	887b      	ldrh	r3, [r7, #2]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d101      	bne.n	80109b6 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80109b2:	2301      	movs	r3, #1
 80109b4:	e166      	b.n	8010c84 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80109b6:	68bb      	ldr	r3, [r7, #8]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d104      	bne.n	80109c6 <HAL_TIM_PWM_Start_DMA+0x166>
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	2202      	movs	r2, #2
 80109c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80109c4:	e026      	b.n	8010a14 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80109c6:	68bb      	ldr	r3, [r7, #8]
 80109c8:	2b04      	cmp	r3, #4
 80109ca:	d104      	bne.n	80109d6 <HAL_TIM_PWM_Start_DMA+0x176>
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	2202      	movs	r2, #2
 80109d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80109d4:	e01e      	b.n	8010a14 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80109d6:	68bb      	ldr	r3, [r7, #8]
 80109d8:	2b08      	cmp	r3, #8
 80109da:	d104      	bne.n	80109e6 <HAL_TIM_PWM_Start_DMA+0x186>
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	2202      	movs	r2, #2
 80109e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80109e4:	e016      	b.n	8010a14 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80109e6:	68bb      	ldr	r3, [r7, #8]
 80109e8:	2b0c      	cmp	r3, #12
 80109ea:	d104      	bne.n	80109f6 <HAL_TIM_PWM_Start_DMA+0x196>
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	2202      	movs	r2, #2
 80109f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80109f4:	e00e      	b.n	8010a14 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80109f6:	68bb      	ldr	r3, [r7, #8]
 80109f8:	2b10      	cmp	r3, #16
 80109fa:	d104      	bne.n	8010a06 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	2202      	movs	r2, #2
 8010a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010a04:	e006      	b.n	8010a14 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	2202      	movs	r2, #2
 8010a0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010a0e:	e001      	b.n	8010a14 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8010a10:	2301      	movs	r3, #1
 8010a12:	e137      	b.n	8010c84 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 8010a14:	68bb      	ldr	r3, [r7, #8]
 8010a16:	2b0c      	cmp	r3, #12
 8010a18:	f200 80ae 	bhi.w	8010b78 <HAL_TIM_PWM_Start_DMA+0x318>
 8010a1c:	a201      	add	r2, pc, #4	; (adr r2, 8010a24 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8010a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a22:	bf00      	nop
 8010a24:	08010a59 	.word	0x08010a59
 8010a28:	08010b79 	.word	0x08010b79
 8010a2c:	08010b79 	.word	0x08010b79
 8010a30:	08010b79 	.word	0x08010b79
 8010a34:	08010aa1 	.word	0x08010aa1
 8010a38:	08010b79 	.word	0x08010b79
 8010a3c:	08010b79 	.word	0x08010b79
 8010a40:	08010b79 	.word	0x08010b79
 8010a44:	08010ae9 	.word	0x08010ae9
 8010a48:	08010b79 	.word	0x08010b79
 8010a4c:	08010b79 	.word	0x08010b79
 8010a50:	08010b79 	.word	0x08010b79
 8010a54:	08010b31 	.word	0x08010b31
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a5c:	4a8b      	ldr	r2, [pc, #556]	; (8010c8c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010a5e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a64:	4a8a      	ldr	r2, [pc, #552]	; (8010c90 <HAL_TIM_PWM_Start_DMA+0x430>)
 8010a66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a6c:	4a89      	ldr	r2, [pc, #548]	; (8010c94 <HAL_TIM_PWM_Start_DMA+0x434>)
 8010a6e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010a74:	6879      	ldr	r1, [r7, #4]
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	3334      	adds	r3, #52	; 0x34
 8010a7c:	461a      	mov	r2, r3
 8010a7e:	887b      	ldrh	r3, [r7, #2]
 8010a80:	f7f6 f872 	bl	8006b68 <HAL_DMA_Start_IT>
 8010a84:	4603      	mov	r3, r0
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d001      	beq.n	8010a8e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010a8a:	2301      	movs	r3, #1
 8010a8c:	e0fa      	b.n	8010c84 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	68da      	ldr	r2, [r3, #12]
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010a9c:	60da      	str	r2, [r3, #12]
      break;
 8010a9e:	e06e      	b.n	8010b7e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010aa4:	4a79      	ldr	r2, [pc, #484]	; (8010c8c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010aa6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010aac:	4a78      	ldr	r2, [pc, #480]	; (8010c90 <HAL_TIM_PWM_Start_DMA+0x430>)
 8010aae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ab4:	4a77      	ldr	r2, [pc, #476]	; (8010c94 <HAL_TIM_PWM_Start_DMA+0x434>)
 8010ab6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010abc:	6879      	ldr	r1, [r7, #4]
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	3338      	adds	r3, #56	; 0x38
 8010ac4:	461a      	mov	r2, r3
 8010ac6:	887b      	ldrh	r3, [r7, #2]
 8010ac8:	f7f6 f84e 	bl	8006b68 <HAL_DMA_Start_IT>
 8010acc:	4603      	mov	r3, r0
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d001      	beq.n	8010ad6 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	e0d6      	b.n	8010c84 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	68da      	ldr	r2, [r3, #12]
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010ae4:	60da      	str	r2, [r3, #12]
      break;
 8010ae6:	e04a      	b.n	8010b7e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010aec:	4a67      	ldr	r2, [pc, #412]	; (8010c8c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010aee:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010af4:	4a66      	ldr	r2, [pc, #408]	; (8010c90 <HAL_TIM_PWM_Start_DMA+0x430>)
 8010af6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010afc:	4a65      	ldr	r2, [pc, #404]	; (8010c94 <HAL_TIM_PWM_Start_DMA+0x434>)
 8010afe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010b04:	6879      	ldr	r1, [r7, #4]
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	333c      	adds	r3, #60	; 0x3c
 8010b0c:	461a      	mov	r2, r3
 8010b0e:	887b      	ldrh	r3, [r7, #2]
 8010b10:	f7f6 f82a 	bl	8006b68 <HAL_DMA_Start_IT>
 8010b14:	4603      	mov	r3, r0
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d001      	beq.n	8010b1e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010b1a:	2301      	movs	r3, #1
 8010b1c:	e0b2      	b.n	8010c84 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	68da      	ldr	r2, [r3, #12]
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010b2c:	60da      	str	r2, [r3, #12]
      break;
 8010b2e:	e026      	b.n	8010b7e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b34:	4a55      	ldr	r2, [pc, #340]	; (8010c8c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010b36:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b3c:	4a54      	ldr	r2, [pc, #336]	; (8010c90 <HAL_TIM_PWM_Start_DMA+0x430>)
 8010b3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b44:	4a53      	ldr	r2, [pc, #332]	; (8010c94 <HAL_TIM_PWM_Start_DMA+0x434>)
 8010b46:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010b4c:	6879      	ldr	r1, [r7, #4]
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	3340      	adds	r3, #64	; 0x40
 8010b54:	461a      	mov	r2, r3
 8010b56:	887b      	ldrh	r3, [r7, #2]
 8010b58:	f7f6 f806 	bl	8006b68 <HAL_DMA_Start_IT>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d001      	beq.n	8010b66 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010b62:	2301      	movs	r3, #1
 8010b64:	e08e      	b.n	8010c84 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	68da      	ldr	r2, [r3, #12]
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010b74:	60da      	str	r2, [r3, #12]
      break;
 8010b76:	e002      	b.n	8010b7e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8010b78:	2301      	movs	r3, #1
 8010b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8010b7c:	bf00      	nop
  }

  if (status == HAL_OK)
 8010b7e:	7dfb      	ldrb	r3, [r7, #23]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d17e      	bne.n	8010c82 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	2201      	movs	r2, #1
 8010b8a:	68b9      	ldr	r1, [r7, #8]
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	f000 ff63 	bl	8011a58 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	4a40      	ldr	r2, [pc, #256]	; (8010c98 <HAL_TIM_PWM_Start_DMA+0x438>)
 8010b98:	4293      	cmp	r3, r2
 8010b9a:	d013      	beq.n	8010bc4 <HAL_TIM_PWM_Start_DMA+0x364>
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	4a3e      	ldr	r2, [pc, #248]	; (8010c9c <HAL_TIM_PWM_Start_DMA+0x43c>)
 8010ba2:	4293      	cmp	r3, r2
 8010ba4:	d00e      	beq.n	8010bc4 <HAL_TIM_PWM_Start_DMA+0x364>
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	4a3d      	ldr	r2, [pc, #244]	; (8010ca0 <HAL_TIM_PWM_Start_DMA+0x440>)
 8010bac:	4293      	cmp	r3, r2
 8010bae:	d009      	beq.n	8010bc4 <HAL_TIM_PWM_Start_DMA+0x364>
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	4a3b      	ldr	r2, [pc, #236]	; (8010ca4 <HAL_TIM_PWM_Start_DMA+0x444>)
 8010bb6:	4293      	cmp	r3, r2
 8010bb8:	d004      	beq.n	8010bc4 <HAL_TIM_PWM_Start_DMA+0x364>
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	4a3a      	ldr	r2, [pc, #232]	; (8010ca8 <HAL_TIM_PWM_Start_DMA+0x448>)
 8010bc0:	4293      	cmp	r3, r2
 8010bc2:	d101      	bne.n	8010bc8 <HAL_TIM_PWM_Start_DMA+0x368>
 8010bc4:	2301      	movs	r3, #1
 8010bc6:	e000      	b.n	8010bca <HAL_TIM_PWM_Start_DMA+0x36a>
 8010bc8:	2300      	movs	r3, #0
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d007      	beq.n	8010bde <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010bdc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	4a2d      	ldr	r2, [pc, #180]	; (8010c98 <HAL_TIM_PWM_Start_DMA+0x438>)
 8010be4:	4293      	cmp	r3, r2
 8010be6:	d02c      	beq.n	8010c42 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010bf0:	d027      	beq.n	8010c42 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	4a2d      	ldr	r2, [pc, #180]	; (8010cac <HAL_TIM_PWM_Start_DMA+0x44c>)
 8010bf8:	4293      	cmp	r3, r2
 8010bfa:	d022      	beq.n	8010c42 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	4a2b      	ldr	r2, [pc, #172]	; (8010cb0 <HAL_TIM_PWM_Start_DMA+0x450>)
 8010c02:	4293      	cmp	r3, r2
 8010c04:	d01d      	beq.n	8010c42 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	4a2a      	ldr	r2, [pc, #168]	; (8010cb4 <HAL_TIM_PWM_Start_DMA+0x454>)
 8010c0c:	4293      	cmp	r3, r2
 8010c0e:	d018      	beq.n	8010c42 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	4a21      	ldr	r2, [pc, #132]	; (8010c9c <HAL_TIM_PWM_Start_DMA+0x43c>)
 8010c16:	4293      	cmp	r3, r2
 8010c18:	d013      	beq.n	8010c42 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	4a26      	ldr	r2, [pc, #152]	; (8010cb8 <HAL_TIM_PWM_Start_DMA+0x458>)
 8010c20:	4293      	cmp	r3, r2
 8010c22:	d00e      	beq.n	8010c42 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	4a1d      	ldr	r2, [pc, #116]	; (8010ca0 <HAL_TIM_PWM_Start_DMA+0x440>)
 8010c2a:	4293      	cmp	r3, r2
 8010c2c:	d009      	beq.n	8010c42 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	4a22      	ldr	r2, [pc, #136]	; (8010cbc <HAL_TIM_PWM_Start_DMA+0x45c>)
 8010c34:	4293      	cmp	r3, r2
 8010c36:	d004      	beq.n	8010c42 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	4a20      	ldr	r2, [pc, #128]	; (8010cc0 <HAL_TIM_PWM_Start_DMA+0x460>)
 8010c3e:	4293      	cmp	r3, r2
 8010c40:	d115      	bne.n	8010c6e <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	689a      	ldr	r2, [r3, #8]
 8010c48:	4b1e      	ldr	r3, [pc, #120]	; (8010cc4 <HAL_TIM_PWM_Start_DMA+0x464>)
 8010c4a:	4013      	ands	r3, r2
 8010c4c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c4e:	693b      	ldr	r3, [r7, #16]
 8010c50:	2b06      	cmp	r3, #6
 8010c52:	d015      	beq.n	8010c80 <HAL_TIM_PWM_Start_DMA+0x420>
 8010c54:	693b      	ldr	r3, [r7, #16]
 8010c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c5a:	d011      	beq.n	8010c80 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	681a      	ldr	r2, [r3, #0]
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	f042 0201 	orr.w	r2, r2, #1
 8010c6a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c6c:	e008      	b.n	8010c80 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	681a      	ldr	r2, [r3, #0]
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	f042 0201 	orr.w	r2, r2, #1
 8010c7c:	601a      	str	r2, [r3, #0]
 8010c7e:	e000      	b.n	8010c82 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c80:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8010c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c84:	4618      	mov	r0, r3
 8010c86:	3718      	adds	r7, #24
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd80      	pop	{r7, pc}
 8010c8c:	0801124f 	.word	0x0801124f
 8010c90:	080112f7 	.word	0x080112f7
 8010c94:	080111bd 	.word	0x080111bd
 8010c98:	40010000 	.word	0x40010000
 8010c9c:	40010400 	.word	0x40010400
 8010ca0:	40014000 	.word	0x40014000
 8010ca4:	40014400 	.word	0x40014400
 8010ca8:	40014800 	.word	0x40014800
 8010cac:	40000400 	.word	0x40000400
 8010cb0:	40000800 	.word	0x40000800
 8010cb4:	40000c00 	.word	0x40000c00
 8010cb8:	40001800 	.word	0x40001800
 8010cbc:	4000e000 	.word	0x4000e000
 8010cc0:	4000e400 	.word	0x4000e400
 8010cc4:	00010007 	.word	0x00010007

08010cc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b082      	sub	sp, #8
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	691b      	ldr	r3, [r3, #16]
 8010cd6:	f003 0302 	and.w	r3, r3, #2
 8010cda:	2b02      	cmp	r3, #2
 8010cdc:	d122      	bne.n	8010d24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	68db      	ldr	r3, [r3, #12]
 8010ce4:	f003 0302 	and.w	r3, r3, #2
 8010ce8:	2b02      	cmp	r3, #2
 8010cea:	d11b      	bne.n	8010d24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	f06f 0202 	mvn.w	r2, #2
 8010cf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	2201      	movs	r2, #1
 8010cfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	699b      	ldr	r3, [r3, #24]
 8010d02:	f003 0303 	and.w	r3, r3, #3
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d003      	beq.n	8010d12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010d0a:	6878      	ldr	r0, [r7, #4]
 8010d0c:	f000 fa24 	bl	8011158 <HAL_TIM_IC_CaptureCallback>
 8010d10:	e005      	b.n	8010d1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010d12:	6878      	ldr	r0, [r7, #4]
 8010d14:	f000 fa16 	bl	8011144 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f000 fa27 	bl	801116c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	2200      	movs	r2, #0
 8010d22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	691b      	ldr	r3, [r3, #16]
 8010d2a:	f003 0304 	and.w	r3, r3, #4
 8010d2e:	2b04      	cmp	r3, #4
 8010d30:	d122      	bne.n	8010d78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	68db      	ldr	r3, [r3, #12]
 8010d38:	f003 0304 	and.w	r3, r3, #4
 8010d3c:	2b04      	cmp	r3, #4
 8010d3e:	d11b      	bne.n	8010d78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	f06f 0204 	mvn.w	r2, #4
 8010d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	2202      	movs	r2, #2
 8010d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	699b      	ldr	r3, [r3, #24]
 8010d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d003      	beq.n	8010d66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	f000 f9fa 	bl	8011158 <HAL_TIM_IC_CaptureCallback>
 8010d64:	e005      	b.n	8010d72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010d66:	6878      	ldr	r0, [r7, #4]
 8010d68:	f000 f9ec 	bl	8011144 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010d6c:	6878      	ldr	r0, [r7, #4]
 8010d6e:	f000 f9fd 	bl	801116c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	2200      	movs	r2, #0
 8010d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	691b      	ldr	r3, [r3, #16]
 8010d7e:	f003 0308 	and.w	r3, r3, #8
 8010d82:	2b08      	cmp	r3, #8
 8010d84:	d122      	bne.n	8010dcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	68db      	ldr	r3, [r3, #12]
 8010d8c:	f003 0308 	and.w	r3, r3, #8
 8010d90:	2b08      	cmp	r3, #8
 8010d92:	d11b      	bne.n	8010dcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	f06f 0208 	mvn.w	r2, #8
 8010d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	2204      	movs	r2, #4
 8010da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	69db      	ldr	r3, [r3, #28]
 8010daa:	f003 0303 	and.w	r3, r3, #3
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d003      	beq.n	8010dba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010db2:	6878      	ldr	r0, [r7, #4]
 8010db4:	f000 f9d0 	bl	8011158 <HAL_TIM_IC_CaptureCallback>
 8010db8:	e005      	b.n	8010dc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010dba:	6878      	ldr	r0, [r7, #4]
 8010dbc:	f000 f9c2 	bl	8011144 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010dc0:	6878      	ldr	r0, [r7, #4]
 8010dc2:	f000 f9d3 	bl	801116c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	2200      	movs	r2, #0
 8010dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	691b      	ldr	r3, [r3, #16]
 8010dd2:	f003 0310 	and.w	r3, r3, #16
 8010dd6:	2b10      	cmp	r3, #16
 8010dd8:	d122      	bne.n	8010e20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	68db      	ldr	r3, [r3, #12]
 8010de0:	f003 0310 	and.w	r3, r3, #16
 8010de4:	2b10      	cmp	r3, #16
 8010de6:	d11b      	bne.n	8010e20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	f06f 0210 	mvn.w	r2, #16
 8010df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	2208      	movs	r2, #8
 8010df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	69db      	ldr	r3, [r3, #28]
 8010dfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d003      	beq.n	8010e0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010e06:	6878      	ldr	r0, [r7, #4]
 8010e08:	f000 f9a6 	bl	8011158 <HAL_TIM_IC_CaptureCallback>
 8010e0c:	e005      	b.n	8010e1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	f000 f998 	bl	8011144 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010e14:	6878      	ldr	r0, [r7, #4]
 8010e16:	f000 f9a9 	bl	801116c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	2200      	movs	r2, #0
 8010e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	691b      	ldr	r3, [r3, #16]
 8010e26:	f003 0301 	and.w	r3, r3, #1
 8010e2a:	2b01      	cmp	r3, #1
 8010e2c:	d10e      	bne.n	8010e4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	68db      	ldr	r3, [r3, #12]
 8010e34:	f003 0301 	and.w	r3, r3, #1
 8010e38:	2b01      	cmp	r3, #1
 8010e3a:	d107      	bne.n	8010e4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	f06f 0201 	mvn.w	r2, #1
 8010e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010e46:	6878      	ldr	r0, [r7, #4]
 8010e48:	f000 f972 	bl	8011130 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	691b      	ldr	r3, [r3, #16]
 8010e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e56:	2b80      	cmp	r3, #128	; 0x80
 8010e58:	d10e      	bne.n	8010e78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	68db      	ldr	r3, [r3, #12]
 8010e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e64:	2b80      	cmp	r3, #128	; 0x80
 8010e66:	d107      	bne.n	8010e78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010e72:	6878      	ldr	r0, [r7, #4]
 8010e74:	f000 febc 	bl	8011bf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	691b      	ldr	r3, [r3, #16]
 8010e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010e86:	d10e      	bne.n	8010ea6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	68db      	ldr	r3, [r3, #12]
 8010e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e92:	2b80      	cmp	r3, #128	; 0x80
 8010e94:	d107      	bne.n	8010ea6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010e9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010ea0:	6878      	ldr	r0, [r7, #4]
 8010ea2:	f000 feaf 	bl	8011c04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	691b      	ldr	r3, [r3, #16]
 8010eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010eb0:	2b40      	cmp	r3, #64	; 0x40
 8010eb2:	d10e      	bne.n	8010ed2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	68db      	ldr	r3, [r3, #12]
 8010eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ebe:	2b40      	cmp	r3, #64	; 0x40
 8010ec0:	d107      	bne.n	8010ed2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010eca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010ecc:	6878      	ldr	r0, [r7, #4]
 8010ece:	f000 f961 	bl	8011194 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	691b      	ldr	r3, [r3, #16]
 8010ed8:	f003 0320 	and.w	r3, r3, #32
 8010edc:	2b20      	cmp	r3, #32
 8010ede:	d10e      	bne.n	8010efe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	68db      	ldr	r3, [r3, #12]
 8010ee6:	f003 0320 	and.w	r3, r3, #32
 8010eea:	2b20      	cmp	r3, #32
 8010eec:	d107      	bne.n	8010efe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	f06f 0220 	mvn.w	r2, #32
 8010ef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010ef8:	6878      	ldr	r0, [r7, #4]
 8010efa:	f000 fe6f 	bl	8011bdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010efe:	bf00      	nop
 8010f00:	3708      	adds	r7, #8
 8010f02:	46bd      	mov	sp, r7
 8010f04:	bd80      	pop	{r7, pc}
	...

08010f08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b086      	sub	sp, #24
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	60f8      	str	r0, [r7, #12]
 8010f10:	60b9      	str	r1, [r7, #8]
 8010f12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010f14:	2300      	movs	r3, #0
 8010f16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010f1e:	2b01      	cmp	r3, #1
 8010f20:	d101      	bne.n	8010f26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8010f22:	2302      	movs	r3, #2
 8010f24:	e0ff      	b.n	8011126 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	2201      	movs	r2, #1
 8010f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	2b14      	cmp	r3, #20
 8010f32:	f200 80f0 	bhi.w	8011116 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8010f36:	a201      	add	r2, pc, #4	; (adr r2, 8010f3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f3c:	08010f91 	.word	0x08010f91
 8010f40:	08011117 	.word	0x08011117
 8010f44:	08011117 	.word	0x08011117
 8010f48:	08011117 	.word	0x08011117
 8010f4c:	08010fd1 	.word	0x08010fd1
 8010f50:	08011117 	.word	0x08011117
 8010f54:	08011117 	.word	0x08011117
 8010f58:	08011117 	.word	0x08011117
 8010f5c:	08011013 	.word	0x08011013
 8010f60:	08011117 	.word	0x08011117
 8010f64:	08011117 	.word	0x08011117
 8010f68:	08011117 	.word	0x08011117
 8010f6c:	08011053 	.word	0x08011053
 8010f70:	08011117 	.word	0x08011117
 8010f74:	08011117 	.word	0x08011117
 8010f78:	08011117 	.word	0x08011117
 8010f7c:	08011095 	.word	0x08011095
 8010f80:	08011117 	.word	0x08011117
 8010f84:	08011117 	.word	0x08011117
 8010f88:	08011117 	.word	0x08011117
 8010f8c:	080110d5 	.word	0x080110d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	68b9      	ldr	r1, [r7, #8]
 8010f96:	4618      	mov	r0, r3
 8010f98:	f000 fa88 	bl	80114ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	699a      	ldr	r2, [r3, #24]
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	f042 0208 	orr.w	r2, r2, #8
 8010faa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	699a      	ldr	r2, [r3, #24]
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	f022 0204 	bic.w	r2, r2, #4
 8010fba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	6999      	ldr	r1, [r3, #24]
 8010fc2:	68bb      	ldr	r3, [r7, #8]
 8010fc4:	691a      	ldr	r2, [r3, #16]
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	430a      	orrs	r2, r1
 8010fcc:	619a      	str	r2, [r3, #24]
      break;
 8010fce:	e0a5      	b.n	801111c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	68b9      	ldr	r1, [r7, #8]
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	f000 faf8 	bl	80115cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	699a      	ldr	r2, [r3, #24]
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010fea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	699a      	ldr	r2, [r3, #24]
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010ffa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	6999      	ldr	r1, [r3, #24]
 8011002:	68bb      	ldr	r3, [r7, #8]
 8011004:	691b      	ldr	r3, [r3, #16]
 8011006:	021a      	lsls	r2, r3, #8
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	430a      	orrs	r2, r1
 801100e:	619a      	str	r2, [r3, #24]
      break;
 8011010:	e084      	b.n	801111c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	68b9      	ldr	r1, [r7, #8]
 8011018:	4618      	mov	r0, r3
 801101a:	f000 fb61 	bl	80116e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	69da      	ldr	r2, [r3, #28]
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	f042 0208 	orr.w	r2, r2, #8
 801102c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	69da      	ldr	r2, [r3, #28]
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	f022 0204 	bic.w	r2, r2, #4
 801103c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	69d9      	ldr	r1, [r3, #28]
 8011044:	68bb      	ldr	r3, [r7, #8]
 8011046:	691a      	ldr	r2, [r3, #16]
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	430a      	orrs	r2, r1
 801104e:	61da      	str	r2, [r3, #28]
      break;
 8011050:	e064      	b.n	801111c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	68b9      	ldr	r1, [r7, #8]
 8011058:	4618      	mov	r0, r3
 801105a:	f000 fbc9 	bl	80117f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	69da      	ldr	r2, [r3, #28]
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801106c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	69da      	ldr	r2, [r3, #28]
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801107c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	69d9      	ldr	r1, [r3, #28]
 8011084:	68bb      	ldr	r3, [r7, #8]
 8011086:	691b      	ldr	r3, [r3, #16]
 8011088:	021a      	lsls	r2, r3, #8
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	430a      	orrs	r2, r1
 8011090:	61da      	str	r2, [r3, #28]
      break;
 8011092:	e043      	b.n	801111c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	68b9      	ldr	r1, [r7, #8]
 801109a:	4618      	mov	r0, r3
 801109c:	f000 fc12 	bl	80118c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	f042 0208 	orr.w	r2, r2, #8
 80110ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	f022 0204 	bic.w	r2, r2, #4
 80110be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80110c6:	68bb      	ldr	r3, [r7, #8]
 80110c8:	691a      	ldr	r2, [r3, #16]
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	430a      	orrs	r2, r1
 80110d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80110d2:	e023      	b.n	801111c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	68b9      	ldr	r1, [r7, #8]
 80110da:	4618      	mov	r0, r3
 80110dc:	f000 fc56 	bl	801198c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80110ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80110fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011106:	68bb      	ldr	r3, [r7, #8]
 8011108:	691b      	ldr	r3, [r3, #16]
 801110a:	021a      	lsls	r2, r3, #8
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	430a      	orrs	r2, r1
 8011112:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8011114:	e002      	b.n	801111c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8011116:	2301      	movs	r3, #1
 8011118:	75fb      	strb	r3, [r7, #23]
      break;
 801111a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	2200      	movs	r2, #0
 8011120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011124:	7dfb      	ldrb	r3, [r7, #23]
}
 8011126:	4618      	mov	r0, r3
 8011128:	3718      	adds	r7, #24
 801112a:	46bd      	mov	sp, r7
 801112c:	bd80      	pop	{r7, pc}
 801112e:	bf00      	nop

08011130 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011130:	b480      	push	{r7}
 8011132:	b083      	sub	sp, #12
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8011138:	bf00      	nop
 801113a:	370c      	adds	r7, #12
 801113c:	46bd      	mov	sp, r7
 801113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011142:	4770      	bx	lr

08011144 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011144:	b480      	push	{r7}
 8011146:	b083      	sub	sp, #12
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801114c:	bf00      	nop
 801114e:	370c      	adds	r7, #12
 8011150:	46bd      	mov	sp, r7
 8011152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011156:	4770      	bx	lr

08011158 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011158:	b480      	push	{r7}
 801115a:	b083      	sub	sp, #12
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011160:	bf00      	nop
 8011162:	370c      	adds	r7, #12
 8011164:	46bd      	mov	sp, r7
 8011166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116a:	4770      	bx	lr

0801116c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801116c:	b480      	push	{r7}
 801116e:	b083      	sub	sp, #12
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011174:	bf00      	nop
 8011176:	370c      	adds	r7, #12
 8011178:	46bd      	mov	sp, r7
 801117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117e:	4770      	bx	lr

08011180 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8011180:	b480      	push	{r7}
 8011182:	b083      	sub	sp, #12
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8011188:	bf00      	nop
 801118a:	370c      	adds	r7, #12
 801118c:	46bd      	mov	sp, r7
 801118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011192:	4770      	bx	lr

08011194 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011194:	b480      	push	{r7}
 8011196:	b083      	sub	sp, #12
 8011198:	af00      	add	r7, sp, #0
 801119a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801119c:	bf00      	nop
 801119e:	370c      	adds	r7, #12
 80111a0:	46bd      	mov	sp, r7
 80111a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a6:	4770      	bx	lr

080111a8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80111a8:	b480      	push	{r7}
 80111aa:	b083      	sub	sp, #12
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80111b0:	bf00      	nop
 80111b2:	370c      	adds	r7, #12
 80111b4:	46bd      	mov	sp, r7
 80111b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ba:	4770      	bx	lr

080111bc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	b084      	sub	sp, #16
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111c8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111ce:	687a      	ldr	r2, [r7, #4]
 80111d0:	429a      	cmp	r2, r3
 80111d2:	d107      	bne.n	80111e4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	2201      	movs	r2, #1
 80111d8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	2201      	movs	r2, #1
 80111de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80111e2:	e02a      	b.n	801123a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111e8:	687a      	ldr	r2, [r7, #4]
 80111ea:	429a      	cmp	r2, r3
 80111ec:	d107      	bne.n	80111fe <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	2202      	movs	r2, #2
 80111f2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	2201      	movs	r2, #1
 80111f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80111fc:	e01d      	b.n	801123a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011202:	687a      	ldr	r2, [r7, #4]
 8011204:	429a      	cmp	r2, r3
 8011206:	d107      	bne.n	8011218 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	2204      	movs	r2, #4
 801120c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	2201      	movs	r2, #1
 8011212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011216:	e010      	b.n	801123a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801121c:	687a      	ldr	r2, [r7, #4]
 801121e:	429a      	cmp	r2, r3
 8011220:	d107      	bne.n	8011232 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	2208      	movs	r2, #8
 8011226:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	2201      	movs	r2, #1
 801122c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011230:	e003      	b.n	801123a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	2201      	movs	r2, #1
 8011236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 801123a:	68f8      	ldr	r0, [r7, #12]
 801123c:	f7ff ffb4 	bl	80111a8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	2200      	movs	r2, #0
 8011244:	771a      	strb	r2, [r3, #28]
}
 8011246:	bf00      	nop
 8011248:	3710      	adds	r7, #16
 801124a:	46bd      	mov	sp, r7
 801124c:	bd80      	pop	{r7, pc}

0801124e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 801124e:	b580      	push	{r7, lr}
 8011250:	b084      	sub	sp, #16
 8011252:	af00      	add	r7, sp, #0
 8011254:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801125a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011260:	687a      	ldr	r2, [r7, #4]
 8011262:	429a      	cmp	r2, r3
 8011264:	d10b      	bne.n	801127e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	2201      	movs	r2, #1
 801126a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	69db      	ldr	r3, [r3, #28]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d136      	bne.n	80112e2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	2201      	movs	r2, #1
 8011278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801127c:	e031      	b.n	80112e2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011282:	687a      	ldr	r2, [r7, #4]
 8011284:	429a      	cmp	r2, r3
 8011286:	d10b      	bne.n	80112a0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	2202      	movs	r2, #2
 801128c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	69db      	ldr	r3, [r3, #28]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d125      	bne.n	80112e2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	2201      	movs	r2, #1
 801129a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801129e:	e020      	b.n	80112e2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112a4:	687a      	ldr	r2, [r7, #4]
 80112a6:	429a      	cmp	r2, r3
 80112a8:	d10b      	bne.n	80112c2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	2204      	movs	r2, #4
 80112ae:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	69db      	ldr	r3, [r3, #28]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d114      	bne.n	80112e2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	2201      	movs	r2, #1
 80112bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80112c0:	e00f      	b.n	80112e2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112c6:	687a      	ldr	r2, [r7, #4]
 80112c8:	429a      	cmp	r2, r3
 80112ca:	d10a      	bne.n	80112e2 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	2208      	movs	r2, #8
 80112d0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	69db      	ldr	r3, [r3, #28]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d103      	bne.n	80112e2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	2201      	movs	r2, #1
 80112de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80112e2:	68f8      	ldr	r0, [r7, #12]
 80112e4:	f7ff ff42 	bl	801116c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	2200      	movs	r2, #0
 80112ec:	771a      	strb	r2, [r3, #28]
}
 80112ee:	bf00      	nop
 80112f0:	3710      	adds	r7, #16
 80112f2:	46bd      	mov	sp, r7
 80112f4:	bd80      	pop	{r7, pc}

080112f6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80112f6:	b580      	push	{r7, lr}
 80112f8:	b084      	sub	sp, #16
 80112fa:	af00      	add	r7, sp, #0
 80112fc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011302:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011308:	687a      	ldr	r2, [r7, #4]
 801130a:	429a      	cmp	r2, r3
 801130c:	d103      	bne.n	8011316 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	2201      	movs	r2, #1
 8011312:	771a      	strb	r2, [r3, #28]
 8011314:	e019      	b.n	801134a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801131a:	687a      	ldr	r2, [r7, #4]
 801131c:	429a      	cmp	r2, r3
 801131e:	d103      	bne.n	8011328 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	2202      	movs	r2, #2
 8011324:	771a      	strb	r2, [r3, #28]
 8011326:	e010      	b.n	801134a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801132c:	687a      	ldr	r2, [r7, #4]
 801132e:	429a      	cmp	r2, r3
 8011330:	d103      	bne.n	801133a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	2204      	movs	r2, #4
 8011336:	771a      	strb	r2, [r3, #28]
 8011338:	e007      	b.n	801134a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801133e:	687a      	ldr	r2, [r7, #4]
 8011340:	429a      	cmp	r2, r3
 8011342:	d102      	bne.n	801134a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	2208      	movs	r2, #8
 8011348:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 801134a:	68f8      	ldr	r0, [r7, #12]
 801134c:	f7ff ff18 	bl	8011180 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	2200      	movs	r2, #0
 8011354:	771a      	strb	r2, [r3, #28]
}
 8011356:	bf00      	nop
 8011358:	3710      	adds	r7, #16
 801135a:	46bd      	mov	sp, r7
 801135c:	bd80      	pop	{r7, pc}
	...

08011360 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011360:	b480      	push	{r7}
 8011362:	b085      	sub	sp, #20
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
 8011368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	4a44      	ldr	r2, [pc, #272]	; (8011484 <TIM_Base_SetConfig+0x124>)
 8011374:	4293      	cmp	r3, r2
 8011376:	d013      	beq.n	80113a0 <TIM_Base_SetConfig+0x40>
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801137e:	d00f      	beq.n	80113a0 <TIM_Base_SetConfig+0x40>
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	4a41      	ldr	r2, [pc, #260]	; (8011488 <TIM_Base_SetConfig+0x128>)
 8011384:	4293      	cmp	r3, r2
 8011386:	d00b      	beq.n	80113a0 <TIM_Base_SetConfig+0x40>
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	4a40      	ldr	r2, [pc, #256]	; (801148c <TIM_Base_SetConfig+0x12c>)
 801138c:	4293      	cmp	r3, r2
 801138e:	d007      	beq.n	80113a0 <TIM_Base_SetConfig+0x40>
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	4a3f      	ldr	r2, [pc, #252]	; (8011490 <TIM_Base_SetConfig+0x130>)
 8011394:	4293      	cmp	r3, r2
 8011396:	d003      	beq.n	80113a0 <TIM_Base_SetConfig+0x40>
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	4a3e      	ldr	r2, [pc, #248]	; (8011494 <TIM_Base_SetConfig+0x134>)
 801139c:	4293      	cmp	r3, r2
 801139e:	d108      	bne.n	80113b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80113a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80113a8:	683b      	ldr	r3, [r7, #0]
 80113aa:	685b      	ldr	r3, [r3, #4]
 80113ac:	68fa      	ldr	r2, [r7, #12]
 80113ae:	4313      	orrs	r3, r2
 80113b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	4a33      	ldr	r2, [pc, #204]	; (8011484 <TIM_Base_SetConfig+0x124>)
 80113b6:	4293      	cmp	r3, r2
 80113b8:	d027      	beq.n	801140a <TIM_Base_SetConfig+0xaa>
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80113c0:	d023      	beq.n	801140a <TIM_Base_SetConfig+0xaa>
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	4a30      	ldr	r2, [pc, #192]	; (8011488 <TIM_Base_SetConfig+0x128>)
 80113c6:	4293      	cmp	r3, r2
 80113c8:	d01f      	beq.n	801140a <TIM_Base_SetConfig+0xaa>
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	4a2f      	ldr	r2, [pc, #188]	; (801148c <TIM_Base_SetConfig+0x12c>)
 80113ce:	4293      	cmp	r3, r2
 80113d0:	d01b      	beq.n	801140a <TIM_Base_SetConfig+0xaa>
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	4a2e      	ldr	r2, [pc, #184]	; (8011490 <TIM_Base_SetConfig+0x130>)
 80113d6:	4293      	cmp	r3, r2
 80113d8:	d017      	beq.n	801140a <TIM_Base_SetConfig+0xaa>
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	4a2d      	ldr	r2, [pc, #180]	; (8011494 <TIM_Base_SetConfig+0x134>)
 80113de:	4293      	cmp	r3, r2
 80113e0:	d013      	beq.n	801140a <TIM_Base_SetConfig+0xaa>
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	4a2c      	ldr	r2, [pc, #176]	; (8011498 <TIM_Base_SetConfig+0x138>)
 80113e6:	4293      	cmp	r3, r2
 80113e8:	d00f      	beq.n	801140a <TIM_Base_SetConfig+0xaa>
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	4a2b      	ldr	r2, [pc, #172]	; (801149c <TIM_Base_SetConfig+0x13c>)
 80113ee:	4293      	cmp	r3, r2
 80113f0:	d00b      	beq.n	801140a <TIM_Base_SetConfig+0xaa>
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	4a2a      	ldr	r2, [pc, #168]	; (80114a0 <TIM_Base_SetConfig+0x140>)
 80113f6:	4293      	cmp	r3, r2
 80113f8:	d007      	beq.n	801140a <TIM_Base_SetConfig+0xaa>
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	4a29      	ldr	r2, [pc, #164]	; (80114a4 <TIM_Base_SetConfig+0x144>)
 80113fe:	4293      	cmp	r3, r2
 8011400:	d003      	beq.n	801140a <TIM_Base_SetConfig+0xaa>
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	4a28      	ldr	r2, [pc, #160]	; (80114a8 <TIM_Base_SetConfig+0x148>)
 8011406:	4293      	cmp	r3, r2
 8011408:	d108      	bne.n	801141c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011412:	683b      	ldr	r3, [r7, #0]
 8011414:	68db      	ldr	r3, [r3, #12]
 8011416:	68fa      	ldr	r2, [r7, #12]
 8011418:	4313      	orrs	r3, r2
 801141a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011422:	683b      	ldr	r3, [r7, #0]
 8011424:	695b      	ldr	r3, [r3, #20]
 8011426:	4313      	orrs	r3, r2
 8011428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	68fa      	ldr	r2, [r7, #12]
 801142e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	689a      	ldr	r2, [r3, #8]
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011438:	683b      	ldr	r3, [r7, #0]
 801143a:	681a      	ldr	r2, [r3, #0]
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	4a10      	ldr	r2, [pc, #64]	; (8011484 <TIM_Base_SetConfig+0x124>)
 8011444:	4293      	cmp	r3, r2
 8011446:	d00f      	beq.n	8011468 <TIM_Base_SetConfig+0x108>
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	4a12      	ldr	r2, [pc, #72]	; (8011494 <TIM_Base_SetConfig+0x134>)
 801144c:	4293      	cmp	r3, r2
 801144e:	d00b      	beq.n	8011468 <TIM_Base_SetConfig+0x108>
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	4a11      	ldr	r2, [pc, #68]	; (8011498 <TIM_Base_SetConfig+0x138>)
 8011454:	4293      	cmp	r3, r2
 8011456:	d007      	beq.n	8011468 <TIM_Base_SetConfig+0x108>
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	4a10      	ldr	r2, [pc, #64]	; (801149c <TIM_Base_SetConfig+0x13c>)
 801145c:	4293      	cmp	r3, r2
 801145e:	d003      	beq.n	8011468 <TIM_Base_SetConfig+0x108>
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	4a0f      	ldr	r2, [pc, #60]	; (80114a0 <TIM_Base_SetConfig+0x140>)
 8011464:	4293      	cmp	r3, r2
 8011466:	d103      	bne.n	8011470 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	691a      	ldr	r2, [r3, #16]
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	2201      	movs	r2, #1
 8011474:	615a      	str	r2, [r3, #20]
}
 8011476:	bf00      	nop
 8011478:	3714      	adds	r7, #20
 801147a:	46bd      	mov	sp, r7
 801147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011480:	4770      	bx	lr
 8011482:	bf00      	nop
 8011484:	40010000 	.word	0x40010000
 8011488:	40000400 	.word	0x40000400
 801148c:	40000800 	.word	0x40000800
 8011490:	40000c00 	.word	0x40000c00
 8011494:	40010400 	.word	0x40010400
 8011498:	40014000 	.word	0x40014000
 801149c:	40014400 	.word	0x40014400
 80114a0:	40014800 	.word	0x40014800
 80114a4:	4000e000 	.word	0x4000e000
 80114a8:	4000e400 	.word	0x4000e400

080114ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80114ac:	b480      	push	{r7}
 80114ae:	b087      	sub	sp, #28
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
 80114b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	6a1b      	ldr	r3, [r3, #32]
 80114ba:	f023 0201 	bic.w	r2, r3, #1
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	6a1b      	ldr	r3, [r3, #32]
 80114c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	685b      	ldr	r3, [r3, #4]
 80114cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	699b      	ldr	r3, [r3, #24]
 80114d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80114d4:	68fa      	ldr	r2, [r7, #12]
 80114d6:	4b37      	ldr	r3, [pc, #220]	; (80115b4 <TIM_OC1_SetConfig+0x108>)
 80114d8:	4013      	ands	r3, r2
 80114da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	f023 0303 	bic.w	r3, r3, #3
 80114e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80114e4:	683b      	ldr	r3, [r7, #0]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	68fa      	ldr	r2, [r7, #12]
 80114ea:	4313      	orrs	r3, r2
 80114ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80114ee:	697b      	ldr	r3, [r7, #20]
 80114f0:	f023 0302 	bic.w	r3, r3, #2
 80114f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80114f6:	683b      	ldr	r3, [r7, #0]
 80114f8:	689b      	ldr	r3, [r3, #8]
 80114fa:	697a      	ldr	r2, [r7, #20]
 80114fc:	4313      	orrs	r3, r2
 80114fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	4a2d      	ldr	r2, [pc, #180]	; (80115b8 <TIM_OC1_SetConfig+0x10c>)
 8011504:	4293      	cmp	r3, r2
 8011506:	d00f      	beq.n	8011528 <TIM_OC1_SetConfig+0x7c>
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	4a2c      	ldr	r2, [pc, #176]	; (80115bc <TIM_OC1_SetConfig+0x110>)
 801150c:	4293      	cmp	r3, r2
 801150e:	d00b      	beq.n	8011528 <TIM_OC1_SetConfig+0x7c>
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	4a2b      	ldr	r2, [pc, #172]	; (80115c0 <TIM_OC1_SetConfig+0x114>)
 8011514:	4293      	cmp	r3, r2
 8011516:	d007      	beq.n	8011528 <TIM_OC1_SetConfig+0x7c>
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	4a2a      	ldr	r2, [pc, #168]	; (80115c4 <TIM_OC1_SetConfig+0x118>)
 801151c:	4293      	cmp	r3, r2
 801151e:	d003      	beq.n	8011528 <TIM_OC1_SetConfig+0x7c>
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	4a29      	ldr	r2, [pc, #164]	; (80115c8 <TIM_OC1_SetConfig+0x11c>)
 8011524:	4293      	cmp	r3, r2
 8011526:	d10c      	bne.n	8011542 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011528:	697b      	ldr	r3, [r7, #20]
 801152a:	f023 0308 	bic.w	r3, r3, #8
 801152e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011530:	683b      	ldr	r3, [r7, #0]
 8011532:	68db      	ldr	r3, [r3, #12]
 8011534:	697a      	ldr	r2, [r7, #20]
 8011536:	4313      	orrs	r3, r2
 8011538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801153a:	697b      	ldr	r3, [r7, #20]
 801153c:	f023 0304 	bic.w	r3, r3, #4
 8011540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	4a1c      	ldr	r2, [pc, #112]	; (80115b8 <TIM_OC1_SetConfig+0x10c>)
 8011546:	4293      	cmp	r3, r2
 8011548:	d00f      	beq.n	801156a <TIM_OC1_SetConfig+0xbe>
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	4a1b      	ldr	r2, [pc, #108]	; (80115bc <TIM_OC1_SetConfig+0x110>)
 801154e:	4293      	cmp	r3, r2
 8011550:	d00b      	beq.n	801156a <TIM_OC1_SetConfig+0xbe>
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	4a1a      	ldr	r2, [pc, #104]	; (80115c0 <TIM_OC1_SetConfig+0x114>)
 8011556:	4293      	cmp	r3, r2
 8011558:	d007      	beq.n	801156a <TIM_OC1_SetConfig+0xbe>
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	4a19      	ldr	r2, [pc, #100]	; (80115c4 <TIM_OC1_SetConfig+0x118>)
 801155e:	4293      	cmp	r3, r2
 8011560:	d003      	beq.n	801156a <TIM_OC1_SetConfig+0xbe>
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	4a18      	ldr	r2, [pc, #96]	; (80115c8 <TIM_OC1_SetConfig+0x11c>)
 8011566:	4293      	cmp	r3, r2
 8011568:	d111      	bne.n	801158e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801156a:	693b      	ldr	r3, [r7, #16]
 801156c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011570:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8011572:	693b      	ldr	r3, [r7, #16]
 8011574:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011578:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	695b      	ldr	r3, [r3, #20]
 801157e:	693a      	ldr	r2, [r7, #16]
 8011580:	4313      	orrs	r3, r2
 8011582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011584:	683b      	ldr	r3, [r7, #0]
 8011586:	699b      	ldr	r3, [r3, #24]
 8011588:	693a      	ldr	r2, [r7, #16]
 801158a:	4313      	orrs	r3, r2
 801158c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	693a      	ldr	r2, [r7, #16]
 8011592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	68fa      	ldr	r2, [r7, #12]
 8011598:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801159a:	683b      	ldr	r3, [r7, #0]
 801159c:	685a      	ldr	r2, [r3, #4]
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	697a      	ldr	r2, [r7, #20]
 80115a6:	621a      	str	r2, [r3, #32]
}
 80115a8:	bf00      	nop
 80115aa:	371c      	adds	r7, #28
 80115ac:	46bd      	mov	sp, r7
 80115ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b2:	4770      	bx	lr
 80115b4:	fffeff8f 	.word	0xfffeff8f
 80115b8:	40010000 	.word	0x40010000
 80115bc:	40010400 	.word	0x40010400
 80115c0:	40014000 	.word	0x40014000
 80115c4:	40014400 	.word	0x40014400
 80115c8:	40014800 	.word	0x40014800

080115cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80115cc:	b480      	push	{r7}
 80115ce:	b087      	sub	sp, #28
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
 80115d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	6a1b      	ldr	r3, [r3, #32]
 80115da:	f023 0210 	bic.w	r2, r3, #16
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	6a1b      	ldr	r3, [r3, #32]
 80115e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	685b      	ldr	r3, [r3, #4]
 80115ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	699b      	ldr	r3, [r3, #24]
 80115f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80115f4:	68fa      	ldr	r2, [r7, #12]
 80115f6:	4b34      	ldr	r3, [pc, #208]	; (80116c8 <TIM_OC2_SetConfig+0xfc>)
 80115f8:	4013      	ands	r3, r2
 80115fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011604:	683b      	ldr	r3, [r7, #0]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	021b      	lsls	r3, r3, #8
 801160a:	68fa      	ldr	r2, [r7, #12]
 801160c:	4313      	orrs	r3, r2
 801160e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011610:	697b      	ldr	r3, [r7, #20]
 8011612:	f023 0320 	bic.w	r3, r3, #32
 8011616:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011618:	683b      	ldr	r3, [r7, #0]
 801161a:	689b      	ldr	r3, [r3, #8]
 801161c:	011b      	lsls	r3, r3, #4
 801161e:	697a      	ldr	r2, [r7, #20]
 8011620:	4313      	orrs	r3, r2
 8011622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	4a29      	ldr	r2, [pc, #164]	; (80116cc <TIM_OC2_SetConfig+0x100>)
 8011628:	4293      	cmp	r3, r2
 801162a:	d003      	beq.n	8011634 <TIM_OC2_SetConfig+0x68>
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	4a28      	ldr	r2, [pc, #160]	; (80116d0 <TIM_OC2_SetConfig+0x104>)
 8011630:	4293      	cmp	r3, r2
 8011632:	d10d      	bne.n	8011650 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011634:	697b      	ldr	r3, [r7, #20]
 8011636:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801163a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801163c:	683b      	ldr	r3, [r7, #0]
 801163e:	68db      	ldr	r3, [r3, #12]
 8011640:	011b      	lsls	r3, r3, #4
 8011642:	697a      	ldr	r2, [r7, #20]
 8011644:	4313      	orrs	r3, r2
 8011646:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011648:	697b      	ldr	r3, [r7, #20]
 801164a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801164e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	4a1e      	ldr	r2, [pc, #120]	; (80116cc <TIM_OC2_SetConfig+0x100>)
 8011654:	4293      	cmp	r3, r2
 8011656:	d00f      	beq.n	8011678 <TIM_OC2_SetConfig+0xac>
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	4a1d      	ldr	r2, [pc, #116]	; (80116d0 <TIM_OC2_SetConfig+0x104>)
 801165c:	4293      	cmp	r3, r2
 801165e:	d00b      	beq.n	8011678 <TIM_OC2_SetConfig+0xac>
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	4a1c      	ldr	r2, [pc, #112]	; (80116d4 <TIM_OC2_SetConfig+0x108>)
 8011664:	4293      	cmp	r3, r2
 8011666:	d007      	beq.n	8011678 <TIM_OC2_SetConfig+0xac>
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	4a1b      	ldr	r2, [pc, #108]	; (80116d8 <TIM_OC2_SetConfig+0x10c>)
 801166c:	4293      	cmp	r3, r2
 801166e:	d003      	beq.n	8011678 <TIM_OC2_SetConfig+0xac>
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	4a1a      	ldr	r2, [pc, #104]	; (80116dc <TIM_OC2_SetConfig+0x110>)
 8011674:	4293      	cmp	r3, r2
 8011676:	d113      	bne.n	80116a0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011678:	693b      	ldr	r3, [r7, #16]
 801167a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801167e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011680:	693b      	ldr	r3, [r7, #16]
 8011682:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011686:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	695b      	ldr	r3, [r3, #20]
 801168c:	009b      	lsls	r3, r3, #2
 801168e:	693a      	ldr	r2, [r7, #16]
 8011690:	4313      	orrs	r3, r2
 8011692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011694:	683b      	ldr	r3, [r7, #0]
 8011696:	699b      	ldr	r3, [r3, #24]
 8011698:	009b      	lsls	r3, r3, #2
 801169a:	693a      	ldr	r2, [r7, #16]
 801169c:	4313      	orrs	r3, r2
 801169e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	693a      	ldr	r2, [r7, #16]
 80116a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	68fa      	ldr	r2, [r7, #12]
 80116aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80116ac:	683b      	ldr	r3, [r7, #0]
 80116ae:	685a      	ldr	r2, [r3, #4]
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	697a      	ldr	r2, [r7, #20]
 80116b8:	621a      	str	r2, [r3, #32]
}
 80116ba:	bf00      	nop
 80116bc:	371c      	adds	r7, #28
 80116be:	46bd      	mov	sp, r7
 80116c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c4:	4770      	bx	lr
 80116c6:	bf00      	nop
 80116c8:	feff8fff 	.word	0xfeff8fff
 80116cc:	40010000 	.word	0x40010000
 80116d0:	40010400 	.word	0x40010400
 80116d4:	40014000 	.word	0x40014000
 80116d8:	40014400 	.word	0x40014400
 80116dc:	40014800 	.word	0x40014800

080116e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80116e0:	b480      	push	{r7}
 80116e2:	b087      	sub	sp, #28
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
 80116e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	6a1b      	ldr	r3, [r3, #32]
 80116ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	6a1b      	ldr	r3, [r3, #32]
 80116fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	685b      	ldr	r3, [r3, #4]
 8011700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	69db      	ldr	r3, [r3, #28]
 8011706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011708:	68fa      	ldr	r2, [r7, #12]
 801170a:	4b33      	ldr	r3, [pc, #204]	; (80117d8 <TIM_OC3_SetConfig+0xf8>)
 801170c:	4013      	ands	r3, r2
 801170e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	f023 0303 	bic.w	r3, r3, #3
 8011716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011718:	683b      	ldr	r3, [r7, #0]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	68fa      	ldr	r2, [r7, #12]
 801171e:	4313      	orrs	r3, r2
 8011720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011722:	697b      	ldr	r3, [r7, #20]
 8011724:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	689b      	ldr	r3, [r3, #8]
 801172e:	021b      	lsls	r3, r3, #8
 8011730:	697a      	ldr	r2, [r7, #20]
 8011732:	4313      	orrs	r3, r2
 8011734:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	4a28      	ldr	r2, [pc, #160]	; (80117dc <TIM_OC3_SetConfig+0xfc>)
 801173a:	4293      	cmp	r3, r2
 801173c:	d003      	beq.n	8011746 <TIM_OC3_SetConfig+0x66>
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	4a27      	ldr	r2, [pc, #156]	; (80117e0 <TIM_OC3_SetConfig+0x100>)
 8011742:	4293      	cmp	r3, r2
 8011744:	d10d      	bne.n	8011762 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011746:	697b      	ldr	r3, [r7, #20]
 8011748:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801174c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801174e:	683b      	ldr	r3, [r7, #0]
 8011750:	68db      	ldr	r3, [r3, #12]
 8011752:	021b      	lsls	r3, r3, #8
 8011754:	697a      	ldr	r2, [r7, #20]
 8011756:	4313      	orrs	r3, r2
 8011758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801175a:	697b      	ldr	r3, [r7, #20]
 801175c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	4a1d      	ldr	r2, [pc, #116]	; (80117dc <TIM_OC3_SetConfig+0xfc>)
 8011766:	4293      	cmp	r3, r2
 8011768:	d00f      	beq.n	801178a <TIM_OC3_SetConfig+0xaa>
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	4a1c      	ldr	r2, [pc, #112]	; (80117e0 <TIM_OC3_SetConfig+0x100>)
 801176e:	4293      	cmp	r3, r2
 8011770:	d00b      	beq.n	801178a <TIM_OC3_SetConfig+0xaa>
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	4a1b      	ldr	r2, [pc, #108]	; (80117e4 <TIM_OC3_SetConfig+0x104>)
 8011776:	4293      	cmp	r3, r2
 8011778:	d007      	beq.n	801178a <TIM_OC3_SetConfig+0xaa>
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	4a1a      	ldr	r2, [pc, #104]	; (80117e8 <TIM_OC3_SetConfig+0x108>)
 801177e:	4293      	cmp	r3, r2
 8011780:	d003      	beq.n	801178a <TIM_OC3_SetConfig+0xaa>
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	4a19      	ldr	r2, [pc, #100]	; (80117ec <TIM_OC3_SetConfig+0x10c>)
 8011786:	4293      	cmp	r3, r2
 8011788:	d113      	bne.n	80117b2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801178a:	693b      	ldr	r3, [r7, #16]
 801178c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011790:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011792:	693b      	ldr	r3, [r7, #16]
 8011794:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011798:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801179a:	683b      	ldr	r3, [r7, #0]
 801179c:	695b      	ldr	r3, [r3, #20]
 801179e:	011b      	lsls	r3, r3, #4
 80117a0:	693a      	ldr	r2, [r7, #16]
 80117a2:	4313      	orrs	r3, r2
 80117a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80117a6:	683b      	ldr	r3, [r7, #0]
 80117a8:	699b      	ldr	r3, [r3, #24]
 80117aa:	011b      	lsls	r3, r3, #4
 80117ac:	693a      	ldr	r2, [r7, #16]
 80117ae:	4313      	orrs	r3, r2
 80117b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	693a      	ldr	r2, [r7, #16]
 80117b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	68fa      	ldr	r2, [r7, #12]
 80117bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80117be:	683b      	ldr	r3, [r7, #0]
 80117c0:	685a      	ldr	r2, [r3, #4]
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	697a      	ldr	r2, [r7, #20]
 80117ca:	621a      	str	r2, [r3, #32]
}
 80117cc:	bf00      	nop
 80117ce:	371c      	adds	r7, #28
 80117d0:	46bd      	mov	sp, r7
 80117d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d6:	4770      	bx	lr
 80117d8:	fffeff8f 	.word	0xfffeff8f
 80117dc:	40010000 	.word	0x40010000
 80117e0:	40010400 	.word	0x40010400
 80117e4:	40014000 	.word	0x40014000
 80117e8:	40014400 	.word	0x40014400
 80117ec:	40014800 	.word	0x40014800

080117f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80117f0:	b480      	push	{r7}
 80117f2:	b087      	sub	sp, #28
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
 80117f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	6a1b      	ldr	r3, [r3, #32]
 80117fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	6a1b      	ldr	r3, [r3, #32]
 801180a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	685b      	ldr	r3, [r3, #4]
 8011810:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	69db      	ldr	r3, [r3, #28]
 8011816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011818:	68fa      	ldr	r2, [r7, #12]
 801181a:	4b24      	ldr	r3, [pc, #144]	; (80118ac <TIM_OC4_SetConfig+0xbc>)
 801181c:	4013      	ands	r3, r2
 801181e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011828:	683b      	ldr	r3, [r7, #0]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	021b      	lsls	r3, r3, #8
 801182e:	68fa      	ldr	r2, [r7, #12]
 8011830:	4313      	orrs	r3, r2
 8011832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011834:	693b      	ldr	r3, [r7, #16]
 8011836:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801183a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801183c:	683b      	ldr	r3, [r7, #0]
 801183e:	689b      	ldr	r3, [r3, #8]
 8011840:	031b      	lsls	r3, r3, #12
 8011842:	693a      	ldr	r2, [r7, #16]
 8011844:	4313      	orrs	r3, r2
 8011846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	4a19      	ldr	r2, [pc, #100]	; (80118b0 <TIM_OC4_SetConfig+0xc0>)
 801184c:	4293      	cmp	r3, r2
 801184e:	d00f      	beq.n	8011870 <TIM_OC4_SetConfig+0x80>
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	4a18      	ldr	r2, [pc, #96]	; (80118b4 <TIM_OC4_SetConfig+0xc4>)
 8011854:	4293      	cmp	r3, r2
 8011856:	d00b      	beq.n	8011870 <TIM_OC4_SetConfig+0x80>
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	4a17      	ldr	r2, [pc, #92]	; (80118b8 <TIM_OC4_SetConfig+0xc8>)
 801185c:	4293      	cmp	r3, r2
 801185e:	d007      	beq.n	8011870 <TIM_OC4_SetConfig+0x80>
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	4a16      	ldr	r2, [pc, #88]	; (80118bc <TIM_OC4_SetConfig+0xcc>)
 8011864:	4293      	cmp	r3, r2
 8011866:	d003      	beq.n	8011870 <TIM_OC4_SetConfig+0x80>
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	4a15      	ldr	r2, [pc, #84]	; (80118c0 <TIM_OC4_SetConfig+0xd0>)
 801186c:	4293      	cmp	r3, r2
 801186e:	d109      	bne.n	8011884 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011870:	697b      	ldr	r3, [r7, #20]
 8011872:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011876:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011878:	683b      	ldr	r3, [r7, #0]
 801187a:	695b      	ldr	r3, [r3, #20]
 801187c:	019b      	lsls	r3, r3, #6
 801187e:	697a      	ldr	r2, [r7, #20]
 8011880:	4313      	orrs	r3, r2
 8011882:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	697a      	ldr	r2, [r7, #20]
 8011888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	68fa      	ldr	r2, [r7, #12]
 801188e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011890:	683b      	ldr	r3, [r7, #0]
 8011892:	685a      	ldr	r2, [r3, #4]
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	693a      	ldr	r2, [r7, #16]
 801189c:	621a      	str	r2, [r3, #32]
}
 801189e:	bf00      	nop
 80118a0:	371c      	adds	r7, #28
 80118a2:	46bd      	mov	sp, r7
 80118a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a8:	4770      	bx	lr
 80118aa:	bf00      	nop
 80118ac:	feff8fff 	.word	0xfeff8fff
 80118b0:	40010000 	.word	0x40010000
 80118b4:	40010400 	.word	0x40010400
 80118b8:	40014000 	.word	0x40014000
 80118bc:	40014400 	.word	0x40014400
 80118c0:	40014800 	.word	0x40014800

080118c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80118c4:	b480      	push	{r7}
 80118c6:	b087      	sub	sp, #28
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
 80118cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	6a1b      	ldr	r3, [r3, #32]
 80118d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	6a1b      	ldr	r3, [r3, #32]
 80118de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	685b      	ldr	r3, [r3, #4]
 80118e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80118ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80118ec:	68fa      	ldr	r2, [r7, #12]
 80118ee:	4b21      	ldr	r3, [pc, #132]	; (8011974 <TIM_OC5_SetConfig+0xb0>)
 80118f0:	4013      	ands	r3, r2
 80118f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80118f4:	683b      	ldr	r3, [r7, #0]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	68fa      	ldr	r2, [r7, #12]
 80118fa:	4313      	orrs	r3, r2
 80118fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80118fe:	693b      	ldr	r3, [r7, #16]
 8011900:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011904:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011906:	683b      	ldr	r3, [r7, #0]
 8011908:	689b      	ldr	r3, [r3, #8]
 801190a:	041b      	lsls	r3, r3, #16
 801190c:	693a      	ldr	r2, [r7, #16]
 801190e:	4313      	orrs	r3, r2
 8011910:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	4a18      	ldr	r2, [pc, #96]	; (8011978 <TIM_OC5_SetConfig+0xb4>)
 8011916:	4293      	cmp	r3, r2
 8011918:	d00f      	beq.n	801193a <TIM_OC5_SetConfig+0x76>
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	4a17      	ldr	r2, [pc, #92]	; (801197c <TIM_OC5_SetConfig+0xb8>)
 801191e:	4293      	cmp	r3, r2
 8011920:	d00b      	beq.n	801193a <TIM_OC5_SetConfig+0x76>
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	4a16      	ldr	r2, [pc, #88]	; (8011980 <TIM_OC5_SetConfig+0xbc>)
 8011926:	4293      	cmp	r3, r2
 8011928:	d007      	beq.n	801193a <TIM_OC5_SetConfig+0x76>
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	4a15      	ldr	r2, [pc, #84]	; (8011984 <TIM_OC5_SetConfig+0xc0>)
 801192e:	4293      	cmp	r3, r2
 8011930:	d003      	beq.n	801193a <TIM_OC5_SetConfig+0x76>
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	4a14      	ldr	r2, [pc, #80]	; (8011988 <TIM_OC5_SetConfig+0xc4>)
 8011936:	4293      	cmp	r3, r2
 8011938:	d109      	bne.n	801194e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801193a:	697b      	ldr	r3, [r7, #20]
 801193c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011940:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011942:	683b      	ldr	r3, [r7, #0]
 8011944:	695b      	ldr	r3, [r3, #20]
 8011946:	021b      	lsls	r3, r3, #8
 8011948:	697a      	ldr	r2, [r7, #20]
 801194a:	4313      	orrs	r3, r2
 801194c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	697a      	ldr	r2, [r7, #20]
 8011952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	68fa      	ldr	r2, [r7, #12]
 8011958:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801195a:	683b      	ldr	r3, [r7, #0]
 801195c:	685a      	ldr	r2, [r3, #4]
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	693a      	ldr	r2, [r7, #16]
 8011966:	621a      	str	r2, [r3, #32]
}
 8011968:	bf00      	nop
 801196a:	371c      	adds	r7, #28
 801196c:	46bd      	mov	sp, r7
 801196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011972:	4770      	bx	lr
 8011974:	fffeff8f 	.word	0xfffeff8f
 8011978:	40010000 	.word	0x40010000
 801197c:	40010400 	.word	0x40010400
 8011980:	40014000 	.word	0x40014000
 8011984:	40014400 	.word	0x40014400
 8011988:	40014800 	.word	0x40014800

0801198c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801198c:	b480      	push	{r7}
 801198e:	b087      	sub	sp, #28
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
 8011994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	6a1b      	ldr	r3, [r3, #32]
 801199a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	6a1b      	ldr	r3, [r3, #32]
 80119a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	685b      	ldr	r3, [r3, #4]
 80119ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80119b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80119b4:	68fa      	ldr	r2, [r7, #12]
 80119b6:	4b22      	ldr	r3, [pc, #136]	; (8011a40 <TIM_OC6_SetConfig+0xb4>)
 80119b8:	4013      	ands	r3, r2
 80119ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80119bc:	683b      	ldr	r3, [r7, #0]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	021b      	lsls	r3, r3, #8
 80119c2:	68fa      	ldr	r2, [r7, #12]
 80119c4:	4313      	orrs	r3, r2
 80119c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80119c8:	693b      	ldr	r3, [r7, #16]
 80119ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80119ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80119d0:	683b      	ldr	r3, [r7, #0]
 80119d2:	689b      	ldr	r3, [r3, #8]
 80119d4:	051b      	lsls	r3, r3, #20
 80119d6:	693a      	ldr	r2, [r7, #16]
 80119d8:	4313      	orrs	r3, r2
 80119da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	4a19      	ldr	r2, [pc, #100]	; (8011a44 <TIM_OC6_SetConfig+0xb8>)
 80119e0:	4293      	cmp	r3, r2
 80119e2:	d00f      	beq.n	8011a04 <TIM_OC6_SetConfig+0x78>
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	4a18      	ldr	r2, [pc, #96]	; (8011a48 <TIM_OC6_SetConfig+0xbc>)
 80119e8:	4293      	cmp	r3, r2
 80119ea:	d00b      	beq.n	8011a04 <TIM_OC6_SetConfig+0x78>
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	4a17      	ldr	r2, [pc, #92]	; (8011a4c <TIM_OC6_SetConfig+0xc0>)
 80119f0:	4293      	cmp	r3, r2
 80119f2:	d007      	beq.n	8011a04 <TIM_OC6_SetConfig+0x78>
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	4a16      	ldr	r2, [pc, #88]	; (8011a50 <TIM_OC6_SetConfig+0xc4>)
 80119f8:	4293      	cmp	r3, r2
 80119fa:	d003      	beq.n	8011a04 <TIM_OC6_SetConfig+0x78>
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	4a15      	ldr	r2, [pc, #84]	; (8011a54 <TIM_OC6_SetConfig+0xc8>)
 8011a00:	4293      	cmp	r3, r2
 8011a02:	d109      	bne.n	8011a18 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011a04:	697b      	ldr	r3, [r7, #20]
 8011a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011a0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011a0c:	683b      	ldr	r3, [r7, #0]
 8011a0e:	695b      	ldr	r3, [r3, #20]
 8011a10:	029b      	lsls	r3, r3, #10
 8011a12:	697a      	ldr	r2, [r7, #20]
 8011a14:	4313      	orrs	r3, r2
 8011a16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	697a      	ldr	r2, [r7, #20]
 8011a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	68fa      	ldr	r2, [r7, #12]
 8011a22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011a24:	683b      	ldr	r3, [r7, #0]
 8011a26:	685a      	ldr	r2, [r3, #4]
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	693a      	ldr	r2, [r7, #16]
 8011a30:	621a      	str	r2, [r3, #32]
}
 8011a32:	bf00      	nop
 8011a34:	371c      	adds	r7, #28
 8011a36:	46bd      	mov	sp, r7
 8011a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3c:	4770      	bx	lr
 8011a3e:	bf00      	nop
 8011a40:	feff8fff 	.word	0xfeff8fff
 8011a44:	40010000 	.word	0x40010000
 8011a48:	40010400 	.word	0x40010400
 8011a4c:	40014000 	.word	0x40014000
 8011a50:	40014400 	.word	0x40014400
 8011a54:	40014800 	.word	0x40014800

08011a58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011a58:	b480      	push	{r7}
 8011a5a:	b087      	sub	sp, #28
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	60f8      	str	r0, [r7, #12]
 8011a60:	60b9      	str	r1, [r7, #8]
 8011a62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011a64:	68bb      	ldr	r3, [r7, #8]
 8011a66:	f003 031f 	and.w	r3, r3, #31
 8011a6a:	2201      	movs	r2, #1
 8011a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8011a70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	6a1a      	ldr	r2, [r3, #32]
 8011a76:	697b      	ldr	r3, [r7, #20]
 8011a78:	43db      	mvns	r3, r3
 8011a7a:	401a      	ands	r2, r3
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	6a1a      	ldr	r2, [r3, #32]
 8011a84:	68bb      	ldr	r3, [r7, #8]
 8011a86:	f003 031f 	and.w	r3, r3, #31
 8011a8a:	6879      	ldr	r1, [r7, #4]
 8011a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8011a90:	431a      	orrs	r2, r3
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	621a      	str	r2, [r3, #32]
}
 8011a96:	bf00      	nop
 8011a98:	371c      	adds	r7, #28
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa0:	4770      	bx	lr
	...

08011aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011aa4:	b480      	push	{r7}
 8011aa6:	b085      	sub	sp, #20
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
 8011aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011ab4:	2b01      	cmp	r3, #1
 8011ab6:	d101      	bne.n	8011abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011ab8:	2302      	movs	r3, #2
 8011aba:	e077      	b.n	8011bac <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	2201      	movs	r2, #1
 8011ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	2202      	movs	r2, #2
 8011ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	685b      	ldr	r3, [r3, #4]
 8011ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	689b      	ldr	r3, [r3, #8]
 8011ada:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	4a35      	ldr	r2, [pc, #212]	; (8011bb8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011ae2:	4293      	cmp	r3, r2
 8011ae4:	d004      	beq.n	8011af0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	4a34      	ldr	r2, [pc, #208]	; (8011bbc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011aec:	4293      	cmp	r3, r2
 8011aee:	d108      	bne.n	8011b02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011af6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011af8:	683b      	ldr	r3, [r7, #0]
 8011afa:	685b      	ldr	r3, [r3, #4]
 8011afc:	68fa      	ldr	r2, [r7, #12]
 8011afe:	4313      	orrs	r3, r2
 8011b00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011b08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011b0a:	683b      	ldr	r3, [r7, #0]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	68fa      	ldr	r2, [r7, #12]
 8011b10:	4313      	orrs	r3, r2
 8011b12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	68fa      	ldr	r2, [r7, #12]
 8011b1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	4a25      	ldr	r2, [pc, #148]	; (8011bb8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011b22:	4293      	cmp	r3, r2
 8011b24:	d02c      	beq.n	8011b80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011b2e:	d027      	beq.n	8011b80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	4a22      	ldr	r2, [pc, #136]	; (8011bc0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8011b36:	4293      	cmp	r3, r2
 8011b38:	d022      	beq.n	8011b80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	4a21      	ldr	r2, [pc, #132]	; (8011bc4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8011b40:	4293      	cmp	r3, r2
 8011b42:	d01d      	beq.n	8011b80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	4a1f      	ldr	r2, [pc, #124]	; (8011bc8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8011b4a:	4293      	cmp	r3, r2
 8011b4c:	d018      	beq.n	8011b80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	4a1a      	ldr	r2, [pc, #104]	; (8011bbc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011b54:	4293      	cmp	r3, r2
 8011b56:	d013      	beq.n	8011b80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	4a1b      	ldr	r2, [pc, #108]	; (8011bcc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8011b5e:	4293      	cmp	r3, r2
 8011b60:	d00e      	beq.n	8011b80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	4a1a      	ldr	r2, [pc, #104]	; (8011bd0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8011b68:	4293      	cmp	r3, r2
 8011b6a:	d009      	beq.n	8011b80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	4a18      	ldr	r2, [pc, #96]	; (8011bd4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8011b72:	4293      	cmp	r3, r2
 8011b74:	d004      	beq.n	8011b80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	4a17      	ldr	r2, [pc, #92]	; (8011bd8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8011b7c:	4293      	cmp	r3, r2
 8011b7e:	d10c      	bne.n	8011b9a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011b80:	68bb      	ldr	r3, [r7, #8]
 8011b82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011b86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011b88:	683b      	ldr	r3, [r7, #0]
 8011b8a:	689b      	ldr	r3, [r3, #8]
 8011b8c:	68ba      	ldr	r2, [r7, #8]
 8011b8e:	4313      	orrs	r3, r2
 8011b90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	68ba      	ldr	r2, [r7, #8]
 8011b98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	2201      	movs	r2, #1
 8011b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011baa:	2300      	movs	r3, #0
}
 8011bac:	4618      	mov	r0, r3
 8011bae:	3714      	adds	r7, #20
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb6:	4770      	bx	lr
 8011bb8:	40010000 	.word	0x40010000
 8011bbc:	40010400 	.word	0x40010400
 8011bc0:	40000400 	.word	0x40000400
 8011bc4:	40000800 	.word	0x40000800
 8011bc8:	40000c00 	.word	0x40000c00
 8011bcc:	40001800 	.word	0x40001800
 8011bd0:	40014000 	.word	0x40014000
 8011bd4:	4000e000 	.word	0x4000e000
 8011bd8:	4000e400 	.word	0x4000e400

08011bdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011bdc:	b480      	push	{r7}
 8011bde:	b083      	sub	sp, #12
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011be4:	bf00      	nop
 8011be6:	370c      	adds	r7, #12
 8011be8:	46bd      	mov	sp, r7
 8011bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bee:	4770      	bx	lr

08011bf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011bf0:	b480      	push	{r7}
 8011bf2:	b083      	sub	sp, #12
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011bf8:	bf00      	nop
 8011bfa:	370c      	adds	r7, #12
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c02:	4770      	bx	lr

08011c04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011c04:	b480      	push	{r7}
 8011c06:	b083      	sub	sp, #12
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011c0c:	bf00      	nop
 8011c0e:	370c      	adds	r7, #12
 8011c10:	46bd      	mov	sp, r7
 8011c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c16:	4770      	bx	lr

08011c18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	b082      	sub	sp, #8
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d101      	bne.n	8011c2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011c26:	2301      	movs	r3, #1
 8011c28:	e042      	b.n	8011cb0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d106      	bne.n	8011c42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	2200      	movs	r2, #0
 8011c38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011c3c:	6878      	ldr	r0, [r7, #4]
 8011c3e:	f7f1 ffe9 	bl	8003c14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	2224      	movs	r2, #36	; 0x24
 8011c46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	681a      	ldr	r2, [r3, #0]
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	f022 0201 	bic.w	r2, r2, #1
 8011c58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011c5a:	6878      	ldr	r0, [r7, #4]
 8011c5c:	f000 f82c 	bl	8011cb8 <UART_SetConfig>
 8011c60:	4603      	mov	r3, r0
 8011c62:	2b01      	cmp	r3, #1
 8011c64:	d101      	bne.n	8011c6a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8011c66:	2301      	movs	r3, #1
 8011c68:	e022      	b.n	8011cb0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d002      	beq.n	8011c78 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8011c72:	6878      	ldr	r0, [r7, #4]
 8011c74:	f000 fe8c 	bl	8012990 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	685a      	ldr	r2, [r3, #4]
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011c86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	689a      	ldr	r2, [r3, #8]
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011c96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	681a      	ldr	r2, [r3, #0]
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	f042 0201 	orr.w	r2, r2, #1
 8011ca6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011ca8:	6878      	ldr	r0, [r7, #4]
 8011caa:	f000 ff13 	bl	8012ad4 <UART_CheckIdleState>
 8011cae:	4603      	mov	r3, r0
}
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	3708      	adds	r7, #8
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	bd80      	pop	{r7, pc}

08011cb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011cbc:	b092      	sub	sp, #72	; 0x48
 8011cbe:	af00      	add	r7, sp, #0
 8011cc0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011cc8:	697b      	ldr	r3, [r7, #20]
 8011cca:	689a      	ldr	r2, [r3, #8]
 8011ccc:	697b      	ldr	r3, [r7, #20]
 8011cce:	691b      	ldr	r3, [r3, #16]
 8011cd0:	431a      	orrs	r2, r3
 8011cd2:	697b      	ldr	r3, [r7, #20]
 8011cd4:	695b      	ldr	r3, [r3, #20]
 8011cd6:	431a      	orrs	r2, r3
 8011cd8:	697b      	ldr	r3, [r7, #20]
 8011cda:	69db      	ldr	r3, [r3, #28]
 8011cdc:	4313      	orrs	r3, r2
 8011cde:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011ce0:	697b      	ldr	r3, [r7, #20]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	681a      	ldr	r2, [r3, #0]
 8011ce6:	4bbe      	ldr	r3, [pc, #760]	; (8011fe0 <UART_SetConfig+0x328>)
 8011ce8:	4013      	ands	r3, r2
 8011cea:	697a      	ldr	r2, [r7, #20]
 8011cec:	6812      	ldr	r2, [r2, #0]
 8011cee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011cf0:	430b      	orrs	r3, r1
 8011cf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011cf4:	697b      	ldr	r3, [r7, #20]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	685b      	ldr	r3, [r3, #4]
 8011cfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011cfe:	697b      	ldr	r3, [r7, #20]
 8011d00:	68da      	ldr	r2, [r3, #12]
 8011d02:	697b      	ldr	r3, [r7, #20]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	430a      	orrs	r2, r1
 8011d08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011d0a:	697b      	ldr	r3, [r7, #20]
 8011d0c:	699b      	ldr	r3, [r3, #24]
 8011d0e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011d10:	697b      	ldr	r3, [r7, #20]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	4ab3      	ldr	r2, [pc, #716]	; (8011fe4 <UART_SetConfig+0x32c>)
 8011d16:	4293      	cmp	r3, r2
 8011d18:	d004      	beq.n	8011d24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011d1a:	697b      	ldr	r3, [r7, #20]
 8011d1c:	6a1b      	ldr	r3, [r3, #32]
 8011d1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011d20:	4313      	orrs	r3, r2
 8011d22:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011d24:	697b      	ldr	r3, [r7, #20]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	689a      	ldr	r2, [r3, #8]
 8011d2a:	4baf      	ldr	r3, [pc, #700]	; (8011fe8 <UART_SetConfig+0x330>)
 8011d2c:	4013      	ands	r3, r2
 8011d2e:	697a      	ldr	r2, [r7, #20]
 8011d30:	6812      	ldr	r2, [r2, #0]
 8011d32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011d34:	430b      	orrs	r3, r1
 8011d36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011d38:	697b      	ldr	r3, [r7, #20]
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d3e:	f023 010f 	bic.w	r1, r3, #15
 8011d42:	697b      	ldr	r3, [r7, #20]
 8011d44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d46:	697b      	ldr	r3, [r7, #20]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	430a      	orrs	r2, r1
 8011d4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011d4e:	697b      	ldr	r3, [r7, #20]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	4aa6      	ldr	r2, [pc, #664]	; (8011fec <UART_SetConfig+0x334>)
 8011d54:	4293      	cmp	r3, r2
 8011d56:	d177      	bne.n	8011e48 <UART_SetConfig+0x190>
 8011d58:	4ba5      	ldr	r3, [pc, #660]	; (8011ff0 <UART_SetConfig+0x338>)
 8011d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011d60:	2b28      	cmp	r3, #40	; 0x28
 8011d62:	d86d      	bhi.n	8011e40 <UART_SetConfig+0x188>
 8011d64:	a201      	add	r2, pc, #4	; (adr r2, 8011d6c <UART_SetConfig+0xb4>)
 8011d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d6a:	bf00      	nop
 8011d6c:	08011e11 	.word	0x08011e11
 8011d70:	08011e41 	.word	0x08011e41
 8011d74:	08011e41 	.word	0x08011e41
 8011d78:	08011e41 	.word	0x08011e41
 8011d7c:	08011e41 	.word	0x08011e41
 8011d80:	08011e41 	.word	0x08011e41
 8011d84:	08011e41 	.word	0x08011e41
 8011d88:	08011e41 	.word	0x08011e41
 8011d8c:	08011e19 	.word	0x08011e19
 8011d90:	08011e41 	.word	0x08011e41
 8011d94:	08011e41 	.word	0x08011e41
 8011d98:	08011e41 	.word	0x08011e41
 8011d9c:	08011e41 	.word	0x08011e41
 8011da0:	08011e41 	.word	0x08011e41
 8011da4:	08011e41 	.word	0x08011e41
 8011da8:	08011e41 	.word	0x08011e41
 8011dac:	08011e21 	.word	0x08011e21
 8011db0:	08011e41 	.word	0x08011e41
 8011db4:	08011e41 	.word	0x08011e41
 8011db8:	08011e41 	.word	0x08011e41
 8011dbc:	08011e41 	.word	0x08011e41
 8011dc0:	08011e41 	.word	0x08011e41
 8011dc4:	08011e41 	.word	0x08011e41
 8011dc8:	08011e41 	.word	0x08011e41
 8011dcc:	08011e29 	.word	0x08011e29
 8011dd0:	08011e41 	.word	0x08011e41
 8011dd4:	08011e41 	.word	0x08011e41
 8011dd8:	08011e41 	.word	0x08011e41
 8011ddc:	08011e41 	.word	0x08011e41
 8011de0:	08011e41 	.word	0x08011e41
 8011de4:	08011e41 	.word	0x08011e41
 8011de8:	08011e41 	.word	0x08011e41
 8011dec:	08011e31 	.word	0x08011e31
 8011df0:	08011e41 	.word	0x08011e41
 8011df4:	08011e41 	.word	0x08011e41
 8011df8:	08011e41 	.word	0x08011e41
 8011dfc:	08011e41 	.word	0x08011e41
 8011e00:	08011e41 	.word	0x08011e41
 8011e04:	08011e41 	.word	0x08011e41
 8011e08:	08011e41 	.word	0x08011e41
 8011e0c:	08011e39 	.word	0x08011e39
 8011e10:	2301      	movs	r3, #1
 8011e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e16:	e326      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011e18:	2304      	movs	r3, #4
 8011e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e1e:	e322      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011e20:	2308      	movs	r3, #8
 8011e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e26:	e31e      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011e28:	2310      	movs	r3, #16
 8011e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e2e:	e31a      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011e30:	2320      	movs	r3, #32
 8011e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e36:	e316      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011e38:	2340      	movs	r3, #64	; 0x40
 8011e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e3e:	e312      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011e40:	2380      	movs	r3, #128	; 0x80
 8011e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e46:	e30e      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011e48:	697b      	ldr	r3, [r7, #20]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	4a69      	ldr	r2, [pc, #420]	; (8011ff4 <UART_SetConfig+0x33c>)
 8011e4e:	4293      	cmp	r3, r2
 8011e50:	d130      	bne.n	8011eb4 <UART_SetConfig+0x1fc>
 8011e52:	4b67      	ldr	r3, [pc, #412]	; (8011ff0 <UART_SetConfig+0x338>)
 8011e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011e56:	f003 0307 	and.w	r3, r3, #7
 8011e5a:	2b05      	cmp	r3, #5
 8011e5c:	d826      	bhi.n	8011eac <UART_SetConfig+0x1f4>
 8011e5e:	a201      	add	r2, pc, #4	; (adr r2, 8011e64 <UART_SetConfig+0x1ac>)
 8011e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e64:	08011e7d 	.word	0x08011e7d
 8011e68:	08011e85 	.word	0x08011e85
 8011e6c:	08011e8d 	.word	0x08011e8d
 8011e70:	08011e95 	.word	0x08011e95
 8011e74:	08011e9d 	.word	0x08011e9d
 8011e78:	08011ea5 	.word	0x08011ea5
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e82:	e2f0      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011e84:	2304      	movs	r3, #4
 8011e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e8a:	e2ec      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011e8c:	2308      	movs	r3, #8
 8011e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e92:	e2e8      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011e94:	2310      	movs	r3, #16
 8011e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e9a:	e2e4      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011e9c:	2320      	movs	r3, #32
 8011e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ea2:	e2e0      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011ea4:	2340      	movs	r3, #64	; 0x40
 8011ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011eaa:	e2dc      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011eac:	2380      	movs	r3, #128	; 0x80
 8011eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011eb2:	e2d8      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011eb4:	697b      	ldr	r3, [r7, #20]
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	4a4f      	ldr	r2, [pc, #316]	; (8011ff8 <UART_SetConfig+0x340>)
 8011eba:	4293      	cmp	r3, r2
 8011ebc:	d130      	bne.n	8011f20 <UART_SetConfig+0x268>
 8011ebe:	4b4c      	ldr	r3, [pc, #304]	; (8011ff0 <UART_SetConfig+0x338>)
 8011ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ec2:	f003 0307 	and.w	r3, r3, #7
 8011ec6:	2b05      	cmp	r3, #5
 8011ec8:	d826      	bhi.n	8011f18 <UART_SetConfig+0x260>
 8011eca:	a201      	add	r2, pc, #4	; (adr r2, 8011ed0 <UART_SetConfig+0x218>)
 8011ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ed0:	08011ee9 	.word	0x08011ee9
 8011ed4:	08011ef1 	.word	0x08011ef1
 8011ed8:	08011ef9 	.word	0x08011ef9
 8011edc:	08011f01 	.word	0x08011f01
 8011ee0:	08011f09 	.word	0x08011f09
 8011ee4:	08011f11 	.word	0x08011f11
 8011ee8:	2300      	movs	r3, #0
 8011eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011eee:	e2ba      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011ef0:	2304      	movs	r3, #4
 8011ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ef6:	e2b6      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011ef8:	2308      	movs	r3, #8
 8011efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011efe:	e2b2      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011f00:	2310      	movs	r3, #16
 8011f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f06:	e2ae      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011f08:	2320      	movs	r3, #32
 8011f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f0e:	e2aa      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011f10:	2340      	movs	r3, #64	; 0x40
 8011f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f16:	e2a6      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011f18:	2380      	movs	r3, #128	; 0x80
 8011f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f1e:	e2a2      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011f20:	697b      	ldr	r3, [r7, #20]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	4a35      	ldr	r2, [pc, #212]	; (8011ffc <UART_SetConfig+0x344>)
 8011f26:	4293      	cmp	r3, r2
 8011f28:	d130      	bne.n	8011f8c <UART_SetConfig+0x2d4>
 8011f2a:	4b31      	ldr	r3, [pc, #196]	; (8011ff0 <UART_SetConfig+0x338>)
 8011f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011f2e:	f003 0307 	and.w	r3, r3, #7
 8011f32:	2b05      	cmp	r3, #5
 8011f34:	d826      	bhi.n	8011f84 <UART_SetConfig+0x2cc>
 8011f36:	a201      	add	r2, pc, #4	; (adr r2, 8011f3c <UART_SetConfig+0x284>)
 8011f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f3c:	08011f55 	.word	0x08011f55
 8011f40:	08011f5d 	.word	0x08011f5d
 8011f44:	08011f65 	.word	0x08011f65
 8011f48:	08011f6d 	.word	0x08011f6d
 8011f4c:	08011f75 	.word	0x08011f75
 8011f50:	08011f7d 	.word	0x08011f7d
 8011f54:	2300      	movs	r3, #0
 8011f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f5a:	e284      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011f5c:	2304      	movs	r3, #4
 8011f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f62:	e280      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011f64:	2308      	movs	r3, #8
 8011f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f6a:	e27c      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011f6c:	2310      	movs	r3, #16
 8011f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f72:	e278      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011f74:	2320      	movs	r3, #32
 8011f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f7a:	e274      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011f7c:	2340      	movs	r3, #64	; 0x40
 8011f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f82:	e270      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011f84:	2380      	movs	r3, #128	; 0x80
 8011f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f8a:	e26c      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011f8c:	697b      	ldr	r3, [r7, #20]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	4a1b      	ldr	r2, [pc, #108]	; (8012000 <UART_SetConfig+0x348>)
 8011f92:	4293      	cmp	r3, r2
 8011f94:	d142      	bne.n	801201c <UART_SetConfig+0x364>
 8011f96:	4b16      	ldr	r3, [pc, #88]	; (8011ff0 <UART_SetConfig+0x338>)
 8011f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011f9a:	f003 0307 	and.w	r3, r3, #7
 8011f9e:	2b05      	cmp	r3, #5
 8011fa0:	d838      	bhi.n	8012014 <UART_SetConfig+0x35c>
 8011fa2:	a201      	add	r2, pc, #4	; (adr r2, 8011fa8 <UART_SetConfig+0x2f0>)
 8011fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fa8:	08011fc1 	.word	0x08011fc1
 8011fac:	08011fc9 	.word	0x08011fc9
 8011fb0:	08011fd1 	.word	0x08011fd1
 8011fb4:	08011fd9 	.word	0x08011fd9
 8011fb8:	08012005 	.word	0x08012005
 8011fbc:	0801200d 	.word	0x0801200d
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fc6:	e24e      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011fc8:	2304      	movs	r3, #4
 8011fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fce:	e24a      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011fd0:	2308      	movs	r3, #8
 8011fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fd6:	e246      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011fd8:	2310      	movs	r3, #16
 8011fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fde:	e242      	b.n	8012466 <UART_SetConfig+0x7ae>
 8011fe0:	cfff69f3 	.word	0xcfff69f3
 8011fe4:	58000c00 	.word	0x58000c00
 8011fe8:	11fff4ff 	.word	0x11fff4ff
 8011fec:	40011000 	.word	0x40011000
 8011ff0:	58024400 	.word	0x58024400
 8011ff4:	40004400 	.word	0x40004400
 8011ff8:	40004800 	.word	0x40004800
 8011ffc:	40004c00 	.word	0x40004c00
 8012000:	40005000 	.word	0x40005000
 8012004:	2320      	movs	r3, #32
 8012006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801200a:	e22c      	b.n	8012466 <UART_SetConfig+0x7ae>
 801200c:	2340      	movs	r3, #64	; 0x40
 801200e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012012:	e228      	b.n	8012466 <UART_SetConfig+0x7ae>
 8012014:	2380      	movs	r3, #128	; 0x80
 8012016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801201a:	e224      	b.n	8012466 <UART_SetConfig+0x7ae>
 801201c:	697b      	ldr	r3, [r7, #20]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	4ab1      	ldr	r2, [pc, #708]	; (80122e8 <UART_SetConfig+0x630>)
 8012022:	4293      	cmp	r3, r2
 8012024:	d176      	bne.n	8012114 <UART_SetConfig+0x45c>
 8012026:	4bb1      	ldr	r3, [pc, #708]	; (80122ec <UART_SetConfig+0x634>)
 8012028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801202a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801202e:	2b28      	cmp	r3, #40	; 0x28
 8012030:	d86c      	bhi.n	801210c <UART_SetConfig+0x454>
 8012032:	a201      	add	r2, pc, #4	; (adr r2, 8012038 <UART_SetConfig+0x380>)
 8012034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012038:	080120dd 	.word	0x080120dd
 801203c:	0801210d 	.word	0x0801210d
 8012040:	0801210d 	.word	0x0801210d
 8012044:	0801210d 	.word	0x0801210d
 8012048:	0801210d 	.word	0x0801210d
 801204c:	0801210d 	.word	0x0801210d
 8012050:	0801210d 	.word	0x0801210d
 8012054:	0801210d 	.word	0x0801210d
 8012058:	080120e5 	.word	0x080120e5
 801205c:	0801210d 	.word	0x0801210d
 8012060:	0801210d 	.word	0x0801210d
 8012064:	0801210d 	.word	0x0801210d
 8012068:	0801210d 	.word	0x0801210d
 801206c:	0801210d 	.word	0x0801210d
 8012070:	0801210d 	.word	0x0801210d
 8012074:	0801210d 	.word	0x0801210d
 8012078:	080120ed 	.word	0x080120ed
 801207c:	0801210d 	.word	0x0801210d
 8012080:	0801210d 	.word	0x0801210d
 8012084:	0801210d 	.word	0x0801210d
 8012088:	0801210d 	.word	0x0801210d
 801208c:	0801210d 	.word	0x0801210d
 8012090:	0801210d 	.word	0x0801210d
 8012094:	0801210d 	.word	0x0801210d
 8012098:	080120f5 	.word	0x080120f5
 801209c:	0801210d 	.word	0x0801210d
 80120a0:	0801210d 	.word	0x0801210d
 80120a4:	0801210d 	.word	0x0801210d
 80120a8:	0801210d 	.word	0x0801210d
 80120ac:	0801210d 	.word	0x0801210d
 80120b0:	0801210d 	.word	0x0801210d
 80120b4:	0801210d 	.word	0x0801210d
 80120b8:	080120fd 	.word	0x080120fd
 80120bc:	0801210d 	.word	0x0801210d
 80120c0:	0801210d 	.word	0x0801210d
 80120c4:	0801210d 	.word	0x0801210d
 80120c8:	0801210d 	.word	0x0801210d
 80120cc:	0801210d 	.word	0x0801210d
 80120d0:	0801210d 	.word	0x0801210d
 80120d4:	0801210d 	.word	0x0801210d
 80120d8:	08012105 	.word	0x08012105
 80120dc:	2301      	movs	r3, #1
 80120de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80120e2:	e1c0      	b.n	8012466 <UART_SetConfig+0x7ae>
 80120e4:	2304      	movs	r3, #4
 80120e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80120ea:	e1bc      	b.n	8012466 <UART_SetConfig+0x7ae>
 80120ec:	2308      	movs	r3, #8
 80120ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80120f2:	e1b8      	b.n	8012466 <UART_SetConfig+0x7ae>
 80120f4:	2310      	movs	r3, #16
 80120f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80120fa:	e1b4      	b.n	8012466 <UART_SetConfig+0x7ae>
 80120fc:	2320      	movs	r3, #32
 80120fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012102:	e1b0      	b.n	8012466 <UART_SetConfig+0x7ae>
 8012104:	2340      	movs	r3, #64	; 0x40
 8012106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801210a:	e1ac      	b.n	8012466 <UART_SetConfig+0x7ae>
 801210c:	2380      	movs	r3, #128	; 0x80
 801210e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012112:	e1a8      	b.n	8012466 <UART_SetConfig+0x7ae>
 8012114:	697b      	ldr	r3, [r7, #20]
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	4a75      	ldr	r2, [pc, #468]	; (80122f0 <UART_SetConfig+0x638>)
 801211a:	4293      	cmp	r3, r2
 801211c:	d130      	bne.n	8012180 <UART_SetConfig+0x4c8>
 801211e:	4b73      	ldr	r3, [pc, #460]	; (80122ec <UART_SetConfig+0x634>)
 8012120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012122:	f003 0307 	and.w	r3, r3, #7
 8012126:	2b05      	cmp	r3, #5
 8012128:	d826      	bhi.n	8012178 <UART_SetConfig+0x4c0>
 801212a:	a201      	add	r2, pc, #4	; (adr r2, 8012130 <UART_SetConfig+0x478>)
 801212c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012130:	08012149 	.word	0x08012149
 8012134:	08012151 	.word	0x08012151
 8012138:	08012159 	.word	0x08012159
 801213c:	08012161 	.word	0x08012161
 8012140:	08012169 	.word	0x08012169
 8012144:	08012171 	.word	0x08012171
 8012148:	2300      	movs	r3, #0
 801214a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801214e:	e18a      	b.n	8012466 <UART_SetConfig+0x7ae>
 8012150:	2304      	movs	r3, #4
 8012152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012156:	e186      	b.n	8012466 <UART_SetConfig+0x7ae>
 8012158:	2308      	movs	r3, #8
 801215a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801215e:	e182      	b.n	8012466 <UART_SetConfig+0x7ae>
 8012160:	2310      	movs	r3, #16
 8012162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012166:	e17e      	b.n	8012466 <UART_SetConfig+0x7ae>
 8012168:	2320      	movs	r3, #32
 801216a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801216e:	e17a      	b.n	8012466 <UART_SetConfig+0x7ae>
 8012170:	2340      	movs	r3, #64	; 0x40
 8012172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012176:	e176      	b.n	8012466 <UART_SetConfig+0x7ae>
 8012178:	2380      	movs	r3, #128	; 0x80
 801217a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801217e:	e172      	b.n	8012466 <UART_SetConfig+0x7ae>
 8012180:	697b      	ldr	r3, [r7, #20]
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	4a5b      	ldr	r2, [pc, #364]	; (80122f4 <UART_SetConfig+0x63c>)
 8012186:	4293      	cmp	r3, r2
 8012188:	d130      	bne.n	80121ec <UART_SetConfig+0x534>
 801218a:	4b58      	ldr	r3, [pc, #352]	; (80122ec <UART_SetConfig+0x634>)
 801218c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801218e:	f003 0307 	and.w	r3, r3, #7
 8012192:	2b05      	cmp	r3, #5
 8012194:	d826      	bhi.n	80121e4 <UART_SetConfig+0x52c>
 8012196:	a201      	add	r2, pc, #4	; (adr r2, 801219c <UART_SetConfig+0x4e4>)
 8012198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801219c:	080121b5 	.word	0x080121b5
 80121a0:	080121bd 	.word	0x080121bd
 80121a4:	080121c5 	.word	0x080121c5
 80121a8:	080121cd 	.word	0x080121cd
 80121ac:	080121d5 	.word	0x080121d5
 80121b0:	080121dd 	.word	0x080121dd
 80121b4:	2300      	movs	r3, #0
 80121b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121ba:	e154      	b.n	8012466 <UART_SetConfig+0x7ae>
 80121bc:	2304      	movs	r3, #4
 80121be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121c2:	e150      	b.n	8012466 <UART_SetConfig+0x7ae>
 80121c4:	2308      	movs	r3, #8
 80121c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121ca:	e14c      	b.n	8012466 <UART_SetConfig+0x7ae>
 80121cc:	2310      	movs	r3, #16
 80121ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121d2:	e148      	b.n	8012466 <UART_SetConfig+0x7ae>
 80121d4:	2320      	movs	r3, #32
 80121d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121da:	e144      	b.n	8012466 <UART_SetConfig+0x7ae>
 80121dc:	2340      	movs	r3, #64	; 0x40
 80121de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121e2:	e140      	b.n	8012466 <UART_SetConfig+0x7ae>
 80121e4:	2380      	movs	r3, #128	; 0x80
 80121e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121ea:	e13c      	b.n	8012466 <UART_SetConfig+0x7ae>
 80121ec:	697b      	ldr	r3, [r7, #20]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	4a41      	ldr	r2, [pc, #260]	; (80122f8 <UART_SetConfig+0x640>)
 80121f2:	4293      	cmp	r3, r2
 80121f4:	f040 8082 	bne.w	80122fc <UART_SetConfig+0x644>
 80121f8:	4b3c      	ldr	r3, [pc, #240]	; (80122ec <UART_SetConfig+0x634>)
 80121fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80121fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012200:	2b28      	cmp	r3, #40	; 0x28
 8012202:	d86d      	bhi.n	80122e0 <UART_SetConfig+0x628>
 8012204:	a201      	add	r2, pc, #4	; (adr r2, 801220c <UART_SetConfig+0x554>)
 8012206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801220a:	bf00      	nop
 801220c:	080122b1 	.word	0x080122b1
 8012210:	080122e1 	.word	0x080122e1
 8012214:	080122e1 	.word	0x080122e1
 8012218:	080122e1 	.word	0x080122e1
 801221c:	080122e1 	.word	0x080122e1
 8012220:	080122e1 	.word	0x080122e1
 8012224:	080122e1 	.word	0x080122e1
 8012228:	080122e1 	.word	0x080122e1
 801222c:	080122b9 	.word	0x080122b9
 8012230:	080122e1 	.word	0x080122e1
 8012234:	080122e1 	.word	0x080122e1
 8012238:	080122e1 	.word	0x080122e1
 801223c:	080122e1 	.word	0x080122e1
 8012240:	080122e1 	.word	0x080122e1
 8012244:	080122e1 	.word	0x080122e1
 8012248:	080122e1 	.word	0x080122e1
 801224c:	080122c1 	.word	0x080122c1
 8012250:	080122e1 	.word	0x080122e1
 8012254:	080122e1 	.word	0x080122e1
 8012258:	080122e1 	.word	0x080122e1
 801225c:	080122e1 	.word	0x080122e1
 8012260:	080122e1 	.word	0x080122e1
 8012264:	080122e1 	.word	0x080122e1
 8012268:	080122e1 	.word	0x080122e1
 801226c:	080122c9 	.word	0x080122c9
 8012270:	080122e1 	.word	0x080122e1
 8012274:	080122e1 	.word	0x080122e1
 8012278:	080122e1 	.word	0x080122e1
 801227c:	080122e1 	.word	0x080122e1
 8012280:	080122e1 	.word	0x080122e1
 8012284:	080122e1 	.word	0x080122e1
 8012288:	080122e1 	.word	0x080122e1
 801228c:	080122d1 	.word	0x080122d1
 8012290:	080122e1 	.word	0x080122e1
 8012294:	080122e1 	.word	0x080122e1
 8012298:	080122e1 	.word	0x080122e1
 801229c:	080122e1 	.word	0x080122e1
 80122a0:	080122e1 	.word	0x080122e1
 80122a4:	080122e1 	.word	0x080122e1
 80122a8:	080122e1 	.word	0x080122e1
 80122ac:	080122d9 	.word	0x080122d9
 80122b0:	2301      	movs	r3, #1
 80122b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122b6:	e0d6      	b.n	8012466 <UART_SetConfig+0x7ae>
 80122b8:	2304      	movs	r3, #4
 80122ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122be:	e0d2      	b.n	8012466 <UART_SetConfig+0x7ae>
 80122c0:	2308      	movs	r3, #8
 80122c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122c6:	e0ce      	b.n	8012466 <UART_SetConfig+0x7ae>
 80122c8:	2310      	movs	r3, #16
 80122ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122ce:	e0ca      	b.n	8012466 <UART_SetConfig+0x7ae>
 80122d0:	2320      	movs	r3, #32
 80122d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122d6:	e0c6      	b.n	8012466 <UART_SetConfig+0x7ae>
 80122d8:	2340      	movs	r3, #64	; 0x40
 80122da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122de:	e0c2      	b.n	8012466 <UART_SetConfig+0x7ae>
 80122e0:	2380      	movs	r3, #128	; 0x80
 80122e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122e6:	e0be      	b.n	8012466 <UART_SetConfig+0x7ae>
 80122e8:	40011400 	.word	0x40011400
 80122ec:	58024400 	.word	0x58024400
 80122f0:	40007800 	.word	0x40007800
 80122f4:	40007c00 	.word	0x40007c00
 80122f8:	40011800 	.word	0x40011800
 80122fc:	697b      	ldr	r3, [r7, #20]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	4aad      	ldr	r2, [pc, #692]	; (80125b8 <UART_SetConfig+0x900>)
 8012302:	4293      	cmp	r3, r2
 8012304:	d176      	bne.n	80123f4 <UART_SetConfig+0x73c>
 8012306:	4bad      	ldr	r3, [pc, #692]	; (80125bc <UART_SetConfig+0x904>)
 8012308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801230a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801230e:	2b28      	cmp	r3, #40	; 0x28
 8012310:	d86c      	bhi.n	80123ec <UART_SetConfig+0x734>
 8012312:	a201      	add	r2, pc, #4	; (adr r2, 8012318 <UART_SetConfig+0x660>)
 8012314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012318:	080123bd 	.word	0x080123bd
 801231c:	080123ed 	.word	0x080123ed
 8012320:	080123ed 	.word	0x080123ed
 8012324:	080123ed 	.word	0x080123ed
 8012328:	080123ed 	.word	0x080123ed
 801232c:	080123ed 	.word	0x080123ed
 8012330:	080123ed 	.word	0x080123ed
 8012334:	080123ed 	.word	0x080123ed
 8012338:	080123c5 	.word	0x080123c5
 801233c:	080123ed 	.word	0x080123ed
 8012340:	080123ed 	.word	0x080123ed
 8012344:	080123ed 	.word	0x080123ed
 8012348:	080123ed 	.word	0x080123ed
 801234c:	080123ed 	.word	0x080123ed
 8012350:	080123ed 	.word	0x080123ed
 8012354:	080123ed 	.word	0x080123ed
 8012358:	080123cd 	.word	0x080123cd
 801235c:	080123ed 	.word	0x080123ed
 8012360:	080123ed 	.word	0x080123ed
 8012364:	080123ed 	.word	0x080123ed
 8012368:	080123ed 	.word	0x080123ed
 801236c:	080123ed 	.word	0x080123ed
 8012370:	080123ed 	.word	0x080123ed
 8012374:	080123ed 	.word	0x080123ed
 8012378:	080123d5 	.word	0x080123d5
 801237c:	080123ed 	.word	0x080123ed
 8012380:	080123ed 	.word	0x080123ed
 8012384:	080123ed 	.word	0x080123ed
 8012388:	080123ed 	.word	0x080123ed
 801238c:	080123ed 	.word	0x080123ed
 8012390:	080123ed 	.word	0x080123ed
 8012394:	080123ed 	.word	0x080123ed
 8012398:	080123dd 	.word	0x080123dd
 801239c:	080123ed 	.word	0x080123ed
 80123a0:	080123ed 	.word	0x080123ed
 80123a4:	080123ed 	.word	0x080123ed
 80123a8:	080123ed 	.word	0x080123ed
 80123ac:	080123ed 	.word	0x080123ed
 80123b0:	080123ed 	.word	0x080123ed
 80123b4:	080123ed 	.word	0x080123ed
 80123b8:	080123e5 	.word	0x080123e5
 80123bc:	2301      	movs	r3, #1
 80123be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80123c2:	e050      	b.n	8012466 <UART_SetConfig+0x7ae>
 80123c4:	2304      	movs	r3, #4
 80123c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80123ca:	e04c      	b.n	8012466 <UART_SetConfig+0x7ae>
 80123cc:	2308      	movs	r3, #8
 80123ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80123d2:	e048      	b.n	8012466 <UART_SetConfig+0x7ae>
 80123d4:	2310      	movs	r3, #16
 80123d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80123da:	e044      	b.n	8012466 <UART_SetConfig+0x7ae>
 80123dc:	2320      	movs	r3, #32
 80123de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80123e2:	e040      	b.n	8012466 <UART_SetConfig+0x7ae>
 80123e4:	2340      	movs	r3, #64	; 0x40
 80123e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80123ea:	e03c      	b.n	8012466 <UART_SetConfig+0x7ae>
 80123ec:	2380      	movs	r3, #128	; 0x80
 80123ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80123f2:	e038      	b.n	8012466 <UART_SetConfig+0x7ae>
 80123f4:	697b      	ldr	r3, [r7, #20]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	4a71      	ldr	r2, [pc, #452]	; (80125c0 <UART_SetConfig+0x908>)
 80123fa:	4293      	cmp	r3, r2
 80123fc:	d130      	bne.n	8012460 <UART_SetConfig+0x7a8>
 80123fe:	4b6f      	ldr	r3, [pc, #444]	; (80125bc <UART_SetConfig+0x904>)
 8012400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012402:	f003 0307 	and.w	r3, r3, #7
 8012406:	2b05      	cmp	r3, #5
 8012408:	d826      	bhi.n	8012458 <UART_SetConfig+0x7a0>
 801240a:	a201      	add	r2, pc, #4	; (adr r2, 8012410 <UART_SetConfig+0x758>)
 801240c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012410:	08012429 	.word	0x08012429
 8012414:	08012431 	.word	0x08012431
 8012418:	08012439 	.word	0x08012439
 801241c:	08012441 	.word	0x08012441
 8012420:	08012449 	.word	0x08012449
 8012424:	08012451 	.word	0x08012451
 8012428:	2302      	movs	r3, #2
 801242a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801242e:	e01a      	b.n	8012466 <UART_SetConfig+0x7ae>
 8012430:	2304      	movs	r3, #4
 8012432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012436:	e016      	b.n	8012466 <UART_SetConfig+0x7ae>
 8012438:	2308      	movs	r3, #8
 801243a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801243e:	e012      	b.n	8012466 <UART_SetConfig+0x7ae>
 8012440:	2310      	movs	r3, #16
 8012442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012446:	e00e      	b.n	8012466 <UART_SetConfig+0x7ae>
 8012448:	2320      	movs	r3, #32
 801244a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801244e:	e00a      	b.n	8012466 <UART_SetConfig+0x7ae>
 8012450:	2340      	movs	r3, #64	; 0x40
 8012452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012456:	e006      	b.n	8012466 <UART_SetConfig+0x7ae>
 8012458:	2380      	movs	r3, #128	; 0x80
 801245a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801245e:	e002      	b.n	8012466 <UART_SetConfig+0x7ae>
 8012460:	2380      	movs	r3, #128	; 0x80
 8012462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012466:	697b      	ldr	r3, [r7, #20]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	4a55      	ldr	r2, [pc, #340]	; (80125c0 <UART_SetConfig+0x908>)
 801246c:	4293      	cmp	r3, r2
 801246e:	f040 80f8 	bne.w	8012662 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8012472:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012476:	2b20      	cmp	r3, #32
 8012478:	dc46      	bgt.n	8012508 <UART_SetConfig+0x850>
 801247a:	2b02      	cmp	r3, #2
 801247c:	db75      	blt.n	801256a <UART_SetConfig+0x8b2>
 801247e:	3b02      	subs	r3, #2
 8012480:	2b1e      	cmp	r3, #30
 8012482:	d872      	bhi.n	801256a <UART_SetConfig+0x8b2>
 8012484:	a201      	add	r2, pc, #4	; (adr r2, 801248c <UART_SetConfig+0x7d4>)
 8012486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801248a:	bf00      	nop
 801248c:	0801250f 	.word	0x0801250f
 8012490:	0801256b 	.word	0x0801256b
 8012494:	08012517 	.word	0x08012517
 8012498:	0801256b 	.word	0x0801256b
 801249c:	0801256b 	.word	0x0801256b
 80124a0:	0801256b 	.word	0x0801256b
 80124a4:	08012527 	.word	0x08012527
 80124a8:	0801256b 	.word	0x0801256b
 80124ac:	0801256b 	.word	0x0801256b
 80124b0:	0801256b 	.word	0x0801256b
 80124b4:	0801256b 	.word	0x0801256b
 80124b8:	0801256b 	.word	0x0801256b
 80124bc:	0801256b 	.word	0x0801256b
 80124c0:	0801256b 	.word	0x0801256b
 80124c4:	08012537 	.word	0x08012537
 80124c8:	0801256b 	.word	0x0801256b
 80124cc:	0801256b 	.word	0x0801256b
 80124d0:	0801256b 	.word	0x0801256b
 80124d4:	0801256b 	.word	0x0801256b
 80124d8:	0801256b 	.word	0x0801256b
 80124dc:	0801256b 	.word	0x0801256b
 80124e0:	0801256b 	.word	0x0801256b
 80124e4:	0801256b 	.word	0x0801256b
 80124e8:	0801256b 	.word	0x0801256b
 80124ec:	0801256b 	.word	0x0801256b
 80124f0:	0801256b 	.word	0x0801256b
 80124f4:	0801256b 	.word	0x0801256b
 80124f8:	0801256b 	.word	0x0801256b
 80124fc:	0801256b 	.word	0x0801256b
 8012500:	0801256b 	.word	0x0801256b
 8012504:	0801255d 	.word	0x0801255d
 8012508:	2b40      	cmp	r3, #64	; 0x40
 801250a:	d02a      	beq.n	8012562 <UART_SetConfig+0x8aa>
 801250c:	e02d      	b.n	801256a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801250e:	f7fb f86b 	bl	800d5e8 <HAL_RCCEx_GetD3PCLK1Freq>
 8012512:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012514:	e02f      	b.n	8012576 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801251a:	4618      	mov	r0, r3
 801251c:	f7fb f87a 	bl	800d614 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012522:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012524:	e027      	b.n	8012576 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012526:	f107 0318 	add.w	r3, r7, #24
 801252a:	4618      	mov	r0, r3
 801252c:	f7fb f9c6 	bl	800d8bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012530:	69fb      	ldr	r3, [r7, #28]
 8012532:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012534:	e01f      	b.n	8012576 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012536:	4b21      	ldr	r3, [pc, #132]	; (80125bc <UART_SetConfig+0x904>)
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	f003 0320 	and.w	r3, r3, #32
 801253e:	2b00      	cmp	r3, #0
 8012540:	d009      	beq.n	8012556 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012542:	4b1e      	ldr	r3, [pc, #120]	; (80125bc <UART_SetConfig+0x904>)
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	08db      	lsrs	r3, r3, #3
 8012548:	f003 0303 	and.w	r3, r3, #3
 801254c:	4a1d      	ldr	r2, [pc, #116]	; (80125c4 <UART_SetConfig+0x90c>)
 801254e:	fa22 f303 	lsr.w	r3, r2, r3
 8012552:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012554:	e00f      	b.n	8012576 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8012556:	4b1b      	ldr	r3, [pc, #108]	; (80125c4 <UART_SetConfig+0x90c>)
 8012558:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801255a:	e00c      	b.n	8012576 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801255c:	4b1a      	ldr	r3, [pc, #104]	; (80125c8 <UART_SetConfig+0x910>)
 801255e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012560:	e009      	b.n	8012576 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012568:	e005      	b.n	8012576 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801256a:	2300      	movs	r3, #0
 801256c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801256e:	2301      	movs	r3, #1
 8012570:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8012574:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8012576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012578:	2b00      	cmp	r3, #0
 801257a:	f000 81ee 	beq.w	801295a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801257e:	697b      	ldr	r3, [r7, #20]
 8012580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012582:	4a12      	ldr	r2, [pc, #72]	; (80125cc <UART_SetConfig+0x914>)
 8012584:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012588:	461a      	mov	r2, r3
 801258a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801258c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012590:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012592:	697b      	ldr	r3, [r7, #20]
 8012594:	685a      	ldr	r2, [r3, #4]
 8012596:	4613      	mov	r3, r2
 8012598:	005b      	lsls	r3, r3, #1
 801259a:	4413      	add	r3, r2
 801259c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801259e:	429a      	cmp	r2, r3
 80125a0:	d305      	bcc.n	80125ae <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80125a2:	697b      	ldr	r3, [r7, #20]
 80125a4:	685b      	ldr	r3, [r3, #4]
 80125a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80125a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125aa:	429a      	cmp	r2, r3
 80125ac:	d910      	bls.n	80125d0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80125ae:	2301      	movs	r3, #1
 80125b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80125b4:	e1d1      	b.n	801295a <UART_SetConfig+0xca2>
 80125b6:	bf00      	nop
 80125b8:	40011c00 	.word	0x40011c00
 80125bc:	58024400 	.word	0x58024400
 80125c0:	58000c00 	.word	0x58000c00
 80125c4:	03d09000 	.word	0x03d09000
 80125c8:	003d0900 	.word	0x003d0900
 80125cc:	08020158 	.word	0x08020158
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80125d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125d2:	2200      	movs	r2, #0
 80125d4:	60bb      	str	r3, [r7, #8]
 80125d6:	60fa      	str	r2, [r7, #12]
 80125d8:	697b      	ldr	r3, [r7, #20]
 80125da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125dc:	4ac0      	ldr	r2, [pc, #768]	; (80128e0 <UART_SetConfig+0xc28>)
 80125de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80125e2:	b29b      	uxth	r3, r3
 80125e4:	2200      	movs	r2, #0
 80125e6:	603b      	str	r3, [r7, #0]
 80125e8:	607a      	str	r2, [r7, #4]
 80125ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80125ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80125f2:	f7ee f8b1 	bl	8000758 <__aeabi_uldivmod>
 80125f6:	4602      	mov	r2, r0
 80125f8:	460b      	mov	r3, r1
 80125fa:	4610      	mov	r0, r2
 80125fc:	4619      	mov	r1, r3
 80125fe:	f04f 0200 	mov.w	r2, #0
 8012602:	f04f 0300 	mov.w	r3, #0
 8012606:	020b      	lsls	r3, r1, #8
 8012608:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801260c:	0202      	lsls	r2, r0, #8
 801260e:	6979      	ldr	r1, [r7, #20]
 8012610:	6849      	ldr	r1, [r1, #4]
 8012612:	0849      	lsrs	r1, r1, #1
 8012614:	2000      	movs	r0, #0
 8012616:	460c      	mov	r4, r1
 8012618:	4605      	mov	r5, r0
 801261a:	eb12 0804 	adds.w	r8, r2, r4
 801261e:	eb43 0905 	adc.w	r9, r3, r5
 8012622:	697b      	ldr	r3, [r7, #20]
 8012624:	685b      	ldr	r3, [r3, #4]
 8012626:	2200      	movs	r2, #0
 8012628:	469a      	mov	sl, r3
 801262a:	4693      	mov	fp, r2
 801262c:	4652      	mov	r2, sl
 801262e:	465b      	mov	r3, fp
 8012630:	4640      	mov	r0, r8
 8012632:	4649      	mov	r1, r9
 8012634:	f7ee f890 	bl	8000758 <__aeabi_uldivmod>
 8012638:	4602      	mov	r2, r0
 801263a:	460b      	mov	r3, r1
 801263c:	4613      	mov	r3, r2
 801263e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012642:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012646:	d308      	bcc.n	801265a <UART_SetConfig+0x9a2>
 8012648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801264a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801264e:	d204      	bcs.n	801265a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8012650:	697b      	ldr	r3, [r7, #20]
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012656:	60da      	str	r2, [r3, #12]
 8012658:	e17f      	b.n	801295a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801265a:	2301      	movs	r3, #1
 801265c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8012660:	e17b      	b.n	801295a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012662:	697b      	ldr	r3, [r7, #20]
 8012664:	69db      	ldr	r3, [r3, #28]
 8012666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801266a:	f040 80bd 	bne.w	80127e8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801266e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012672:	2b20      	cmp	r3, #32
 8012674:	dc48      	bgt.n	8012708 <UART_SetConfig+0xa50>
 8012676:	2b00      	cmp	r3, #0
 8012678:	db7b      	blt.n	8012772 <UART_SetConfig+0xaba>
 801267a:	2b20      	cmp	r3, #32
 801267c:	d879      	bhi.n	8012772 <UART_SetConfig+0xaba>
 801267e:	a201      	add	r2, pc, #4	; (adr r2, 8012684 <UART_SetConfig+0x9cc>)
 8012680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012684:	0801270f 	.word	0x0801270f
 8012688:	08012717 	.word	0x08012717
 801268c:	08012773 	.word	0x08012773
 8012690:	08012773 	.word	0x08012773
 8012694:	0801271f 	.word	0x0801271f
 8012698:	08012773 	.word	0x08012773
 801269c:	08012773 	.word	0x08012773
 80126a0:	08012773 	.word	0x08012773
 80126a4:	0801272f 	.word	0x0801272f
 80126a8:	08012773 	.word	0x08012773
 80126ac:	08012773 	.word	0x08012773
 80126b0:	08012773 	.word	0x08012773
 80126b4:	08012773 	.word	0x08012773
 80126b8:	08012773 	.word	0x08012773
 80126bc:	08012773 	.word	0x08012773
 80126c0:	08012773 	.word	0x08012773
 80126c4:	0801273f 	.word	0x0801273f
 80126c8:	08012773 	.word	0x08012773
 80126cc:	08012773 	.word	0x08012773
 80126d0:	08012773 	.word	0x08012773
 80126d4:	08012773 	.word	0x08012773
 80126d8:	08012773 	.word	0x08012773
 80126dc:	08012773 	.word	0x08012773
 80126e0:	08012773 	.word	0x08012773
 80126e4:	08012773 	.word	0x08012773
 80126e8:	08012773 	.word	0x08012773
 80126ec:	08012773 	.word	0x08012773
 80126f0:	08012773 	.word	0x08012773
 80126f4:	08012773 	.word	0x08012773
 80126f8:	08012773 	.word	0x08012773
 80126fc:	08012773 	.word	0x08012773
 8012700:	08012773 	.word	0x08012773
 8012704:	08012765 	.word	0x08012765
 8012708:	2b40      	cmp	r3, #64	; 0x40
 801270a:	d02e      	beq.n	801276a <UART_SetConfig+0xab2>
 801270c:	e031      	b.n	8012772 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801270e:	f7f9 f8cd 	bl	800b8ac <HAL_RCC_GetPCLK1Freq>
 8012712:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012714:	e033      	b.n	801277e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012716:	f7f9 f8df 	bl	800b8d8 <HAL_RCC_GetPCLK2Freq>
 801271a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801271c:	e02f      	b.n	801277e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801271e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012722:	4618      	mov	r0, r3
 8012724:	f7fa ff76 	bl	800d614 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801272a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801272c:	e027      	b.n	801277e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801272e:	f107 0318 	add.w	r3, r7, #24
 8012732:	4618      	mov	r0, r3
 8012734:	f7fb f8c2 	bl	800d8bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012738:	69fb      	ldr	r3, [r7, #28]
 801273a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801273c:	e01f      	b.n	801277e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801273e:	4b69      	ldr	r3, [pc, #420]	; (80128e4 <UART_SetConfig+0xc2c>)
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	f003 0320 	and.w	r3, r3, #32
 8012746:	2b00      	cmp	r3, #0
 8012748:	d009      	beq.n	801275e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801274a:	4b66      	ldr	r3, [pc, #408]	; (80128e4 <UART_SetConfig+0xc2c>)
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	08db      	lsrs	r3, r3, #3
 8012750:	f003 0303 	and.w	r3, r3, #3
 8012754:	4a64      	ldr	r2, [pc, #400]	; (80128e8 <UART_SetConfig+0xc30>)
 8012756:	fa22 f303 	lsr.w	r3, r2, r3
 801275a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801275c:	e00f      	b.n	801277e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801275e:	4b62      	ldr	r3, [pc, #392]	; (80128e8 <UART_SetConfig+0xc30>)
 8012760:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012762:	e00c      	b.n	801277e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012764:	4b61      	ldr	r3, [pc, #388]	; (80128ec <UART_SetConfig+0xc34>)
 8012766:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012768:	e009      	b.n	801277e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801276a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801276e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012770:	e005      	b.n	801277e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8012772:	2300      	movs	r3, #0
 8012774:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8012776:	2301      	movs	r3, #1
 8012778:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801277c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801277e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012780:	2b00      	cmp	r3, #0
 8012782:	f000 80ea 	beq.w	801295a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012786:	697b      	ldr	r3, [r7, #20]
 8012788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801278a:	4a55      	ldr	r2, [pc, #340]	; (80128e0 <UART_SetConfig+0xc28>)
 801278c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012790:	461a      	mov	r2, r3
 8012792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012794:	fbb3 f3f2 	udiv	r3, r3, r2
 8012798:	005a      	lsls	r2, r3, #1
 801279a:	697b      	ldr	r3, [r7, #20]
 801279c:	685b      	ldr	r3, [r3, #4]
 801279e:	085b      	lsrs	r3, r3, #1
 80127a0:	441a      	add	r2, r3
 80127a2:	697b      	ldr	r3, [r7, #20]
 80127a4:	685b      	ldr	r3, [r3, #4]
 80127a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80127aa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80127ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ae:	2b0f      	cmp	r3, #15
 80127b0:	d916      	bls.n	80127e0 <UART_SetConfig+0xb28>
 80127b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80127b8:	d212      	bcs.n	80127e0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80127ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127bc:	b29b      	uxth	r3, r3
 80127be:	f023 030f 	bic.w	r3, r3, #15
 80127c2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80127c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127c6:	085b      	lsrs	r3, r3, #1
 80127c8:	b29b      	uxth	r3, r3
 80127ca:	f003 0307 	and.w	r3, r3, #7
 80127ce:	b29a      	uxth	r2, r3
 80127d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80127d2:	4313      	orrs	r3, r2
 80127d4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80127d6:	697b      	ldr	r3, [r7, #20]
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80127dc:	60da      	str	r2, [r3, #12]
 80127de:	e0bc      	b.n	801295a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80127e0:	2301      	movs	r3, #1
 80127e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80127e6:	e0b8      	b.n	801295a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80127e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80127ec:	2b20      	cmp	r3, #32
 80127ee:	dc4b      	bgt.n	8012888 <UART_SetConfig+0xbd0>
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	f2c0 8087 	blt.w	8012904 <UART_SetConfig+0xc4c>
 80127f6:	2b20      	cmp	r3, #32
 80127f8:	f200 8084 	bhi.w	8012904 <UART_SetConfig+0xc4c>
 80127fc:	a201      	add	r2, pc, #4	; (adr r2, 8012804 <UART_SetConfig+0xb4c>)
 80127fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012802:	bf00      	nop
 8012804:	0801288f 	.word	0x0801288f
 8012808:	08012897 	.word	0x08012897
 801280c:	08012905 	.word	0x08012905
 8012810:	08012905 	.word	0x08012905
 8012814:	0801289f 	.word	0x0801289f
 8012818:	08012905 	.word	0x08012905
 801281c:	08012905 	.word	0x08012905
 8012820:	08012905 	.word	0x08012905
 8012824:	080128af 	.word	0x080128af
 8012828:	08012905 	.word	0x08012905
 801282c:	08012905 	.word	0x08012905
 8012830:	08012905 	.word	0x08012905
 8012834:	08012905 	.word	0x08012905
 8012838:	08012905 	.word	0x08012905
 801283c:	08012905 	.word	0x08012905
 8012840:	08012905 	.word	0x08012905
 8012844:	080128bf 	.word	0x080128bf
 8012848:	08012905 	.word	0x08012905
 801284c:	08012905 	.word	0x08012905
 8012850:	08012905 	.word	0x08012905
 8012854:	08012905 	.word	0x08012905
 8012858:	08012905 	.word	0x08012905
 801285c:	08012905 	.word	0x08012905
 8012860:	08012905 	.word	0x08012905
 8012864:	08012905 	.word	0x08012905
 8012868:	08012905 	.word	0x08012905
 801286c:	08012905 	.word	0x08012905
 8012870:	08012905 	.word	0x08012905
 8012874:	08012905 	.word	0x08012905
 8012878:	08012905 	.word	0x08012905
 801287c:	08012905 	.word	0x08012905
 8012880:	08012905 	.word	0x08012905
 8012884:	080128f7 	.word	0x080128f7
 8012888:	2b40      	cmp	r3, #64	; 0x40
 801288a:	d037      	beq.n	80128fc <UART_SetConfig+0xc44>
 801288c:	e03a      	b.n	8012904 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801288e:	f7f9 f80d 	bl	800b8ac <HAL_RCC_GetPCLK1Freq>
 8012892:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012894:	e03c      	b.n	8012910 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012896:	f7f9 f81f 	bl	800b8d8 <HAL_RCC_GetPCLK2Freq>
 801289a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801289c:	e038      	b.n	8012910 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801289e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80128a2:	4618      	mov	r0, r3
 80128a4:	f7fa feb6 	bl	800d614 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80128a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80128ac:	e030      	b.n	8012910 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80128ae:	f107 0318 	add.w	r3, r7, #24
 80128b2:	4618      	mov	r0, r3
 80128b4:	f7fb f802 	bl	800d8bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80128b8:	69fb      	ldr	r3, [r7, #28]
 80128ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80128bc:	e028      	b.n	8012910 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80128be:	4b09      	ldr	r3, [pc, #36]	; (80128e4 <UART_SetConfig+0xc2c>)
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	f003 0320 	and.w	r3, r3, #32
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d012      	beq.n	80128f0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80128ca:	4b06      	ldr	r3, [pc, #24]	; (80128e4 <UART_SetConfig+0xc2c>)
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	08db      	lsrs	r3, r3, #3
 80128d0:	f003 0303 	and.w	r3, r3, #3
 80128d4:	4a04      	ldr	r2, [pc, #16]	; (80128e8 <UART_SetConfig+0xc30>)
 80128d6:	fa22 f303 	lsr.w	r3, r2, r3
 80128da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80128dc:	e018      	b.n	8012910 <UART_SetConfig+0xc58>
 80128de:	bf00      	nop
 80128e0:	08020158 	.word	0x08020158
 80128e4:	58024400 	.word	0x58024400
 80128e8:	03d09000 	.word	0x03d09000
 80128ec:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80128f0:	4b24      	ldr	r3, [pc, #144]	; (8012984 <UART_SetConfig+0xccc>)
 80128f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80128f4:	e00c      	b.n	8012910 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80128f6:	4b24      	ldr	r3, [pc, #144]	; (8012988 <UART_SetConfig+0xcd0>)
 80128f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80128fa:	e009      	b.n	8012910 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80128fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012900:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012902:	e005      	b.n	8012910 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8012904:	2300      	movs	r3, #0
 8012906:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8012908:	2301      	movs	r3, #1
 801290a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801290e:	bf00      	nop
    }

    if (pclk != 0U)
 8012910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012912:	2b00      	cmp	r3, #0
 8012914:	d021      	beq.n	801295a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012916:	697b      	ldr	r3, [r7, #20]
 8012918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801291a:	4a1c      	ldr	r2, [pc, #112]	; (801298c <UART_SetConfig+0xcd4>)
 801291c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012920:	461a      	mov	r2, r3
 8012922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012924:	fbb3 f2f2 	udiv	r2, r3, r2
 8012928:	697b      	ldr	r3, [r7, #20]
 801292a:	685b      	ldr	r3, [r3, #4]
 801292c:	085b      	lsrs	r3, r3, #1
 801292e:	441a      	add	r2, r3
 8012930:	697b      	ldr	r3, [r7, #20]
 8012932:	685b      	ldr	r3, [r3, #4]
 8012934:	fbb2 f3f3 	udiv	r3, r2, r3
 8012938:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801293a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801293c:	2b0f      	cmp	r3, #15
 801293e:	d909      	bls.n	8012954 <UART_SetConfig+0xc9c>
 8012940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012946:	d205      	bcs.n	8012954 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801294a:	b29a      	uxth	r2, r3
 801294c:	697b      	ldr	r3, [r7, #20]
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	60da      	str	r2, [r3, #12]
 8012952:	e002      	b.n	801295a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8012954:	2301      	movs	r3, #1
 8012956:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801295a:	697b      	ldr	r3, [r7, #20]
 801295c:	2201      	movs	r2, #1
 801295e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8012962:	697b      	ldr	r3, [r7, #20]
 8012964:	2201      	movs	r2, #1
 8012966:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801296a:	697b      	ldr	r3, [r7, #20]
 801296c:	2200      	movs	r2, #0
 801296e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8012970:	697b      	ldr	r3, [r7, #20]
 8012972:	2200      	movs	r2, #0
 8012974:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8012976:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 801297a:	4618      	mov	r0, r3
 801297c:	3748      	adds	r7, #72	; 0x48
 801297e:	46bd      	mov	sp, r7
 8012980:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012984:	03d09000 	.word	0x03d09000
 8012988:	003d0900 	.word	0x003d0900
 801298c:	08020158 	.word	0x08020158

08012990 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012990:	b480      	push	{r7}
 8012992:	b083      	sub	sp, #12
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801299c:	f003 0301 	and.w	r3, r3, #1
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d00a      	beq.n	80129ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	685b      	ldr	r3, [r3, #4]
 80129aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	430a      	orrs	r2, r1
 80129b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129be:	f003 0302 	and.w	r3, r3, #2
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d00a      	beq.n	80129dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	685b      	ldr	r3, [r3, #4]
 80129cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	430a      	orrs	r2, r1
 80129da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129e0:	f003 0304 	and.w	r3, r3, #4
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d00a      	beq.n	80129fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	685b      	ldr	r3, [r3, #4]
 80129ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	430a      	orrs	r2, r1
 80129fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a02:	f003 0308 	and.w	r3, r3, #8
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d00a      	beq.n	8012a20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	685b      	ldr	r3, [r3, #4]
 8012a10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	430a      	orrs	r2, r1
 8012a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a24:	f003 0310 	and.w	r3, r3, #16
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d00a      	beq.n	8012a42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	689b      	ldr	r3, [r3, #8]
 8012a32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	430a      	orrs	r2, r1
 8012a40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a46:	f003 0320 	and.w	r3, r3, #32
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d00a      	beq.n	8012a64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	689b      	ldr	r3, [r3, #8]
 8012a54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	430a      	orrs	r2, r1
 8012a62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d01a      	beq.n	8012aa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	685b      	ldr	r3, [r3, #4]
 8012a76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	430a      	orrs	r2, r1
 8012a84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012a8e:	d10a      	bne.n	8012aa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	685b      	ldr	r3, [r3, #4]
 8012a96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	430a      	orrs	r2, r1
 8012aa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d00a      	beq.n	8012ac8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	685b      	ldr	r3, [r3, #4]
 8012ab8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	430a      	orrs	r2, r1
 8012ac6:	605a      	str	r2, [r3, #4]
  }
}
 8012ac8:	bf00      	nop
 8012aca:	370c      	adds	r7, #12
 8012acc:	46bd      	mov	sp, r7
 8012ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad2:	4770      	bx	lr

08012ad4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b098      	sub	sp, #96	; 0x60
 8012ad8:	af02      	add	r7, sp, #8
 8012ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	2200      	movs	r2, #0
 8012ae0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012ae4:	f7f1 fbd6 	bl	8004294 <HAL_GetTick>
 8012ae8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	f003 0308 	and.w	r3, r3, #8
 8012af4:	2b08      	cmp	r3, #8
 8012af6:	d12f      	bne.n	8012b58 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012af8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012afc:	9300      	str	r3, [sp, #0]
 8012afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b00:	2200      	movs	r2, #0
 8012b02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012b06:	6878      	ldr	r0, [r7, #4]
 8012b08:	f000 f88e 	bl	8012c28 <UART_WaitOnFlagUntilTimeout>
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d022      	beq.n	8012b58 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b1a:	e853 3f00 	ldrex	r3, [r3]
 8012b1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012b26:	653b      	str	r3, [r7, #80]	; 0x50
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	461a      	mov	r2, r3
 8012b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b30:	647b      	str	r3, [r7, #68]	; 0x44
 8012b32:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012b36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012b38:	e841 2300 	strex	r3, r2, [r1]
 8012b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d1e6      	bne.n	8012b12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	2220      	movs	r2, #32
 8012b48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	2200      	movs	r2, #0
 8012b50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012b54:	2303      	movs	r3, #3
 8012b56:	e063      	b.n	8012c20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	f003 0304 	and.w	r3, r3, #4
 8012b62:	2b04      	cmp	r3, #4
 8012b64:	d149      	bne.n	8012bfa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012b66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012b6a:	9300      	str	r3, [sp, #0]
 8012b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b6e:	2200      	movs	r2, #0
 8012b70:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012b74:	6878      	ldr	r0, [r7, #4]
 8012b76:	f000 f857 	bl	8012c28 <UART_WaitOnFlagUntilTimeout>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d03c      	beq.n	8012bfa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b88:	e853 3f00 	ldrex	r3, [r3]
 8012b8c:	623b      	str	r3, [r7, #32]
   return(result);
 8012b8e:	6a3b      	ldr	r3, [r7, #32]
 8012b90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012b94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	461a      	mov	r2, r3
 8012b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b9e:	633b      	str	r3, [r7, #48]	; 0x30
 8012ba0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ba2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ba6:	e841 2300 	strex	r3, r2, [r1]
 8012baa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d1e6      	bne.n	8012b80 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	3308      	adds	r3, #8
 8012bb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012bba:	693b      	ldr	r3, [r7, #16]
 8012bbc:	e853 3f00 	ldrex	r3, [r3]
 8012bc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	f023 0301 	bic.w	r3, r3, #1
 8012bc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	3308      	adds	r3, #8
 8012bd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012bd2:	61fa      	str	r2, [r7, #28]
 8012bd4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bd6:	69b9      	ldr	r1, [r7, #24]
 8012bd8:	69fa      	ldr	r2, [r7, #28]
 8012bda:	e841 2300 	strex	r3, r2, [r1]
 8012bde:	617b      	str	r3, [r7, #20]
   return(result);
 8012be0:	697b      	ldr	r3, [r7, #20]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d1e5      	bne.n	8012bb2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	2220      	movs	r2, #32
 8012bea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	2200      	movs	r2, #0
 8012bf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012bf6:	2303      	movs	r3, #3
 8012bf8:	e012      	b.n	8012c20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	2220      	movs	r2, #32
 8012bfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	2220      	movs	r2, #32
 8012c06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	2200      	movs	r2, #0
 8012c0e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	2200      	movs	r2, #0
 8012c14:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	2200      	movs	r2, #0
 8012c1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012c1e:	2300      	movs	r3, #0
}
 8012c20:	4618      	mov	r0, r3
 8012c22:	3758      	adds	r7, #88	; 0x58
 8012c24:	46bd      	mov	sp, r7
 8012c26:	bd80      	pop	{r7, pc}

08012c28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b084      	sub	sp, #16
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	60f8      	str	r0, [r7, #12]
 8012c30:	60b9      	str	r1, [r7, #8]
 8012c32:	603b      	str	r3, [r7, #0]
 8012c34:	4613      	mov	r3, r2
 8012c36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012c38:	e049      	b.n	8012cce <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012c3a:	69bb      	ldr	r3, [r7, #24]
 8012c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c40:	d045      	beq.n	8012cce <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012c42:	f7f1 fb27 	bl	8004294 <HAL_GetTick>
 8012c46:	4602      	mov	r2, r0
 8012c48:	683b      	ldr	r3, [r7, #0]
 8012c4a:	1ad3      	subs	r3, r2, r3
 8012c4c:	69ba      	ldr	r2, [r7, #24]
 8012c4e:	429a      	cmp	r2, r3
 8012c50:	d302      	bcc.n	8012c58 <UART_WaitOnFlagUntilTimeout+0x30>
 8012c52:	69bb      	ldr	r3, [r7, #24]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d101      	bne.n	8012c5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012c58:	2303      	movs	r3, #3
 8012c5a:	e048      	b.n	8012cee <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	f003 0304 	and.w	r3, r3, #4
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d031      	beq.n	8012cce <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	69db      	ldr	r3, [r3, #28]
 8012c70:	f003 0308 	and.w	r3, r3, #8
 8012c74:	2b08      	cmp	r3, #8
 8012c76:	d110      	bne.n	8012c9a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	2208      	movs	r2, #8
 8012c7e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8012c80:	68f8      	ldr	r0, [r7, #12]
 8012c82:	f000 f839 	bl	8012cf8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	2208      	movs	r2, #8
 8012c8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	2200      	movs	r2, #0
 8012c92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8012c96:	2301      	movs	r3, #1
 8012c98:	e029      	b.n	8012cee <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	69db      	ldr	r3, [r3, #28]
 8012ca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012ca4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012ca8:	d111      	bne.n	8012cce <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012cb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012cb4:	68f8      	ldr	r0, [r7, #12]
 8012cb6:	f000 f81f 	bl	8012cf8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	2220      	movs	r2, #32
 8012cbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	2200      	movs	r2, #0
 8012cc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8012cca:	2303      	movs	r3, #3
 8012ccc:	e00f      	b.n	8012cee <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	69da      	ldr	r2, [r3, #28]
 8012cd4:	68bb      	ldr	r3, [r7, #8]
 8012cd6:	4013      	ands	r3, r2
 8012cd8:	68ba      	ldr	r2, [r7, #8]
 8012cda:	429a      	cmp	r2, r3
 8012cdc:	bf0c      	ite	eq
 8012cde:	2301      	moveq	r3, #1
 8012ce0:	2300      	movne	r3, #0
 8012ce2:	b2db      	uxtb	r3, r3
 8012ce4:	461a      	mov	r2, r3
 8012ce6:	79fb      	ldrb	r3, [r7, #7]
 8012ce8:	429a      	cmp	r2, r3
 8012cea:	d0a6      	beq.n	8012c3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012cec:	2300      	movs	r3, #0
}
 8012cee:	4618      	mov	r0, r3
 8012cf0:	3710      	adds	r7, #16
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	bd80      	pop	{r7, pc}
	...

08012cf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012cf8:	b480      	push	{r7}
 8012cfa:	b095      	sub	sp, #84	; 0x54
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d08:	e853 3f00 	ldrex	r3, [r3]
 8012d0c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012d14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	461a      	mov	r2, r3
 8012d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d1e:	643b      	str	r3, [r7, #64]	; 0x40
 8012d20:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012d24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012d26:	e841 2300 	strex	r3, r2, [r1]
 8012d2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d1e6      	bne.n	8012d00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	3308      	adds	r3, #8
 8012d38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d3a:	6a3b      	ldr	r3, [r7, #32]
 8012d3c:	e853 3f00 	ldrex	r3, [r3]
 8012d40:	61fb      	str	r3, [r7, #28]
   return(result);
 8012d42:	69fa      	ldr	r2, [r7, #28]
 8012d44:	4b1e      	ldr	r3, [pc, #120]	; (8012dc0 <UART_EndRxTransfer+0xc8>)
 8012d46:	4013      	ands	r3, r2
 8012d48:	64bb      	str	r3, [r7, #72]	; 0x48
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	3308      	adds	r3, #8
 8012d50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012d52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012d54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d5a:	e841 2300 	strex	r3, r2, [r1]
 8012d5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d1e5      	bne.n	8012d32 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d6a:	2b01      	cmp	r3, #1
 8012d6c:	d118      	bne.n	8012da0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	e853 3f00 	ldrex	r3, [r3]
 8012d7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8012d7c:	68bb      	ldr	r3, [r7, #8]
 8012d7e:	f023 0310 	bic.w	r3, r3, #16
 8012d82:	647b      	str	r3, [r7, #68]	; 0x44
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	461a      	mov	r2, r3
 8012d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d8c:	61bb      	str	r3, [r7, #24]
 8012d8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d90:	6979      	ldr	r1, [r7, #20]
 8012d92:	69ba      	ldr	r2, [r7, #24]
 8012d94:	e841 2300 	strex	r3, r2, [r1]
 8012d98:	613b      	str	r3, [r7, #16]
   return(result);
 8012d9a:	693b      	ldr	r3, [r7, #16]
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d1e6      	bne.n	8012d6e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	2220      	movs	r2, #32
 8012da4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	2200      	movs	r2, #0
 8012dac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	2200      	movs	r2, #0
 8012db2:	675a      	str	r2, [r3, #116]	; 0x74
}
 8012db4:	bf00      	nop
 8012db6:	3754      	adds	r7, #84	; 0x54
 8012db8:	46bd      	mov	sp, r7
 8012dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dbe:	4770      	bx	lr
 8012dc0:	effffffe 	.word	0xeffffffe

08012dc4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012dc4:	b480      	push	{r7}
 8012dc6:	b085      	sub	sp, #20
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012dd2:	2b01      	cmp	r3, #1
 8012dd4:	d101      	bne.n	8012dda <HAL_UARTEx_DisableFifoMode+0x16>
 8012dd6:	2302      	movs	r3, #2
 8012dd8:	e027      	b.n	8012e2a <HAL_UARTEx_DisableFifoMode+0x66>
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	2201      	movs	r2, #1
 8012dde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	2224      	movs	r2, #36	; 0x24
 8012de6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	681a      	ldr	r2, [r3, #0]
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	f022 0201 	bic.w	r2, r2, #1
 8012e00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012e08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	2200      	movs	r2, #0
 8012e0e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	68fa      	ldr	r2, [r7, #12]
 8012e16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	2220      	movs	r2, #32
 8012e1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	2200      	movs	r2, #0
 8012e24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012e28:	2300      	movs	r3, #0
}
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	3714      	adds	r7, #20
 8012e2e:	46bd      	mov	sp, r7
 8012e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e34:	4770      	bx	lr

08012e36 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012e36:	b580      	push	{r7, lr}
 8012e38:	b084      	sub	sp, #16
 8012e3a:	af00      	add	r7, sp, #0
 8012e3c:	6078      	str	r0, [r7, #4]
 8012e3e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012e46:	2b01      	cmp	r3, #1
 8012e48:	d101      	bne.n	8012e4e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012e4a:	2302      	movs	r3, #2
 8012e4c:	e02d      	b.n	8012eaa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	2201      	movs	r2, #1
 8012e52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	2224      	movs	r2, #36	; 0x24
 8012e5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	681a      	ldr	r2, [r3, #0]
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	f022 0201 	bic.w	r2, r2, #1
 8012e74:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	689b      	ldr	r3, [r3, #8]
 8012e7c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	683a      	ldr	r2, [r7, #0]
 8012e86:	430a      	orrs	r2, r1
 8012e88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012e8a:	6878      	ldr	r0, [r7, #4]
 8012e8c:	f000 f850 	bl	8012f30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	68fa      	ldr	r2, [r7, #12]
 8012e96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	2220      	movs	r2, #32
 8012e9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	2200      	movs	r2, #0
 8012ea4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012ea8:	2300      	movs	r3, #0
}
 8012eaa:	4618      	mov	r0, r3
 8012eac:	3710      	adds	r7, #16
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	bd80      	pop	{r7, pc}

08012eb2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012eb2:	b580      	push	{r7, lr}
 8012eb4:	b084      	sub	sp, #16
 8012eb6:	af00      	add	r7, sp, #0
 8012eb8:	6078      	str	r0, [r7, #4]
 8012eba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012ec2:	2b01      	cmp	r3, #1
 8012ec4:	d101      	bne.n	8012eca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012ec6:	2302      	movs	r3, #2
 8012ec8:	e02d      	b.n	8012f26 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	2201      	movs	r2, #1
 8012ece:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	2224      	movs	r2, #36	; 0x24
 8012ed6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	681a      	ldr	r2, [r3, #0]
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	f022 0201 	bic.w	r2, r2, #1
 8012ef0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	689b      	ldr	r3, [r3, #8]
 8012ef8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	683a      	ldr	r2, [r7, #0]
 8012f02:	430a      	orrs	r2, r1
 8012f04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012f06:	6878      	ldr	r0, [r7, #4]
 8012f08:	f000 f812 	bl	8012f30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	68fa      	ldr	r2, [r7, #12]
 8012f12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	2220      	movs	r2, #32
 8012f18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	2200      	movs	r2, #0
 8012f20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012f24:	2300      	movs	r3, #0
}
 8012f26:	4618      	mov	r0, r3
 8012f28:	3710      	adds	r7, #16
 8012f2a:	46bd      	mov	sp, r7
 8012f2c:	bd80      	pop	{r7, pc}
	...

08012f30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012f30:	b480      	push	{r7}
 8012f32:	b085      	sub	sp, #20
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d108      	bne.n	8012f52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	2201      	movs	r2, #1
 8012f44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	2201      	movs	r2, #1
 8012f4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012f50:	e031      	b.n	8012fb6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012f52:	2310      	movs	r3, #16
 8012f54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012f56:	2310      	movs	r3, #16
 8012f58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	689b      	ldr	r3, [r3, #8]
 8012f60:	0e5b      	lsrs	r3, r3, #25
 8012f62:	b2db      	uxtb	r3, r3
 8012f64:	f003 0307 	and.w	r3, r3, #7
 8012f68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	689b      	ldr	r3, [r3, #8]
 8012f70:	0f5b      	lsrs	r3, r3, #29
 8012f72:	b2db      	uxtb	r3, r3
 8012f74:	f003 0307 	and.w	r3, r3, #7
 8012f78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012f7a:	7bbb      	ldrb	r3, [r7, #14]
 8012f7c:	7b3a      	ldrb	r2, [r7, #12]
 8012f7e:	4911      	ldr	r1, [pc, #68]	; (8012fc4 <UARTEx_SetNbDataToProcess+0x94>)
 8012f80:	5c8a      	ldrb	r2, [r1, r2]
 8012f82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012f86:	7b3a      	ldrb	r2, [r7, #12]
 8012f88:	490f      	ldr	r1, [pc, #60]	; (8012fc8 <UARTEx_SetNbDataToProcess+0x98>)
 8012f8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012f8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012f90:	b29a      	uxth	r2, r3
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012f98:	7bfb      	ldrb	r3, [r7, #15]
 8012f9a:	7b7a      	ldrb	r2, [r7, #13]
 8012f9c:	4909      	ldr	r1, [pc, #36]	; (8012fc4 <UARTEx_SetNbDataToProcess+0x94>)
 8012f9e:	5c8a      	ldrb	r2, [r1, r2]
 8012fa0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012fa4:	7b7a      	ldrb	r2, [r7, #13]
 8012fa6:	4908      	ldr	r1, [pc, #32]	; (8012fc8 <UARTEx_SetNbDataToProcess+0x98>)
 8012fa8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012faa:	fb93 f3f2 	sdiv	r3, r3, r2
 8012fae:	b29a      	uxth	r2, r3
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012fb6:	bf00      	nop
 8012fb8:	3714      	adds	r7, #20
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc0:	4770      	bx	lr
 8012fc2:	bf00      	nop
 8012fc4:	08020170 	.word	0x08020170
 8012fc8:	08020178 	.word	0x08020178

08012fcc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012fcc:	b084      	sub	sp, #16
 8012fce:	b480      	push	{r7}
 8012fd0:	b085      	sub	sp, #20
 8012fd2:	af00      	add	r7, sp, #0
 8012fd4:	6078      	str	r0, [r7, #4]
 8012fd6:	f107 001c 	add.w	r0, r7, #28
 8012fda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012fde:	2300      	movs	r3, #0
 8012fe0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8012fe2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8012fe4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8012fe6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8012fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8012fea:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8012fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8012fee:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8012ff2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8012ff4:	68fa      	ldr	r2, [r7, #12]
 8012ff6:	4313      	orrs	r3, r2
 8012ff8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	685a      	ldr	r2, [r3, #4]
 8012ffe:	4b07      	ldr	r3, [pc, #28]	; (801301c <SDMMC_Init+0x50>)
 8013000:	4013      	ands	r3, r2
 8013002:	68fa      	ldr	r2, [r7, #12]
 8013004:	431a      	orrs	r2, r3
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801300a:	2300      	movs	r3, #0
}
 801300c:	4618      	mov	r0, r3
 801300e:	3714      	adds	r7, #20
 8013010:	46bd      	mov	sp, r7
 8013012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013016:	b004      	add	sp, #16
 8013018:	4770      	bx	lr
 801301a:	bf00      	nop
 801301c:	ffc02c00 	.word	0xffc02c00

08013020 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8013020:	b480      	push	{r7}
 8013022:	b083      	sub	sp, #12
 8013024:	af00      	add	r7, sp, #0
 8013026:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801302e:	4618      	mov	r0, r3
 8013030:	370c      	adds	r7, #12
 8013032:	46bd      	mov	sp, r7
 8013034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013038:	4770      	bx	lr

0801303a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 801303a:	b480      	push	{r7}
 801303c:	b083      	sub	sp, #12
 801303e:	af00      	add	r7, sp, #0
 8013040:	6078      	str	r0, [r7, #4]
 8013042:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8013044:	683b      	ldr	r3, [r7, #0]
 8013046:	681a      	ldr	r2, [r3, #0]
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801304e:	2300      	movs	r3, #0
}
 8013050:	4618      	mov	r0, r3
 8013052:	370c      	adds	r7, #12
 8013054:	46bd      	mov	sp, r7
 8013056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801305a:	4770      	bx	lr

0801305c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 801305c:	b480      	push	{r7}
 801305e:	b083      	sub	sp, #12
 8013060:	af00      	add	r7, sp, #0
 8013062:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	f043 0203 	orr.w	r2, r3, #3
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8013070:	2300      	movs	r3, #0
}
 8013072:	4618      	mov	r0, r3
 8013074:	370c      	adds	r7, #12
 8013076:	46bd      	mov	sp, r7
 8013078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307c:	4770      	bx	lr

0801307e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 801307e:	b480      	push	{r7}
 8013080:	b083      	sub	sp, #12
 8013082:	af00      	add	r7, sp, #0
 8013084:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	f003 0303 	and.w	r3, r3, #3
}
 801308e:	4618      	mov	r0, r3
 8013090:	370c      	adds	r7, #12
 8013092:	46bd      	mov	sp, r7
 8013094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013098:	4770      	bx	lr
	...

0801309c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 801309c:	b480      	push	{r7}
 801309e:	b085      	sub	sp, #20
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	6078      	str	r0, [r7, #4]
 80130a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80130a6:	2300      	movs	r3, #0
 80130a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80130aa:	683b      	ldr	r3, [r7, #0]
 80130ac:	681a      	ldr	r2, [r3, #0]
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80130b2:	683b      	ldr	r3, [r7, #0]
 80130b4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80130b6:	683b      	ldr	r3, [r7, #0]
 80130b8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80130ba:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80130bc:	683b      	ldr	r3, [r7, #0]
 80130be:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80130c0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80130c2:	683b      	ldr	r3, [r7, #0]
 80130c4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80130c6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80130c8:	68fa      	ldr	r2, [r7, #12]
 80130ca:	4313      	orrs	r3, r2
 80130cc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	68da      	ldr	r2, [r3, #12]
 80130d2:	4b06      	ldr	r3, [pc, #24]	; (80130ec <SDMMC_SendCommand+0x50>)
 80130d4:	4013      	ands	r3, r2
 80130d6:	68fa      	ldr	r2, [r7, #12]
 80130d8:	431a      	orrs	r2, r3
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80130de:	2300      	movs	r3, #0
}
 80130e0:	4618      	mov	r0, r3
 80130e2:	3714      	adds	r7, #20
 80130e4:	46bd      	mov	sp, r7
 80130e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ea:	4770      	bx	lr
 80130ec:	fffee0c0 	.word	0xfffee0c0

080130f0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80130f0:	b480      	push	{r7}
 80130f2:	b083      	sub	sp, #12
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	691b      	ldr	r3, [r3, #16]
 80130fc:	b2db      	uxtb	r3, r3
}
 80130fe:	4618      	mov	r0, r3
 8013100:	370c      	adds	r7, #12
 8013102:	46bd      	mov	sp, r7
 8013104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013108:	4770      	bx	lr

0801310a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801310a:	b480      	push	{r7}
 801310c:	b085      	sub	sp, #20
 801310e:	af00      	add	r7, sp, #0
 8013110:	6078      	str	r0, [r7, #4]
 8013112:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	3314      	adds	r3, #20
 8013118:	461a      	mov	r2, r3
 801311a:	683b      	ldr	r3, [r7, #0]
 801311c:	4413      	add	r3, r2
 801311e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	681b      	ldr	r3, [r3, #0]
}
 8013124:	4618      	mov	r0, r3
 8013126:	3714      	adds	r7, #20
 8013128:	46bd      	mov	sp, r7
 801312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801312e:	4770      	bx	lr

08013130 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8013130:	b480      	push	{r7}
 8013132:	b085      	sub	sp, #20
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
 8013138:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801313a:	2300      	movs	r3, #0
 801313c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801313e:	683b      	ldr	r3, [r7, #0]
 8013140:	681a      	ldr	r2, [r3, #0]
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8013146:	683b      	ldr	r3, [r7, #0]
 8013148:	685a      	ldr	r2, [r3, #4]
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801314e:	683b      	ldr	r3, [r7, #0]
 8013150:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8013152:	683b      	ldr	r3, [r7, #0]
 8013154:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8013156:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8013158:	683b      	ldr	r3, [r7, #0]
 801315a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 801315c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801315e:	683b      	ldr	r3, [r7, #0]
 8013160:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8013162:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8013164:	68fa      	ldr	r2, [r7, #12]
 8013166:	4313      	orrs	r3, r2
 8013168:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801316e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	431a      	orrs	r2, r3
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801317a:	2300      	movs	r3, #0

}
 801317c:	4618      	mov	r0, r3
 801317e:	3714      	adds	r7, #20
 8013180:	46bd      	mov	sp, r7
 8013182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013186:	4770      	bx	lr

08013188 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8013188:	b580      	push	{r7, lr}
 801318a:	b088      	sub	sp, #32
 801318c:	af00      	add	r7, sp, #0
 801318e:	6078      	str	r0, [r7, #4]
 8013190:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8013192:	683b      	ldr	r3, [r7, #0]
 8013194:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8013196:	2310      	movs	r3, #16
 8013198:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801319a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801319e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80131a0:	2300      	movs	r3, #0
 80131a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80131a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80131a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80131aa:	f107 0308 	add.w	r3, r7, #8
 80131ae:	4619      	mov	r1, r3
 80131b0:	6878      	ldr	r0, [r7, #4]
 80131b2:	f7ff ff73 	bl	801309c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80131b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80131ba:	2110      	movs	r1, #16
 80131bc:	6878      	ldr	r0, [r7, #4]
 80131be:	f000 fa5f 	bl	8013680 <SDMMC_GetCmdResp1>
 80131c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80131c4:	69fb      	ldr	r3, [r7, #28]
}
 80131c6:	4618      	mov	r0, r3
 80131c8:	3720      	adds	r7, #32
 80131ca:	46bd      	mov	sp, r7
 80131cc:	bd80      	pop	{r7, pc}

080131ce <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80131ce:	b580      	push	{r7, lr}
 80131d0:	b088      	sub	sp, #32
 80131d2:	af00      	add	r7, sp, #0
 80131d4:	6078      	str	r0, [r7, #4]
 80131d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80131d8:	683b      	ldr	r3, [r7, #0]
 80131da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80131dc:	2311      	movs	r3, #17
 80131de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80131e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80131e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80131e6:	2300      	movs	r3, #0
 80131e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80131ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80131ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80131f0:	f107 0308 	add.w	r3, r7, #8
 80131f4:	4619      	mov	r1, r3
 80131f6:	6878      	ldr	r0, [r7, #4]
 80131f8:	f7ff ff50 	bl	801309c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80131fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8013200:	2111      	movs	r1, #17
 8013202:	6878      	ldr	r0, [r7, #4]
 8013204:	f000 fa3c 	bl	8013680 <SDMMC_GetCmdResp1>
 8013208:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801320a:	69fb      	ldr	r3, [r7, #28]
}
 801320c:	4618      	mov	r0, r3
 801320e:	3720      	adds	r7, #32
 8013210:	46bd      	mov	sp, r7
 8013212:	bd80      	pop	{r7, pc}

08013214 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8013214:	b580      	push	{r7, lr}
 8013216:	b088      	sub	sp, #32
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
 801321c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801321e:	683b      	ldr	r3, [r7, #0]
 8013220:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8013222:	2312      	movs	r3, #18
 8013224:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013226:	f44f 7380 	mov.w	r3, #256	; 0x100
 801322a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801322c:	2300      	movs	r3, #0
 801322e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013234:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013236:	f107 0308 	add.w	r3, r7, #8
 801323a:	4619      	mov	r1, r3
 801323c:	6878      	ldr	r0, [r7, #4]
 801323e:	f7ff ff2d 	bl	801309c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8013242:	f241 3288 	movw	r2, #5000	; 0x1388
 8013246:	2112      	movs	r1, #18
 8013248:	6878      	ldr	r0, [r7, #4]
 801324a:	f000 fa19 	bl	8013680 <SDMMC_GetCmdResp1>
 801324e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013250:	69fb      	ldr	r3, [r7, #28]
}
 8013252:	4618      	mov	r0, r3
 8013254:	3720      	adds	r7, #32
 8013256:	46bd      	mov	sp, r7
 8013258:	bd80      	pop	{r7, pc}

0801325a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801325a:	b580      	push	{r7, lr}
 801325c:	b088      	sub	sp, #32
 801325e:	af00      	add	r7, sp, #0
 8013260:	6078      	str	r0, [r7, #4]
 8013262:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8013264:	683b      	ldr	r3, [r7, #0]
 8013266:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8013268:	2318      	movs	r3, #24
 801326a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801326c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013270:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013272:	2300      	movs	r3, #0
 8013274:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801327a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801327c:	f107 0308 	add.w	r3, r7, #8
 8013280:	4619      	mov	r1, r3
 8013282:	6878      	ldr	r0, [r7, #4]
 8013284:	f7ff ff0a 	bl	801309c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8013288:	f241 3288 	movw	r2, #5000	; 0x1388
 801328c:	2118      	movs	r1, #24
 801328e:	6878      	ldr	r0, [r7, #4]
 8013290:	f000 f9f6 	bl	8013680 <SDMMC_GetCmdResp1>
 8013294:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013296:	69fb      	ldr	r3, [r7, #28]
}
 8013298:	4618      	mov	r0, r3
 801329a:	3720      	adds	r7, #32
 801329c:	46bd      	mov	sp, r7
 801329e:	bd80      	pop	{r7, pc}

080132a0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b088      	sub	sp, #32
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
 80132a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80132aa:	683b      	ldr	r3, [r7, #0]
 80132ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80132ae:	2319      	movs	r3, #25
 80132b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80132b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80132b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80132b8:	2300      	movs	r3, #0
 80132ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80132bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80132c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80132c2:	f107 0308 	add.w	r3, r7, #8
 80132c6:	4619      	mov	r1, r3
 80132c8:	6878      	ldr	r0, [r7, #4]
 80132ca:	f7ff fee7 	bl	801309c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80132ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80132d2:	2119      	movs	r1, #25
 80132d4:	6878      	ldr	r0, [r7, #4]
 80132d6:	f000 f9d3 	bl	8013680 <SDMMC_GetCmdResp1>
 80132da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80132dc:	69fb      	ldr	r3, [r7, #28]
}
 80132de:	4618      	mov	r0, r3
 80132e0:	3720      	adds	r7, #32
 80132e2:	46bd      	mov	sp, r7
 80132e4:	bd80      	pop	{r7, pc}
	...

080132e8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b088      	sub	sp, #32
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80132f0:	2300      	movs	r3, #0
 80132f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80132f4:	230c      	movs	r3, #12
 80132f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80132f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80132fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80132fe:	2300      	movs	r3, #0
 8013300:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013306:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	68db      	ldr	r3, [r3, #12]
 801330c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	68db      	ldr	r3, [r3, #12]
 8013318:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013320:	f107 0308 	add.w	r3, r7, #8
 8013324:	4619      	mov	r1, r3
 8013326:	6878      	ldr	r0, [r7, #4]
 8013328:	f7ff feb8 	bl	801309c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 801332c:	4a0b      	ldr	r2, [pc, #44]	; (801335c <SDMMC_CmdStopTransfer+0x74>)
 801332e:	210c      	movs	r1, #12
 8013330:	6878      	ldr	r0, [r7, #4]
 8013332:	f000 f9a5 	bl	8013680 <SDMMC_GetCmdResp1>
 8013336:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	68db      	ldr	r3, [r3, #12]
 801333c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8013344:	69fb      	ldr	r3, [r7, #28]
 8013346:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801334a:	d101      	bne.n	8013350 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 801334c:	2300      	movs	r3, #0
 801334e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8013350:	69fb      	ldr	r3, [r7, #28]
}
 8013352:	4618      	mov	r0, r3
 8013354:	3720      	adds	r7, #32
 8013356:	46bd      	mov	sp, r7
 8013358:	bd80      	pop	{r7, pc}
 801335a:	bf00      	nop
 801335c:	05f5e100 	.word	0x05f5e100

08013360 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b088      	sub	sp, #32
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
 8013368:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801336a:	683b      	ldr	r3, [r7, #0]
 801336c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 801336e:	2307      	movs	r3, #7
 8013370:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013372:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013376:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013378:	2300      	movs	r3, #0
 801337a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801337c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013380:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013382:	f107 0308 	add.w	r3, r7, #8
 8013386:	4619      	mov	r1, r3
 8013388:	6878      	ldr	r0, [r7, #4]
 801338a:	f7ff fe87 	bl	801309c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801338e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013392:	2107      	movs	r1, #7
 8013394:	6878      	ldr	r0, [r7, #4]
 8013396:	f000 f973 	bl	8013680 <SDMMC_GetCmdResp1>
 801339a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801339c:	69fb      	ldr	r3, [r7, #28]
}
 801339e:	4618      	mov	r0, r3
 80133a0:	3720      	adds	r7, #32
 80133a2:	46bd      	mov	sp, r7
 80133a4:	bd80      	pop	{r7, pc}

080133a6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80133a6:	b580      	push	{r7, lr}
 80133a8:	b088      	sub	sp, #32
 80133aa:	af00      	add	r7, sp, #0
 80133ac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80133ae:	2300      	movs	r3, #0
 80133b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80133b2:	2300      	movs	r3, #0
 80133b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80133b6:	2300      	movs	r3, #0
 80133b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80133ba:	2300      	movs	r3, #0
 80133bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80133be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80133c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80133c4:	f107 0308 	add.w	r3, r7, #8
 80133c8:	4619      	mov	r1, r3
 80133ca:	6878      	ldr	r0, [r7, #4]
 80133cc:	f7ff fe66 	bl	801309c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80133d0:	6878      	ldr	r0, [r7, #4]
 80133d2:	f000 fb97 	bl	8013b04 <SDMMC_GetCmdError>
 80133d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80133d8:	69fb      	ldr	r3, [r7, #28]
}
 80133da:	4618      	mov	r0, r3
 80133dc:	3720      	adds	r7, #32
 80133de:	46bd      	mov	sp, r7
 80133e0:	bd80      	pop	{r7, pc}

080133e2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80133e2:	b580      	push	{r7, lr}
 80133e4:	b088      	sub	sp, #32
 80133e6:	af00      	add	r7, sp, #0
 80133e8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80133ea:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80133ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80133f0:	2308      	movs	r3, #8
 80133f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80133f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80133f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80133fa:	2300      	movs	r3, #0
 80133fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80133fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013402:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013404:	f107 0308 	add.w	r3, r7, #8
 8013408:	4619      	mov	r1, r3
 801340a:	6878      	ldr	r0, [r7, #4]
 801340c:	f7ff fe46 	bl	801309c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8013410:	6878      	ldr	r0, [r7, #4]
 8013412:	f000 fb29 	bl	8013a68 <SDMMC_GetCmdResp7>
 8013416:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013418:	69fb      	ldr	r3, [r7, #28]
}
 801341a:	4618      	mov	r0, r3
 801341c:	3720      	adds	r7, #32
 801341e:	46bd      	mov	sp, r7
 8013420:	bd80      	pop	{r7, pc}

08013422 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013422:	b580      	push	{r7, lr}
 8013424:	b088      	sub	sp, #32
 8013426:	af00      	add	r7, sp, #0
 8013428:	6078      	str	r0, [r7, #4]
 801342a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801342c:	683b      	ldr	r3, [r7, #0]
 801342e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8013430:	2337      	movs	r3, #55	; 0x37
 8013432:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013434:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013438:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801343a:	2300      	movs	r3, #0
 801343c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801343e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013442:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013444:	f107 0308 	add.w	r3, r7, #8
 8013448:	4619      	mov	r1, r3
 801344a:	6878      	ldr	r0, [r7, #4]
 801344c:	f7ff fe26 	bl	801309c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8013450:	f241 3288 	movw	r2, #5000	; 0x1388
 8013454:	2137      	movs	r1, #55	; 0x37
 8013456:	6878      	ldr	r0, [r7, #4]
 8013458:	f000 f912 	bl	8013680 <SDMMC_GetCmdResp1>
 801345c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801345e:	69fb      	ldr	r3, [r7, #28]
}
 8013460:	4618      	mov	r0, r3
 8013462:	3720      	adds	r7, #32
 8013464:	46bd      	mov	sp, r7
 8013466:	bd80      	pop	{r7, pc}

08013468 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013468:	b580      	push	{r7, lr}
 801346a:	b088      	sub	sp, #32
 801346c:	af00      	add	r7, sp, #0
 801346e:	6078      	str	r0, [r7, #4]
 8013470:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8013472:	683b      	ldr	r3, [r7, #0]
 8013474:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8013476:	2329      	movs	r3, #41	; 0x29
 8013478:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801347a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801347e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013480:	2300      	movs	r3, #0
 8013482:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013488:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801348a:	f107 0308 	add.w	r3, r7, #8
 801348e:	4619      	mov	r1, r3
 8013490:	6878      	ldr	r0, [r7, #4]
 8013492:	f7ff fe03 	bl	801309c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8013496:	6878      	ldr	r0, [r7, #4]
 8013498:	f000 fa2e 	bl	80138f8 <SDMMC_GetCmdResp3>
 801349c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801349e:	69fb      	ldr	r3, [r7, #28]
}
 80134a0:	4618      	mov	r0, r3
 80134a2:	3720      	adds	r7, #32
 80134a4:	46bd      	mov	sp, r7
 80134a6:	bd80      	pop	{r7, pc}

080134a8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80134a8:	b580      	push	{r7, lr}
 80134aa:	b088      	sub	sp, #32
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]
 80134b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80134b2:	683b      	ldr	r3, [r7, #0]
 80134b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80134b6:	2306      	movs	r3, #6
 80134b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80134ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80134be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80134c0:	2300      	movs	r3, #0
 80134c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80134c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80134c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80134ca:	f107 0308 	add.w	r3, r7, #8
 80134ce:	4619      	mov	r1, r3
 80134d0:	6878      	ldr	r0, [r7, #4]
 80134d2:	f7ff fde3 	bl	801309c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80134d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80134da:	2106      	movs	r1, #6
 80134dc:	6878      	ldr	r0, [r7, #4]
 80134de:	f000 f8cf 	bl	8013680 <SDMMC_GetCmdResp1>
 80134e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80134e4:	69fb      	ldr	r3, [r7, #28]
}
 80134e6:	4618      	mov	r0, r3
 80134e8:	3720      	adds	r7, #32
 80134ea:	46bd      	mov	sp, r7
 80134ec:	bd80      	pop	{r7, pc}

080134ee <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80134ee:	b580      	push	{r7, lr}
 80134f0:	b088      	sub	sp, #32
 80134f2:	af00      	add	r7, sp, #0
 80134f4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80134f6:	2300      	movs	r3, #0
 80134f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80134fa:	2333      	movs	r3, #51	; 0x33
 80134fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80134fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013502:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013504:	2300      	movs	r3, #0
 8013506:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801350c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801350e:	f107 0308 	add.w	r3, r7, #8
 8013512:	4619      	mov	r1, r3
 8013514:	6878      	ldr	r0, [r7, #4]
 8013516:	f7ff fdc1 	bl	801309c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801351a:	f241 3288 	movw	r2, #5000	; 0x1388
 801351e:	2133      	movs	r1, #51	; 0x33
 8013520:	6878      	ldr	r0, [r7, #4]
 8013522:	f000 f8ad 	bl	8013680 <SDMMC_GetCmdResp1>
 8013526:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013528:	69fb      	ldr	r3, [r7, #28]
}
 801352a:	4618      	mov	r0, r3
 801352c:	3720      	adds	r7, #32
 801352e:	46bd      	mov	sp, r7
 8013530:	bd80      	pop	{r7, pc}

08013532 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8013532:	b580      	push	{r7, lr}
 8013534:	b088      	sub	sp, #32
 8013536:	af00      	add	r7, sp, #0
 8013538:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801353a:	2300      	movs	r3, #0
 801353c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801353e:	2302      	movs	r3, #2
 8013540:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8013542:	f44f 7340 	mov.w	r3, #768	; 0x300
 8013546:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013548:	2300      	movs	r3, #0
 801354a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801354c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013550:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013552:	f107 0308 	add.w	r3, r7, #8
 8013556:	4619      	mov	r1, r3
 8013558:	6878      	ldr	r0, [r7, #4]
 801355a:	f7ff fd9f 	bl	801309c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801355e:	6878      	ldr	r0, [r7, #4]
 8013560:	f000 f980 	bl	8013864 <SDMMC_GetCmdResp2>
 8013564:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013566:	69fb      	ldr	r3, [r7, #28]
}
 8013568:	4618      	mov	r0, r3
 801356a:	3720      	adds	r7, #32
 801356c:	46bd      	mov	sp, r7
 801356e:	bd80      	pop	{r7, pc}

08013570 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013570:	b580      	push	{r7, lr}
 8013572:	b088      	sub	sp, #32
 8013574:	af00      	add	r7, sp, #0
 8013576:	6078      	str	r0, [r7, #4]
 8013578:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801357a:	683b      	ldr	r3, [r7, #0]
 801357c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801357e:	2309      	movs	r3, #9
 8013580:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8013582:	f44f 7340 	mov.w	r3, #768	; 0x300
 8013586:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013588:	2300      	movs	r3, #0
 801358a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801358c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013590:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013592:	f107 0308 	add.w	r3, r7, #8
 8013596:	4619      	mov	r1, r3
 8013598:	6878      	ldr	r0, [r7, #4]
 801359a:	f7ff fd7f 	bl	801309c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801359e:	6878      	ldr	r0, [r7, #4]
 80135a0:	f000 f960 	bl	8013864 <SDMMC_GetCmdResp2>
 80135a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80135a6:	69fb      	ldr	r3, [r7, #28]
}
 80135a8:	4618      	mov	r0, r3
 80135aa:	3720      	adds	r7, #32
 80135ac:	46bd      	mov	sp, r7
 80135ae:	bd80      	pop	{r7, pc}

080135b0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b088      	sub	sp, #32
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	6078      	str	r0, [r7, #4]
 80135b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80135ba:	2300      	movs	r3, #0
 80135bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80135be:	2303      	movs	r3, #3
 80135c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80135c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80135c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80135c8:	2300      	movs	r3, #0
 80135ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80135cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80135d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80135d2:	f107 0308 	add.w	r3, r7, #8
 80135d6:	4619      	mov	r1, r3
 80135d8:	6878      	ldr	r0, [r7, #4]
 80135da:	f7ff fd5f 	bl	801309c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80135de:	683a      	ldr	r2, [r7, #0]
 80135e0:	2103      	movs	r1, #3
 80135e2:	6878      	ldr	r0, [r7, #4]
 80135e4:	f000 f9c8 	bl	8013978 <SDMMC_GetCmdResp6>
 80135e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80135ea:	69fb      	ldr	r3, [r7, #28]
}
 80135ec:	4618      	mov	r0, r3
 80135ee:	3720      	adds	r7, #32
 80135f0:	46bd      	mov	sp, r7
 80135f2:	bd80      	pop	{r7, pc}

080135f4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b088      	sub	sp, #32
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
 80135fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80135fe:	683b      	ldr	r3, [r7, #0]
 8013600:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8013602:	230d      	movs	r3, #13
 8013604:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013606:	f44f 7380 	mov.w	r3, #256	; 0x100
 801360a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801360c:	2300      	movs	r3, #0
 801360e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013614:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013616:	f107 0308 	add.w	r3, r7, #8
 801361a:	4619      	mov	r1, r3
 801361c:	6878      	ldr	r0, [r7, #4]
 801361e:	f7ff fd3d 	bl	801309c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8013622:	f241 3288 	movw	r2, #5000	; 0x1388
 8013626:	210d      	movs	r1, #13
 8013628:	6878      	ldr	r0, [r7, #4]
 801362a:	f000 f829 	bl	8013680 <SDMMC_GetCmdResp1>
 801362e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013630:	69fb      	ldr	r3, [r7, #28]
}
 8013632:	4618      	mov	r0, r3
 8013634:	3720      	adds	r7, #32
 8013636:	46bd      	mov	sp, r7
 8013638:	bd80      	pop	{r7, pc}

0801363a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 801363a:	b580      	push	{r7, lr}
 801363c:	b088      	sub	sp, #32
 801363e:	af00      	add	r7, sp, #0
 8013640:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8013642:	2300      	movs	r3, #0
 8013644:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8013646:	230d      	movs	r3, #13
 8013648:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801364a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801364e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013650:	2300      	movs	r3, #0
 8013652:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013658:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801365a:	f107 0308 	add.w	r3, r7, #8
 801365e:	4619      	mov	r1, r3
 8013660:	6878      	ldr	r0, [r7, #4]
 8013662:	f7ff fd1b 	bl	801309c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8013666:	f241 3288 	movw	r2, #5000	; 0x1388
 801366a:	210d      	movs	r1, #13
 801366c:	6878      	ldr	r0, [r7, #4]
 801366e:	f000 f807 	bl	8013680 <SDMMC_GetCmdResp1>
 8013672:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013674:	69fb      	ldr	r3, [r7, #28]
}
 8013676:	4618      	mov	r0, r3
 8013678:	3720      	adds	r7, #32
 801367a:	46bd      	mov	sp, r7
 801367c:	bd80      	pop	{r7, pc}
	...

08013680 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8013680:	b580      	push	{r7, lr}
 8013682:	b088      	sub	sp, #32
 8013684:	af00      	add	r7, sp, #0
 8013686:	60f8      	str	r0, [r7, #12]
 8013688:	460b      	mov	r3, r1
 801368a:	607a      	str	r2, [r7, #4]
 801368c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801368e:	4b70      	ldr	r3, [pc, #448]	; (8013850 <SDMMC_GetCmdResp1+0x1d0>)
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	4a70      	ldr	r2, [pc, #448]	; (8013854 <SDMMC_GetCmdResp1+0x1d4>)
 8013694:	fba2 2303 	umull	r2, r3, r2, r3
 8013698:	0a5a      	lsrs	r2, r3, #9
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	fb02 f303 	mul.w	r3, r2, r3
 80136a0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80136a2:	69fb      	ldr	r3, [r7, #28]
 80136a4:	1e5a      	subs	r2, r3, #1
 80136a6:	61fa      	str	r2, [r7, #28]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d102      	bne.n	80136b2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80136ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80136b0:	e0c9      	b.n	8013846 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136b6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80136b8:	69ba      	ldr	r2, [r7, #24]
 80136ba:	4b67      	ldr	r3, [pc, #412]	; (8013858 <SDMMC_GetCmdResp1+0x1d8>)
 80136bc:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d0ef      	beq.n	80136a2 <SDMMC_GetCmdResp1+0x22>
 80136c2:	69bb      	ldr	r3, [r7, #24]
 80136c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d1ea      	bne.n	80136a2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136d0:	f003 0304 	and.w	r3, r3, #4
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d004      	beq.n	80136e2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	2204      	movs	r2, #4
 80136dc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80136de:	2304      	movs	r3, #4
 80136e0:	e0b1      	b.n	8013846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136e6:	f003 0301 	and.w	r3, r3, #1
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d004      	beq.n	80136f8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	2201      	movs	r2, #1
 80136f2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80136f4:	2301      	movs	r3, #1
 80136f6:	e0a6      	b.n	8013846 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	4a58      	ldr	r2, [pc, #352]	; (801385c <SDMMC_GetCmdResp1+0x1dc>)
 80136fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80136fe:	68f8      	ldr	r0, [r7, #12]
 8013700:	f7ff fcf6 	bl	80130f0 <SDMMC_GetCommandResponse>
 8013704:	4603      	mov	r3, r0
 8013706:	461a      	mov	r2, r3
 8013708:	7afb      	ldrb	r3, [r7, #11]
 801370a:	4293      	cmp	r3, r2
 801370c:	d001      	beq.n	8013712 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801370e:	2301      	movs	r3, #1
 8013710:	e099      	b.n	8013846 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013712:	2100      	movs	r1, #0
 8013714:	68f8      	ldr	r0, [r7, #12]
 8013716:	f7ff fcf8 	bl	801310a <SDMMC_GetResponse>
 801371a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801371c:	697a      	ldr	r2, [r7, #20]
 801371e:	4b50      	ldr	r3, [pc, #320]	; (8013860 <SDMMC_GetCmdResp1+0x1e0>)
 8013720:	4013      	ands	r3, r2
 8013722:	2b00      	cmp	r3, #0
 8013724:	d101      	bne.n	801372a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8013726:	2300      	movs	r3, #0
 8013728:	e08d      	b.n	8013846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801372a:	697b      	ldr	r3, [r7, #20]
 801372c:	2b00      	cmp	r3, #0
 801372e:	da02      	bge.n	8013736 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8013730:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8013734:	e087      	b.n	8013846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8013736:	697b      	ldr	r3, [r7, #20]
 8013738:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801373c:	2b00      	cmp	r3, #0
 801373e:	d001      	beq.n	8013744 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8013740:	2340      	movs	r3, #64	; 0x40
 8013742:	e080      	b.n	8013846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013744:	697b      	ldr	r3, [r7, #20]
 8013746:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801374a:	2b00      	cmp	r3, #0
 801374c:	d001      	beq.n	8013752 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801374e:	2380      	movs	r3, #128	; 0x80
 8013750:	e079      	b.n	8013846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8013752:	697b      	ldr	r3, [r7, #20]
 8013754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013758:	2b00      	cmp	r3, #0
 801375a:	d002      	beq.n	8013762 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801375c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013760:	e071      	b.n	8013846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8013762:	697b      	ldr	r3, [r7, #20]
 8013764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013768:	2b00      	cmp	r3, #0
 801376a:	d002      	beq.n	8013772 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801376c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013770:	e069      	b.n	8013846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8013772:	697b      	ldr	r3, [r7, #20]
 8013774:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013778:	2b00      	cmp	r3, #0
 801377a:	d002      	beq.n	8013782 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801377c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013780:	e061      	b.n	8013846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8013782:	697b      	ldr	r3, [r7, #20]
 8013784:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013788:	2b00      	cmp	r3, #0
 801378a:	d002      	beq.n	8013792 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801378c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013790:	e059      	b.n	8013846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8013792:	697b      	ldr	r3, [r7, #20]
 8013794:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013798:	2b00      	cmp	r3, #0
 801379a:	d002      	beq.n	80137a2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801379c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80137a0:	e051      	b.n	8013846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80137a2:	697b      	ldr	r3, [r7, #20]
 80137a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d002      	beq.n	80137b2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80137ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80137b0:	e049      	b.n	8013846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80137b2:	697b      	ldr	r3, [r7, #20]
 80137b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d002      	beq.n	80137c2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80137bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80137c0:	e041      	b.n	8013846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80137c2:	697b      	ldr	r3, [r7, #20]
 80137c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d002      	beq.n	80137d2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80137cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80137d0:	e039      	b.n	8013846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80137d2:	697b      	ldr	r3, [r7, #20]
 80137d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d002      	beq.n	80137e2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80137dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80137e0:	e031      	b.n	8013846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80137e2:	697b      	ldr	r3, [r7, #20]
 80137e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d002      	beq.n	80137f2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80137ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80137f0:	e029      	b.n	8013846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80137f2:	697b      	ldr	r3, [r7, #20]
 80137f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d002      	beq.n	8013802 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80137fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013800:	e021      	b.n	8013846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8013802:	697b      	ldr	r3, [r7, #20]
 8013804:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013808:	2b00      	cmp	r3, #0
 801380a:	d002      	beq.n	8013812 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801380c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8013810:	e019      	b.n	8013846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8013812:	697b      	ldr	r3, [r7, #20]
 8013814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013818:	2b00      	cmp	r3, #0
 801381a:	d002      	beq.n	8013822 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801381c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013820:	e011      	b.n	8013846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8013822:	697b      	ldr	r3, [r7, #20]
 8013824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013828:	2b00      	cmp	r3, #0
 801382a:	d002      	beq.n	8013832 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 801382c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013830:	e009      	b.n	8013846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8013832:	697b      	ldr	r3, [r7, #20]
 8013834:	f003 0308 	and.w	r3, r3, #8
 8013838:	2b00      	cmp	r3, #0
 801383a:	d002      	beq.n	8013842 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 801383c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8013840:	e001      	b.n	8013846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013842:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8013846:	4618      	mov	r0, r3
 8013848:	3720      	adds	r7, #32
 801384a:	46bd      	mov	sp, r7
 801384c:	bd80      	pop	{r7, pc}
 801384e:	bf00      	nop
 8013850:	24000000 	.word	0x24000000
 8013854:	10624dd3 	.word	0x10624dd3
 8013858:	00200045 	.word	0x00200045
 801385c:	002000c5 	.word	0x002000c5
 8013860:	fdffe008 	.word	0xfdffe008

08013864 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8013864:	b480      	push	{r7}
 8013866:	b085      	sub	sp, #20
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801386c:	4b1f      	ldr	r3, [pc, #124]	; (80138ec <SDMMC_GetCmdResp2+0x88>)
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	4a1f      	ldr	r2, [pc, #124]	; (80138f0 <SDMMC_GetCmdResp2+0x8c>)
 8013872:	fba2 2303 	umull	r2, r3, r2, r3
 8013876:	0a5b      	lsrs	r3, r3, #9
 8013878:	f241 3288 	movw	r2, #5000	; 0x1388
 801387c:	fb02 f303 	mul.w	r3, r2, r3
 8013880:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	1e5a      	subs	r2, r3, #1
 8013886:	60fa      	str	r2, [r7, #12]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d102      	bne.n	8013892 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801388c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013890:	e026      	b.n	80138e0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013896:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013898:	68bb      	ldr	r3, [r7, #8]
 801389a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d0ef      	beq.n	8013882 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80138a2:	68bb      	ldr	r3, [r7, #8]
 80138a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d1ea      	bne.n	8013882 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138b0:	f003 0304 	and.w	r3, r3, #4
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d004      	beq.n	80138c2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	2204      	movs	r2, #4
 80138bc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80138be:	2304      	movs	r3, #4
 80138c0:	e00e      	b.n	80138e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138c6:	f003 0301 	and.w	r3, r3, #1
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d004      	beq.n	80138d8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	2201      	movs	r2, #1
 80138d2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80138d4:	2301      	movs	r3, #1
 80138d6:	e003      	b.n	80138e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	4a06      	ldr	r2, [pc, #24]	; (80138f4 <SDMMC_GetCmdResp2+0x90>)
 80138dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80138de:	2300      	movs	r3, #0
}
 80138e0:	4618      	mov	r0, r3
 80138e2:	3714      	adds	r7, #20
 80138e4:	46bd      	mov	sp, r7
 80138e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ea:	4770      	bx	lr
 80138ec:	24000000 	.word	0x24000000
 80138f0:	10624dd3 	.word	0x10624dd3
 80138f4:	002000c5 	.word	0x002000c5

080138f8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80138f8:	b480      	push	{r7}
 80138fa:	b085      	sub	sp, #20
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013900:	4b1a      	ldr	r3, [pc, #104]	; (801396c <SDMMC_GetCmdResp3+0x74>)
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	4a1a      	ldr	r2, [pc, #104]	; (8013970 <SDMMC_GetCmdResp3+0x78>)
 8013906:	fba2 2303 	umull	r2, r3, r2, r3
 801390a:	0a5b      	lsrs	r3, r3, #9
 801390c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013910:	fb02 f303 	mul.w	r3, r2, r3
 8013914:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	1e5a      	subs	r2, r3, #1
 801391a:	60fa      	str	r2, [r7, #12]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d102      	bne.n	8013926 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013920:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013924:	e01b      	b.n	801395e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801392a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801392c:	68bb      	ldr	r3, [r7, #8]
 801392e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8013932:	2b00      	cmp	r3, #0
 8013934:	d0ef      	beq.n	8013916 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013936:	68bb      	ldr	r3, [r7, #8]
 8013938:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801393c:	2b00      	cmp	r3, #0
 801393e:	d1ea      	bne.n	8013916 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013944:	f003 0304 	and.w	r3, r3, #4
 8013948:	2b00      	cmp	r3, #0
 801394a:	d004      	beq.n	8013956 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	2204      	movs	r2, #4
 8013950:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013952:	2304      	movs	r3, #4
 8013954:	e003      	b.n	801395e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	4a06      	ldr	r2, [pc, #24]	; (8013974 <SDMMC_GetCmdResp3+0x7c>)
 801395a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801395c:	2300      	movs	r3, #0
}
 801395e:	4618      	mov	r0, r3
 8013960:	3714      	adds	r7, #20
 8013962:	46bd      	mov	sp, r7
 8013964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013968:	4770      	bx	lr
 801396a:	bf00      	nop
 801396c:	24000000 	.word	0x24000000
 8013970:	10624dd3 	.word	0x10624dd3
 8013974:	002000c5 	.word	0x002000c5

08013978 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8013978:	b580      	push	{r7, lr}
 801397a:	b088      	sub	sp, #32
 801397c:	af00      	add	r7, sp, #0
 801397e:	60f8      	str	r0, [r7, #12]
 8013980:	460b      	mov	r3, r1
 8013982:	607a      	str	r2, [r7, #4]
 8013984:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013986:	4b35      	ldr	r3, [pc, #212]	; (8013a5c <SDMMC_GetCmdResp6+0xe4>)
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	4a35      	ldr	r2, [pc, #212]	; (8013a60 <SDMMC_GetCmdResp6+0xe8>)
 801398c:	fba2 2303 	umull	r2, r3, r2, r3
 8013990:	0a5b      	lsrs	r3, r3, #9
 8013992:	f241 3288 	movw	r2, #5000	; 0x1388
 8013996:	fb02 f303 	mul.w	r3, r2, r3
 801399a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801399c:	69fb      	ldr	r3, [r7, #28]
 801399e:	1e5a      	subs	r2, r3, #1
 80139a0:	61fa      	str	r2, [r7, #28]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d102      	bne.n	80139ac <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80139a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80139aa:	e052      	b.n	8013a52 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139b0:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80139b2:	69bb      	ldr	r3, [r7, #24]
 80139b4:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d0ef      	beq.n	801399c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80139bc:	69bb      	ldr	r3, [r7, #24]
 80139be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d1ea      	bne.n	801399c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139ca:	f003 0304 	and.w	r3, r3, #4
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d004      	beq.n	80139dc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	2204      	movs	r2, #4
 80139d6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80139d8:	2304      	movs	r3, #4
 80139da:	e03a      	b.n	8013a52 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139e0:	f003 0301 	and.w	r3, r3, #1
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d004      	beq.n	80139f2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	2201      	movs	r2, #1
 80139ec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80139ee:	2301      	movs	r3, #1
 80139f0:	e02f      	b.n	8013a52 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80139f2:	68f8      	ldr	r0, [r7, #12]
 80139f4:	f7ff fb7c 	bl	80130f0 <SDMMC_GetCommandResponse>
 80139f8:	4603      	mov	r3, r0
 80139fa:	461a      	mov	r2, r3
 80139fc:	7afb      	ldrb	r3, [r7, #11]
 80139fe:	4293      	cmp	r3, r2
 8013a00:	d001      	beq.n	8013a06 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013a02:	2301      	movs	r3, #1
 8013a04:	e025      	b.n	8013a52 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	4a16      	ldr	r2, [pc, #88]	; (8013a64 <SDMMC_GetCmdResp6+0xec>)
 8013a0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013a0c:	2100      	movs	r1, #0
 8013a0e:	68f8      	ldr	r0, [r7, #12]
 8013a10:	f7ff fb7b 	bl	801310a <SDMMC_GetResponse>
 8013a14:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8013a16:	697b      	ldr	r3, [r7, #20]
 8013a18:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d106      	bne.n	8013a2e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8013a20:	697b      	ldr	r3, [r7, #20]
 8013a22:	0c1b      	lsrs	r3, r3, #16
 8013a24:	b29a      	uxth	r2, r3
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	e011      	b.n	8013a52 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8013a2e:	697b      	ldr	r3, [r7, #20]
 8013a30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d002      	beq.n	8013a3e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013a38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013a3c:	e009      	b.n	8013a52 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8013a3e:	697b      	ldr	r3, [r7, #20]
 8013a40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d002      	beq.n	8013a4e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013a4c:	e001      	b.n	8013a52 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013a4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8013a52:	4618      	mov	r0, r3
 8013a54:	3720      	adds	r7, #32
 8013a56:	46bd      	mov	sp, r7
 8013a58:	bd80      	pop	{r7, pc}
 8013a5a:	bf00      	nop
 8013a5c:	24000000 	.word	0x24000000
 8013a60:	10624dd3 	.word	0x10624dd3
 8013a64:	002000c5 	.word	0x002000c5

08013a68 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8013a68:	b480      	push	{r7}
 8013a6a:	b085      	sub	sp, #20
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013a70:	4b22      	ldr	r3, [pc, #136]	; (8013afc <SDMMC_GetCmdResp7+0x94>)
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	4a22      	ldr	r2, [pc, #136]	; (8013b00 <SDMMC_GetCmdResp7+0x98>)
 8013a76:	fba2 2303 	umull	r2, r3, r2, r3
 8013a7a:	0a5b      	lsrs	r3, r3, #9
 8013a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013a80:	fb02 f303 	mul.w	r3, r2, r3
 8013a84:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	1e5a      	subs	r2, r3, #1
 8013a8a:	60fa      	str	r2, [r7, #12]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d102      	bne.n	8013a96 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013a90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013a94:	e02c      	b.n	8013af0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a9a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013a9c:	68bb      	ldr	r3, [r7, #8]
 8013a9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d0ef      	beq.n	8013a86 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013aa6:	68bb      	ldr	r3, [r7, #8]
 8013aa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d1ea      	bne.n	8013a86 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ab4:	f003 0304 	and.w	r3, r3, #4
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d004      	beq.n	8013ac6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	2204      	movs	r2, #4
 8013ac0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013ac2:	2304      	movs	r3, #4
 8013ac4:	e014      	b.n	8013af0 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013aca:	f003 0301 	and.w	r3, r3, #1
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d004      	beq.n	8013adc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	2201      	movs	r2, #1
 8013ad6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013ad8:	2301      	movs	r3, #1
 8013ada:	e009      	b.n	8013af0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d002      	beq.n	8013aee <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	2240      	movs	r2, #64	; 0x40
 8013aec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8013aee:	2300      	movs	r3, #0

}
 8013af0:	4618      	mov	r0, r3
 8013af2:	3714      	adds	r7, #20
 8013af4:	46bd      	mov	sp, r7
 8013af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013afa:	4770      	bx	lr
 8013afc:	24000000 	.word	0x24000000
 8013b00:	10624dd3 	.word	0x10624dd3

08013b04 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8013b04:	b480      	push	{r7}
 8013b06:	b085      	sub	sp, #20
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013b0c:	4b11      	ldr	r3, [pc, #68]	; (8013b54 <SDMMC_GetCmdError+0x50>)
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	4a11      	ldr	r2, [pc, #68]	; (8013b58 <SDMMC_GetCmdError+0x54>)
 8013b12:	fba2 2303 	umull	r2, r3, r2, r3
 8013b16:	0a5b      	lsrs	r3, r3, #9
 8013b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8013b1c:	fb02 f303 	mul.w	r3, r2, r3
 8013b20:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	1e5a      	subs	r2, r3, #1
 8013b26:	60fa      	str	r2, [r7, #12]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d102      	bne.n	8013b32 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013b2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013b30:	e009      	b.n	8013b46 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d0f1      	beq.n	8013b22 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	4a06      	ldr	r2, [pc, #24]	; (8013b5c <SDMMC_GetCmdError+0x58>)
 8013b42:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8013b44:	2300      	movs	r3, #0
}
 8013b46:	4618      	mov	r0, r3
 8013b48:	3714      	adds	r7, #20
 8013b4a:	46bd      	mov	sp, r7
 8013b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b50:	4770      	bx	lr
 8013b52:	bf00      	nop
 8013b54:	24000000 	.word	0x24000000
 8013b58:	10624dd3 	.word	0x10624dd3
 8013b5c:	002000c5 	.word	0x002000c5

08013b60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013b60:	b084      	sub	sp, #16
 8013b62:	b580      	push	{r7, lr}
 8013b64:	b084      	sub	sp, #16
 8013b66:	af00      	add	r7, sp, #0
 8013b68:	6078      	str	r0, [r7, #4]
 8013b6a:	f107 001c 	add.w	r0, r7, #28
 8013b6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b74:	2b01      	cmp	r3, #1
 8013b76:	d120      	bne.n	8013bba <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	68da      	ldr	r2, [r3, #12]
 8013b88:	4b2a      	ldr	r3, [pc, #168]	; (8013c34 <USB_CoreInit+0xd4>)
 8013b8a:	4013      	ands	r3, r2
 8013b8c:	687a      	ldr	r2, [r7, #4]
 8013b8e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	68db      	ldr	r3, [r3, #12]
 8013b94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8013b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b9e:	2b01      	cmp	r3, #1
 8013ba0:	d105      	bne.n	8013bae <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	68db      	ldr	r3, [r3, #12]
 8013ba6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013bae:	6878      	ldr	r0, [r7, #4]
 8013bb0:	f001 faf8 	bl	80151a4 <USB_CoreReset>
 8013bb4:	4603      	mov	r3, r0
 8013bb6:	73fb      	strb	r3, [r7, #15]
 8013bb8:	e01a      	b.n	8013bf0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	68db      	ldr	r3, [r3, #12]
 8013bbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013bc6:	6878      	ldr	r0, [r7, #4]
 8013bc8:	f001 faec 	bl	80151a4 <USB_CoreReset>
 8013bcc:	4603      	mov	r3, r0
 8013bce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8013bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d106      	bne.n	8013be4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	639a      	str	r2, [r3, #56]	; 0x38
 8013be2:	e005      	b.n	8013bf0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013be8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8013bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bf2:	2b01      	cmp	r3, #1
 8013bf4:	d116      	bne.n	8013c24 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013bfa:	b29a      	uxth	r2, r3
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013c04:	4b0c      	ldr	r3, [pc, #48]	; (8013c38 <USB_CoreInit+0xd8>)
 8013c06:	4313      	orrs	r3, r2
 8013c08:	687a      	ldr	r2, [r7, #4]
 8013c0a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	689b      	ldr	r3, [r3, #8]
 8013c10:	f043 0206 	orr.w	r2, r3, #6
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	689b      	ldr	r3, [r3, #8]
 8013c1c:	f043 0220 	orr.w	r2, r3, #32
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8013c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c26:	4618      	mov	r0, r3
 8013c28:	3710      	adds	r7, #16
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013c30:	b004      	add	sp, #16
 8013c32:	4770      	bx	lr
 8013c34:	ffbdffbf 	.word	0xffbdffbf
 8013c38:	03ee0000 	.word	0x03ee0000

08013c3c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8013c3c:	b480      	push	{r7}
 8013c3e:	b087      	sub	sp, #28
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	60f8      	str	r0, [r7, #12]
 8013c44:	60b9      	str	r1, [r7, #8]
 8013c46:	4613      	mov	r3, r2
 8013c48:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8013c4a:	79fb      	ldrb	r3, [r7, #7]
 8013c4c:	2b02      	cmp	r3, #2
 8013c4e:	d165      	bne.n	8013d1c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8013c50:	68bb      	ldr	r3, [r7, #8]
 8013c52:	4a41      	ldr	r2, [pc, #260]	; (8013d58 <USB_SetTurnaroundTime+0x11c>)
 8013c54:	4293      	cmp	r3, r2
 8013c56:	d906      	bls.n	8013c66 <USB_SetTurnaroundTime+0x2a>
 8013c58:	68bb      	ldr	r3, [r7, #8]
 8013c5a:	4a40      	ldr	r2, [pc, #256]	; (8013d5c <USB_SetTurnaroundTime+0x120>)
 8013c5c:	4293      	cmp	r3, r2
 8013c5e:	d202      	bcs.n	8013c66 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8013c60:	230f      	movs	r3, #15
 8013c62:	617b      	str	r3, [r7, #20]
 8013c64:	e062      	b.n	8013d2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8013c66:	68bb      	ldr	r3, [r7, #8]
 8013c68:	4a3c      	ldr	r2, [pc, #240]	; (8013d5c <USB_SetTurnaroundTime+0x120>)
 8013c6a:	4293      	cmp	r3, r2
 8013c6c:	d306      	bcc.n	8013c7c <USB_SetTurnaroundTime+0x40>
 8013c6e:	68bb      	ldr	r3, [r7, #8]
 8013c70:	4a3b      	ldr	r2, [pc, #236]	; (8013d60 <USB_SetTurnaroundTime+0x124>)
 8013c72:	4293      	cmp	r3, r2
 8013c74:	d202      	bcs.n	8013c7c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8013c76:	230e      	movs	r3, #14
 8013c78:	617b      	str	r3, [r7, #20]
 8013c7a:	e057      	b.n	8013d2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8013c7c:	68bb      	ldr	r3, [r7, #8]
 8013c7e:	4a38      	ldr	r2, [pc, #224]	; (8013d60 <USB_SetTurnaroundTime+0x124>)
 8013c80:	4293      	cmp	r3, r2
 8013c82:	d306      	bcc.n	8013c92 <USB_SetTurnaroundTime+0x56>
 8013c84:	68bb      	ldr	r3, [r7, #8]
 8013c86:	4a37      	ldr	r2, [pc, #220]	; (8013d64 <USB_SetTurnaroundTime+0x128>)
 8013c88:	4293      	cmp	r3, r2
 8013c8a:	d202      	bcs.n	8013c92 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8013c8c:	230d      	movs	r3, #13
 8013c8e:	617b      	str	r3, [r7, #20]
 8013c90:	e04c      	b.n	8013d2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8013c92:	68bb      	ldr	r3, [r7, #8]
 8013c94:	4a33      	ldr	r2, [pc, #204]	; (8013d64 <USB_SetTurnaroundTime+0x128>)
 8013c96:	4293      	cmp	r3, r2
 8013c98:	d306      	bcc.n	8013ca8 <USB_SetTurnaroundTime+0x6c>
 8013c9a:	68bb      	ldr	r3, [r7, #8]
 8013c9c:	4a32      	ldr	r2, [pc, #200]	; (8013d68 <USB_SetTurnaroundTime+0x12c>)
 8013c9e:	4293      	cmp	r3, r2
 8013ca0:	d802      	bhi.n	8013ca8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8013ca2:	230c      	movs	r3, #12
 8013ca4:	617b      	str	r3, [r7, #20]
 8013ca6:	e041      	b.n	8013d2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8013ca8:	68bb      	ldr	r3, [r7, #8]
 8013caa:	4a2f      	ldr	r2, [pc, #188]	; (8013d68 <USB_SetTurnaroundTime+0x12c>)
 8013cac:	4293      	cmp	r3, r2
 8013cae:	d906      	bls.n	8013cbe <USB_SetTurnaroundTime+0x82>
 8013cb0:	68bb      	ldr	r3, [r7, #8]
 8013cb2:	4a2e      	ldr	r2, [pc, #184]	; (8013d6c <USB_SetTurnaroundTime+0x130>)
 8013cb4:	4293      	cmp	r3, r2
 8013cb6:	d802      	bhi.n	8013cbe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8013cb8:	230b      	movs	r3, #11
 8013cba:	617b      	str	r3, [r7, #20]
 8013cbc:	e036      	b.n	8013d2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8013cbe:	68bb      	ldr	r3, [r7, #8]
 8013cc0:	4a2a      	ldr	r2, [pc, #168]	; (8013d6c <USB_SetTurnaroundTime+0x130>)
 8013cc2:	4293      	cmp	r3, r2
 8013cc4:	d906      	bls.n	8013cd4 <USB_SetTurnaroundTime+0x98>
 8013cc6:	68bb      	ldr	r3, [r7, #8]
 8013cc8:	4a29      	ldr	r2, [pc, #164]	; (8013d70 <USB_SetTurnaroundTime+0x134>)
 8013cca:	4293      	cmp	r3, r2
 8013ccc:	d802      	bhi.n	8013cd4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8013cce:	230a      	movs	r3, #10
 8013cd0:	617b      	str	r3, [r7, #20]
 8013cd2:	e02b      	b.n	8013d2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8013cd4:	68bb      	ldr	r3, [r7, #8]
 8013cd6:	4a26      	ldr	r2, [pc, #152]	; (8013d70 <USB_SetTurnaroundTime+0x134>)
 8013cd8:	4293      	cmp	r3, r2
 8013cda:	d906      	bls.n	8013cea <USB_SetTurnaroundTime+0xae>
 8013cdc:	68bb      	ldr	r3, [r7, #8]
 8013cde:	4a25      	ldr	r2, [pc, #148]	; (8013d74 <USB_SetTurnaroundTime+0x138>)
 8013ce0:	4293      	cmp	r3, r2
 8013ce2:	d202      	bcs.n	8013cea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8013ce4:	2309      	movs	r3, #9
 8013ce6:	617b      	str	r3, [r7, #20]
 8013ce8:	e020      	b.n	8013d2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8013cea:	68bb      	ldr	r3, [r7, #8]
 8013cec:	4a21      	ldr	r2, [pc, #132]	; (8013d74 <USB_SetTurnaroundTime+0x138>)
 8013cee:	4293      	cmp	r3, r2
 8013cf0:	d306      	bcc.n	8013d00 <USB_SetTurnaroundTime+0xc4>
 8013cf2:	68bb      	ldr	r3, [r7, #8]
 8013cf4:	4a20      	ldr	r2, [pc, #128]	; (8013d78 <USB_SetTurnaroundTime+0x13c>)
 8013cf6:	4293      	cmp	r3, r2
 8013cf8:	d802      	bhi.n	8013d00 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8013cfa:	2308      	movs	r3, #8
 8013cfc:	617b      	str	r3, [r7, #20]
 8013cfe:	e015      	b.n	8013d2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8013d00:	68bb      	ldr	r3, [r7, #8]
 8013d02:	4a1d      	ldr	r2, [pc, #116]	; (8013d78 <USB_SetTurnaroundTime+0x13c>)
 8013d04:	4293      	cmp	r3, r2
 8013d06:	d906      	bls.n	8013d16 <USB_SetTurnaroundTime+0xda>
 8013d08:	68bb      	ldr	r3, [r7, #8]
 8013d0a:	4a1c      	ldr	r2, [pc, #112]	; (8013d7c <USB_SetTurnaroundTime+0x140>)
 8013d0c:	4293      	cmp	r3, r2
 8013d0e:	d202      	bcs.n	8013d16 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8013d10:	2307      	movs	r3, #7
 8013d12:	617b      	str	r3, [r7, #20]
 8013d14:	e00a      	b.n	8013d2c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8013d16:	2306      	movs	r3, #6
 8013d18:	617b      	str	r3, [r7, #20]
 8013d1a:	e007      	b.n	8013d2c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8013d1c:	79fb      	ldrb	r3, [r7, #7]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d102      	bne.n	8013d28 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8013d22:	2309      	movs	r3, #9
 8013d24:	617b      	str	r3, [r7, #20]
 8013d26:	e001      	b.n	8013d2c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8013d28:	2309      	movs	r3, #9
 8013d2a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	68db      	ldr	r3, [r3, #12]
 8013d30:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	68da      	ldr	r2, [r3, #12]
 8013d3c:	697b      	ldr	r3, [r7, #20]
 8013d3e:	029b      	lsls	r3, r3, #10
 8013d40:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8013d44:	431a      	orrs	r2, r3
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013d4a:	2300      	movs	r3, #0
}
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	371c      	adds	r7, #28
 8013d50:	46bd      	mov	sp, r7
 8013d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d56:	4770      	bx	lr
 8013d58:	00d8acbf 	.word	0x00d8acbf
 8013d5c:	00e4e1c0 	.word	0x00e4e1c0
 8013d60:	00f42400 	.word	0x00f42400
 8013d64:	01067380 	.word	0x01067380
 8013d68:	011a499f 	.word	0x011a499f
 8013d6c:	01312cff 	.word	0x01312cff
 8013d70:	014ca43f 	.word	0x014ca43f
 8013d74:	016e3600 	.word	0x016e3600
 8013d78:	01a6ab1f 	.word	0x01a6ab1f
 8013d7c:	01e84800 	.word	0x01e84800

08013d80 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013d80:	b480      	push	{r7}
 8013d82:	b083      	sub	sp, #12
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	689b      	ldr	r3, [r3, #8]
 8013d8c:	f043 0201 	orr.w	r2, r3, #1
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013d94:	2300      	movs	r3, #0
}
 8013d96:	4618      	mov	r0, r3
 8013d98:	370c      	adds	r7, #12
 8013d9a:	46bd      	mov	sp, r7
 8013d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da0:	4770      	bx	lr

08013da2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013da2:	b480      	push	{r7}
 8013da4:	b083      	sub	sp, #12
 8013da6:	af00      	add	r7, sp, #0
 8013da8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	689b      	ldr	r3, [r3, #8]
 8013dae:	f023 0201 	bic.w	r2, r3, #1
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013db6:	2300      	movs	r3, #0
}
 8013db8:	4618      	mov	r0, r3
 8013dba:	370c      	adds	r7, #12
 8013dbc:	46bd      	mov	sp, r7
 8013dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc2:	4770      	bx	lr

08013dc4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b084      	sub	sp, #16
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	6078      	str	r0, [r7, #4]
 8013dcc:	460b      	mov	r3, r1
 8013dce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	68db      	ldr	r3, [r3, #12]
 8013dd8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8013de0:	78fb      	ldrb	r3, [r7, #3]
 8013de2:	2b01      	cmp	r3, #1
 8013de4:	d115      	bne.n	8013e12 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	68db      	ldr	r3, [r3, #12]
 8013dea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013df2:	2001      	movs	r0, #1
 8013df4:	f7f0 fa5a 	bl	80042ac <HAL_Delay>
      ms++;
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	3301      	adds	r3, #1
 8013dfc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8013dfe:	6878      	ldr	r0, [r7, #4]
 8013e00:	f001 f93f 	bl	8015082 <USB_GetMode>
 8013e04:	4603      	mov	r3, r0
 8013e06:	2b01      	cmp	r3, #1
 8013e08:	d01e      	beq.n	8013e48 <USB_SetCurrentMode+0x84>
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	2b31      	cmp	r3, #49	; 0x31
 8013e0e:	d9f0      	bls.n	8013df2 <USB_SetCurrentMode+0x2e>
 8013e10:	e01a      	b.n	8013e48 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8013e12:	78fb      	ldrb	r3, [r7, #3]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d115      	bne.n	8013e44 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	68db      	ldr	r3, [r3, #12]
 8013e1c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013e24:	2001      	movs	r0, #1
 8013e26:	f7f0 fa41 	bl	80042ac <HAL_Delay>
      ms++;
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	3301      	adds	r3, #1
 8013e2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8013e30:	6878      	ldr	r0, [r7, #4]
 8013e32:	f001 f926 	bl	8015082 <USB_GetMode>
 8013e36:	4603      	mov	r3, r0
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d005      	beq.n	8013e48 <USB_SetCurrentMode+0x84>
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	2b31      	cmp	r3, #49	; 0x31
 8013e40:	d9f0      	bls.n	8013e24 <USB_SetCurrentMode+0x60>
 8013e42:	e001      	b.n	8013e48 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8013e44:	2301      	movs	r3, #1
 8013e46:	e005      	b.n	8013e54 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	2b32      	cmp	r3, #50	; 0x32
 8013e4c:	d101      	bne.n	8013e52 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8013e4e:	2301      	movs	r3, #1
 8013e50:	e000      	b.n	8013e54 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8013e52:	2300      	movs	r3, #0
}
 8013e54:	4618      	mov	r0, r3
 8013e56:	3710      	adds	r7, #16
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	bd80      	pop	{r7, pc}

08013e5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013e5c:	b084      	sub	sp, #16
 8013e5e:	b580      	push	{r7, lr}
 8013e60:	b086      	sub	sp, #24
 8013e62:	af00      	add	r7, sp, #0
 8013e64:	6078      	str	r0, [r7, #4]
 8013e66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013e6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8013e6e:	2300      	movs	r3, #0
 8013e70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8013e76:	2300      	movs	r3, #0
 8013e78:	613b      	str	r3, [r7, #16]
 8013e7a:	e009      	b.n	8013e90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013e7c:	687a      	ldr	r2, [r7, #4]
 8013e7e:	693b      	ldr	r3, [r7, #16]
 8013e80:	3340      	adds	r3, #64	; 0x40
 8013e82:	009b      	lsls	r3, r3, #2
 8013e84:	4413      	add	r3, r2
 8013e86:	2200      	movs	r2, #0
 8013e88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8013e8a:	693b      	ldr	r3, [r7, #16]
 8013e8c:	3301      	adds	r3, #1
 8013e8e:	613b      	str	r3, [r7, #16]
 8013e90:	693b      	ldr	r3, [r7, #16]
 8013e92:	2b0e      	cmp	r3, #14
 8013e94:	d9f2      	bls.n	8013e7c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8013e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d11c      	bne.n	8013ed6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ea2:	685b      	ldr	r3, [r3, #4]
 8013ea4:	68fa      	ldr	r2, [r7, #12]
 8013ea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013eaa:	f043 0302 	orr.w	r3, r3, #2
 8013eae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013eb4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	601a      	str	r2, [r3, #0]
 8013ed4:	e005      	b.n	8013ee2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013eda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013ee8:	461a      	mov	r2, r3
 8013eea:	2300      	movs	r3, #0
 8013eec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ef4:	4619      	mov	r1, r3
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013efc:	461a      	mov	r2, r3
 8013efe:	680b      	ldr	r3, [r1, #0]
 8013f00:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f04:	2b01      	cmp	r3, #1
 8013f06:	d10c      	bne.n	8013f22 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8013f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d104      	bne.n	8013f18 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8013f0e:	2100      	movs	r1, #0
 8013f10:	6878      	ldr	r0, [r7, #4]
 8013f12:	f000 f965 	bl	80141e0 <USB_SetDevSpeed>
 8013f16:	e008      	b.n	8013f2a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8013f18:	2101      	movs	r1, #1
 8013f1a:	6878      	ldr	r0, [r7, #4]
 8013f1c:	f000 f960 	bl	80141e0 <USB_SetDevSpeed>
 8013f20:	e003      	b.n	8013f2a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8013f22:	2103      	movs	r1, #3
 8013f24:	6878      	ldr	r0, [r7, #4]
 8013f26:	f000 f95b 	bl	80141e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8013f2a:	2110      	movs	r1, #16
 8013f2c:	6878      	ldr	r0, [r7, #4]
 8013f2e:	f000 f8f3 	bl	8014118 <USB_FlushTxFifo>
 8013f32:	4603      	mov	r3, r0
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d001      	beq.n	8013f3c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8013f38:	2301      	movs	r3, #1
 8013f3a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013f3c:	6878      	ldr	r0, [r7, #4]
 8013f3e:	f000 f91f 	bl	8014180 <USB_FlushRxFifo>
 8013f42:	4603      	mov	r3, r0
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d001      	beq.n	8013f4c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8013f48:	2301      	movs	r3, #1
 8013f4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f52:	461a      	mov	r2, r3
 8013f54:	2300      	movs	r3, #0
 8013f56:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f5e:	461a      	mov	r2, r3
 8013f60:	2300      	movs	r3, #0
 8013f62:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f6a:	461a      	mov	r2, r3
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013f70:	2300      	movs	r3, #0
 8013f72:	613b      	str	r3, [r7, #16]
 8013f74:	e043      	b.n	8013ffe <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013f76:	693b      	ldr	r3, [r7, #16]
 8013f78:	015a      	lsls	r2, r3, #5
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	4413      	add	r3, r2
 8013f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013f88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013f8c:	d118      	bne.n	8013fc0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8013f8e:	693b      	ldr	r3, [r7, #16]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d10a      	bne.n	8013faa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8013f94:	693b      	ldr	r3, [r7, #16]
 8013f96:	015a      	lsls	r2, r3, #5
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	4413      	add	r3, r2
 8013f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fa0:	461a      	mov	r2, r3
 8013fa2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013fa6:	6013      	str	r3, [r2, #0]
 8013fa8:	e013      	b.n	8013fd2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013faa:	693b      	ldr	r3, [r7, #16]
 8013fac:	015a      	lsls	r2, r3, #5
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	4413      	add	r3, r2
 8013fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fb6:	461a      	mov	r2, r3
 8013fb8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013fbc:	6013      	str	r3, [r2, #0]
 8013fbe:	e008      	b.n	8013fd2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013fc0:	693b      	ldr	r3, [r7, #16]
 8013fc2:	015a      	lsls	r2, r3, #5
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	4413      	add	r3, r2
 8013fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fcc:	461a      	mov	r2, r3
 8013fce:	2300      	movs	r3, #0
 8013fd0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8013fd2:	693b      	ldr	r3, [r7, #16]
 8013fd4:	015a      	lsls	r2, r3, #5
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	4413      	add	r3, r2
 8013fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fde:	461a      	mov	r2, r3
 8013fe0:	2300      	movs	r3, #0
 8013fe2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013fe4:	693b      	ldr	r3, [r7, #16]
 8013fe6:	015a      	lsls	r2, r3, #5
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	4413      	add	r3, r2
 8013fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ff0:	461a      	mov	r2, r3
 8013ff2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013ff6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013ff8:	693b      	ldr	r3, [r7, #16]
 8013ffa:	3301      	adds	r3, #1
 8013ffc:	613b      	str	r3, [r7, #16]
 8013ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014000:	693a      	ldr	r2, [r7, #16]
 8014002:	429a      	cmp	r2, r3
 8014004:	d3b7      	bcc.n	8013f76 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014006:	2300      	movs	r3, #0
 8014008:	613b      	str	r3, [r7, #16]
 801400a:	e043      	b.n	8014094 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801400c:	693b      	ldr	r3, [r7, #16]
 801400e:	015a      	lsls	r2, r3, #5
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	4413      	add	r3, r2
 8014014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801401e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014022:	d118      	bne.n	8014056 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8014024:	693b      	ldr	r3, [r7, #16]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d10a      	bne.n	8014040 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801402a:	693b      	ldr	r3, [r7, #16]
 801402c:	015a      	lsls	r2, r3, #5
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	4413      	add	r3, r2
 8014032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014036:	461a      	mov	r2, r3
 8014038:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801403c:	6013      	str	r3, [r2, #0]
 801403e:	e013      	b.n	8014068 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8014040:	693b      	ldr	r3, [r7, #16]
 8014042:	015a      	lsls	r2, r3, #5
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	4413      	add	r3, r2
 8014048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801404c:	461a      	mov	r2, r3
 801404e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8014052:	6013      	str	r3, [r2, #0]
 8014054:	e008      	b.n	8014068 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8014056:	693b      	ldr	r3, [r7, #16]
 8014058:	015a      	lsls	r2, r3, #5
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	4413      	add	r3, r2
 801405e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014062:	461a      	mov	r2, r3
 8014064:	2300      	movs	r3, #0
 8014066:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8014068:	693b      	ldr	r3, [r7, #16]
 801406a:	015a      	lsls	r2, r3, #5
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	4413      	add	r3, r2
 8014070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014074:	461a      	mov	r2, r3
 8014076:	2300      	movs	r3, #0
 8014078:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801407a:	693b      	ldr	r3, [r7, #16]
 801407c:	015a      	lsls	r2, r3, #5
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	4413      	add	r3, r2
 8014082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014086:	461a      	mov	r2, r3
 8014088:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801408c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801408e:	693b      	ldr	r3, [r7, #16]
 8014090:	3301      	adds	r3, #1
 8014092:	613b      	str	r3, [r7, #16]
 8014094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014096:	693a      	ldr	r2, [r7, #16]
 8014098:	429a      	cmp	r2, r3
 801409a:	d3b7      	bcc.n	801400c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80140a2:	691b      	ldr	r3, [r3, #16]
 80140a4:	68fa      	ldr	r2, [r7, #12]
 80140a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80140aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80140ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	2200      	movs	r2, #0
 80140b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80140bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80140be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d105      	bne.n	80140d0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	699b      	ldr	r3, [r3, #24]
 80140c8:	f043 0210 	orr.w	r2, r3, #16
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	699a      	ldr	r2, [r3, #24]
 80140d4:	4b0e      	ldr	r3, [pc, #56]	; (8014110 <USB_DevInit+0x2b4>)
 80140d6:	4313      	orrs	r3, r2
 80140d8:	687a      	ldr	r2, [r7, #4]
 80140da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80140dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d005      	beq.n	80140ee <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	699b      	ldr	r3, [r3, #24]
 80140e6:	f043 0208 	orr.w	r2, r3, #8
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80140ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80140f0:	2b01      	cmp	r3, #1
 80140f2:	d105      	bne.n	8014100 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	699a      	ldr	r2, [r3, #24]
 80140f8:	4b06      	ldr	r3, [pc, #24]	; (8014114 <USB_DevInit+0x2b8>)
 80140fa:	4313      	orrs	r3, r2
 80140fc:	687a      	ldr	r2, [r7, #4]
 80140fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8014100:	7dfb      	ldrb	r3, [r7, #23]
}
 8014102:	4618      	mov	r0, r3
 8014104:	3718      	adds	r7, #24
 8014106:	46bd      	mov	sp, r7
 8014108:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801410c:	b004      	add	sp, #16
 801410e:	4770      	bx	lr
 8014110:	803c3800 	.word	0x803c3800
 8014114:	40000004 	.word	0x40000004

08014118 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8014118:	b480      	push	{r7}
 801411a:	b085      	sub	sp, #20
 801411c:	af00      	add	r7, sp, #0
 801411e:	6078      	str	r0, [r7, #4]
 8014120:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014122:	2300      	movs	r3, #0
 8014124:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	3301      	adds	r3, #1
 801412a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	4a13      	ldr	r2, [pc, #76]	; (801417c <USB_FlushTxFifo+0x64>)
 8014130:	4293      	cmp	r3, r2
 8014132:	d901      	bls.n	8014138 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8014134:	2303      	movs	r3, #3
 8014136:	e01b      	b.n	8014170 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	691b      	ldr	r3, [r3, #16]
 801413c:	2b00      	cmp	r3, #0
 801413e:	daf2      	bge.n	8014126 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8014140:	2300      	movs	r3, #0
 8014142:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014144:	683b      	ldr	r3, [r7, #0]
 8014146:	019b      	lsls	r3, r3, #6
 8014148:	f043 0220 	orr.w	r2, r3, #32
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	3301      	adds	r3, #1
 8014154:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	4a08      	ldr	r2, [pc, #32]	; (801417c <USB_FlushTxFifo+0x64>)
 801415a:	4293      	cmp	r3, r2
 801415c:	d901      	bls.n	8014162 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801415e:	2303      	movs	r3, #3
 8014160:	e006      	b.n	8014170 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	691b      	ldr	r3, [r3, #16]
 8014166:	f003 0320 	and.w	r3, r3, #32
 801416a:	2b20      	cmp	r3, #32
 801416c:	d0f0      	beq.n	8014150 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801416e:	2300      	movs	r3, #0
}
 8014170:	4618      	mov	r0, r3
 8014172:	3714      	adds	r7, #20
 8014174:	46bd      	mov	sp, r7
 8014176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801417a:	4770      	bx	lr
 801417c:	00030d40 	.word	0x00030d40

08014180 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8014180:	b480      	push	{r7}
 8014182:	b085      	sub	sp, #20
 8014184:	af00      	add	r7, sp, #0
 8014186:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014188:	2300      	movs	r3, #0
 801418a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	3301      	adds	r3, #1
 8014190:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	4a11      	ldr	r2, [pc, #68]	; (80141dc <USB_FlushRxFifo+0x5c>)
 8014196:	4293      	cmp	r3, r2
 8014198:	d901      	bls.n	801419e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801419a:	2303      	movs	r3, #3
 801419c:	e018      	b.n	80141d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	691b      	ldr	r3, [r3, #16]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	daf2      	bge.n	801418c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80141a6:	2300      	movs	r3, #0
 80141a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	2210      	movs	r2, #16
 80141ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	3301      	adds	r3, #1
 80141b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	4a08      	ldr	r2, [pc, #32]	; (80141dc <USB_FlushRxFifo+0x5c>)
 80141ba:	4293      	cmp	r3, r2
 80141bc:	d901      	bls.n	80141c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80141be:	2303      	movs	r3, #3
 80141c0:	e006      	b.n	80141d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	691b      	ldr	r3, [r3, #16]
 80141c6:	f003 0310 	and.w	r3, r3, #16
 80141ca:	2b10      	cmp	r3, #16
 80141cc:	d0f0      	beq.n	80141b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80141ce:	2300      	movs	r3, #0
}
 80141d0:	4618      	mov	r0, r3
 80141d2:	3714      	adds	r7, #20
 80141d4:	46bd      	mov	sp, r7
 80141d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141da:	4770      	bx	lr
 80141dc:	00030d40 	.word	0x00030d40

080141e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80141e0:	b480      	push	{r7}
 80141e2:	b085      	sub	sp, #20
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	6078      	str	r0, [r7, #4]
 80141e8:	460b      	mov	r3, r1
 80141ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80141f6:	681a      	ldr	r2, [r3, #0]
 80141f8:	78fb      	ldrb	r3, [r7, #3]
 80141fa:	68f9      	ldr	r1, [r7, #12]
 80141fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014200:	4313      	orrs	r3, r2
 8014202:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8014204:	2300      	movs	r3, #0
}
 8014206:	4618      	mov	r0, r3
 8014208:	3714      	adds	r7, #20
 801420a:	46bd      	mov	sp, r7
 801420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014210:	4770      	bx	lr

08014212 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8014212:	b480      	push	{r7}
 8014214:	b087      	sub	sp, #28
 8014216:	af00      	add	r7, sp, #0
 8014218:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801421e:	693b      	ldr	r3, [r7, #16]
 8014220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014224:	689b      	ldr	r3, [r3, #8]
 8014226:	f003 0306 	and.w	r3, r3, #6
 801422a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	2b00      	cmp	r3, #0
 8014230:	d102      	bne.n	8014238 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8014232:	2300      	movs	r3, #0
 8014234:	75fb      	strb	r3, [r7, #23]
 8014236:	e00a      	b.n	801424e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	2b02      	cmp	r3, #2
 801423c:	d002      	beq.n	8014244 <USB_GetDevSpeed+0x32>
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	2b06      	cmp	r3, #6
 8014242:	d102      	bne.n	801424a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8014244:	2302      	movs	r3, #2
 8014246:	75fb      	strb	r3, [r7, #23]
 8014248:	e001      	b.n	801424e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801424a:	230f      	movs	r3, #15
 801424c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801424e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014250:	4618      	mov	r0, r3
 8014252:	371c      	adds	r7, #28
 8014254:	46bd      	mov	sp, r7
 8014256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801425a:	4770      	bx	lr

0801425c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801425c:	b480      	push	{r7}
 801425e:	b085      	sub	sp, #20
 8014260:	af00      	add	r7, sp, #0
 8014262:	6078      	str	r0, [r7, #4]
 8014264:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801426a:	683b      	ldr	r3, [r7, #0]
 801426c:	781b      	ldrb	r3, [r3, #0]
 801426e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014270:	683b      	ldr	r3, [r7, #0]
 8014272:	785b      	ldrb	r3, [r3, #1]
 8014274:	2b01      	cmp	r3, #1
 8014276:	d139      	bne.n	80142ec <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801427e:	69da      	ldr	r2, [r3, #28]
 8014280:	683b      	ldr	r3, [r7, #0]
 8014282:	781b      	ldrb	r3, [r3, #0]
 8014284:	f003 030f 	and.w	r3, r3, #15
 8014288:	2101      	movs	r1, #1
 801428a:	fa01 f303 	lsl.w	r3, r1, r3
 801428e:	b29b      	uxth	r3, r3
 8014290:	68f9      	ldr	r1, [r7, #12]
 8014292:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014296:	4313      	orrs	r3, r2
 8014298:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801429a:	68bb      	ldr	r3, [r7, #8]
 801429c:	015a      	lsls	r2, r3, #5
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	4413      	add	r3, r2
 80142a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d153      	bne.n	8014358 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80142b0:	68bb      	ldr	r3, [r7, #8]
 80142b2:	015a      	lsls	r2, r3, #5
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	4413      	add	r3, r2
 80142b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142bc:	681a      	ldr	r2, [r3, #0]
 80142be:	683b      	ldr	r3, [r7, #0]
 80142c0:	689b      	ldr	r3, [r3, #8]
 80142c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80142c6:	683b      	ldr	r3, [r7, #0]
 80142c8:	791b      	ldrb	r3, [r3, #4]
 80142ca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80142cc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80142ce:	68bb      	ldr	r3, [r7, #8]
 80142d0:	059b      	lsls	r3, r3, #22
 80142d2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80142d4:	431a      	orrs	r2, r3
 80142d6:	68bb      	ldr	r3, [r7, #8]
 80142d8:	0159      	lsls	r1, r3, #5
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	440b      	add	r3, r1
 80142de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142e2:	4619      	mov	r1, r3
 80142e4:	4b20      	ldr	r3, [pc, #128]	; (8014368 <USB_ActivateEndpoint+0x10c>)
 80142e6:	4313      	orrs	r3, r2
 80142e8:	600b      	str	r3, [r1, #0]
 80142ea:	e035      	b.n	8014358 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80142f2:	69da      	ldr	r2, [r3, #28]
 80142f4:	683b      	ldr	r3, [r7, #0]
 80142f6:	781b      	ldrb	r3, [r3, #0]
 80142f8:	f003 030f 	and.w	r3, r3, #15
 80142fc:	2101      	movs	r1, #1
 80142fe:	fa01 f303 	lsl.w	r3, r1, r3
 8014302:	041b      	lsls	r3, r3, #16
 8014304:	68f9      	ldr	r1, [r7, #12]
 8014306:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801430a:	4313      	orrs	r3, r2
 801430c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801430e:	68bb      	ldr	r3, [r7, #8]
 8014310:	015a      	lsls	r2, r3, #5
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	4413      	add	r3, r2
 8014316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014320:	2b00      	cmp	r3, #0
 8014322:	d119      	bne.n	8014358 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014324:	68bb      	ldr	r3, [r7, #8]
 8014326:	015a      	lsls	r2, r3, #5
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	4413      	add	r3, r2
 801432c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014330:	681a      	ldr	r2, [r3, #0]
 8014332:	683b      	ldr	r3, [r7, #0]
 8014334:	689b      	ldr	r3, [r3, #8]
 8014336:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801433a:	683b      	ldr	r3, [r7, #0]
 801433c:	791b      	ldrb	r3, [r3, #4]
 801433e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014340:	430b      	orrs	r3, r1
 8014342:	431a      	orrs	r2, r3
 8014344:	68bb      	ldr	r3, [r7, #8]
 8014346:	0159      	lsls	r1, r3, #5
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	440b      	add	r3, r1
 801434c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014350:	4619      	mov	r1, r3
 8014352:	4b05      	ldr	r3, [pc, #20]	; (8014368 <USB_ActivateEndpoint+0x10c>)
 8014354:	4313      	orrs	r3, r2
 8014356:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8014358:	2300      	movs	r3, #0
}
 801435a:	4618      	mov	r0, r3
 801435c:	3714      	adds	r7, #20
 801435e:	46bd      	mov	sp, r7
 8014360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014364:	4770      	bx	lr
 8014366:	bf00      	nop
 8014368:	10008000 	.word	0x10008000

0801436c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801436c:	b480      	push	{r7}
 801436e:	b085      	sub	sp, #20
 8014370:	af00      	add	r7, sp, #0
 8014372:	6078      	str	r0, [r7, #4]
 8014374:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801437a:	683b      	ldr	r3, [r7, #0]
 801437c:	781b      	ldrb	r3, [r3, #0]
 801437e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8014380:	683b      	ldr	r3, [r7, #0]
 8014382:	785b      	ldrb	r3, [r3, #1]
 8014384:	2b01      	cmp	r3, #1
 8014386:	d161      	bne.n	801444c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014388:	68bb      	ldr	r3, [r7, #8]
 801438a:	015a      	lsls	r2, r3, #5
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	4413      	add	r3, r2
 8014390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801439a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801439e:	d11f      	bne.n	80143e0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80143a0:	68bb      	ldr	r3, [r7, #8]
 80143a2:	015a      	lsls	r2, r3, #5
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	4413      	add	r3, r2
 80143a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	68ba      	ldr	r2, [r7, #8]
 80143b0:	0151      	lsls	r1, r2, #5
 80143b2:	68fa      	ldr	r2, [r7, #12]
 80143b4:	440a      	add	r2, r1
 80143b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80143ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80143be:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80143c0:	68bb      	ldr	r3, [r7, #8]
 80143c2:	015a      	lsls	r2, r3, #5
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	4413      	add	r3, r2
 80143c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	68ba      	ldr	r2, [r7, #8]
 80143d0:	0151      	lsls	r1, r2, #5
 80143d2:	68fa      	ldr	r2, [r7, #12]
 80143d4:	440a      	add	r2, r1
 80143d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80143da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80143de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80143e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80143e8:	683b      	ldr	r3, [r7, #0]
 80143ea:	781b      	ldrb	r3, [r3, #0]
 80143ec:	f003 030f 	and.w	r3, r3, #15
 80143f0:	2101      	movs	r1, #1
 80143f2:	fa01 f303 	lsl.w	r3, r1, r3
 80143f6:	b29b      	uxth	r3, r3
 80143f8:	43db      	mvns	r3, r3
 80143fa:	68f9      	ldr	r1, [r7, #12]
 80143fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014400:	4013      	ands	r3, r2
 8014402:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801440a:	69da      	ldr	r2, [r3, #28]
 801440c:	683b      	ldr	r3, [r7, #0]
 801440e:	781b      	ldrb	r3, [r3, #0]
 8014410:	f003 030f 	and.w	r3, r3, #15
 8014414:	2101      	movs	r1, #1
 8014416:	fa01 f303 	lsl.w	r3, r1, r3
 801441a:	b29b      	uxth	r3, r3
 801441c:	43db      	mvns	r3, r3
 801441e:	68f9      	ldr	r1, [r7, #12]
 8014420:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014424:	4013      	ands	r3, r2
 8014426:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8014428:	68bb      	ldr	r3, [r7, #8]
 801442a:	015a      	lsls	r2, r3, #5
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	4413      	add	r3, r2
 8014430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014434:	681a      	ldr	r2, [r3, #0]
 8014436:	68bb      	ldr	r3, [r7, #8]
 8014438:	0159      	lsls	r1, r3, #5
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	440b      	add	r3, r1
 801443e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014442:	4619      	mov	r1, r3
 8014444:	4b35      	ldr	r3, [pc, #212]	; (801451c <USB_DeactivateEndpoint+0x1b0>)
 8014446:	4013      	ands	r3, r2
 8014448:	600b      	str	r3, [r1, #0]
 801444a:	e060      	b.n	801450e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801444c:	68bb      	ldr	r3, [r7, #8]
 801444e:	015a      	lsls	r2, r3, #5
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	4413      	add	r3, r2
 8014454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801445e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014462:	d11f      	bne.n	80144a4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8014464:	68bb      	ldr	r3, [r7, #8]
 8014466:	015a      	lsls	r2, r3, #5
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	4413      	add	r3, r2
 801446c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	68ba      	ldr	r2, [r7, #8]
 8014474:	0151      	lsls	r1, r2, #5
 8014476:	68fa      	ldr	r2, [r7, #12]
 8014478:	440a      	add	r2, r1
 801447a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801447e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014482:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8014484:	68bb      	ldr	r3, [r7, #8]
 8014486:	015a      	lsls	r2, r3, #5
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	4413      	add	r3, r2
 801448c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	68ba      	ldr	r2, [r7, #8]
 8014494:	0151      	lsls	r1, r2, #5
 8014496:	68fa      	ldr	r2, [r7, #12]
 8014498:	440a      	add	r2, r1
 801449a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801449e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80144a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80144ac:	683b      	ldr	r3, [r7, #0]
 80144ae:	781b      	ldrb	r3, [r3, #0]
 80144b0:	f003 030f 	and.w	r3, r3, #15
 80144b4:	2101      	movs	r1, #1
 80144b6:	fa01 f303 	lsl.w	r3, r1, r3
 80144ba:	041b      	lsls	r3, r3, #16
 80144bc:	43db      	mvns	r3, r3
 80144be:	68f9      	ldr	r1, [r7, #12]
 80144c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80144c4:	4013      	ands	r3, r2
 80144c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144ce:	69da      	ldr	r2, [r3, #28]
 80144d0:	683b      	ldr	r3, [r7, #0]
 80144d2:	781b      	ldrb	r3, [r3, #0]
 80144d4:	f003 030f 	and.w	r3, r3, #15
 80144d8:	2101      	movs	r1, #1
 80144da:	fa01 f303 	lsl.w	r3, r1, r3
 80144de:	041b      	lsls	r3, r3, #16
 80144e0:	43db      	mvns	r3, r3
 80144e2:	68f9      	ldr	r1, [r7, #12]
 80144e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80144e8:	4013      	ands	r3, r2
 80144ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80144ec:	68bb      	ldr	r3, [r7, #8]
 80144ee:	015a      	lsls	r2, r3, #5
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	4413      	add	r3, r2
 80144f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80144f8:	681a      	ldr	r2, [r3, #0]
 80144fa:	68bb      	ldr	r3, [r7, #8]
 80144fc:	0159      	lsls	r1, r3, #5
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	440b      	add	r3, r1
 8014502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014506:	4619      	mov	r1, r3
 8014508:	4b05      	ldr	r3, [pc, #20]	; (8014520 <USB_DeactivateEndpoint+0x1b4>)
 801450a:	4013      	ands	r3, r2
 801450c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801450e:	2300      	movs	r3, #0
}
 8014510:	4618      	mov	r0, r3
 8014512:	3714      	adds	r7, #20
 8014514:	46bd      	mov	sp, r7
 8014516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801451a:	4770      	bx	lr
 801451c:	ec337800 	.word	0xec337800
 8014520:	eff37800 	.word	0xeff37800

08014524 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8014524:	b580      	push	{r7, lr}
 8014526:	b08a      	sub	sp, #40	; 0x28
 8014528:	af02      	add	r7, sp, #8
 801452a:	60f8      	str	r0, [r7, #12]
 801452c:	60b9      	str	r1, [r7, #8]
 801452e:	4613      	mov	r3, r2
 8014530:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8014536:	68bb      	ldr	r3, [r7, #8]
 8014538:	781b      	ldrb	r3, [r3, #0]
 801453a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801453c:	68bb      	ldr	r3, [r7, #8]
 801453e:	785b      	ldrb	r3, [r3, #1]
 8014540:	2b01      	cmp	r3, #1
 8014542:	f040 8181 	bne.w	8014848 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8014546:	68bb      	ldr	r3, [r7, #8]
 8014548:	691b      	ldr	r3, [r3, #16]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d132      	bne.n	80145b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801454e:	69bb      	ldr	r3, [r7, #24]
 8014550:	015a      	lsls	r2, r3, #5
 8014552:	69fb      	ldr	r3, [r7, #28]
 8014554:	4413      	add	r3, r2
 8014556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801455a:	691a      	ldr	r2, [r3, #16]
 801455c:	69bb      	ldr	r3, [r7, #24]
 801455e:	0159      	lsls	r1, r3, #5
 8014560:	69fb      	ldr	r3, [r7, #28]
 8014562:	440b      	add	r3, r1
 8014564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014568:	4619      	mov	r1, r3
 801456a:	4ba5      	ldr	r3, [pc, #660]	; (8014800 <USB_EPStartXfer+0x2dc>)
 801456c:	4013      	ands	r3, r2
 801456e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014570:	69bb      	ldr	r3, [r7, #24]
 8014572:	015a      	lsls	r2, r3, #5
 8014574:	69fb      	ldr	r3, [r7, #28]
 8014576:	4413      	add	r3, r2
 8014578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801457c:	691b      	ldr	r3, [r3, #16]
 801457e:	69ba      	ldr	r2, [r7, #24]
 8014580:	0151      	lsls	r1, r2, #5
 8014582:	69fa      	ldr	r2, [r7, #28]
 8014584:	440a      	add	r2, r1
 8014586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801458a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801458e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014590:	69bb      	ldr	r3, [r7, #24]
 8014592:	015a      	lsls	r2, r3, #5
 8014594:	69fb      	ldr	r3, [r7, #28]
 8014596:	4413      	add	r3, r2
 8014598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801459c:	691a      	ldr	r2, [r3, #16]
 801459e:	69bb      	ldr	r3, [r7, #24]
 80145a0:	0159      	lsls	r1, r3, #5
 80145a2:	69fb      	ldr	r3, [r7, #28]
 80145a4:	440b      	add	r3, r1
 80145a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145aa:	4619      	mov	r1, r3
 80145ac:	4b95      	ldr	r3, [pc, #596]	; (8014804 <USB_EPStartXfer+0x2e0>)
 80145ae:	4013      	ands	r3, r2
 80145b0:	610b      	str	r3, [r1, #16]
 80145b2:	e092      	b.n	80146da <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80145b4:	69bb      	ldr	r3, [r7, #24]
 80145b6:	015a      	lsls	r2, r3, #5
 80145b8:	69fb      	ldr	r3, [r7, #28]
 80145ba:	4413      	add	r3, r2
 80145bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145c0:	691a      	ldr	r2, [r3, #16]
 80145c2:	69bb      	ldr	r3, [r7, #24]
 80145c4:	0159      	lsls	r1, r3, #5
 80145c6:	69fb      	ldr	r3, [r7, #28]
 80145c8:	440b      	add	r3, r1
 80145ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145ce:	4619      	mov	r1, r3
 80145d0:	4b8c      	ldr	r3, [pc, #560]	; (8014804 <USB_EPStartXfer+0x2e0>)
 80145d2:	4013      	ands	r3, r2
 80145d4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80145d6:	69bb      	ldr	r3, [r7, #24]
 80145d8:	015a      	lsls	r2, r3, #5
 80145da:	69fb      	ldr	r3, [r7, #28]
 80145dc:	4413      	add	r3, r2
 80145de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145e2:	691a      	ldr	r2, [r3, #16]
 80145e4:	69bb      	ldr	r3, [r7, #24]
 80145e6:	0159      	lsls	r1, r3, #5
 80145e8:	69fb      	ldr	r3, [r7, #28]
 80145ea:	440b      	add	r3, r1
 80145ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145f0:	4619      	mov	r1, r3
 80145f2:	4b83      	ldr	r3, [pc, #524]	; (8014800 <USB_EPStartXfer+0x2dc>)
 80145f4:	4013      	ands	r3, r2
 80145f6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80145f8:	69bb      	ldr	r3, [r7, #24]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d11a      	bne.n	8014634 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80145fe:	68bb      	ldr	r3, [r7, #8]
 8014600:	691a      	ldr	r2, [r3, #16]
 8014602:	68bb      	ldr	r3, [r7, #8]
 8014604:	689b      	ldr	r3, [r3, #8]
 8014606:	429a      	cmp	r2, r3
 8014608:	d903      	bls.n	8014612 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 801460a:	68bb      	ldr	r3, [r7, #8]
 801460c:	689a      	ldr	r2, [r3, #8]
 801460e:	68bb      	ldr	r3, [r7, #8]
 8014610:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014612:	69bb      	ldr	r3, [r7, #24]
 8014614:	015a      	lsls	r2, r3, #5
 8014616:	69fb      	ldr	r3, [r7, #28]
 8014618:	4413      	add	r3, r2
 801461a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801461e:	691b      	ldr	r3, [r3, #16]
 8014620:	69ba      	ldr	r2, [r7, #24]
 8014622:	0151      	lsls	r1, r2, #5
 8014624:	69fa      	ldr	r2, [r7, #28]
 8014626:	440a      	add	r2, r1
 8014628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801462c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014630:	6113      	str	r3, [r2, #16]
 8014632:	e01b      	b.n	801466c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8014634:	69bb      	ldr	r3, [r7, #24]
 8014636:	015a      	lsls	r2, r3, #5
 8014638:	69fb      	ldr	r3, [r7, #28]
 801463a:	4413      	add	r3, r2
 801463c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014640:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8014642:	68bb      	ldr	r3, [r7, #8]
 8014644:	6919      	ldr	r1, [r3, #16]
 8014646:	68bb      	ldr	r3, [r7, #8]
 8014648:	689b      	ldr	r3, [r3, #8]
 801464a:	440b      	add	r3, r1
 801464c:	1e59      	subs	r1, r3, #1
 801464e:	68bb      	ldr	r3, [r7, #8]
 8014650:	689b      	ldr	r3, [r3, #8]
 8014652:	fbb1 f3f3 	udiv	r3, r1, r3
 8014656:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8014658:	4b6b      	ldr	r3, [pc, #428]	; (8014808 <USB_EPStartXfer+0x2e4>)
 801465a:	400b      	ands	r3, r1
 801465c:	69b9      	ldr	r1, [r7, #24]
 801465e:	0148      	lsls	r0, r1, #5
 8014660:	69f9      	ldr	r1, [r7, #28]
 8014662:	4401      	add	r1, r0
 8014664:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8014668:	4313      	orrs	r3, r2
 801466a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801466c:	69bb      	ldr	r3, [r7, #24]
 801466e:	015a      	lsls	r2, r3, #5
 8014670:	69fb      	ldr	r3, [r7, #28]
 8014672:	4413      	add	r3, r2
 8014674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014678:	691a      	ldr	r2, [r3, #16]
 801467a:	68bb      	ldr	r3, [r7, #8]
 801467c:	691b      	ldr	r3, [r3, #16]
 801467e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014682:	69b9      	ldr	r1, [r7, #24]
 8014684:	0148      	lsls	r0, r1, #5
 8014686:	69f9      	ldr	r1, [r7, #28]
 8014688:	4401      	add	r1, r0
 801468a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801468e:	4313      	orrs	r3, r2
 8014690:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8014692:	68bb      	ldr	r3, [r7, #8]
 8014694:	791b      	ldrb	r3, [r3, #4]
 8014696:	2b01      	cmp	r3, #1
 8014698:	d11f      	bne.n	80146da <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801469a:	69bb      	ldr	r3, [r7, #24]
 801469c:	015a      	lsls	r2, r3, #5
 801469e:	69fb      	ldr	r3, [r7, #28]
 80146a0:	4413      	add	r3, r2
 80146a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80146a6:	691b      	ldr	r3, [r3, #16]
 80146a8:	69ba      	ldr	r2, [r7, #24]
 80146aa:	0151      	lsls	r1, r2, #5
 80146ac:	69fa      	ldr	r2, [r7, #28]
 80146ae:	440a      	add	r2, r1
 80146b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80146b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80146b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80146ba:	69bb      	ldr	r3, [r7, #24]
 80146bc:	015a      	lsls	r2, r3, #5
 80146be:	69fb      	ldr	r3, [r7, #28]
 80146c0:	4413      	add	r3, r2
 80146c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80146c6:	691b      	ldr	r3, [r3, #16]
 80146c8:	69ba      	ldr	r2, [r7, #24]
 80146ca:	0151      	lsls	r1, r2, #5
 80146cc:	69fa      	ldr	r2, [r7, #28]
 80146ce:	440a      	add	r2, r1
 80146d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80146d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80146d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80146da:	79fb      	ldrb	r3, [r7, #7]
 80146dc:	2b01      	cmp	r3, #1
 80146de:	d14b      	bne.n	8014778 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80146e0:	68bb      	ldr	r3, [r7, #8]
 80146e2:	69db      	ldr	r3, [r3, #28]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d009      	beq.n	80146fc <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80146e8:	69bb      	ldr	r3, [r7, #24]
 80146ea:	015a      	lsls	r2, r3, #5
 80146ec:	69fb      	ldr	r3, [r7, #28]
 80146ee:	4413      	add	r3, r2
 80146f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80146f4:	461a      	mov	r2, r3
 80146f6:	68bb      	ldr	r3, [r7, #8]
 80146f8:	69db      	ldr	r3, [r3, #28]
 80146fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80146fc:	68bb      	ldr	r3, [r7, #8]
 80146fe:	791b      	ldrb	r3, [r3, #4]
 8014700:	2b01      	cmp	r3, #1
 8014702:	d128      	bne.n	8014756 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014704:	69fb      	ldr	r3, [r7, #28]
 8014706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801470a:	689b      	ldr	r3, [r3, #8]
 801470c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014710:	2b00      	cmp	r3, #0
 8014712:	d110      	bne.n	8014736 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014714:	69bb      	ldr	r3, [r7, #24]
 8014716:	015a      	lsls	r2, r3, #5
 8014718:	69fb      	ldr	r3, [r7, #28]
 801471a:	4413      	add	r3, r2
 801471c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	69ba      	ldr	r2, [r7, #24]
 8014724:	0151      	lsls	r1, r2, #5
 8014726:	69fa      	ldr	r2, [r7, #28]
 8014728:	440a      	add	r2, r1
 801472a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801472e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014732:	6013      	str	r3, [r2, #0]
 8014734:	e00f      	b.n	8014756 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014736:	69bb      	ldr	r3, [r7, #24]
 8014738:	015a      	lsls	r2, r3, #5
 801473a:	69fb      	ldr	r3, [r7, #28]
 801473c:	4413      	add	r3, r2
 801473e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	69ba      	ldr	r2, [r7, #24]
 8014746:	0151      	lsls	r1, r2, #5
 8014748:	69fa      	ldr	r2, [r7, #28]
 801474a:	440a      	add	r2, r1
 801474c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014754:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014756:	69bb      	ldr	r3, [r7, #24]
 8014758:	015a      	lsls	r2, r3, #5
 801475a:	69fb      	ldr	r3, [r7, #28]
 801475c:	4413      	add	r3, r2
 801475e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	69ba      	ldr	r2, [r7, #24]
 8014766:	0151      	lsls	r1, r2, #5
 8014768:	69fa      	ldr	r2, [r7, #28]
 801476a:	440a      	add	r2, r1
 801476c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014770:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014774:	6013      	str	r3, [r2, #0]
 8014776:	e16a      	b.n	8014a4e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014778:	69bb      	ldr	r3, [r7, #24]
 801477a:	015a      	lsls	r2, r3, #5
 801477c:	69fb      	ldr	r3, [r7, #28]
 801477e:	4413      	add	r3, r2
 8014780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	69ba      	ldr	r2, [r7, #24]
 8014788:	0151      	lsls	r1, r2, #5
 801478a:	69fa      	ldr	r2, [r7, #28]
 801478c:	440a      	add	r2, r1
 801478e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014792:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014796:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014798:	68bb      	ldr	r3, [r7, #8]
 801479a:	791b      	ldrb	r3, [r3, #4]
 801479c:	2b01      	cmp	r3, #1
 801479e:	d015      	beq.n	80147cc <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80147a0:	68bb      	ldr	r3, [r7, #8]
 80147a2:	691b      	ldr	r3, [r3, #16]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	f000 8152 	beq.w	8014a4e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80147aa:	69fb      	ldr	r3, [r7, #28]
 80147ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80147b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80147b2:	68bb      	ldr	r3, [r7, #8]
 80147b4:	781b      	ldrb	r3, [r3, #0]
 80147b6:	f003 030f 	and.w	r3, r3, #15
 80147ba:	2101      	movs	r1, #1
 80147bc:	fa01 f303 	lsl.w	r3, r1, r3
 80147c0:	69f9      	ldr	r1, [r7, #28]
 80147c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80147c6:	4313      	orrs	r3, r2
 80147c8:	634b      	str	r3, [r1, #52]	; 0x34
 80147ca:	e140      	b.n	8014a4e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80147cc:	69fb      	ldr	r3, [r7, #28]
 80147ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80147d2:	689b      	ldr	r3, [r3, #8]
 80147d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d117      	bne.n	801480c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80147dc:	69bb      	ldr	r3, [r7, #24]
 80147de:	015a      	lsls	r2, r3, #5
 80147e0:	69fb      	ldr	r3, [r7, #28]
 80147e2:	4413      	add	r3, r2
 80147e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	69ba      	ldr	r2, [r7, #24]
 80147ec:	0151      	lsls	r1, r2, #5
 80147ee:	69fa      	ldr	r2, [r7, #28]
 80147f0:	440a      	add	r2, r1
 80147f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80147f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80147fa:	6013      	str	r3, [r2, #0]
 80147fc:	e016      	b.n	801482c <USB_EPStartXfer+0x308>
 80147fe:	bf00      	nop
 8014800:	e007ffff 	.word	0xe007ffff
 8014804:	fff80000 	.word	0xfff80000
 8014808:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801480c:	69bb      	ldr	r3, [r7, #24]
 801480e:	015a      	lsls	r2, r3, #5
 8014810:	69fb      	ldr	r3, [r7, #28]
 8014812:	4413      	add	r3, r2
 8014814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	69ba      	ldr	r2, [r7, #24]
 801481c:	0151      	lsls	r1, r2, #5
 801481e:	69fa      	ldr	r2, [r7, #28]
 8014820:	440a      	add	r2, r1
 8014822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801482a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801482c:	68bb      	ldr	r3, [r7, #8]
 801482e:	68d9      	ldr	r1, [r3, #12]
 8014830:	68bb      	ldr	r3, [r7, #8]
 8014832:	781a      	ldrb	r2, [r3, #0]
 8014834:	68bb      	ldr	r3, [r7, #8]
 8014836:	691b      	ldr	r3, [r3, #16]
 8014838:	b298      	uxth	r0, r3
 801483a:	79fb      	ldrb	r3, [r7, #7]
 801483c:	9300      	str	r3, [sp, #0]
 801483e:	4603      	mov	r3, r0
 8014840:	68f8      	ldr	r0, [r7, #12]
 8014842:	f000 f9b9 	bl	8014bb8 <USB_WritePacket>
 8014846:	e102      	b.n	8014a4e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014848:	69bb      	ldr	r3, [r7, #24]
 801484a:	015a      	lsls	r2, r3, #5
 801484c:	69fb      	ldr	r3, [r7, #28]
 801484e:	4413      	add	r3, r2
 8014850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014854:	691a      	ldr	r2, [r3, #16]
 8014856:	69bb      	ldr	r3, [r7, #24]
 8014858:	0159      	lsls	r1, r3, #5
 801485a:	69fb      	ldr	r3, [r7, #28]
 801485c:	440b      	add	r3, r1
 801485e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014862:	4619      	mov	r1, r3
 8014864:	4b7c      	ldr	r3, [pc, #496]	; (8014a58 <USB_EPStartXfer+0x534>)
 8014866:	4013      	ands	r3, r2
 8014868:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801486a:	69bb      	ldr	r3, [r7, #24]
 801486c:	015a      	lsls	r2, r3, #5
 801486e:	69fb      	ldr	r3, [r7, #28]
 8014870:	4413      	add	r3, r2
 8014872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014876:	691a      	ldr	r2, [r3, #16]
 8014878:	69bb      	ldr	r3, [r7, #24]
 801487a:	0159      	lsls	r1, r3, #5
 801487c:	69fb      	ldr	r3, [r7, #28]
 801487e:	440b      	add	r3, r1
 8014880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014884:	4619      	mov	r1, r3
 8014886:	4b75      	ldr	r3, [pc, #468]	; (8014a5c <USB_EPStartXfer+0x538>)
 8014888:	4013      	ands	r3, r2
 801488a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 801488c:	69bb      	ldr	r3, [r7, #24]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d12f      	bne.n	80148f2 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8014892:	68bb      	ldr	r3, [r7, #8]
 8014894:	691b      	ldr	r3, [r3, #16]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d003      	beq.n	80148a2 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 801489a:	68bb      	ldr	r3, [r7, #8]
 801489c:	689a      	ldr	r2, [r3, #8]
 801489e:	68bb      	ldr	r3, [r7, #8]
 80148a0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80148a2:	68bb      	ldr	r3, [r7, #8]
 80148a4:	689a      	ldr	r2, [r3, #8]
 80148a6:	68bb      	ldr	r3, [r7, #8]
 80148a8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80148aa:	69bb      	ldr	r3, [r7, #24]
 80148ac:	015a      	lsls	r2, r3, #5
 80148ae:	69fb      	ldr	r3, [r7, #28]
 80148b0:	4413      	add	r3, r2
 80148b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80148b6:	691a      	ldr	r2, [r3, #16]
 80148b8:	68bb      	ldr	r3, [r7, #8]
 80148ba:	6a1b      	ldr	r3, [r3, #32]
 80148bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80148c0:	69b9      	ldr	r1, [r7, #24]
 80148c2:	0148      	lsls	r0, r1, #5
 80148c4:	69f9      	ldr	r1, [r7, #28]
 80148c6:	4401      	add	r1, r0
 80148c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80148cc:	4313      	orrs	r3, r2
 80148ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80148d0:	69bb      	ldr	r3, [r7, #24]
 80148d2:	015a      	lsls	r2, r3, #5
 80148d4:	69fb      	ldr	r3, [r7, #28]
 80148d6:	4413      	add	r3, r2
 80148d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80148dc:	691b      	ldr	r3, [r3, #16]
 80148de:	69ba      	ldr	r2, [r7, #24]
 80148e0:	0151      	lsls	r1, r2, #5
 80148e2:	69fa      	ldr	r2, [r7, #28]
 80148e4:	440a      	add	r2, r1
 80148e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80148ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80148ee:	6113      	str	r3, [r2, #16]
 80148f0:	e05f      	b.n	80149b2 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80148f2:	68bb      	ldr	r3, [r7, #8]
 80148f4:	691b      	ldr	r3, [r3, #16]
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d123      	bne.n	8014942 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80148fa:	69bb      	ldr	r3, [r7, #24]
 80148fc:	015a      	lsls	r2, r3, #5
 80148fe:	69fb      	ldr	r3, [r7, #28]
 8014900:	4413      	add	r3, r2
 8014902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014906:	691a      	ldr	r2, [r3, #16]
 8014908:	68bb      	ldr	r3, [r7, #8]
 801490a:	689b      	ldr	r3, [r3, #8]
 801490c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014910:	69b9      	ldr	r1, [r7, #24]
 8014912:	0148      	lsls	r0, r1, #5
 8014914:	69f9      	ldr	r1, [r7, #28]
 8014916:	4401      	add	r1, r0
 8014918:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801491c:	4313      	orrs	r3, r2
 801491e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014920:	69bb      	ldr	r3, [r7, #24]
 8014922:	015a      	lsls	r2, r3, #5
 8014924:	69fb      	ldr	r3, [r7, #28]
 8014926:	4413      	add	r3, r2
 8014928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801492c:	691b      	ldr	r3, [r3, #16]
 801492e:	69ba      	ldr	r2, [r7, #24]
 8014930:	0151      	lsls	r1, r2, #5
 8014932:	69fa      	ldr	r2, [r7, #28]
 8014934:	440a      	add	r2, r1
 8014936:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801493a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801493e:	6113      	str	r3, [r2, #16]
 8014940:	e037      	b.n	80149b2 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014942:	68bb      	ldr	r3, [r7, #8]
 8014944:	691a      	ldr	r2, [r3, #16]
 8014946:	68bb      	ldr	r3, [r7, #8]
 8014948:	689b      	ldr	r3, [r3, #8]
 801494a:	4413      	add	r3, r2
 801494c:	1e5a      	subs	r2, r3, #1
 801494e:	68bb      	ldr	r3, [r7, #8]
 8014950:	689b      	ldr	r3, [r3, #8]
 8014952:	fbb2 f3f3 	udiv	r3, r2, r3
 8014956:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8014958:	68bb      	ldr	r3, [r7, #8]
 801495a:	689b      	ldr	r3, [r3, #8]
 801495c:	8afa      	ldrh	r2, [r7, #22]
 801495e:	fb03 f202 	mul.w	r2, r3, r2
 8014962:	68bb      	ldr	r3, [r7, #8]
 8014964:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014966:	69bb      	ldr	r3, [r7, #24]
 8014968:	015a      	lsls	r2, r3, #5
 801496a:	69fb      	ldr	r3, [r7, #28]
 801496c:	4413      	add	r3, r2
 801496e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014972:	691a      	ldr	r2, [r3, #16]
 8014974:	8afb      	ldrh	r3, [r7, #22]
 8014976:	04d9      	lsls	r1, r3, #19
 8014978:	4b39      	ldr	r3, [pc, #228]	; (8014a60 <USB_EPStartXfer+0x53c>)
 801497a:	400b      	ands	r3, r1
 801497c:	69b9      	ldr	r1, [r7, #24]
 801497e:	0148      	lsls	r0, r1, #5
 8014980:	69f9      	ldr	r1, [r7, #28]
 8014982:	4401      	add	r1, r0
 8014984:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014988:	4313      	orrs	r3, r2
 801498a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801498c:	69bb      	ldr	r3, [r7, #24]
 801498e:	015a      	lsls	r2, r3, #5
 8014990:	69fb      	ldr	r3, [r7, #28]
 8014992:	4413      	add	r3, r2
 8014994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014998:	691a      	ldr	r2, [r3, #16]
 801499a:	68bb      	ldr	r3, [r7, #8]
 801499c:	6a1b      	ldr	r3, [r3, #32]
 801499e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80149a2:	69b9      	ldr	r1, [r7, #24]
 80149a4:	0148      	lsls	r0, r1, #5
 80149a6:	69f9      	ldr	r1, [r7, #28]
 80149a8:	4401      	add	r1, r0
 80149aa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80149ae:	4313      	orrs	r3, r2
 80149b0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80149b2:	79fb      	ldrb	r3, [r7, #7]
 80149b4:	2b01      	cmp	r3, #1
 80149b6:	d10d      	bne.n	80149d4 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80149b8:	68bb      	ldr	r3, [r7, #8]
 80149ba:	68db      	ldr	r3, [r3, #12]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d009      	beq.n	80149d4 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80149c0:	68bb      	ldr	r3, [r7, #8]
 80149c2:	68d9      	ldr	r1, [r3, #12]
 80149c4:	69bb      	ldr	r3, [r7, #24]
 80149c6:	015a      	lsls	r2, r3, #5
 80149c8:	69fb      	ldr	r3, [r7, #28]
 80149ca:	4413      	add	r3, r2
 80149cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80149d0:	460a      	mov	r2, r1
 80149d2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80149d4:	68bb      	ldr	r3, [r7, #8]
 80149d6:	791b      	ldrb	r3, [r3, #4]
 80149d8:	2b01      	cmp	r3, #1
 80149da:	d128      	bne.n	8014a2e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80149dc:	69fb      	ldr	r3, [r7, #28]
 80149de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80149e2:	689b      	ldr	r3, [r3, #8]
 80149e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d110      	bne.n	8014a0e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80149ec:	69bb      	ldr	r3, [r7, #24]
 80149ee:	015a      	lsls	r2, r3, #5
 80149f0:	69fb      	ldr	r3, [r7, #28]
 80149f2:	4413      	add	r3, r2
 80149f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	69ba      	ldr	r2, [r7, #24]
 80149fc:	0151      	lsls	r1, r2, #5
 80149fe:	69fa      	ldr	r2, [r7, #28]
 8014a00:	440a      	add	r2, r1
 8014a02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014a06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014a0a:	6013      	str	r3, [r2, #0]
 8014a0c:	e00f      	b.n	8014a2e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8014a0e:	69bb      	ldr	r3, [r7, #24]
 8014a10:	015a      	lsls	r2, r3, #5
 8014a12:	69fb      	ldr	r3, [r7, #28]
 8014a14:	4413      	add	r3, r2
 8014a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	69ba      	ldr	r2, [r7, #24]
 8014a1e:	0151      	lsls	r1, r2, #5
 8014a20:	69fa      	ldr	r2, [r7, #28]
 8014a22:	440a      	add	r2, r1
 8014a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014a2c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014a2e:	69bb      	ldr	r3, [r7, #24]
 8014a30:	015a      	lsls	r2, r3, #5
 8014a32:	69fb      	ldr	r3, [r7, #28]
 8014a34:	4413      	add	r3, r2
 8014a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	69ba      	ldr	r2, [r7, #24]
 8014a3e:	0151      	lsls	r1, r2, #5
 8014a40:	69fa      	ldr	r2, [r7, #28]
 8014a42:	440a      	add	r2, r1
 8014a44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014a48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014a4c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014a4e:	2300      	movs	r3, #0
}
 8014a50:	4618      	mov	r0, r3
 8014a52:	3720      	adds	r7, #32
 8014a54:	46bd      	mov	sp, r7
 8014a56:	bd80      	pop	{r7, pc}
 8014a58:	fff80000 	.word	0xfff80000
 8014a5c:	e007ffff 	.word	0xe007ffff
 8014a60:	1ff80000 	.word	0x1ff80000

08014a64 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014a64:	b480      	push	{r7}
 8014a66:	b087      	sub	sp, #28
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	6078      	str	r0, [r7, #4]
 8014a6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014a6e:	2300      	movs	r3, #0
 8014a70:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8014a72:	2300      	movs	r3, #0
 8014a74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014a7a:	683b      	ldr	r3, [r7, #0]
 8014a7c:	785b      	ldrb	r3, [r3, #1]
 8014a7e:	2b01      	cmp	r3, #1
 8014a80:	d14a      	bne.n	8014b18 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014a82:	683b      	ldr	r3, [r7, #0]
 8014a84:	781b      	ldrb	r3, [r3, #0]
 8014a86:	015a      	lsls	r2, r3, #5
 8014a88:	693b      	ldr	r3, [r7, #16]
 8014a8a:	4413      	add	r3, r2
 8014a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014a96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014a9a:	f040 8086 	bne.w	8014baa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8014a9e:	683b      	ldr	r3, [r7, #0]
 8014aa0:	781b      	ldrb	r3, [r3, #0]
 8014aa2:	015a      	lsls	r2, r3, #5
 8014aa4:	693b      	ldr	r3, [r7, #16]
 8014aa6:	4413      	add	r3, r2
 8014aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	683a      	ldr	r2, [r7, #0]
 8014ab0:	7812      	ldrb	r2, [r2, #0]
 8014ab2:	0151      	lsls	r1, r2, #5
 8014ab4:	693a      	ldr	r2, [r7, #16]
 8014ab6:	440a      	add	r2, r1
 8014ab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014abc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014ac0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8014ac2:	683b      	ldr	r3, [r7, #0]
 8014ac4:	781b      	ldrb	r3, [r3, #0]
 8014ac6:	015a      	lsls	r2, r3, #5
 8014ac8:	693b      	ldr	r3, [r7, #16]
 8014aca:	4413      	add	r3, r2
 8014acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	683a      	ldr	r2, [r7, #0]
 8014ad4:	7812      	ldrb	r2, [r2, #0]
 8014ad6:	0151      	lsls	r1, r2, #5
 8014ad8:	693a      	ldr	r2, [r7, #16]
 8014ada:	440a      	add	r2, r1
 8014adc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014ae0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014ae4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	3301      	adds	r3, #1
 8014aea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	f242 7210 	movw	r2, #10000	; 0x2710
 8014af2:	4293      	cmp	r3, r2
 8014af4:	d902      	bls.n	8014afc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8014af6:	2301      	movs	r3, #1
 8014af8:	75fb      	strb	r3, [r7, #23]
          break;
 8014afa:	e056      	b.n	8014baa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8014afc:	683b      	ldr	r3, [r7, #0]
 8014afe:	781b      	ldrb	r3, [r3, #0]
 8014b00:	015a      	lsls	r2, r3, #5
 8014b02:	693b      	ldr	r3, [r7, #16]
 8014b04:	4413      	add	r3, r2
 8014b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014b10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014b14:	d0e7      	beq.n	8014ae6 <USB_EPStopXfer+0x82>
 8014b16:	e048      	b.n	8014baa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014b18:	683b      	ldr	r3, [r7, #0]
 8014b1a:	781b      	ldrb	r3, [r3, #0]
 8014b1c:	015a      	lsls	r2, r3, #5
 8014b1e:	693b      	ldr	r3, [r7, #16]
 8014b20:	4413      	add	r3, r2
 8014b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014b2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014b30:	d13b      	bne.n	8014baa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8014b32:	683b      	ldr	r3, [r7, #0]
 8014b34:	781b      	ldrb	r3, [r3, #0]
 8014b36:	015a      	lsls	r2, r3, #5
 8014b38:	693b      	ldr	r3, [r7, #16]
 8014b3a:	4413      	add	r3, r2
 8014b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	683a      	ldr	r2, [r7, #0]
 8014b44:	7812      	ldrb	r2, [r2, #0]
 8014b46:	0151      	lsls	r1, r2, #5
 8014b48:	693a      	ldr	r2, [r7, #16]
 8014b4a:	440a      	add	r2, r1
 8014b4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014b50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014b54:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8014b56:	683b      	ldr	r3, [r7, #0]
 8014b58:	781b      	ldrb	r3, [r3, #0]
 8014b5a:	015a      	lsls	r2, r3, #5
 8014b5c:	693b      	ldr	r3, [r7, #16]
 8014b5e:	4413      	add	r3, r2
 8014b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	683a      	ldr	r2, [r7, #0]
 8014b68:	7812      	ldrb	r2, [r2, #0]
 8014b6a:	0151      	lsls	r1, r2, #5
 8014b6c:	693a      	ldr	r2, [r7, #16]
 8014b6e:	440a      	add	r2, r1
 8014b70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014b74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014b78:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	3301      	adds	r3, #1
 8014b7e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	f242 7210 	movw	r2, #10000	; 0x2710
 8014b86:	4293      	cmp	r3, r2
 8014b88:	d902      	bls.n	8014b90 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8014b8a:	2301      	movs	r3, #1
 8014b8c:	75fb      	strb	r3, [r7, #23]
          break;
 8014b8e:	e00c      	b.n	8014baa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8014b90:	683b      	ldr	r3, [r7, #0]
 8014b92:	781b      	ldrb	r3, [r3, #0]
 8014b94:	015a      	lsls	r2, r3, #5
 8014b96:	693b      	ldr	r3, [r7, #16]
 8014b98:	4413      	add	r3, r2
 8014b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014ba4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014ba8:	d0e7      	beq.n	8014b7a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8014baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8014bac:	4618      	mov	r0, r3
 8014bae:	371c      	adds	r7, #28
 8014bb0:	46bd      	mov	sp, r7
 8014bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb6:	4770      	bx	lr

08014bb8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8014bb8:	b480      	push	{r7}
 8014bba:	b089      	sub	sp, #36	; 0x24
 8014bbc:	af00      	add	r7, sp, #0
 8014bbe:	60f8      	str	r0, [r7, #12]
 8014bc0:	60b9      	str	r1, [r7, #8]
 8014bc2:	4611      	mov	r1, r2
 8014bc4:	461a      	mov	r2, r3
 8014bc6:	460b      	mov	r3, r1
 8014bc8:	71fb      	strb	r3, [r7, #7]
 8014bca:	4613      	mov	r3, r2
 8014bcc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8014bd2:	68bb      	ldr	r3, [r7, #8]
 8014bd4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8014bd6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d123      	bne.n	8014c26 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8014bde:	88bb      	ldrh	r3, [r7, #4]
 8014be0:	3303      	adds	r3, #3
 8014be2:	089b      	lsrs	r3, r3, #2
 8014be4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8014be6:	2300      	movs	r3, #0
 8014be8:	61bb      	str	r3, [r7, #24]
 8014bea:	e018      	b.n	8014c1e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014bec:	79fb      	ldrb	r3, [r7, #7]
 8014bee:	031a      	lsls	r2, r3, #12
 8014bf0:	697b      	ldr	r3, [r7, #20]
 8014bf2:	4413      	add	r3, r2
 8014bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014bf8:	461a      	mov	r2, r3
 8014bfa:	69fb      	ldr	r3, [r7, #28]
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8014c00:	69fb      	ldr	r3, [r7, #28]
 8014c02:	3301      	adds	r3, #1
 8014c04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014c06:	69fb      	ldr	r3, [r7, #28]
 8014c08:	3301      	adds	r3, #1
 8014c0a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014c0c:	69fb      	ldr	r3, [r7, #28]
 8014c0e:	3301      	adds	r3, #1
 8014c10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014c12:	69fb      	ldr	r3, [r7, #28]
 8014c14:	3301      	adds	r3, #1
 8014c16:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014c18:	69bb      	ldr	r3, [r7, #24]
 8014c1a:	3301      	adds	r3, #1
 8014c1c:	61bb      	str	r3, [r7, #24]
 8014c1e:	69ba      	ldr	r2, [r7, #24]
 8014c20:	693b      	ldr	r3, [r7, #16]
 8014c22:	429a      	cmp	r2, r3
 8014c24:	d3e2      	bcc.n	8014bec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8014c26:	2300      	movs	r3, #0
}
 8014c28:	4618      	mov	r0, r3
 8014c2a:	3724      	adds	r7, #36	; 0x24
 8014c2c:	46bd      	mov	sp, r7
 8014c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c32:	4770      	bx	lr

08014c34 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8014c34:	b480      	push	{r7}
 8014c36:	b08b      	sub	sp, #44	; 0x2c
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	60f8      	str	r0, [r7, #12]
 8014c3c:	60b9      	str	r1, [r7, #8]
 8014c3e:	4613      	mov	r3, r2
 8014c40:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8014c46:	68bb      	ldr	r3, [r7, #8]
 8014c48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8014c4a:	88fb      	ldrh	r3, [r7, #6]
 8014c4c:	089b      	lsrs	r3, r3, #2
 8014c4e:	b29b      	uxth	r3, r3
 8014c50:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8014c52:	88fb      	ldrh	r3, [r7, #6]
 8014c54:	f003 0303 	and.w	r3, r3, #3
 8014c58:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	623b      	str	r3, [r7, #32]
 8014c5e:	e014      	b.n	8014c8a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014c60:	69bb      	ldr	r3, [r7, #24]
 8014c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014c66:	681a      	ldr	r2, [r3, #0]
 8014c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c6a:	601a      	str	r2, [r3, #0]
    pDest++;
 8014c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c6e:	3301      	adds	r3, #1
 8014c70:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c74:	3301      	adds	r3, #1
 8014c76:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c7a:	3301      	adds	r3, #1
 8014c7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c80:	3301      	adds	r3, #1
 8014c82:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8014c84:	6a3b      	ldr	r3, [r7, #32]
 8014c86:	3301      	adds	r3, #1
 8014c88:	623b      	str	r3, [r7, #32]
 8014c8a:	6a3a      	ldr	r2, [r7, #32]
 8014c8c:	697b      	ldr	r3, [r7, #20]
 8014c8e:	429a      	cmp	r2, r3
 8014c90:	d3e6      	bcc.n	8014c60 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8014c92:	8bfb      	ldrh	r3, [r7, #30]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d01e      	beq.n	8014cd6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8014c98:	2300      	movs	r3, #0
 8014c9a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014c9c:	69bb      	ldr	r3, [r7, #24]
 8014c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014ca2:	461a      	mov	r2, r3
 8014ca4:	f107 0310 	add.w	r3, r7, #16
 8014ca8:	6812      	ldr	r2, [r2, #0]
 8014caa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8014cac:	693a      	ldr	r2, [r7, #16]
 8014cae:	6a3b      	ldr	r3, [r7, #32]
 8014cb0:	b2db      	uxtb	r3, r3
 8014cb2:	00db      	lsls	r3, r3, #3
 8014cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8014cb8:	b2da      	uxtb	r2, r3
 8014cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cbc:	701a      	strb	r2, [r3, #0]
      i++;
 8014cbe:	6a3b      	ldr	r3, [r7, #32]
 8014cc0:	3301      	adds	r3, #1
 8014cc2:	623b      	str	r3, [r7, #32]
      pDest++;
 8014cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cc6:	3301      	adds	r3, #1
 8014cc8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8014cca:	8bfb      	ldrh	r3, [r7, #30]
 8014ccc:	3b01      	subs	r3, #1
 8014cce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8014cd0:	8bfb      	ldrh	r3, [r7, #30]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d1ea      	bne.n	8014cac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8014cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014cd8:	4618      	mov	r0, r3
 8014cda:	372c      	adds	r7, #44	; 0x2c
 8014cdc:	46bd      	mov	sp, r7
 8014cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce2:	4770      	bx	lr

08014ce4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014ce4:	b480      	push	{r7}
 8014ce6:	b085      	sub	sp, #20
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	6078      	str	r0, [r7, #4]
 8014cec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014cf2:	683b      	ldr	r3, [r7, #0]
 8014cf4:	781b      	ldrb	r3, [r3, #0]
 8014cf6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014cf8:	683b      	ldr	r3, [r7, #0]
 8014cfa:	785b      	ldrb	r3, [r3, #1]
 8014cfc:	2b01      	cmp	r3, #1
 8014cfe:	d12c      	bne.n	8014d5a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014d00:	68bb      	ldr	r3, [r7, #8]
 8014d02:	015a      	lsls	r2, r3, #5
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	4413      	add	r3, r2
 8014d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	db12      	blt.n	8014d38 <USB_EPSetStall+0x54>
 8014d12:	68bb      	ldr	r3, [r7, #8]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d00f      	beq.n	8014d38 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8014d18:	68bb      	ldr	r3, [r7, #8]
 8014d1a:	015a      	lsls	r2, r3, #5
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	4413      	add	r3, r2
 8014d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	68ba      	ldr	r2, [r7, #8]
 8014d28:	0151      	lsls	r1, r2, #5
 8014d2a:	68fa      	ldr	r2, [r7, #12]
 8014d2c:	440a      	add	r2, r1
 8014d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014d32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014d36:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8014d38:	68bb      	ldr	r3, [r7, #8]
 8014d3a:	015a      	lsls	r2, r3, #5
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	4413      	add	r3, r2
 8014d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	68ba      	ldr	r2, [r7, #8]
 8014d48:	0151      	lsls	r1, r2, #5
 8014d4a:	68fa      	ldr	r2, [r7, #12]
 8014d4c:	440a      	add	r2, r1
 8014d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014d52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014d56:	6013      	str	r3, [r2, #0]
 8014d58:	e02b      	b.n	8014db2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014d5a:	68bb      	ldr	r3, [r7, #8]
 8014d5c:	015a      	lsls	r2, r3, #5
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	4413      	add	r3, r2
 8014d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	db12      	blt.n	8014d92 <USB_EPSetStall+0xae>
 8014d6c:	68bb      	ldr	r3, [r7, #8]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d00f      	beq.n	8014d92 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8014d72:	68bb      	ldr	r3, [r7, #8]
 8014d74:	015a      	lsls	r2, r3, #5
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	4413      	add	r3, r2
 8014d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	68ba      	ldr	r2, [r7, #8]
 8014d82:	0151      	lsls	r1, r2, #5
 8014d84:	68fa      	ldr	r2, [r7, #12]
 8014d86:	440a      	add	r2, r1
 8014d88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014d8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014d90:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8014d92:	68bb      	ldr	r3, [r7, #8]
 8014d94:	015a      	lsls	r2, r3, #5
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	4413      	add	r3, r2
 8014d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d9e:	681b      	ldr	r3, [r3, #0]
 8014da0:	68ba      	ldr	r2, [r7, #8]
 8014da2:	0151      	lsls	r1, r2, #5
 8014da4:	68fa      	ldr	r2, [r7, #12]
 8014da6:	440a      	add	r2, r1
 8014da8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014dac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014db0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014db2:	2300      	movs	r3, #0
}
 8014db4:	4618      	mov	r0, r3
 8014db6:	3714      	adds	r7, #20
 8014db8:	46bd      	mov	sp, r7
 8014dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dbe:	4770      	bx	lr

08014dc0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014dc0:	b480      	push	{r7}
 8014dc2:	b085      	sub	sp, #20
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	6078      	str	r0, [r7, #4]
 8014dc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014dce:	683b      	ldr	r3, [r7, #0]
 8014dd0:	781b      	ldrb	r3, [r3, #0]
 8014dd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014dd4:	683b      	ldr	r3, [r7, #0]
 8014dd6:	785b      	ldrb	r3, [r3, #1]
 8014dd8:	2b01      	cmp	r3, #1
 8014dda:	d128      	bne.n	8014e2e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014ddc:	68bb      	ldr	r3, [r7, #8]
 8014dde:	015a      	lsls	r2, r3, #5
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	4413      	add	r3, r2
 8014de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	68ba      	ldr	r2, [r7, #8]
 8014dec:	0151      	lsls	r1, r2, #5
 8014dee:	68fa      	ldr	r2, [r7, #12]
 8014df0:	440a      	add	r2, r1
 8014df2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014df6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014dfa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014dfc:	683b      	ldr	r3, [r7, #0]
 8014dfe:	791b      	ldrb	r3, [r3, #4]
 8014e00:	2b03      	cmp	r3, #3
 8014e02:	d003      	beq.n	8014e0c <USB_EPClearStall+0x4c>
 8014e04:	683b      	ldr	r3, [r7, #0]
 8014e06:	791b      	ldrb	r3, [r3, #4]
 8014e08:	2b02      	cmp	r3, #2
 8014e0a:	d138      	bne.n	8014e7e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014e0c:	68bb      	ldr	r3, [r7, #8]
 8014e0e:	015a      	lsls	r2, r3, #5
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	4413      	add	r3, r2
 8014e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	68ba      	ldr	r2, [r7, #8]
 8014e1c:	0151      	lsls	r1, r2, #5
 8014e1e:	68fa      	ldr	r2, [r7, #12]
 8014e20:	440a      	add	r2, r1
 8014e22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014e2a:	6013      	str	r3, [r2, #0]
 8014e2c:	e027      	b.n	8014e7e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8014e2e:	68bb      	ldr	r3, [r7, #8]
 8014e30:	015a      	lsls	r2, r3, #5
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	4413      	add	r3, r2
 8014e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	68ba      	ldr	r2, [r7, #8]
 8014e3e:	0151      	lsls	r1, r2, #5
 8014e40:	68fa      	ldr	r2, [r7, #12]
 8014e42:	440a      	add	r2, r1
 8014e44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014e48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014e4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014e4e:	683b      	ldr	r3, [r7, #0]
 8014e50:	791b      	ldrb	r3, [r3, #4]
 8014e52:	2b03      	cmp	r3, #3
 8014e54:	d003      	beq.n	8014e5e <USB_EPClearStall+0x9e>
 8014e56:	683b      	ldr	r3, [r7, #0]
 8014e58:	791b      	ldrb	r3, [r3, #4]
 8014e5a:	2b02      	cmp	r3, #2
 8014e5c:	d10f      	bne.n	8014e7e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014e5e:	68bb      	ldr	r3, [r7, #8]
 8014e60:	015a      	lsls	r2, r3, #5
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	4413      	add	r3, r2
 8014e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	68ba      	ldr	r2, [r7, #8]
 8014e6e:	0151      	lsls	r1, r2, #5
 8014e70:	68fa      	ldr	r2, [r7, #12]
 8014e72:	440a      	add	r2, r1
 8014e74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014e7c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8014e7e:	2300      	movs	r3, #0
}
 8014e80:	4618      	mov	r0, r3
 8014e82:	3714      	adds	r7, #20
 8014e84:	46bd      	mov	sp, r7
 8014e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e8a:	4770      	bx	lr

08014e8c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8014e8c:	b480      	push	{r7}
 8014e8e:	b085      	sub	sp, #20
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	6078      	str	r0, [r7, #4]
 8014e94:	460b      	mov	r3, r1
 8014e96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	68fa      	ldr	r2, [r7, #12]
 8014ea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014eaa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8014eae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014eb6:	681a      	ldr	r2, [r3, #0]
 8014eb8:	78fb      	ldrb	r3, [r7, #3]
 8014eba:	011b      	lsls	r3, r3, #4
 8014ebc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8014ec0:	68f9      	ldr	r1, [r7, #12]
 8014ec2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014ec6:	4313      	orrs	r3, r2
 8014ec8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8014eca:	2300      	movs	r3, #0
}
 8014ecc:	4618      	mov	r0, r3
 8014ece:	3714      	adds	r7, #20
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ed6:	4770      	bx	lr

08014ed8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014ed8:	b480      	push	{r7}
 8014eda:	b085      	sub	sp, #20
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	68fa      	ldr	r2, [r7, #12]
 8014eee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014ef2:	f023 0303 	bic.w	r3, r3, #3
 8014ef6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014efe:	685b      	ldr	r3, [r3, #4]
 8014f00:	68fa      	ldr	r2, [r7, #12]
 8014f02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014f06:	f023 0302 	bic.w	r3, r3, #2
 8014f0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014f0c:	2300      	movs	r3, #0
}
 8014f0e:	4618      	mov	r0, r3
 8014f10:	3714      	adds	r7, #20
 8014f12:	46bd      	mov	sp, r7
 8014f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f18:	4770      	bx	lr

08014f1a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014f1a:	b480      	push	{r7}
 8014f1c:	b085      	sub	sp, #20
 8014f1e:	af00      	add	r7, sp, #0
 8014f20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	68fa      	ldr	r2, [r7, #12]
 8014f30:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014f34:	f023 0303 	bic.w	r3, r3, #3
 8014f38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014f40:	685b      	ldr	r3, [r3, #4]
 8014f42:	68fa      	ldr	r2, [r7, #12]
 8014f44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014f48:	f043 0302 	orr.w	r3, r3, #2
 8014f4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014f4e:	2300      	movs	r3, #0
}
 8014f50:	4618      	mov	r0, r3
 8014f52:	3714      	adds	r7, #20
 8014f54:	46bd      	mov	sp, r7
 8014f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f5a:	4770      	bx	lr

08014f5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8014f5c:	b480      	push	{r7}
 8014f5e:	b085      	sub	sp, #20
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	695b      	ldr	r3, [r3, #20]
 8014f68:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	699b      	ldr	r3, [r3, #24]
 8014f6e:	68fa      	ldr	r2, [r7, #12]
 8014f70:	4013      	ands	r3, r2
 8014f72:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014f74:	68fb      	ldr	r3, [r7, #12]
}
 8014f76:	4618      	mov	r0, r3
 8014f78:	3714      	adds	r7, #20
 8014f7a:	46bd      	mov	sp, r7
 8014f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f80:	4770      	bx	lr

08014f82 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014f82:	b480      	push	{r7}
 8014f84:	b085      	sub	sp, #20
 8014f86:	af00      	add	r7, sp, #0
 8014f88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014f94:	699b      	ldr	r3, [r3, #24]
 8014f96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014f9e:	69db      	ldr	r3, [r3, #28]
 8014fa0:	68ba      	ldr	r2, [r7, #8]
 8014fa2:	4013      	ands	r3, r2
 8014fa4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8014fa6:	68bb      	ldr	r3, [r7, #8]
 8014fa8:	0c1b      	lsrs	r3, r3, #16
}
 8014faa:	4618      	mov	r0, r3
 8014fac:	3714      	adds	r7, #20
 8014fae:	46bd      	mov	sp, r7
 8014fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb4:	4770      	bx	lr

08014fb6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014fb6:	b480      	push	{r7}
 8014fb8:	b085      	sub	sp, #20
 8014fba:	af00      	add	r7, sp, #0
 8014fbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014fc8:	699b      	ldr	r3, [r3, #24]
 8014fca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014fd2:	69db      	ldr	r3, [r3, #28]
 8014fd4:	68ba      	ldr	r2, [r7, #8]
 8014fd6:	4013      	ands	r3, r2
 8014fd8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014fda:	68bb      	ldr	r3, [r7, #8]
 8014fdc:	b29b      	uxth	r3, r3
}
 8014fde:	4618      	mov	r0, r3
 8014fe0:	3714      	adds	r7, #20
 8014fe2:	46bd      	mov	sp, r7
 8014fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fe8:	4770      	bx	lr

08014fea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014fea:	b480      	push	{r7}
 8014fec:	b085      	sub	sp, #20
 8014fee:	af00      	add	r7, sp, #0
 8014ff0:	6078      	str	r0, [r7, #4]
 8014ff2:	460b      	mov	r3, r1
 8014ff4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014ffa:	78fb      	ldrb	r3, [r7, #3]
 8014ffc:	015a      	lsls	r2, r3, #5
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	4413      	add	r3, r2
 8015002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015006:	689b      	ldr	r3, [r3, #8]
 8015008:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015010:	695b      	ldr	r3, [r3, #20]
 8015012:	68ba      	ldr	r2, [r7, #8]
 8015014:	4013      	ands	r3, r2
 8015016:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015018:	68bb      	ldr	r3, [r7, #8]
}
 801501a:	4618      	mov	r0, r3
 801501c:	3714      	adds	r7, #20
 801501e:	46bd      	mov	sp, r7
 8015020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015024:	4770      	bx	lr

08015026 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8015026:	b480      	push	{r7}
 8015028:	b087      	sub	sp, #28
 801502a:	af00      	add	r7, sp, #0
 801502c:	6078      	str	r0, [r7, #4]
 801502e:	460b      	mov	r3, r1
 8015030:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8015036:	697b      	ldr	r3, [r7, #20]
 8015038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801503c:	691b      	ldr	r3, [r3, #16]
 801503e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8015040:	697b      	ldr	r3, [r7, #20]
 8015042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015048:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801504a:	78fb      	ldrb	r3, [r7, #3]
 801504c:	f003 030f 	and.w	r3, r3, #15
 8015050:	68fa      	ldr	r2, [r7, #12]
 8015052:	fa22 f303 	lsr.w	r3, r2, r3
 8015056:	01db      	lsls	r3, r3, #7
 8015058:	b2db      	uxtb	r3, r3
 801505a:	693a      	ldr	r2, [r7, #16]
 801505c:	4313      	orrs	r3, r2
 801505e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8015060:	78fb      	ldrb	r3, [r7, #3]
 8015062:	015a      	lsls	r2, r3, #5
 8015064:	697b      	ldr	r3, [r7, #20]
 8015066:	4413      	add	r3, r2
 8015068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801506c:	689b      	ldr	r3, [r3, #8]
 801506e:	693a      	ldr	r2, [r7, #16]
 8015070:	4013      	ands	r3, r2
 8015072:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015074:	68bb      	ldr	r3, [r7, #8]
}
 8015076:	4618      	mov	r0, r3
 8015078:	371c      	adds	r7, #28
 801507a:	46bd      	mov	sp, r7
 801507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015080:	4770      	bx	lr

08015082 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8015082:	b480      	push	{r7}
 8015084:	b083      	sub	sp, #12
 8015086:	af00      	add	r7, sp, #0
 8015088:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	695b      	ldr	r3, [r3, #20]
 801508e:	f003 0301 	and.w	r3, r3, #1
}
 8015092:	4618      	mov	r0, r3
 8015094:	370c      	adds	r7, #12
 8015096:	46bd      	mov	sp, r7
 8015098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801509c:	4770      	bx	lr
	...

080150a0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80150a0:	b480      	push	{r7}
 80150a2:	b085      	sub	sp, #20
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80150b2:	681a      	ldr	r2, [r3, #0]
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80150ba:	4619      	mov	r1, r3
 80150bc:	4b09      	ldr	r3, [pc, #36]	; (80150e4 <USB_ActivateSetup+0x44>)
 80150be:	4013      	ands	r3, r2
 80150c0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80150c8:	685b      	ldr	r3, [r3, #4]
 80150ca:	68fa      	ldr	r2, [r7, #12]
 80150cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80150d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80150d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80150d6:	2300      	movs	r3, #0
}
 80150d8:	4618      	mov	r0, r3
 80150da:	3714      	adds	r7, #20
 80150dc:	46bd      	mov	sp, r7
 80150de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150e2:	4770      	bx	lr
 80150e4:	fffff800 	.word	0xfffff800

080150e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80150e8:	b480      	push	{r7}
 80150ea:	b087      	sub	sp, #28
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	60f8      	str	r0, [r7, #12]
 80150f0:	460b      	mov	r3, r1
 80150f2:	607a      	str	r2, [r7, #4]
 80150f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	333c      	adds	r3, #60	; 0x3c
 80150fe:	3304      	adds	r3, #4
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8015104:	693b      	ldr	r3, [r7, #16]
 8015106:	4a26      	ldr	r2, [pc, #152]	; (80151a0 <USB_EP0_OutStart+0xb8>)
 8015108:	4293      	cmp	r3, r2
 801510a:	d90a      	bls.n	8015122 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801510c:	697b      	ldr	r3, [r7, #20]
 801510e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015118:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801511c:	d101      	bne.n	8015122 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801511e:	2300      	movs	r3, #0
 8015120:	e037      	b.n	8015192 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8015122:	697b      	ldr	r3, [r7, #20]
 8015124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015128:	461a      	mov	r2, r3
 801512a:	2300      	movs	r3, #0
 801512c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801512e:	697b      	ldr	r3, [r7, #20]
 8015130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015134:	691b      	ldr	r3, [r3, #16]
 8015136:	697a      	ldr	r2, [r7, #20]
 8015138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801513c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015140:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8015142:	697b      	ldr	r3, [r7, #20]
 8015144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015148:	691b      	ldr	r3, [r3, #16]
 801514a:	697a      	ldr	r2, [r7, #20]
 801514c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015150:	f043 0318 	orr.w	r3, r3, #24
 8015154:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8015156:	697b      	ldr	r3, [r7, #20]
 8015158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801515c:	691b      	ldr	r3, [r3, #16]
 801515e:	697a      	ldr	r2, [r7, #20]
 8015160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015164:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8015168:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801516a:	7afb      	ldrb	r3, [r7, #11]
 801516c:	2b01      	cmp	r3, #1
 801516e:	d10f      	bne.n	8015190 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8015170:	697b      	ldr	r3, [r7, #20]
 8015172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015176:	461a      	mov	r2, r3
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801517c:	697b      	ldr	r3, [r7, #20]
 801517e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	697a      	ldr	r2, [r7, #20]
 8015186:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801518a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801518e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015190:	2300      	movs	r3, #0
}
 8015192:	4618      	mov	r0, r3
 8015194:	371c      	adds	r7, #28
 8015196:	46bd      	mov	sp, r7
 8015198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801519c:	4770      	bx	lr
 801519e:	bf00      	nop
 80151a0:	4f54300a 	.word	0x4f54300a

080151a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80151a4:	b480      	push	{r7}
 80151a6:	b085      	sub	sp, #20
 80151a8:	af00      	add	r7, sp, #0
 80151aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80151ac:	2300      	movs	r3, #0
 80151ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	3301      	adds	r3, #1
 80151b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	4a13      	ldr	r2, [pc, #76]	; (8015208 <USB_CoreReset+0x64>)
 80151ba:	4293      	cmp	r3, r2
 80151bc:	d901      	bls.n	80151c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80151be:	2303      	movs	r3, #3
 80151c0:	e01b      	b.n	80151fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	691b      	ldr	r3, [r3, #16]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	daf2      	bge.n	80151b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80151ca:	2300      	movs	r3, #0
 80151cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	691b      	ldr	r3, [r3, #16]
 80151d2:	f043 0201 	orr.w	r2, r3, #1
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	3301      	adds	r3, #1
 80151de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	4a09      	ldr	r2, [pc, #36]	; (8015208 <USB_CoreReset+0x64>)
 80151e4:	4293      	cmp	r3, r2
 80151e6:	d901      	bls.n	80151ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80151e8:	2303      	movs	r3, #3
 80151ea:	e006      	b.n	80151fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	691b      	ldr	r3, [r3, #16]
 80151f0:	f003 0301 	and.w	r3, r3, #1
 80151f4:	2b01      	cmp	r3, #1
 80151f6:	d0f0      	beq.n	80151da <USB_CoreReset+0x36>

  return HAL_OK;
 80151f8:	2300      	movs	r3, #0
}
 80151fa:	4618      	mov	r0, r3
 80151fc:	3714      	adds	r7, #20
 80151fe:	46bd      	mov	sp, r7
 8015200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015204:	4770      	bx	lr
 8015206:	bf00      	nop
 8015208:	00030d40 	.word	0x00030d40

0801520c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801520c:	b580      	push	{r7, lr}
 801520e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8015210:	4904      	ldr	r1, [pc, #16]	; (8015224 <MX_FATFS_Init+0x18>)
 8015212:	4805      	ldr	r0, [pc, #20]	; (8015228 <MX_FATFS_Init+0x1c>)
 8015214:	f005 f904 	bl	801a420 <FATFS_LinkDriver>
 8015218:	4603      	mov	r3, r0
 801521a:	461a      	mov	r2, r3
 801521c:	4b03      	ldr	r3, [pc, #12]	; (801522c <MX_FATFS_Init+0x20>)
 801521e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8015220:	bf00      	nop
 8015222:	bd80      	pop	{r7, pc}
 8015224:	24001698 	.word	0x24001698
 8015228:	08020180 	.word	0x08020180
 801522c:	24001694 	.word	0x24001694

08015230 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8015230:	b480      	push	{r7}
 8015232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8015234:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8015236:	4618      	mov	r0, r3
 8015238:	46bd      	mov	sp, r7
 801523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801523e:	4770      	bx	lr

08015240 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8015240:	b580      	push	{r7, lr}
 8015242:	b082      	sub	sp, #8
 8015244:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8015246:	2300      	movs	r3, #0
 8015248:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801524a:	f000 f885 	bl	8015358 <BSP_SD_IsDetected>
 801524e:	4603      	mov	r3, r0
 8015250:	2b01      	cmp	r3, #1
 8015252:	d001      	beq.n	8015258 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8015254:	2302      	movs	r3, #2
 8015256:	e012      	b.n	801527e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8015258:	480b      	ldr	r0, [pc, #44]	; (8015288 <BSP_SD_Init+0x48>)
 801525a:	f7f8 ff39 	bl	800e0d0 <HAL_SD_Init>
 801525e:	4603      	mov	r3, r0
 8015260:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8015262:	79fb      	ldrb	r3, [r7, #7]
 8015264:	2b00      	cmp	r3, #0
 8015266:	d109      	bne.n	801527c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8015268:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801526c:	4806      	ldr	r0, [pc, #24]	; (8015288 <BSP_SD_Init+0x48>)
 801526e:	f7f9 fdef 	bl	800ee50 <HAL_SD_ConfigWideBusOperation>
 8015272:	4603      	mov	r3, r0
 8015274:	2b00      	cmp	r3, #0
 8015276:	d001      	beq.n	801527c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8015278:	2301      	movs	r3, #1
 801527a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 801527c:	79fb      	ldrb	r3, [r7, #7]
}
 801527e:	4618      	mov	r0, r3
 8015280:	3708      	adds	r7, #8
 8015282:	46bd      	mov	sp, r7
 8015284:	bd80      	pop	{r7, pc}
 8015286:	bf00      	nop
 8015288:	24000f30 	.word	0x24000f30

0801528c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 801528c:	b580      	push	{r7, lr}
 801528e:	b086      	sub	sp, #24
 8015290:	af00      	add	r7, sp, #0
 8015292:	60f8      	str	r0, [r7, #12]
 8015294:	60b9      	str	r1, [r7, #8]
 8015296:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8015298:	2300      	movs	r3, #0
 801529a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	68ba      	ldr	r2, [r7, #8]
 80152a0:	68f9      	ldr	r1, [r7, #12]
 80152a2:	4806      	ldr	r0, [pc, #24]	; (80152bc <BSP_SD_ReadBlocks_DMA+0x30>)
 80152a4:	f7f9 f834 	bl	800e310 <HAL_SD_ReadBlocks_DMA>
 80152a8:	4603      	mov	r3, r0
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d001      	beq.n	80152b2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80152ae:	2301      	movs	r3, #1
 80152b0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80152b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80152b4:	4618      	mov	r0, r3
 80152b6:	3718      	adds	r7, #24
 80152b8:	46bd      	mov	sp, r7
 80152ba:	bd80      	pop	{r7, pc}
 80152bc:	24000f30 	.word	0x24000f30

080152c0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80152c0:	b580      	push	{r7, lr}
 80152c2:	b086      	sub	sp, #24
 80152c4:	af00      	add	r7, sp, #0
 80152c6:	60f8      	str	r0, [r7, #12]
 80152c8:	60b9      	str	r1, [r7, #8]
 80152ca:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80152cc:	2300      	movs	r3, #0
 80152ce:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	68ba      	ldr	r2, [r7, #8]
 80152d4:	68f9      	ldr	r1, [r7, #12]
 80152d6:	4806      	ldr	r0, [pc, #24]	; (80152f0 <BSP_SD_WriteBlocks_DMA+0x30>)
 80152d8:	f7f9 f8c2 	bl	800e460 <HAL_SD_WriteBlocks_DMA>
 80152dc:	4603      	mov	r3, r0
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d001      	beq.n	80152e6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80152e2:	2301      	movs	r3, #1
 80152e4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80152e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80152e8:	4618      	mov	r0, r3
 80152ea:	3718      	adds	r7, #24
 80152ec:	46bd      	mov	sp, r7
 80152ee:	bd80      	pop	{r7, pc}
 80152f0:	24000f30 	.word	0x24000f30

080152f4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80152f4:	b580      	push	{r7, lr}
 80152f6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80152f8:	4805      	ldr	r0, [pc, #20]	; (8015310 <BSP_SD_GetCardState+0x1c>)
 80152fa:	f7f9 febb 	bl	800f074 <HAL_SD_GetCardState>
 80152fe:	4603      	mov	r3, r0
 8015300:	2b04      	cmp	r3, #4
 8015302:	bf14      	ite	ne
 8015304:	2301      	movne	r3, #1
 8015306:	2300      	moveq	r3, #0
 8015308:	b2db      	uxtb	r3, r3
}
 801530a:	4618      	mov	r0, r3
 801530c:	bd80      	pop	{r7, pc}
 801530e:	bf00      	nop
 8015310:	24000f30 	.word	0x24000f30

08015314 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8015314:	b580      	push	{r7, lr}
 8015316:	b082      	sub	sp, #8
 8015318:	af00      	add	r7, sp, #0
 801531a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 801531c:	6879      	ldr	r1, [r7, #4]
 801531e:	4803      	ldr	r0, [pc, #12]	; (801532c <BSP_SD_GetCardInfo+0x18>)
 8015320:	f7f9 fd6a 	bl	800edf8 <HAL_SD_GetCardInfo>
}
 8015324:	bf00      	nop
 8015326:	3708      	adds	r7, #8
 8015328:	46bd      	mov	sp, r7
 801532a:	bd80      	pop	{r7, pc}
 801532c:	24000f30 	.word	0x24000f30

08015330 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8015330:	b580      	push	{r7, lr}
 8015332:	b082      	sub	sp, #8
 8015334:	af00      	add	r7, sp, #0
 8015336:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8015338:	f000 f984 	bl	8015644 <BSP_SD_WriteCpltCallback>
}
 801533c:	bf00      	nop
 801533e:	3708      	adds	r7, #8
 8015340:	46bd      	mov	sp, r7
 8015342:	bd80      	pop	{r7, pc}

08015344 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8015344:	b580      	push	{r7, lr}
 8015346:	b082      	sub	sp, #8
 8015348:	af00      	add	r7, sp, #0
 801534a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801534c:	f000 f986 	bl	801565c <BSP_SD_ReadCpltCallback>
}
 8015350:	bf00      	nop
 8015352:	3708      	adds	r7, #8
 8015354:	46bd      	mov	sp, r7
 8015356:	bd80      	pop	{r7, pc}

08015358 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8015358:	b480      	push	{r7}
 801535a:	b083      	sub	sp, #12
 801535c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801535e:	2301      	movs	r3, #1
 8015360:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 8015362:	79fb      	ldrb	r3, [r7, #7]
 8015364:	b2db      	uxtb	r3, r3
}
 8015366:	4618      	mov	r0, r3
 8015368:	370c      	adds	r7, #12
 801536a:	46bd      	mov	sp, r7
 801536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015370:	4770      	bx	lr

08015372 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8015372:	b580      	push	{r7, lr}
 8015374:	b084      	sub	sp, #16
 8015376:	af00      	add	r7, sp, #0
 8015378:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801537a:	f7ee ff8b 	bl	8004294 <HAL_GetTick>
 801537e:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8015380:	e006      	b.n	8015390 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015382:	f7ff ffb7 	bl	80152f4 <BSP_SD_GetCardState>
 8015386:	4603      	mov	r3, r0
 8015388:	2b00      	cmp	r3, #0
 801538a:	d101      	bne.n	8015390 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801538c:	2300      	movs	r3, #0
 801538e:	e009      	b.n	80153a4 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8015390:	f7ee ff80 	bl	8004294 <HAL_GetTick>
 8015394:	4602      	mov	r2, r0
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	1ad3      	subs	r3, r2, r3
 801539a:	687a      	ldr	r2, [r7, #4]
 801539c:	429a      	cmp	r2, r3
 801539e:	d8f0      	bhi.n	8015382 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80153a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80153a4:	4618      	mov	r0, r3
 80153a6:	3710      	adds	r7, #16
 80153a8:	46bd      	mov	sp, r7
 80153aa:	bd80      	pop	{r7, pc}

080153ac <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80153ac:	b580      	push	{r7, lr}
 80153ae:	b082      	sub	sp, #8
 80153b0:	af00      	add	r7, sp, #0
 80153b2:	4603      	mov	r3, r0
 80153b4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80153b6:	4b0b      	ldr	r3, [pc, #44]	; (80153e4 <SD_CheckStatus+0x38>)
 80153b8:	2201      	movs	r2, #1
 80153ba:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80153bc:	f7ff ff9a 	bl	80152f4 <BSP_SD_GetCardState>
 80153c0:	4603      	mov	r3, r0
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d107      	bne.n	80153d6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80153c6:	4b07      	ldr	r3, [pc, #28]	; (80153e4 <SD_CheckStatus+0x38>)
 80153c8:	781b      	ldrb	r3, [r3, #0]
 80153ca:	b2db      	uxtb	r3, r3
 80153cc:	f023 0301 	bic.w	r3, r3, #1
 80153d0:	b2da      	uxtb	r2, r3
 80153d2:	4b04      	ldr	r3, [pc, #16]	; (80153e4 <SD_CheckStatus+0x38>)
 80153d4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80153d6:	4b03      	ldr	r3, [pc, #12]	; (80153e4 <SD_CheckStatus+0x38>)
 80153d8:	781b      	ldrb	r3, [r3, #0]
 80153da:	b2db      	uxtb	r3, r3
}
 80153dc:	4618      	mov	r0, r3
 80153de:	3708      	adds	r7, #8
 80153e0:	46bd      	mov	sp, r7
 80153e2:	bd80      	pop	{r7, pc}
 80153e4:	2400000d 	.word	0x2400000d

080153e8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80153e8:	b580      	push	{r7, lr}
 80153ea:	b082      	sub	sp, #8
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	4603      	mov	r3, r0
 80153f0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80153f2:	f7ff ff25 	bl	8015240 <BSP_SD_Init>
 80153f6:	4603      	mov	r3, r0
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d107      	bne.n	801540c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80153fc:	79fb      	ldrb	r3, [r7, #7]
 80153fe:	4618      	mov	r0, r3
 8015400:	f7ff ffd4 	bl	80153ac <SD_CheckStatus>
 8015404:	4603      	mov	r3, r0
 8015406:	461a      	mov	r2, r3
 8015408:	4b04      	ldr	r3, [pc, #16]	; (801541c <SD_initialize+0x34>)
 801540a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 801540c:	4b03      	ldr	r3, [pc, #12]	; (801541c <SD_initialize+0x34>)
 801540e:	781b      	ldrb	r3, [r3, #0]
 8015410:	b2db      	uxtb	r3, r3
}
 8015412:	4618      	mov	r0, r3
 8015414:	3708      	adds	r7, #8
 8015416:	46bd      	mov	sp, r7
 8015418:	bd80      	pop	{r7, pc}
 801541a:	bf00      	nop
 801541c:	2400000d 	.word	0x2400000d

08015420 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8015420:	b580      	push	{r7, lr}
 8015422:	b082      	sub	sp, #8
 8015424:	af00      	add	r7, sp, #0
 8015426:	4603      	mov	r3, r0
 8015428:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801542a:	79fb      	ldrb	r3, [r7, #7]
 801542c:	4618      	mov	r0, r3
 801542e:	f7ff ffbd 	bl	80153ac <SD_CheckStatus>
 8015432:	4603      	mov	r3, r0
}
 8015434:	4618      	mov	r0, r3
 8015436:	3708      	adds	r7, #8
 8015438:	46bd      	mov	sp, r7
 801543a:	bd80      	pop	{r7, pc}

0801543c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801543c:	b580      	push	{r7, lr}
 801543e:	b086      	sub	sp, #24
 8015440:	af00      	add	r7, sp, #0
 8015442:	60b9      	str	r1, [r7, #8]
 8015444:	607a      	str	r2, [r7, #4]
 8015446:	603b      	str	r3, [r7, #0]
 8015448:	4603      	mov	r3, r0
 801544a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801544c:	2301      	movs	r3, #1
 801544e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8015450:	f247 5030 	movw	r0, #30000	; 0x7530
 8015454:	f7ff ff8d 	bl	8015372 <SD_CheckStatusWithTimeout>
 8015458:	4603      	mov	r3, r0
 801545a:	2b00      	cmp	r3, #0
 801545c:	da01      	bge.n	8015462 <SD_read+0x26>
  {
    return res;
 801545e:	7dfb      	ldrb	r3, [r7, #23]
 8015460:	e03b      	b.n	80154da <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8015462:	683a      	ldr	r2, [r7, #0]
 8015464:	6879      	ldr	r1, [r7, #4]
 8015466:	68b8      	ldr	r0, [r7, #8]
 8015468:	f7ff ff10 	bl	801528c <BSP_SD_ReadBlocks_DMA>
 801546c:	4603      	mov	r3, r0
 801546e:	2b00      	cmp	r3, #0
 8015470:	d132      	bne.n	80154d8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8015472:	4b1c      	ldr	r3, [pc, #112]	; (80154e4 <SD_read+0xa8>)
 8015474:	2200      	movs	r2, #0
 8015476:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8015478:	f7ee ff0c 	bl	8004294 <HAL_GetTick>
 801547c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801547e:	bf00      	nop
 8015480:	4b18      	ldr	r3, [pc, #96]	; (80154e4 <SD_read+0xa8>)
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	2b00      	cmp	r3, #0
 8015486:	d108      	bne.n	801549a <SD_read+0x5e>
 8015488:	f7ee ff04 	bl	8004294 <HAL_GetTick>
 801548c:	4602      	mov	r2, r0
 801548e:	693b      	ldr	r3, [r7, #16]
 8015490:	1ad3      	subs	r3, r2, r3
 8015492:	f247 522f 	movw	r2, #29999	; 0x752f
 8015496:	4293      	cmp	r3, r2
 8015498:	d9f2      	bls.n	8015480 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801549a:	4b12      	ldr	r3, [pc, #72]	; (80154e4 <SD_read+0xa8>)
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d102      	bne.n	80154a8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80154a2:	2301      	movs	r3, #1
 80154a4:	75fb      	strb	r3, [r7, #23]
 80154a6:	e017      	b.n	80154d8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80154a8:	4b0e      	ldr	r3, [pc, #56]	; (80154e4 <SD_read+0xa8>)
 80154aa:	2200      	movs	r2, #0
 80154ac:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80154ae:	f7ee fef1 	bl	8004294 <HAL_GetTick>
 80154b2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80154b4:	e007      	b.n	80154c6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80154b6:	f7ff ff1d 	bl	80152f4 <BSP_SD_GetCardState>
 80154ba:	4603      	mov	r3, r0
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d102      	bne.n	80154c6 <SD_read+0x8a>
          {
            res = RES_OK;
 80154c0:	2300      	movs	r3, #0
 80154c2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80154c4:	e008      	b.n	80154d8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80154c6:	f7ee fee5 	bl	8004294 <HAL_GetTick>
 80154ca:	4602      	mov	r2, r0
 80154cc:	693b      	ldr	r3, [r7, #16]
 80154ce:	1ad3      	subs	r3, r2, r3
 80154d0:	f247 522f 	movw	r2, #29999	; 0x752f
 80154d4:	4293      	cmp	r3, r2
 80154d6:	d9ee      	bls.n	80154b6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80154d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80154da:	4618      	mov	r0, r3
 80154dc:	3718      	adds	r7, #24
 80154de:	46bd      	mov	sp, r7
 80154e0:	bd80      	pop	{r7, pc}
 80154e2:	bf00      	nop
 80154e4:	240016a0 	.word	0x240016a0

080154e8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b086      	sub	sp, #24
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	60b9      	str	r1, [r7, #8]
 80154f0:	607a      	str	r2, [r7, #4]
 80154f2:	603b      	str	r3, [r7, #0]
 80154f4:	4603      	mov	r3, r0
 80154f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80154f8:	2301      	movs	r3, #1
 80154fa:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80154fc:	4b24      	ldr	r3, [pc, #144]	; (8015590 <SD_write+0xa8>)
 80154fe:	2200      	movs	r2, #0
 8015500:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8015502:	f247 5030 	movw	r0, #30000	; 0x7530
 8015506:	f7ff ff34 	bl	8015372 <SD_CheckStatusWithTimeout>
 801550a:	4603      	mov	r3, r0
 801550c:	2b00      	cmp	r3, #0
 801550e:	da01      	bge.n	8015514 <SD_write+0x2c>
  {
    return res;
 8015510:	7dfb      	ldrb	r3, [r7, #23]
 8015512:	e038      	b.n	8015586 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8015514:	683a      	ldr	r2, [r7, #0]
 8015516:	6879      	ldr	r1, [r7, #4]
 8015518:	68b8      	ldr	r0, [r7, #8]
 801551a:	f7ff fed1 	bl	80152c0 <BSP_SD_WriteBlocks_DMA>
 801551e:	4603      	mov	r3, r0
 8015520:	2b00      	cmp	r3, #0
 8015522:	d12f      	bne.n	8015584 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8015524:	f7ee feb6 	bl	8004294 <HAL_GetTick>
 8015528:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801552a:	bf00      	nop
 801552c:	4b18      	ldr	r3, [pc, #96]	; (8015590 <SD_write+0xa8>)
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	2b00      	cmp	r3, #0
 8015532:	d108      	bne.n	8015546 <SD_write+0x5e>
 8015534:	f7ee feae 	bl	8004294 <HAL_GetTick>
 8015538:	4602      	mov	r2, r0
 801553a:	693b      	ldr	r3, [r7, #16]
 801553c:	1ad3      	subs	r3, r2, r3
 801553e:	f247 522f 	movw	r2, #29999	; 0x752f
 8015542:	4293      	cmp	r3, r2
 8015544:	d9f2      	bls.n	801552c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8015546:	4b12      	ldr	r3, [pc, #72]	; (8015590 <SD_write+0xa8>)
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d102      	bne.n	8015554 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801554e:	2301      	movs	r3, #1
 8015550:	75fb      	strb	r3, [r7, #23]
 8015552:	e017      	b.n	8015584 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8015554:	4b0e      	ldr	r3, [pc, #56]	; (8015590 <SD_write+0xa8>)
 8015556:	2200      	movs	r2, #0
 8015558:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801555a:	f7ee fe9b 	bl	8004294 <HAL_GetTick>
 801555e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015560:	e007      	b.n	8015572 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015562:	f7ff fec7 	bl	80152f4 <BSP_SD_GetCardState>
 8015566:	4603      	mov	r3, r0
 8015568:	2b00      	cmp	r3, #0
 801556a:	d102      	bne.n	8015572 <SD_write+0x8a>
          {
            res = RES_OK;
 801556c:	2300      	movs	r3, #0
 801556e:	75fb      	strb	r3, [r7, #23]
            break;
 8015570:	e008      	b.n	8015584 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015572:	f7ee fe8f 	bl	8004294 <HAL_GetTick>
 8015576:	4602      	mov	r2, r0
 8015578:	693b      	ldr	r3, [r7, #16]
 801557a:	1ad3      	subs	r3, r2, r3
 801557c:	f247 522f 	movw	r2, #29999	; 0x752f
 8015580:	4293      	cmp	r3, r2
 8015582:	d9ee      	bls.n	8015562 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8015584:	7dfb      	ldrb	r3, [r7, #23]
}
 8015586:	4618      	mov	r0, r3
 8015588:	3718      	adds	r7, #24
 801558a:	46bd      	mov	sp, r7
 801558c:	bd80      	pop	{r7, pc}
 801558e:	bf00      	nop
 8015590:	2400169c 	.word	0x2400169c

08015594 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8015594:	b580      	push	{r7, lr}
 8015596:	b08c      	sub	sp, #48	; 0x30
 8015598:	af00      	add	r7, sp, #0
 801559a:	4603      	mov	r3, r0
 801559c:	603a      	str	r2, [r7, #0]
 801559e:	71fb      	strb	r3, [r7, #7]
 80155a0:	460b      	mov	r3, r1
 80155a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80155a4:	2301      	movs	r3, #1
 80155a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80155aa:	4b25      	ldr	r3, [pc, #148]	; (8015640 <SD_ioctl+0xac>)
 80155ac:	781b      	ldrb	r3, [r3, #0]
 80155ae:	b2db      	uxtb	r3, r3
 80155b0:	f003 0301 	and.w	r3, r3, #1
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d001      	beq.n	80155bc <SD_ioctl+0x28>
 80155b8:	2303      	movs	r3, #3
 80155ba:	e03c      	b.n	8015636 <SD_ioctl+0xa2>

  switch (cmd)
 80155bc:	79bb      	ldrb	r3, [r7, #6]
 80155be:	2b03      	cmp	r3, #3
 80155c0:	d834      	bhi.n	801562c <SD_ioctl+0x98>
 80155c2:	a201      	add	r2, pc, #4	; (adr r2, 80155c8 <SD_ioctl+0x34>)
 80155c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155c8:	080155d9 	.word	0x080155d9
 80155cc:	080155e1 	.word	0x080155e1
 80155d0:	080155f9 	.word	0x080155f9
 80155d4:	08015613 	.word	0x08015613
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80155d8:	2300      	movs	r3, #0
 80155da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80155de:	e028      	b.n	8015632 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80155e0:	f107 0308 	add.w	r3, r7, #8
 80155e4:	4618      	mov	r0, r3
 80155e6:	f7ff fe95 	bl	8015314 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80155ea:	6a3a      	ldr	r2, [r7, #32]
 80155ec:	683b      	ldr	r3, [r7, #0]
 80155ee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80155f0:	2300      	movs	r3, #0
 80155f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80155f6:	e01c      	b.n	8015632 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80155f8:	f107 0308 	add.w	r3, r7, #8
 80155fc:	4618      	mov	r0, r3
 80155fe:	f7ff fe89 	bl	8015314 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8015602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015604:	b29a      	uxth	r2, r3
 8015606:	683b      	ldr	r3, [r7, #0]
 8015608:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801560a:	2300      	movs	r3, #0
 801560c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015610:	e00f      	b.n	8015632 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8015612:	f107 0308 	add.w	r3, r7, #8
 8015616:	4618      	mov	r0, r3
 8015618:	f7ff fe7c 	bl	8015314 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801561e:	0a5a      	lsrs	r2, r3, #9
 8015620:	683b      	ldr	r3, [r7, #0]
 8015622:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8015624:	2300      	movs	r3, #0
 8015626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801562a:	e002      	b.n	8015632 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801562c:	2304      	movs	r3, #4
 801562e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8015632:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015636:	4618      	mov	r0, r3
 8015638:	3730      	adds	r7, #48	; 0x30
 801563a:	46bd      	mov	sp, r7
 801563c:	bd80      	pop	{r7, pc}
 801563e:	bf00      	nop
 8015640:	2400000d 	.word	0x2400000d

08015644 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8015644:	b480      	push	{r7}
 8015646:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8015648:	4b03      	ldr	r3, [pc, #12]	; (8015658 <BSP_SD_WriteCpltCallback+0x14>)
 801564a:	2201      	movs	r2, #1
 801564c:	601a      	str	r2, [r3, #0]
}
 801564e:	bf00      	nop
 8015650:	46bd      	mov	sp, r7
 8015652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015656:	4770      	bx	lr
 8015658:	2400169c 	.word	0x2400169c

0801565c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801565c:	b480      	push	{r7}
 801565e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8015660:	4b03      	ldr	r3, [pc, #12]	; (8015670 <BSP_SD_ReadCpltCallback+0x14>)
 8015662:	2201      	movs	r2, #1
 8015664:	601a      	str	r2, [r3, #0]
}
 8015666:	bf00      	nop
 8015668:	46bd      	mov	sp, r7
 801566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801566e:	4770      	bx	lr
 8015670:	240016a0 	.word	0x240016a0

08015674 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015674:	b580      	push	{r7, lr}
 8015676:	b084      	sub	sp, #16
 8015678:	af00      	add	r7, sp, #0
 801567a:	6078      	str	r0, [r7, #4]
 801567c:	460b      	mov	r3, r1
 801567e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8015680:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8015684:	f005 fc72 	bl	801af6c <USBD_static_malloc>
 8015688:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	2b00      	cmp	r3, #0
 801568e:	d109      	bne.n	80156a4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	32b0      	adds	r2, #176	; 0xb0
 801569a:	2100      	movs	r1, #0
 801569c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80156a0:	2302      	movs	r3, #2
 80156a2:	e0d4      	b.n	801584e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80156a4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80156a8:	2100      	movs	r1, #0
 80156aa:	68f8      	ldr	r0, [r7, #12]
 80156ac:	f006 fc35 	bl	801bf1a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	32b0      	adds	r2, #176	; 0xb0
 80156ba:	68f9      	ldr	r1, [r7, #12]
 80156bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	32b0      	adds	r2, #176	; 0xb0
 80156ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	7c1b      	ldrb	r3, [r3, #16]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d138      	bne.n	801574e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80156dc:	4b5e      	ldr	r3, [pc, #376]	; (8015858 <USBD_CDC_Init+0x1e4>)
 80156de:	7819      	ldrb	r1, [r3, #0]
 80156e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80156e4:	2202      	movs	r2, #2
 80156e6:	6878      	ldr	r0, [r7, #4]
 80156e8:	f005 fb1d 	bl	801ad26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80156ec:	4b5a      	ldr	r3, [pc, #360]	; (8015858 <USBD_CDC_Init+0x1e4>)
 80156ee:	781b      	ldrb	r3, [r3, #0]
 80156f0:	f003 020f 	and.w	r2, r3, #15
 80156f4:	6879      	ldr	r1, [r7, #4]
 80156f6:	4613      	mov	r3, r2
 80156f8:	009b      	lsls	r3, r3, #2
 80156fa:	4413      	add	r3, r2
 80156fc:	009b      	lsls	r3, r3, #2
 80156fe:	440b      	add	r3, r1
 8015700:	3324      	adds	r3, #36	; 0x24
 8015702:	2201      	movs	r2, #1
 8015704:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015706:	4b55      	ldr	r3, [pc, #340]	; (801585c <USBD_CDC_Init+0x1e8>)
 8015708:	7819      	ldrb	r1, [r3, #0]
 801570a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801570e:	2202      	movs	r2, #2
 8015710:	6878      	ldr	r0, [r7, #4]
 8015712:	f005 fb08 	bl	801ad26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015716:	4b51      	ldr	r3, [pc, #324]	; (801585c <USBD_CDC_Init+0x1e8>)
 8015718:	781b      	ldrb	r3, [r3, #0]
 801571a:	f003 020f 	and.w	r2, r3, #15
 801571e:	6879      	ldr	r1, [r7, #4]
 8015720:	4613      	mov	r3, r2
 8015722:	009b      	lsls	r3, r3, #2
 8015724:	4413      	add	r3, r2
 8015726:	009b      	lsls	r3, r3, #2
 8015728:	440b      	add	r3, r1
 801572a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801572e:	2201      	movs	r2, #1
 8015730:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8015732:	4b4b      	ldr	r3, [pc, #300]	; (8015860 <USBD_CDC_Init+0x1ec>)
 8015734:	781b      	ldrb	r3, [r3, #0]
 8015736:	f003 020f 	and.w	r2, r3, #15
 801573a:	6879      	ldr	r1, [r7, #4]
 801573c:	4613      	mov	r3, r2
 801573e:	009b      	lsls	r3, r3, #2
 8015740:	4413      	add	r3, r2
 8015742:	009b      	lsls	r3, r3, #2
 8015744:	440b      	add	r3, r1
 8015746:	3326      	adds	r3, #38	; 0x26
 8015748:	2210      	movs	r2, #16
 801574a:	801a      	strh	r2, [r3, #0]
 801574c:	e035      	b.n	80157ba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801574e:	4b42      	ldr	r3, [pc, #264]	; (8015858 <USBD_CDC_Init+0x1e4>)
 8015750:	7819      	ldrb	r1, [r3, #0]
 8015752:	2340      	movs	r3, #64	; 0x40
 8015754:	2202      	movs	r2, #2
 8015756:	6878      	ldr	r0, [r7, #4]
 8015758:	f005 fae5 	bl	801ad26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801575c:	4b3e      	ldr	r3, [pc, #248]	; (8015858 <USBD_CDC_Init+0x1e4>)
 801575e:	781b      	ldrb	r3, [r3, #0]
 8015760:	f003 020f 	and.w	r2, r3, #15
 8015764:	6879      	ldr	r1, [r7, #4]
 8015766:	4613      	mov	r3, r2
 8015768:	009b      	lsls	r3, r3, #2
 801576a:	4413      	add	r3, r2
 801576c:	009b      	lsls	r3, r3, #2
 801576e:	440b      	add	r3, r1
 8015770:	3324      	adds	r3, #36	; 0x24
 8015772:	2201      	movs	r2, #1
 8015774:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015776:	4b39      	ldr	r3, [pc, #228]	; (801585c <USBD_CDC_Init+0x1e8>)
 8015778:	7819      	ldrb	r1, [r3, #0]
 801577a:	2340      	movs	r3, #64	; 0x40
 801577c:	2202      	movs	r2, #2
 801577e:	6878      	ldr	r0, [r7, #4]
 8015780:	f005 fad1 	bl	801ad26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015784:	4b35      	ldr	r3, [pc, #212]	; (801585c <USBD_CDC_Init+0x1e8>)
 8015786:	781b      	ldrb	r3, [r3, #0]
 8015788:	f003 020f 	and.w	r2, r3, #15
 801578c:	6879      	ldr	r1, [r7, #4]
 801578e:	4613      	mov	r3, r2
 8015790:	009b      	lsls	r3, r3, #2
 8015792:	4413      	add	r3, r2
 8015794:	009b      	lsls	r3, r3, #2
 8015796:	440b      	add	r3, r1
 8015798:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801579c:	2201      	movs	r2, #1
 801579e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80157a0:	4b2f      	ldr	r3, [pc, #188]	; (8015860 <USBD_CDC_Init+0x1ec>)
 80157a2:	781b      	ldrb	r3, [r3, #0]
 80157a4:	f003 020f 	and.w	r2, r3, #15
 80157a8:	6879      	ldr	r1, [r7, #4]
 80157aa:	4613      	mov	r3, r2
 80157ac:	009b      	lsls	r3, r3, #2
 80157ae:	4413      	add	r3, r2
 80157b0:	009b      	lsls	r3, r3, #2
 80157b2:	440b      	add	r3, r1
 80157b4:	3326      	adds	r3, #38	; 0x26
 80157b6:	2210      	movs	r2, #16
 80157b8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80157ba:	4b29      	ldr	r3, [pc, #164]	; (8015860 <USBD_CDC_Init+0x1ec>)
 80157bc:	7819      	ldrb	r1, [r3, #0]
 80157be:	2308      	movs	r3, #8
 80157c0:	2203      	movs	r2, #3
 80157c2:	6878      	ldr	r0, [r7, #4]
 80157c4:	f005 faaf 	bl	801ad26 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80157c8:	4b25      	ldr	r3, [pc, #148]	; (8015860 <USBD_CDC_Init+0x1ec>)
 80157ca:	781b      	ldrb	r3, [r3, #0]
 80157cc:	f003 020f 	and.w	r2, r3, #15
 80157d0:	6879      	ldr	r1, [r7, #4]
 80157d2:	4613      	mov	r3, r2
 80157d4:	009b      	lsls	r3, r3, #2
 80157d6:	4413      	add	r3, r2
 80157d8:	009b      	lsls	r3, r3, #2
 80157da:	440b      	add	r3, r1
 80157dc:	3324      	adds	r3, #36	; 0x24
 80157de:	2201      	movs	r2, #1
 80157e0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	2200      	movs	r2, #0
 80157e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80157f0:	687a      	ldr	r2, [r7, #4]
 80157f2:	33b0      	adds	r3, #176	; 0xb0
 80157f4:	009b      	lsls	r3, r3, #2
 80157f6:	4413      	add	r3, r2
 80157f8:	685b      	ldr	r3, [r3, #4]
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	2200      	movs	r2, #0
 8015802:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	2200      	movs	r2, #0
 801580a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8015814:	2b00      	cmp	r3, #0
 8015816:	d101      	bne.n	801581c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8015818:	2302      	movs	r3, #2
 801581a:	e018      	b.n	801584e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	7c1b      	ldrb	r3, [r3, #16]
 8015820:	2b00      	cmp	r3, #0
 8015822:	d10a      	bne.n	801583a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015824:	4b0d      	ldr	r3, [pc, #52]	; (801585c <USBD_CDC_Init+0x1e8>)
 8015826:	7819      	ldrb	r1, [r3, #0]
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801582e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015832:	6878      	ldr	r0, [r7, #4]
 8015834:	f005 fb66 	bl	801af04 <USBD_LL_PrepareReceive>
 8015838:	e008      	b.n	801584c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801583a:	4b08      	ldr	r3, [pc, #32]	; (801585c <USBD_CDC_Init+0x1e8>)
 801583c:	7819      	ldrb	r1, [r3, #0]
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015844:	2340      	movs	r3, #64	; 0x40
 8015846:	6878      	ldr	r0, [r7, #4]
 8015848:	f005 fb5c 	bl	801af04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801584c:	2300      	movs	r3, #0
}
 801584e:	4618      	mov	r0, r3
 8015850:	3710      	adds	r7, #16
 8015852:	46bd      	mov	sp, r7
 8015854:	bd80      	pop	{r7, pc}
 8015856:	bf00      	nop
 8015858:	24000097 	.word	0x24000097
 801585c:	24000098 	.word	0x24000098
 8015860:	24000099 	.word	0x24000099

08015864 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015864:	b580      	push	{r7, lr}
 8015866:	b082      	sub	sp, #8
 8015868:	af00      	add	r7, sp, #0
 801586a:	6078      	str	r0, [r7, #4]
 801586c:	460b      	mov	r3, r1
 801586e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8015870:	4b3a      	ldr	r3, [pc, #232]	; (801595c <USBD_CDC_DeInit+0xf8>)
 8015872:	781b      	ldrb	r3, [r3, #0]
 8015874:	4619      	mov	r1, r3
 8015876:	6878      	ldr	r0, [r7, #4]
 8015878:	f005 fa7b 	bl	801ad72 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 801587c:	4b37      	ldr	r3, [pc, #220]	; (801595c <USBD_CDC_DeInit+0xf8>)
 801587e:	781b      	ldrb	r3, [r3, #0]
 8015880:	f003 020f 	and.w	r2, r3, #15
 8015884:	6879      	ldr	r1, [r7, #4]
 8015886:	4613      	mov	r3, r2
 8015888:	009b      	lsls	r3, r3, #2
 801588a:	4413      	add	r3, r2
 801588c:	009b      	lsls	r3, r3, #2
 801588e:	440b      	add	r3, r1
 8015890:	3324      	adds	r3, #36	; 0x24
 8015892:	2200      	movs	r2, #0
 8015894:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8015896:	4b32      	ldr	r3, [pc, #200]	; (8015960 <USBD_CDC_DeInit+0xfc>)
 8015898:	781b      	ldrb	r3, [r3, #0]
 801589a:	4619      	mov	r1, r3
 801589c:	6878      	ldr	r0, [r7, #4]
 801589e:	f005 fa68 	bl	801ad72 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80158a2:	4b2f      	ldr	r3, [pc, #188]	; (8015960 <USBD_CDC_DeInit+0xfc>)
 80158a4:	781b      	ldrb	r3, [r3, #0]
 80158a6:	f003 020f 	and.w	r2, r3, #15
 80158aa:	6879      	ldr	r1, [r7, #4]
 80158ac:	4613      	mov	r3, r2
 80158ae:	009b      	lsls	r3, r3, #2
 80158b0:	4413      	add	r3, r2
 80158b2:	009b      	lsls	r3, r3, #2
 80158b4:	440b      	add	r3, r1
 80158b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80158ba:	2200      	movs	r2, #0
 80158bc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80158be:	4b29      	ldr	r3, [pc, #164]	; (8015964 <USBD_CDC_DeInit+0x100>)
 80158c0:	781b      	ldrb	r3, [r3, #0]
 80158c2:	4619      	mov	r1, r3
 80158c4:	6878      	ldr	r0, [r7, #4]
 80158c6:	f005 fa54 	bl	801ad72 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80158ca:	4b26      	ldr	r3, [pc, #152]	; (8015964 <USBD_CDC_DeInit+0x100>)
 80158cc:	781b      	ldrb	r3, [r3, #0]
 80158ce:	f003 020f 	and.w	r2, r3, #15
 80158d2:	6879      	ldr	r1, [r7, #4]
 80158d4:	4613      	mov	r3, r2
 80158d6:	009b      	lsls	r3, r3, #2
 80158d8:	4413      	add	r3, r2
 80158da:	009b      	lsls	r3, r3, #2
 80158dc:	440b      	add	r3, r1
 80158de:	3324      	adds	r3, #36	; 0x24
 80158e0:	2200      	movs	r2, #0
 80158e2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80158e4:	4b1f      	ldr	r3, [pc, #124]	; (8015964 <USBD_CDC_DeInit+0x100>)
 80158e6:	781b      	ldrb	r3, [r3, #0]
 80158e8:	f003 020f 	and.w	r2, r3, #15
 80158ec:	6879      	ldr	r1, [r7, #4]
 80158ee:	4613      	mov	r3, r2
 80158f0:	009b      	lsls	r3, r3, #2
 80158f2:	4413      	add	r3, r2
 80158f4:	009b      	lsls	r3, r3, #2
 80158f6:	440b      	add	r3, r1
 80158f8:	3326      	adds	r3, #38	; 0x26
 80158fa:	2200      	movs	r2, #0
 80158fc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	32b0      	adds	r2, #176	; 0xb0
 8015908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d01f      	beq.n	8015950 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015916:	687a      	ldr	r2, [r7, #4]
 8015918:	33b0      	adds	r3, #176	; 0xb0
 801591a:	009b      	lsls	r3, r3, #2
 801591c:	4413      	add	r3, r2
 801591e:	685b      	ldr	r3, [r3, #4]
 8015920:	685b      	ldr	r3, [r3, #4]
 8015922:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	32b0      	adds	r2, #176	; 0xb0
 801592e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015932:	4618      	mov	r0, r3
 8015934:	f005 fb28 	bl	801af88 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	32b0      	adds	r2, #176	; 0xb0
 8015942:	2100      	movs	r1, #0
 8015944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	2200      	movs	r2, #0
 801594c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8015950:	2300      	movs	r3, #0
}
 8015952:	4618      	mov	r0, r3
 8015954:	3708      	adds	r7, #8
 8015956:	46bd      	mov	sp, r7
 8015958:	bd80      	pop	{r7, pc}
 801595a:	bf00      	nop
 801595c:	24000097 	.word	0x24000097
 8015960:	24000098 	.word	0x24000098
 8015964:	24000099 	.word	0x24000099

08015968 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8015968:	b580      	push	{r7, lr}
 801596a:	b086      	sub	sp, #24
 801596c:	af00      	add	r7, sp, #0
 801596e:	6078      	str	r0, [r7, #4]
 8015970:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	32b0      	adds	r2, #176	; 0xb0
 801597c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015980:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8015982:	2300      	movs	r3, #0
 8015984:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8015986:	2300      	movs	r3, #0
 8015988:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801598a:	2300      	movs	r3, #0
 801598c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801598e:	693b      	ldr	r3, [r7, #16]
 8015990:	2b00      	cmp	r3, #0
 8015992:	d101      	bne.n	8015998 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8015994:	2303      	movs	r3, #3
 8015996:	e0bf      	b.n	8015b18 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015998:	683b      	ldr	r3, [r7, #0]
 801599a:	781b      	ldrb	r3, [r3, #0]
 801599c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d050      	beq.n	8015a46 <USBD_CDC_Setup+0xde>
 80159a4:	2b20      	cmp	r3, #32
 80159a6:	f040 80af 	bne.w	8015b08 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80159aa:	683b      	ldr	r3, [r7, #0]
 80159ac:	88db      	ldrh	r3, [r3, #6]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d03a      	beq.n	8015a28 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80159b2:	683b      	ldr	r3, [r7, #0]
 80159b4:	781b      	ldrb	r3, [r3, #0]
 80159b6:	b25b      	sxtb	r3, r3
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	da1b      	bge.n	80159f4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80159c2:	687a      	ldr	r2, [r7, #4]
 80159c4:	33b0      	adds	r3, #176	; 0xb0
 80159c6:	009b      	lsls	r3, r3, #2
 80159c8:	4413      	add	r3, r2
 80159ca:	685b      	ldr	r3, [r3, #4]
 80159cc:	689b      	ldr	r3, [r3, #8]
 80159ce:	683a      	ldr	r2, [r7, #0]
 80159d0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80159d2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80159d4:	683a      	ldr	r2, [r7, #0]
 80159d6:	88d2      	ldrh	r2, [r2, #6]
 80159d8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80159da:	683b      	ldr	r3, [r7, #0]
 80159dc:	88db      	ldrh	r3, [r3, #6]
 80159de:	2b07      	cmp	r3, #7
 80159e0:	bf28      	it	cs
 80159e2:	2307      	movcs	r3, #7
 80159e4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80159e6:	693b      	ldr	r3, [r7, #16]
 80159e8:	89fa      	ldrh	r2, [r7, #14]
 80159ea:	4619      	mov	r1, r3
 80159ec:	6878      	ldr	r0, [r7, #4]
 80159ee:	f001 fd89 	bl	8017504 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80159f2:	e090      	b.n	8015b16 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80159f4:	683b      	ldr	r3, [r7, #0]
 80159f6:	785a      	ldrb	r2, [r3, #1]
 80159f8:	693b      	ldr	r3, [r7, #16]
 80159fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80159fe:	683b      	ldr	r3, [r7, #0]
 8015a00:	88db      	ldrh	r3, [r3, #6]
 8015a02:	2b3f      	cmp	r3, #63	; 0x3f
 8015a04:	d803      	bhi.n	8015a0e <USBD_CDC_Setup+0xa6>
 8015a06:	683b      	ldr	r3, [r7, #0]
 8015a08:	88db      	ldrh	r3, [r3, #6]
 8015a0a:	b2da      	uxtb	r2, r3
 8015a0c:	e000      	b.n	8015a10 <USBD_CDC_Setup+0xa8>
 8015a0e:	2240      	movs	r2, #64	; 0x40
 8015a10:	693b      	ldr	r3, [r7, #16]
 8015a12:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8015a16:	6939      	ldr	r1, [r7, #16]
 8015a18:	693b      	ldr	r3, [r7, #16]
 8015a1a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8015a1e:	461a      	mov	r2, r3
 8015a20:	6878      	ldr	r0, [r7, #4]
 8015a22:	f001 fd9b 	bl	801755c <USBD_CtlPrepareRx>
      break;
 8015a26:	e076      	b.n	8015b16 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015a2e:	687a      	ldr	r2, [r7, #4]
 8015a30:	33b0      	adds	r3, #176	; 0xb0
 8015a32:	009b      	lsls	r3, r3, #2
 8015a34:	4413      	add	r3, r2
 8015a36:	685b      	ldr	r3, [r3, #4]
 8015a38:	689b      	ldr	r3, [r3, #8]
 8015a3a:	683a      	ldr	r2, [r7, #0]
 8015a3c:	7850      	ldrb	r0, [r2, #1]
 8015a3e:	2200      	movs	r2, #0
 8015a40:	6839      	ldr	r1, [r7, #0]
 8015a42:	4798      	blx	r3
      break;
 8015a44:	e067      	b.n	8015b16 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015a46:	683b      	ldr	r3, [r7, #0]
 8015a48:	785b      	ldrb	r3, [r3, #1]
 8015a4a:	2b0b      	cmp	r3, #11
 8015a4c:	d851      	bhi.n	8015af2 <USBD_CDC_Setup+0x18a>
 8015a4e:	a201      	add	r2, pc, #4	; (adr r2, 8015a54 <USBD_CDC_Setup+0xec>)
 8015a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a54:	08015a85 	.word	0x08015a85
 8015a58:	08015b01 	.word	0x08015b01
 8015a5c:	08015af3 	.word	0x08015af3
 8015a60:	08015af3 	.word	0x08015af3
 8015a64:	08015af3 	.word	0x08015af3
 8015a68:	08015af3 	.word	0x08015af3
 8015a6c:	08015af3 	.word	0x08015af3
 8015a70:	08015af3 	.word	0x08015af3
 8015a74:	08015af3 	.word	0x08015af3
 8015a78:	08015af3 	.word	0x08015af3
 8015a7c:	08015aaf 	.word	0x08015aaf
 8015a80:	08015ad9 	.word	0x08015ad9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a8a:	b2db      	uxtb	r3, r3
 8015a8c:	2b03      	cmp	r3, #3
 8015a8e:	d107      	bne.n	8015aa0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015a90:	f107 030a 	add.w	r3, r7, #10
 8015a94:	2202      	movs	r2, #2
 8015a96:	4619      	mov	r1, r3
 8015a98:	6878      	ldr	r0, [r7, #4]
 8015a9a:	f001 fd33 	bl	8017504 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015a9e:	e032      	b.n	8015b06 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015aa0:	6839      	ldr	r1, [r7, #0]
 8015aa2:	6878      	ldr	r0, [r7, #4]
 8015aa4:	f001 fcbd 	bl	8017422 <USBD_CtlError>
            ret = USBD_FAIL;
 8015aa8:	2303      	movs	r3, #3
 8015aaa:	75fb      	strb	r3, [r7, #23]
          break;
 8015aac:	e02b      	b.n	8015b06 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ab4:	b2db      	uxtb	r3, r3
 8015ab6:	2b03      	cmp	r3, #3
 8015ab8:	d107      	bne.n	8015aca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015aba:	f107 030d 	add.w	r3, r7, #13
 8015abe:	2201      	movs	r2, #1
 8015ac0:	4619      	mov	r1, r3
 8015ac2:	6878      	ldr	r0, [r7, #4]
 8015ac4:	f001 fd1e 	bl	8017504 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015ac8:	e01d      	b.n	8015b06 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015aca:	6839      	ldr	r1, [r7, #0]
 8015acc:	6878      	ldr	r0, [r7, #4]
 8015ace:	f001 fca8 	bl	8017422 <USBD_CtlError>
            ret = USBD_FAIL;
 8015ad2:	2303      	movs	r3, #3
 8015ad4:	75fb      	strb	r3, [r7, #23]
          break;
 8015ad6:	e016      	b.n	8015b06 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ade:	b2db      	uxtb	r3, r3
 8015ae0:	2b03      	cmp	r3, #3
 8015ae2:	d00f      	beq.n	8015b04 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8015ae4:	6839      	ldr	r1, [r7, #0]
 8015ae6:	6878      	ldr	r0, [r7, #4]
 8015ae8:	f001 fc9b 	bl	8017422 <USBD_CtlError>
            ret = USBD_FAIL;
 8015aec:	2303      	movs	r3, #3
 8015aee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8015af0:	e008      	b.n	8015b04 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8015af2:	6839      	ldr	r1, [r7, #0]
 8015af4:	6878      	ldr	r0, [r7, #4]
 8015af6:	f001 fc94 	bl	8017422 <USBD_CtlError>
          ret = USBD_FAIL;
 8015afa:	2303      	movs	r3, #3
 8015afc:	75fb      	strb	r3, [r7, #23]
          break;
 8015afe:	e002      	b.n	8015b06 <USBD_CDC_Setup+0x19e>
          break;
 8015b00:	bf00      	nop
 8015b02:	e008      	b.n	8015b16 <USBD_CDC_Setup+0x1ae>
          break;
 8015b04:	bf00      	nop
      }
      break;
 8015b06:	e006      	b.n	8015b16 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8015b08:	6839      	ldr	r1, [r7, #0]
 8015b0a:	6878      	ldr	r0, [r7, #4]
 8015b0c:	f001 fc89 	bl	8017422 <USBD_CtlError>
      ret = USBD_FAIL;
 8015b10:	2303      	movs	r3, #3
 8015b12:	75fb      	strb	r3, [r7, #23]
      break;
 8015b14:	bf00      	nop
  }

  return (uint8_t)ret;
 8015b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8015b18:	4618      	mov	r0, r3
 8015b1a:	3718      	adds	r7, #24
 8015b1c:	46bd      	mov	sp, r7
 8015b1e:	bd80      	pop	{r7, pc}

08015b20 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015b20:	b580      	push	{r7, lr}
 8015b22:	b084      	sub	sp, #16
 8015b24:	af00      	add	r7, sp, #0
 8015b26:	6078      	str	r0, [r7, #4]
 8015b28:	460b      	mov	r3, r1
 8015b2a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015b32:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	32b0      	adds	r2, #176	; 0xb0
 8015b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d101      	bne.n	8015b4a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8015b46:	2303      	movs	r3, #3
 8015b48:	e065      	b.n	8015c16 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	32b0      	adds	r2, #176	; 0xb0
 8015b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b58:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015b5a:	78fb      	ldrb	r3, [r7, #3]
 8015b5c:	f003 020f 	and.w	r2, r3, #15
 8015b60:	6879      	ldr	r1, [r7, #4]
 8015b62:	4613      	mov	r3, r2
 8015b64:	009b      	lsls	r3, r3, #2
 8015b66:	4413      	add	r3, r2
 8015b68:	009b      	lsls	r3, r3, #2
 8015b6a:	440b      	add	r3, r1
 8015b6c:	3318      	adds	r3, #24
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d02f      	beq.n	8015bd4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015b74:	78fb      	ldrb	r3, [r7, #3]
 8015b76:	f003 020f 	and.w	r2, r3, #15
 8015b7a:	6879      	ldr	r1, [r7, #4]
 8015b7c:	4613      	mov	r3, r2
 8015b7e:	009b      	lsls	r3, r3, #2
 8015b80:	4413      	add	r3, r2
 8015b82:	009b      	lsls	r3, r3, #2
 8015b84:	440b      	add	r3, r1
 8015b86:	3318      	adds	r3, #24
 8015b88:	681a      	ldr	r2, [r3, #0]
 8015b8a:	78fb      	ldrb	r3, [r7, #3]
 8015b8c:	f003 010f 	and.w	r1, r3, #15
 8015b90:	68f8      	ldr	r0, [r7, #12]
 8015b92:	460b      	mov	r3, r1
 8015b94:	00db      	lsls	r3, r3, #3
 8015b96:	440b      	add	r3, r1
 8015b98:	009b      	lsls	r3, r3, #2
 8015b9a:	4403      	add	r3, r0
 8015b9c:	3344      	adds	r3, #68	; 0x44
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	fbb2 f1f3 	udiv	r1, r2, r3
 8015ba4:	fb01 f303 	mul.w	r3, r1, r3
 8015ba8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d112      	bne.n	8015bd4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015bae:	78fb      	ldrb	r3, [r7, #3]
 8015bb0:	f003 020f 	and.w	r2, r3, #15
 8015bb4:	6879      	ldr	r1, [r7, #4]
 8015bb6:	4613      	mov	r3, r2
 8015bb8:	009b      	lsls	r3, r3, #2
 8015bba:	4413      	add	r3, r2
 8015bbc:	009b      	lsls	r3, r3, #2
 8015bbe:	440b      	add	r3, r1
 8015bc0:	3318      	adds	r3, #24
 8015bc2:	2200      	movs	r2, #0
 8015bc4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015bc6:	78f9      	ldrb	r1, [r7, #3]
 8015bc8:	2300      	movs	r3, #0
 8015bca:	2200      	movs	r2, #0
 8015bcc:	6878      	ldr	r0, [r7, #4]
 8015bce:	f005 f978 	bl	801aec2 <USBD_LL_Transmit>
 8015bd2:	e01f      	b.n	8015c14 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8015bd4:	68bb      	ldr	r3, [r7, #8]
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015be2:	687a      	ldr	r2, [r7, #4]
 8015be4:	33b0      	adds	r3, #176	; 0xb0
 8015be6:	009b      	lsls	r3, r3, #2
 8015be8:	4413      	add	r3, r2
 8015bea:	685b      	ldr	r3, [r3, #4]
 8015bec:	691b      	ldr	r3, [r3, #16]
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d010      	beq.n	8015c14 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015bf8:	687a      	ldr	r2, [r7, #4]
 8015bfa:	33b0      	adds	r3, #176	; 0xb0
 8015bfc:	009b      	lsls	r3, r3, #2
 8015bfe:	4413      	add	r3, r2
 8015c00:	685b      	ldr	r3, [r3, #4]
 8015c02:	691b      	ldr	r3, [r3, #16]
 8015c04:	68ba      	ldr	r2, [r7, #8]
 8015c06:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8015c0a:	68ba      	ldr	r2, [r7, #8]
 8015c0c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8015c10:	78fa      	ldrb	r2, [r7, #3]
 8015c12:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8015c14:	2300      	movs	r3, #0
}
 8015c16:	4618      	mov	r0, r3
 8015c18:	3710      	adds	r7, #16
 8015c1a:	46bd      	mov	sp, r7
 8015c1c:	bd80      	pop	{r7, pc}

08015c1e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015c1e:	b580      	push	{r7, lr}
 8015c20:	b084      	sub	sp, #16
 8015c22:	af00      	add	r7, sp, #0
 8015c24:	6078      	str	r0, [r7, #4]
 8015c26:	460b      	mov	r3, r1
 8015c28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	32b0      	adds	r2, #176	; 0xb0
 8015c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c38:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	32b0      	adds	r2, #176	; 0xb0
 8015c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d101      	bne.n	8015c50 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8015c4c:	2303      	movs	r3, #3
 8015c4e:	e01a      	b.n	8015c86 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015c50:	78fb      	ldrb	r3, [r7, #3]
 8015c52:	4619      	mov	r1, r3
 8015c54:	6878      	ldr	r0, [r7, #4]
 8015c56:	f005 f976 	bl	801af46 <USBD_LL_GetRxDataSize>
 8015c5a:	4602      	mov	r2, r0
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015c68:	687a      	ldr	r2, [r7, #4]
 8015c6a:	33b0      	adds	r3, #176	; 0xb0
 8015c6c:	009b      	lsls	r3, r3, #2
 8015c6e:	4413      	add	r3, r2
 8015c70:	685b      	ldr	r3, [r3, #4]
 8015c72:	68db      	ldr	r3, [r3, #12]
 8015c74:	68fa      	ldr	r2, [r7, #12]
 8015c76:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8015c7a:	68fa      	ldr	r2, [r7, #12]
 8015c7c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8015c80:	4611      	mov	r1, r2
 8015c82:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8015c84:	2300      	movs	r3, #0
}
 8015c86:	4618      	mov	r0, r3
 8015c88:	3710      	adds	r7, #16
 8015c8a:	46bd      	mov	sp, r7
 8015c8c:	bd80      	pop	{r7, pc}

08015c8e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015c8e:	b580      	push	{r7, lr}
 8015c90:	b084      	sub	sp, #16
 8015c92:	af00      	add	r7, sp, #0
 8015c94:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	32b0      	adds	r2, #176	; 0xb0
 8015ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ca4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d101      	bne.n	8015cb0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015cac:	2303      	movs	r3, #3
 8015cae:	e025      	b.n	8015cfc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015cb6:	687a      	ldr	r2, [r7, #4]
 8015cb8:	33b0      	adds	r3, #176	; 0xb0
 8015cba:	009b      	lsls	r3, r3, #2
 8015cbc:	4413      	add	r3, r2
 8015cbe:	685b      	ldr	r3, [r3, #4]
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d01a      	beq.n	8015cfa <USBD_CDC_EP0_RxReady+0x6c>
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8015cca:	2bff      	cmp	r3, #255	; 0xff
 8015ccc:	d015      	beq.n	8015cfa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015cd4:	687a      	ldr	r2, [r7, #4]
 8015cd6:	33b0      	adds	r3, #176	; 0xb0
 8015cd8:	009b      	lsls	r3, r3, #2
 8015cda:	4413      	add	r3, r2
 8015cdc:	685b      	ldr	r3, [r3, #4]
 8015cde:	689b      	ldr	r3, [r3, #8]
 8015ce0:	68fa      	ldr	r2, [r7, #12]
 8015ce2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8015ce6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8015ce8:	68fa      	ldr	r2, [r7, #12]
 8015cea:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015cee:	b292      	uxth	r2, r2
 8015cf0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	22ff      	movs	r2, #255	; 0xff
 8015cf6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8015cfa:	2300      	movs	r3, #0
}
 8015cfc:	4618      	mov	r0, r3
 8015cfe:	3710      	adds	r7, #16
 8015d00:	46bd      	mov	sp, r7
 8015d02:	bd80      	pop	{r7, pc}

08015d04 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015d04:	b580      	push	{r7, lr}
 8015d06:	b086      	sub	sp, #24
 8015d08:	af00      	add	r7, sp, #0
 8015d0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015d0c:	2182      	movs	r1, #130	; 0x82
 8015d0e:	4818      	ldr	r0, [pc, #96]	; (8015d70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015d10:	f000 fd4f 	bl	80167b2 <USBD_GetEpDesc>
 8015d14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015d16:	2101      	movs	r1, #1
 8015d18:	4815      	ldr	r0, [pc, #84]	; (8015d70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015d1a:	f000 fd4a 	bl	80167b2 <USBD_GetEpDesc>
 8015d1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015d20:	2181      	movs	r1, #129	; 0x81
 8015d22:	4813      	ldr	r0, [pc, #76]	; (8015d70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015d24:	f000 fd45 	bl	80167b2 <USBD_GetEpDesc>
 8015d28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015d2a:	697b      	ldr	r3, [r7, #20]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d002      	beq.n	8015d36 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015d30:	697b      	ldr	r3, [r7, #20]
 8015d32:	2210      	movs	r2, #16
 8015d34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015d36:	693b      	ldr	r3, [r7, #16]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d006      	beq.n	8015d4a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015d3c:	693b      	ldr	r3, [r7, #16]
 8015d3e:	2200      	movs	r2, #0
 8015d40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015d44:	711a      	strb	r2, [r3, #4]
 8015d46:	2200      	movs	r2, #0
 8015d48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d006      	beq.n	8015d5e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	2200      	movs	r2, #0
 8015d54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015d58:	711a      	strb	r2, [r3, #4]
 8015d5a:	2200      	movs	r2, #0
 8015d5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	2243      	movs	r2, #67	; 0x43
 8015d62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015d64:	4b02      	ldr	r3, [pc, #8]	; (8015d70 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8015d66:	4618      	mov	r0, r3
 8015d68:	3718      	adds	r7, #24
 8015d6a:	46bd      	mov	sp, r7
 8015d6c:	bd80      	pop	{r7, pc}
 8015d6e:	bf00      	nop
 8015d70:	24000054 	.word	0x24000054

08015d74 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015d74:	b580      	push	{r7, lr}
 8015d76:	b086      	sub	sp, #24
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015d7c:	2182      	movs	r1, #130	; 0x82
 8015d7e:	4818      	ldr	r0, [pc, #96]	; (8015de0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015d80:	f000 fd17 	bl	80167b2 <USBD_GetEpDesc>
 8015d84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015d86:	2101      	movs	r1, #1
 8015d88:	4815      	ldr	r0, [pc, #84]	; (8015de0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015d8a:	f000 fd12 	bl	80167b2 <USBD_GetEpDesc>
 8015d8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015d90:	2181      	movs	r1, #129	; 0x81
 8015d92:	4813      	ldr	r0, [pc, #76]	; (8015de0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015d94:	f000 fd0d 	bl	80167b2 <USBD_GetEpDesc>
 8015d98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015d9a:	697b      	ldr	r3, [r7, #20]
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d002      	beq.n	8015da6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015da0:	697b      	ldr	r3, [r7, #20]
 8015da2:	2210      	movs	r2, #16
 8015da4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015da6:	693b      	ldr	r3, [r7, #16]
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d006      	beq.n	8015dba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015dac:	693b      	ldr	r3, [r7, #16]
 8015dae:	2200      	movs	r2, #0
 8015db0:	711a      	strb	r2, [r3, #4]
 8015db2:	2200      	movs	r2, #0
 8015db4:	f042 0202 	orr.w	r2, r2, #2
 8015db8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d006      	beq.n	8015dce <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	2200      	movs	r2, #0
 8015dc4:	711a      	strb	r2, [r3, #4]
 8015dc6:	2200      	movs	r2, #0
 8015dc8:	f042 0202 	orr.w	r2, r2, #2
 8015dcc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	2243      	movs	r2, #67	; 0x43
 8015dd2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015dd4:	4b02      	ldr	r3, [pc, #8]	; (8015de0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	3718      	adds	r7, #24
 8015dda:	46bd      	mov	sp, r7
 8015ddc:	bd80      	pop	{r7, pc}
 8015dde:	bf00      	nop
 8015de0:	24000054 	.word	0x24000054

08015de4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015de4:	b580      	push	{r7, lr}
 8015de6:	b086      	sub	sp, #24
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015dec:	2182      	movs	r1, #130	; 0x82
 8015dee:	4818      	ldr	r0, [pc, #96]	; (8015e50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015df0:	f000 fcdf 	bl	80167b2 <USBD_GetEpDesc>
 8015df4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015df6:	2101      	movs	r1, #1
 8015df8:	4815      	ldr	r0, [pc, #84]	; (8015e50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015dfa:	f000 fcda 	bl	80167b2 <USBD_GetEpDesc>
 8015dfe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015e00:	2181      	movs	r1, #129	; 0x81
 8015e02:	4813      	ldr	r0, [pc, #76]	; (8015e50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015e04:	f000 fcd5 	bl	80167b2 <USBD_GetEpDesc>
 8015e08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015e0a:	697b      	ldr	r3, [r7, #20]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d002      	beq.n	8015e16 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015e10:	697b      	ldr	r3, [r7, #20]
 8015e12:	2210      	movs	r2, #16
 8015e14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015e16:	693b      	ldr	r3, [r7, #16]
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d006      	beq.n	8015e2a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015e1c:	693b      	ldr	r3, [r7, #16]
 8015e1e:	2200      	movs	r2, #0
 8015e20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015e24:	711a      	strb	r2, [r3, #4]
 8015e26:	2200      	movs	r2, #0
 8015e28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d006      	beq.n	8015e3e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	2200      	movs	r2, #0
 8015e34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015e38:	711a      	strb	r2, [r3, #4]
 8015e3a:	2200      	movs	r2, #0
 8015e3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	2243      	movs	r2, #67	; 0x43
 8015e42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015e44:	4b02      	ldr	r3, [pc, #8]	; (8015e50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8015e46:	4618      	mov	r0, r3
 8015e48:	3718      	adds	r7, #24
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	bd80      	pop	{r7, pc}
 8015e4e:	bf00      	nop
 8015e50:	24000054 	.word	0x24000054

08015e54 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015e54:	b480      	push	{r7}
 8015e56:	b083      	sub	sp, #12
 8015e58:	af00      	add	r7, sp, #0
 8015e5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	220a      	movs	r2, #10
 8015e60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015e62:	4b03      	ldr	r3, [pc, #12]	; (8015e70 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015e64:	4618      	mov	r0, r3
 8015e66:	370c      	adds	r7, #12
 8015e68:	46bd      	mov	sp, r7
 8015e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e6e:	4770      	bx	lr
 8015e70:	24000010 	.word	0x24000010

08015e74 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015e74:	b480      	push	{r7}
 8015e76:	b083      	sub	sp, #12
 8015e78:	af00      	add	r7, sp, #0
 8015e7a:	6078      	str	r0, [r7, #4]
 8015e7c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8015e7e:	683b      	ldr	r3, [r7, #0]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d101      	bne.n	8015e88 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015e84:	2303      	movs	r3, #3
 8015e86:	e009      	b.n	8015e9c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015e8e:	687a      	ldr	r2, [r7, #4]
 8015e90:	33b0      	adds	r3, #176	; 0xb0
 8015e92:	009b      	lsls	r3, r3, #2
 8015e94:	4413      	add	r3, r2
 8015e96:	683a      	ldr	r2, [r7, #0]
 8015e98:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8015e9a:	2300      	movs	r3, #0
}
 8015e9c:	4618      	mov	r0, r3
 8015e9e:	370c      	adds	r7, #12
 8015ea0:	46bd      	mov	sp, r7
 8015ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea6:	4770      	bx	lr

08015ea8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015ea8:	b480      	push	{r7}
 8015eaa:	b087      	sub	sp, #28
 8015eac:	af00      	add	r7, sp, #0
 8015eae:	60f8      	str	r0, [r7, #12]
 8015eb0:	60b9      	str	r1, [r7, #8]
 8015eb2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	32b0      	adds	r2, #176	; 0xb0
 8015ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ec2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015ec4:	697b      	ldr	r3, [r7, #20]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d101      	bne.n	8015ece <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015eca:	2303      	movs	r3, #3
 8015ecc:	e008      	b.n	8015ee0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8015ece:	697b      	ldr	r3, [r7, #20]
 8015ed0:	68ba      	ldr	r2, [r7, #8]
 8015ed2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8015ed6:	697b      	ldr	r3, [r7, #20]
 8015ed8:	687a      	ldr	r2, [r7, #4]
 8015eda:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8015ede:	2300      	movs	r3, #0
}
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	371c      	adds	r7, #28
 8015ee4:	46bd      	mov	sp, r7
 8015ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eea:	4770      	bx	lr

08015eec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8015eec:	b480      	push	{r7}
 8015eee:	b085      	sub	sp, #20
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	6078      	str	r0, [r7, #4]
 8015ef4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	32b0      	adds	r2, #176	; 0xb0
 8015f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f04:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015f06:	68fb      	ldr	r3, [r7, #12]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d101      	bne.n	8015f10 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8015f0c:	2303      	movs	r3, #3
 8015f0e:	e004      	b.n	8015f1a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	683a      	ldr	r2, [r7, #0]
 8015f14:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8015f18:	2300      	movs	r3, #0
}
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	3714      	adds	r7, #20
 8015f1e:	46bd      	mov	sp, r7
 8015f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f24:	4770      	bx	lr
	...

08015f28 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8015f28:	b580      	push	{r7, lr}
 8015f2a:	b084      	sub	sp, #16
 8015f2c:	af00      	add	r7, sp, #0
 8015f2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	32b0      	adds	r2, #176	; 0xb0
 8015f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f3e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8015f40:	2301      	movs	r3, #1
 8015f42:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015f44:	68bb      	ldr	r3, [r7, #8]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d101      	bne.n	8015f4e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015f4a:	2303      	movs	r3, #3
 8015f4c:	e025      	b.n	8015f9a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8015f4e:	68bb      	ldr	r3, [r7, #8]
 8015f50:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d11f      	bne.n	8015f98 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8015f58:	68bb      	ldr	r3, [r7, #8]
 8015f5a:	2201      	movs	r2, #1
 8015f5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8015f60:	4b10      	ldr	r3, [pc, #64]	; (8015fa4 <USBD_CDC_TransmitPacket+0x7c>)
 8015f62:	781b      	ldrb	r3, [r3, #0]
 8015f64:	f003 020f 	and.w	r2, r3, #15
 8015f68:	68bb      	ldr	r3, [r7, #8]
 8015f6a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8015f6e:	6878      	ldr	r0, [r7, #4]
 8015f70:	4613      	mov	r3, r2
 8015f72:	009b      	lsls	r3, r3, #2
 8015f74:	4413      	add	r3, r2
 8015f76:	009b      	lsls	r3, r3, #2
 8015f78:	4403      	add	r3, r0
 8015f7a:	3318      	adds	r3, #24
 8015f7c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8015f7e:	4b09      	ldr	r3, [pc, #36]	; (8015fa4 <USBD_CDC_TransmitPacket+0x7c>)
 8015f80:	7819      	ldrb	r1, [r3, #0]
 8015f82:	68bb      	ldr	r3, [r7, #8]
 8015f84:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8015f88:	68bb      	ldr	r3, [r7, #8]
 8015f8a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8015f8e:	6878      	ldr	r0, [r7, #4]
 8015f90:	f004 ff97 	bl	801aec2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8015f94:	2300      	movs	r3, #0
 8015f96:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8015f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f9a:	4618      	mov	r0, r3
 8015f9c:	3710      	adds	r7, #16
 8015f9e:	46bd      	mov	sp, r7
 8015fa0:	bd80      	pop	{r7, pc}
 8015fa2:	bf00      	nop
 8015fa4:	24000097 	.word	0x24000097

08015fa8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015fa8:	b580      	push	{r7, lr}
 8015faa:	b084      	sub	sp, #16
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	32b0      	adds	r2, #176	; 0xb0
 8015fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fbe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	32b0      	adds	r2, #176	; 0xb0
 8015fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d101      	bne.n	8015fd6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8015fd2:	2303      	movs	r3, #3
 8015fd4:	e018      	b.n	8016008 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	7c1b      	ldrb	r3, [r3, #16]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d10a      	bne.n	8015ff4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015fde:	4b0c      	ldr	r3, [pc, #48]	; (8016010 <USBD_CDC_ReceivePacket+0x68>)
 8015fe0:	7819      	ldrb	r1, [r3, #0]
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015fe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015fec:	6878      	ldr	r0, [r7, #4]
 8015fee:	f004 ff89 	bl	801af04 <USBD_LL_PrepareReceive>
 8015ff2:	e008      	b.n	8016006 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015ff4:	4b06      	ldr	r3, [pc, #24]	; (8016010 <USBD_CDC_ReceivePacket+0x68>)
 8015ff6:	7819      	ldrb	r1, [r3, #0]
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015ffe:	2340      	movs	r3, #64	; 0x40
 8016000:	6878      	ldr	r0, [r7, #4]
 8016002:	f004 ff7f 	bl	801af04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016006:	2300      	movs	r3, #0
}
 8016008:	4618      	mov	r0, r3
 801600a:	3710      	adds	r7, #16
 801600c:	46bd      	mov	sp, r7
 801600e:	bd80      	pop	{r7, pc}
 8016010:	24000098 	.word	0x24000098

08016014 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8016014:	b580      	push	{r7, lr}
 8016016:	b086      	sub	sp, #24
 8016018:	af00      	add	r7, sp, #0
 801601a:	60f8      	str	r0, [r7, #12]
 801601c:	60b9      	str	r1, [r7, #8]
 801601e:	4613      	mov	r3, r2
 8016020:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8016022:	68fb      	ldr	r3, [r7, #12]
 8016024:	2b00      	cmp	r3, #0
 8016026:	d101      	bne.n	801602c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8016028:	2303      	movs	r3, #3
 801602a:	e01f      	b.n	801606c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	2200      	movs	r2, #0
 8016030:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	2200      	movs	r2, #0
 8016038:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	2200      	movs	r2, #0
 8016040:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8016044:	68bb      	ldr	r3, [r7, #8]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d003      	beq.n	8016052 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	68ba      	ldr	r2, [r7, #8]
 801604e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	2201      	movs	r2, #1
 8016056:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	79fa      	ldrb	r2, [r7, #7]
 801605e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8016060:	68f8      	ldr	r0, [r7, #12]
 8016062:	f004 fdf3 	bl	801ac4c <USBD_LL_Init>
 8016066:	4603      	mov	r3, r0
 8016068:	75fb      	strb	r3, [r7, #23]

  return ret;
 801606a:	7dfb      	ldrb	r3, [r7, #23]
}
 801606c:	4618      	mov	r0, r3
 801606e:	3718      	adds	r7, #24
 8016070:	46bd      	mov	sp, r7
 8016072:	bd80      	pop	{r7, pc}

08016074 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016074:	b580      	push	{r7, lr}
 8016076:	b084      	sub	sp, #16
 8016078:	af00      	add	r7, sp, #0
 801607a:	6078      	str	r0, [r7, #4]
 801607c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801607e:	2300      	movs	r3, #0
 8016080:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8016082:	683b      	ldr	r3, [r7, #0]
 8016084:	2b00      	cmp	r3, #0
 8016086:	d101      	bne.n	801608c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8016088:	2303      	movs	r3, #3
 801608a:	e025      	b.n	80160d8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	683a      	ldr	r2, [r7, #0]
 8016090:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	32ae      	adds	r2, #174	; 0xae
 801609e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d00f      	beq.n	80160c8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	32ae      	adds	r2, #174	; 0xae
 80160b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160b8:	f107 020e 	add.w	r2, r7, #14
 80160bc:	4610      	mov	r0, r2
 80160be:	4798      	blx	r3
 80160c0:	4602      	mov	r2, r0
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80160ce:	1c5a      	adds	r2, r3, #1
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80160d6:	2300      	movs	r3, #0
}
 80160d8:	4618      	mov	r0, r3
 80160da:	3710      	adds	r7, #16
 80160dc:	46bd      	mov	sp, r7
 80160de:	bd80      	pop	{r7, pc}

080160e0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80160e0:	b580      	push	{r7, lr}
 80160e2:	b082      	sub	sp, #8
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80160e8:	6878      	ldr	r0, [r7, #4]
 80160ea:	f004 fe01 	bl	801acf0 <USBD_LL_Start>
 80160ee:	4603      	mov	r3, r0
}
 80160f0:	4618      	mov	r0, r3
 80160f2:	3708      	adds	r7, #8
 80160f4:	46bd      	mov	sp, r7
 80160f6:	bd80      	pop	{r7, pc}

080160f8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80160f8:	b480      	push	{r7}
 80160fa:	b083      	sub	sp, #12
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016100:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8016102:	4618      	mov	r0, r3
 8016104:	370c      	adds	r7, #12
 8016106:	46bd      	mov	sp, r7
 8016108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801610c:	4770      	bx	lr

0801610e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801610e:	b580      	push	{r7, lr}
 8016110:	b084      	sub	sp, #16
 8016112:	af00      	add	r7, sp, #0
 8016114:	6078      	str	r0, [r7, #4]
 8016116:	460b      	mov	r3, r1
 8016118:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801611a:	2300      	movs	r3, #0
 801611c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016124:	2b00      	cmp	r3, #0
 8016126:	d009      	beq.n	801613c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	78fa      	ldrb	r2, [r7, #3]
 8016132:	4611      	mov	r1, r2
 8016134:	6878      	ldr	r0, [r7, #4]
 8016136:	4798      	blx	r3
 8016138:	4603      	mov	r3, r0
 801613a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801613c:	7bfb      	ldrb	r3, [r7, #15]
}
 801613e:	4618      	mov	r0, r3
 8016140:	3710      	adds	r7, #16
 8016142:	46bd      	mov	sp, r7
 8016144:	bd80      	pop	{r7, pc}

08016146 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016146:	b580      	push	{r7, lr}
 8016148:	b084      	sub	sp, #16
 801614a:	af00      	add	r7, sp, #0
 801614c:	6078      	str	r0, [r7, #4]
 801614e:	460b      	mov	r3, r1
 8016150:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8016152:	2300      	movs	r3, #0
 8016154:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801615c:	685b      	ldr	r3, [r3, #4]
 801615e:	78fa      	ldrb	r2, [r7, #3]
 8016160:	4611      	mov	r1, r2
 8016162:	6878      	ldr	r0, [r7, #4]
 8016164:	4798      	blx	r3
 8016166:	4603      	mov	r3, r0
 8016168:	2b00      	cmp	r3, #0
 801616a:	d001      	beq.n	8016170 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801616c:	2303      	movs	r3, #3
 801616e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016170:	7bfb      	ldrb	r3, [r7, #15]
}
 8016172:	4618      	mov	r0, r3
 8016174:	3710      	adds	r7, #16
 8016176:	46bd      	mov	sp, r7
 8016178:	bd80      	pop	{r7, pc}

0801617a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801617a:	b580      	push	{r7, lr}
 801617c:	b084      	sub	sp, #16
 801617e:	af00      	add	r7, sp, #0
 8016180:	6078      	str	r0, [r7, #4]
 8016182:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801618a:	6839      	ldr	r1, [r7, #0]
 801618c:	4618      	mov	r0, r3
 801618e:	f001 f90e 	bl	80173ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	2201      	movs	r2, #1
 8016196:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80161a0:	461a      	mov	r2, r3
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80161ae:	f003 031f 	and.w	r3, r3, #31
 80161b2:	2b02      	cmp	r3, #2
 80161b4:	d01a      	beq.n	80161ec <USBD_LL_SetupStage+0x72>
 80161b6:	2b02      	cmp	r3, #2
 80161b8:	d822      	bhi.n	8016200 <USBD_LL_SetupStage+0x86>
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d002      	beq.n	80161c4 <USBD_LL_SetupStage+0x4a>
 80161be:	2b01      	cmp	r3, #1
 80161c0:	d00a      	beq.n	80161d8 <USBD_LL_SetupStage+0x5e>
 80161c2:	e01d      	b.n	8016200 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80161ca:	4619      	mov	r1, r3
 80161cc:	6878      	ldr	r0, [r7, #4]
 80161ce:	f000 fb65 	bl	801689c <USBD_StdDevReq>
 80161d2:	4603      	mov	r3, r0
 80161d4:	73fb      	strb	r3, [r7, #15]
      break;
 80161d6:	e020      	b.n	801621a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80161de:	4619      	mov	r1, r3
 80161e0:	6878      	ldr	r0, [r7, #4]
 80161e2:	f000 fbcd 	bl	8016980 <USBD_StdItfReq>
 80161e6:	4603      	mov	r3, r0
 80161e8:	73fb      	strb	r3, [r7, #15]
      break;
 80161ea:	e016      	b.n	801621a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80161f2:	4619      	mov	r1, r3
 80161f4:	6878      	ldr	r0, [r7, #4]
 80161f6:	f000 fc2f 	bl	8016a58 <USBD_StdEPReq>
 80161fa:	4603      	mov	r3, r0
 80161fc:	73fb      	strb	r3, [r7, #15]
      break;
 80161fe:	e00c      	b.n	801621a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8016206:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801620a:	b2db      	uxtb	r3, r3
 801620c:	4619      	mov	r1, r3
 801620e:	6878      	ldr	r0, [r7, #4]
 8016210:	f004 fdce 	bl	801adb0 <USBD_LL_StallEP>
 8016214:	4603      	mov	r3, r0
 8016216:	73fb      	strb	r3, [r7, #15]
      break;
 8016218:	bf00      	nop
  }

  return ret;
 801621a:	7bfb      	ldrb	r3, [r7, #15]
}
 801621c:	4618      	mov	r0, r3
 801621e:	3710      	adds	r7, #16
 8016220:	46bd      	mov	sp, r7
 8016222:	bd80      	pop	{r7, pc}

08016224 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8016224:	b580      	push	{r7, lr}
 8016226:	b086      	sub	sp, #24
 8016228:	af00      	add	r7, sp, #0
 801622a:	60f8      	str	r0, [r7, #12]
 801622c:	460b      	mov	r3, r1
 801622e:	607a      	str	r2, [r7, #4]
 8016230:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8016232:	2300      	movs	r3, #0
 8016234:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8016236:	7afb      	ldrb	r3, [r7, #11]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d16e      	bne.n	801631a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8016242:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801624a:	2b03      	cmp	r3, #3
 801624c:	f040 8098 	bne.w	8016380 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8016250:	693b      	ldr	r3, [r7, #16]
 8016252:	689a      	ldr	r2, [r3, #8]
 8016254:	693b      	ldr	r3, [r7, #16]
 8016256:	68db      	ldr	r3, [r3, #12]
 8016258:	429a      	cmp	r2, r3
 801625a:	d913      	bls.n	8016284 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801625c:	693b      	ldr	r3, [r7, #16]
 801625e:	689a      	ldr	r2, [r3, #8]
 8016260:	693b      	ldr	r3, [r7, #16]
 8016262:	68db      	ldr	r3, [r3, #12]
 8016264:	1ad2      	subs	r2, r2, r3
 8016266:	693b      	ldr	r3, [r7, #16]
 8016268:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801626a:	693b      	ldr	r3, [r7, #16]
 801626c:	68da      	ldr	r2, [r3, #12]
 801626e:	693b      	ldr	r3, [r7, #16]
 8016270:	689b      	ldr	r3, [r3, #8]
 8016272:	4293      	cmp	r3, r2
 8016274:	bf28      	it	cs
 8016276:	4613      	movcs	r3, r2
 8016278:	461a      	mov	r2, r3
 801627a:	6879      	ldr	r1, [r7, #4]
 801627c:	68f8      	ldr	r0, [r7, #12]
 801627e:	f001 f98a 	bl	8017596 <USBD_CtlContinueRx>
 8016282:	e07d      	b.n	8016380 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8016284:	68fb      	ldr	r3, [r7, #12]
 8016286:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801628a:	f003 031f 	and.w	r3, r3, #31
 801628e:	2b02      	cmp	r3, #2
 8016290:	d014      	beq.n	80162bc <USBD_LL_DataOutStage+0x98>
 8016292:	2b02      	cmp	r3, #2
 8016294:	d81d      	bhi.n	80162d2 <USBD_LL_DataOutStage+0xae>
 8016296:	2b00      	cmp	r3, #0
 8016298:	d002      	beq.n	80162a0 <USBD_LL_DataOutStage+0x7c>
 801629a:	2b01      	cmp	r3, #1
 801629c:	d003      	beq.n	80162a6 <USBD_LL_DataOutStage+0x82>
 801629e:	e018      	b.n	80162d2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80162a0:	2300      	movs	r3, #0
 80162a2:	75bb      	strb	r3, [r7, #22]
            break;
 80162a4:	e018      	b.n	80162d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80162a6:	68fb      	ldr	r3, [r7, #12]
 80162a8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80162ac:	b2db      	uxtb	r3, r3
 80162ae:	4619      	mov	r1, r3
 80162b0:	68f8      	ldr	r0, [r7, #12]
 80162b2:	f000 fa64 	bl	801677e <USBD_CoreFindIF>
 80162b6:	4603      	mov	r3, r0
 80162b8:	75bb      	strb	r3, [r7, #22]
            break;
 80162ba:	e00d      	b.n	80162d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80162c2:	b2db      	uxtb	r3, r3
 80162c4:	4619      	mov	r1, r3
 80162c6:	68f8      	ldr	r0, [r7, #12]
 80162c8:	f000 fa66 	bl	8016798 <USBD_CoreFindEP>
 80162cc:	4603      	mov	r3, r0
 80162ce:	75bb      	strb	r3, [r7, #22]
            break;
 80162d0:	e002      	b.n	80162d8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80162d2:	2300      	movs	r3, #0
 80162d4:	75bb      	strb	r3, [r7, #22]
            break;
 80162d6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80162d8:	7dbb      	ldrb	r3, [r7, #22]
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d119      	bne.n	8016312 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80162e4:	b2db      	uxtb	r3, r3
 80162e6:	2b03      	cmp	r3, #3
 80162e8:	d113      	bne.n	8016312 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80162ea:	7dba      	ldrb	r2, [r7, #22]
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	32ae      	adds	r2, #174	; 0xae
 80162f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80162f4:	691b      	ldr	r3, [r3, #16]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d00b      	beq.n	8016312 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80162fa:	7dba      	ldrb	r2, [r7, #22]
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8016302:	7dba      	ldrb	r2, [r7, #22]
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	32ae      	adds	r2, #174	; 0xae
 8016308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801630c:	691b      	ldr	r3, [r3, #16]
 801630e:	68f8      	ldr	r0, [r7, #12]
 8016310:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8016312:	68f8      	ldr	r0, [r7, #12]
 8016314:	f001 f950 	bl	80175b8 <USBD_CtlSendStatus>
 8016318:	e032      	b.n	8016380 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801631a:	7afb      	ldrb	r3, [r7, #11]
 801631c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016320:	b2db      	uxtb	r3, r3
 8016322:	4619      	mov	r1, r3
 8016324:	68f8      	ldr	r0, [r7, #12]
 8016326:	f000 fa37 	bl	8016798 <USBD_CoreFindEP>
 801632a:	4603      	mov	r3, r0
 801632c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801632e:	7dbb      	ldrb	r3, [r7, #22]
 8016330:	2bff      	cmp	r3, #255	; 0xff
 8016332:	d025      	beq.n	8016380 <USBD_LL_DataOutStage+0x15c>
 8016334:	7dbb      	ldrb	r3, [r7, #22]
 8016336:	2b00      	cmp	r3, #0
 8016338:	d122      	bne.n	8016380 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016340:	b2db      	uxtb	r3, r3
 8016342:	2b03      	cmp	r3, #3
 8016344:	d117      	bne.n	8016376 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8016346:	7dba      	ldrb	r2, [r7, #22]
 8016348:	68fb      	ldr	r3, [r7, #12]
 801634a:	32ae      	adds	r2, #174	; 0xae
 801634c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016350:	699b      	ldr	r3, [r3, #24]
 8016352:	2b00      	cmp	r3, #0
 8016354:	d00f      	beq.n	8016376 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8016356:	7dba      	ldrb	r2, [r7, #22]
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801635e:	7dba      	ldrb	r2, [r7, #22]
 8016360:	68fb      	ldr	r3, [r7, #12]
 8016362:	32ae      	adds	r2, #174	; 0xae
 8016364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016368:	699b      	ldr	r3, [r3, #24]
 801636a:	7afa      	ldrb	r2, [r7, #11]
 801636c:	4611      	mov	r1, r2
 801636e:	68f8      	ldr	r0, [r7, #12]
 8016370:	4798      	blx	r3
 8016372:	4603      	mov	r3, r0
 8016374:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8016376:	7dfb      	ldrb	r3, [r7, #23]
 8016378:	2b00      	cmp	r3, #0
 801637a:	d001      	beq.n	8016380 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801637c:	7dfb      	ldrb	r3, [r7, #23]
 801637e:	e000      	b.n	8016382 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8016380:	2300      	movs	r3, #0
}
 8016382:	4618      	mov	r0, r3
 8016384:	3718      	adds	r7, #24
 8016386:	46bd      	mov	sp, r7
 8016388:	bd80      	pop	{r7, pc}

0801638a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801638a:	b580      	push	{r7, lr}
 801638c:	b086      	sub	sp, #24
 801638e:	af00      	add	r7, sp, #0
 8016390:	60f8      	str	r0, [r7, #12]
 8016392:	460b      	mov	r3, r1
 8016394:	607a      	str	r2, [r7, #4]
 8016396:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8016398:	7afb      	ldrb	r3, [r7, #11]
 801639a:	2b00      	cmp	r3, #0
 801639c:	d16f      	bne.n	801647e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801639e:	68fb      	ldr	r3, [r7, #12]
 80163a0:	3314      	adds	r3, #20
 80163a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80163aa:	2b02      	cmp	r3, #2
 80163ac:	d15a      	bne.n	8016464 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80163ae:	693b      	ldr	r3, [r7, #16]
 80163b0:	689a      	ldr	r2, [r3, #8]
 80163b2:	693b      	ldr	r3, [r7, #16]
 80163b4:	68db      	ldr	r3, [r3, #12]
 80163b6:	429a      	cmp	r2, r3
 80163b8:	d914      	bls.n	80163e4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80163ba:	693b      	ldr	r3, [r7, #16]
 80163bc:	689a      	ldr	r2, [r3, #8]
 80163be:	693b      	ldr	r3, [r7, #16]
 80163c0:	68db      	ldr	r3, [r3, #12]
 80163c2:	1ad2      	subs	r2, r2, r3
 80163c4:	693b      	ldr	r3, [r7, #16]
 80163c6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80163c8:	693b      	ldr	r3, [r7, #16]
 80163ca:	689b      	ldr	r3, [r3, #8]
 80163cc:	461a      	mov	r2, r3
 80163ce:	6879      	ldr	r1, [r7, #4]
 80163d0:	68f8      	ldr	r0, [r7, #12]
 80163d2:	f001 f8b2 	bl	801753a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80163d6:	2300      	movs	r3, #0
 80163d8:	2200      	movs	r2, #0
 80163da:	2100      	movs	r1, #0
 80163dc:	68f8      	ldr	r0, [r7, #12]
 80163de:	f004 fd91 	bl	801af04 <USBD_LL_PrepareReceive>
 80163e2:	e03f      	b.n	8016464 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80163e4:	693b      	ldr	r3, [r7, #16]
 80163e6:	68da      	ldr	r2, [r3, #12]
 80163e8:	693b      	ldr	r3, [r7, #16]
 80163ea:	689b      	ldr	r3, [r3, #8]
 80163ec:	429a      	cmp	r2, r3
 80163ee:	d11c      	bne.n	801642a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80163f0:	693b      	ldr	r3, [r7, #16]
 80163f2:	685a      	ldr	r2, [r3, #4]
 80163f4:	693b      	ldr	r3, [r7, #16]
 80163f6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80163f8:	429a      	cmp	r2, r3
 80163fa:	d316      	bcc.n	801642a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80163fc:	693b      	ldr	r3, [r7, #16]
 80163fe:	685a      	ldr	r2, [r3, #4]
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8016406:	429a      	cmp	r2, r3
 8016408:	d20f      	bcs.n	801642a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801640a:	2200      	movs	r2, #0
 801640c:	2100      	movs	r1, #0
 801640e:	68f8      	ldr	r0, [r7, #12]
 8016410:	f001 f893 	bl	801753a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	2200      	movs	r2, #0
 8016418:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801641c:	2300      	movs	r3, #0
 801641e:	2200      	movs	r2, #0
 8016420:	2100      	movs	r1, #0
 8016422:	68f8      	ldr	r0, [r7, #12]
 8016424:	f004 fd6e 	bl	801af04 <USBD_LL_PrepareReceive>
 8016428:	e01c      	b.n	8016464 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016430:	b2db      	uxtb	r3, r3
 8016432:	2b03      	cmp	r3, #3
 8016434:	d10f      	bne.n	8016456 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801643c:	68db      	ldr	r3, [r3, #12]
 801643e:	2b00      	cmp	r3, #0
 8016440:	d009      	beq.n	8016456 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	2200      	movs	r2, #0
 8016446:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801644a:	68fb      	ldr	r3, [r7, #12]
 801644c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016450:	68db      	ldr	r3, [r3, #12]
 8016452:	68f8      	ldr	r0, [r7, #12]
 8016454:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8016456:	2180      	movs	r1, #128	; 0x80
 8016458:	68f8      	ldr	r0, [r7, #12]
 801645a:	f004 fca9 	bl	801adb0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801645e:	68f8      	ldr	r0, [r7, #12]
 8016460:	f001 f8bd 	bl	80175de <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801646a:	2b00      	cmp	r3, #0
 801646c:	d03a      	beq.n	80164e4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801646e:	68f8      	ldr	r0, [r7, #12]
 8016470:	f7ff fe42 	bl	80160f8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	2200      	movs	r2, #0
 8016478:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801647c:	e032      	b.n	80164e4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801647e:	7afb      	ldrb	r3, [r7, #11]
 8016480:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016484:	b2db      	uxtb	r3, r3
 8016486:	4619      	mov	r1, r3
 8016488:	68f8      	ldr	r0, [r7, #12]
 801648a:	f000 f985 	bl	8016798 <USBD_CoreFindEP>
 801648e:	4603      	mov	r3, r0
 8016490:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016492:	7dfb      	ldrb	r3, [r7, #23]
 8016494:	2bff      	cmp	r3, #255	; 0xff
 8016496:	d025      	beq.n	80164e4 <USBD_LL_DataInStage+0x15a>
 8016498:	7dfb      	ldrb	r3, [r7, #23]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d122      	bne.n	80164e4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80164a4:	b2db      	uxtb	r3, r3
 80164a6:	2b03      	cmp	r3, #3
 80164a8:	d11c      	bne.n	80164e4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80164aa:	7dfa      	ldrb	r2, [r7, #23]
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	32ae      	adds	r2, #174	; 0xae
 80164b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164b4:	695b      	ldr	r3, [r3, #20]
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d014      	beq.n	80164e4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80164ba:	7dfa      	ldrb	r2, [r7, #23]
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80164c2:	7dfa      	ldrb	r2, [r7, #23]
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	32ae      	adds	r2, #174	; 0xae
 80164c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164cc:	695b      	ldr	r3, [r3, #20]
 80164ce:	7afa      	ldrb	r2, [r7, #11]
 80164d0:	4611      	mov	r1, r2
 80164d2:	68f8      	ldr	r0, [r7, #12]
 80164d4:	4798      	blx	r3
 80164d6:	4603      	mov	r3, r0
 80164d8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80164da:	7dbb      	ldrb	r3, [r7, #22]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d001      	beq.n	80164e4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80164e0:	7dbb      	ldrb	r3, [r7, #22]
 80164e2:	e000      	b.n	80164e6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80164e4:	2300      	movs	r3, #0
}
 80164e6:	4618      	mov	r0, r3
 80164e8:	3718      	adds	r7, #24
 80164ea:	46bd      	mov	sp, r7
 80164ec:	bd80      	pop	{r7, pc}

080164ee <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80164ee:	b580      	push	{r7, lr}
 80164f0:	b084      	sub	sp, #16
 80164f2:	af00      	add	r7, sp, #0
 80164f4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80164f6:	2300      	movs	r3, #0
 80164f8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	2201      	movs	r2, #1
 80164fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	2200      	movs	r2, #0
 8016506:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	2200      	movs	r2, #0
 801650e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	2200      	movs	r2, #0
 8016514:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	2200      	movs	r2, #0
 801651c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016526:	2b00      	cmp	r3, #0
 8016528:	d014      	beq.n	8016554 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016530:	685b      	ldr	r3, [r3, #4]
 8016532:	2b00      	cmp	r3, #0
 8016534:	d00e      	beq.n	8016554 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801653c:	685b      	ldr	r3, [r3, #4]
 801653e:	687a      	ldr	r2, [r7, #4]
 8016540:	6852      	ldr	r2, [r2, #4]
 8016542:	b2d2      	uxtb	r2, r2
 8016544:	4611      	mov	r1, r2
 8016546:	6878      	ldr	r0, [r7, #4]
 8016548:	4798      	blx	r3
 801654a:	4603      	mov	r3, r0
 801654c:	2b00      	cmp	r3, #0
 801654e:	d001      	beq.n	8016554 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8016550:	2303      	movs	r3, #3
 8016552:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016554:	2340      	movs	r3, #64	; 0x40
 8016556:	2200      	movs	r2, #0
 8016558:	2100      	movs	r1, #0
 801655a:	6878      	ldr	r0, [r7, #4]
 801655c:	f004 fbe3 	bl	801ad26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	2201      	movs	r2, #1
 8016564:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	2240      	movs	r2, #64	; 0x40
 801656c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016570:	2340      	movs	r3, #64	; 0x40
 8016572:	2200      	movs	r2, #0
 8016574:	2180      	movs	r1, #128	; 0x80
 8016576:	6878      	ldr	r0, [r7, #4]
 8016578:	f004 fbd5 	bl	801ad26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	2201      	movs	r2, #1
 8016580:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	2240      	movs	r2, #64	; 0x40
 8016586:	621a      	str	r2, [r3, #32]

  return ret;
 8016588:	7bfb      	ldrb	r3, [r7, #15]
}
 801658a:	4618      	mov	r0, r3
 801658c:	3710      	adds	r7, #16
 801658e:	46bd      	mov	sp, r7
 8016590:	bd80      	pop	{r7, pc}

08016592 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016592:	b480      	push	{r7}
 8016594:	b083      	sub	sp, #12
 8016596:	af00      	add	r7, sp, #0
 8016598:	6078      	str	r0, [r7, #4]
 801659a:	460b      	mov	r3, r1
 801659c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	78fa      	ldrb	r2, [r7, #3]
 80165a2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80165a4:	2300      	movs	r3, #0
}
 80165a6:	4618      	mov	r0, r3
 80165a8:	370c      	adds	r7, #12
 80165aa:	46bd      	mov	sp, r7
 80165ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b0:	4770      	bx	lr

080165b2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80165b2:	b480      	push	{r7}
 80165b4:	b083      	sub	sp, #12
 80165b6:	af00      	add	r7, sp, #0
 80165b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80165c0:	b2db      	uxtb	r3, r3
 80165c2:	2b04      	cmp	r3, #4
 80165c4:	d006      	beq.n	80165d4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80165cc:	b2da      	uxtb	r2, r3
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	2204      	movs	r2, #4
 80165d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80165dc:	2300      	movs	r3, #0
}
 80165de:	4618      	mov	r0, r3
 80165e0:	370c      	adds	r7, #12
 80165e2:	46bd      	mov	sp, r7
 80165e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165e8:	4770      	bx	lr

080165ea <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80165ea:	b480      	push	{r7}
 80165ec:	b083      	sub	sp, #12
 80165ee:	af00      	add	r7, sp, #0
 80165f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80165f8:	b2db      	uxtb	r3, r3
 80165fa:	2b04      	cmp	r3, #4
 80165fc:	d106      	bne.n	801660c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8016604:	b2da      	uxtb	r2, r3
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801660c:	2300      	movs	r3, #0
}
 801660e:	4618      	mov	r0, r3
 8016610:	370c      	adds	r7, #12
 8016612:	46bd      	mov	sp, r7
 8016614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016618:	4770      	bx	lr

0801661a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801661a:	b580      	push	{r7, lr}
 801661c:	b082      	sub	sp, #8
 801661e:	af00      	add	r7, sp, #0
 8016620:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016628:	b2db      	uxtb	r3, r3
 801662a:	2b03      	cmp	r3, #3
 801662c:	d110      	bne.n	8016650 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016634:	2b00      	cmp	r3, #0
 8016636:	d00b      	beq.n	8016650 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801663e:	69db      	ldr	r3, [r3, #28]
 8016640:	2b00      	cmp	r3, #0
 8016642:	d005      	beq.n	8016650 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801664a:	69db      	ldr	r3, [r3, #28]
 801664c:	6878      	ldr	r0, [r7, #4]
 801664e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8016650:	2300      	movs	r3, #0
}
 8016652:	4618      	mov	r0, r3
 8016654:	3708      	adds	r7, #8
 8016656:	46bd      	mov	sp, r7
 8016658:	bd80      	pop	{r7, pc}

0801665a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801665a:	b580      	push	{r7, lr}
 801665c:	b082      	sub	sp, #8
 801665e:	af00      	add	r7, sp, #0
 8016660:	6078      	str	r0, [r7, #4]
 8016662:	460b      	mov	r3, r1
 8016664:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	32ae      	adds	r2, #174	; 0xae
 8016670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016674:	2b00      	cmp	r3, #0
 8016676:	d101      	bne.n	801667c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8016678:	2303      	movs	r3, #3
 801667a:	e01c      	b.n	80166b6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016682:	b2db      	uxtb	r3, r3
 8016684:	2b03      	cmp	r3, #3
 8016686:	d115      	bne.n	80166b4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	32ae      	adds	r2, #174	; 0xae
 8016692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016696:	6a1b      	ldr	r3, [r3, #32]
 8016698:	2b00      	cmp	r3, #0
 801669a:	d00b      	beq.n	80166b4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	32ae      	adds	r2, #174	; 0xae
 80166a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80166aa:	6a1b      	ldr	r3, [r3, #32]
 80166ac:	78fa      	ldrb	r2, [r7, #3]
 80166ae:	4611      	mov	r1, r2
 80166b0:	6878      	ldr	r0, [r7, #4]
 80166b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80166b4:	2300      	movs	r3, #0
}
 80166b6:	4618      	mov	r0, r3
 80166b8:	3708      	adds	r7, #8
 80166ba:	46bd      	mov	sp, r7
 80166bc:	bd80      	pop	{r7, pc}

080166be <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80166be:	b580      	push	{r7, lr}
 80166c0:	b082      	sub	sp, #8
 80166c2:	af00      	add	r7, sp, #0
 80166c4:	6078      	str	r0, [r7, #4]
 80166c6:	460b      	mov	r3, r1
 80166c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	32ae      	adds	r2, #174	; 0xae
 80166d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d101      	bne.n	80166e0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80166dc:	2303      	movs	r3, #3
 80166de:	e01c      	b.n	801671a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80166e6:	b2db      	uxtb	r3, r3
 80166e8:	2b03      	cmp	r3, #3
 80166ea:	d115      	bne.n	8016718 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	32ae      	adds	r2, #174	; 0xae
 80166f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80166fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d00b      	beq.n	8016718 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	32ae      	adds	r2, #174	; 0xae
 801670a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801670e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016710:	78fa      	ldrb	r2, [r7, #3]
 8016712:	4611      	mov	r1, r2
 8016714:	6878      	ldr	r0, [r7, #4]
 8016716:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016718:	2300      	movs	r3, #0
}
 801671a:	4618      	mov	r0, r3
 801671c:	3708      	adds	r7, #8
 801671e:	46bd      	mov	sp, r7
 8016720:	bd80      	pop	{r7, pc}

08016722 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8016722:	b480      	push	{r7}
 8016724:	b083      	sub	sp, #12
 8016726:	af00      	add	r7, sp, #0
 8016728:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801672a:	2300      	movs	r3, #0
}
 801672c:	4618      	mov	r0, r3
 801672e:	370c      	adds	r7, #12
 8016730:	46bd      	mov	sp, r7
 8016732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016736:	4770      	bx	lr

08016738 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8016738:	b580      	push	{r7, lr}
 801673a:	b084      	sub	sp, #16
 801673c:	af00      	add	r7, sp, #0
 801673e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8016740:	2300      	movs	r3, #0
 8016742:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	2201      	movs	r2, #1
 8016748:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016752:	2b00      	cmp	r3, #0
 8016754:	d00e      	beq.n	8016774 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801675c:	685b      	ldr	r3, [r3, #4]
 801675e:	687a      	ldr	r2, [r7, #4]
 8016760:	6852      	ldr	r2, [r2, #4]
 8016762:	b2d2      	uxtb	r2, r2
 8016764:	4611      	mov	r1, r2
 8016766:	6878      	ldr	r0, [r7, #4]
 8016768:	4798      	blx	r3
 801676a:	4603      	mov	r3, r0
 801676c:	2b00      	cmp	r3, #0
 801676e:	d001      	beq.n	8016774 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8016770:	2303      	movs	r3, #3
 8016772:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016774:	7bfb      	ldrb	r3, [r7, #15]
}
 8016776:	4618      	mov	r0, r3
 8016778:	3710      	adds	r7, #16
 801677a:	46bd      	mov	sp, r7
 801677c:	bd80      	pop	{r7, pc}

0801677e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801677e:	b480      	push	{r7}
 8016780:	b083      	sub	sp, #12
 8016782:	af00      	add	r7, sp, #0
 8016784:	6078      	str	r0, [r7, #4]
 8016786:	460b      	mov	r3, r1
 8016788:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801678a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801678c:	4618      	mov	r0, r3
 801678e:	370c      	adds	r7, #12
 8016790:	46bd      	mov	sp, r7
 8016792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016796:	4770      	bx	lr

08016798 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016798:	b480      	push	{r7}
 801679a:	b083      	sub	sp, #12
 801679c:	af00      	add	r7, sp, #0
 801679e:	6078      	str	r0, [r7, #4]
 80167a0:	460b      	mov	r3, r1
 80167a2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80167a4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80167a6:	4618      	mov	r0, r3
 80167a8:	370c      	adds	r7, #12
 80167aa:	46bd      	mov	sp, r7
 80167ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167b0:	4770      	bx	lr

080167b2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80167b2:	b580      	push	{r7, lr}
 80167b4:	b086      	sub	sp, #24
 80167b6:	af00      	add	r7, sp, #0
 80167b8:	6078      	str	r0, [r7, #4]
 80167ba:	460b      	mov	r3, r1
 80167bc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80167c6:	2300      	movs	r3, #0
 80167c8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	885b      	ldrh	r3, [r3, #2]
 80167ce:	b29a      	uxth	r2, r3
 80167d0:	68fb      	ldr	r3, [r7, #12]
 80167d2:	781b      	ldrb	r3, [r3, #0]
 80167d4:	b29b      	uxth	r3, r3
 80167d6:	429a      	cmp	r2, r3
 80167d8:	d920      	bls.n	801681c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	781b      	ldrb	r3, [r3, #0]
 80167de:	b29b      	uxth	r3, r3
 80167e0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80167e2:	e013      	b.n	801680c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80167e4:	f107 030a 	add.w	r3, r7, #10
 80167e8:	4619      	mov	r1, r3
 80167ea:	6978      	ldr	r0, [r7, #20]
 80167ec:	f000 f81b 	bl	8016826 <USBD_GetNextDesc>
 80167f0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80167f2:	697b      	ldr	r3, [r7, #20]
 80167f4:	785b      	ldrb	r3, [r3, #1]
 80167f6:	2b05      	cmp	r3, #5
 80167f8:	d108      	bne.n	801680c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80167fa:	697b      	ldr	r3, [r7, #20]
 80167fc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80167fe:	693b      	ldr	r3, [r7, #16]
 8016800:	789b      	ldrb	r3, [r3, #2]
 8016802:	78fa      	ldrb	r2, [r7, #3]
 8016804:	429a      	cmp	r2, r3
 8016806:	d008      	beq.n	801681a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8016808:	2300      	movs	r3, #0
 801680a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	885b      	ldrh	r3, [r3, #2]
 8016810:	b29a      	uxth	r2, r3
 8016812:	897b      	ldrh	r3, [r7, #10]
 8016814:	429a      	cmp	r2, r3
 8016816:	d8e5      	bhi.n	80167e4 <USBD_GetEpDesc+0x32>
 8016818:	e000      	b.n	801681c <USBD_GetEpDesc+0x6a>
          break;
 801681a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801681c:	693b      	ldr	r3, [r7, #16]
}
 801681e:	4618      	mov	r0, r3
 8016820:	3718      	adds	r7, #24
 8016822:	46bd      	mov	sp, r7
 8016824:	bd80      	pop	{r7, pc}

08016826 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8016826:	b480      	push	{r7}
 8016828:	b085      	sub	sp, #20
 801682a:	af00      	add	r7, sp, #0
 801682c:	6078      	str	r0, [r7, #4]
 801682e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8016834:	683b      	ldr	r3, [r7, #0]
 8016836:	881a      	ldrh	r2, [r3, #0]
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	781b      	ldrb	r3, [r3, #0]
 801683c:	b29b      	uxth	r3, r3
 801683e:	4413      	add	r3, r2
 8016840:	b29a      	uxth	r2, r3
 8016842:	683b      	ldr	r3, [r7, #0]
 8016844:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	781b      	ldrb	r3, [r3, #0]
 801684a:	461a      	mov	r2, r3
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	4413      	add	r3, r2
 8016850:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8016852:	68fb      	ldr	r3, [r7, #12]
}
 8016854:	4618      	mov	r0, r3
 8016856:	3714      	adds	r7, #20
 8016858:	46bd      	mov	sp, r7
 801685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801685e:	4770      	bx	lr

08016860 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8016860:	b480      	push	{r7}
 8016862:	b087      	sub	sp, #28
 8016864:	af00      	add	r7, sp, #0
 8016866:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801686c:	697b      	ldr	r3, [r7, #20]
 801686e:	781b      	ldrb	r3, [r3, #0]
 8016870:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8016872:	697b      	ldr	r3, [r7, #20]
 8016874:	3301      	adds	r3, #1
 8016876:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016878:	697b      	ldr	r3, [r7, #20]
 801687a:	781b      	ldrb	r3, [r3, #0]
 801687c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801687e:	8a3b      	ldrh	r3, [r7, #16]
 8016880:	021b      	lsls	r3, r3, #8
 8016882:	b21a      	sxth	r2, r3
 8016884:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016888:	4313      	orrs	r3, r2
 801688a:	b21b      	sxth	r3, r3
 801688c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801688e:	89fb      	ldrh	r3, [r7, #14]
}
 8016890:	4618      	mov	r0, r3
 8016892:	371c      	adds	r7, #28
 8016894:	46bd      	mov	sp, r7
 8016896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801689a:	4770      	bx	lr

0801689c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801689c:	b580      	push	{r7, lr}
 801689e:	b084      	sub	sp, #16
 80168a0:	af00      	add	r7, sp, #0
 80168a2:	6078      	str	r0, [r7, #4]
 80168a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80168a6:	2300      	movs	r3, #0
 80168a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80168aa:	683b      	ldr	r3, [r7, #0]
 80168ac:	781b      	ldrb	r3, [r3, #0]
 80168ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80168b2:	2b40      	cmp	r3, #64	; 0x40
 80168b4:	d005      	beq.n	80168c2 <USBD_StdDevReq+0x26>
 80168b6:	2b40      	cmp	r3, #64	; 0x40
 80168b8:	d857      	bhi.n	801696a <USBD_StdDevReq+0xce>
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d00f      	beq.n	80168de <USBD_StdDevReq+0x42>
 80168be:	2b20      	cmp	r3, #32
 80168c0:	d153      	bne.n	801696a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	32ae      	adds	r2, #174	; 0xae
 80168cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80168d0:	689b      	ldr	r3, [r3, #8]
 80168d2:	6839      	ldr	r1, [r7, #0]
 80168d4:	6878      	ldr	r0, [r7, #4]
 80168d6:	4798      	blx	r3
 80168d8:	4603      	mov	r3, r0
 80168da:	73fb      	strb	r3, [r7, #15]
      break;
 80168dc:	e04a      	b.n	8016974 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80168de:	683b      	ldr	r3, [r7, #0]
 80168e0:	785b      	ldrb	r3, [r3, #1]
 80168e2:	2b09      	cmp	r3, #9
 80168e4:	d83b      	bhi.n	801695e <USBD_StdDevReq+0xc2>
 80168e6:	a201      	add	r2, pc, #4	; (adr r2, 80168ec <USBD_StdDevReq+0x50>)
 80168e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80168ec:	08016941 	.word	0x08016941
 80168f0:	08016955 	.word	0x08016955
 80168f4:	0801695f 	.word	0x0801695f
 80168f8:	0801694b 	.word	0x0801694b
 80168fc:	0801695f 	.word	0x0801695f
 8016900:	0801691f 	.word	0x0801691f
 8016904:	08016915 	.word	0x08016915
 8016908:	0801695f 	.word	0x0801695f
 801690c:	08016937 	.word	0x08016937
 8016910:	08016929 	.word	0x08016929
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016914:	6839      	ldr	r1, [r7, #0]
 8016916:	6878      	ldr	r0, [r7, #4]
 8016918:	f000 fa3c 	bl	8016d94 <USBD_GetDescriptor>
          break;
 801691c:	e024      	b.n	8016968 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801691e:	6839      	ldr	r1, [r7, #0]
 8016920:	6878      	ldr	r0, [r7, #4]
 8016922:	f000 fba1 	bl	8017068 <USBD_SetAddress>
          break;
 8016926:	e01f      	b.n	8016968 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8016928:	6839      	ldr	r1, [r7, #0]
 801692a:	6878      	ldr	r0, [r7, #4]
 801692c:	f000 fbe0 	bl	80170f0 <USBD_SetConfig>
 8016930:	4603      	mov	r3, r0
 8016932:	73fb      	strb	r3, [r7, #15]
          break;
 8016934:	e018      	b.n	8016968 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8016936:	6839      	ldr	r1, [r7, #0]
 8016938:	6878      	ldr	r0, [r7, #4]
 801693a:	f000 fc83 	bl	8017244 <USBD_GetConfig>
          break;
 801693e:	e013      	b.n	8016968 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016940:	6839      	ldr	r1, [r7, #0]
 8016942:	6878      	ldr	r0, [r7, #4]
 8016944:	f000 fcb4 	bl	80172b0 <USBD_GetStatus>
          break;
 8016948:	e00e      	b.n	8016968 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801694a:	6839      	ldr	r1, [r7, #0]
 801694c:	6878      	ldr	r0, [r7, #4]
 801694e:	f000 fce3 	bl	8017318 <USBD_SetFeature>
          break;
 8016952:	e009      	b.n	8016968 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016954:	6839      	ldr	r1, [r7, #0]
 8016956:	6878      	ldr	r0, [r7, #4]
 8016958:	f000 fd07 	bl	801736a <USBD_ClrFeature>
          break;
 801695c:	e004      	b.n	8016968 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801695e:	6839      	ldr	r1, [r7, #0]
 8016960:	6878      	ldr	r0, [r7, #4]
 8016962:	f000 fd5e 	bl	8017422 <USBD_CtlError>
          break;
 8016966:	bf00      	nop
      }
      break;
 8016968:	e004      	b.n	8016974 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801696a:	6839      	ldr	r1, [r7, #0]
 801696c:	6878      	ldr	r0, [r7, #4]
 801696e:	f000 fd58 	bl	8017422 <USBD_CtlError>
      break;
 8016972:	bf00      	nop
  }

  return ret;
 8016974:	7bfb      	ldrb	r3, [r7, #15]
}
 8016976:	4618      	mov	r0, r3
 8016978:	3710      	adds	r7, #16
 801697a:	46bd      	mov	sp, r7
 801697c:	bd80      	pop	{r7, pc}
 801697e:	bf00      	nop

08016980 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016980:	b580      	push	{r7, lr}
 8016982:	b084      	sub	sp, #16
 8016984:	af00      	add	r7, sp, #0
 8016986:	6078      	str	r0, [r7, #4]
 8016988:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801698a:	2300      	movs	r3, #0
 801698c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801698e:	683b      	ldr	r3, [r7, #0]
 8016990:	781b      	ldrb	r3, [r3, #0]
 8016992:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016996:	2b40      	cmp	r3, #64	; 0x40
 8016998:	d005      	beq.n	80169a6 <USBD_StdItfReq+0x26>
 801699a:	2b40      	cmp	r3, #64	; 0x40
 801699c:	d852      	bhi.n	8016a44 <USBD_StdItfReq+0xc4>
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d001      	beq.n	80169a6 <USBD_StdItfReq+0x26>
 80169a2:	2b20      	cmp	r3, #32
 80169a4:	d14e      	bne.n	8016a44 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80169ac:	b2db      	uxtb	r3, r3
 80169ae:	3b01      	subs	r3, #1
 80169b0:	2b02      	cmp	r3, #2
 80169b2:	d840      	bhi.n	8016a36 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80169b4:	683b      	ldr	r3, [r7, #0]
 80169b6:	889b      	ldrh	r3, [r3, #4]
 80169b8:	b2db      	uxtb	r3, r3
 80169ba:	2b01      	cmp	r3, #1
 80169bc:	d836      	bhi.n	8016a2c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80169be:	683b      	ldr	r3, [r7, #0]
 80169c0:	889b      	ldrh	r3, [r3, #4]
 80169c2:	b2db      	uxtb	r3, r3
 80169c4:	4619      	mov	r1, r3
 80169c6:	6878      	ldr	r0, [r7, #4]
 80169c8:	f7ff fed9 	bl	801677e <USBD_CoreFindIF>
 80169cc:	4603      	mov	r3, r0
 80169ce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80169d0:	7bbb      	ldrb	r3, [r7, #14]
 80169d2:	2bff      	cmp	r3, #255	; 0xff
 80169d4:	d01d      	beq.n	8016a12 <USBD_StdItfReq+0x92>
 80169d6:	7bbb      	ldrb	r3, [r7, #14]
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d11a      	bne.n	8016a12 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80169dc:	7bba      	ldrb	r2, [r7, #14]
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	32ae      	adds	r2, #174	; 0xae
 80169e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80169e6:	689b      	ldr	r3, [r3, #8]
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d00f      	beq.n	8016a0c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80169ec:	7bba      	ldrb	r2, [r7, #14]
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80169f4:	7bba      	ldrb	r2, [r7, #14]
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	32ae      	adds	r2, #174	; 0xae
 80169fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80169fe:	689b      	ldr	r3, [r3, #8]
 8016a00:	6839      	ldr	r1, [r7, #0]
 8016a02:	6878      	ldr	r0, [r7, #4]
 8016a04:	4798      	blx	r3
 8016a06:	4603      	mov	r3, r0
 8016a08:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016a0a:	e004      	b.n	8016a16 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8016a0c:	2303      	movs	r3, #3
 8016a0e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016a10:	e001      	b.n	8016a16 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8016a12:	2303      	movs	r3, #3
 8016a14:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016a16:	683b      	ldr	r3, [r7, #0]
 8016a18:	88db      	ldrh	r3, [r3, #6]
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d110      	bne.n	8016a40 <USBD_StdItfReq+0xc0>
 8016a1e:	7bfb      	ldrb	r3, [r7, #15]
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d10d      	bne.n	8016a40 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016a24:	6878      	ldr	r0, [r7, #4]
 8016a26:	f000 fdc7 	bl	80175b8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016a2a:	e009      	b.n	8016a40 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8016a2c:	6839      	ldr	r1, [r7, #0]
 8016a2e:	6878      	ldr	r0, [r7, #4]
 8016a30:	f000 fcf7 	bl	8017422 <USBD_CtlError>
          break;
 8016a34:	e004      	b.n	8016a40 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8016a36:	6839      	ldr	r1, [r7, #0]
 8016a38:	6878      	ldr	r0, [r7, #4]
 8016a3a:	f000 fcf2 	bl	8017422 <USBD_CtlError>
          break;
 8016a3e:	e000      	b.n	8016a42 <USBD_StdItfReq+0xc2>
          break;
 8016a40:	bf00      	nop
      }
      break;
 8016a42:	e004      	b.n	8016a4e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8016a44:	6839      	ldr	r1, [r7, #0]
 8016a46:	6878      	ldr	r0, [r7, #4]
 8016a48:	f000 fceb 	bl	8017422 <USBD_CtlError>
      break;
 8016a4c:	bf00      	nop
  }

  return ret;
 8016a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a50:	4618      	mov	r0, r3
 8016a52:	3710      	adds	r7, #16
 8016a54:	46bd      	mov	sp, r7
 8016a56:	bd80      	pop	{r7, pc}

08016a58 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016a58:	b580      	push	{r7, lr}
 8016a5a:	b084      	sub	sp, #16
 8016a5c:	af00      	add	r7, sp, #0
 8016a5e:	6078      	str	r0, [r7, #4]
 8016a60:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8016a62:	2300      	movs	r3, #0
 8016a64:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8016a66:	683b      	ldr	r3, [r7, #0]
 8016a68:	889b      	ldrh	r3, [r3, #4]
 8016a6a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016a6c:	683b      	ldr	r3, [r7, #0]
 8016a6e:	781b      	ldrb	r3, [r3, #0]
 8016a70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016a74:	2b40      	cmp	r3, #64	; 0x40
 8016a76:	d007      	beq.n	8016a88 <USBD_StdEPReq+0x30>
 8016a78:	2b40      	cmp	r3, #64	; 0x40
 8016a7a:	f200 817f 	bhi.w	8016d7c <USBD_StdEPReq+0x324>
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d02a      	beq.n	8016ad8 <USBD_StdEPReq+0x80>
 8016a82:	2b20      	cmp	r3, #32
 8016a84:	f040 817a 	bne.w	8016d7c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016a88:	7bbb      	ldrb	r3, [r7, #14]
 8016a8a:	4619      	mov	r1, r3
 8016a8c:	6878      	ldr	r0, [r7, #4]
 8016a8e:	f7ff fe83 	bl	8016798 <USBD_CoreFindEP>
 8016a92:	4603      	mov	r3, r0
 8016a94:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016a96:	7b7b      	ldrb	r3, [r7, #13]
 8016a98:	2bff      	cmp	r3, #255	; 0xff
 8016a9a:	f000 8174 	beq.w	8016d86 <USBD_StdEPReq+0x32e>
 8016a9e:	7b7b      	ldrb	r3, [r7, #13]
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	f040 8170 	bne.w	8016d86 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8016aa6:	7b7a      	ldrb	r2, [r7, #13]
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016aae:	7b7a      	ldrb	r2, [r7, #13]
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	32ae      	adds	r2, #174	; 0xae
 8016ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ab8:	689b      	ldr	r3, [r3, #8]
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	f000 8163 	beq.w	8016d86 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016ac0:	7b7a      	ldrb	r2, [r7, #13]
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	32ae      	adds	r2, #174	; 0xae
 8016ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016aca:	689b      	ldr	r3, [r3, #8]
 8016acc:	6839      	ldr	r1, [r7, #0]
 8016ace:	6878      	ldr	r0, [r7, #4]
 8016ad0:	4798      	blx	r3
 8016ad2:	4603      	mov	r3, r0
 8016ad4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8016ad6:	e156      	b.n	8016d86 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016ad8:	683b      	ldr	r3, [r7, #0]
 8016ada:	785b      	ldrb	r3, [r3, #1]
 8016adc:	2b03      	cmp	r3, #3
 8016ade:	d008      	beq.n	8016af2 <USBD_StdEPReq+0x9a>
 8016ae0:	2b03      	cmp	r3, #3
 8016ae2:	f300 8145 	bgt.w	8016d70 <USBD_StdEPReq+0x318>
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	f000 809b 	beq.w	8016c22 <USBD_StdEPReq+0x1ca>
 8016aec:	2b01      	cmp	r3, #1
 8016aee:	d03c      	beq.n	8016b6a <USBD_StdEPReq+0x112>
 8016af0:	e13e      	b.n	8016d70 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016af8:	b2db      	uxtb	r3, r3
 8016afa:	2b02      	cmp	r3, #2
 8016afc:	d002      	beq.n	8016b04 <USBD_StdEPReq+0xac>
 8016afe:	2b03      	cmp	r3, #3
 8016b00:	d016      	beq.n	8016b30 <USBD_StdEPReq+0xd8>
 8016b02:	e02c      	b.n	8016b5e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016b04:	7bbb      	ldrb	r3, [r7, #14]
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d00d      	beq.n	8016b26 <USBD_StdEPReq+0xce>
 8016b0a:	7bbb      	ldrb	r3, [r7, #14]
 8016b0c:	2b80      	cmp	r3, #128	; 0x80
 8016b0e:	d00a      	beq.n	8016b26 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016b10:	7bbb      	ldrb	r3, [r7, #14]
 8016b12:	4619      	mov	r1, r3
 8016b14:	6878      	ldr	r0, [r7, #4]
 8016b16:	f004 f94b 	bl	801adb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016b1a:	2180      	movs	r1, #128	; 0x80
 8016b1c:	6878      	ldr	r0, [r7, #4]
 8016b1e:	f004 f947 	bl	801adb0 <USBD_LL_StallEP>
 8016b22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016b24:	e020      	b.n	8016b68 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8016b26:	6839      	ldr	r1, [r7, #0]
 8016b28:	6878      	ldr	r0, [r7, #4]
 8016b2a:	f000 fc7a 	bl	8017422 <USBD_CtlError>
              break;
 8016b2e:	e01b      	b.n	8016b68 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016b30:	683b      	ldr	r3, [r7, #0]
 8016b32:	885b      	ldrh	r3, [r3, #2]
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d10e      	bne.n	8016b56 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016b38:	7bbb      	ldrb	r3, [r7, #14]
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d00b      	beq.n	8016b56 <USBD_StdEPReq+0xfe>
 8016b3e:	7bbb      	ldrb	r3, [r7, #14]
 8016b40:	2b80      	cmp	r3, #128	; 0x80
 8016b42:	d008      	beq.n	8016b56 <USBD_StdEPReq+0xfe>
 8016b44:	683b      	ldr	r3, [r7, #0]
 8016b46:	88db      	ldrh	r3, [r3, #6]
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d104      	bne.n	8016b56 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016b4c:	7bbb      	ldrb	r3, [r7, #14]
 8016b4e:	4619      	mov	r1, r3
 8016b50:	6878      	ldr	r0, [r7, #4]
 8016b52:	f004 f92d 	bl	801adb0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016b56:	6878      	ldr	r0, [r7, #4]
 8016b58:	f000 fd2e 	bl	80175b8 <USBD_CtlSendStatus>

              break;
 8016b5c:	e004      	b.n	8016b68 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016b5e:	6839      	ldr	r1, [r7, #0]
 8016b60:	6878      	ldr	r0, [r7, #4]
 8016b62:	f000 fc5e 	bl	8017422 <USBD_CtlError>
              break;
 8016b66:	bf00      	nop
          }
          break;
 8016b68:	e107      	b.n	8016d7a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016b70:	b2db      	uxtb	r3, r3
 8016b72:	2b02      	cmp	r3, #2
 8016b74:	d002      	beq.n	8016b7c <USBD_StdEPReq+0x124>
 8016b76:	2b03      	cmp	r3, #3
 8016b78:	d016      	beq.n	8016ba8 <USBD_StdEPReq+0x150>
 8016b7a:	e04b      	b.n	8016c14 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016b7c:	7bbb      	ldrb	r3, [r7, #14]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d00d      	beq.n	8016b9e <USBD_StdEPReq+0x146>
 8016b82:	7bbb      	ldrb	r3, [r7, #14]
 8016b84:	2b80      	cmp	r3, #128	; 0x80
 8016b86:	d00a      	beq.n	8016b9e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016b88:	7bbb      	ldrb	r3, [r7, #14]
 8016b8a:	4619      	mov	r1, r3
 8016b8c:	6878      	ldr	r0, [r7, #4]
 8016b8e:	f004 f90f 	bl	801adb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016b92:	2180      	movs	r1, #128	; 0x80
 8016b94:	6878      	ldr	r0, [r7, #4]
 8016b96:	f004 f90b 	bl	801adb0 <USBD_LL_StallEP>
 8016b9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016b9c:	e040      	b.n	8016c20 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016b9e:	6839      	ldr	r1, [r7, #0]
 8016ba0:	6878      	ldr	r0, [r7, #4]
 8016ba2:	f000 fc3e 	bl	8017422 <USBD_CtlError>
              break;
 8016ba6:	e03b      	b.n	8016c20 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016ba8:	683b      	ldr	r3, [r7, #0]
 8016baa:	885b      	ldrh	r3, [r3, #2]
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d136      	bne.n	8016c1e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016bb0:	7bbb      	ldrb	r3, [r7, #14]
 8016bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d004      	beq.n	8016bc4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016bba:	7bbb      	ldrb	r3, [r7, #14]
 8016bbc:	4619      	mov	r1, r3
 8016bbe:	6878      	ldr	r0, [r7, #4]
 8016bc0:	f004 f915 	bl	801adee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016bc4:	6878      	ldr	r0, [r7, #4]
 8016bc6:	f000 fcf7 	bl	80175b8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8016bca:	7bbb      	ldrb	r3, [r7, #14]
 8016bcc:	4619      	mov	r1, r3
 8016bce:	6878      	ldr	r0, [r7, #4]
 8016bd0:	f7ff fde2 	bl	8016798 <USBD_CoreFindEP>
 8016bd4:	4603      	mov	r3, r0
 8016bd6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016bd8:	7b7b      	ldrb	r3, [r7, #13]
 8016bda:	2bff      	cmp	r3, #255	; 0xff
 8016bdc:	d01f      	beq.n	8016c1e <USBD_StdEPReq+0x1c6>
 8016bde:	7b7b      	ldrb	r3, [r7, #13]
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d11c      	bne.n	8016c1e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8016be4:	7b7a      	ldrb	r2, [r7, #13]
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016bec:	7b7a      	ldrb	r2, [r7, #13]
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	32ae      	adds	r2, #174	; 0xae
 8016bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016bf6:	689b      	ldr	r3, [r3, #8]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d010      	beq.n	8016c1e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016bfc:	7b7a      	ldrb	r2, [r7, #13]
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	32ae      	adds	r2, #174	; 0xae
 8016c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c06:	689b      	ldr	r3, [r3, #8]
 8016c08:	6839      	ldr	r1, [r7, #0]
 8016c0a:	6878      	ldr	r0, [r7, #4]
 8016c0c:	4798      	blx	r3
 8016c0e:	4603      	mov	r3, r0
 8016c10:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8016c12:	e004      	b.n	8016c1e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8016c14:	6839      	ldr	r1, [r7, #0]
 8016c16:	6878      	ldr	r0, [r7, #4]
 8016c18:	f000 fc03 	bl	8017422 <USBD_CtlError>
              break;
 8016c1c:	e000      	b.n	8016c20 <USBD_StdEPReq+0x1c8>
              break;
 8016c1e:	bf00      	nop
          }
          break;
 8016c20:	e0ab      	b.n	8016d7a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016c28:	b2db      	uxtb	r3, r3
 8016c2a:	2b02      	cmp	r3, #2
 8016c2c:	d002      	beq.n	8016c34 <USBD_StdEPReq+0x1dc>
 8016c2e:	2b03      	cmp	r3, #3
 8016c30:	d032      	beq.n	8016c98 <USBD_StdEPReq+0x240>
 8016c32:	e097      	b.n	8016d64 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016c34:	7bbb      	ldrb	r3, [r7, #14]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d007      	beq.n	8016c4a <USBD_StdEPReq+0x1f2>
 8016c3a:	7bbb      	ldrb	r3, [r7, #14]
 8016c3c:	2b80      	cmp	r3, #128	; 0x80
 8016c3e:	d004      	beq.n	8016c4a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016c40:	6839      	ldr	r1, [r7, #0]
 8016c42:	6878      	ldr	r0, [r7, #4]
 8016c44:	f000 fbed 	bl	8017422 <USBD_CtlError>
                break;
 8016c48:	e091      	b.n	8016d6e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016c4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	da0b      	bge.n	8016c6a <USBD_StdEPReq+0x212>
 8016c52:	7bbb      	ldrb	r3, [r7, #14]
 8016c54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016c58:	4613      	mov	r3, r2
 8016c5a:	009b      	lsls	r3, r3, #2
 8016c5c:	4413      	add	r3, r2
 8016c5e:	009b      	lsls	r3, r3, #2
 8016c60:	3310      	adds	r3, #16
 8016c62:	687a      	ldr	r2, [r7, #4]
 8016c64:	4413      	add	r3, r2
 8016c66:	3304      	adds	r3, #4
 8016c68:	e00b      	b.n	8016c82 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016c6a:	7bbb      	ldrb	r3, [r7, #14]
 8016c6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016c70:	4613      	mov	r3, r2
 8016c72:	009b      	lsls	r3, r3, #2
 8016c74:	4413      	add	r3, r2
 8016c76:	009b      	lsls	r3, r3, #2
 8016c78:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016c7c:	687a      	ldr	r2, [r7, #4]
 8016c7e:	4413      	add	r3, r2
 8016c80:	3304      	adds	r3, #4
 8016c82:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016c84:	68bb      	ldr	r3, [r7, #8]
 8016c86:	2200      	movs	r2, #0
 8016c88:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016c8a:	68bb      	ldr	r3, [r7, #8]
 8016c8c:	2202      	movs	r2, #2
 8016c8e:	4619      	mov	r1, r3
 8016c90:	6878      	ldr	r0, [r7, #4]
 8016c92:	f000 fc37 	bl	8017504 <USBD_CtlSendData>
              break;
 8016c96:	e06a      	b.n	8016d6e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016c98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	da11      	bge.n	8016cc4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016ca0:	7bbb      	ldrb	r3, [r7, #14]
 8016ca2:	f003 020f 	and.w	r2, r3, #15
 8016ca6:	6879      	ldr	r1, [r7, #4]
 8016ca8:	4613      	mov	r3, r2
 8016caa:	009b      	lsls	r3, r3, #2
 8016cac:	4413      	add	r3, r2
 8016cae:	009b      	lsls	r3, r3, #2
 8016cb0:	440b      	add	r3, r1
 8016cb2:	3324      	adds	r3, #36	; 0x24
 8016cb4:	881b      	ldrh	r3, [r3, #0]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d117      	bne.n	8016cea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016cba:	6839      	ldr	r1, [r7, #0]
 8016cbc:	6878      	ldr	r0, [r7, #4]
 8016cbe:	f000 fbb0 	bl	8017422 <USBD_CtlError>
                  break;
 8016cc2:	e054      	b.n	8016d6e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016cc4:	7bbb      	ldrb	r3, [r7, #14]
 8016cc6:	f003 020f 	and.w	r2, r3, #15
 8016cca:	6879      	ldr	r1, [r7, #4]
 8016ccc:	4613      	mov	r3, r2
 8016cce:	009b      	lsls	r3, r3, #2
 8016cd0:	4413      	add	r3, r2
 8016cd2:	009b      	lsls	r3, r3, #2
 8016cd4:	440b      	add	r3, r1
 8016cd6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8016cda:	881b      	ldrh	r3, [r3, #0]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d104      	bne.n	8016cea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016ce0:	6839      	ldr	r1, [r7, #0]
 8016ce2:	6878      	ldr	r0, [r7, #4]
 8016ce4:	f000 fb9d 	bl	8017422 <USBD_CtlError>
                  break;
 8016ce8:	e041      	b.n	8016d6e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016cea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	da0b      	bge.n	8016d0a <USBD_StdEPReq+0x2b2>
 8016cf2:	7bbb      	ldrb	r3, [r7, #14]
 8016cf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016cf8:	4613      	mov	r3, r2
 8016cfa:	009b      	lsls	r3, r3, #2
 8016cfc:	4413      	add	r3, r2
 8016cfe:	009b      	lsls	r3, r3, #2
 8016d00:	3310      	adds	r3, #16
 8016d02:	687a      	ldr	r2, [r7, #4]
 8016d04:	4413      	add	r3, r2
 8016d06:	3304      	adds	r3, #4
 8016d08:	e00b      	b.n	8016d22 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016d0a:	7bbb      	ldrb	r3, [r7, #14]
 8016d0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016d10:	4613      	mov	r3, r2
 8016d12:	009b      	lsls	r3, r3, #2
 8016d14:	4413      	add	r3, r2
 8016d16:	009b      	lsls	r3, r3, #2
 8016d18:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016d1c:	687a      	ldr	r2, [r7, #4]
 8016d1e:	4413      	add	r3, r2
 8016d20:	3304      	adds	r3, #4
 8016d22:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016d24:	7bbb      	ldrb	r3, [r7, #14]
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d002      	beq.n	8016d30 <USBD_StdEPReq+0x2d8>
 8016d2a:	7bbb      	ldrb	r3, [r7, #14]
 8016d2c:	2b80      	cmp	r3, #128	; 0x80
 8016d2e:	d103      	bne.n	8016d38 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016d30:	68bb      	ldr	r3, [r7, #8]
 8016d32:	2200      	movs	r2, #0
 8016d34:	601a      	str	r2, [r3, #0]
 8016d36:	e00e      	b.n	8016d56 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016d38:	7bbb      	ldrb	r3, [r7, #14]
 8016d3a:	4619      	mov	r1, r3
 8016d3c:	6878      	ldr	r0, [r7, #4]
 8016d3e:	f004 f875 	bl	801ae2c <USBD_LL_IsStallEP>
 8016d42:	4603      	mov	r3, r0
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d003      	beq.n	8016d50 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016d48:	68bb      	ldr	r3, [r7, #8]
 8016d4a:	2201      	movs	r2, #1
 8016d4c:	601a      	str	r2, [r3, #0]
 8016d4e:	e002      	b.n	8016d56 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016d50:	68bb      	ldr	r3, [r7, #8]
 8016d52:	2200      	movs	r2, #0
 8016d54:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016d56:	68bb      	ldr	r3, [r7, #8]
 8016d58:	2202      	movs	r2, #2
 8016d5a:	4619      	mov	r1, r3
 8016d5c:	6878      	ldr	r0, [r7, #4]
 8016d5e:	f000 fbd1 	bl	8017504 <USBD_CtlSendData>
              break;
 8016d62:	e004      	b.n	8016d6e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016d64:	6839      	ldr	r1, [r7, #0]
 8016d66:	6878      	ldr	r0, [r7, #4]
 8016d68:	f000 fb5b 	bl	8017422 <USBD_CtlError>
              break;
 8016d6c:	bf00      	nop
          }
          break;
 8016d6e:	e004      	b.n	8016d7a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016d70:	6839      	ldr	r1, [r7, #0]
 8016d72:	6878      	ldr	r0, [r7, #4]
 8016d74:	f000 fb55 	bl	8017422 <USBD_CtlError>
          break;
 8016d78:	bf00      	nop
      }
      break;
 8016d7a:	e005      	b.n	8016d88 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016d7c:	6839      	ldr	r1, [r7, #0]
 8016d7e:	6878      	ldr	r0, [r7, #4]
 8016d80:	f000 fb4f 	bl	8017422 <USBD_CtlError>
      break;
 8016d84:	e000      	b.n	8016d88 <USBD_StdEPReq+0x330>
      break;
 8016d86:	bf00      	nop
  }

  return ret;
 8016d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d8a:	4618      	mov	r0, r3
 8016d8c:	3710      	adds	r7, #16
 8016d8e:	46bd      	mov	sp, r7
 8016d90:	bd80      	pop	{r7, pc}
	...

08016d94 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016d94:	b580      	push	{r7, lr}
 8016d96:	b084      	sub	sp, #16
 8016d98:	af00      	add	r7, sp, #0
 8016d9a:	6078      	str	r0, [r7, #4]
 8016d9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016d9e:	2300      	movs	r3, #0
 8016da0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016da2:	2300      	movs	r3, #0
 8016da4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016da6:	2300      	movs	r3, #0
 8016da8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016daa:	683b      	ldr	r3, [r7, #0]
 8016dac:	885b      	ldrh	r3, [r3, #2]
 8016dae:	0a1b      	lsrs	r3, r3, #8
 8016db0:	b29b      	uxth	r3, r3
 8016db2:	3b01      	subs	r3, #1
 8016db4:	2b06      	cmp	r3, #6
 8016db6:	f200 8128 	bhi.w	801700a <USBD_GetDescriptor+0x276>
 8016dba:	a201      	add	r2, pc, #4	; (adr r2, 8016dc0 <USBD_GetDescriptor+0x2c>)
 8016dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016dc0:	08016ddd 	.word	0x08016ddd
 8016dc4:	08016df5 	.word	0x08016df5
 8016dc8:	08016e35 	.word	0x08016e35
 8016dcc:	0801700b 	.word	0x0801700b
 8016dd0:	0801700b 	.word	0x0801700b
 8016dd4:	08016fab 	.word	0x08016fab
 8016dd8:	08016fd7 	.word	0x08016fd7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	687a      	ldr	r2, [r7, #4]
 8016de6:	7c12      	ldrb	r2, [r2, #16]
 8016de8:	f107 0108 	add.w	r1, r7, #8
 8016dec:	4610      	mov	r0, r2
 8016dee:	4798      	blx	r3
 8016df0:	60f8      	str	r0, [r7, #12]
      break;
 8016df2:	e112      	b.n	801701a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	7c1b      	ldrb	r3, [r3, #16]
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d10d      	bne.n	8016e18 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016e04:	f107 0208 	add.w	r2, r7, #8
 8016e08:	4610      	mov	r0, r2
 8016e0a:	4798      	blx	r3
 8016e0c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016e0e:	68fb      	ldr	r3, [r7, #12]
 8016e10:	3301      	adds	r3, #1
 8016e12:	2202      	movs	r2, #2
 8016e14:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016e16:	e100      	b.n	801701a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e20:	f107 0208 	add.w	r2, r7, #8
 8016e24:	4610      	mov	r0, r2
 8016e26:	4798      	blx	r3
 8016e28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	3301      	adds	r3, #1
 8016e2e:	2202      	movs	r2, #2
 8016e30:	701a      	strb	r2, [r3, #0]
      break;
 8016e32:	e0f2      	b.n	801701a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016e34:	683b      	ldr	r3, [r7, #0]
 8016e36:	885b      	ldrh	r3, [r3, #2]
 8016e38:	b2db      	uxtb	r3, r3
 8016e3a:	2b05      	cmp	r3, #5
 8016e3c:	f200 80ac 	bhi.w	8016f98 <USBD_GetDescriptor+0x204>
 8016e40:	a201      	add	r2, pc, #4	; (adr r2, 8016e48 <USBD_GetDescriptor+0xb4>)
 8016e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e46:	bf00      	nop
 8016e48:	08016e61 	.word	0x08016e61
 8016e4c:	08016e95 	.word	0x08016e95
 8016e50:	08016ec9 	.word	0x08016ec9
 8016e54:	08016efd 	.word	0x08016efd
 8016e58:	08016f31 	.word	0x08016f31
 8016e5c:	08016f65 	.word	0x08016f65
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016e66:	685b      	ldr	r3, [r3, #4]
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	d00b      	beq.n	8016e84 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016e72:	685b      	ldr	r3, [r3, #4]
 8016e74:	687a      	ldr	r2, [r7, #4]
 8016e76:	7c12      	ldrb	r2, [r2, #16]
 8016e78:	f107 0108 	add.w	r1, r7, #8
 8016e7c:	4610      	mov	r0, r2
 8016e7e:	4798      	blx	r3
 8016e80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016e82:	e091      	b.n	8016fa8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016e84:	6839      	ldr	r1, [r7, #0]
 8016e86:	6878      	ldr	r0, [r7, #4]
 8016e88:	f000 facb 	bl	8017422 <USBD_CtlError>
            err++;
 8016e8c:	7afb      	ldrb	r3, [r7, #11]
 8016e8e:	3301      	adds	r3, #1
 8016e90:	72fb      	strb	r3, [r7, #11]
          break;
 8016e92:	e089      	b.n	8016fa8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016e9a:	689b      	ldr	r3, [r3, #8]
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d00b      	beq.n	8016eb8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016ea6:	689b      	ldr	r3, [r3, #8]
 8016ea8:	687a      	ldr	r2, [r7, #4]
 8016eaa:	7c12      	ldrb	r2, [r2, #16]
 8016eac:	f107 0108 	add.w	r1, r7, #8
 8016eb0:	4610      	mov	r0, r2
 8016eb2:	4798      	blx	r3
 8016eb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016eb6:	e077      	b.n	8016fa8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016eb8:	6839      	ldr	r1, [r7, #0]
 8016eba:	6878      	ldr	r0, [r7, #4]
 8016ebc:	f000 fab1 	bl	8017422 <USBD_CtlError>
            err++;
 8016ec0:	7afb      	ldrb	r3, [r7, #11]
 8016ec2:	3301      	adds	r3, #1
 8016ec4:	72fb      	strb	r3, [r7, #11]
          break;
 8016ec6:	e06f      	b.n	8016fa8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016ece:	68db      	ldr	r3, [r3, #12]
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d00b      	beq.n	8016eec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016eda:	68db      	ldr	r3, [r3, #12]
 8016edc:	687a      	ldr	r2, [r7, #4]
 8016ede:	7c12      	ldrb	r2, [r2, #16]
 8016ee0:	f107 0108 	add.w	r1, r7, #8
 8016ee4:	4610      	mov	r0, r2
 8016ee6:	4798      	blx	r3
 8016ee8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016eea:	e05d      	b.n	8016fa8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016eec:	6839      	ldr	r1, [r7, #0]
 8016eee:	6878      	ldr	r0, [r7, #4]
 8016ef0:	f000 fa97 	bl	8017422 <USBD_CtlError>
            err++;
 8016ef4:	7afb      	ldrb	r3, [r7, #11]
 8016ef6:	3301      	adds	r3, #1
 8016ef8:	72fb      	strb	r3, [r7, #11]
          break;
 8016efa:	e055      	b.n	8016fa8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016f02:	691b      	ldr	r3, [r3, #16]
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d00b      	beq.n	8016f20 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016f0e:	691b      	ldr	r3, [r3, #16]
 8016f10:	687a      	ldr	r2, [r7, #4]
 8016f12:	7c12      	ldrb	r2, [r2, #16]
 8016f14:	f107 0108 	add.w	r1, r7, #8
 8016f18:	4610      	mov	r0, r2
 8016f1a:	4798      	blx	r3
 8016f1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016f1e:	e043      	b.n	8016fa8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016f20:	6839      	ldr	r1, [r7, #0]
 8016f22:	6878      	ldr	r0, [r7, #4]
 8016f24:	f000 fa7d 	bl	8017422 <USBD_CtlError>
            err++;
 8016f28:	7afb      	ldrb	r3, [r7, #11]
 8016f2a:	3301      	adds	r3, #1
 8016f2c:	72fb      	strb	r3, [r7, #11]
          break;
 8016f2e:	e03b      	b.n	8016fa8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016f36:	695b      	ldr	r3, [r3, #20]
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	d00b      	beq.n	8016f54 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016f42:	695b      	ldr	r3, [r3, #20]
 8016f44:	687a      	ldr	r2, [r7, #4]
 8016f46:	7c12      	ldrb	r2, [r2, #16]
 8016f48:	f107 0108 	add.w	r1, r7, #8
 8016f4c:	4610      	mov	r0, r2
 8016f4e:	4798      	blx	r3
 8016f50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016f52:	e029      	b.n	8016fa8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016f54:	6839      	ldr	r1, [r7, #0]
 8016f56:	6878      	ldr	r0, [r7, #4]
 8016f58:	f000 fa63 	bl	8017422 <USBD_CtlError>
            err++;
 8016f5c:	7afb      	ldrb	r3, [r7, #11]
 8016f5e:	3301      	adds	r3, #1
 8016f60:	72fb      	strb	r3, [r7, #11]
          break;
 8016f62:	e021      	b.n	8016fa8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016f6a:	699b      	ldr	r3, [r3, #24]
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d00b      	beq.n	8016f88 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016f76:	699b      	ldr	r3, [r3, #24]
 8016f78:	687a      	ldr	r2, [r7, #4]
 8016f7a:	7c12      	ldrb	r2, [r2, #16]
 8016f7c:	f107 0108 	add.w	r1, r7, #8
 8016f80:	4610      	mov	r0, r2
 8016f82:	4798      	blx	r3
 8016f84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016f86:	e00f      	b.n	8016fa8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016f88:	6839      	ldr	r1, [r7, #0]
 8016f8a:	6878      	ldr	r0, [r7, #4]
 8016f8c:	f000 fa49 	bl	8017422 <USBD_CtlError>
            err++;
 8016f90:	7afb      	ldrb	r3, [r7, #11]
 8016f92:	3301      	adds	r3, #1
 8016f94:	72fb      	strb	r3, [r7, #11]
          break;
 8016f96:	e007      	b.n	8016fa8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016f98:	6839      	ldr	r1, [r7, #0]
 8016f9a:	6878      	ldr	r0, [r7, #4]
 8016f9c:	f000 fa41 	bl	8017422 <USBD_CtlError>
          err++;
 8016fa0:	7afb      	ldrb	r3, [r7, #11]
 8016fa2:	3301      	adds	r3, #1
 8016fa4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8016fa6:	bf00      	nop
      }
      break;
 8016fa8:	e037      	b.n	801701a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	7c1b      	ldrb	r3, [r3, #16]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d109      	bne.n	8016fc6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016fba:	f107 0208 	add.w	r2, r7, #8
 8016fbe:	4610      	mov	r0, r2
 8016fc0:	4798      	blx	r3
 8016fc2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016fc4:	e029      	b.n	801701a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016fc6:	6839      	ldr	r1, [r7, #0]
 8016fc8:	6878      	ldr	r0, [r7, #4]
 8016fca:	f000 fa2a 	bl	8017422 <USBD_CtlError>
        err++;
 8016fce:	7afb      	ldrb	r3, [r7, #11]
 8016fd0:	3301      	adds	r3, #1
 8016fd2:	72fb      	strb	r3, [r7, #11]
      break;
 8016fd4:	e021      	b.n	801701a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	7c1b      	ldrb	r3, [r3, #16]
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d10d      	bne.n	8016ffa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016fe6:	f107 0208 	add.w	r2, r7, #8
 8016fea:	4610      	mov	r0, r2
 8016fec:	4798      	blx	r3
 8016fee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016ff0:	68fb      	ldr	r3, [r7, #12]
 8016ff2:	3301      	adds	r3, #1
 8016ff4:	2207      	movs	r2, #7
 8016ff6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016ff8:	e00f      	b.n	801701a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016ffa:	6839      	ldr	r1, [r7, #0]
 8016ffc:	6878      	ldr	r0, [r7, #4]
 8016ffe:	f000 fa10 	bl	8017422 <USBD_CtlError>
        err++;
 8017002:	7afb      	ldrb	r3, [r7, #11]
 8017004:	3301      	adds	r3, #1
 8017006:	72fb      	strb	r3, [r7, #11]
      break;
 8017008:	e007      	b.n	801701a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801700a:	6839      	ldr	r1, [r7, #0]
 801700c:	6878      	ldr	r0, [r7, #4]
 801700e:	f000 fa08 	bl	8017422 <USBD_CtlError>
      err++;
 8017012:	7afb      	ldrb	r3, [r7, #11]
 8017014:	3301      	adds	r3, #1
 8017016:	72fb      	strb	r3, [r7, #11]
      break;
 8017018:	bf00      	nop
  }

  if (err != 0U)
 801701a:	7afb      	ldrb	r3, [r7, #11]
 801701c:	2b00      	cmp	r3, #0
 801701e:	d11e      	bne.n	801705e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8017020:	683b      	ldr	r3, [r7, #0]
 8017022:	88db      	ldrh	r3, [r3, #6]
 8017024:	2b00      	cmp	r3, #0
 8017026:	d016      	beq.n	8017056 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8017028:	893b      	ldrh	r3, [r7, #8]
 801702a:	2b00      	cmp	r3, #0
 801702c:	d00e      	beq.n	801704c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801702e:	683b      	ldr	r3, [r7, #0]
 8017030:	88da      	ldrh	r2, [r3, #6]
 8017032:	893b      	ldrh	r3, [r7, #8]
 8017034:	4293      	cmp	r3, r2
 8017036:	bf28      	it	cs
 8017038:	4613      	movcs	r3, r2
 801703a:	b29b      	uxth	r3, r3
 801703c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801703e:	893b      	ldrh	r3, [r7, #8]
 8017040:	461a      	mov	r2, r3
 8017042:	68f9      	ldr	r1, [r7, #12]
 8017044:	6878      	ldr	r0, [r7, #4]
 8017046:	f000 fa5d 	bl	8017504 <USBD_CtlSendData>
 801704a:	e009      	b.n	8017060 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801704c:	6839      	ldr	r1, [r7, #0]
 801704e:	6878      	ldr	r0, [r7, #4]
 8017050:	f000 f9e7 	bl	8017422 <USBD_CtlError>
 8017054:	e004      	b.n	8017060 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8017056:	6878      	ldr	r0, [r7, #4]
 8017058:	f000 faae 	bl	80175b8 <USBD_CtlSendStatus>
 801705c:	e000      	b.n	8017060 <USBD_GetDescriptor+0x2cc>
    return;
 801705e:	bf00      	nop
  }
}
 8017060:	3710      	adds	r7, #16
 8017062:	46bd      	mov	sp, r7
 8017064:	bd80      	pop	{r7, pc}
 8017066:	bf00      	nop

08017068 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017068:	b580      	push	{r7, lr}
 801706a:	b084      	sub	sp, #16
 801706c:	af00      	add	r7, sp, #0
 801706e:	6078      	str	r0, [r7, #4]
 8017070:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8017072:	683b      	ldr	r3, [r7, #0]
 8017074:	889b      	ldrh	r3, [r3, #4]
 8017076:	2b00      	cmp	r3, #0
 8017078:	d131      	bne.n	80170de <USBD_SetAddress+0x76>
 801707a:	683b      	ldr	r3, [r7, #0]
 801707c:	88db      	ldrh	r3, [r3, #6]
 801707e:	2b00      	cmp	r3, #0
 8017080:	d12d      	bne.n	80170de <USBD_SetAddress+0x76>
 8017082:	683b      	ldr	r3, [r7, #0]
 8017084:	885b      	ldrh	r3, [r3, #2]
 8017086:	2b7f      	cmp	r3, #127	; 0x7f
 8017088:	d829      	bhi.n	80170de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801708a:	683b      	ldr	r3, [r7, #0]
 801708c:	885b      	ldrh	r3, [r3, #2]
 801708e:	b2db      	uxtb	r3, r3
 8017090:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017094:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801709c:	b2db      	uxtb	r3, r3
 801709e:	2b03      	cmp	r3, #3
 80170a0:	d104      	bne.n	80170ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80170a2:	6839      	ldr	r1, [r7, #0]
 80170a4:	6878      	ldr	r0, [r7, #4]
 80170a6:	f000 f9bc 	bl	8017422 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80170aa:	e01d      	b.n	80170e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	7bfa      	ldrb	r2, [r7, #15]
 80170b0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80170b4:	7bfb      	ldrb	r3, [r7, #15]
 80170b6:	4619      	mov	r1, r3
 80170b8:	6878      	ldr	r0, [r7, #4]
 80170ba:	f003 fee3 	bl	801ae84 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80170be:	6878      	ldr	r0, [r7, #4]
 80170c0:	f000 fa7a 	bl	80175b8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80170c4:	7bfb      	ldrb	r3, [r7, #15]
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d004      	beq.n	80170d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	2202      	movs	r2, #2
 80170ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80170d2:	e009      	b.n	80170e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	2201      	movs	r2, #1
 80170d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80170dc:	e004      	b.n	80170e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80170de:	6839      	ldr	r1, [r7, #0]
 80170e0:	6878      	ldr	r0, [r7, #4]
 80170e2:	f000 f99e 	bl	8017422 <USBD_CtlError>
  }
}
 80170e6:	bf00      	nop
 80170e8:	bf00      	nop
 80170ea:	3710      	adds	r7, #16
 80170ec:	46bd      	mov	sp, r7
 80170ee:	bd80      	pop	{r7, pc}

080170f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80170f0:	b580      	push	{r7, lr}
 80170f2:	b084      	sub	sp, #16
 80170f4:	af00      	add	r7, sp, #0
 80170f6:	6078      	str	r0, [r7, #4]
 80170f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80170fa:	2300      	movs	r3, #0
 80170fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80170fe:	683b      	ldr	r3, [r7, #0]
 8017100:	885b      	ldrh	r3, [r3, #2]
 8017102:	b2da      	uxtb	r2, r3
 8017104:	4b4e      	ldr	r3, [pc, #312]	; (8017240 <USBD_SetConfig+0x150>)
 8017106:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8017108:	4b4d      	ldr	r3, [pc, #308]	; (8017240 <USBD_SetConfig+0x150>)
 801710a:	781b      	ldrb	r3, [r3, #0]
 801710c:	2b01      	cmp	r3, #1
 801710e:	d905      	bls.n	801711c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8017110:	6839      	ldr	r1, [r7, #0]
 8017112:	6878      	ldr	r0, [r7, #4]
 8017114:	f000 f985 	bl	8017422 <USBD_CtlError>
    return USBD_FAIL;
 8017118:	2303      	movs	r3, #3
 801711a:	e08c      	b.n	8017236 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017122:	b2db      	uxtb	r3, r3
 8017124:	2b02      	cmp	r3, #2
 8017126:	d002      	beq.n	801712e <USBD_SetConfig+0x3e>
 8017128:	2b03      	cmp	r3, #3
 801712a:	d029      	beq.n	8017180 <USBD_SetConfig+0x90>
 801712c:	e075      	b.n	801721a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801712e:	4b44      	ldr	r3, [pc, #272]	; (8017240 <USBD_SetConfig+0x150>)
 8017130:	781b      	ldrb	r3, [r3, #0]
 8017132:	2b00      	cmp	r3, #0
 8017134:	d020      	beq.n	8017178 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8017136:	4b42      	ldr	r3, [pc, #264]	; (8017240 <USBD_SetConfig+0x150>)
 8017138:	781b      	ldrb	r3, [r3, #0]
 801713a:	461a      	mov	r2, r3
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017140:	4b3f      	ldr	r3, [pc, #252]	; (8017240 <USBD_SetConfig+0x150>)
 8017142:	781b      	ldrb	r3, [r3, #0]
 8017144:	4619      	mov	r1, r3
 8017146:	6878      	ldr	r0, [r7, #4]
 8017148:	f7fe ffe1 	bl	801610e <USBD_SetClassConfig>
 801714c:	4603      	mov	r3, r0
 801714e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8017150:	7bfb      	ldrb	r3, [r7, #15]
 8017152:	2b00      	cmp	r3, #0
 8017154:	d008      	beq.n	8017168 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8017156:	6839      	ldr	r1, [r7, #0]
 8017158:	6878      	ldr	r0, [r7, #4]
 801715a:	f000 f962 	bl	8017422 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	2202      	movs	r2, #2
 8017162:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017166:	e065      	b.n	8017234 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8017168:	6878      	ldr	r0, [r7, #4]
 801716a:	f000 fa25 	bl	80175b8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	2203      	movs	r2, #3
 8017172:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8017176:	e05d      	b.n	8017234 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017178:	6878      	ldr	r0, [r7, #4]
 801717a:	f000 fa1d 	bl	80175b8 <USBD_CtlSendStatus>
      break;
 801717e:	e059      	b.n	8017234 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017180:	4b2f      	ldr	r3, [pc, #188]	; (8017240 <USBD_SetConfig+0x150>)
 8017182:	781b      	ldrb	r3, [r3, #0]
 8017184:	2b00      	cmp	r3, #0
 8017186:	d112      	bne.n	80171ae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	2202      	movs	r2, #2
 801718c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8017190:	4b2b      	ldr	r3, [pc, #172]	; (8017240 <USBD_SetConfig+0x150>)
 8017192:	781b      	ldrb	r3, [r3, #0]
 8017194:	461a      	mov	r2, r3
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801719a:	4b29      	ldr	r3, [pc, #164]	; (8017240 <USBD_SetConfig+0x150>)
 801719c:	781b      	ldrb	r3, [r3, #0]
 801719e:	4619      	mov	r1, r3
 80171a0:	6878      	ldr	r0, [r7, #4]
 80171a2:	f7fe ffd0 	bl	8016146 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80171a6:	6878      	ldr	r0, [r7, #4]
 80171a8:	f000 fa06 	bl	80175b8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80171ac:	e042      	b.n	8017234 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80171ae:	4b24      	ldr	r3, [pc, #144]	; (8017240 <USBD_SetConfig+0x150>)
 80171b0:	781b      	ldrb	r3, [r3, #0]
 80171b2:	461a      	mov	r2, r3
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	685b      	ldr	r3, [r3, #4]
 80171b8:	429a      	cmp	r2, r3
 80171ba:	d02a      	beq.n	8017212 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	685b      	ldr	r3, [r3, #4]
 80171c0:	b2db      	uxtb	r3, r3
 80171c2:	4619      	mov	r1, r3
 80171c4:	6878      	ldr	r0, [r7, #4]
 80171c6:	f7fe ffbe 	bl	8016146 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80171ca:	4b1d      	ldr	r3, [pc, #116]	; (8017240 <USBD_SetConfig+0x150>)
 80171cc:	781b      	ldrb	r3, [r3, #0]
 80171ce:	461a      	mov	r2, r3
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80171d4:	4b1a      	ldr	r3, [pc, #104]	; (8017240 <USBD_SetConfig+0x150>)
 80171d6:	781b      	ldrb	r3, [r3, #0]
 80171d8:	4619      	mov	r1, r3
 80171da:	6878      	ldr	r0, [r7, #4]
 80171dc:	f7fe ff97 	bl	801610e <USBD_SetClassConfig>
 80171e0:	4603      	mov	r3, r0
 80171e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80171e4:	7bfb      	ldrb	r3, [r7, #15]
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d00f      	beq.n	801720a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80171ea:	6839      	ldr	r1, [r7, #0]
 80171ec:	6878      	ldr	r0, [r7, #4]
 80171ee:	f000 f918 	bl	8017422 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	685b      	ldr	r3, [r3, #4]
 80171f6:	b2db      	uxtb	r3, r3
 80171f8:	4619      	mov	r1, r3
 80171fa:	6878      	ldr	r0, [r7, #4]
 80171fc:	f7fe ffa3 	bl	8016146 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	2202      	movs	r2, #2
 8017204:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8017208:	e014      	b.n	8017234 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801720a:	6878      	ldr	r0, [r7, #4]
 801720c:	f000 f9d4 	bl	80175b8 <USBD_CtlSendStatus>
      break;
 8017210:	e010      	b.n	8017234 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017212:	6878      	ldr	r0, [r7, #4]
 8017214:	f000 f9d0 	bl	80175b8 <USBD_CtlSendStatus>
      break;
 8017218:	e00c      	b.n	8017234 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801721a:	6839      	ldr	r1, [r7, #0]
 801721c:	6878      	ldr	r0, [r7, #4]
 801721e:	f000 f900 	bl	8017422 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017222:	4b07      	ldr	r3, [pc, #28]	; (8017240 <USBD_SetConfig+0x150>)
 8017224:	781b      	ldrb	r3, [r3, #0]
 8017226:	4619      	mov	r1, r3
 8017228:	6878      	ldr	r0, [r7, #4]
 801722a:	f7fe ff8c 	bl	8016146 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801722e:	2303      	movs	r3, #3
 8017230:	73fb      	strb	r3, [r7, #15]
      break;
 8017232:	bf00      	nop
  }

  return ret;
 8017234:	7bfb      	ldrb	r3, [r7, #15]
}
 8017236:	4618      	mov	r0, r3
 8017238:	3710      	adds	r7, #16
 801723a:	46bd      	mov	sp, r7
 801723c:	bd80      	pop	{r7, pc}
 801723e:	bf00      	nop
 8017240:	240016a4 	.word	0x240016a4

08017244 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017244:	b580      	push	{r7, lr}
 8017246:	b082      	sub	sp, #8
 8017248:	af00      	add	r7, sp, #0
 801724a:	6078      	str	r0, [r7, #4]
 801724c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801724e:	683b      	ldr	r3, [r7, #0]
 8017250:	88db      	ldrh	r3, [r3, #6]
 8017252:	2b01      	cmp	r3, #1
 8017254:	d004      	beq.n	8017260 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8017256:	6839      	ldr	r1, [r7, #0]
 8017258:	6878      	ldr	r0, [r7, #4]
 801725a:	f000 f8e2 	bl	8017422 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801725e:	e023      	b.n	80172a8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017266:	b2db      	uxtb	r3, r3
 8017268:	2b02      	cmp	r3, #2
 801726a:	dc02      	bgt.n	8017272 <USBD_GetConfig+0x2e>
 801726c:	2b00      	cmp	r3, #0
 801726e:	dc03      	bgt.n	8017278 <USBD_GetConfig+0x34>
 8017270:	e015      	b.n	801729e <USBD_GetConfig+0x5a>
 8017272:	2b03      	cmp	r3, #3
 8017274:	d00b      	beq.n	801728e <USBD_GetConfig+0x4a>
 8017276:	e012      	b.n	801729e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	2200      	movs	r2, #0
 801727c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	3308      	adds	r3, #8
 8017282:	2201      	movs	r2, #1
 8017284:	4619      	mov	r1, r3
 8017286:	6878      	ldr	r0, [r7, #4]
 8017288:	f000 f93c 	bl	8017504 <USBD_CtlSendData>
        break;
 801728c:	e00c      	b.n	80172a8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	3304      	adds	r3, #4
 8017292:	2201      	movs	r2, #1
 8017294:	4619      	mov	r1, r3
 8017296:	6878      	ldr	r0, [r7, #4]
 8017298:	f000 f934 	bl	8017504 <USBD_CtlSendData>
        break;
 801729c:	e004      	b.n	80172a8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801729e:	6839      	ldr	r1, [r7, #0]
 80172a0:	6878      	ldr	r0, [r7, #4]
 80172a2:	f000 f8be 	bl	8017422 <USBD_CtlError>
        break;
 80172a6:	bf00      	nop
}
 80172a8:	bf00      	nop
 80172aa:	3708      	adds	r7, #8
 80172ac:	46bd      	mov	sp, r7
 80172ae:	bd80      	pop	{r7, pc}

080172b0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80172b0:	b580      	push	{r7, lr}
 80172b2:	b082      	sub	sp, #8
 80172b4:	af00      	add	r7, sp, #0
 80172b6:	6078      	str	r0, [r7, #4]
 80172b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80172c0:	b2db      	uxtb	r3, r3
 80172c2:	3b01      	subs	r3, #1
 80172c4:	2b02      	cmp	r3, #2
 80172c6:	d81e      	bhi.n	8017306 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80172c8:	683b      	ldr	r3, [r7, #0]
 80172ca:	88db      	ldrh	r3, [r3, #6]
 80172cc:	2b02      	cmp	r3, #2
 80172ce:	d004      	beq.n	80172da <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80172d0:	6839      	ldr	r1, [r7, #0]
 80172d2:	6878      	ldr	r0, [r7, #4]
 80172d4:	f000 f8a5 	bl	8017422 <USBD_CtlError>
        break;
 80172d8:	e01a      	b.n	8017310 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	2201      	movs	r2, #1
 80172de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d005      	beq.n	80172f6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	68db      	ldr	r3, [r3, #12]
 80172ee:	f043 0202 	orr.w	r2, r3, #2
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	330c      	adds	r3, #12
 80172fa:	2202      	movs	r2, #2
 80172fc:	4619      	mov	r1, r3
 80172fe:	6878      	ldr	r0, [r7, #4]
 8017300:	f000 f900 	bl	8017504 <USBD_CtlSendData>
      break;
 8017304:	e004      	b.n	8017310 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8017306:	6839      	ldr	r1, [r7, #0]
 8017308:	6878      	ldr	r0, [r7, #4]
 801730a:	f000 f88a 	bl	8017422 <USBD_CtlError>
      break;
 801730e:	bf00      	nop
  }
}
 8017310:	bf00      	nop
 8017312:	3708      	adds	r7, #8
 8017314:	46bd      	mov	sp, r7
 8017316:	bd80      	pop	{r7, pc}

08017318 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017318:	b580      	push	{r7, lr}
 801731a:	b082      	sub	sp, #8
 801731c:	af00      	add	r7, sp, #0
 801731e:	6078      	str	r0, [r7, #4]
 8017320:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017322:	683b      	ldr	r3, [r7, #0]
 8017324:	885b      	ldrh	r3, [r3, #2]
 8017326:	2b01      	cmp	r3, #1
 8017328:	d107      	bne.n	801733a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	2201      	movs	r2, #1
 801732e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8017332:	6878      	ldr	r0, [r7, #4]
 8017334:	f000 f940 	bl	80175b8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8017338:	e013      	b.n	8017362 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801733a:	683b      	ldr	r3, [r7, #0]
 801733c:	885b      	ldrh	r3, [r3, #2]
 801733e:	2b02      	cmp	r3, #2
 8017340:	d10b      	bne.n	801735a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8017342:	683b      	ldr	r3, [r7, #0]
 8017344:	889b      	ldrh	r3, [r3, #4]
 8017346:	0a1b      	lsrs	r3, r3, #8
 8017348:	b29b      	uxth	r3, r3
 801734a:	b2da      	uxtb	r2, r3
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8017352:	6878      	ldr	r0, [r7, #4]
 8017354:	f000 f930 	bl	80175b8 <USBD_CtlSendStatus>
}
 8017358:	e003      	b.n	8017362 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801735a:	6839      	ldr	r1, [r7, #0]
 801735c:	6878      	ldr	r0, [r7, #4]
 801735e:	f000 f860 	bl	8017422 <USBD_CtlError>
}
 8017362:	bf00      	nop
 8017364:	3708      	adds	r7, #8
 8017366:	46bd      	mov	sp, r7
 8017368:	bd80      	pop	{r7, pc}

0801736a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801736a:	b580      	push	{r7, lr}
 801736c:	b082      	sub	sp, #8
 801736e:	af00      	add	r7, sp, #0
 8017370:	6078      	str	r0, [r7, #4]
 8017372:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801737a:	b2db      	uxtb	r3, r3
 801737c:	3b01      	subs	r3, #1
 801737e:	2b02      	cmp	r3, #2
 8017380:	d80b      	bhi.n	801739a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017382:	683b      	ldr	r3, [r7, #0]
 8017384:	885b      	ldrh	r3, [r3, #2]
 8017386:	2b01      	cmp	r3, #1
 8017388:	d10c      	bne.n	80173a4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	2200      	movs	r2, #0
 801738e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8017392:	6878      	ldr	r0, [r7, #4]
 8017394:	f000 f910 	bl	80175b8 <USBD_CtlSendStatus>
      }
      break;
 8017398:	e004      	b.n	80173a4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801739a:	6839      	ldr	r1, [r7, #0]
 801739c:	6878      	ldr	r0, [r7, #4]
 801739e:	f000 f840 	bl	8017422 <USBD_CtlError>
      break;
 80173a2:	e000      	b.n	80173a6 <USBD_ClrFeature+0x3c>
      break;
 80173a4:	bf00      	nop
  }
}
 80173a6:	bf00      	nop
 80173a8:	3708      	adds	r7, #8
 80173aa:	46bd      	mov	sp, r7
 80173ac:	bd80      	pop	{r7, pc}

080173ae <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80173ae:	b580      	push	{r7, lr}
 80173b0:	b084      	sub	sp, #16
 80173b2:	af00      	add	r7, sp, #0
 80173b4:	6078      	str	r0, [r7, #4]
 80173b6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80173b8:	683b      	ldr	r3, [r7, #0]
 80173ba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80173bc:	68fb      	ldr	r3, [r7, #12]
 80173be:	781a      	ldrb	r2, [r3, #0]
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	3301      	adds	r3, #1
 80173c8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	781a      	ldrb	r2, [r3, #0]
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	3301      	adds	r3, #1
 80173d6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80173d8:	68f8      	ldr	r0, [r7, #12]
 80173da:	f7ff fa41 	bl	8016860 <SWAPBYTE>
 80173de:	4603      	mov	r3, r0
 80173e0:	461a      	mov	r2, r3
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	3301      	adds	r3, #1
 80173ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	3301      	adds	r3, #1
 80173f0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80173f2:	68f8      	ldr	r0, [r7, #12]
 80173f4:	f7ff fa34 	bl	8016860 <SWAPBYTE>
 80173f8:	4603      	mov	r3, r0
 80173fa:	461a      	mov	r2, r3
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8017400:	68fb      	ldr	r3, [r7, #12]
 8017402:	3301      	adds	r3, #1
 8017404:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017406:	68fb      	ldr	r3, [r7, #12]
 8017408:	3301      	adds	r3, #1
 801740a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801740c:	68f8      	ldr	r0, [r7, #12]
 801740e:	f7ff fa27 	bl	8016860 <SWAPBYTE>
 8017412:	4603      	mov	r3, r0
 8017414:	461a      	mov	r2, r3
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	80da      	strh	r2, [r3, #6]
}
 801741a:	bf00      	nop
 801741c:	3710      	adds	r7, #16
 801741e:	46bd      	mov	sp, r7
 8017420:	bd80      	pop	{r7, pc}

08017422 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017422:	b580      	push	{r7, lr}
 8017424:	b082      	sub	sp, #8
 8017426:	af00      	add	r7, sp, #0
 8017428:	6078      	str	r0, [r7, #4]
 801742a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801742c:	2180      	movs	r1, #128	; 0x80
 801742e:	6878      	ldr	r0, [r7, #4]
 8017430:	f003 fcbe 	bl	801adb0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8017434:	2100      	movs	r1, #0
 8017436:	6878      	ldr	r0, [r7, #4]
 8017438:	f003 fcba 	bl	801adb0 <USBD_LL_StallEP>
}
 801743c:	bf00      	nop
 801743e:	3708      	adds	r7, #8
 8017440:	46bd      	mov	sp, r7
 8017442:	bd80      	pop	{r7, pc}

08017444 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8017444:	b580      	push	{r7, lr}
 8017446:	b086      	sub	sp, #24
 8017448:	af00      	add	r7, sp, #0
 801744a:	60f8      	str	r0, [r7, #12]
 801744c:	60b9      	str	r1, [r7, #8]
 801744e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017450:	2300      	movs	r3, #0
 8017452:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8017454:	68fb      	ldr	r3, [r7, #12]
 8017456:	2b00      	cmp	r3, #0
 8017458:	d036      	beq.n	80174c8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801745a:	68fb      	ldr	r3, [r7, #12]
 801745c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801745e:	6938      	ldr	r0, [r7, #16]
 8017460:	f000 f836 	bl	80174d0 <USBD_GetLen>
 8017464:	4603      	mov	r3, r0
 8017466:	3301      	adds	r3, #1
 8017468:	b29b      	uxth	r3, r3
 801746a:	005b      	lsls	r3, r3, #1
 801746c:	b29a      	uxth	r2, r3
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8017472:	7dfb      	ldrb	r3, [r7, #23]
 8017474:	68ba      	ldr	r2, [r7, #8]
 8017476:	4413      	add	r3, r2
 8017478:	687a      	ldr	r2, [r7, #4]
 801747a:	7812      	ldrb	r2, [r2, #0]
 801747c:	701a      	strb	r2, [r3, #0]
  idx++;
 801747e:	7dfb      	ldrb	r3, [r7, #23]
 8017480:	3301      	adds	r3, #1
 8017482:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017484:	7dfb      	ldrb	r3, [r7, #23]
 8017486:	68ba      	ldr	r2, [r7, #8]
 8017488:	4413      	add	r3, r2
 801748a:	2203      	movs	r2, #3
 801748c:	701a      	strb	r2, [r3, #0]
  idx++;
 801748e:	7dfb      	ldrb	r3, [r7, #23]
 8017490:	3301      	adds	r3, #1
 8017492:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017494:	e013      	b.n	80174be <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8017496:	7dfb      	ldrb	r3, [r7, #23]
 8017498:	68ba      	ldr	r2, [r7, #8]
 801749a:	4413      	add	r3, r2
 801749c:	693a      	ldr	r2, [r7, #16]
 801749e:	7812      	ldrb	r2, [r2, #0]
 80174a0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80174a2:	693b      	ldr	r3, [r7, #16]
 80174a4:	3301      	adds	r3, #1
 80174a6:	613b      	str	r3, [r7, #16]
    idx++;
 80174a8:	7dfb      	ldrb	r3, [r7, #23]
 80174aa:	3301      	adds	r3, #1
 80174ac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80174ae:	7dfb      	ldrb	r3, [r7, #23]
 80174b0:	68ba      	ldr	r2, [r7, #8]
 80174b2:	4413      	add	r3, r2
 80174b4:	2200      	movs	r2, #0
 80174b6:	701a      	strb	r2, [r3, #0]
    idx++;
 80174b8:	7dfb      	ldrb	r3, [r7, #23]
 80174ba:	3301      	adds	r3, #1
 80174bc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80174be:	693b      	ldr	r3, [r7, #16]
 80174c0:	781b      	ldrb	r3, [r3, #0]
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d1e7      	bne.n	8017496 <USBD_GetString+0x52>
 80174c6:	e000      	b.n	80174ca <USBD_GetString+0x86>
    return;
 80174c8:	bf00      	nop
  }
}
 80174ca:	3718      	adds	r7, #24
 80174cc:	46bd      	mov	sp, r7
 80174ce:	bd80      	pop	{r7, pc}

080174d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80174d0:	b480      	push	{r7}
 80174d2:	b085      	sub	sp, #20
 80174d4:	af00      	add	r7, sp, #0
 80174d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80174d8:	2300      	movs	r3, #0
 80174da:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80174e0:	e005      	b.n	80174ee <USBD_GetLen+0x1e>
  {
    len++;
 80174e2:	7bfb      	ldrb	r3, [r7, #15]
 80174e4:	3301      	adds	r3, #1
 80174e6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80174e8:	68bb      	ldr	r3, [r7, #8]
 80174ea:	3301      	adds	r3, #1
 80174ec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80174ee:	68bb      	ldr	r3, [r7, #8]
 80174f0:	781b      	ldrb	r3, [r3, #0]
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d1f5      	bne.n	80174e2 <USBD_GetLen+0x12>
  }

  return len;
 80174f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80174f8:	4618      	mov	r0, r3
 80174fa:	3714      	adds	r7, #20
 80174fc:	46bd      	mov	sp, r7
 80174fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017502:	4770      	bx	lr

08017504 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8017504:	b580      	push	{r7, lr}
 8017506:	b084      	sub	sp, #16
 8017508:	af00      	add	r7, sp, #0
 801750a:	60f8      	str	r0, [r7, #12]
 801750c:	60b9      	str	r1, [r7, #8]
 801750e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8017510:	68fb      	ldr	r3, [r7, #12]
 8017512:	2202      	movs	r2, #2
 8017514:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	687a      	ldr	r2, [r7, #4]
 801751c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	687a      	ldr	r2, [r7, #4]
 8017522:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	68ba      	ldr	r2, [r7, #8]
 8017528:	2100      	movs	r1, #0
 801752a:	68f8      	ldr	r0, [r7, #12]
 801752c:	f003 fcc9 	bl	801aec2 <USBD_LL_Transmit>

  return USBD_OK;
 8017530:	2300      	movs	r3, #0
}
 8017532:	4618      	mov	r0, r3
 8017534:	3710      	adds	r7, #16
 8017536:	46bd      	mov	sp, r7
 8017538:	bd80      	pop	{r7, pc}

0801753a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801753a:	b580      	push	{r7, lr}
 801753c:	b084      	sub	sp, #16
 801753e:	af00      	add	r7, sp, #0
 8017540:	60f8      	str	r0, [r7, #12]
 8017542:	60b9      	str	r1, [r7, #8]
 8017544:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	68ba      	ldr	r2, [r7, #8]
 801754a:	2100      	movs	r1, #0
 801754c:	68f8      	ldr	r0, [r7, #12]
 801754e:	f003 fcb8 	bl	801aec2 <USBD_LL_Transmit>

  return USBD_OK;
 8017552:	2300      	movs	r3, #0
}
 8017554:	4618      	mov	r0, r3
 8017556:	3710      	adds	r7, #16
 8017558:	46bd      	mov	sp, r7
 801755a:	bd80      	pop	{r7, pc}

0801755c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801755c:	b580      	push	{r7, lr}
 801755e:	b084      	sub	sp, #16
 8017560:	af00      	add	r7, sp, #0
 8017562:	60f8      	str	r0, [r7, #12]
 8017564:	60b9      	str	r1, [r7, #8]
 8017566:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017568:	68fb      	ldr	r3, [r7, #12]
 801756a:	2203      	movs	r2, #3
 801756c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	687a      	ldr	r2, [r7, #4]
 8017574:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017578:	68fb      	ldr	r3, [r7, #12]
 801757a:	687a      	ldr	r2, [r7, #4]
 801757c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	68ba      	ldr	r2, [r7, #8]
 8017584:	2100      	movs	r1, #0
 8017586:	68f8      	ldr	r0, [r7, #12]
 8017588:	f003 fcbc 	bl	801af04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801758c:	2300      	movs	r3, #0
}
 801758e:	4618      	mov	r0, r3
 8017590:	3710      	adds	r7, #16
 8017592:	46bd      	mov	sp, r7
 8017594:	bd80      	pop	{r7, pc}

08017596 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017596:	b580      	push	{r7, lr}
 8017598:	b084      	sub	sp, #16
 801759a:	af00      	add	r7, sp, #0
 801759c:	60f8      	str	r0, [r7, #12]
 801759e:	60b9      	str	r1, [r7, #8]
 80175a0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	68ba      	ldr	r2, [r7, #8]
 80175a6:	2100      	movs	r1, #0
 80175a8:	68f8      	ldr	r0, [r7, #12]
 80175aa:	f003 fcab 	bl	801af04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80175ae:	2300      	movs	r3, #0
}
 80175b0:	4618      	mov	r0, r3
 80175b2:	3710      	adds	r7, #16
 80175b4:	46bd      	mov	sp, r7
 80175b6:	bd80      	pop	{r7, pc}

080175b8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80175b8:	b580      	push	{r7, lr}
 80175ba:	b082      	sub	sp, #8
 80175bc:	af00      	add	r7, sp, #0
 80175be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	2204      	movs	r2, #4
 80175c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80175c8:	2300      	movs	r3, #0
 80175ca:	2200      	movs	r2, #0
 80175cc:	2100      	movs	r1, #0
 80175ce:	6878      	ldr	r0, [r7, #4]
 80175d0:	f003 fc77 	bl	801aec2 <USBD_LL_Transmit>

  return USBD_OK;
 80175d4:	2300      	movs	r3, #0
}
 80175d6:	4618      	mov	r0, r3
 80175d8:	3708      	adds	r7, #8
 80175da:	46bd      	mov	sp, r7
 80175dc:	bd80      	pop	{r7, pc}

080175de <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80175de:	b580      	push	{r7, lr}
 80175e0:	b082      	sub	sp, #8
 80175e2:	af00      	add	r7, sp, #0
 80175e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	2205      	movs	r2, #5
 80175ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80175ee:	2300      	movs	r3, #0
 80175f0:	2200      	movs	r2, #0
 80175f2:	2100      	movs	r1, #0
 80175f4:	6878      	ldr	r0, [r7, #4]
 80175f6:	f003 fc85 	bl	801af04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80175fa:	2300      	movs	r3, #0
}
 80175fc:	4618      	mov	r0, r3
 80175fe:	3708      	adds	r7, #8
 8017600:	46bd      	mov	sp, r7
 8017602:	bd80      	pop	{r7, pc}

08017604 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8017604:	b580      	push	{r7, lr}
 8017606:	b084      	sub	sp, #16
 8017608:	af00      	add	r7, sp, #0
 801760a:	4603      	mov	r3, r0
 801760c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801760e:	79fb      	ldrb	r3, [r7, #7]
 8017610:	4a08      	ldr	r2, [pc, #32]	; (8017634 <disk_status+0x30>)
 8017612:	009b      	lsls	r3, r3, #2
 8017614:	4413      	add	r3, r2
 8017616:	685b      	ldr	r3, [r3, #4]
 8017618:	685b      	ldr	r3, [r3, #4]
 801761a:	79fa      	ldrb	r2, [r7, #7]
 801761c:	4905      	ldr	r1, [pc, #20]	; (8017634 <disk_status+0x30>)
 801761e:	440a      	add	r2, r1
 8017620:	7a12      	ldrb	r2, [r2, #8]
 8017622:	4610      	mov	r0, r2
 8017624:	4798      	blx	r3
 8017626:	4603      	mov	r3, r0
 8017628:	73fb      	strb	r3, [r7, #15]
  return stat;
 801762a:	7bfb      	ldrb	r3, [r7, #15]
}
 801762c:	4618      	mov	r0, r3
 801762e:	3710      	adds	r7, #16
 8017630:	46bd      	mov	sp, r7
 8017632:	bd80      	pop	{r7, pc}
 8017634:	240018d0 	.word	0x240018d0

08017638 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8017638:	b580      	push	{r7, lr}
 801763a:	b084      	sub	sp, #16
 801763c:	af00      	add	r7, sp, #0
 801763e:	4603      	mov	r3, r0
 8017640:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8017642:	2300      	movs	r3, #0
 8017644:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8017646:	79fb      	ldrb	r3, [r7, #7]
 8017648:	4a0d      	ldr	r2, [pc, #52]	; (8017680 <disk_initialize+0x48>)
 801764a:	5cd3      	ldrb	r3, [r2, r3]
 801764c:	2b00      	cmp	r3, #0
 801764e:	d111      	bne.n	8017674 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8017650:	79fb      	ldrb	r3, [r7, #7]
 8017652:	4a0b      	ldr	r2, [pc, #44]	; (8017680 <disk_initialize+0x48>)
 8017654:	2101      	movs	r1, #1
 8017656:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8017658:	79fb      	ldrb	r3, [r7, #7]
 801765a:	4a09      	ldr	r2, [pc, #36]	; (8017680 <disk_initialize+0x48>)
 801765c:	009b      	lsls	r3, r3, #2
 801765e:	4413      	add	r3, r2
 8017660:	685b      	ldr	r3, [r3, #4]
 8017662:	681b      	ldr	r3, [r3, #0]
 8017664:	79fa      	ldrb	r2, [r7, #7]
 8017666:	4906      	ldr	r1, [pc, #24]	; (8017680 <disk_initialize+0x48>)
 8017668:	440a      	add	r2, r1
 801766a:	7a12      	ldrb	r2, [r2, #8]
 801766c:	4610      	mov	r0, r2
 801766e:	4798      	blx	r3
 8017670:	4603      	mov	r3, r0
 8017672:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8017674:	7bfb      	ldrb	r3, [r7, #15]
}
 8017676:	4618      	mov	r0, r3
 8017678:	3710      	adds	r7, #16
 801767a:	46bd      	mov	sp, r7
 801767c:	bd80      	pop	{r7, pc}
 801767e:	bf00      	nop
 8017680:	240018d0 	.word	0x240018d0

08017684 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8017684:	b590      	push	{r4, r7, lr}
 8017686:	b087      	sub	sp, #28
 8017688:	af00      	add	r7, sp, #0
 801768a:	60b9      	str	r1, [r7, #8]
 801768c:	607a      	str	r2, [r7, #4]
 801768e:	603b      	str	r3, [r7, #0]
 8017690:	4603      	mov	r3, r0
 8017692:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8017694:	7bfb      	ldrb	r3, [r7, #15]
 8017696:	4a0a      	ldr	r2, [pc, #40]	; (80176c0 <disk_read+0x3c>)
 8017698:	009b      	lsls	r3, r3, #2
 801769a:	4413      	add	r3, r2
 801769c:	685b      	ldr	r3, [r3, #4]
 801769e:	689c      	ldr	r4, [r3, #8]
 80176a0:	7bfb      	ldrb	r3, [r7, #15]
 80176a2:	4a07      	ldr	r2, [pc, #28]	; (80176c0 <disk_read+0x3c>)
 80176a4:	4413      	add	r3, r2
 80176a6:	7a18      	ldrb	r0, [r3, #8]
 80176a8:	683b      	ldr	r3, [r7, #0]
 80176aa:	687a      	ldr	r2, [r7, #4]
 80176ac:	68b9      	ldr	r1, [r7, #8]
 80176ae:	47a0      	blx	r4
 80176b0:	4603      	mov	r3, r0
 80176b2:	75fb      	strb	r3, [r7, #23]
  return res;
 80176b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80176b6:	4618      	mov	r0, r3
 80176b8:	371c      	adds	r7, #28
 80176ba:	46bd      	mov	sp, r7
 80176bc:	bd90      	pop	{r4, r7, pc}
 80176be:	bf00      	nop
 80176c0:	240018d0 	.word	0x240018d0

080176c4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80176c4:	b590      	push	{r4, r7, lr}
 80176c6:	b087      	sub	sp, #28
 80176c8:	af00      	add	r7, sp, #0
 80176ca:	60b9      	str	r1, [r7, #8]
 80176cc:	607a      	str	r2, [r7, #4]
 80176ce:	603b      	str	r3, [r7, #0]
 80176d0:	4603      	mov	r3, r0
 80176d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80176d4:	7bfb      	ldrb	r3, [r7, #15]
 80176d6:	4a0a      	ldr	r2, [pc, #40]	; (8017700 <disk_write+0x3c>)
 80176d8:	009b      	lsls	r3, r3, #2
 80176da:	4413      	add	r3, r2
 80176dc:	685b      	ldr	r3, [r3, #4]
 80176de:	68dc      	ldr	r4, [r3, #12]
 80176e0:	7bfb      	ldrb	r3, [r7, #15]
 80176e2:	4a07      	ldr	r2, [pc, #28]	; (8017700 <disk_write+0x3c>)
 80176e4:	4413      	add	r3, r2
 80176e6:	7a18      	ldrb	r0, [r3, #8]
 80176e8:	683b      	ldr	r3, [r7, #0]
 80176ea:	687a      	ldr	r2, [r7, #4]
 80176ec:	68b9      	ldr	r1, [r7, #8]
 80176ee:	47a0      	blx	r4
 80176f0:	4603      	mov	r3, r0
 80176f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80176f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80176f6:	4618      	mov	r0, r3
 80176f8:	371c      	adds	r7, #28
 80176fa:	46bd      	mov	sp, r7
 80176fc:	bd90      	pop	{r4, r7, pc}
 80176fe:	bf00      	nop
 8017700:	240018d0 	.word	0x240018d0

08017704 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8017704:	b580      	push	{r7, lr}
 8017706:	b084      	sub	sp, #16
 8017708:	af00      	add	r7, sp, #0
 801770a:	4603      	mov	r3, r0
 801770c:	603a      	str	r2, [r7, #0]
 801770e:	71fb      	strb	r3, [r7, #7]
 8017710:	460b      	mov	r3, r1
 8017712:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8017714:	79fb      	ldrb	r3, [r7, #7]
 8017716:	4a09      	ldr	r2, [pc, #36]	; (801773c <disk_ioctl+0x38>)
 8017718:	009b      	lsls	r3, r3, #2
 801771a:	4413      	add	r3, r2
 801771c:	685b      	ldr	r3, [r3, #4]
 801771e:	691b      	ldr	r3, [r3, #16]
 8017720:	79fa      	ldrb	r2, [r7, #7]
 8017722:	4906      	ldr	r1, [pc, #24]	; (801773c <disk_ioctl+0x38>)
 8017724:	440a      	add	r2, r1
 8017726:	7a10      	ldrb	r0, [r2, #8]
 8017728:	79b9      	ldrb	r1, [r7, #6]
 801772a:	683a      	ldr	r2, [r7, #0]
 801772c:	4798      	blx	r3
 801772e:	4603      	mov	r3, r0
 8017730:	73fb      	strb	r3, [r7, #15]
  return res;
 8017732:	7bfb      	ldrb	r3, [r7, #15]
}
 8017734:	4618      	mov	r0, r3
 8017736:	3710      	adds	r7, #16
 8017738:	46bd      	mov	sp, r7
 801773a:	bd80      	pop	{r7, pc}
 801773c:	240018d0 	.word	0x240018d0

08017740 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8017740:	b480      	push	{r7}
 8017742:	b085      	sub	sp, #20
 8017744:	af00      	add	r7, sp, #0
 8017746:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	3301      	adds	r3, #1
 801774c:	781b      	ldrb	r3, [r3, #0]
 801774e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8017750:	89fb      	ldrh	r3, [r7, #14]
 8017752:	021b      	lsls	r3, r3, #8
 8017754:	b21a      	sxth	r2, r3
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	781b      	ldrb	r3, [r3, #0]
 801775a:	b21b      	sxth	r3, r3
 801775c:	4313      	orrs	r3, r2
 801775e:	b21b      	sxth	r3, r3
 8017760:	81fb      	strh	r3, [r7, #14]
	return rv;
 8017762:	89fb      	ldrh	r3, [r7, #14]
}
 8017764:	4618      	mov	r0, r3
 8017766:	3714      	adds	r7, #20
 8017768:	46bd      	mov	sp, r7
 801776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801776e:	4770      	bx	lr

08017770 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8017770:	b480      	push	{r7}
 8017772:	b085      	sub	sp, #20
 8017774:	af00      	add	r7, sp, #0
 8017776:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	3303      	adds	r3, #3
 801777c:	781b      	ldrb	r3, [r3, #0]
 801777e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8017780:	68fb      	ldr	r3, [r7, #12]
 8017782:	021b      	lsls	r3, r3, #8
 8017784:	687a      	ldr	r2, [r7, #4]
 8017786:	3202      	adds	r2, #2
 8017788:	7812      	ldrb	r2, [r2, #0]
 801778a:	4313      	orrs	r3, r2
 801778c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	021b      	lsls	r3, r3, #8
 8017792:	687a      	ldr	r2, [r7, #4]
 8017794:	3201      	adds	r2, #1
 8017796:	7812      	ldrb	r2, [r2, #0]
 8017798:	4313      	orrs	r3, r2
 801779a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	021b      	lsls	r3, r3, #8
 80177a0:	687a      	ldr	r2, [r7, #4]
 80177a2:	7812      	ldrb	r2, [r2, #0]
 80177a4:	4313      	orrs	r3, r2
 80177a6:	60fb      	str	r3, [r7, #12]
	return rv;
 80177a8:	68fb      	ldr	r3, [r7, #12]
}
 80177aa:	4618      	mov	r0, r3
 80177ac:	3714      	adds	r7, #20
 80177ae:	46bd      	mov	sp, r7
 80177b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177b4:	4770      	bx	lr

080177b6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80177b6:	b480      	push	{r7}
 80177b8:	b083      	sub	sp, #12
 80177ba:	af00      	add	r7, sp, #0
 80177bc:	6078      	str	r0, [r7, #4]
 80177be:	460b      	mov	r3, r1
 80177c0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	1c5a      	adds	r2, r3, #1
 80177c6:	607a      	str	r2, [r7, #4]
 80177c8:	887a      	ldrh	r2, [r7, #2]
 80177ca:	b2d2      	uxtb	r2, r2
 80177cc:	701a      	strb	r2, [r3, #0]
 80177ce:	887b      	ldrh	r3, [r7, #2]
 80177d0:	0a1b      	lsrs	r3, r3, #8
 80177d2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	1c5a      	adds	r2, r3, #1
 80177d8:	607a      	str	r2, [r7, #4]
 80177da:	887a      	ldrh	r2, [r7, #2]
 80177dc:	b2d2      	uxtb	r2, r2
 80177de:	701a      	strb	r2, [r3, #0]
}
 80177e0:	bf00      	nop
 80177e2:	370c      	adds	r7, #12
 80177e4:	46bd      	mov	sp, r7
 80177e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ea:	4770      	bx	lr

080177ec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80177ec:	b480      	push	{r7}
 80177ee:	b083      	sub	sp, #12
 80177f0:	af00      	add	r7, sp, #0
 80177f2:	6078      	str	r0, [r7, #4]
 80177f4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	1c5a      	adds	r2, r3, #1
 80177fa:	607a      	str	r2, [r7, #4]
 80177fc:	683a      	ldr	r2, [r7, #0]
 80177fe:	b2d2      	uxtb	r2, r2
 8017800:	701a      	strb	r2, [r3, #0]
 8017802:	683b      	ldr	r3, [r7, #0]
 8017804:	0a1b      	lsrs	r3, r3, #8
 8017806:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	1c5a      	adds	r2, r3, #1
 801780c:	607a      	str	r2, [r7, #4]
 801780e:	683a      	ldr	r2, [r7, #0]
 8017810:	b2d2      	uxtb	r2, r2
 8017812:	701a      	strb	r2, [r3, #0]
 8017814:	683b      	ldr	r3, [r7, #0]
 8017816:	0a1b      	lsrs	r3, r3, #8
 8017818:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	1c5a      	adds	r2, r3, #1
 801781e:	607a      	str	r2, [r7, #4]
 8017820:	683a      	ldr	r2, [r7, #0]
 8017822:	b2d2      	uxtb	r2, r2
 8017824:	701a      	strb	r2, [r3, #0]
 8017826:	683b      	ldr	r3, [r7, #0]
 8017828:	0a1b      	lsrs	r3, r3, #8
 801782a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	1c5a      	adds	r2, r3, #1
 8017830:	607a      	str	r2, [r7, #4]
 8017832:	683a      	ldr	r2, [r7, #0]
 8017834:	b2d2      	uxtb	r2, r2
 8017836:	701a      	strb	r2, [r3, #0]
}
 8017838:	bf00      	nop
 801783a:	370c      	adds	r7, #12
 801783c:	46bd      	mov	sp, r7
 801783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017842:	4770      	bx	lr

08017844 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8017844:	b480      	push	{r7}
 8017846:	b087      	sub	sp, #28
 8017848:	af00      	add	r7, sp, #0
 801784a:	60f8      	str	r0, [r7, #12]
 801784c:	60b9      	str	r1, [r7, #8]
 801784e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8017854:	68bb      	ldr	r3, [r7, #8]
 8017856:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	2b00      	cmp	r3, #0
 801785c:	d00d      	beq.n	801787a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801785e:	693a      	ldr	r2, [r7, #16]
 8017860:	1c53      	adds	r3, r2, #1
 8017862:	613b      	str	r3, [r7, #16]
 8017864:	697b      	ldr	r3, [r7, #20]
 8017866:	1c59      	adds	r1, r3, #1
 8017868:	6179      	str	r1, [r7, #20]
 801786a:	7812      	ldrb	r2, [r2, #0]
 801786c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	3b01      	subs	r3, #1
 8017872:	607b      	str	r3, [r7, #4]
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	2b00      	cmp	r3, #0
 8017878:	d1f1      	bne.n	801785e <mem_cpy+0x1a>
	}
}
 801787a:	bf00      	nop
 801787c:	371c      	adds	r7, #28
 801787e:	46bd      	mov	sp, r7
 8017880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017884:	4770      	bx	lr

08017886 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8017886:	b480      	push	{r7}
 8017888:	b087      	sub	sp, #28
 801788a:	af00      	add	r7, sp, #0
 801788c:	60f8      	str	r0, [r7, #12]
 801788e:	60b9      	str	r1, [r7, #8]
 8017890:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8017892:	68fb      	ldr	r3, [r7, #12]
 8017894:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8017896:	697b      	ldr	r3, [r7, #20]
 8017898:	1c5a      	adds	r2, r3, #1
 801789a:	617a      	str	r2, [r7, #20]
 801789c:	68ba      	ldr	r2, [r7, #8]
 801789e:	b2d2      	uxtb	r2, r2
 80178a0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	3b01      	subs	r3, #1
 80178a6:	607b      	str	r3, [r7, #4]
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d1f3      	bne.n	8017896 <mem_set+0x10>
}
 80178ae:	bf00      	nop
 80178b0:	bf00      	nop
 80178b2:	371c      	adds	r7, #28
 80178b4:	46bd      	mov	sp, r7
 80178b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ba:	4770      	bx	lr

080178bc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80178bc:	b480      	push	{r7}
 80178be:	b089      	sub	sp, #36	; 0x24
 80178c0:	af00      	add	r7, sp, #0
 80178c2:	60f8      	str	r0, [r7, #12]
 80178c4:	60b9      	str	r1, [r7, #8]
 80178c6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80178c8:	68fb      	ldr	r3, [r7, #12]
 80178ca:	61fb      	str	r3, [r7, #28]
 80178cc:	68bb      	ldr	r3, [r7, #8]
 80178ce:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80178d0:	2300      	movs	r3, #0
 80178d2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80178d4:	69fb      	ldr	r3, [r7, #28]
 80178d6:	1c5a      	adds	r2, r3, #1
 80178d8:	61fa      	str	r2, [r7, #28]
 80178da:	781b      	ldrb	r3, [r3, #0]
 80178dc:	4619      	mov	r1, r3
 80178de:	69bb      	ldr	r3, [r7, #24]
 80178e0:	1c5a      	adds	r2, r3, #1
 80178e2:	61ba      	str	r2, [r7, #24]
 80178e4:	781b      	ldrb	r3, [r3, #0]
 80178e6:	1acb      	subs	r3, r1, r3
 80178e8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	3b01      	subs	r3, #1
 80178ee:	607b      	str	r3, [r7, #4]
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d002      	beq.n	80178fc <mem_cmp+0x40>
 80178f6:	697b      	ldr	r3, [r7, #20]
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d0eb      	beq.n	80178d4 <mem_cmp+0x18>

	return r;
 80178fc:	697b      	ldr	r3, [r7, #20]
}
 80178fe:	4618      	mov	r0, r3
 8017900:	3724      	adds	r7, #36	; 0x24
 8017902:	46bd      	mov	sp, r7
 8017904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017908:	4770      	bx	lr

0801790a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801790a:	b480      	push	{r7}
 801790c:	b083      	sub	sp, #12
 801790e:	af00      	add	r7, sp, #0
 8017910:	6078      	str	r0, [r7, #4]
 8017912:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8017914:	e002      	b.n	801791c <chk_chr+0x12>
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	3301      	adds	r3, #1
 801791a:	607b      	str	r3, [r7, #4]
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	781b      	ldrb	r3, [r3, #0]
 8017920:	2b00      	cmp	r3, #0
 8017922:	d005      	beq.n	8017930 <chk_chr+0x26>
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	781b      	ldrb	r3, [r3, #0]
 8017928:	461a      	mov	r2, r3
 801792a:	683b      	ldr	r3, [r7, #0]
 801792c:	4293      	cmp	r3, r2
 801792e:	d1f2      	bne.n	8017916 <chk_chr+0xc>
	return *str;
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	781b      	ldrb	r3, [r3, #0]
}
 8017934:	4618      	mov	r0, r3
 8017936:	370c      	adds	r7, #12
 8017938:	46bd      	mov	sp, r7
 801793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801793e:	4770      	bx	lr

08017940 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8017940:	b480      	push	{r7}
 8017942:	b085      	sub	sp, #20
 8017944:	af00      	add	r7, sp, #0
 8017946:	6078      	str	r0, [r7, #4]
 8017948:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801794a:	2300      	movs	r3, #0
 801794c:	60bb      	str	r3, [r7, #8]
 801794e:	68bb      	ldr	r3, [r7, #8]
 8017950:	60fb      	str	r3, [r7, #12]
 8017952:	e029      	b.n	80179a8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8017954:	4a27      	ldr	r2, [pc, #156]	; (80179f4 <chk_lock+0xb4>)
 8017956:	68fb      	ldr	r3, [r7, #12]
 8017958:	011b      	lsls	r3, r3, #4
 801795a:	4413      	add	r3, r2
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	2b00      	cmp	r3, #0
 8017960:	d01d      	beq.n	801799e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017962:	4a24      	ldr	r2, [pc, #144]	; (80179f4 <chk_lock+0xb4>)
 8017964:	68fb      	ldr	r3, [r7, #12]
 8017966:	011b      	lsls	r3, r3, #4
 8017968:	4413      	add	r3, r2
 801796a:	681a      	ldr	r2, [r3, #0]
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	429a      	cmp	r2, r3
 8017972:	d116      	bne.n	80179a2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8017974:	4a1f      	ldr	r2, [pc, #124]	; (80179f4 <chk_lock+0xb4>)
 8017976:	68fb      	ldr	r3, [r7, #12]
 8017978:	011b      	lsls	r3, r3, #4
 801797a:	4413      	add	r3, r2
 801797c:	3304      	adds	r3, #4
 801797e:	681a      	ldr	r2, [r3, #0]
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017984:	429a      	cmp	r2, r3
 8017986:	d10c      	bne.n	80179a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017988:	4a1a      	ldr	r2, [pc, #104]	; (80179f4 <chk_lock+0xb4>)
 801798a:	68fb      	ldr	r3, [r7, #12]
 801798c:	011b      	lsls	r3, r3, #4
 801798e:	4413      	add	r3, r2
 8017990:	3308      	adds	r3, #8
 8017992:	681a      	ldr	r2, [r3, #0]
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8017998:	429a      	cmp	r2, r3
 801799a:	d102      	bne.n	80179a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801799c:	e007      	b.n	80179ae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801799e:	2301      	movs	r3, #1
 80179a0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80179a2:	68fb      	ldr	r3, [r7, #12]
 80179a4:	3301      	adds	r3, #1
 80179a6:	60fb      	str	r3, [r7, #12]
 80179a8:	68fb      	ldr	r3, [r7, #12]
 80179aa:	2b01      	cmp	r3, #1
 80179ac:	d9d2      	bls.n	8017954 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80179ae:	68fb      	ldr	r3, [r7, #12]
 80179b0:	2b02      	cmp	r3, #2
 80179b2:	d109      	bne.n	80179c8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80179b4:	68bb      	ldr	r3, [r7, #8]
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d102      	bne.n	80179c0 <chk_lock+0x80>
 80179ba:	683b      	ldr	r3, [r7, #0]
 80179bc:	2b02      	cmp	r3, #2
 80179be:	d101      	bne.n	80179c4 <chk_lock+0x84>
 80179c0:	2300      	movs	r3, #0
 80179c2:	e010      	b.n	80179e6 <chk_lock+0xa6>
 80179c4:	2312      	movs	r3, #18
 80179c6:	e00e      	b.n	80179e6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80179c8:	683b      	ldr	r3, [r7, #0]
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d108      	bne.n	80179e0 <chk_lock+0xa0>
 80179ce:	4a09      	ldr	r2, [pc, #36]	; (80179f4 <chk_lock+0xb4>)
 80179d0:	68fb      	ldr	r3, [r7, #12]
 80179d2:	011b      	lsls	r3, r3, #4
 80179d4:	4413      	add	r3, r2
 80179d6:	330c      	adds	r3, #12
 80179d8:	881b      	ldrh	r3, [r3, #0]
 80179da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80179de:	d101      	bne.n	80179e4 <chk_lock+0xa4>
 80179e0:	2310      	movs	r3, #16
 80179e2:	e000      	b.n	80179e6 <chk_lock+0xa6>
 80179e4:	2300      	movs	r3, #0
}
 80179e6:	4618      	mov	r0, r3
 80179e8:	3714      	adds	r7, #20
 80179ea:	46bd      	mov	sp, r7
 80179ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179f0:	4770      	bx	lr
 80179f2:	bf00      	nop
 80179f4:	240016b0 	.word	0x240016b0

080179f8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80179f8:	b480      	push	{r7}
 80179fa:	b083      	sub	sp, #12
 80179fc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80179fe:	2300      	movs	r3, #0
 8017a00:	607b      	str	r3, [r7, #4]
 8017a02:	e002      	b.n	8017a0a <enq_lock+0x12>
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	3301      	adds	r3, #1
 8017a08:	607b      	str	r3, [r7, #4]
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	2b01      	cmp	r3, #1
 8017a0e:	d806      	bhi.n	8017a1e <enq_lock+0x26>
 8017a10:	4a09      	ldr	r2, [pc, #36]	; (8017a38 <enq_lock+0x40>)
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	011b      	lsls	r3, r3, #4
 8017a16:	4413      	add	r3, r2
 8017a18:	681b      	ldr	r3, [r3, #0]
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d1f2      	bne.n	8017a04 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	2b02      	cmp	r3, #2
 8017a22:	bf14      	ite	ne
 8017a24:	2301      	movne	r3, #1
 8017a26:	2300      	moveq	r3, #0
 8017a28:	b2db      	uxtb	r3, r3
}
 8017a2a:	4618      	mov	r0, r3
 8017a2c:	370c      	adds	r7, #12
 8017a2e:	46bd      	mov	sp, r7
 8017a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a34:	4770      	bx	lr
 8017a36:	bf00      	nop
 8017a38:	240016b0 	.word	0x240016b0

08017a3c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8017a3c:	b480      	push	{r7}
 8017a3e:	b085      	sub	sp, #20
 8017a40:	af00      	add	r7, sp, #0
 8017a42:	6078      	str	r0, [r7, #4]
 8017a44:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017a46:	2300      	movs	r3, #0
 8017a48:	60fb      	str	r3, [r7, #12]
 8017a4a:	e01f      	b.n	8017a8c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8017a4c:	4a41      	ldr	r2, [pc, #260]	; (8017b54 <inc_lock+0x118>)
 8017a4e:	68fb      	ldr	r3, [r7, #12]
 8017a50:	011b      	lsls	r3, r3, #4
 8017a52:	4413      	add	r3, r2
 8017a54:	681a      	ldr	r2, [r3, #0]
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	681b      	ldr	r3, [r3, #0]
 8017a5a:	429a      	cmp	r2, r3
 8017a5c:	d113      	bne.n	8017a86 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8017a5e:	4a3d      	ldr	r2, [pc, #244]	; (8017b54 <inc_lock+0x118>)
 8017a60:	68fb      	ldr	r3, [r7, #12]
 8017a62:	011b      	lsls	r3, r3, #4
 8017a64:	4413      	add	r3, r2
 8017a66:	3304      	adds	r3, #4
 8017a68:	681a      	ldr	r2, [r3, #0]
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8017a6e:	429a      	cmp	r2, r3
 8017a70:	d109      	bne.n	8017a86 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8017a72:	4a38      	ldr	r2, [pc, #224]	; (8017b54 <inc_lock+0x118>)
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	011b      	lsls	r3, r3, #4
 8017a78:	4413      	add	r3, r2
 8017a7a:	3308      	adds	r3, #8
 8017a7c:	681a      	ldr	r2, [r3, #0]
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8017a82:	429a      	cmp	r2, r3
 8017a84:	d006      	beq.n	8017a94 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	3301      	adds	r3, #1
 8017a8a:	60fb      	str	r3, [r7, #12]
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	2b01      	cmp	r3, #1
 8017a90:	d9dc      	bls.n	8017a4c <inc_lock+0x10>
 8017a92:	e000      	b.n	8017a96 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8017a94:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8017a96:	68fb      	ldr	r3, [r7, #12]
 8017a98:	2b02      	cmp	r3, #2
 8017a9a:	d132      	bne.n	8017b02 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017a9c:	2300      	movs	r3, #0
 8017a9e:	60fb      	str	r3, [r7, #12]
 8017aa0:	e002      	b.n	8017aa8 <inc_lock+0x6c>
 8017aa2:	68fb      	ldr	r3, [r7, #12]
 8017aa4:	3301      	adds	r3, #1
 8017aa6:	60fb      	str	r3, [r7, #12]
 8017aa8:	68fb      	ldr	r3, [r7, #12]
 8017aaa:	2b01      	cmp	r3, #1
 8017aac:	d806      	bhi.n	8017abc <inc_lock+0x80>
 8017aae:	4a29      	ldr	r2, [pc, #164]	; (8017b54 <inc_lock+0x118>)
 8017ab0:	68fb      	ldr	r3, [r7, #12]
 8017ab2:	011b      	lsls	r3, r3, #4
 8017ab4:	4413      	add	r3, r2
 8017ab6:	681b      	ldr	r3, [r3, #0]
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d1f2      	bne.n	8017aa2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8017abc:	68fb      	ldr	r3, [r7, #12]
 8017abe:	2b02      	cmp	r3, #2
 8017ac0:	d101      	bne.n	8017ac6 <inc_lock+0x8a>
 8017ac2:	2300      	movs	r3, #0
 8017ac4:	e040      	b.n	8017b48 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	681a      	ldr	r2, [r3, #0]
 8017aca:	4922      	ldr	r1, [pc, #136]	; (8017b54 <inc_lock+0x118>)
 8017acc:	68fb      	ldr	r3, [r7, #12]
 8017ace:	011b      	lsls	r3, r3, #4
 8017ad0:	440b      	add	r3, r1
 8017ad2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	689a      	ldr	r2, [r3, #8]
 8017ad8:	491e      	ldr	r1, [pc, #120]	; (8017b54 <inc_lock+0x118>)
 8017ada:	68fb      	ldr	r3, [r7, #12]
 8017adc:	011b      	lsls	r3, r3, #4
 8017ade:	440b      	add	r3, r1
 8017ae0:	3304      	adds	r3, #4
 8017ae2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	695a      	ldr	r2, [r3, #20]
 8017ae8:	491a      	ldr	r1, [pc, #104]	; (8017b54 <inc_lock+0x118>)
 8017aea:	68fb      	ldr	r3, [r7, #12]
 8017aec:	011b      	lsls	r3, r3, #4
 8017aee:	440b      	add	r3, r1
 8017af0:	3308      	adds	r3, #8
 8017af2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8017af4:	4a17      	ldr	r2, [pc, #92]	; (8017b54 <inc_lock+0x118>)
 8017af6:	68fb      	ldr	r3, [r7, #12]
 8017af8:	011b      	lsls	r3, r3, #4
 8017afa:	4413      	add	r3, r2
 8017afc:	330c      	adds	r3, #12
 8017afe:	2200      	movs	r2, #0
 8017b00:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8017b02:	683b      	ldr	r3, [r7, #0]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d009      	beq.n	8017b1c <inc_lock+0xe0>
 8017b08:	4a12      	ldr	r2, [pc, #72]	; (8017b54 <inc_lock+0x118>)
 8017b0a:	68fb      	ldr	r3, [r7, #12]
 8017b0c:	011b      	lsls	r3, r3, #4
 8017b0e:	4413      	add	r3, r2
 8017b10:	330c      	adds	r3, #12
 8017b12:	881b      	ldrh	r3, [r3, #0]
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d001      	beq.n	8017b1c <inc_lock+0xe0>
 8017b18:	2300      	movs	r3, #0
 8017b1a:	e015      	b.n	8017b48 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8017b1c:	683b      	ldr	r3, [r7, #0]
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d108      	bne.n	8017b34 <inc_lock+0xf8>
 8017b22:	4a0c      	ldr	r2, [pc, #48]	; (8017b54 <inc_lock+0x118>)
 8017b24:	68fb      	ldr	r3, [r7, #12]
 8017b26:	011b      	lsls	r3, r3, #4
 8017b28:	4413      	add	r3, r2
 8017b2a:	330c      	adds	r3, #12
 8017b2c:	881b      	ldrh	r3, [r3, #0]
 8017b2e:	3301      	adds	r3, #1
 8017b30:	b29a      	uxth	r2, r3
 8017b32:	e001      	b.n	8017b38 <inc_lock+0xfc>
 8017b34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017b38:	4906      	ldr	r1, [pc, #24]	; (8017b54 <inc_lock+0x118>)
 8017b3a:	68fb      	ldr	r3, [r7, #12]
 8017b3c:	011b      	lsls	r3, r3, #4
 8017b3e:	440b      	add	r3, r1
 8017b40:	330c      	adds	r3, #12
 8017b42:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8017b44:	68fb      	ldr	r3, [r7, #12]
 8017b46:	3301      	adds	r3, #1
}
 8017b48:	4618      	mov	r0, r3
 8017b4a:	3714      	adds	r7, #20
 8017b4c:	46bd      	mov	sp, r7
 8017b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b52:	4770      	bx	lr
 8017b54:	240016b0 	.word	0x240016b0

08017b58 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8017b58:	b480      	push	{r7}
 8017b5a:	b085      	sub	sp, #20
 8017b5c:	af00      	add	r7, sp, #0
 8017b5e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	3b01      	subs	r3, #1
 8017b64:	607b      	str	r3, [r7, #4]
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	2b01      	cmp	r3, #1
 8017b6a:	d825      	bhi.n	8017bb8 <dec_lock+0x60>
		n = Files[i].ctr;
 8017b6c:	4a17      	ldr	r2, [pc, #92]	; (8017bcc <dec_lock+0x74>)
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	011b      	lsls	r3, r3, #4
 8017b72:	4413      	add	r3, r2
 8017b74:	330c      	adds	r3, #12
 8017b76:	881b      	ldrh	r3, [r3, #0]
 8017b78:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8017b7a:	89fb      	ldrh	r3, [r7, #14]
 8017b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017b80:	d101      	bne.n	8017b86 <dec_lock+0x2e>
 8017b82:	2300      	movs	r3, #0
 8017b84:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8017b86:	89fb      	ldrh	r3, [r7, #14]
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d002      	beq.n	8017b92 <dec_lock+0x3a>
 8017b8c:	89fb      	ldrh	r3, [r7, #14]
 8017b8e:	3b01      	subs	r3, #1
 8017b90:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8017b92:	4a0e      	ldr	r2, [pc, #56]	; (8017bcc <dec_lock+0x74>)
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	011b      	lsls	r3, r3, #4
 8017b98:	4413      	add	r3, r2
 8017b9a:	330c      	adds	r3, #12
 8017b9c:	89fa      	ldrh	r2, [r7, #14]
 8017b9e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8017ba0:	89fb      	ldrh	r3, [r7, #14]
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d105      	bne.n	8017bb2 <dec_lock+0x5a>
 8017ba6:	4a09      	ldr	r2, [pc, #36]	; (8017bcc <dec_lock+0x74>)
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	011b      	lsls	r3, r3, #4
 8017bac:	4413      	add	r3, r2
 8017bae:	2200      	movs	r2, #0
 8017bb0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8017bb2:	2300      	movs	r3, #0
 8017bb4:	737b      	strb	r3, [r7, #13]
 8017bb6:	e001      	b.n	8017bbc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8017bb8:	2302      	movs	r3, #2
 8017bba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8017bbc:	7b7b      	ldrb	r3, [r7, #13]
}
 8017bbe:	4618      	mov	r0, r3
 8017bc0:	3714      	adds	r7, #20
 8017bc2:	46bd      	mov	sp, r7
 8017bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bc8:	4770      	bx	lr
 8017bca:	bf00      	nop
 8017bcc:	240016b0 	.word	0x240016b0

08017bd0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8017bd0:	b480      	push	{r7}
 8017bd2:	b085      	sub	sp, #20
 8017bd4:	af00      	add	r7, sp, #0
 8017bd6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8017bd8:	2300      	movs	r3, #0
 8017bda:	60fb      	str	r3, [r7, #12]
 8017bdc:	e010      	b.n	8017c00 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8017bde:	4a0d      	ldr	r2, [pc, #52]	; (8017c14 <clear_lock+0x44>)
 8017be0:	68fb      	ldr	r3, [r7, #12]
 8017be2:	011b      	lsls	r3, r3, #4
 8017be4:	4413      	add	r3, r2
 8017be6:	681b      	ldr	r3, [r3, #0]
 8017be8:	687a      	ldr	r2, [r7, #4]
 8017bea:	429a      	cmp	r2, r3
 8017bec:	d105      	bne.n	8017bfa <clear_lock+0x2a>
 8017bee:	4a09      	ldr	r2, [pc, #36]	; (8017c14 <clear_lock+0x44>)
 8017bf0:	68fb      	ldr	r3, [r7, #12]
 8017bf2:	011b      	lsls	r3, r3, #4
 8017bf4:	4413      	add	r3, r2
 8017bf6:	2200      	movs	r2, #0
 8017bf8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8017bfa:	68fb      	ldr	r3, [r7, #12]
 8017bfc:	3301      	adds	r3, #1
 8017bfe:	60fb      	str	r3, [r7, #12]
 8017c00:	68fb      	ldr	r3, [r7, #12]
 8017c02:	2b01      	cmp	r3, #1
 8017c04:	d9eb      	bls.n	8017bde <clear_lock+0xe>
	}
}
 8017c06:	bf00      	nop
 8017c08:	bf00      	nop
 8017c0a:	3714      	adds	r7, #20
 8017c0c:	46bd      	mov	sp, r7
 8017c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c12:	4770      	bx	lr
 8017c14:	240016b0 	.word	0x240016b0

08017c18 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8017c18:	b580      	push	{r7, lr}
 8017c1a:	b086      	sub	sp, #24
 8017c1c:	af00      	add	r7, sp, #0
 8017c1e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8017c20:	2300      	movs	r3, #0
 8017c22:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	78db      	ldrb	r3, [r3, #3]
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d034      	beq.n	8017c96 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017c30:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	7858      	ldrb	r0, [r3, #1]
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017c3c:	2301      	movs	r3, #1
 8017c3e:	697a      	ldr	r2, [r7, #20]
 8017c40:	f7ff fd40 	bl	80176c4 <disk_write>
 8017c44:	4603      	mov	r3, r0
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	d002      	beq.n	8017c50 <sync_window+0x38>
			res = FR_DISK_ERR;
 8017c4a:	2301      	movs	r3, #1
 8017c4c:	73fb      	strb	r3, [r7, #15]
 8017c4e:	e022      	b.n	8017c96 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	2200      	movs	r2, #0
 8017c54:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c5a:	697a      	ldr	r2, [r7, #20]
 8017c5c:	1ad2      	subs	r2, r2, r3
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	6a1b      	ldr	r3, [r3, #32]
 8017c62:	429a      	cmp	r2, r3
 8017c64:	d217      	bcs.n	8017c96 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	789b      	ldrb	r3, [r3, #2]
 8017c6a:	613b      	str	r3, [r7, #16]
 8017c6c:	e010      	b.n	8017c90 <sync_window+0x78>
					wsect += fs->fsize;
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	6a1b      	ldr	r3, [r3, #32]
 8017c72:	697a      	ldr	r2, [r7, #20]
 8017c74:	4413      	add	r3, r2
 8017c76:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	7858      	ldrb	r0, [r3, #1]
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017c82:	2301      	movs	r3, #1
 8017c84:	697a      	ldr	r2, [r7, #20]
 8017c86:	f7ff fd1d 	bl	80176c4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017c8a:	693b      	ldr	r3, [r7, #16]
 8017c8c:	3b01      	subs	r3, #1
 8017c8e:	613b      	str	r3, [r7, #16]
 8017c90:	693b      	ldr	r3, [r7, #16]
 8017c92:	2b01      	cmp	r3, #1
 8017c94:	d8eb      	bhi.n	8017c6e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8017c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8017c98:	4618      	mov	r0, r3
 8017c9a:	3718      	adds	r7, #24
 8017c9c:	46bd      	mov	sp, r7
 8017c9e:	bd80      	pop	{r7, pc}

08017ca0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8017ca0:	b580      	push	{r7, lr}
 8017ca2:	b084      	sub	sp, #16
 8017ca4:	af00      	add	r7, sp, #0
 8017ca6:	6078      	str	r0, [r7, #4]
 8017ca8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8017caa:	2300      	movs	r3, #0
 8017cac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017cb2:	683a      	ldr	r2, [r7, #0]
 8017cb4:	429a      	cmp	r2, r3
 8017cb6:	d01b      	beq.n	8017cf0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8017cb8:	6878      	ldr	r0, [r7, #4]
 8017cba:	f7ff ffad 	bl	8017c18 <sync_window>
 8017cbe:	4603      	mov	r3, r0
 8017cc0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8017cc2:	7bfb      	ldrb	r3, [r7, #15]
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	d113      	bne.n	8017cf0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	7858      	ldrb	r0, [r3, #1]
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017cd2:	2301      	movs	r3, #1
 8017cd4:	683a      	ldr	r2, [r7, #0]
 8017cd6:	f7ff fcd5 	bl	8017684 <disk_read>
 8017cda:	4603      	mov	r3, r0
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d004      	beq.n	8017cea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8017ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8017ce4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8017ce6:	2301      	movs	r3, #1
 8017ce8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	683a      	ldr	r2, [r7, #0]
 8017cee:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8017cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8017cf2:	4618      	mov	r0, r3
 8017cf4:	3710      	adds	r7, #16
 8017cf6:	46bd      	mov	sp, r7
 8017cf8:	bd80      	pop	{r7, pc}
	...

08017cfc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8017cfc:	b580      	push	{r7, lr}
 8017cfe:	b084      	sub	sp, #16
 8017d00:	af00      	add	r7, sp, #0
 8017d02:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8017d04:	6878      	ldr	r0, [r7, #4]
 8017d06:	f7ff ff87 	bl	8017c18 <sync_window>
 8017d0a:	4603      	mov	r3, r0
 8017d0c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8017d0e:	7bfb      	ldrb	r3, [r7, #15]
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d159      	bne.n	8017dc8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	781b      	ldrb	r3, [r3, #0]
 8017d18:	2b03      	cmp	r3, #3
 8017d1a:	d149      	bne.n	8017db0 <sync_fs+0xb4>
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	791b      	ldrb	r3, [r3, #4]
 8017d20:	2b01      	cmp	r3, #1
 8017d22:	d145      	bne.n	8017db0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	899b      	ldrh	r3, [r3, #12]
 8017d2e:	461a      	mov	r2, r3
 8017d30:	2100      	movs	r1, #0
 8017d32:	f7ff fda8 	bl	8017886 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	3338      	adds	r3, #56	; 0x38
 8017d3a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017d3e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8017d42:	4618      	mov	r0, r3
 8017d44:	f7ff fd37 	bl	80177b6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	3338      	adds	r3, #56	; 0x38
 8017d4c:	4921      	ldr	r1, [pc, #132]	; (8017dd4 <sync_fs+0xd8>)
 8017d4e:	4618      	mov	r0, r3
 8017d50:	f7ff fd4c 	bl	80177ec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	3338      	adds	r3, #56	; 0x38
 8017d58:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017d5c:	491e      	ldr	r1, [pc, #120]	; (8017dd8 <sync_fs+0xdc>)
 8017d5e:	4618      	mov	r0, r3
 8017d60:	f7ff fd44 	bl	80177ec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	3338      	adds	r3, #56	; 0x38
 8017d68:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	699b      	ldr	r3, [r3, #24]
 8017d70:	4619      	mov	r1, r3
 8017d72:	4610      	mov	r0, r2
 8017d74:	f7ff fd3a 	bl	80177ec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	3338      	adds	r3, #56	; 0x38
 8017d7c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	695b      	ldr	r3, [r3, #20]
 8017d84:	4619      	mov	r1, r3
 8017d86:	4610      	mov	r0, r2
 8017d88:	f7ff fd30 	bl	80177ec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d90:	1c5a      	adds	r2, r3, #1
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	7858      	ldrb	r0, [r3, #1]
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017da4:	2301      	movs	r3, #1
 8017da6:	f7ff fc8d 	bl	80176c4 <disk_write>
			fs->fsi_flag = 0;
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	2200      	movs	r2, #0
 8017dae:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	785b      	ldrb	r3, [r3, #1]
 8017db4:	2200      	movs	r2, #0
 8017db6:	2100      	movs	r1, #0
 8017db8:	4618      	mov	r0, r3
 8017dba:	f7ff fca3 	bl	8017704 <disk_ioctl>
 8017dbe:	4603      	mov	r3, r0
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d001      	beq.n	8017dc8 <sync_fs+0xcc>
 8017dc4:	2301      	movs	r3, #1
 8017dc6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8017dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8017dca:	4618      	mov	r0, r3
 8017dcc:	3710      	adds	r7, #16
 8017dce:	46bd      	mov	sp, r7
 8017dd0:	bd80      	pop	{r7, pc}
 8017dd2:	bf00      	nop
 8017dd4:	41615252 	.word	0x41615252
 8017dd8:	61417272 	.word	0x61417272

08017ddc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8017ddc:	b480      	push	{r7}
 8017dde:	b083      	sub	sp, #12
 8017de0:	af00      	add	r7, sp, #0
 8017de2:	6078      	str	r0, [r7, #4]
 8017de4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8017de6:	683b      	ldr	r3, [r7, #0]
 8017de8:	3b02      	subs	r3, #2
 8017dea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	69db      	ldr	r3, [r3, #28]
 8017df0:	3b02      	subs	r3, #2
 8017df2:	683a      	ldr	r2, [r7, #0]
 8017df4:	429a      	cmp	r2, r3
 8017df6:	d301      	bcc.n	8017dfc <clust2sect+0x20>
 8017df8:	2300      	movs	r3, #0
 8017dfa:	e008      	b.n	8017e0e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	895b      	ldrh	r3, [r3, #10]
 8017e00:	461a      	mov	r2, r3
 8017e02:	683b      	ldr	r3, [r7, #0]
 8017e04:	fb03 f202 	mul.w	r2, r3, r2
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e0c:	4413      	add	r3, r2
}
 8017e0e:	4618      	mov	r0, r3
 8017e10:	370c      	adds	r7, #12
 8017e12:	46bd      	mov	sp, r7
 8017e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e18:	4770      	bx	lr

08017e1a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8017e1a:	b580      	push	{r7, lr}
 8017e1c:	b086      	sub	sp, #24
 8017e1e:	af00      	add	r7, sp, #0
 8017e20:	6078      	str	r0, [r7, #4]
 8017e22:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8017e2a:	683b      	ldr	r3, [r7, #0]
 8017e2c:	2b01      	cmp	r3, #1
 8017e2e:	d904      	bls.n	8017e3a <get_fat+0x20>
 8017e30:	693b      	ldr	r3, [r7, #16]
 8017e32:	69db      	ldr	r3, [r3, #28]
 8017e34:	683a      	ldr	r2, [r7, #0]
 8017e36:	429a      	cmp	r2, r3
 8017e38:	d302      	bcc.n	8017e40 <get_fat+0x26>
		val = 1;	/* Internal error */
 8017e3a:	2301      	movs	r3, #1
 8017e3c:	617b      	str	r3, [r7, #20]
 8017e3e:	e0bb      	b.n	8017fb8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8017e40:	f04f 33ff 	mov.w	r3, #4294967295
 8017e44:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8017e46:	693b      	ldr	r3, [r7, #16]
 8017e48:	781b      	ldrb	r3, [r3, #0]
 8017e4a:	2b03      	cmp	r3, #3
 8017e4c:	f000 8083 	beq.w	8017f56 <get_fat+0x13c>
 8017e50:	2b03      	cmp	r3, #3
 8017e52:	f300 80a7 	bgt.w	8017fa4 <get_fat+0x18a>
 8017e56:	2b01      	cmp	r3, #1
 8017e58:	d002      	beq.n	8017e60 <get_fat+0x46>
 8017e5a:	2b02      	cmp	r3, #2
 8017e5c:	d056      	beq.n	8017f0c <get_fat+0xf2>
 8017e5e:	e0a1      	b.n	8017fa4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8017e60:	683b      	ldr	r3, [r7, #0]
 8017e62:	60fb      	str	r3, [r7, #12]
 8017e64:	68fb      	ldr	r3, [r7, #12]
 8017e66:	085b      	lsrs	r3, r3, #1
 8017e68:	68fa      	ldr	r2, [r7, #12]
 8017e6a:	4413      	add	r3, r2
 8017e6c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017e6e:	693b      	ldr	r3, [r7, #16]
 8017e70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017e72:	693b      	ldr	r3, [r7, #16]
 8017e74:	899b      	ldrh	r3, [r3, #12]
 8017e76:	4619      	mov	r1, r3
 8017e78:	68fb      	ldr	r3, [r7, #12]
 8017e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8017e7e:	4413      	add	r3, r2
 8017e80:	4619      	mov	r1, r3
 8017e82:	6938      	ldr	r0, [r7, #16]
 8017e84:	f7ff ff0c 	bl	8017ca0 <move_window>
 8017e88:	4603      	mov	r3, r0
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	f040 808d 	bne.w	8017faa <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8017e90:	68fb      	ldr	r3, [r7, #12]
 8017e92:	1c5a      	adds	r2, r3, #1
 8017e94:	60fa      	str	r2, [r7, #12]
 8017e96:	693a      	ldr	r2, [r7, #16]
 8017e98:	8992      	ldrh	r2, [r2, #12]
 8017e9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8017e9e:	fb01 f202 	mul.w	r2, r1, r2
 8017ea2:	1a9b      	subs	r3, r3, r2
 8017ea4:	693a      	ldr	r2, [r7, #16]
 8017ea6:	4413      	add	r3, r2
 8017ea8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017eac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017eae:	693b      	ldr	r3, [r7, #16]
 8017eb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017eb2:	693b      	ldr	r3, [r7, #16]
 8017eb4:	899b      	ldrh	r3, [r3, #12]
 8017eb6:	4619      	mov	r1, r3
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8017ebe:	4413      	add	r3, r2
 8017ec0:	4619      	mov	r1, r3
 8017ec2:	6938      	ldr	r0, [r7, #16]
 8017ec4:	f7ff feec 	bl	8017ca0 <move_window>
 8017ec8:	4603      	mov	r3, r0
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d16f      	bne.n	8017fae <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8017ece:	693b      	ldr	r3, [r7, #16]
 8017ed0:	899b      	ldrh	r3, [r3, #12]
 8017ed2:	461a      	mov	r2, r3
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	fbb3 f1f2 	udiv	r1, r3, r2
 8017eda:	fb01 f202 	mul.w	r2, r1, r2
 8017ede:	1a9b      	subs	r3, r3, r2
 8017ee0:	693a      	ldr	r2, [r7, #16]
 8017ee2:	4413      	add	r3, r2
 8017ee4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017ee8:	021b      	lsls	r3, r3, #8
 8017eea:	461a      	mov	r2, r3
 8017eec:	68bb      	ldr	r3, [r7, #8]
 8017eee:	4313      	orrs	r3, r2
 8017ef0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8017ef2:	683b      	ldr	r3, [r7, #0]
 8017ef4:	f003 0301 	and.w	r3, r3, #1
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d002      	beq.n	8017f02 <get_fat+0xe8>
 8017efc:	68bb      	ldr	r3, [r7, #8]
 8017efe:	091b      	lsrs	r3, r3, #4
 8017f00:	e002      	b.n	8017f08 <get_fat+0xee>
 8017f02:	68bb      	ldr	r3, [r7, #8]
 8017f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017f08:	617b      	str	r3, [r7, #20]
			break;
 8017f0a:	e055      	b.n	8017fb8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017f0c:	693b      	ldr	r3, [r7, #16]
 8017f0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017f10:	693b      	ldr	r3, [r7, #16]
 8017f12:	899b      	ldrh	r3, [r3, #12]
 8017f14:	085b      	lsrs	r3, r3, #1
 8017f16:	b29b      	uxth	r3, r3
 8017f18:	4619      	mov	r1, r3
 8017f1a:	683b      	ldr	r3, [r7, #0]
 8017f1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8017f20:	4413      	add	r3, r2
 8017f22:	4619      	mov	r1, r3
 8017f24:	6938      	ldr	r0, [r7, #16]
 8017f26:	f7ff febb 	bl	8017ca0 <move_window>
 8017f2a:	4603      	mov	r3, r0
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	d140      	bne.n	8017fb2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8017f30:	693b      	ldr	r3, [r7, #16]
 8017f32:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017f36:	683b      	ldr	r3, [r7, #0]
 8017f38:	005b      	lsls	r3, r3, #1
 8017f3a:	693a      	ldr	r2, [r7, #16]
 8017f3c:	8992      	ldrh	r2, [r2, #12]
 8017f3e:	fbb3 f0f2 	udiv	r0, r3, r2
 8017f42:	fb00 f202 	mul.w	r2, r0, r2
 8017f46:	1a9b      	subs	r3, r3, r2
 8017f48:	440b      	add	r3, r1
 8017f4a:	4618      	mov	r0, r3
 8017f4c:	f7ff fbf8 	bl	8017740 <ld_word>
 8017f50:	4603      	mov	r3, r0
 8017f52:	617b      	str	r3, [r7, #20]
			break;
 8017f54:	e030      	b.n	8017fb8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017f56:	693b      	ldr	r3, [r7, #16]
 8017f58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017f5a:	693b      	ldr	r3, [r7, #16]
 8017f5c:	899b      	ldrh	r3, [r3, #12]
 8017f5e:	089b      	lsrs	r3, r3, #2
 8017f60:	b29b      	uxth	r3, r3
 8017f62:	4619      	mov	r1, r3
 8017f64:	683b      	ldr	r3, [r7, #0]
 8017f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8017f6a:	4413      	add	r3, r2
 8017f6c:	4619      	mov	r1, r3
 8017f6e:	6938      	ldr	r0, [r7, #16]
 8017f70:	f7ff fe96 	bl	8017ca0 <move_window>
 8017f74:	4603      	mov	r3, r0
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d11d      	bne.n	8017fb6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8017f7a:	693b      	ldr	r3, [r7, #16]
 8017f7c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017f80:	683b      	ldr	r3, [r7, #0]
 8017f82:	009b      	lsls	r3, r3, #2
 8017f84:	693a      	ldr	r2, [r7, #16]
 8017f86:	8992      	ldrh	r2, [r2, #12]
 8017f88:	fbb3 f0f2 	udiv	r0, r3, r2
 8017f8c:	fb00 f202 	mul.w	r2, r0, r2
 8017f90:	1a9b      	subs	r3, r3, r2
 8017f92:	440b      	add	r3, r1
 8017f94:	4618      	mov	r0, r3
 8017f96:	f7ff fbeb 	bl	8017770 <ld_dword>
 8017f9a:	4603      	mov	r3, r0
 8017f9c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8017fa0:	617b      	str	r3, [r7, #20]
			break;
 8017fa2:	e009      	b.n	8017fb8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8017fa4:	2301      	movs	r3, #1
 8017fa6:	617b      	str	r3, [r7, #20]
 8017fa8:	e006      	b.n	8017fb8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017faa:	bf00      	nop
 8017fac:	e004      	b.n	8017fb8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017fae:	bf00      	nop
 8017fb0:	e002      	b.n	8017fb8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017fb2:	bf00      	nop
 8017fb4:	e000      	b.n	8017fb8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017fb6:	bf00      	nop
		}
	}

	return val;
 8017fb8:	697b      	ldr	r3, [r7, #20]
}
 8017fba:	4618      	mov	r0, r3
 8017fbc:	3718      	adds	r7, #24
 8017fbe:	46bd      	mov	sp, r7
 8017fc0:	bd80      	pop	{r7, pc}

08017fc2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8017fc2:	b590      	push	{r4, r7, lr}
 8017fc4:	b089      	sub	sp, #36	; 0x24
 8017fc6:	af00      	add	r7, sp, #0
 8017fc8:	60f8      	str	r0, [r7, #12]
 8017fca:	60b9      	str	r1, [r7, #8]
 8017fcc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8017fce:	2302      	movs	r3, #2
 8017fd0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8017fd2:	68bb      	ldr	r3, [r7, #8]
 8017fd4:	2b01      	cmp	r3, #1
 8017fd6:	f240 8109 	bls.w	80181ec <put_fat+0x22a>
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	69db      	ldr	r3, [r3, #28]
 8017fde:	68ba      	ldr	r2, [r7, #8]
 8017fe0:	429a      	cmp	r2, r3
 8017fe2:	f080 8103 	bcs.w	80181ec <put_fat+0x22a>
		switch (fs->fs_type) {
 8017fe6:	68fb      	ldr	r3, [r7, #12]
 8017fe8:	781b      	ldrb	r3, [r3, #0]
 8017fea:	2b03      	cmp	r3, #3
 8017fec:	f000 80b6 	beq.w	801815c <put_fat+0x19a>
 8017ff0:	2b03      	cmp	r3, #3
 8017ff2:	f300 80fb 	bgt.w	80181ec <put_fat+0x22a>
 8017ff6:	2b01      	cmp	r3, #1
 8017ff8:	d003      	beq.n	8018002 <put_fat+0x40>
 8017ffa:	2b02      	cmp	r3, #2
 8017ffc:	f000 8083 	beq.w	8018106 <put_fat+0x144>
 8018000:	e0f4      	b.n	80181ec <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8018002:	68bb      	ldr	r3, [r7, #8]
 8018004:	61bb      	str	r3, [r7, #24]
 8018006:	69bb      	ldr	r3, [r7, #24]
 8018008:	085b      	lsrs	r3, r3, #1
 801800a:	69ba      	ldr	r2, [r7, #24]
 801800c:	4413      	add	r3, r2
 801800e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8018010:	68fb      	ldr	r3, [r7, #12]
 8018012:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018014:	68fb      	ldr	r3, [r7, #12]
 8018016:	899b      	ldrh	r3, [r3, #12]
 8018018:	4619      	mov	r1, r3
 801801a:	69bb      	ldr	r3, [r7, #24]
 801801c:	fbb3 f3f1 	udiv	r3, r3, r1
 8018020:	4413      	add	r3, r2
 8018022:	4619      	mov	r1, r3
 8018024:	68f8      	ldr	r0, [r7, #12]
 8018026:	f7ff fe3b 	bl	8017ca0 <move_window>
 801802a:	4603      	mov	r3, r0
 801802c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801802e:	7ffb      	ldrb	r3, [r7, #31]
 8018030:	2b00      	cmp	r3, #0
 8018032:	f040 80d4 	bne.w	80181de <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8018036:	68fb      	ldr	r3, [r7, #12]
 8018038:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801803c:	69bb      	ldr	r3, [r7, #24]
 801803e:	1c5a      	adds	r2, r3, #1
 8018040:	61ba      	str	r2, [r7, #24]
 8018042:	68fa      	ldr	r2, [r7, #12]
 8018044:	8992      	ldrh	r2, [r2, #12]
 8018046:	fbb3 f0f2 	udiv	r0, r3, r2
 801804a:	fb00 f202 	mul.w	r2, r0, r2
 801804e:	1a9b      	subs	r3, r3, r2
 8018050:	440b      	add	r3, r1
 8018052:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8018054:	68bb      	ldr	r3, [r7, #8]
 8018056:	f003 0301 	and.w	r3, r3, #1
 801805a:	2b00      	cmp	r3, #0
 801805c:	d00d      	beq.n	801807a <put_fat+0xb8>
 801805e:	697b      	ldr	r3, [r7, #20]
 8018060:	781b      	ldrb	r3, [r3, #0]
 8018062:	b25b      	sxtb	r3, r3
 8018064:	f003 030f 	and.w	r3, r3, #15
 8018068:	b25a      	sxtb	r2, r3
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	b2db      	uxtb	r3, r3
 801806e:	011b      	lsls	r3, r3, #4
 8018070:	b25b      	sxtb	r3, r3
 8018072:	4313      	orrs	r3, r2
 8018074:	b25b      	sxtb	r3, r3
 8018076:	b2db      	uxtb	r3, r3
 8018078:	e001      	b.n	801807e <put_fat+0xbc>
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	b2db      	uxtb	r3, r3
 801807e:	697a      	ldr	r2, [r7, #20]
 8018080:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8018082:	68fb      	ldr	r3, [r7, #12]
 8018084:	2201      	movs	r2, #1
 8018086:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8018088:	68fb      	ldr	r3, [r7, #12]
 801808a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801808c:	68fb      	ldr	r3, [r7, #12]
 801808e:	899b      	ldrh	r3, [r3, #12]
 8018090:	4619      	mov	r1, r3
 8018092:	69bb      	ldr	r3, [r7, #24]
 8018094:	fbb3 f3f1 	udiv	r3, r3, r1
 8018098:	4413      	add	r3, r2
 801809a:	4619      	mov	r1, r3
 801809c:	68f8      	ldr	r0, [r7, #12]
 801809e:	f7ff fdff 	bl	8017ca0 <move_window>
 80180a2:	4603      	mov	r3, r0
 80180a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80180a6:	7ffb      	ldrb	r3, [r7, #31]
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	f040 809a 	bne.w	80181e2 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80180ae:	68fb      	ldr	r3, [r7, #12]
 80180b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80180b4:	68fb      	ldr	r3, [r7, #12]
 80180b6:	899b      	ldrh	r3, [r3, #12]
 80180b8:	461a      	mov	r2, r3
 80180ba:	69bb      	ldr	r3, [r7, #24]
 80180bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80180c0:	fb00 f202 	mul.w	r2, r0, r2
 80180c4:	1a9b      	subs	r3, r3, r2
 80180c6:	440b      	add	r3, r1
 80180c8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80180ca:	68bb      	ldr	r3, [r7, #8]
 80180cc:	f003 0301 	and.w	r3, r3, #1
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d003      	beq.n	80180dc <put_fat+0x11a>
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	091b      	lsrs	r3, r3, #4
 80180d8:	b2db      	uxtb	r3, r3
 80180da:	e00e      	b.n	80180fa <put_fat+0x138>
 80180dc:	697b      	ldr	r3, [r7, #20]
 80180de:	781b      	ldrb	r3, [r3, #0]
 80180e0:	b25b      	sxtb	r3, r3
 80180e2:	f023 030f 	bic.w	r3, r3, #15
 80180e6:	b25a      	sxtb	r2, r3
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	0a1b      	lsrs	r3, r3, #8
 80180ec:	b25b      	sxtb	r3, r3
 80180ee:	f003 030f 	and.w	r3, r3, #15
 80180f2:	b25b      	sxtb	r3, r3
 80180f4:	4313      	orrs	r3, r2
 80180f6:	b25b      	sxtb	r3, r3
 80180f8:	b2db      	uxtb	r3, r3
 80180fa:	697a      	ldr	r2, [r7, #20]
 80180fc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80180fe:	68fb      	ldr	r3, [r7, #12]
 8018100:	2201      	movs	r2, #1
 8018102:	70da      	strb	r2, [r3, #3]
			break;
 8018104:	e072      	b.n	80181ec <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8018106:	68fb      	ldr	r3, [r7, #12]
 8018108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801810a:	68fb      	ldr	r3, [r7, #12]
 801810c:	899b      	ldrh	r3, [r3, #12]
 801810e:	085b      	lsrs	r3, r3, #1
 8018110:	b29b      	uxth	r3, r3
 8018112:	4619      	mov	r1, r3
 8018114:	68bb      	ldr	r3, [r7, #8]
 8018116:	fbb3 f3f1 	udiv	r3, r3, r1
 801811a:	4413      	add	r3, r2
 801811c:	4619      	mov	r1, r3
 801811e:	68f8      	ldr	r0, [r7, #12]
 8018120:	f7ff fdbe 	bl	8017ca0 <move_window>
 8018124:	4603      	mov	r3, r0
 8018126:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8018128:	7ffb      	ldrb	r3, [r7, #31]
 801812a:	2b00      	cmp	r3, #0
 801812c:	d15b      	bne.n	80181e6 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801812e:	68fb      	ldr	r3, [r7, #12]
 8018130:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018134:	68bb      	ldr	r3, [r7, #8]
 8018136:	005b      	lsls	r3, r3, #1
 8018138:	68fa      	ldr	r2, [r7, #12]
 801813a:	8992      	ldrh	r2, [r2, #12]
 801813c:	fbb3 f0f2 	udiv	r0, r3, r2
 8018140:	fb00 f202 	mul.w	r2, r0, r2
 8018144:	1a9b      	subs	r3, r3, r2
 8018146:	440b      	add	r3, r1
 8018148:	687a      	ldr	r2, [r7, #4]
 801814a:	b292      	uxth	r2, r2
 801814c:	4611      	mov	r1, r2
 801814e:	4618      	mov	r0, r3
 8018150:	f7ff fb31 	bl	80177b6 <st_word>
			fs->wflag = 1;
 8018154:	68fb      	ldr	r3, [r7, #12]
 8018156:	2201      	movs	r2, #1
 8018158:	70da      	strb	r2, [r3, #3]
			break;
 801815a:	e047      	b.n	80181ec <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801815c:	68fb      	ldr	r3, [r7, #12]
 801815e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018160:	68fb      	ldr	r3, [r7, #12]
 8018162:	899b      	ldrh	r3, [r3, #12]
 8018164:	089b      	lsrs	r3, r3, #2
 8018166:	b29b      	uxth	r3, r3
 8018168:	4619      	mov	r1, r3
 801816a:	68bb      	ldr	r3, [r7, #8]
 801816c:	fbb3 f3f1 	udiv	r3, r3, r1
 8018170:	4413      	add	r3, r2
 8018172:	4619      	mov	r1, r3
 8018174:	68f8      	ldr	r0, [r7, #12]
 8018176:	f7ff fd93 	bl	8017ca0 <move_window>
 801817a:	4603      	mov	r3, r0
 801817c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801817e:	7ffb      	ldrb	r3, [r7, #31]
 8018180:	2b00      	cmp	r3, #0
 8018182:	d132      	bne.n	80181ea <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801818a:	68fb      	ldr	r3, [r7, #12]
 801818c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018190:	68bb      	ldr	r3, [r7, #8]
 8018192:	009b      	lsls	r3, r3, #2
 8018194:	68fa      	ldr	r2, [r7, #12]
 8018196:	8992      	ldrh	r2, [r2, #12]
 8018198:	fbb3 f0f2 	udiv	r0, r3, r2
 801819c:	fb00 f202 	mul.w	r2, r0, r2
 80181a0:	1a9b      	subs	r3, r3, r2
 80181a2:	440b      	add	r3, r1
 80181a4:	4618      	mov	r0, r3
 80181a6:	f7ff fae3 	bl	8017770 <ld_dword>
 80181aa:	4603      	mov	r3, r0
 80181ac:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80181b0:	4323      	orrs	r3, r4
 80181b2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80181b4:	68fb      	ldr	r3, [r7, #12]
 80181b6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80181ba:	68bb      	ldr	r3, [r7, #8]
 80181bc:	009b      	lsls	r3, r3, #2
 80181be:	68fa      	ldr	r2, [r7, #12]
 80181c0:	8992      	ldrh	r2, [r2, #12]
 80181c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80181c6:	fb00 f202 	mul.w	r2, r0, r2
 80181ca:	1a9b      	subs	r3, r3, r2
 80181cc:	440b      	add	r3, r1
 80181ce:	6879      	ldr	r1, [r7, #4]
 80181d0:	4618      	mov	r0, r3
 80181d2:	f7ff fb0b 	bl	80177ec <st_dword>
			fs->wflag = 1;
 80181d6:	68fb      	ldr	r3, [r7, #12]
 80181d8:	2201      	movs	r2, #1
 80181da:	70da      	strb	r2, [r3, #3]
			break;
 80181dc:	e006      	b.n	80181ec <put_fat+0x22a>
			if (res != FR_OK) break;
 80181de:	bf00      	nop
 80181e0:	e004      	b.n	80181ec <put_fat+0x22a>
			if (res != FR_OK) break;
 80181e2:	bf00      	nop
 80181e4:	e002      	b.n	80181ec <put_fat+0x22a>
			if (res != FR_OK) break;
 80181e6:	bf00      	nop
 80181e8:	e000      	b.n	80181ec <put_fat+0x22a>
			if (res != FR_OK) break;
 80181ea:	bf00      	nop
		}
	}
	return res;
 80181ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80181ee:	4618      	mov	r0, r3
 80181f0:	3724      	adds	r7, #36	; 0x24
 80181f2:	46bd      	mov	sp, r7
 80181f4:	bd90      	pop	{r4, r7, pc}

080181f6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80181f6:	b580      	push	{r7, lr}
 80181f8:	b088      	sub	sp, #32
 80181fa:	af00      	add	r7, sp, #0
 80181fc:	60f8      	str	r0, [r7, #12]
 80181fe:	60b9      	str	r1, [r7, #8]
 8018200:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8018202:	2300      	movs	r3, #0
 8018204:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8018206:	68fb      	ldr	r3, [r7, #12]
 8018208:	681b      	ldr	r3, [r3, #0]
 801820a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801820c:	68bb      	ldr	r3, [r7, #8]
 801820e:	2b01      	cmp	r3, #1
 8018210:	d904      	bls.n	801821c <remove_chain+0x26>
 8018212:	69bb      	ldr	r3, [r7, #24]
 8018214:	69db      	ldr	r3, [r3, #28]
 8018216:	68ba      	ldr	r2, [r7, #8]
 8018218:	429a      	cmp	r2, r3
 801821a:	d301      	bcc.n	8018220 <remove_chain+0x2a>
 801821c:	2302      	movs	r3, #2
 801821e:	e04b      	b.n	80182b8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	2b00      	cmp	r3, #0
 8018224:	d00c      	beq.n	8018240 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8018226:	f04f 32ff 	mov.w	r2, #4294967295
 801822a:	6879      	ldr	r1, [r7, #4]
 801822c:	69b8      	ldr	r0, [r7, #24]
 801822e:	f7ff fec8 	bl	8017fc2 <put_fat>
 8018232:	4603      	mov	r3, r0
 8018234:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8018236:	7ffb      	ldrb	r3, [r7, #31]
 8018238:	2b00      	cmp	r3, #0
 801823a:	d001      	beq.n	8018240 <remove_chain+0x4a>
 801823c:	7ffb      	ldrb	r3, [r7, #31]
 801823e:	e03b      	b.n	80182b8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8018240:	68b9      	ldr	r1, [r7, #8]
 8018242:	68f8      	ldr	r0, [r7, #12]
 8018244:	f7ff fde9 	bl	8017e1a <get_fat>
 8018248:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801824a:	697b      	ldr	r3, [r7, #20]
 801824c:	2b00      	cmp	r3, #0
 801824e:	d031      	beq.n	80182b4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8018250:	697b      	ldr	r3, [r7, #20]
 8018252:	2b01      	cmp	r3, #1
 8018254:	d101      	bne.n	801825a <remove_chain+0x64>
 8018256:	2302      	movs	r3, #2
 8018258:	e02e      	b.n	80182b8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801825a:	697b      	ldr	r3, [r7, #20]
 801825c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018260:	d101      	bne.n	8018266 <remove_chain+0x70>
 8018262:	2301      	movs	r3, #1
 8018264:	e028      	b.n	80182b8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8018266:	2200      	movs	r2, #0
 8018268:	68b9      	ldr	r1, [r7, #8]
 801826a:	69b8      	ldr	r0, [r7, #24]
 801826c:	f7ff fea9 	bl	8017fc2 <put_fat>
 8018270:	4603      	mov	r3, r0
 8018272:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8018274:	7ffb      	ldrb	r3, [r7, #31]
 8018276:	2b00      	cmp	r3, #0
 8018278:	d001      	beq.n	801827e <remove_chain+0x88>
 801827a:	7ffb      	ldrb	r3, [r7, #31]
 801827c:	e01c      	b.n	80182b8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801827e:	69bb      	ldr	r3, [r7, #24]
 8018280:	699a      	ldr	r2, [r3, #24]
 8018282:	69bb      	ldr	r3, [r7, #24]
 8018284:	69db      	ldr	r3, [r3, #28]
 8018286:	3b02      	subs	r3, #2
 8018288:	429a      	cmp	r2, r3
 801828a:	d20b      	bcs.n	80182a4 <remove_chain+0xae>
			fs->free_clst++;
 801828c:	69bb      	ldr	r3, [r7, #24]
 801828e:	699b      	ldr	r3, [r3, #24]
 8018290:	1c5a      	adds	r2, r3, #1
 8018292:	69bb      	ldr	r3, [r7, #24]
 8018294:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8018296:	69bb      	ldr	r3, [r7, #24]
 8018298:	791b      	ldrb	r3, [r3, #4]
 801829a:	f043 0301 	orr.w	r3, r3, #1
 801829e:	b2da      	uxtb	r2, r3
 80182a0:	69bb      	ldr	r3, [r7, #24]
 80182a2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80182a4:	697b      	ldr	r3, [r7, #20]
 80182a6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80182a8:	69bb      	ldr	r3, [r7, #24]
 80182aa:	69db      	ldr	r3, [r3, #28]
 80182ac:	68ba      	ldr	r2, [r7, #8]
 80182ae:	429a      	cmp	r2, r3
 80182b0:	d3c6      	bcc.n	8018240 <remove_chain+0x4a>
 80182b2:	e000      	b.n	80182b6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80182b4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80182b6:	2300      	movs	r3, #0
}
 80182b8:	4618      	mov	r0, r3
 80182ba:	3720      	adds	r7, #32
 80182bc:	46bd      	mov	sp, r7
 80182be:	bd80      	pop	{r7, pc}

080182c0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80182c0:	b580      	push	{r7, lr}
 80182c2:	b088      	sub	sp, #32
 80182c4:	af00      	add	r7, sp, #0
 80182c6:	6078      	str	r0, [r7, #4]
 80182c8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	681b      	ldr	r3, [r3, #0]
 80182ce:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80182d0:	683b      	ldr	r3, [r7, #0]
 80182d2:	2b00      	cmp	r3, #0
 80182d4:	d10d      	bne.n	80182f2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80182d6:	693b      	ldr	r3, [r7, #16]
 80182d8:	695b      	ldr	r3, [r3, #20]
 80182da:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80182dc:	69bb      	ldr	r3, [r7, #24]
 80182de:	2b00      	cmp	r3, #0
 80182e0:	d004      	beq.n	80182ec <create_chain+0x2c>
 80182e2:	693b      	ldr	r3, [r7, #16]
 80182e4:	69db      	ldr	r3, [r3, #28]
 80182e6:	69ba      	ldr	r2, [r7, #24]
 80182e8:	429a      	cmp	r2, r3
 80182ea:	d31b      	bcc.n	8018324 <create_chain+0x64>
 80182ec:	2301      	movs	r3, #1
 80182ee:	61bb      	str	r3, [r7, #24]
 80182f0:	e018      	b.n	8018324 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80182f2:	6839      	ldr	r1, [r7, #0]
 80182f4:	6878      	ldr	r0, [r7, #4]
 80182f6:	f7ff fd90 	bl	8017e1a <get_fat>
 80182fa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80182fc:	68fb      	ldr	r3, [r7, #12]
 80182fe:	2b01      	cmp	r3, #1
 8018300:	d801      	bhi.n	8018306 <create_chain+0x46>
 8018302:	2301      	movs	r3, #1
 8018304:	e070      	b.n	80183e8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8018306:	68fb      	ldr	r3, [r7, #12]
 8018308:	f1b3 3fff 	cmp.w	r3, #4294967295
 801830c:	d101      	bne.n	8018312 <create_chain+0x52>
 801830e:	68fb      	ldr	r3, [r7, #12]
 8018310:	e06a      	b.n	80183e8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8018312:	693b      	ldr	r3, [r7, #16]
 8018314:	69db      	ldr	r3, [r3, #28]
 8018316:	68fa      	ldr	r2, [r7, #12]
 8018318:	429a      	cmp	r2, r3
 801831a:	d201      	bcs.n	8018320 <create_chain+0x60>
 801831c:	68fb      	ldr	r3, [r7, #12]
 801831e:	e063      	b.n	80183e8 <create_chain+0x128>
		scl = clst;
 8018320:	683b      	ldr	r3, [r7, #0]
 8018322:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8018324:	69bb      	ldr	r3, [r7, #24]
 8018326:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8018328:	69fb      	ldr	r3, [r7, #28]
 801832a:	3301      	adds	r3, #1
 801832c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801832e:	693b      	ldr	r3, [r7, #16]
 8018330:	69db      	ldr	r3, [r3, #28]
 8018332:	69fa      	ldr	r2, [r7, #28]
 8018334:	429a      	cmp	r2, r3
 8018336:	d307      	bcc.n	8018348 <create_chain+0x88>
				ncl = 2;
 8018338:	2302      	movs	r3, #2
 801833a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801833c:	69fa      	ldr	r2, [r7, #28]
 801833e:	69bb      	ldr	r3, [r7, #24]
 8018340:	429a      	cmp	r2, r3
 8018342:	d901      	bls.n	8018348 <create_chain+0x88>
 8018344:	2300      	movs	r3, #0
 8018346:	e04f      	b.n	80183e8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8018348:	69f9      	ldr	r1, [r7, #28]
 801834a:	6878      	ldr	r0, [r7, #4]
 801834c:	f7ff fd65 	bl	8017e1a <get_fat>
 8018350:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8018352:	68fb      	ldr	r3, [r7, #12]
 8018354:	2b00      	cmp	r3, #0
 8018356:	d00e      	beq.n	8018376 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8018358:	68fb      	ldr	r3, [r7, #12]
 801835a:	2b01      	cmp	r3, #1
 801835c:	d003      	beq.n	8018366 <create_chain+0xa6>
 801835e:	68fb      	ldr	r3, [r7, #12]
 8018360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018364:	d101      	bne.n	801836a <create_chain+0xaa>
 8018366:	68fb      	ldr	r3, [r7, #12]
 8018368:	e03e      	b.n	80183e8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801836a:	69fa      	ldr	r2, [r7, #28]
 801836c:	69bb      	ldr	r3, [r7, #24]
 801836e:	429a      	cmp	r2, r3
 8018370:	d1da      	bne.n	8018328 <create_chain+0x68>
 8018372:	2300      	movs	r3, #0
 8018374:	e038      	b.n	80183e8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8018376:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8018378:	f04f 32ff 	mov.w	r2, #4294967295
 801837c:	69f9      	ldr	r1, [r7, #28]
 801837e:	6938      	ldr	r0, [r7, #16]
 8018380:	f7ff fe1f 	bl	8017fc2 <put_fat>
 8018384:	4603      	mov	r3, r0
 8018386:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8018388:	7dfb      	ldrb	r3, [r7, #23]
 801838a:	2b00      	cmp	r3, #0
 801838c:	d109      	bne.n	80183a2 <create_chain+0xe2>
 801838e:	683b      	ldr	r3, [r7, #0]
 8018390:	2b00      	cmp	r3, #0
 8018392:	d006      	beq.n	80183a2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8018394:	69fa      	ldr	r2, [r7, #28]
 8018396:	6839      	ldr	r1, [r7, #0]
 8018398:	6938      	ldr	r0, [r7, #16]
 801839a:	f7ff fe12 	bl	8017fc2 <put_fat>
 801839e:	4603      	mov	r3, r0
 80183a0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80183a2:	7dfb      	ldrb	r3, [r7, #23]
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d116      	bne.n	80183d6 <create_chain+0x116>
		fs->last_clst = ncl;
 80183a8:	693b      	ldr	r3, [r7, #16]
 80183aa:	69fa      	ldr	r2, [r7, #28]
 80183ac:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80183ae:	693b      	ldr	r3, [r7, #16]
 80183b0:	699a      	ldr	r2, [r3, #24]
 80183b2:	693b      	ldr	r3, [r7, #16]
 80183b4:	69db      	ldr	r3, [r3, #28]
 80183b6:	3b02      	subs	r3, #2
 80183b8:	429a      	cmp	r2, r3
 80183ba:	d804      	bhi.n	80183c6 <create_chain+0x106>
 80183bc:	693b      	ldr	r3, [r7, #16]
 80183be:	699b      	ldr	r3, [r3, #24]
 80183c0:	1e5a      	subs	r2, r3, #1
 80183c2:	693b      	ldr	r3, [r7, #16]
 80183c4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80183c6:	693b      	ldr	r3, [r7, #16]
 80183c8:	791b      	ldrb	r3, [r3, #4]
 80183ca:	f043 0301 	orr.w	r3, r3, #1
 80183ce:	b2da      	uxtb	r2, r3
 80183d0:	693b      	ldr	r3, [r7, #16]
 80183d2:	711a      	strb	r2, [r3, #4]
 80183d4:	e007      	b.n	80183e6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80183d6:	7dfb      	ldrb	r3, [r7, #23]
 80183d8:	2b01      	cmp	r3, #1
 80183da:	d102      	bne.n	80183e2 <create_chain+0x122>
 80183dc:	f04f 33ff 	mov.w	r3, #4294967295
 80183e0:	e000      	b.n	80183e4 <create_chain+0x124>
 80183e2:	2301      	movs	r3, #1
 80183e4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80183e6:	69fb      	ldr	r3, [r7, #28]
}
 80183e8:	4618      	mov	r0, r3
 80183ea:	3720      	adds	r7, #32
 80183ec:	46bd      	mov	sp, r7
 80183ee:	bd80      	pop	{r7, pc}

080183f0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80183f0:	b480      	push	{r7}
 80183f2:	b087      	sub	sp, #28
 80183f4:	af00      	add	r7, sp, #0
 80183f6:	6078      	str	r0, [r7, #4]
 80183f8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018404:	3304      	adds	r3, #4
 8018406:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8018408:	68fb      	ldr	r3, [r7, #12]
 801840a:	899b      	ldrh	r3, [r3, #12]
 801840c:	461a      	mov	r2, r3
 801840e:	683b      	ldr	r3, [r7, #0]
 8018410:	fbb3 f3f2 	udiv	r3, r3, r2
 8018414:	68fa      	ldr	r2, [r7, #12]
 8018416:	8952      	ldrh	r2, [r2, #10]
 8018418:	fbb3 f3f2 	udiv	r3, r3, r2
 801841c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801841e:	693b      	ldr	r3, [r7, #16]
 8018420:	1d1a      	adds	r2, r3, #4
 8018422:	613a      	str	r2, [r7, #16]
 8018424:	681b      	ldr	r3, [r3, #0]
 8018426:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8018428:	68bb      	ldr	r3, [r7, #8]
 801842a:	2b00      	cmp	r3, #0
 801842c:	d101      	bne.n	8018432 <clmt_clust+0x42>
 801842e:	2300      	movs	r3, #0
 8018430:	e010      	b.n	8018454 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8018432:	697a      	ldr	r2, [r7, #20]
 8018434:	68bb      	ldr	r3, [r7, #8]
 8018436:	429a      	cmp	r2, r3
 8018438:	d307      	bcc.n	801844a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801843a:	697a      	ldr	r2, [r7, #20]
 801843c:	68bb      	ldr	r3, [r7, #8]
 801843e:	1ad3      	subs	r3, r2, r3
 8018440:	617b      	str	r3, [r7, #20]
 8018442:	693b      	ldr	r3, [r7, #16]
 8018444:	3304      	adds	r3, #4
 8018446:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8018448:	e7e9      	b.n	801841e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801844a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801844c:	693b      	ldr	r3, [r7, #16]
 801844e:	681a      	ldr	r2, [r3, #0]
 8018450:	697b      	ldr	r3, [r7, #20]
 8018452:	4413      	add	r3, r2
}
 8018454:	4618      	mov	r0, r3
 8018456:	371c      	adds	r7, #28
 8018458:	46bd      	mov	sp, r7
 801845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801845e:	4770      	bx	lr

08018460 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8018460:	b580      	push	{r7, lr}
 8018462:	b086      	sub	sp, #24
 8018464:	af00      	add	r7, sp, #0
 8018466:	6078      	str	r0, [r7, #4]
 8018468:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8018470:	683b      	ldr	r3, [r7, #0]
 8018472:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8018476:	d204      	bcs.n	8018482 <dir_sdi+0x22>
 8018478:	683b      	ldr	r3, [r7, #0]
 801847a:	f003 031f 	and.w	r3, r3, #31
 801847e:	2b00      	cmp	r3, #0
 8018480:	d001      	beq.n	8018486 <dir_sdi+0x26>
		return FR_INT_ERR;
 8018482:	2302      	movs	r3, #2
 8018484:	e071      	b.n	801856a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	683a      	ldr	r2, [r7, #0]
 801848a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	689b      	ldr	r3, [r3, #8]
 8018490:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8018492:	697b      	ldr	r3, [r7, #20]
 8018494:	2b00      	cmp	r3, #0
 8018496:	d106      	bne.n	80184a6 <dir_sdi+0x46>
 8018498:	693b      	ldr	r3, [r7, #16]
 801849a:	781b      	ldrb	r3, [r3, #0]
 801849c:	2b02      	cmp	r3, #2
 801849e:	d902      	bls.n	80184a6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80184a0:	693b      	ldr	r3, [r7, #16]
 80184a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80184a4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80184a6:	697b      	ldr	r3, [r7, #20]
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d10c      	bne.n	80184c6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80184ac:	683b      	ldr	r3, [r7, #0]
 80184ae:	095b      	lsrs	r3, r3, #5
 80184b0:	693a      	ldr	r2, [r7, #16]
 80184b2:	8912      	ldrh	r2, [r2, #8]
 80184b4:	4293      	cmp	r3, r2
 80184b6:	d301      	bcc.n	80184bc <dir_sdi+0x5c>
 80184b8:	2302      	movs	r3, #2
 80184ba:	e056      	b.n	801856a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80184bc:	693b      	ldr	r3, [r7, #16]
 80184be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	61da      	str	r2, [r3, #28]
 80184c4:	e02d      	b.n	8018522 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80184c6:	693b      	ldr	r3, [r7, #16]
 80184c8:	895b      	ldrh	r3, [r3, #10]
 80184ca:	461a      	mov	r2, r3
 80184cc:	693b      	ldr	r3, [r7, #16]
 80184ce:	899b      	ldrh	r3, [r3, #12]
 80184d0:	fb02 f303 	mul.w	r3, r2, r3
 80184d4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80184d6:	e019      	b.n	801850c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	6979      	ldr	r1, [r7, #20]
 80184dc:	4618      	mov	r0, r3
 80184de:	f7ff fc9c 	bl	8017e1a <get_fat>
 80184e2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80184e4:	697b      	ldr	r3, [r7, #20]
 80184e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80184ea:	d101      	bne.n	80184f0 <dir_sdi+0x90>
 80184ec:	2301      	movs	r3, #1
 80184ee:	e03c      	b.n	801856a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80184f0:	697b      	ldr	r3, [r7, #20]
 80184f2:	2b01      	cmp	r3, #1
 80184f4:	d904      	bls.n	8018500 <dir_sdi+0xa0>
 80184f6:	693b      	ldr	r3, [r7, #16]
 80184f8:	69db      	ldr	r3, [r3, #28]
 80184fa:	697a      	ldr	r2, [r7, #20]
 80184fc:	429a      	cmp	r2, r3
 80184fe:	d301      	bcc.n	8018504 <dir_sdi+0xa4>
 8018500:	2302      	movs	r3, #2
 8018502:	e032      	b.n	801856a <dir_sdi+0x10a>
			ofs -= csz;
 8018504:	683a      	ldr	r2, [r7, #0]
 8018506:	68fb      	ldr	r3, [r7, #12]
 8018508:	1ad3      	subs	r3, r2, r3
 801850a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801850c:	683a      	ldr	r2, [r7, #0]
 801850e:	68fb      	ldr	r3, [r7, #12]
 8018510:	429a      	cmp	r2, r3
 8018512:	d2e1      	bcs.n	80184d8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8018514:	6979      	ldr	r1, [r7, #20]
 8018516:	6938      	ldr	r0, [r7, #16]
 8018518:	f7ff fc60 	bl	8017ddc <clust2sect>
 801851c:	4602      	mov	r2, r0
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	697a      	ldr	r2, [r7, #20]
 8018526:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	69db      	ldr	r3, [r3, #28]
 801852c:	2b00      	cmp	r3, #0
 801852e:	d101      	bne.n	8018534 <dir_sdi+0xd4>
 8018530:	2302      	movs	r3, #2
 8018532:	e01a      	b.n	801856a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	69da      	ldr	r2, [r3, #28]
 8018538:	693b      	ldr	r3, [r7, #16]
 801853a:	899b      	ldrh	r3, [r3, #12]
 801853c:	4619      	mov	r1, r3
 801853e:	683b      	ldr	r3, [r7, #0]
 8018540:	fbb3 f3f1 	udiv	r3, r3, r1
 8018544:	441a      	add	r2, r3
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801854a:	693b      	ldr	r3, [r7, #16]
 801854c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018550:	693b      	ldr	r3, [r7, #16]
 8018552:	899b      	ldrh	r3, [r3, #12]
 8018554:	461a      	mov	r2, r3
 8018556:	683b      	ldr	r3, [r7, #0]
 8018558:	fbb3 f0f2 	udiv	r0, r3, r2
 801855c:	fb00 f202 	mul.w	r2, r0, r2
 8018560:	1a9b      	subs	r3, r3, r2
 8018562:	18ca      	adds	r2, r1, r3
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8018568:	2300      	movs	r3, #0
}
 801856a:	4618      	mov	r0, r3
 801856c:	3718      	adds	r7, #24
 801856e:	46bd      	mov	sp, r7
 8018570:	bd80      	pop	{r7, pc}

08018572 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8018572:	b580      	push	{r7, lr}
 8018574:	b086      	sub	sp, #24
 8018576:	af00      	add	r7, sp, #0
 8018578:	6078      	str	r0, [r7, #4]
 801857a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	681b      	ldr	r3, [r3, #0]
 8018580:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	695b      	ldr	r3, [r3, #20]
 8018586:	3320      	adds	r3, #32
 8018588:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	69db      	ldr	r3, [r3, #28]
 801858e:	2b00      	cmp	r3, #0
 8018590:	d003      	beq.n	801859a <dir_next+0x28>
 8018592:	68bb      	ldr	r3, [r7, #8]
 8018594:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8018598:	d301      	bcc.n	801859e <dir_next+0x2c>
 801859a:	2304      	movs	r3, #4
 801859c:	e0bb      	b.n	8018716 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801859e:	68fb      	ldr	r3, [r7, #12]
 80185a0:	899b      	ldrh	r3, [r3, #12]
 80185a2:	461a      	mov	r2, r3
 80185a4:	68bb      	ldr	r3, [r7, #8]
 80185a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80185aa:	fb01 f202 	mul.w	r2, r1, r2
 80185ae:	1a9b      	subs	r3, r3, r2
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	f040 809d 	bne.w	80186f0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	69db      	ldr	r3, [r3, #28]
 80185ba:	1c5a      	adds	r2, r3, #1
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	699b      	ldr	r3, [r3, #24]
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	d10b      	bne.n	80185e0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80185c8:	68bb      	ldr	r3, [r7, #8]
 80185ca:	095b      	lsrs	r3, r3, #5
 80185cc:	68fa      	ldr	r2, [r7, #12]
 80185ce:	8912      	ldrh	r2, [r2, #8]
 80185d0:	4293      	cmp	r3, r2
 80185d2:	f0c0 808d 	bcc.w	80186f0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	2200      	movs	r2, #0
 80185da:	61da      	str	r2, [r3, #28]
 80185dc:	2304      	movs	r3, #4
 80185de:	e09a      	b.n	8018716 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80185e0:	68fb      	ldr	r3, [r7, #12]
 80185e2:	899b      	ldrh	r3, [r3, #12]
 80185e4:	461a      	mov	r2, r3
 80185e6:	68bb      	ldr	r3, [r7, #8]
 80185e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80185ec:	68fa      	ldr	r2, [r7, #12]
 80185ee:	8952      	ldrh	r2, [r2, #10]
 80185f0:	3a01      	subs	r2, #1
 80185f2:	4013      	ands	r3, r2
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	d17b      	bne.n	80186f0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80185f8:	687a      	ldr	r2, [r7, #4]
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	699b      	ldr	r3, [r3, #24]
 80185fe:	4619      	mov	r1, r3
 8018600:	4610      	mov	r0, r2
 8018602:	f7ff fc0a 	bl	8017e1a <get_fat>
 8018606:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8018608:	697b      	ldr	r3, [r7, #20]
 801860a:	2b01      	cmp	r3, #1
 801860c:	d801      	bhi.n	8018612 <dir_next+0xa0>
 801860e:	2302      	movs	r3, #2
 8018610:	e081      	b.n	8018716 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8018612:	697b      	ldr	r3, [r7, #20]
 8018614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018618:	d101      	bne.n	801861e <dir_next+0xac>
 801861a:	2301      	movs	r3, #1
 801861c:	e07b      	b.n	8018716 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801861e:	68fb      	ldr	r3, [r7, #12]
 8018620:	69db      	ldr	r3, [r3, #28]
 8018622:	697a      	ldr	r2, [r7, #20]
 8018624:	429a      	cmp	r2, r3
 8018626:	d359      	bcc.n	80186dc <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8018628:	683b      	ldr	r3, [r7, #0]
 801862a:	2b00      	cmp	r3, #0
 801862c:	d104      	bne.n	8018638 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	2200      	movs	r2, #0
 8018632:	61da      	str	r2, [r3, #28]
 8018634:	2304      	movs	r3, #4
 8018636:	e06e      	b.n	8018716 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8018638:	687a      	ldr	r2, [r7, #4]
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	699b      	ldr	r3, [r3, #24]
 801863e:	4619      	mov	r1, r3
 8018640:	4610      	mov	r0, r2
 8018642:	f7ff fe3d 	bl	80182c0 <create_chain>
 8018646:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8018648:	697b      	ldr	r3, [r7, #20]
 801864a:	2b00      	cmp	r3, #0
 801864c:	d101      	bne.n	8018652 <dir_next+0xe0>
 801864e:	2307      	movs	r3, #7
 8018650:	e061      	b.n	8018716 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8018652:	697b      	ldr	r3, [r7, #20]
 8018654:	2b01      	cmp	r3, #1
 8018656:	d101      	bne.n	801865c <dir_next+0xea>
 8018658:	2302      	movs	r3, #2
 801865a:	e05c      	b.n	8018716 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801865c:	697b      	ldr	r3, [r7, #20]
 801865e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018662:	d101      	bne.n	8018668 <dir_next+0xf6>
 8018664:	2301      	movs	r3, #1
 8018666:	e056      	b.n	8018716 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8018668:	68f8      	ldr	r0, [r7, #12]
 801866a:	f7ff fad5 	bl	8017c18 <sync_window>
 801866e:	4603      	mov	r3, r0
 8018670:	2b00      	cmp	r3, #0
 8018672:	d001      	beq.n	8018678 <dir_next+0x106>
 8018674:	2301      	movs	r3, #1
 8018676:	e04e      	b.n	8018716 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8018678:	68fb      	ldr	r3, [r7, #12]
 801867a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801867e:	68fb      	ldr	r3, [r7, #12]
 8018680:	899b      	ldrh	r3, [r3, #12]
 8018682:	461a      	mov	r2, r3
 8018684:	2100      	movs	r1, #0
 8018686:	f7ff f8fe 	bl	8017886 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801868a:	2300      	movs	r3, #0
 801868c:	613b      	str	r3, [r7, #16]
 801868e:	6979      	ldr	r1, [r7, #20]
 8018690:	68f8      	ldr	r0, [r7, #12]
 8018692:	f7ff fba3 	bl	8017ddc <clust2sect>
 8018696:	4602      	mov	r2, r0
 8018698:	68fb      	ldr	r3, [r7, #12]
 801869a:	635a      	str	r2, [r3, #52]	; 0x34
 801869c:	e012      	b.n	80186c4 <dir_next+0x152>
						fs->wflag = 1;
 801869e:	68fb      	ldr	r3, [r7, #12]
 80186a0:	2201      	movs	r2, #1
 80186a2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80186a4:	68f8      	ldr	r0, [r7, #12]
 80186a6:	f7ff fab7 	bl	8017c18 <sync_window>
 80186aa:	4603      	mov	r3, r0
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	d001      	beq.n	80186b4 <dir_next+0x142>
 80186b0:	2301      	movs	r3, #1
 80186b2:	e030      	b.n	8018716 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80186b4:	693b      	ldr	r3, [r7, #16]
 80186b6:	3301      	adds	r3, #1
 80186b8:	613b      	str	r3, [r7, #16]
 80186ba:	68fb      	ldr	r3, [r7, #12]
 80186bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80186be:	1c5a      	adds	r2, r3, #1
 80186c0:	68fb      	ldr	r3, [r7, #12]
 80186c2:	635a      	str	r2, [r3, #52]	; 0x34
 80186c4:	68fb      	ldr	r3, [r7, #12]
 80186c6:	895b      	ldrh	r3, [r3, #10]
 80186c8:	461a      	mov	r2, r3
 80186ca:	693b      	ldr	r3, [r7, #16]
 80186cc:	4293      	cmp	r3, r2
 80186ce:	d3e6      	bcc.n	801869e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80186d0:	68fb      	ldr	r3, [r7, #12]
 80186d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80186d4:	693b      	ldr	r3, [r7, #16]
 80186d6:	1ad2      	subs	r2, r2, r3
 80186d8:	68fb      	ldr	r3, [r7, #12]
 80186da:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	697a      	ldr	r2, [r7, #20]
 80186e0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80186e2:	6979      	ldr	r1, [r7, #20]
 80186e4:	68f8      	ldr	r0, [r7, #12]
 80186e6:	f7ff fb79 	bl	8017ddc <clust2sect>
 80186ea:	4602      	mov	r2, r0
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	68ba      	ldr	r2, [r7, #8]
 80186f4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80186f6:	68fb      	ldr	r3, [r7, #12]
 80186f8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80186fc:	68fb      	ldr	r3, [r7, #12]
 80186fe:	899b      	ldrh	r3, [r3, #12]
 8018700:	461a      	mov	r2, r3
 8018702:	68bb      	ldr	r3, [r7, #8]
 8018704:	fbb3 f0f2 	udiv	r0, r3, r2
 8018708:	fb00 f202 	mul.w	r2, r0, r2
 801870c:	1a9b      	subs	r3, r3, r2
 801870e:	18ca      	adds	r2, r1, r3
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8018714:	2300      	movs	r3, #0
}
 8018716:	4618      	mov	r0, r3
 8018718:	3718      	adds	r7, #24
 801871a:	46bd      	mov	sp, r7
 801871c:	bd80      	pop	{r7, pc}

0801871e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801871e:	b580      	push	{r7, lr}
 8018720:	b086      	sub	sp, #24
 8018722:	af00      	add	r7, sp, #0
 8018724:	6078      	str	r0, [r7, #4]
 8018726:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801872e:	2100      	movs	r1, #0
 8018730:	6878      	ldr	r0, [r7, #4]
 8018732:	f7ff fe95 	bl	8018460 <dir_sdi>
 8018736:	4603      	mov	r3, r0
 8018738:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801873a:	7dfb      	ldrb	r3, [r7, #23]
 801873c:	2b00      	cmp	r3, #0
 801873e:	d12b      	bne.n	8018798 <dir_alloc+0x7a>
		n = 0;
 8018740:	2300      	movs	r3, #0
 8018742:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	69db      	ldr	r3, [r3, #28]
 8018748:	4619      	mov	r1, r3
 801874a:	68f8      	ldr	r0, [r7, #12]
 801874c:	f7ff faa8 	bl	8017ca0 <move_window>
 8018750:	4603      	mov	r3, r0
 8018752:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8018754:	7dfb      	ldrb	r3, [r7, #23]
 8018756:	2b00      	cmp	r3, #0
 8018758:	d11d      	bne.n	8018796 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	6a1b      	ldr	r3, [r3, #32]
 801875e:	781b      	ldrb	r3, [r3, #0]
 8018760:	2be5      	cmp	r3, #229	; 0xe5
 8018762:	d004      	beq.n	801876e <dir_alloc+0x50>
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	6a1b      	ldr	r3, [r3, #32]
 8018768:	781b      	ldrb	r3, [r3, #0]
 801876a:	2b00      	cmp	r3, #0
 801876c:	d107      	bne.n	801877e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801876e:	693b      	ldr	r3, [r7, #16]
 8018770:	3301      	adds	r3, #1
 8018772:	613b      	str	r3, [r7, #16]
 8018774:	693a      	ldr	r2, [r7, #16]
 8018776:	683b      	ldr	r3, [r7, #0]
 8018778:	429a      	cmp	r2, r3
 801877a:	d102      	bne.n	8018782 <dir_alloc+0x64>
 801877c:	e00c      	b.n	8018798 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801877e:	2300      	movs	r3, #0
 8018780:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8018782:	2101      	movs	r1, #1
 8018784:	6878      	ldr	r0, [r7, #4]
 8018786:	f7ff fef4 	bl	8018572 <dir_next>
 801878a:	4603      	mov	r3, r0
 801878c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801878e:	7dfb      	ldrb	r3, [r7, #23]
 8018790:	2b00      	cmp	r3, #0
 8018792:	d0d7      	beq.n	8018744 <dir_alloc+0x26>
 8018794:	e000      	b.n	8018798 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8018796:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8018798:	7dfb      	ldrb	r3, [r7, #23]
 801879a:	2b04      	cmp	r3, #4
 801879c:	d101      	bne.n	80187a2 <dir_alloc+0x84>
 801879e:	2307      	movs	r3, #7
 80187a0:	75fb      	strb	r3, [r7, #23]
	return res;
 80187a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80187a4:	4618      	mov	r0, r3
 80187a6:	3718      	adds	r7, #24
 80187a8:	46bd      	mov	sp, r7
 80187aa:	bd80      	pop	{r7, pc}

080187ac <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80187ac:	b580      	push	{r7, lr}
 80187ae:	b084      	sub	sp, #16
 80187b0:	af00      	add	r7, sp, #0
 80187b2:	6078      	str	r0, [r7, #4]
 80187b4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80187b6:	683b      	ldr	r3, [r7, #0]
 80187b8:	331a      	adds	r3, #26
 80187ba:	4618      	mov	r0, r3
 80187bc:	f7fe ffc0 	bl	8017740 <ld_word>
 80187c0:	4603      	mov	r3, r0
 80187c2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	781b      	ldrb	r3, [r3, #0]
 80187c8:	2b03      	cmp	r3, #3
 80187ca:	d109      	bne.n	80187e0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80187cc:	683b      	ldr	r3, [r7, #0]
 80187ce:	3314      	adds	r3, #20
 80187d0:	4618      	mov	r0, r3
 80187d2:	f7fe ffb5 	bl	8017740 <ld_word>
 80187d6:	4603      	mov	r3, r0
 80187d8:	041b      	lsls	r3, r3, #16
 80187da:	68fa      	ldr	r2, [r7, #12]
 80187dc:	4313      	orrs	r3, r2
 80187de:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80187e0:	68fb      	ldr	r3, [r7, #12]
}
 80187e2:	4618      	mov	r0, r3
 80187e4:	3710      	adds	r7, #16
 80187e6:	46bd      	mov	sp, r7
 80187e8:	bd80      	pop	{r7, pc}

080187ea <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80187ea:	b580      	push	{r7, lr}
 80187ec:	b084      	sub	sp, #16
 80187ee:	af00      	add	r7, sp, #0
 80187f0:	60f8      	str	r0, [r7, #12]
 80187f2:	60b9      	str	r1, [r7, #8]
 80187f4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80187f6:	68bb      	ldr	r3, [r7, #8]
 80187f8:	331a      	adds	r3, #26
 80187fa:	687a      	ldr	r2, [r7, #4]
 80187fc:	b292      	uxth	r2, r2
 80187fe:	4611      	mov	r1, r2
 8018800:	4618      	mov	r0, r3
 8018802:	f7fe ffd8 	bl	80177b6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8018806:	68fb      	ldr	r3, [r7, #12]
 8018808:	781b      	ldrb	r3, [r3, #0]
 801880a:	2b03      	cmp	r3, #3
 801880c:	d109      	bne.n	8018822 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801880e:	68bb      	ldr	r3, [r7, #8]
 8018810:	f103 0214 	add.w	r2, r3, #20
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	0c1b      	lsrs	r3, r3, #16
 8018818:	b29b      	uxth	r3, r3
 801881a:	4619      	mov	r1, r3
 801881c:	4610      	mov	r0, r2
 801881e:	f7fe ffca 	bl	80177b6 <st_word>
	}
}
 8018822:	bf00      	nop
 8018824:	3710      	adds	r7, #16
 8018826:	46bd      	mov	sp, r7
 8018828:	bd80      	pop	{r7, pc}
	...

0801882c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801882c:	b590      	push	{r4, r7, lr}
 801882e:	b087      	sub	sp, #28
 8018830:	af00      	add	r7, sp, #0
 8018832:	6078      	str	r0, [r7, #4]
 8018834:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8018836:	683b      	ldr	r3, [r7, #0]
 8018838:	331a      	adds	r3, #26
 801883a:	4618      	mov	r0, r3
 801883c:	f7fe ff80 	bl	8017740 <ld_word>
 8018840:	4603      	mov	r3, r0
 8018842:	2b00      	cmp	r3, #0
 8018844:	d001      	beq.n	801884a <cmp_lfn+0x1e>
 8018846:	2300      	movs	r3, #0
 8018848:	e059      	b.n	80188fe <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801884a:	683b      	ldr	r3, [r7, #0]
 801884c:	781b      	ldrb	r3, [r3, #0]
 801884e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018852:	1e5a      	subs	r2, r3, #1
 8018854:	4613      	mov	r3, r2
 8018856:	005b      	lsls	r3, r3, #1
 8018858:	4413      	add	r3, r2
 801885a:	009b      	lsls	r3, r3, #2
 801885c:	4413      	add	r3, r2
 801885e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8018860:	2301      	movs	r3, #1
 8018862:	81fb      	strh	r3, [r7, #14]
 8018864:	2300      	movs	r3, #0
 8018866:	613b      	str	r3, [r7, #16]
 8018868:	e033      	b.n	80188d2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801886a:	4a27      	ldr	r2, [pc, #156]	; (8018908 <cmp_lfn+0xdc>)
 801886c:	693b      	ldr	r3, [r7, #16]
 801886e:	4413      	add	r3, r2
 8018870:	781b      	ldrb	r3, [r3, #0]
 8018872:	461a      	mov	r2, r3
 8018874:	683b      	ldr	r3, [r7, #0]
 8018876:	4413      	add	r3, r2
 8018878:	4618      	mov	r0, r3
 801887a:	f7fe ff61 	bl	8017740 <ld_word>
 801887e:	4603      	mov	r3, r0
 8018880:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8018882:	89fb      	ldrh	r3, [r7, #14]
 8018884:	2b00      	cmp	r3, #0
 8018886:	d01a      	beq.n	80188be <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8018888:	697b      	ldr	r3, [r7, #20]
 801888a:	2bfe      	cmp	r3, #254	; 0xfe
 801888c:	d812      	bhi.n	80188b4 <cmp_lfn+0x88>
 801888e:	89bb      	ldrh	r3, [r7, #12]
 8018890:	4618      	mov	r0, r3
 8018892:	f001 fe11 	bl	801a4b8 <ff_wtoupper>
 8018896:	4603      	mov	r3, r0
 8018898:	461c      	mov	r4, r3
 801889a:	697b      	ldr	r3, [r7, #20]
 801889c:	1c5a      	adds	r2, r3, #1
 801889e:	617a      	str	r2, [r7, #20]
 80188a0:	005b      	lsls	r3, r3, #1
 80188a2:	687a      	ldr	r2, [r7, #4]
 80188a4:	4413      	add	r3, r2
 80188a6:	881b      	ldrh	r3, [r3, #0]
 80188a8:	4618      	mov	r0, r3
 80188aa:	f001 fe05 	bl	801a4b8 <ff_wtoupper>
 80188ae:	4603      	mov	r3, r0
 80188b0:	429c      	cmp	r4, r3
 80188b2:	d001      	beq.n	80188b8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80188b4:	2300      	movs	r3, #0
 80188b6:	e022      	b.n	80188fe <cmp_lfn+0xd2>
			}
			wc = uc;
 80188b8:	89bb      	ldrh	r3, [r7, #12]
 80188ba:	81fb      	strh	r3, [r7, #14]
 80188bc:	e006      	b.n	80188cc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80188be:	89bb      	ldrh	r3, [r7, #12]
 80188c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80188c4:	4293      	cmp	r3, r2
 80188c6:	d001      	beq.n	80188cc <cmp_lfn+0xa0>
 80188c8:	2300      	movs	r3, #0
 80188ca:	e018      	b.n	80188fe <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80188cc:	693b      	ldr	r3, [r7, #16]
 80188ce:	3301      	adds	r3, #1
 80188d0:	613b      	str	r3, [r7, #16]
 80188d2:	693b      	ldr	r3, [r7, #16]
 80188d4:	2b0c      	cmp	r3, #12
 80188d6:	d9c8      	bls.n	801886a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80188d8:	683b      	ldr	r3, [r7, #0]
 80188da:	781b      	ldrb	r3, [r3, #0]
 80188dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	d00b      	beq.n	80188fc <cmp_lfn+0xd0>
 80188e4:	89fb      	ldrh	r3, [r7, #14]
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d008      	beq.n	80188fc <cmp_lfn+0xd0>
 80188ea:	697b      	ldr	r3, [r7, #20]
 80188ec:	005b      	lsls	r3, r3, #1
 80188ee:	687a      	ldr	r2, [r7, #4]
 80188f0:	4413      	add	r3, r2
 80188f2:	881b      	ldrh	r3, [r3, #0]
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	d001      	beq.n	80188fc <cmp_lfn+0xd0>
 80188f8:	2300      	movs	r3, #0
 80188fa:	e000      	b.n	80188fe <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80188fc:	2301      	movs	r3, #1
}
 80188fe:	4618      	mov	r0, r3
 8018900:	371c      	adds	r7, #28
 8018902:	46bd      	mov	sp, r7
 8018904:	bd90      	pop	{r4, r7, pc}
 8018906:	bf00      	nop
 8018908:	08020214 	.word	0x08020214

0801890c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801890c:	b580      	push	{r7, lr}
 801890e:	b088      	sub	sp, #32
 8018910:	af00      	add	r7, sp, #0
 8018912:	60f8      	str	r0, [r7, #12]
 8018914:	60b9      	str	r1, [r7, #8]
 8018916:	4611      	mov	r1, r2
 8018918:	461a      	mov	r2, r3
 801891a:	460b      	mov	r3, r1
 801891c:	71fb      	strb	r3, [r7, #7]
 801891e:	4613      	mov	r3, r2
 8018920:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8018922:	68bb      	ldr	r3, [r7, #8]
 8018924:	330d      	adds	r3, #13
 8018926:	79ba      	ldrb	r2, [r7, #6]
 8018928:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801892a:	68bb      	ldr	r3, [r7, #8]
 801892c:	330b      	adds	r3, #11
 801892e:	220f      	movs	r2, #15
 8018930:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8018932:	68bb      	ldr	r3, [r7, #8]
 8018934:	330c      	adds	r3, #12
 8018936:	2200      	movs	r2, #0
 8018938:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801893a:	68bb      	ldr	r3, [r7, #8]
 801893c:	331a      	adds	r3, #26
 801893e:	2100      	movs	r1, #0
 8018940:	4618      	mov	r0, r3
 8018942:	f7fe ff38 	bl	80177b6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8018946:	79fb      	ldrb	r3, [r7, #7]
 8018948:	1e5a      	subs	r2, r3, #1
 801894a:	4613      	mov	r3, r2
 801894c:	005b      	lsls	r3, r3, #1
 801894e:	4413      	add	r3, r2
 8018950:	009b      	lsls	r3, r3, #2
 8018952:	4413      	add	r3, r2
 8018954:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8018956:	2300      	movs	r3, #0
 8018958:	82fb      	strh	r3, [r7, #22]
 801895a:	2300      	movs	r3, #0
 801895c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801895e:	8afb      	ldrh	r3, [r7, #22]
 8018960:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018964:	4293      	cmp	r3, r2
 8018966:	d007      	beq.n	8018978 <put_lfn+0x6c>
 8018968:	69fb      	ldr	r3, [r7, #28]
 801896a:	1c5a      	adds	r2, r3, #1
 801896c:	61fa      	str	r2, [r7, #28]
 801896e:	005b      	lsls	r3, r3, #1
 8018970:	68fa      	ldr	r2, [r7, #12]
 8018972:	4413      	add	r3, r2
 8018974:	881b      	ldrh	r3, [r3, #0]
 8018976:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8018978:	4a17      	ldr	r2, [pc, #92]	; (80189d8 <put_lfn+0xcc>)
 801897a:	69bb      	ldr	r3, [r7, #24]
 801897c:	4413      	add	r3, r2
 801897e:	781b      	ldrb	r3, [r3, #0]
 8018980:	461a      	mov	r2, r3
 8018982:	68bb      	ldr	r3, [r7, #8]
 8018984:	4413      	add	r3, r2
 8018986:	8afa      	ldrh	r2, [r7, #22]
 8018988:	4611      	mov	r1, r2
 801898a:	4618      	mov	r0, r3
 801898c:	f7fe ff13 	bl	80177b6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8018990:	8afb      	ldrh	r3, [r7, #22]
 8018992:	2b00      	cmp	r3, #0
 8018994:	d102      	bne.n	801899c <put_lfn+0x90>
 8018996:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801899a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801899c:	69bb      	ldr	r3, [r7, #24]
 801899e:	3301      	adds	r3, #1
 80189a0:	61bb      	str	r3, [r7, #24]
 80189a2:	69bb      	ldr	r3, [r7, #24]
 80189a4:	2b0c      	cmp	r3, #12
 80189a6:	d9da      	bls.n	801895e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80189a8:	8afb      	ldrh	r3, [r7, #22]
 80189aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80189ae:	4293      	cmp	r3, r2
 80189b0:	d006      	beq.n	80189c0 <put_lfn+0xb4>
 80189b2:	69fb      	ldr	r3, [r7, #28]
 80189b4:	005b      	lsls	r3, r3, #1
 80189b6:	68fa      	ldr	r2, [r7, #12]
 80189b8:	4413      	add	r3, r2
 80189ba:	881b      	ldrh	r3, [r3, #0]
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d103      	bne.n	80189c8 <put_lfn+0xbc>
 80189c0:	79fb      	ldrb	r3, [r7, #7]
 80189c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80189c6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80189c8:	68bb      	ldr	r3, [r7, #8]
 80189ca:	79fa      	ldrb	r2, [r7, #7]
 80189cc:	701a      	strb	r2, [r3, #0]
}
 80189ce:	bf00      	nop
 80189d0:	3720      	adds	r7, #32
 80189d2:	46bd      	mov	sp, r7
 80189d4:	bd80      	pop	{r7, pc}
 80189d6:	bf00      	nop
 80189d8:	08020214 	.word	0x08020214

080189dc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80189dc:	b580      	push	{r7, lr}
 80189de:	b08c      	sub	sp, #48	; 0x30
 80189e0:	af00      	add	r7, sp, #0
 80189e2:	60f8      	str	r0, [r7, #12]
 80189e4:	60b9      	str	r1, [r7, #8]
 80189e6:	607a      	str	r2, [r7, #4]
 80189e8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80189ea:	220b      	movs	r2, #11
 80189ec:	68b9      	ldr	r1, [r7, #8]
 80189ee:	68f8      	ldr	r0, [r7, #12]
 80189f0:	f7fe ff28 	bl	8017844 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80189f4:	683b      	ldr	r3, [r7, #0]
 80189f6:	2b05      	cmp	r3, #5
 80189f8:	d929      	bls.n	8018a4e <gen_numname+0x72>
		sr = seq;
 80189fa:	683b      	ldr	r3, [r7, #0]
 80189fc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80189fe:	e020      	b.n	8018a42 <gen_numname+0x66>
			wc = *lfn++;
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	1c9a      	adds	r2, r3, #2
 8018a04:	607a      	str	r2, [r7, #4]
 8018a06:	881b      	ldrh	r3, [r3, #0]
 8018a08:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8018a0a:	2300      	movs	r3, #0
 8018a0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8018a0e:	e015      	b.n	8018a3c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8018a10:	69fb      	ldr	r3, [r7, #28]
 8018a12:	005a      	lsls	r2, r3, #1
 8018a14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018a16:	f003 0301 	and.w	r3, r3, #1
 8018a1a:	4413      	add	r3, r2
 8018a1c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8018a1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018a20:	085b      	lsrs	r3, r3, #1
 8018a22:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8018a24:	69fb      	ldr	r3, [r7, #28]
 8018a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	d003      	beq.n	8018a36 <gen_numname+0x5a>
 8018a2e:	69fa      	ldr	r2, [r7, #28]
 8018a30:	4b30      	ldr	r3, [pc, #192]	; (8018af4 <gen_numname+0x118>)
 8018a32:	4053      	eors	r3, r2
 8018a34:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8018a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a38:	3301      	adds	r3, #1
 8018a3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8018a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a3e:	2b0f      	cmp	r3, #15
 8018a40:	d9e6      	bls.n	8018a10 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	881b      	ldrh	r3, [r3, #0]
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d1da      	bne.n	8018a00 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8018a4a:	69fb      	ldr	r3, [r7, #28]
 8018a4c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8018a4e:	2307      	movs	r3, #7
 8018a50:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8018a52:	683b      	ldr	r3, [r7, #0]
 8018a54:	b2db      	uxtb	r3, r3
 8018a56:	f003 030f 	and.w	r3, r3, #15
 8018a5a:	b2db      	uxtb	r3, r3
 8018a5c:	3330      	adds	r3, #48	; 0x30
 8018a5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8018a62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018a66:	2b39      	cmp	r3, #57	; 0x39
 8018a68:	d904      	bls.n	8018a74 <gen_numname+0x98>
 8018a6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018a6e:	3307      	adds	r3, #7
 8018a70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8018a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a76:	1e5a      	subs	r2, r3, #1
 8018a78:	62ba      	str	r2, [r7, #40]	; 0x28
 8018a7a:	3330      	adds	r3, #48	; 0x30
 8018a7c:	443b      	add	r3, r7
 8018a7e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8018a82:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8018a86:	683b      	ldr	r3, [r7, #0]
 8018a88:	091b      	lsrs	r3, r3, #4
 8018a8a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8018a8c:	683b      	ldr	r3, [r7, #0]
 8018a8e:	2b00      	cmp	r3, #0
 8018a90:	d1df      	bne.n	8018a52 <gen_numname+0x76>
	ns[i] = '~';
 8018a92:	f107 0214 	add.w	r2, r7, #20
 8018a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a98:	4413      	add	r3, r2
 8018a9a:	227e      	movs	r2, #126	; 0x7e
 8018a9c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8018a9e:	2300      	movs	r3, #0
 8018aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8018aa2:	e002      	b.n	8018aaa <gen_numname+0xce>
 8018aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018aa6:	3301      	adds	r3, #1
 8018aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8018aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018aae:	429a      	cmp	r2, r3
 8018ab0:	d205      	bcs.n	8018abe <gen_numname+0xe2>
 8018ab2:	68fa      	ldr	r2, [r7, #12]
 8018ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ab6:	4413      	add	r3, r2
 8018ab8:	781b      	ldrb	r3, [r3, #0]
 8018aba:	2b20      	cmp	r3, #32
 8018abc:	d1f2      	bne.n	8018aa4 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8018abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ac0:	2b07      	cmp	r3, #7
 8018ac2:	d807      	bhi.n	8018ad4 <gen_numname+0xf8>
 8018ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ac6:	1c5a      	adds	r2, r3, #1
 8018ac8:	62ba      	str	r2, [r7, #40]	; 0x28
 8018aca:	3330      	adds	r3, #48	; 0x30
 8018acc:	443b      	add	r3, r7
 8018ace:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8018ad2:	e000      	b.n	8018ad6 <gen_numname+0xfa>
 8018ad4:	2120      	movs	r1, #32
 8018ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ad8:	1c5a      	adds	r2, r3, #1
 8018ada:	627a      	str	r2, [r7, #36]	; 0x24
 8018adc:	68fa      	ldr	r2, [r7, #12]
 8018ade:	4413      	add	r3, r2
 8018ae0:	460a      	mov	r2, r1
 8018ae2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8018ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ae6:	2b07      	cmp	r3, #7
 8018ae8:	d9e9      	bls.n	8018abe <gen_numname+0xe2>
}
 8018aea:	bf00      	nop
 8018aec:	bf00      	nop
 8018aee:	3730      	adds	r7, #48	; 0x30
 8018af0:	46bd      	mov	sp, r7
 8018af2:	bd80      	pop	{r7, pc}
 8018af4:	00011021 	.word	0x00011021

08018af8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8018af8:	b480      	push	{r7}
 8018afa:	b085      	sub	sp, #20
 8018afc:	af00      	add	r7, sp, #0
 8018afe:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8018b00:	2300      	movs	r3, #0
 8018b02:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8018b04:	230b      	movs	r3, #11
 8018b06:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8018b08:	7bfb      	ldrb	r3, [r7, #15]
 8018b0a:	b2da      	uxtb	r2, r3
 8018b0c:	0852      	lsrs	r2, r2, #1
 8018b0e:	01db      	lsls	r3, r3, #7
 8018b10:	4313      	orrs	r3, r2
 8018b12:	b2da      	uxtb	r2, r3
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	1c59      	adds	r1, r3, #1
 8018b18:	6079      	str	r1, [r7, #4]
 8018b1a:	781b      	ldrb	r3, [r3, #0]
 8018b1c:	4413      	add	r3, r2
 8018b1e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8018b20:	68bb      	ldr	r3, [r7, #8]
 8018b22:	3b01      	subs	r3, #1
 8018b24:	60bb      	str	r3, [r7, #8]
 8018b26:	68bb      	ldr	r3, [r7, #8]
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	d1ed      	bne.n	8018b08 <sum_sfn+0x10>
	return sum;
 8018b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8018b2e:	4618      	mov	r0, r3
 8018b30:	3714      	adds	r7, #20
 8018b32:	46bd      	mov	sp, r7
 8018b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b38:	4770      	bx	lr

08018b3a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8018b3a:	b580      	push	{r7, lr}
 8018b3c:	b086      	sub	sp, #24
 8018b3e:	af00      	add	r7, sp, #0
 8018b40:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8018b48:	2100      	movs	r1, #0
 8018b4a:	6878      	ldr	r0, [r7, #4]
 8018b4c:	f7ff fc88 	bl	8018460 <dir_sdi>
 8018b50:	4603      	mov	r3, r0
 8018b52:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8018b54:	7dfb      	ldrb	r3, [r7, #23]
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d001      	beq.n	8018b5e <dir_find+0x24>
 8018b5a:	7dfb      	ldrb	r3, [r7, #23]
 8018b5c:	e0a9      	b.n	8018cb2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018b5e:	23ff      	movs	r3, #255	; 0xff
 8018b60:	753b      	strb	r3, [r7, #20]
 8018b62:	7d3b      	ldrb	r3, [r7, #20]
 8018b64:	757b      	strb	r3, [r7, #21]
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	f04f 32ff 	mov.w	r2, #4294967295
 8018b6c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	69db      	ldr	r3, [r3, #28]
 8018b72:	4619      	mov	r1, r3
 8018b74:	6938      	ldr	r0, [r7, #16]
 8018b76:	f7ff f893 	bl	8017ca0 <move_window>
 8018b7a:	4603      	mov	r3, r0
 8018b7c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8018b7e:	7dfb      	ldrb	r3, [r7, #23]
 8018b80:	2b00      	cmp	r3, #0
 8018b82:	f040 8090 	bne.w	8018ca6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	6a1b      	ldr	r3, [r3, #32]
 8018b8a:	781b      	ldrb	r3, [r3, #0]
 8018b8c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8018b8e:	7dbb      	ldrb	r3, [r7, #22]
 8018b90:	2b00      	cmp	r3, #0
 8018b92:	d102      	bne.n	8018b9a <dir_find+0x60>
 8018b94:	2304      	movs	r3, #4
 8018b96:	75fb      	strb	r3, [r7, #23]
 8018b98:	e08a      	b.n	8018cb0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	6a1b      	ldr	r3, [r3, #32]
 8018b9e:	330b      	adds	r3, #11
 8018ba0:	781b      	ldrb	r3, [r3, #0]
 8018ba2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018ba6:	73fb      	strb	r3, [r7, #15]
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	7bfa      	ldrb	r2, [r7, #15]
 8018bac:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8018bae:	7dbb      	ldrb	r3, [r7, #22]
 8018bb0:	2be5      	cmp	r3, #229	; 0xe5
 8018bb2:	d007      	beq.n	8018bc4 <dir_find+0x8a>
 8018bb4:	7bfb      	ldrb	r3, [r7, #15]
 8018bb6:	f003 0308 	and.w	r3, r3, #8
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	d009      	beq.n	8018bd2 <dir_find+0x98>
 8018bbe:	7bfb      	ldrb	r3, [r7, #15]
 8018bc0:	2b0f      	cmp	r3, #15
 8018bc2:	d006      	beq.n	8018bd2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018bc4:	23ff      	movs	r3, #255	; 0xff
 8018bc6:	757b      	strb	r3, [r7, #21]
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	f04f 32ff 	mov.w	r2, #4294967295
 8018bce:	631a      	str	r2, [r3, #48]	; 0x30
 8018bd0:	e05e      	b.n	8018c90 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8018bd2:	7bfb      	ldrb	r3, [r7, #15]
 8018bd4:	2b0f      	cmp	r3, #15
 8018bd6:	d136      	bne.n	8018c46 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	d154      	bne.n	8018c90 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8018be6:	7dbb      	ldrb	r3, [r7, #22]
 8018be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	d00d      	beq.n	8018c0c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	6a1b      	ldr	r3, [r3, #32]
 8018bf4:	7b5b      	ldrb	r3, [r3, #13]
 8018bf6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8018bf8:	7dbb      	ldrb	r3, [r7, #22]
 8018bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018bfe:	75bb      	strb	r3, [r7, #22]
 8018c00:	7dbb      	ldrb	r3, [r7, #22]
 8018c02:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	695a      	ldr	r2, [r3, #20]
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8018c0c:	7dba      	ldrb	r2, [r7, #22]
 8018c0e:	7d7b      	ldrb	r3, [r7, #21]
 8018c10:	429a      	cmp	r2, r3
 8018c12:	d115      	bne.n	8018c40 <dir_find+0x106>
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	6a1b      	ldr	r3, [r3, #32]
 8018c18:	330d      	adds	r3, #13
 8018c1a:	781b      	ldrb	r3, [r3, #0]
 8018c1c:	7d3a      	ldrb	r2, [r7, #20]
 8018c1e:	429a      	cmp	r2, r3
 8018c20:	d10e      	bne.n	8018c40 <dir_find+0x106>
 8018c22:	693b      	ldr	r3, [r7, #16]
 8018c24:	691a      	ldr	r2, [r3, #16]
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	6a1b      	ldr	r3, [r3, #32]
 8018c2a:	4619      	mov	r1, r3
 8018c2c:	4610      	mov	r0, r2
 8018c2e:	f7ff fdfd 	bl	801882c <cmp_lfn>
 8018c32:	4603      	mov	r3, r0
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	d003      	beq.n	8018c40 <dir_find+0x106>
 8018c38:	7d7b      	ldrb	r3, [r7, #21]
 8018c3a:	3b01      	subs	r3, #1
 8018c3c:	b2db      	uxtb	r3, r3
 8018c3e:	e000      	b.n	8018c42 <dir_find+0x108>
 8018c40:	23ff      	movs	r3, #255	; 0xff
 8018c42:	757b      	strb	r3, [r7, #21]
 8018c44:	e024      	b.n	8018c90 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8018c46:	7d7b      	ldrb	r3, [r7, #21]
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	d109      	bne.n	8018c60 <dir_find+0x126>
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	6a1b      	ldr	r3, [r3, #32]
 8018c50:	4618      	mov	r0, r3
 8018c52:	f7ff ff51 	bl	8018af8 <sum_sfn>
 8018c56:	4603      	mov	r3, r0
 8018c58:	461a      	mov	r2, r3
 8018c5a:	7d3b      	ldrb	r3, [r7, #20]
 8018c5c:	4293      	cmp	r3, r2
 8018c5e:	d024      	beq.n	8018caa <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018c66:	f003 0301 	and.w	r3, r3, #1
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d10a      	bne.n	8018c84 <dir_find+0x14a>
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	6a18      	ldr	r0, [r3, #32]
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	3324      	adds	r3, #36	; 0x24
 8018c76:	220b      	movs	r2, #11
 8018c78:	4619      	mov	r1, r3
 8018c7a:	f7fe fe1f 	bl	80178bc <mem_cmp>
 8018c7e:	4603      	mov	r3, r0
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	d014      	beq.n	8018cae <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018c84:	23ff      	movs	r3, #255	; 0xff
 8018c86:	757b      	strb	r3, [r7, #21]
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8018c8e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8018c90:	2100      	movs	r1, #0
 8018c92:	6878      	ldr	r0, [r7, #4]
 8018c94:	f7ff fc6d 	bl	8018572 <dir_next>
 8018c98:	4603      	mov	r3, r0
 8018c9a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8018c9c:	7dfb      	ldrb	r3, [r7, #23]
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	f43f af65 	beq.w	8018b6e <dir_find+0x34>
 8018ca4:	e004      	b.n	8018cb0 <dir_find+0x176>
		if (res != FR_OK) break;
 8018ca6:	bf00      	nop
 8018ca8:	e002      	b.n	8018cb0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8018caa:	bf00      	nop
 8018cac:	e000      	b.n	8018cb0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8018cae:	bf00      	nop

	return res;
 8018cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8018cb2:	4618      	mov	r0, r3
 8018cb4:	3718      	adds	r7, #24
 8018cb6:	46bd      	mov	sp, r7
 8018cb8:	bd80      	pop	{r7, pc}
	...

08018cbc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8018cbc:	b580      	push	{r7, lr}
 8018cbe:	b08c      	sub	sp, #48	; 0x30
 8018cc0:	af00      	add	r7, sp, #0
 8018cc2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	681b      	ldr	r3, [r3, #0]
 8018cc8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018cd0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d001      	beq.n	8018cdc <dir_register+0x20>
 8018cd8:	2306      	movs	r3, #6
 8018cda:	e0e0      	b.n	8018e9e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8018cdc:	2300      	movs	r3, #0
 8018cde:	627b      	str	r3, [r7, #36]	; 0x24
 8018ce0:	e002      	b.n	8018ce8 <dir_register+0x2c>
 8018ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ce4:	3301      	adds	r3, #1
 8018ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8018ce8:	69fb      	ldr	r3, [r7, #28]
 8018cea:	691a      	ldr	r2, [r3, #16]
 8018cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018cee:	005b      	lsls	r3, r3, #1
 8018cf0:	4413      	add	r3, r2
 8018cf2:	881b      	ldrh	r3, [r3, #0]
 8018cf4:	2b00      	cmp	r3, #0
 8018cf6:	d1f4      	bne.n	8018ce2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8018cfe:	f107 030c 	add.w	r3, r7, #12
 8018d02:	220c      	movs	r2, #12
 8018d04:	4618      	mov	r0, r3
 8018d06:	f7fe fd9d 	bl	8017844 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8018d0a:	7dfb      	ldrb	r3, [r7, #23]
 8018d0c:	f003 0301 	and.w	r3, r3, #1
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	d032      	beq.n	8018d7a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	2240      	movs	r2, #64	; 0x40
 8018d18:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8018d1c:	2301      	movs	r3, #1
 8018d1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8018d20:	e016      	b.n	8018d50 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8018d28:	69fb      	ldr	r3, [r7, #28]
 8018d2a:	691a      	ldr	r2, [r3, #16]
 8018d2c:	f107 010c 	add.w	r1, r7, #12
 8018d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d32:	f7ff fe53 	bl	80189dc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8018d36:	6878      	ldr	r0, [r7, #4]
 8018d38:	f7ff feff 	bl	8018b3a <dir_find>
 8018d3c:	4603      	mov	r3, r0
 8018d3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8018d42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d106      	bne.n	8018d58 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8018d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d4c:	3301      	adds	r3, #1
 8018d4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8018d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d52:	2b63      	cmp	r3, #99	; 0x63
 8018d54:	d9e5      	bls.n	8018d22 <dir_register+0x66>
 8018d56:	e000      	b.n	8018d5a <dir_register+0x9e>
			if (res != FR_OK) break;
 8018d58:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8018d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d5c:	2b64      	cmp	r3, #100	; 0x64
 8018d5e:	d101      	bne.n	8018d64 <dir_register+0xa8>
 8018d60:	2307      	movs	r3, #7
 8018d62:	e09c      	b.n	8018e9e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8018d64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018d68:	2b04      	cmp	r3, #4
 8018d6a:	d002      	beq.n	8018d72 <dir_register+0xb6>
 8018d6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018d70:	e095      	b.n	8018e9e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8018d72:	7dfa      	ldrb	r2, [r7, #23]
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8018d7a:	7dfb      	ldrb	r3, [r7, #23]
 8018d7c:	f003 0302 	and.w	r3, r3, #2
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	d007      	beq.n	8018d94 <dir_register+0xd8>
 8018d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d86:	330c      	adds	r3, #12
 8018d88:	4a47      	ldr	r2, [pc, #284]	; (8018ea8 <dir_register+0x1ec>)
 8018d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8018d8e:	089b      	lsrs	r3, r3, #2
 8018d90:	3301      	adds	r3, #1
 8018d92:	e000      	b.n	8018d96 <dir_register+0xda>
 8018d94:	2301      	movs	r3, #1
 8018d96:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8018d98:	6a39      	ldr	r1, [r7, #32]
 8018d9a:	6878      	ldr	r0, [r7, #4]
 8018d9c:	f7ff fcbf 	bl	801871e <dir_alloc>
 8018da0:	4603      	mov	r3, r0
 8018da2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8018da6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d148      	bne.n	8018e40 <dir_register+0x184>
 8018dae:	6a3b      	ldr	r3, [r7, #32]
 8018db0:	3b01      	subs	r3, #1
 8018db2:	623b      	str	r3, [r7, #32]
 8018db4:	6a3b      	ldr	r3, [r7, #32]
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d042      	beq.n	8018e40 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	695a      	ldr	r2, [r3, #20]
 8018dbe:	6a3b      	ldr	r3, [r7, #32]
 8018dc0:	015b      	lsls	r3, r3, #5
 8018dc2:	1ad3      	subs	r3, r2, r3
 8018dc4:	4619      	mov	r1, r3
 8018dc6:	6878      	ldr	r0, [r7, #4]
 8018dc8:	f7ff fb4a 	bl	8018460 <dir_sdi>
 8018dcc:	4603      	mov	r3, r0
 8018dce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8018dd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	d132      	bne.n	8018e40 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	3324      	adds	r3, #36	; 0x24
 8018dde:	4618      	mov	r0, r3
 8018de0:	f7ff fe8a 	bl	8018af8 <sum_sfn>
 8018de4:	4603      	mov	r3, r0
 8018de6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	69db      	ldr	r3, [r3, #28]
 8018dec:	4619      	mov	r1, r3
 8018dee:	69f8      	ldr	r0, [r7, #28]
 8018df0:	f7fe ff56 	bl	8017ca0 <move_window>
 8018df4:	4603      	mov	r3, r0
 8018df6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8018dfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	d11d      	bne.n	8018e3e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8018e02:	69fb      	ldr	r3, [r7, #28]
 8018e04:	6918      	ldr	r0, [r3, #16]
 8018e06:	687b      	ldr	r3, [r7, #4]
 8018e08:	6a19      	ldr	r1, [r3, #32]
 8018e0a:	6a3b      	ldr	r3, [r7, #32]
 8018e0c:	b2da      	uxtb	r2, r3
 8018e0e:	7efb      	ldrb	r3, [r7, #27]
 8018e10:	f7ff fd7c 	bl	801890c <put_lfn>
				fs->wflag = 1;
 8018e14:	69fb      	ldr	r3, [r7, #28]
 8018e16:	2201      	movs	r2, #1
 8018e18:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8018e1a:	2100      	movs	r1, #0
 8018e1c:	6878      	ldr	r0, [r7, #4]
 8018e1e:	f7ff fba8 	bl	8018572 <dir_next>
 8018e22:	4603      	mov	r3, r0
 8018e24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8018e28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	d107      	bne.n	8018e40 <dir_register+0x184>
 8018e30:	6a3b      	ldr	r3, [r7, #32]
 8018e32:	3b01      	subs	r3, #1
 8018e34:	623b      	str	r3, [r7, #32]
 8018e36:	6a3b      	ldr	r3, [r7, #32]
 8018e38:	2b00      	cmp	r3, #0
 8018e3a:	d1d5      	bne.n	8018de8 <dir_register+0x12c>
 8018e3c:	e000      	b.n	8018e40 <dir_register+0x184>
				if (res != FR_OK) break;
 8018e3e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8018e40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d128      	bne.n	8018e9a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	69db      	ldr	r3, [r3, #28]
 8018e4c:	4619      	mov	r1, r3
 8018e4e:	69f8      	ldr	r0, [r7, #28]
 8018e50:	f7fe ff26 	bl	8017ca0 <move_window>
 8018e54:	4603      	mov	r3, r0
 8018e56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8018e5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	d11b      	bne.n	8018e9a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	6a1b      	ldr	r3, [r3, #32]
 8018e66:	2220      	movs	r2, #32
 8018e68:	2100      	movs	r1, #0
 8018e6a:	4618      	mov	r0, r3
 8018e6c:	f7fe fd0b 	bl	8017886 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	6a18      	ldr	r0, [r3, #32]
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	3324      	adds	r3, #36	; 0x24
 8018e78:	220b      	movs	r2, #11
 8018e7a:	4619      	mov	r1, r3
 8018e7c:	f7fe fce2 	bl	8017844 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	6a1b      	ldr	r3, [r3, #32]
 8018e8a:	330c      	adds	r3, #12
 8018e8c:	f002 0218 	and.w	r2, r2, #24
 8018e90:	b2d2      	uxtb	r2, r2
 8018e92:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8018e94:	69fb      	ldr	r3, [r7, #28]
 8018e96:	2201      	movs	r2, #1
 8018e98:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8018e9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8018e9e:	4618      	mov	r0, r3
 8018ea0:	3730      	adds	r7, #48	; 0x30
 8018ea2:	46bd      	mov	sp, r7
 8018ea4:	bd80      	pop	{r7, pc}
 8018ea6:	bf00      	nop
 8018ea8:	4ec4ec4f 	.word	0x4ec4ec4f

08018eac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8018eac:	b580      	push	{r7, lr}
 8018eae:	b08a      	sub	sp, #40	; 0x28
 8018eb0:	af00      	add	r7, sp, #0
 8018eb2:	6078      	str	r0, [r7, #4]
 8018eb4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8018eb6:	683b      	ldr	r3, [r7, #0]
 8018eb8:	681b      	ldr	r3, [r3, #0]
 8018eba:	613b      	str	r3, [r7, #16]
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	681b      	ldr	r3, [r3, #0]
 8018ec0:	691b      	ldr	r3, [r3, #16]
 8018ec2:	60fb      	str	r3, [r7, #12]
 8018ec4:	2300      	movs	r3, #0
 8018ec6:	617b      	str	r3, [r7, #20]
 8018ec8:	697b      	ldr	r3, [r7, #20]
 8018eca:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8018ecc:	69bb      	ldr	r3, [r7, #24]
 8018ece:	1c5a      	adds	r2, r3, #1
 8018ed0:	61ba      	str	r2, [r7, #24]
 8018ed2:	693a      	ldr	r2, [r7, #16]
 8018ed4:	4413      	add	r3, r2
 8018ed6:	781b      	ldrb	r3, [r3, #0]
 8018ed8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8018eda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018edc:	2b1f      	cmp	r3, #31
 8018ede:	d940      	bls.n	8018f62 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8018ee0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ee2:	2b2f      	cmp	r3, #47	; 0x2f
 8018ee4:	d006      	beq.n	8018ef4 <create_name+0x48>
 8018ee6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ee8:	2b5c      	cmp	r3, #92	; 0x5c
 8018eea:	d110      	bne.n	8018f0e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8018eec:	e002      	b.n	8018ef4 <create_name+0x48>
 8018eee:	69bb      	ldr	r3, [r7, #24]
 8018ef0:	3301      	adds	r3, #1
 8018ef2:	61bb      	str	r3, [r7, #24]
 8018ef4:	693a      	ldr	r2, [r7, #16]
 8018ef6:	69bb      	ldr	r3, [r7, #24]
 8018ef8:	4413      	add	r3, r2
 8018efa:	781b      	ldrb	r3, [r3, #0]
 8018efc:	2b2f      	cmp	r3, #47	; 0x2f
 8018efe:	d0f6      	beq.n	8018eee <create_name+0x42>
 8018f00:	693a      	ldr	r2, [r7, #16]
 8018f02:	69bb      	ldr	r3, [r7, #24]
 8018f04:	4413      	add	r3, r2
 8018f06:	781b      	ldrb	r3, [r3, #0]
 8018f08:	2b5c      	cmp	r3, #92	; 0x5c
 8018f0a:	d0f0      	beq.n	8018eee <create_name+0x42>
			break;
 8018f0c:	e02a      	b.n	8018f64 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8018f0e:	697b      	ldr	r3, [r7, #20]
 8018f10:	2bfe      	cmp	r3, #254	; 0xfe
 8018f12:	d901      	bls.n	8018f18 <create_name+0x6c>
 8018f14:	2306      	movs	r3, #6
 8018f16:	e17d      	b.n	8019214 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8018f18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f1a:	b2db      	uxtb	r3, r3
 8018f1c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8018f1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f20:	2101      	movs	r1, #1
 8018f22:	4618      	mov	r0, r3
 8018f24:	f001 fa8c 	bl	801a440 <ff_convert>
 8018f28:	4603      	mov	r3, r0
 8018f2a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8018f2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	d101      	bne.n	8018f36 <create_name+0x8a>
 8018f32:	2306      	movs	r3, #6
 8018f34:	e16e      	b.n	8019214 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8018f36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f38:	2b7f      	cmp	r3, #127	; 0x7f
 8018f3a:	d809      	bhi.n	8018f50 <create_name+0xa4>
 8018f3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f3e:	4619      	mov	r1, r3
 8018f40:	488d      	ldr	r0, [pc, #564]	; (8019178 <create_name+0x2cc>)
 8018f42:	f7fe fce2 	bl	801790a <chk_chr>
 8018f46:	4603      	mov	r3, r0
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	d001      	beq.n	8018f50 <create_name+0xa4>
 8018f4c:	2306      	movs	r3, #6
 8018f4e:	e161      	b.n	8019214 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8018f50:	697b      	ldr	r3, [r7, #20]
 8018f52:	1c5a      	adds	r2, r3, #1
 8018f54:	617a      	str	r2, [r7, #20]
 8018f56:	005b      	lsls	r3, r3, #1
 8018f58:	68fa      	ldr	r2, [r7, #12]
 8018f5a:	4413      	add	r3, r2
 8018f5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018f5e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8018f60:	e7b4      	b.n	8018ecc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8018f62:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8018f64:	693a      	ldr	r2, [r7, #16]
 8018f66:	69bb      	ldr	r3, [r7, #24]
 8018f68:	441a      	add	r2, r3
 8018f6a:	683b      	ldr	r3, [r7, #0]
 8018f6c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8018f6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f70:	2b1f      	cmp	r3, #31
 8018f72:	d801      	bhi.n	8018f78 <create_name+0xcc>
 8018f74:	2304      	movs	r3, #4
 8018f76:	e000      	b.n	8018f7a <create_name+0xce>
 8018f78:	2300      	movs	r3, #0
 8018f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8018f7e:	e011      	b.n	8018fa4 <create_name+0xf8>
		w = lfn[di - 1];
 8018f80:	697a      	ldr	r2, [r7, #20]
 8018f82:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018f86:	4413      	add	r3, r2
 8018f88:	005b      	lsls	r3, r3, #1
 8018f8a:	68fa      	ldr	r2, [r7, #12]
 8018f8c:	4413      	add	r3, r2
 8018f8e:	881b      	ldrh	r3, [r3, #0]
 8018f90:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8018f92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f94:	2b20      	cmp	r3, #32
 8018f96:	d002      	beq.n	8018f9e <create_name+0xf2>
 8018f98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f9a:	2b2e      	cmp	r3, #46	; 0x2e
 8018f9c:	d106      	bne.n	8018fac <create_name+0x100>
		di--;
 8018f9e:	697b      	ldr	r3, [r7, #20]
 8018fa0:	3b01      	subs	r3, #1
 8018fa2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8018fa4:	697b      	ldr	r3, [r7, #20]
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d1ea      	bne.n	8018f80 <create_name+0xd4>
 8018faa:	e000      	b.n	8018fae <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8018fac:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8018fae:	697b      	ldr	r3, [r7, #20]
 8018fb0:	005b      	lsls	r3, r3, #1
 8018fb2:	68fa      	ldr	r2, [r7, #12]
 8018fb4:	4413      	add	r3, r2
 8018fb6:	2200      	movs	r2, #0
 8018fb8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8018fba:	697b      	ldr	r3, [r7, #20]
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d101      	bne.n	8018fc4 <create_name+0x118>
 8018fc0:	2306      	movs	r3, #6
 8018fc2:	e127      	b.n	8019214 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	3324      	adds	r3, #36	; 0x24
 8018fc8:	220b      	movs	r2, #11
 8018fca:	2120      	movs	r1, #32
 8018fcc:	4618      	mov	r0, r3
 8018fce:	f7fe fc5a 	bl	8017886 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8018fd2:	2300      	movs	r3, #0
 8018fd4:	61bb      	str	r3, [r7, #24]
 8018fd6:	e002      	b.n	8018fde <create_name+0x132>
 8018fd8:	69bb      	ldr	r3, [r7, #24]
 8018fda:	3301      	adds	r3, #1
 8018fdc:	61bb      	str	r3, [r7, #24]
 8018fde:	69bb      	ldr	r3, [r7, #24]
 8018fe0:	005b      	lsls	r3, r3, #1
 8018fe2:	68fa      	ldr	r2, [r7, #12]
 8018fe4:	4413      	add	r3, r2
 8018fe6:	881b      	ldrh	r3, [r3, #0]
 8018fe8:	2b20      	cmp	r3, #32
 8018fea:	d0f5      	beq.n	8018fd8 <create_name+0x12c>
 8018fec:	69bb      	ldr	r3, [r7, #24]
 8018fee:	005b      	lsls	r3, r3, #1
 8018ff0:	68fa      	ldr	r2, [r7, #12]
 8018ff2:	4413      	add	r3, r2
 8018ff4:	881b      	ldrh	r3, [r3, #0]
 8018ff6:	2b2e      	cmp	r3, #46	; 0x2e
 8018ff8:	d0ee      	beq.n	8018fd8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8018ffa:	69bb      	ldr	r3, [r7, #24]
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	d009      	beq.n	8019014 <create_name+0x168>
 8019000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019004:	f043 0303 	orr.w	r3, r3, #3
 8019008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801900c:	e002      	b.n	8019014 <create_name+0x168>
 801900e:	697b      	ldr	r3, [r7, #20]
 8019010:	3b01      	subs	r3, #1
 8019012:	617b      	str	r3, [r7, #20]
 8019014:	697b      	ldr	r3, [r7, #20]
 8019016:	2b00      	cmp	r3, #0
 8019018:	d009      	beq.n	801902e <create_name+0x182>
 801901a:	697a      	ldr	r2, [r7, #20]
 801901c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8019020:	4413      	add	r3, r2
 8019022:	005b      	lsls	r3, r3, #1
 8019024:	68fa      	ldr	r2, [r7, #12]
 8019026:	4413      	add	r3, r2
 8019028:	881b      	ldrh	r3, [r3, #0]
 801902a:	2b2e      	cmp	r3, #46	; 0x2e
 801902c:	d1ef      	bne.n	801900e <create_name+0x162>

	i = b = 0; ni = 8;
 801902e:	2300      	movs	r3, #0
 8019030:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8019034:	2300      	movs	r3, #0
 8019036:	623b      	str	r3, [r7, #32]
 8019038:	2308      	movs	r3, #8
 801903a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801903c:	69bb      	ldr	r3, [r7, #24]
 801903e:	1c5a      	adds	r2, r3, #1
 8019040:	61ba      	str	r2, [r7, #24]
 8019042:	005b      	lsls	r3, r3, #1
 8019044:	68fa      	ldr	r2, [r7, #12]
 8019046:	4413      	add	r3, r2
 8019048:	881b      	ldrh	r3, [r3, #0]
 801904a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 801904c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801904e:	2b00      	cmp	r3, #0
 8019050:	f000 8090 	beq.w	8019174 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8019054:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019056:	2b20      	cmp	r3, #32
 8019058:	d006      	beq.n	8019068 <create_name+0x1bc>
 801905a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801905c:	2b2e      	cmp	r3, #46	; 0x2e
 801905e:	d10a      	bne.n	8019076 <create_name+0x1ca>
 8019060:	69ba      	ldr	r2, [r7, #24]
 8019062:	697b      	ldr	r3, [r7, #20]
 8019064:	429a      	cmp	r2, r3
 8019066:	d006      	beq.n	8019076 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8019068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801906c:	f043 0303 	orr.w	r3, r3, #3
 8019070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019074:	e07d      	b.n	8019172 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8019076:	6a3a      	ldr	r2, [r7, #32]
 8019078:	69fb      	ldr	r3, [r7, #28]
 801907a:	429a      	cmp	r2, r3
 801907c:	d203      	bcs.n	8019086 <create_name+0x1da>
 801907e:	69ba      	ldr	r2, [r7, #24]
 8019080:	697b      	ldr	r3, [r7, #20]
 8019082:	429a      	cmp	r2, r3
 8019084:	d123      	bne.n	80190ce <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8019086:	69fb      	ldr	r3, [r7, #28]
 8019088:	2b0b      	cmp	r3, #11
 801908a:	d106      	bne.n	801909a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801908c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019090:	f043 0303 	orr.w	r3, r3, #3
 8019094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019098:	e075      	b.n	8019186 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801909a:	69ba      	ldr	r2, [r7, #24]
 801909c:	697b      	ldr	r3, [r7, #20]
 801909e:	429a      	cmp	r2, r3
 80190a0:	d005      	beq.n	80190ae <create_name+0x202>
 80190a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80190a6:	f043 0303 	orr.w	r3, r3, #3
 80190aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80190ae:	69ba      	ldr	r2, [r7, #24]
 80190b0:	697b      	ldr	r3, [r7, #20]
 80190b2:	429a      	cmp	r2, r3
 80190b4:	d866      	bhi.n	8019184 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80190b6:	697b      	ldr	r3, [r7, #20]
 80190b8:	61bb      	str	r3, [r7, #24]
 80190ba:	2308      	movs	r3, #8
 80190bc:	623b      	str	r3, [r7, #32]
 80190be:	230b      	movs	r3, #11
 80190c0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80190c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80190c6:	009b      	lsls	r3, r3, #2
 80190c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80190cc:	e051      	b.n	8019172 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80190ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80190d0:	2b7f      	cmp	r3, #127	; 0x7f
 80190d2:	d914      	bls.n	80190fe <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80190d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80190d6:	2100      	movs	r1, #0
 80190d8:	4618      	mov	r0, r3
 80190da:	f001 f9b1 	bl	801a440 <ff_convert>
 80190de:	4603      	mov	r3, r0
 80190e0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80190e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d004      	beq.n	80190f2 <create_name+0x246>
 80190e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80190ea:	3b80      	subs	r3, #128	; 0x80
 80190ec:	4a23      	ldr	r2, [pc, #140]	; (801917c <create_name+0x2d0>)
 80190ee:	5cd3      	ldrb	r3, [r2, r3]
 80190f0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80190f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80190f6:	f043 0302 	orr.w	r3, r3, #2
 80190fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80190fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019100:	2b00      	cmp	r3, #0
 8019102:	d007      	beq.n	8019114 <create_name+0x268>
 8019104:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019106:	4619      	mov	r1, r3
 8019108:	481d      	ldr	r0, [pc, #116]	; (8019180 <create_name+0x2d4>)
 801910a:	f7fe fbfe 	bl	801790a <chk_chr>
 801910e:	4603      	mov	r3, r0
 8019110:	2b00      	cmp	r3, #0
 8019112:	d008      	beq.n	8019126 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8019114:	235f      	movs	r3, #95	; 0x5f
 8019116:	84bb      	strh	r3, [r7, #36]	; 0x24
 8019118:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801911c:	f043 0303 	orr.w	r3, r3, #3
 8019120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019124:	e01b      	b.n	801915e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8019126:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019128:	2b40      	cmp	r3, #64	; 0x40
 801912a:	d909      	bls.n	8019140 <create_name+0x294>
 801912c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801912e:	2b5a      	cmp	r3, #90	; 0x5a
 8019130:	d806      	bhi.n	8019140 <create_name+0x294>
					b |= 2;
 8019132:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019136:	f043 0302 	orr.w	r3, r3, #2
 801913a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801913e:	e00e      	b.n	801915e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8019140:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019142:	2b60      	cmp	r3, #96	; 0x60
 8019144:	d90b      	bls.n	801915e <create_name+0x2b2>
 8019146:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019148:	2b7a      	cmp	r3, #122	; 0x7a
 801914a:	d808      	bhi.n	801915e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801914c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019150:	f043 0301 	orr.w	r3, r3, #1
 8019154:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8019158:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801915a:	3b20      	subs	r3, #32
 801915c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801915e:	6a3b      	ldr	r3, [r7, #32]
 8019160:	1c5a      	adds	r2, r3, #1
 8019162:	623a      	str	r2, [r7, #32]
 8019164:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019166:	b2d1      	uxtb	r1, r2
 8019168:	687a      	ldr	r2, [r7, #4]
 801916a:	4413      	add	r3, r2
 801916c:	460a      	mov	r2, r1
 801916e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8019172:	e763      	b.n	801903c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8019174:	bf00      	nop
 8019176:	e006      	b.n	8019186 <create_name+0x2da>
 8019178:	08020040 	.word	0x08020040
 801917c:	08020194 	.word	0x08020194
 8019180:	0802004c 	.word	0x0802004c
			if (si > di) break;			/* No extension */
 8019184:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801918c:	2be5      	cmp	r3, #229	; 0xe5
 801918e:	d103      	bne.n	8019198 <create_name+0x2ec>
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	2205      	movs	r2, #5
 8019194:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8019198:	69fb      	ldr	r3, [r7, #28]
 801919a:	2b08      	cmp	r3, #8
 801919c:	d104      	bne.n	80191a8 <create_name+0x2fc>
 801919e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80191a2:	009b      	lsls	r3, r3, #2
 80191a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80191a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80191ac:	f003 030c 	and.w	r3, r3, #12
 80191b0:	2b0c      	cmp	r3, #12
 80191b2:	d005      	beq.n	80191c0 <create_name+0x314>
 80191b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80191b8:	f003 0303 	and.w	r3, r3, #3
 80191bc:	2b03      	cmp	r3, #3
 80191be:	d105      	bne.n	80191cc <create_name+0x320>
 80191c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80191c4:	f043 0302 	orr.w	r3, r3, #2
 80191c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80191cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80191d0:	f003 0302 	and.w	r3, r3, #2
 80191d4:	2b00      	cmp	r3, #0
 80191d6:	d117      	bne.n	8019208 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80191d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80191dc:	f003 0303 	and.w	r3, r3, #3
 80191e0:	2b01      	cmp	r3, #1
 80191e2:	d105      	bne.n	80191f0 <create_name+0x344>
 80191e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80191e8:	f043 0310 	orr.w	r3, r3, #16
 80191ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80191f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80191f4:	f003 030c 	and.w	r3, r3, #12
 80191f8:	2b04      	cmp	r3, #4
 80191fa:	d105      	bne.n	8019208 <create_name+0x35c>
 80191fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019200:	f043 0308 	orr.w	r3, r3, #8
 8019204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801920e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8019212:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8019214:	4618      	mov	r0, r3
 8019216:	3728      	adds	r7, #40	; 0x28
 8019218:	46bd      	mov	sp, r7
 801921a:	bd80      	pop	{r7, pc}

0801921c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801921c:	b580      	push	{r7, lr}
 801921e:	b086      	sub	sp, #24
 8019220:	af00      	add	r7, sp, #0
 8019222:	6078      	str	r0, [r7, #4]
 8019224:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801922a:	693b      	ldr	r3, [r7, #16]
 801922c:	681b      	ldr	r3, [r3, #0]
 801922e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8019230:	e002      	b.n	8019238 <follow_path+0x1c>
 8019232:	683b      	ldr	r3, [r7, #0]
 8019234:	3301      	adds	r3, #1
 8019236:	603b      	str	r3, [r7, #0]
 8019238:	683b      	ldr	r3, [r7, #0]
 801923a:	781b      	ldrb	r3, [r3, #0]
 801923c:	2b2f      	cmp	r3, #47	; 0x2f
 801923e:	d0f8      	beq.n	8019232 <follow_path+0x16>
 8019240:	683b      	ldr	r3, [r7, #0]
 8019242:	781b      	ldrb	r3, [r3, #0]
 8019244:	2b5c      	cmp	r3, #92	; 0x5c
 8019246:	d0f4      	beq.n	8019232 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8019248:	693b      	ldr	r3, [r7, #16]
 801924a:	2200      	movs	r2, #0
 801924c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801924e:	683b      	ldr	r3, [r7, #0]
 8019250:	781b      	ldrb	r3, [r3, #0]
 8019252:	2b1f      	cmp	r3, #31
 8019254:	d80a      	bhi.n	801926c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	2280      	movs	r2, #128	; 0x80
 801925a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801925e:	2100      	movs	r1, #0
 8019260:	6878      	ldr	r0, [r7, #4]
 8019262:	f7ff f8fd 	bl	8018460 <dir_sdi>
 8019266:	4603      	mov	r3, r0
 8019268:	75fb      	strb	r3, [r7, #23]
 801926a:	e048      	b.n	80192fe <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801926c:	463b      	mov	r3, r7
 801926e:	4619      	mov	r1, r3
 8019270:	6878      	ldr	r0, [r7, #4]
 8019272:	f7ff fe1b 	bl	8018eac <create_name>
 8019276:	4603      	mov	r3, r0
 8019278:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801927a:	7dfb      	ldrb	r3, [r7, #23]
 801927c:	2b00      	cmp	r3, #0
 801927e:	d139      	bne.n	80192f4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8019280:	6878      	ldr	r0, [r7, #4]
 8019282:	f7ff fc5a 	bl	8018b3a <dir_find>
 8019286:	4603      	mov	r3, r0
 8019288:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8019290:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8019292:	7dfb      	ldrb	r3, [r7, #23]
 8019294:	2b00      	cmp	r3, #0
 8019296:	d00a      	beq.n	80192ae <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8019298:	7dfb      	ldrb	r3, [r7, #23]
 801929a:	2b04      	cmp	r3, #4
 801929c:	d12c      	bne.n	80192f8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801929e:	7afb      	ldrb	r3, [r7, #11]
 80192a0:	f003 0304 	and.w	r3, r3, #4
 80192a4:	2b00      	cmp	r3, #0
 80192a6:	d127      	bne.n	80192f8 <follow_path+0xdc>
 80192a8:	2305      	movs	r3, #5
 80192aa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80192ac:	e024      	b.n	80192f8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80192ae:	7afb      	ldrb	r3, [r7, #11]
 80192b0:	f003 0304 	and.w	r3, r3, #4
 80192b4:	2b00      	cmp	r3, #0
 80192b6:	d121      	bne.n	80192fc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80192b8:	693b      	ldr	r3, [r7, #16]
 80192ba:	799b      	ldrb	r3, [r3, #6]
 80192bc:	f003 0310 	and.w	r3, r3, #16
 80192c0:	2b00      	cmp	r3, #0
 80192c2:	d102      	bne.n	80192ca <follow_path+0xae>
				res = FR_NO_PATH; break;
 80192c4:	2305      	movs	r3, #5
 80192c6:	75fb      	strb	r3, [r7, #23]
 80192c8:	e019      	b.n	80192fe <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80192ca:	68fb      	ldr	r3, [r7, #12]
 80192cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	695b      	ldr	r3, [r3, #20]
 80192d4:	68fa      	ldr	r2, [r7, #12]
 80192d6:	8992      	ldrh	r2, [r2, #12]
 80192d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80192dc:	fb00 f202 	mul.w	r2, r0, r2
 80192e0:	1a9b      	subs	r3, r3, r2
 80192e2:	440b      	add	r3, r1
 80192e4:	4619      	mov	r1, r3
 80192e6:	68f8      	ldr	r0, [r7, #12]
 80192e8:	f7ff fa60 	bl	80187ac <ld_clust>
 80192ec:	4602      	mov	r2, r0
 80192ee:	693b      	ldr	r3, [r7, #16]
 80192f0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80192f2:	e7bb      	b.n	801926c <follow_path+0x50>
			if (res != FR_OK) break;
 80192f4:	bf00      	nop
 80192f6:	e002      	b.n	80192fe <follow_path+0xe2>
				break;
 80192f8:	bf00      	nop
 80192fa:	e000      	b.n	80192fe <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80192fc:	bf00      	nop
			}
		}
	}

	return res;
 80192fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8019300:	4618      	mov	r0, r3
 8019302:	3718      	adds	r7, #24
 8019304:	46bd      	mov	sp, r7
 8019306:	bd80      	pop	{r7, pc}

08019308 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8019308:	b480      	push	{r7}
 801930a:	b087      	sub	sp, #28
 801930c:	af00      	add	r7, sp, #0
 801930e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8019310:	f04f 33ff 	mov.w	r3, #4294967295
 8019314:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	2b00      	cmp	r3, #0
 801931c:	d031      	beq.n	8019382 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	681b      	ldr	r3, [r3, #0]
 8019322:	617b      	str	r3, [r7, #20]
 8019324:	e002      	b.n	801932c <get_ldnumber+0x24>
 8019326:	697b      	ldr	r3, [r7, #20]
 8019328:	3301      	adds	r3, #1
 801932a:	617b      	str	r3, [r7, #20]
 801932c:	697b      	ldr	r3, [r7, #20]
 801932e:	781b      	ldrb	r3, [r3, #0]
 8019330:	2b1f      	cmp	r3, #31
 8019332:	d903      	bls.n	801933c <get_ldnumber+0x34>
 8019334:	697b      	ldr	r3, [r7, #20]
 8019336:	781b      	ldrb	r3, [r3, #0]
 8019338:	2b3a      	cmp	r3, #58	; 0x3a
 801933a:	d1f4      	bne.n	8019326 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801933c:	697b      	ldr	r3, [r7, #20]
 801933e:	781b      	ldrb	r3, [r3, #0]
 8019340:	2b3a      	cmp	r3, #58	; 0x3a
 8019342:	d11c      	bne.n	801937e <get_ldnumber+0x76>
			tp = *path;
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	681b      	ldr	r3, [r3, #0]
 8019348:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801934a:	68fb      	ldr	r3, [r7, #12]
 801934c:	1c5a      	adds	r2, r3, #1
 801934e:	60fa      	str	r2, [r7, #12]
 8019350:	781b      	ldrb	r3, [r3, #0]
 8019352:	3b30      	subs	r3, #48	; 0x30
 8019354:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8019356:	68bb      	ldr	r3, [r7, #8]
 8019358:	2b09      	cmp	r3, #9
 801935a:	d80e      	bhi.n	801937a <get_ldnumber+0x72>
 801935c:	68fa      	ldr	r2, [r7, #12]
 801935e:	697b      	ldr	r3, [r7, #20]
 8019360:	429a      	cmp	r2, r3
 8019362:	d10a      	bne.n	801937a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8019364:	68bb      	ldr	r3, [r7, #8]
 8019366:	2b00      	cmp	r3, #0
 8019368:	d107      	bne.n	801937a <get_ldnumber+0x72>
					vol = (int)i;
 801936a:	68bb      	ldr	r3, [r7, #8]
 801936c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801936e:	697b      	ldr	r3, [r7, #20]
 8019370:	3301      	adds	r3, #1
 8019372:	617b      	str	r3, [r7, #20]
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	697a      	ldr	r2, [r7, #20]
 8019378:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801937a:	693b      	ldr	r3, [r7, #16]
 801937c:	e002      	b.n	8019384 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801937e:	2300      	movs	r3, #0
 8019380:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8019382:	693b      	ldr	r3, [r7, #16]
}
 8019384:	4618      	mov	r0, r3
 8019386:	371c      	adds	r7, #28
 8019388:	46bd      	mov	sp, r7
 801938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801938e:	4770      	bx	lr

08019390 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8019390:	b580      	push	{r7, lr}
 8019392:	b082      	sub	sp, #8
 8019394:	af00      	add	r7, sp, #0
 8019396:	6078      	str	r0, [r7, #4]
 8019398:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	2200      	movs	r2, #0
 801939e:	70da      	strb	r2, [r3, #3]
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	f04f 32ff 	mov.w	r2, #4294967295
 80193a6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80193a8:	6839      	ldr	r1, [r7, #0]
 80193aa:	6878      	ldr	r0, [r7, #4]
 80193ac:	f7fe fc78 	bl	8017ca0 <move_window>
 80193b0:	4603      	mov	r3, r0
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	d001      	beq.n	80193ba <check_fs+0x2a>
 80193b6:	2304      	movs	r3, #4
 80193b8:	e038      	b.n	801942c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	3338      	adds	r3, #56	; 0x38
 80193be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80193c2:	4618      	mov	r0, r3
 80193c4:	f7fe f9bc 	bl	8017740 <ld_word>
 80193c8:	4603      	mov	r3, r0
 80193ca:	461a      	mov	r2, r3
 80193cc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80193d0:	429a      	cmp	r2, r3
 80193d2:	d001      	beq.n	80193d8 <check_fs+0x48>
 80193d4:	2303      	movs	r3, #3
 80193d6:	e029      	b.n	801942c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80193de:	2be9      	cmp	r3, #233	; 0xe9
 80193e0:	d009      	beq.n	80193f6 <check_fs+0x66>
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80193e8:	2beb      	cmp	r3, #235	; 0xeb
 80193ea:	d11e      	bne.n	801942a <check_fs+0x9a>
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80193f2:	2b90      	cmp	r3, #144	; 0x90
 80193f4:	d119      	bne.n	801942a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	3338      	adds	r3, #56	; 0x38
 80193fa:	3336      	adds	r3, #54	; 0x36
 80193fc:	4618      	mov	r0, r3
 80193fe:	f7fe f9b7 	bl	8017770 <ld_dword>
 8019402:	4603      	mov	r3, r0
 8019404:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8019408:	4a0a      	ldr	r2, [pc, #40]	; (8019434 <check_fs+0xa4>)
 801940a:	4293      	cmp	r3, r2
 801940c:	d101      	bne.n	8019412 <check_fs+0x82>
 801940e:	2300      	movs	r3, #0
 8019410:	e00c      	b.n	801942c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	3338      	adds	r3, #56	; 0x38
 8019416:	3352      	adds	r3, #82	; 0x52
 8019418:	4618      	mov	r0, r3
 801941a:	f7fe f9a9 	bl	8017770 <ld_dword>
 801941e:	4603      	mov	r3, r0
 8019420:	4a05      	ldr	r2, [pc, #20]	; (8019438 <check_fs+0xa8>)
 8019422:	4293      	cmp	r3, r2
 8019424:	d101      	bne.n	801942a <check_fs+0x9a>
 8019426:	2300      	movs	r3, #0
 8019428:	e000      	b.n	801942c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801942a:	2302      	movs	r3, #2
}
 801942c:	4618      	mov	r0, r3
 801942e:	3708      	adds	r7, #8
 8019430:	46bd      	mov	sp, r7
 8019432:	bd80      	pop	{r7, pc}
 8019434:	00544146 	.word	0x00544146
 8019438:	33544146 	.word	0x33544146

0801943c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801943c:	b580      	push	{r7, lr}
 801943e:	b096      	sub	sp, #88	; 0x58
 8019440:	af00      	add	r7, sp, #0
 8019442:	60f8      	str	r0, [r7, #12]
 8019444:	60b9      	str	r1, [r7, #8]
 8019446:	4613      	mov	r3, r2
 8019448:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801944a:	68bb      	ldr	r3, [r7, #8]
 801944c:	2200      	movs	r2, #0
 801944e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8019450:	68f8      	ldr	r0, [r7, #12]
 8019452:	f7ff ff59 	bl	8019308 <get_ldnumber>
 8019456:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8019458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801945a:	2b00      	cmp	r3, #0
 801945c:	da01      	bge.n	8019462 <find_volume+0x26>
 801945e:	230b      	movs	r3, #11
 8019460:	e265      	b.n	801992e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8019462:	4a9f      	ldr	r2, [pc, #636]	; (80196e0 <find_volume+0x2a4>)
 8019464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801946a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801946c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801946e:	2b00      	cmp	r3, #0
 8019470:	d101      	bne.n	8019476 <find_volume+0x3a>
 8019472:	230c      	movs	r3, #12
 8019474:	e25b      	b.n	801992e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8019476:	68bb      	ldr	r3, [r7, #8]
 8019478:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801947a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801947c:	79fb      	ldrb	r3, [r7, #7]
 801947e:	f023 0301 	bic.w	r3, r3, #1
 8019482:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8019484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019486:	781b      	ldrb	r3, [r3, #0]
 8019488:	2b00      	cmp	r3, #0
 801948a:	d01a      	beq.n	80194c2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801948c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801948e:	785b      	ldrb	r3, [r3, #1]
 8019490:	4618      	mov	r0, r3
 8019492:	f7fe f8b7 	bl	8017604 <disk_status>
 8019496:	4603      	mov	r3, r0
 8019498:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801949c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80194a0:	f003 0301 	and.w	r3, r3, #1
 80194a4:	2b00      	cmp	r3, #0
 80194a6:	d10c      	bne.n	80194c2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80194a8:	79fb      	ldrb	r3, [r7, #7]
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d007      	beq.n	80194be <find_volume+0x82>
 80194ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80194b2:	f003 0304 	and.w	r3, r3, #4
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	d001      	beq.n	80194be <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80194ba:	230a      	movs	r3, #10
 80194bc:	e237      	b.n	801992e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80194be:	2300      	movs	r3, #0
 80194c0:	e235      	b.n	801992e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80194c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194c4:	2200      	movs	r2, #0
 80194c6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80194c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80194ca:	b2da      	uxtb	r2, r3
 80194cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194ce:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80194d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194d2:	785b      	ldrb	r3, [r3, #1]
 80194d4:	4618      	mov	r0, r3
 80194d6:	f7fe f8af 	bl	8017638 <disk_initialize>
 80194da:	4603      	mov	r3, r0
 80194dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80194e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80194e4:	f003 0301 	and.w	r3, r3, #1
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d001      	beq.n	80194f0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80194ec:	2303      	movs	r3, #3
 80194ee:	e21e      	b.n	801992e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80194f0:	79fb      	ldrb	r3, [r7, #7]
 80194f2:	2b00      	cmp	r3, #0
 80194f4:	d007      	beq.n	8019506 <find_volume+0xca>
 80194f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80194fa:	f003 0304 	and.w	r3, r3, #4
 80194fe:	2b00      	cmp	r3, #0
 8019500:	d001      	beq.n	8019506 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8019502:	230a      	movs	r3, #10
 8019504:	e213      	b.n	801992e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8019506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019508:	7858      	ldrb	r0, [r3, #1]
 801950a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801950c:	330c      	adds	r3, #12
 801950e:	461a      	mov	r2, r3
 8019510:	2102      	movs	r1, #2
 8019512:	f7fe f8f7 	bl	8017704 <disk_ioctl>
 8019516:	4603      	mov	r3, r0
 8019518:	2b00      	cmp	r3, #0
 801951a:	d001      	beq.n	8019520 <find_volume+0xe4>
 801951c:	2301      	movs	r3, #1
 801951e:	e206      	b.n	801992e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8019520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019522:	899b      	ldrh	r3, [r3, #12]
 8019524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8019528:	d80d      	bhi.n	8019546 <find_volume+0x10a>
 801952a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801952c:	899b      	ldrh	r3, [r3, #12]
 801952e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019532:	d308      	bcc.n	8019546 <find_volume+0x10a>
 8019534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019536:	899b      	ldrh	r3, [r3, #12]
 8019538:	461a      	mov	r2, r3
 801953a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801953c:	899b      	ldrh	r3, [r3, #12]
 801953e:	3b01      	subs	r3, #1
 8019540:	4013      	ands	r3, r2
 8019542:	2b00      	cmp	r3, #0
 8019544:	d001      	beq.n	801954a <find_volume+0x10e>
 8019546:	2301      	movs	r3, #1
 8019548:	e1f1      	b.n	801992e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801954a:	2300      	movs	r3, #0
 801954c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801954e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8019550:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019552:	f7ff ff1d 	bl	8019390 <check_fs>
 8019556:	4603      	mov	r3, r0
 8019558:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801955c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019560:	2b02      	cmp	r3, #2
 8019562:	d149      	bne.n	80195f8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8019564:	2300      	movs	r3, #0
 8019566:	643b      	str	r3, [r7, #64]	; 0x40
 8019568:	e01e      	b.n	80195a8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801956a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801956c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8019570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019572:	011b      	lsls	r3, r3, #4
 8019574:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8019578:	4413      	add	r3, r2
 801957a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801957c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801957e:	3304      	adds	r3, #4
 8019580:	781b      	ldrb	r3, [r3, #0]
 8019582:	2b00      	cmp	r3, #0
 8019584:	d006      	beq.n	8019594 <find_volume+0x158>
 8019586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019588:	3308      	adds	r3, #8
 801958a:	4618      	mov	r0, r3
 801958c:	f7fe f8f0 	bl	8017770 <ld_dword>
 8019590:	4602      	mov	r2, r0
 8019592:	e000      	b.n	8019596 <find_volume+0x15a>
 8019594:	2200      	movs	r2, #0
 8019596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019598:	009b      	lsls	r3, r3, #2
 801959a:	3358      	adds	r3, #88	; 0x58
 801959c:	443b      	add	r3, r7
 801959e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80195a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80195a4:	3301      	adds	r3, #1
 80195a6:	643b      	str	r3, [r7, #64]	; 0x40
 80195a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80195aa:	2b03      	cmp	r3, #3
 80195ac:	d9dd      	bls.n	801956a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80195ae:	2300      	movs	r3, #0
 80195b0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80195b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d002      	beq.n	80195be <find_volume+0x182>
 80195b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80195ba:	3b01      	subs	r3, #1
 80195bc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80195be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80195c0:	009b      	lsls	r3, r3, #2
 80195c2:	3358      	adds	r3, #88	; 0x58
 80195c4:	443b      	add	r3, r7
 80195c6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80195ca:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80195cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195ce:	2b00      	cmp	r3, #0
 80195d0:	d005      	beq.n	80195de <find_volume+0x1a2>
 80195d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80195d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80195d6:	f7ff fedb 	bl	8019390 <check_fs>
 80195da:	4603      	mov	r3, r0
 80195dc:	e000      	b.n	80195e0 <find_volume+0x1a4>
 80195de:	2303      	movs	r3, #3
 80195e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80195e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80195e8:	2b01      	cmp	r3, #1
 80195ea:	d905      	bls.n	80195f8 <find_volume+0x1bc>
 80195ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80195ee:	3301      	adds	r3, #1
 80195f0:	643b      	str	r3, [r7, #64]	; 0x40
 80195f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80195f4:	2b03      	cmp	r3, #3
 80195f6:	d9e2      	bls.n	80195be <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80195f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80195fc:	2b04      	cmp	r3, #4
 80195fe:	d101      	bne.n	8019604 <find_volume+0x1c8>
 8019600:	2301      	movs	r3, #1
 8019602:	e194      	b.n	801992e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8019604:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019608:	2b01      	cmp	r3, #1
 801960a:	d901      	bls.n	8019610 <find_volume+0x1d4>
 801960c:	230d      	movs	r3, #13
 801960e:	e18e      	b.n	801992e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8019610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019612:	3338      	adds	r3, #56	; 0x38
 8019614:	330b      	adds	r3, #11
 8019616:	4618      	mov	r0, r3
 8019618:	f7fe f892 	bl	8017740 <ld_word>
 801961c:	4603      	mov	r3, r0
 801961e:	461a      	mov	r2, r3
 8019620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019622:	899b      	ldrh	r3, [r3, #12]
 8019624:	429a      	cmp	r2, r3
 8019626:	d001      	beq.n	801962c <find_volume+0x1f0>
 8019628:	230d      	movs	r3, #13
 801962a:	e180      	b.n	801992e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801962c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801962e:	3338      	adds	r3, #56	; 0x38
 8019630:	3316      	adds	r3, #22
 8019632:	4618      	mov	r0, r3
 8019634:	f7fe f884 	bl	8017740 <ld_word>
 8019638:	4603      	mov	r3, r0
 801963a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801963c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801963e:	2b00      	cmp	r3, #0
 8019640:	d106      	bne.n	8019650 <find_volume+0x214>
 8019642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019644:	3338      	adds	r3, #56	; 0x38
 8019646:	3324      	adds	r3, #36	; 0x24
 8019648:	4618      	mov	r0, r3
 801964a:	f7fe f891 	bl	8017770 <ld_dword>
 801964e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8019650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019652:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019654:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8019656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019658:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801965c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801965e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8019660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019662:	789b      	ldrb	r3, [r3, #2]
 8019664:	2b01      	cmp	r3, #1
 8019666:	d005      	beq.n	8019674 <find_volume+0x238>
 8019668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801966a:	789b      	ldrb	r3, [r3, #2]
 801966c:	2b02      	cmp	r3, #2
 801966e:	d001      	beq.n	8019674 <find_volume+0x238>
 8019670:	230d      	movs	r3, #13
 8019672:	e15c      	b.n	801992e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8019674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019676:	789b      	ldrb	r3, [r3, #2]
 8019678:	461a      	mov	r2, r3
 801967a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801967c:	fb02 f303 	mul.w	r3, r2, r3
 8019680:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8019682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019684:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019688:	b29a      	uxth	r2, r3
 801968a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801968c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801968e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019690:	895b      	ldrh	r3, [r3, #10]
 8019692:	2b00      	cmp	r3, #0
 8019694:	d008      	beq.n	80196a8 <find_volume+0x26c>
 8019696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019698:	895b      	ldrh	r3, [r3, #10]
 801969a:	461a      	mov	r2, r3
 801969c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801969e:	895b      	ldrh	r3, [r3, #10]
 80196a0:	3b01      	subs	r3, #1
 80196a2:	4013      	ands	r3, r2
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	d001      	beq.n	80196ac <find_volume+0x270>
 80196a8:	230d      	movs	r3, #13
 80196aa:	e140      	b.n	801992e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80196ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196ae:	3338      	adds	r3, #56	; 0x38
 80196b0:	3311      	adds	r3, #17
 80196b2:	4618      	mov	r0, r3
 80196b4:	f7fe f844 	bl	8017740 <ld_word>
 80196b8:	4603      	mov	r3, r0
 80196ba:	461a      	mov	r2, r3
 80196bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196be:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80196c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196c2:	891b      	ldrh	r3, [r3, #8]
 80196c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80196c6:	8992      	ldrh	r2, [r2, #12]
 80196c8:	0952      	lsrs	r2, r2, #5
 80196ca:	b292      	uxth	r2, r2
 80196cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80196d0:	fb01 f202 	mul.w	r2, r1, r2
 80196d4:	1a9b      	subs	r3, r3, r2
 80196d6:	b29b      	uxth	r3, r3
 80196d8:	2b00      	cmp	r3, #0
 80196da:	d003      	beq.n	80196e4 <find_volume+0x2a8>
 80196dc:	230d      	movs	r3, #13
 80196de:	e126      	b.n	801992e <find_volume+0x4f2>
 80196e0:	240016a8 	.word	0x240016a8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80196e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196e6:	3338      	adds	r3, #56	; 0x38
 80196e8:	3313      	adds	r3, #19
 80196ea:	4618      	mov	r0, r3
 80196ec:	f7fe f828 	bl	8017740 <ld_word>
 80196f0:	4603      	mov	r3, r0
 80196f2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80196f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80196f6:	2b00      	cmp	r3, #0
 80196f8:	d106      	bne.n	8019708 <find_volume+0x2cc>
 80196fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196fc:	3338      	adds	r3, #56	; 0x38
 80196fe:	3320      	adds	r3, #32
 8019700:	4618      	mov	r0, r3
 8019702:	f7fe f835 	bl	8017770 <ld_dword>
 8019706:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8019708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801970a:	3338      	adds	r3, #56	; 0x38
 801970c:	330e      	adds	r3, #14
 801970e:	4618      	mov	r0, r3
 8019710:	f7fe f816 	bl	8017740 <ld_word>
 8019714:	4603      	mov	r3, r0
 8019716:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8019718:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801971a:	2b00      	cmp	r3, #0
 801971c:	d101      	bne.n	8019722 <find_volume+0x2e6>
 801971e:	230d      	movs	r3, #13
 8019720:	e105      	b.n	801992e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8019722:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8019724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019726:	4413      	add	r3, r2
 8019728:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801972a:	8911      	ldrh	r1, [r2, #8]
 801972c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801972e:	8992      	ldrh	r2, [r2, #12]
 8019730:	0952      	lsrs	r2, r2, #5
 8019732:	b292      	uxth	r2, r2
 8019734:	fbb1 f2f2 	udiv	r2, r1, r2
 8019738:	b292      	uxth	r2, r2
 801973a:	4413      	add	r3, r2
 801973c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801973e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019742:	429a      	cmp	r2, r3
 8019744:	d201      	bcs.n	801974a <find_volume+0x30e>
 8019746:	230d      	movs	r3, #13
 8019748:	e0f1      	b.n	801992e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801974a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801974c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801974e:	1ad3      	subs	r3, r2, r3
 8019750:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019752:	8952      	ldrh	r2, [r2, #10]
 8019754:	fbb3 f3f2 	udiv	r3, r3, r2
 8019758:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801975a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801975c:	2b00      	cmp	r3, #0
 801975e:	d101      	bne.n	8019764 <find_volume+0x328>
 8019760:	230d      	movs	r3, #13
 8019762:	e0e4      	b.n	801992e <find_volume+0x4f2>
		fmt = FS_FAT32;
 8019764:	2303      	movs	r3, #3
 8019766:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801976a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801976c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8019770:	4293      	cmp	r3, r2
 8019772:	d802      	bhi.n	801977a <find_volume+0x33e>
 8019774:	2302      	movs	r3, #2
 8019776:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801977a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801977c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8019780:	4293      	cmp	r3, r2
 8019782:	d802      	bhi.n	801978a <find_volume+0x34e>
 8019784:	2301      	movs	r3, #1
 8019786:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801978a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801978c:	1c9a      	adds	r2, r3, #2
 801978e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019790:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8019792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019794:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019796:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8019798:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801979a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801979c:	441a      	add	r2, r3
 801979e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197a0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80197a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80197a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197a6:	441a      	add	r2, r3
 80197a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197aa:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80197ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80197b0:	2b03      	cmp	r3, #3
 80197b2:	d11e      	bne.n	80197f2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80197b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197b6:	3338      	adds	r3, #56	; 0x38
 80197b8:	332a      	adds	r3, #42	; 0x2a
 80197ba:	4618      	mov	r0, r3
 80197bc:	f7fd ffc0 	bl	8017740 <ld_word>
 80197c0:	4603      	mov	r3, r0
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	d001      	beq.n	80197ca <find_volume+0x38e>
 80197c6:	230d      	movs	r3, #13
 80197c8:	e0b1      	b.n	801992e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80197ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197cc:	891b      	ldrh	r3, [r3, #8]
 80197ce:	2b00      	cmp	r3, #0
 80197d0:	d001      	beq.n	80197d6 <find_volume+0x39a>
 80197d2:	230d      	movs	r3, #13
 80197d4:	e0ab      	b.n	801992e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80197d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197d8:	3338      	adds	r3, #56	; 0x38
 80197da:	332c      	adds	r3, #44	; 0x2c
 80197dc:	4618      	mov	r0, r3
 80197de:	f7fd ffc7 	bl	8017770 <ld_dword>
 80197e2:	4602      	mov	r2, r0
 80197e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197e6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80197e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197ea:	69db      	ldr	r3, [r3, #28]
 80197ec:	009b      	lsls	r3, r3, #2
 80197ee:	647b      	str	r3, [r7, #68]	; 0x44
 80197f0:	e01f      	b.n	8019832 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80197f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197f4:	891b      	ldrh	r3, [r3, #8]
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d101      	bne.n	80197fe <find_volume+0x3c2>
 80197fa:	230d      	movs	r3, #13
 80197fc:	e097      	b.n	801992e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80197fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019800:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019804:	441a      	add	r2, r3
 8019806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019808:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801980a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801980e:	2b02      	cmp	r3, #2
 8019810:	d103      	bne.n	801981a <find_volume+0x3de>
 8019812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019814:	69db      	ldr	r3, [r3, #28]
 8019816:	005b      	lsls	r3, r3, #1
 8019818:	e00a      	b.n	8019830 <find_volume+0x3f4>
 801981a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801981c:	69da      	ldr	r2, [r3, #28]
 801981e:	4613      	mov	r3, r2
 8019820:	005b      	lsls	r3, r3, #1
 8019822:	4413      	add	r3, r2
 8019824:	085a      	lsrs	r2, r3, #1
 8019826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019828:	69db      	ldr	r3, [r3, #28]
 801982a:	f003 0301 	and.w	r3, r3, #1
 801982e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8019830:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8019832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019834:	6a1a      	ldr	r2, [r3, #32]
 8019836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019838:	899b      	ldrh	r3, [r3, #12]
 801983a:	4619      	mov	r1, r3
 801983c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801983e:	440b      	add	r3, r1
 8019840:	3b01      	subs	r3, #1
 8019842:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019844:	8989      	ldrh	r1, [r1, #12]
 8019846:	fbb3 f3f1 	udiv	r3, r3, r1
 801984a:	429a      	cmp	r2, r3
 801984c:	d201      	bcs.n	8019852 <find_volume+0x416>
 801984e:	230d      	movs	r3, #13
 8019850:	e06d      	b.n	801992e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8019852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019854:	f04f 32ff 	mov.w	r2, #4294967295
 8019858:	619a      	str	r2, [r3, #24]
 801985a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801985c:	699a      	ldr	r2, [r3, #24]
 801985e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019860:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8019862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019864:	2280      	movs	r2, #128	; 0x80
 8019866:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8019868:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801986c:	2b03      	cmp	r3, #3
 801986e:	d149      	bne.n	8019904 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8019870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019872:	3338      	adds	r3, #56	; 0x38
 8019874:	3330      	adds	r3, #48	; 0x30
 8019876:	4618      	mov	r0, r3
 8019878:	f7fd ff62 	bl	8017740 <ld_word>
 801987c:	4603      	mov	r3, r0
 801987e:	2b01      	cmp	r3, #1
 8019880:	d140      	bne.n	8019904 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8019882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019884:	3301      	adds	r3, #1
 8019886:	4619      	mov	r1, r3
 8019888:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801988a:	f7fe fa09 	bl	8017ca0 <move_window>
 801988e:	4603      	mov	r3, r0
 8019890:	2b00      	cmp	r3, #0
 8019892:	d137      	bne.n	8019904 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8019894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019896:	2200      	movs	r2, #0
 8019898:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801989a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801989c:	3338      	adds	r3, #56	; 0x38
 801989e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80198a2:	4618      	mov	r0, r3
 80198a4:	f7fd ff4c 	bl	8017740 <ld_word>
 80198a8:	4603      	mov	r3, r0
 80198aa:	461a      	mov	r2, r3
 80198ac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80198b0:	429a      	cmp	r2, r3
 80198b2:	d127      	bne.n	8019904 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80198b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198b6:	3338      	adds	r3, #56	; 0x38
 80198b8:	4618      	mov	r0, r3
 80198ba:	f7fd ff59 	bl	8017770 <ld_dword>
 80198be:	4603      	mov	r3, r0
 80198c0:	4a1d      	ldr	r2, [pc, #116]	; (8019938 <find_volume+0x4fc>)
 80198c2:	4293      	cmp	r3, r2
 80198c4:	d11e      	bne.n	8019904 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80198c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198c8:	3338      	adds	r3, #56	; 0x38
 80198ca:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80198ce:	4618      	mov	r0, r3
 80198d0:	f7fd ff4e 	bl	8017770 <ld_dword>
 80198d4:	4603      	mov	r3, r0
 80198d6:	4a19      	ldr	r2, [pc, #100]	; (801993c <find_volume+0x500>)
 80198d8:	4293      	cmp	r3, r2
 80198da:	d113      	bne.n	8019904 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80198dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198de:	3338      	adds	r3, #56	; 0x38
 80198e0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80198e4:	4618      	mov	r0, r3
 80198e6:	f7fd ff43 	bl	8017770 <ld_dword>
 80198ea:	4602      	mov	r2, r0
 80198ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198ee:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80198f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198f2:	3338      	adds	r3, #56	; 0x38
 80198f4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80198f8:	4618      	mov	r0, r3
 80198fa:	f7fd ff39 	bl	8017770 <ld_dword>
 80198fe:	4602      	mov	r2, r0
 8019900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019902:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8019904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019906:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801990a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801990c:	4b0c      	ldr	r3, [pc, #48]	; (8019940 <find_volume+0x504>)
 801990e:	881b      	ldrh	r3, [r3, #0]
 8019910:	3301      	adds	r3, #1
 8019912:	b29a      	uxth	r2, r3
 8019914:	4b0a      	ldr	r3, [pc, #40]	; (8019940 <find_volume+0x504>)
 8019916:	801a      	strh	r2, [r3, #0]
 8019918:	4b09      	ldr	r3, [pc, #36]	; (8019940 <find_volume+0x504>)
 801991a:	881a      	ldrh	r2, [r3, #0]
 801991c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801991e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8019920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019922:	4a08      	ldr	r2, [pc, #32]	; (8019944 <find_volume+0x508>)
 8019924:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8019926:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019928:	f7fe f952 	bl	8017bd0 <clear_lock>
#endif
	return FR_OK;
 801992c:	2300      	movs	r3, #0
}
 801992e:	4618      	mov	r0, r3
 8019930:	3758      	adds	r7, #88	; 0x58
 8019932:	46bd      	mov	sp, r7
 8019934:	bd80      	pop	{r7, pc}
 8019936:	bf00      	nop
 8019938:	41615252 	.word	0x41615252
 801993c:	61417272 	.word	0x61417272
 8019940:	240016ac 	.word	0x240016ac
 8019944:	240016d0 	.word	0x240016d0

08019948 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8019948:	b580      	push	{r7, lr}
 801994a:	b084      	sub	sp, #16
 801994c:	af00      	add	r7, sp, #0
 801994e:	6078      	str	r0, [r7, #4]
 8019950:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8019952:	2309      	movs	r3, #9
 8019954:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	2b00      	cmp	r3, #0
 801995a:	d01c      	beq.n	8019996 <validate+0x4e>
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	681b      	ldr	r3, [r3, #0]
 8019960:	2b00      	cmp	r3, #0
 8019962:	d018      	beq.n	8019996 <validate+0x4e>
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	681b      	ldr	r3, [r3, #0]
 8019968:	781b      	ldrb	r3, [r3, #0]
 801996a:	2b00      	cmp	r3, #0
 801996c:	d013      	beq.n	8019996 <validate+0x4e>
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	889a      	ldrh	r2, [r3, #4]
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	681b      	ldr	r3, [r3, #0]
 8019976:	88db      	ldrh	r3, [r3, #6]
 8019978:	429a      	cmp	r2, r3
 801997a:	d10c      	bne.n	8019996 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	681b      	ldr	r3, [r3, #0]
 8019980:	785b      	ldrb	r3, [r3, #1]
 8019982:	4618      	mov	r0, r3
 8019984:	f7fd fe3e 	bl	8017604 <disk_status>
 8019988:	4603      	mov	r3, r0
 801998a:	f003 0301 	and.w	r3, r3, #1
 801998e:	2b00      	cmp	r3, #0
 8019990:	d101      	bne.n	8019996 <validate+0x4e>
			res = FR_OK;
 8019992:	2300      	movs	r3, #0
 8019994:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8019996:	7bfb      	ldrb	r3, [r7, #15]
 8019998:	2b00      	cmp	r3, #0
 801999a:	d102      	bne.n	80199a2 <validate+0x5a>
 801999c:	687b      	ldr	r3, [r7, #4]
 801999e:	681b      	ldr	r3, [r3, #0]
 80199a0:	e000      	b.n	80199a4 <validate+0x5c>
 80199a2:	2300      	movs	r3, #0
 80199a4:	683a      	ldr	r2, [r7, #0]
 80199a6:	6013      	str	r3, [r2, #0]
	return res;
 80199a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80199aa:	4618      	mov	r0, r3
 80199ac:	3710      	adds	r7, #16
 80199ae:	46bd      	mov	sp, r7
 80199b0:	bd80      	pop	{r7, pc}
	...

080199b4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80199b4:	b580      	push	{r7, lr}
 80199b6:	b088      	sub	sp, #32
 80199b8:	af00      	add	r7, sp, #0
 80199ba:	60f8      	str	r0, [r7, #12]
 80199bc:	60b9      	str	r1, [r7, #8]
 80199be:	4613      	mov	r3, r2
 80199c0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80199c2:	68bb      	ldr	r3, [r7, #8]
 80199c4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80199c6:	f107 0310 	add.w	r3, r7, #16
 80199ca:	4618      	mov	r0, r3
 80199cc:	f7ff fc9c 	bl	8019308 <get_ldnumber>
 80199d0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80199d2:	69fb      	ldr	r3, [r7, #28]
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	da01      	bge.n	80199dc <f_mount+0x28>
 80199d8:	230b      	movs	r3, #11
 80199da:	e02b      	b.n	8019a34 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80199dc:	4a17      	ldr	r2, [pc, #92]	; (8019a3c <f_mount+0x88>)
 80199de:	69fb      	ldr	r3, [r7, #28]
 80199e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80199e4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80199e6:	69bb      	ldr	r3, [r7, #24]
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	d005      	beq.n	80199f8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80199ec:	69b8      	ldr	r0, [r7, #24]
 80199ee:	f7fe f8ef 	bl	8017bd0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80199f2:	69bb      	ldr	r3, [r7, #24]
 80199f4:	2200      	movs	r2, #0
 80199f6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80199f8:	68fb      	ldr	r3, [r7, #12]
 80199fa:	2b00      	cmp	r3, #0
 80199fc:	d002      	beq.n	8019a04 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80199fe:	68fb      	ldr	r3, [r7, #12]
 8019a00:	2200      	movs	r2, #0
 8019a02:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8019a04:	68fa      	ldr	r2, [r7, #12]
 8019a06:	490d      	ldr	r1, [pc, #52]	; (8019a3c <f_mount+0x88>)
 8019a08:	69fb      	ldr	r3, [r7, #28]
 8019a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8019a0e:	68fb      	ldr	r3, [r7, #12]
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	d002      	beq.n	8019a1a <f_mount+0x66>
 8019a14:	79fb      	ldrb	r3, [r7, #7]
 8019a16:	2b01      	cmp	r3, #1
 8019a18:	d001      	beq.n	8019a1e <f_mount+0x6a>
 8019a1a:	2300      	movs	r3, #0
 8019a1c:	e00a      	b.n	8019a34 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8019a1e:	f107 010c 	add.w	r1, r7, #12
 8019a22:	f107 0308 	add.w	r3, r7, #8
 8019a26:	2200      	movs	r2, #0
 8019a28:	4618      	mov	r0, r3
 8019a2a:	f7ff fd07 	bl	801943c <find_volume>
 8019a2e:	4603      	mov	r3, r0
 8019a30:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8019a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8019a34:	4618      	mov	r0, r3
 8019a36:	3720      	adds	r7, #32
 8019a38:	46bd      	mov	sp, r7
 8019a3a:	bd80      	pop	{r7, pc}
 8019a3c:	240016a8 	.word	0x240016a8

08019a40 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8019a40:	b580      	push	{r7, lr}
 8019a42:	b09a      	sub	sp, #104	; 0x68
 8019a44:	af00      	add	r7, sp, #0
 8019a46:	60f8      	str	r0, [r7, #12]
 8019a48:	60b9      	str	r1, [r7, #8]
 8019a4a:	4613      	mov	r3, r2
 8019a4c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8019a4e:	68fb      	ldr	r3, [r7, #12]
 8019a50:	2b00      	cmp	r3, #0
 8019a52:	d101      	bne.n	8019a58 <f_open+0x18>
 8019a54:	2309      	movs	r3, #9
 8019a56:	e1bb      	b.n	8019dd0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8019a58:	79fb      	ldrb	r3, [r7, #7]
 8019a5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019a5e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8019a60:	79fa      	ldrb	r2, [r7, #7]
 8019a62:	f107 0114 	add.w	r1, r7, #20
 8019a66:	f107 0308 	add.w	r3, r7, #8
 8019a6a:	4618      	mov	r0, r3
 8019a6c:	f7ff fce6 	bl	801943c <find_volume>
 8019a70:	4603      	mov	r3, r0
 8019a72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8019a76:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019a7a:	2b00      	cmp	r3, #0
 8019a7c:	f040 819f 	bne.w	8019dbe <f_open+0x37e>
		dj.obj.fs = fs;
 8019a80:	697b      	ldr	r3, [r7, #20]
 8019a82:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8019a84:	68ba      	ldr	r2, [r7, #8]
 8019a86:	f107 0318 	add.w	r3, r7, #24
 8019a8a:	4611      	mov	r1, r2
 8019a8c:	4618      	mov	r0, r3
 8019a8e:	f7ff fbc5 	bl	801921c <follow_path>
 8019a92:	4603      	mov	r3, r0
 8019a94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8019a98:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	d11a      	bne.n	8019ad6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8019aa0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019aa4:	b25b      	sxtb	r3, r3
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	da03      	bge.n	8019ab2 <f_open+0x72>
				res = FR_INVALID_NAME;
 8019aaa:	2306      	movs	r3, #6
 8019aac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019ab0:	e011      	b.n	8019ad6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8019ab2:	79fb      	ldrb	r3, [r7, #7]
 8019ab4:	f023 0301 	bic.w	r3, r3, #1
 8019ab8:	2b00      	cmp	r3, #0
 8019aba:	bf14      	ite	ne
 8019abc:	2301      	movne	r3, #1
 8019abe:	2300      	moveq	r3, #0
 8019ac0:	b2db      	uxtb	r3, r3
 8019ac2:	461a      	mov	r2, r3
 8019ac4:	f107 0318 	add.w	r3, r7, #24
 8019ac8:	4611      	mov	r1, r2
 8019aca:	4618      	mov	r0, r3
 8019acc:	f7fd ff38 	bl	8017940 <chk_lock>
 8019ad0:	4603      	mov	r3, r0
 8019ad2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8019ad6:	79fb      	ldrb	r3, [r7, #7]
 8019ad8:	f003 031c 	and.w	r3, r3, #28
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	d07f      	beq.n	8019be0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8019ae0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019ae4:	2b00      	cmp	r3, #0
 8019ae6:	d017      	beq.n	8019b18 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8019ae8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019aec:	2b04      	cmp	r3, #4
 8019aee:	d10e      	bne.n	8019b0e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8019af0:	f7fd ff82 	bl	80179f8 <enq_lock>
 8019af4:	4603      	mov	r3, r0
 8019af6:	2b00      	cmp	r3, #0
 8019af8:	d006      	beq.n	8019b08 <f_open+0xc8>
 8019afa:	f107 0318 	add.w	r3, r7, #24
 8019afe:	4618      	mov	r0, r3
 8019b00:	f7ff f8dc 	bl	8018cbc <dir_register>
 8019b04:	4603      	mov	r3, r0
 8019b06:	e000      	b.n	8019b0a <f_open+0xca>
 8019b08:	2312      	movs	r3, #18
 8019b0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8019b0e:	79fb      	ldrb	r3, [r7, #7]
 8019b10:	f043 0308 	orr.w	r3, r3, #8
 8019b14:	71fb      	strb	r3, [r7, #7]
 8019b16:	e010      	b.n	8019b3a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8019b18:	7fbb      	ldrb	r3, [r7, #30]
 8019b1a:	f003 0311 	and.w	r3, r3, #17
 8019b1e:	2b00      	cmp	r3, #0
 8019b20:	d003      	beq.n	8019b2a <f_open+0xea>
					res = FR_DENIED;
 8019b22:	2307      	movs	r3, #7
 8019b24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019b28:	e007      	b.n	8019b3a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8019b2a:	79fb      	ldrb	r3, [r7, #7]
 8019b2c:	f003 0304 	and.w	r3, r3, #4
 8019b30:	2b00      	cmp	r3, #0
 8019b32:	d002      	beq.n	8019b3a <f_open+0xfa>
 8019b34:	2308      	movs	r3, #8
 8019b36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8019b3a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019b3e:	2b00      	cmp	r3, #0
 8019b40:	d168      	bne.n	8019c14 <f_open+0x1d4>
 8019b42:	79fb      	ldrb	r3, [r7, #7]
 8019b44:	f003 0308 	and.w	r3, r3, #8
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	d063      	beq.n	8019c14 <f_open+0x1d4>
				dw = GET_FATTIME();
 8019b4c:	f7fb fb70 	bl	8015230 <get_fattime>
 8019b50:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8019b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b54:	330e      	adds	r3, #14
 8019b56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019b58:	4618      	mov	r0, r3
 8019b5a:	f7fd fe47 	bl	80177ec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8019b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b60:	3316      	adds	r3, #22
 8019b62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019b64:	4618      	mov	r0, r3
 8019b66:	f7fd fe41 	bl	80177ec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8019b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b6c:	330b      	adds	r3, #11
 8019b6e:	2220      	movs	r2, #32
 8019b70:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8019b72:	697b      	ldr	r3, [r7, #20]
 8019b74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019b76:	4611      	mov	r1, r2
 8019b78:	4618      	mov	r0, r3
 8019b7a:	f7fe fe17 	bl	80187ac <ld_clust>
 8019b7e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8019b80:	697b      	ldr	r3, [r7, #20]
 8019b82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019b84:	2200      	movs	r2, #0
 8019b86:	4618      	mov	r0, r3
 8019b88:	f7fe fe2f 	bl	80187ea <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8019b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b8e:	331c      	adds	r3, #28
 8019b90:	2100      	movs	r1, #0
 8019b92:	4618      	mov	r0, r3
 8019b94:	f7fd fe2a 	bl	80177ec <st_dword>
					fs->wflag = 1;
 8019b98:	697b      	ldr	r3, [r7, #20]
 8019b9a:	2201      	movs	r2, #1
 8019b9c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8019b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019ba0:	2b00      	cmp	r3, #0
 8019ba2:	d037      	beq.n	8019c14 <f_open+0x1d4>
						dw = fs->winsect;
 8019ba4:	697b      	ldr	r3, [r7, #20]
 8019ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019ba8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8019baa:	f107 0318 	add.w	r3, r7, #24
 8019bae:	2200      	movs	r2, #0
 8019bb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8019bb2:	4618      	mov	r0, r3
 8019bb4:	f7fe fb1f 	bl	80181f6 <remove_chain>
 8019bb8:	4603      	mov	r3, r0
 8019bba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8019bbe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	d126      	bne.n	8019c14 <f_open+0x1d4>
							res = move_window(fs, dw);
 8019bc6:	697b      	ldr	r3, [r7, #20]
 8019bc8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019bca:	4618      	mov	r0, r3
 8019bcc:	f7fe f868 	bl	8017ca0 <move_window>
 8019bd0:	4603      	mov	r3, r0
 8019bd2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8019bd6:	697b      	ldr	r3, [r7, #20]
 8019bd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019bda:	3a01      	subs	r2, #1
 8019bdc:	615a      	str	r2, [r3, #20]
 8019bde:	e019      	b.n	8019c14 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8019be0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	d115      	bne.n	8019c14 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8019be8:	7fbb      	ldrb	r3, [r7, #30]
 8019bea:	f003 0310 	and.w	r3, r3, #16
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	d003      	beq.n	8019bfa <f_open+0x1ba>
					res = FR_NO_FILE;
 8019bf2:	2304      	movs	r3, #4
 8019bf4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019bf8:	e00c      	b.n	8019c14 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8019bfa:	79fb      	ldrb	r3, [r7, #7]
 8019bfc:	f003 0302 	and.w	r3, r3, #2
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d007      	beq.n	8019c14 <f_open+0x1d4>
 8019c04:	7fbb      	ldrb	r3, [r7, #30]
 8019c06:	f003 0301 	and.w	r3, r3, #1
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	d002      	beq.n	8019c14 <f_open+0x1d4>
						res = FR_DENIED;
 8019c0e:	2307      	movs	r3, #7
 8019c10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8019c14:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019c18:	2b00      	cmp	r3, #0
 8019c1a:	d128      	bne.n	8019c6e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8019c1c:	79fb      	ldrb	r3, [r7, #7]
 8019c1e:	f003 0308 	and.w	r3, r3, #8
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d003      	beq.n	8019c2e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8019c26:	79fb      	ldrb	r3, [r7, #7]
 8019c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019c2c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8019c2e:	697b      	ldr	r3, [r7, #20]
 8019c30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8019c32:	68fb      	ldr	r3, [r7, #12]
 8019c34:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8019c36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019c38:	68fb      	ldr	r3, [r7, #12]
 8019c3a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8019c3c:	79fb      	ldrb	r3, [r7, #7]
 8019c3e:	f023 0301 	bic.w	r3, r3, #1
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	bf14      	ite	ne
 8019c46:	2301      	movne	r3, #1
 8019c48:	2300      	moveq	r3, #0
 8019c4a:	b2db      	uxtb	r3, r3
 8019c4c:	461a      	mov	r2, r3
 8019c4e:	f107 0318 	add.w	r3, r7, #24
 8019c52:	4611      	mov	r1, r2
 8019c54:	4618      	mov	r0, r3
 8019c56:	f7fd fef1 	bl	8017a3c <inc_lock>
 8019c5a:	4602      	mov	r2, r0
 8019c5c:	68fb      	ldr	r3, [r7, #12]
 8019c5e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8019c60:	68fb      	ldr	r3, [r7, #12]
 8019c62:	691b      	ldr	r3, [r3, #16]
 8019c64:	2b00      	cmp	r3, #0
 8019c66:	d102      	bne.n	8019c6e <f_open+0x22e>
 8019c68:	2302      	movs	r3, #2
 8019c6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8019c6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	f040 80a3 	bne.w	8019dbe <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8019c78:	697b      	ldr	r3, [r7, #20]
 8019c7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019c7c:	4611      	mov	r1, r2
 8019c7e:	4618      	mov	r0, r3
 8019c80:	f7fe fd94 	bl	80187ac <ld_clust>
 8019c84:	4602      	mov	r2, r0
 8019c86:	68fb      	ldr	r3, [r7, #12]
 8019c88:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8019c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c8c:	331c      	adds	r3, #28
 8019c8e:	4618      	mov	r0, r3
 8019c90:	f7fd fd6e 	bl	8017770 <ld_dword>
 8019c94:	4602      	mov	r2, r0
 8019c96:	68fb      	ldr	r3, [r7, #12]
 8019c98:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8019c9a:	68fb      	ldr	r3, [r7, #12]
 8019c9c:	2200      	movs	r2, #0
 8019c9e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8019ca0:	697a      	ldr	r2, [r7, #20]
 8019ca2:	68fb      	ldr	r3, [r7, #12]
 8019ca4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8019ca6:	697b      	ldr	r3, [r7, #20]
 8019ca8:	88da      	ldrh	r2, [r3, #6]
 8019caa:	68fb      	ldr	r3, [r7, #12]
 8019cac:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8019cae:	68fb      	ldr	r3, [r7, #12]
 8019cb0:	79fa      	ldrb	r2, [r7, #7]
 8019cb2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8019cb4:	68fb      	ldr	r3, [r7, #12]
 8019cb6:	2200      	movs	r2, #0
 8019cb8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8019cba:	68fb      	ldr	r3, [r7, #12]
 8019cbc:	2200      	movs	r2, #0
 8019cbe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8019cc0:	68fb      	ldr	r3, [r7, #12]
 8019cc2:	2200      	movs	r2, #0
 8019cc4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8019cc6:	68fb      	ldr	r3, [r7, #12]
 8019cc8:	3330      	adds	r3, #48	; 0x30
 8019cca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8019cce:	2100      	movs	r1, #0
 8019cd0:	4618      	mov	r0, r3
 8019cd2:	f7fd fdd8 	bl	8017886 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8019cd6:	79fb      	ldrb	r3, [r7, #7]
 8019cd8:	f003 0320 	and.w	r3, r3, #32
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d06e      	beq.n	8019dbe <f_open+0x37e>
 8019ce0:	68fb      	ldr	r3, [r7, #12]
 8019ce2:	68db      	ldr	r3, [r3, #12]
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	d06a      	beq.n	8019dbe <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8019ce8:	68fb      	ldr	r3, [r7, #12]
 8019cea:	68da      	ldr	r2, [r3, #12]
 8019cec:	68fb      	ldr	r3, [r7, #12]
 8019cee:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8019cf0:	697b      	ldr	r3, [r7, #20]
 8019cf2:	895b      	ldrh	r3, [r3, #10]
 8019cf4:	461a      	mov	r2, r3
 8019cf6:	697b      	ldr	r3, [r7, #20]
 8019cf8:	899b      	ldrh	r3, [r3, #12]
 8019cfa:	fb02 f303 	mul.w	r3, r2, r3
 8019cfe:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8019d00:	68fb      	ldr	r3, [r7, #12]
 8019d02:	689b      	ldr	r3, [r3, #8]
 8019d04:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8019d06:	68fb      	ldr	r3, [r7, #12]
 8019d08:	68db      	ldr	r3, [r3, #12]
 8019d0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019d0c:	e016      	b.n	8019d3c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8019d0e:	68fb      	ldr	r3, [r7, #12]
 8019d10:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8019d12:	4618      	mov	r0, r3
 8019d14:	f7fe f881 	bl	8017e1a <get_fat>
 8019d18:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8019d1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019d1c:	2b01      	cmp	r3, #1
 8019d1e:	d802      	bhi.n	8019d26 <f_open+0x2e6>
 8019d20:	2302      	movs	r3, #2
 8019d22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8019d26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019d2c:	d102      	bne.n	8019d34 <f_open+0x2f4>
 8019d2e:	2301      	movs	r3, #1
 8019d30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8019d34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8019d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019d38:	1ad3      	subs	r3, r2, r3
 8019d3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019d3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d103      	bne.n	8019d4c <f_open+0x30c>
 8019d44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8019d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019d48:	429a      	cmp	r2, r3
 8019d4a:	d8e0      	bhi.n	8019d0e <f_open+0x2ce>
				}
				fp->clust = clst;
 8019d4c:	68fb      	ldr	r3, [r7, #12]
 8019d4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8019d50:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8019d52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d131      	bne.n	8019dbe <f_open+0x37e>
 8019d5a:	697b      	ldr	r3, [r7, #20]
 8019d5c:	899b      	ldrh	r3, [r3, #12]
 8019d5e:	461a      	mov	r2, r3
 8019d60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019d62:	fbb3 f1f2 	udiv	r1, r3, r2
 8019d66:	fb01 f202 	mul.w	r2, r1, r2
 8019d6a:	1a9b      	subs	r3, r3, r2
 8019d6c:	2b00      	cmp	r3, #0
 8019d6e:	d026      	beq.n	8019dbe <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8019d70:	697b      	ldr	r3, [r7, #20]
 8019d72:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8019d74:	4618      	mov	r0, r3
 8019d76:	f7fe f831 	bl	8017ddc <clust2sect>
 8019d7a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8019d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	d103      	bne.n	8019d8a <f_open+0x34a>
						res = FR_INT_ERR;
 8019d82:	2302      	movs	r3, #2
 8019d84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019d88:	e019      	b.n	8019dbe <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8019d8a:	697b      	ldr	r3, [r7, #20]
 8019d8c:	899b      	ldrh	r3, [r3, #12]
 8019d8e:	461a      	mov	r2, r3
 8019d90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019d92:	fbb3 f2f2 	udiv	r2, r3, r2
 8019d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019d98:	441a      	add	r2, r3
 8019d9a:	68fb      	ldr	r3, [r7, #12]
 8019d9c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8019d9e:	697b      	ldr	r3, [r7, #20]
 8019da0:	7858      	ldrb	r0, [r3, #1]
 8019da2:	68fb      	ldr	r3, [r7, #12]
 8019da4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019da8:	68fb      	ldr	r3, [r7, #12]
 8019daa:	6a1a      	ldr	r2, [r3, #32]
 8019dac:	2301      	movs	r3, #1
 8019dae:	f7fd fc69 	bl	8017684 <disk_read>
 8019db2:	4603      	mov	r3, r0
 8019db4:	2b00      	cmp	r3, #0
 8019db6:	d002      	beq.n	8019dbe <f_open+0x37e>
 8019db8:	2301      	movs	r3, #1
 8019dba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8019dbe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d002      	beq.n	8019dcc <f_open+0x38c>
 8019dc6:	68fb      	ldr	r3, [r7, #12]
 8019dc8:	2200      	movs	r2, #0
 8019dca:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8019dcc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8019dd0:	4618      	mov	r0, r3
 8019dd2:	3768      	adds	r7, #104	; 0x68
 8019dd4:	46bd      	mov	sp, r7
 8019dd6:	bd80      	pop	{r7, pc}

08019dd8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8019dd8:	b580      	push	{r7, lr}
 8019dda:	b08c      	sub	sp, #48	; 0x30
 8019ddc:	af00      	add	r7, sp, #0
 8019dde:	60f8      	str	r0, [r7, #12]
 8019de0:	60b9      	str	r1, [r7, #8]
 8019de2:	607a      	str	r2, [r7, #4]
 8019de4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8019de6:	68bb      	ldr	r3, [r7, #8]
 8019de8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8019dea:	683b      	ldr	r3, [r7, #0]
 8019dec:	2200      	movs	r2, #0
 8019dee:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8019df0:	68fb      	ldr	r3, [r7, #12]
 8019df2:	f107 0210 	add.w	r2, r7, #16
 8019df6:	4611      	mov	r1, r2
 8019df8:	4618      	mov	r0, r3
 8019dfa:	f7ff fda5 	bl	8019948 <validate>
 8019dfe:	4603      	mov	r3, r0
 8019e00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8019e04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	d107      	bne.n	8019e1c <f_write+0x44>
 8019e0c:	68fb      	ldr	r3, [r7, #12]
 8019e0e:	7d5b      	ldrb	r3, [r3, #21]
 8019e10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8019e14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019e18:	2b00      	cmp	r3, #0
 8019e1a:	d002      	beq.n	8019e22 <f_write+0x4a>
 8019e1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019e20:	e16a      	b.n	801a0f8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8019e22:	68fb      	ldr	r3, [r7, #12]
 8019e24:	7d1b      	ldrb	r3, [r3, #20]
 8019e26:	f003 0302 	and.w	r3, r3, #2
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	d101      	bne.n	8019e32 <f_write+0x5a>
 8019e2e:	2307      	movs	r3, #7
 8019e30:	e162      	b.n	801a0f8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8019e32:	68fb      	ldr	r3, [r7, #12]
 8019e34:	699a      	ldr	r2, [r3, #24]
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	441a      	add	r2, r3
 8019e3a:	68fb      	ldr	r3, [r7, #12]
 8019e3c:	699b      	ldr	r3, [r3, #24]
 8019e3e:	429a      	cmp	r2, r3
 8019e40:	f080 814c 	bcs.w	801a0dc <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8019e44:	68fb      	ldr	r3, [r7, #12]
 8019e46:	699b      	ldr	r3, [r3, #24]
 8019e48:	43db      	mvns	r3, r3
 8019e4a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8019e4c:	e146      	b.n	801a0dc <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8019e4e:	68fb      	ldr	r3, [r7, #12]
 8019e50:	699b      	ldr	r3, [r3, #24]
 8019e52:	693a      	ldr	r2, [r7, #16]
 8019e54:	8992      	ldrh	r2, [r2, #12]
 8019e56:	fbb3 f1f2 	udiv	r1, r3, r2
 8019e5a:	fb01 f202 	mul.w	r2, r1, r2
 8019e5e:	1a9b      	subs	r3, r3, r2
 8019e60:	2b00      	cmp	r3, #0
 8019e62:	f040 80f1 	bne.w	801a048 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8019e66:	68fb      	ldr	r3, [r7, #12]
 8019e68:	699b      	ldr	r3, [r3, #24]
 8019e6a:	693a      	ldr	r2, [r7, #16]
 8019e6c:	8992      	ldrh	r2, [r2, #12]
 8019e6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8019e72:	693a      	ldr	r2, [r7, #16]
 8019e74:	8952      	ldrh	r2, [r2, #10]
 8019e76:	3a01      	subs	r2, #1
 8019e78:	4013      	ands	r3, r2
 8019e7a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8019e7c:	69bb      	ldr	r3, [r7, #24]
 8019e7e:	2b00      	cmp	r3, #0
 8019e80:	d143      	bne.n	8019f0a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8019e82:	68fb      	ldr	r3, [r7, #12]
 8019e84:	699b      	ldr	r3, [r3, #24]
 8019e86:	2b00      	cmp	r3, #0
 8019e88:	d10c      	bne.n	8019ea4 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8019e8a:	68fb      	ldr	r3, [r7, #12]
 8019e8c:	689b      	ldr	r3, [r3, #8]
 8019e8e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8019e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	d11a      	bne.n	8019ecc <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8019e96:	68fb      	ldr	r3, [r7, #12]
 8019e98:	2100      	movs	r1, #0
 8019e9a:	4618      	mov	r0, r3
 8019e9c:	f7fe fa10 	bl	80182c0 <create_chain>
 8019ea0:	62b8      	str	r0, [r7, #40]	; 0x28
 8019ea2:	e013      	b.n	8019ecc <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8019ea4:	68fb      	ldr	r3, [r7, #12]
 8019ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	d007      	beq.n	8019ebc <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8019eac:	68fb      	ldr	r3, [r7, #12]
 8019eae:	699b      	ldr	r3, [r3, #24]
 8019eb0:	4619      	mov	r1, r3
 8019eb2:	68f8      	ldr	r0, [r7, #12]
 8019eb4:	f7fe fa9c 	bl	80183f0 <clmt_clust>
 8019eb8:	62b8      	str	r0, [r7, #40]	; 0x28
 8019eba:	e007      	b.n	8019ecc <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8019ebc:	68fa      	ldr	r2, [r7, #12]
 8019ebe:	68fb      	ldr	r3, [r7, #12]
 8019ec0:	69db      	ldr	r3, [r3, #28]
 8019ec2:	4619      	mov	r1, r3
 8019ec4:	4610      	mov	r0, r2
 8019ec6:	f7fe f9fb 	bl	80182c0 <create_chain>
 8019eca:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	f000 8109 	beq.w	801a0e6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8019ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ed6:	2b01      	cmp	r3, #1
 8019ed8:	d104      	bne.n	8019ee4 <f_write+0x10c>
 8019eda:	68fb      	ldr	r3, [r7, #12]
 8019edc:	2202      	movs	r2, #2
 8019ede:	755a      	strb	r2, [r3, #21]
 8019ee0:	2302      	movs	r3, #2
 8019ee2:	e109      	b.n	801a0f8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8019ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019eea:	d104      	bne.n	8019ef6 <f_write+0x11e>
 8019eec:	68fb      	ldr	r3, [r7, #12]
 8019eee:	2201      	movs	r2, #1
 8019ef0:	755a      	strb	r2, [r3, #21]
 8019ef2:	2301      	movs	r3, #1
 8019ef4:	e100      	b.n	801a0f8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8019ef6:	68fb      	ldr	r3, [r7, #12]
 8019ef8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019efa:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8019efc:	68fb      	ldr	r3, [r7, #12]
 8019efe:	689b      	ldr	r3, [r3, #8]
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	d102      	bne.n	8019f0a <f_write+0x132>
 8019f04:	68fb      	ldr	r3, [r7, #12]
 8019f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019f08:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8019f0a:	68fb      	ldr	r3, [r7, #12]
 8019f0c:	7d1b      	ldrb	r3, [r3, #20]
 8019f0e:	b25b      	sxtb	r3, r3
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	da18      	bge.n	8019f46 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019f14:	693b      	ldr	r3, [r7, #16]
 8019f16:	7858      	ldrb	r0, [r3, #1]
 8019f18:	68fb      	ldr	r3, [r7, #12]
 8019f1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019f1e:	68fb      	ldr	r3, [r7, #12]
 8019f20:	6a1a      	ldr	r2, [r3, #32]
 8019f22:	2301      	movs	r3, #1
 8019f24:	f7fd fbce 	bl	80176c4 <disk_write>
 8019f28:	4603      	mov	r3, r0
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	d004      	beq.n	8019f38 <f_write+0x160>
 8019f2e:	68fb      	ldr	r3, [r7, #12]
 8019f30:	2201      	movs	r2, #1
 8019f32:	755a      	strb	r2, [r3, #21]
 8019f34:	2301      	movs	r3, #1
 8019f36:	e0df      	b.n	801a0f8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019f38:	68fb      	ldr	r3, [r7, #12]
 8019f3a:	7d1b      	ldrb	r3, [r3, #20]
 8019f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019f40:	b2da      	uxtb	r2, r3
 8019f42:	68fb      	ldr	r3, [r7, #12]
 8019f44:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8019f46:	693a      	ldr	r2, [r7, #16]
 8019f48:	68fb      	ldr	r3, [r7, #12]
 8019f4a:	69db      	ldr	r3, [r3, #28]
 8019f4c:	4619      	mov	r1, r3
 8019f4e:	4610      	mov	r0, r2
 8019f50:	f7fd ff44 	bl	8017ddc <clust2sect>
 8019f54:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8019f56:	697b      	ldr	r3, [r7, #20]
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	d104      	bne.n	8019f66 <f_write+0x18e>
 8019f5c:	68fb      	ldr	r3, [r7, #12]
 8019f5e:	2202      	movs	r2, #2
 8019f60:	755a      	strb	r2, [r3, #21]
 8019f62:	2302      	movs	r3, #2
 8019f64:	e0c8      	b.n	801a0f8 <f_write+0x320>
			sect += csect;
 8019f66:	697a      	ldr	r2, [r7, #20]
 8019f68:	69bb      	ldr	r3, [r7, #24]
 8019f6a:	4413      	add	r3, r2
 8019f6c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8019f6e:	693b      	ldr	r3, [r7, #16]
 8019f70:	899b      	ldrh	r3, [r3, #12]
 8019f72:	461a      	mov	r2, r3
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	fbb3 f3f2 	udiv	r3, r3, r2
 8019f7a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8019f7c:	6a3b      	ldr	r3, [r7, #32]
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	d043      	beq.n	801a00a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8019f82:	69ba      	ldr	r2, [r7, #24]
 8019f84:	6a3b      	ldr	r3, [r7, #32]
 8019f86:	4413      	add	r3, r2
 8019f88:	693a      	ldr	r2, [r7, #16]
 8019f8a:	8952      	ldrh	r2, [r2, #10]
 8019f8c:	4293      	cmp	r3, r2
 8019f8e:	d905      	bls.n	8019f9c <f_write+0x1c4>
					cc = fs->csize - csect;
 8019f90:	693b      	ldr	r3, [r7, #16]
 8019f92:	895b      	ldrh	r3, [r3, #10]
 8019f94:	461a      	mov	r2, r3
 8019f96:	69bb      	ldr	r3, [r7, #24]
 8019f98:	1ad3      	subs	r3, r2, r3
 8019f9a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019f9c:	693b      	ldr	r3, [r7, #16]
 8019f9e:	7858      	ldrb	r0, [r3, #1]
 8019fa0:	6a3b      	ldr	r3, [r7, #32]
 8019fa2:	697a      	ldr	r2, [r7, #20]
 8019fa4:	69f9      	ldr	r1, [r7, #28]
 8019fa6:	f7fd fb8d 	bl	80176c4 <disk_write>
 8019faa:	4603      	mov	r3, r0
 8019fac:	2b00      	cmp	r3, #0
 8019fae:	d004      	beq.n	8019fba <f_write+0x1e2>
 8019fb0:	68fb      	ldr	r3, [r7, #12]
 8019fb2:	2201      	movs	r2, #1
 8019fb4:	755a      	strb	r2, [r3, #21]
 8019fb6:	2301      	movs	r3, #1
 8019fb8:	e09e      	b.n	801a0f8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8019fba:	68fb      	ldr	r3, [r7, #12]
 8019fbc:	6a1a      	ldr	r2, [r3, #32]
 8019fbe:	697b      	ldr	r3, [r7, #20]
 8019fc0:	1ad3      	subs	r3, r2, r3
 8019fc2:	6a3a      	ldr	r2, [r7, #32]
 8019fc4:	429a      	cmp	r2, r3
 8019fc6:	d918      	bls.n	8019ffa <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8019fc8:	68fb      	ldr	r3, [r7, #12]
 8019fca:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8019fce:	68fb      	ldr	r3, [r7, #12]
 8019fd0:	6a1a      	ldr	r2, [r3, #32]
 8019fd2:	697b      	ldr	r3, [r7, #20]
 8019fd4:	1ad3      	subs	r3, r2, r3
 8019fd6:	693a      	ldr	r2, [r7, #16]
 8019fd8:	8992      	ldrh	r2, [r2, #12]
 8019fda:	fb02 f303 	mul.w	r3, r2, r3
 8019fde:	69fa      	ldr	r2, [r7, #28]
 8019fe0:	18d1      	adds	r1, r2, r3
 8019fe2:	693b      	ldr	r3, [r7, #16]
 8019fe4:	899b      	ldrh	r3, [r3, #12]
 8019fe6:	461a      	mov	r2, r3
 8019fe8:	f7fd fc2c 	bl	8017844 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8019fec:	68fb      	ldr	r3, [r7, #12]
 8019fee:	7d1b      	ldrb	r3, [r3, #20]
 8019ff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019ff4:	b2da      	uxtb	r2, r3
 8019ff6:	68fb      	ldr	r3, [r7, #12]
 8019ff8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8019ffa:	693b      	ldr	r3, [r7, #16]
 8019ffc:	899b      	ldrh	r3, [r3, #12]
 8019ffe:	461a      	mov	r2, r3
 801a000:	6a3b      	ldr	r3, [r7, #32]
 801a002:	fb02 f303 	mul.w	r3, r2, r3
 801a006:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801a008:	e04b      	b.n	801a0a2 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801a00a:	68fb      	ldr	r3, [r7, #12]
 801a00c:	6a1b      	ldr	r3, [r3, #32]
 801a00e:	697a      	ldr	r2, [r7, #20]
 801a010:	429a      	cmp	r2, r3
 801a012:	d016      	beq.n	801a042 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801a014:	68fb      	ldr	r3, [r7, #12]
 801a016:	699a      	ldr	r2, [r3, #24]
 801a018:	68fb      	ldr	r3, [r7, #12]
 801a01a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801a01c:	429a      	cmp	r2, r3
 801a01e:	d210      	bcs.n	801a042 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801a020:	693b      	ldr	r3, [r7, #16]
 801a022:	7858      	ldrb	r0, [r3, #1]
 801a024:	68fb      	ldr	r3, [r7, #12]
 801a026:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801a02a:	2301      	movs	r3, #1
 801a02c:	697a      	ldr	r2, [r7, #20]
 801a02e:	f7fd fb29 	bl	8017684 <disk_read>
 801a032:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801a034:	2b00      	cmp	r3, #0
 801a036:	d004      	beq.n	801a042 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801a038:	68fb      	ldr	r3, [r7, #12]
 801a03a:	2201      	movs	r2, #1
 801a03c:	755a      	strb	r2, [r3, #21]
 801a03e:	2301      	movs	r3, #1
 801a040:	e05a      	b.n	801a0f8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801a042:	68fb      	ldr	r3, [r7, #12]
 801a044:	697a      	ldr	r2, [r7, #20]
 801a046:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801a048:	693b      	ldr	r3, [r7, #16]
 801a04a:	899b      	ldrh	r3, [r3, #12]
 801a04c:	4618      	mov	r0, r3
 801a04e:	68fb      	ldr	r3, [r7, #12]
 801a050:	699b      	ldr	r3, [r3, #24]
 801a052:	693a      	ldr	r2, [r7, #16]
 801a054:	8992      	ldrh	r2, [r2, #12]
 801a056:	fbb3 f1f2 	udiv	r1, r3, r2
 801a05a:	fb01 f202 	mul.w	r2, r1, r2
 801a05e:	1a9b      	subs	r3, r3, r2
 801a060:	1ac3      	subs	r3, r0, r3
 801a062:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801a064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a066:	687b      	ldr	r3, [r7, #4]
 801a068:	429a      	cmp	r2, r3
 801a06a:	d901      	bls.n	801a070 <f_write+0x298>
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801a070:	68fb      	ldr	r3, [r7, #12]
 801a072:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801a076:	68fb      	ldr	r3, [r7, #12]
 801a078:	699b      	ldr	r3, [r3, #24]
 801a07a:	693a      	ldr	r2, [r7, #16]
 801a07c:	8992      	ldrh	r2, [r2, #12]
 801a07e:	fbb3 f0f2 	udiv	r0, r3, r2
 801a082:	fb00 f202 	mul.w	r2, r0, r2
 801a086:	1a9b      	subs	r3, r3, r2
 801a088:	440b      	add	r3, r1
 801a08a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a08c:	69f9      	ldr	r1, [r7, #28]
 801a08e:	4618      	mov	r0, r3
 801a090:	f7fd fbd8 	bl	8017844 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801a094:	68fb      	ldr	r3, [r7, #12]
 801a096:	7d1b      	ldrb	r3, [r3, #20]
 801a098:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801a09c:	b2da      	uxtb	r2, r3
 801a09e:	68fb      	ldr	r3, [r7, #12]
 801a0a0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801a0a2:	69fa      	ldr	r2, [r7, #28]
 801a0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0a6:	4413      	add	r3, r2
 801a0a8:	61fb      	str	r3, [r7, #28]
 801a0aa:	68fb      	ldr	r3, [r7, #12]
 801a0ac:	699a      	ldr	r2, [r3, #24]
 801a0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0b0:	441a      	add	r2, r3
 801a0b2:	68fb      	ldr	r3, [r7, #12]
 801a0b4:	619a      	str	r2, [r3, #24]
 801a0b6:	68fb      	ldr	r3, [r7, #12]
 801a0b8:	68da      	ldr	r2, [r3, #12]
 801a0ba:	68fb      	ldr	r3, [r7, #12]
 801a0bc:	699b      	ldr	r3, [r3, #24]
 801a0be:	429a      	cmp	r2, r3
 801a0c0:	bf38      	it	cc
 801a0c2:	461a      	movcc	r2, r3
 801a0c4:	68fb      	ldr	r3, [r7, #12]
 801a0c6:	60da      	str	r2, [r3, #12]
 801a0c8:	683b      	ldr	r3, [r7, #0]
 801a0ca:	681a      	ldr	r2, [r3, #0]
 801a0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0ce:	441a      	add	r2, r3
 801a0d0:	683b      	ldr	r3, [r7, #0]
 801a0d2:	601a      	str	r2, [r3, #0]
 801a0d4:	687a      	ldr	r2, [r7, #4]
 801a0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0d8:	1ad3      	subs	r3, r2, r3
 801a0da:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	2b00      	cmp	r3, #0
 801a0e0:	f47f aeb5 	bne.w	8019e4e <f_write+0x76>
 801a0e4:	e000      	b.n	801a0e8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801a0e6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801a0e8:	68fb      	ldr	r3, [r7, #12]
 801a0ea:	7d1b      	ldrb	r3, [r3, #20]
 801a0ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a0f0:	b2da      	uxtb	r2, r3
 801a0f2:	68fb      	ldr	r3, [r7, #12]
 801a0f4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801a0f6:	2300      	movs	r3, #0
}
 801a0f8:	4618      	mov	r0, r3
 801a0fa:	3730      	adds	r7, #48	; 0x30
 801a0fc:	46bd      	mov	sp, r7
 801a0fe:	bd80      	pop	{r7, pc}

0801a100 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801a100:	b580      	push	{r7, lr}
 801a102:	b086      	sub	sp, #24
 801a104:	af00      	add	r7, sp, #0
 801a106:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801a108:	687b      	ldr	r3, [r7, #4]
 801a10a:	f107 0208 	add.w	r2, r7, #8
 801a10e:	4611      	mov	r1, r2
 801a110:	4618      	mov	r0, r3
 801a112:	f7ff fc19 	bl	8019948 <validate>
 801a116:	4603      	mov	r3, r0
 801a118:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801a11a:	7dfb      	ldrb	r3, [r7, #23]
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	d168      	bne.n	801a1f2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	7d1b      	ldrb	r3, [r3, #20]
 801a124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a128:	2b00      	cmp	r3, #0
 801a12a:	d062      	beq.n	801a1f2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	7d1b      	ldrb	r3, [r3, #20]
 801a130:	b25b      	sxtb	r3, r3
 801a132:	2b00      	cmp	r3, #0
 801a134:	da15      	bge.n	801a162 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801a136:	68bb      	ldr	r3, [r7, #8]
 801a138:	7858      	ldrb	r0, [r3, #1]
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	6a1a      	ldr	r2, [r3, #32]
 801a144:	2301      	movs	r3, #1
 801a146:	f7fd fabd 	bl	80176c4 <disk_write>
 801a14a:	4603      	mov	r3, r0
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	d001      	beq.n	801a154 <f_sync+0x54>
 801a150:	2301      	movs	r3, #1
 801a152:	e04f      	b.n	801a1f4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	7d1b      	ldrb	r3, [r3, #20]
 801a158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a15c:	b2da      	uxtb	r2, r3
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801a162:	f7fb f865 	bl	8015230 <get_fattime>
 801a166:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801a168:	68ba      	ldr	r2, [r7, #8]
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a16e:	4619      	mov	r1, r3
 801a170:	4610      	mov	r0, r2
 801a172:	f7fd fd95 	bl	8017ca0 <move_window>
 801a176:	4603      	mov	r3, r0
 801a178:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801a17a:	7dfb      	ldrb	r3, [r7, #23]
 801a17c:	2b00      	cmp	r3, #0
 801a17e:	d138      	bne.n	801a1f2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801a180:	687b      	ldr	r3, [r7, #4]
 801a182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a184:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801a186:	68fb      	ldr	r3, [r7, #12]
 801a188:	330b      	adds	r3, #11
 801a18a:	781a      	ldrb	r2, [r3, #0]
 801a18c:	68fb      	ldr	r3, [r7, #12]
 801a18e:	330b      	adds	r3, #11
 801a190:	f042 0220 	orr.w	r2, r2, #32
 801a194:	b2d2      	uxtb	r2, r2
 801a196:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	6818      	ldr	r0, [r3, #0]
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	689b      	ldr	r3, [r3, #8]
 801a1a0:	461a      	mov	r2, r3
 801a1a2:	68f9      	ldr	r1, [r7, #12]
 801a1a4:	f7fe fb21 	bl	80187ea <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801a1a8:	68fb      	ldr	r3, [r7, #12]
 801a1aa:	f103 021c 	add.w	r2, r3, #28
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	68db      	ldr	r3, [r3, #12]
 801a1b2:	4619      	mov	r1, r3
 801a1b4:	4610      	mov	r0, r2
 801a1b6:	f7fd fb19 	bl	80177ec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801a1ba:	68fb      	ldr	r3, [r7, #12]
 801a1bc:	3316      	adds	r3, #22
 801a1be:	6939      	ldr	r1, [r7, #16]
 801a1c0:	4618      	mov	r0, r3
 801a1c2:	f7fd fb13 	bl	80177ec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801a1c6:	68fb      	ldr	r3, [r7, #12]
 801a1c8:	3312      	adds	r3, #18
 801a1ca:	2100      	movs	r1, #0
 801a1cc:	4618      	mov	r0, r3
 801a1ce:	f7fd faf2 	bl	80177b6 <st_word>
					fs->wflag = 1;
 801a1d2:	68bb      	ldr	r3, [r7, #8]
 801a1d4:	2201      	movs	r2, #1
 801a1d6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801a1d8:	68bb      	ldr	r3, [r7, #8]
 801a1da:	4618      	mov	r0, r3
 801a1dc:	f7fd fd8e 	bl	8017cfc <sync_fs>
 801a1e0:	4603      	mov	r3, r0
 801a1e2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801a1e4:	687b      	ldr	r3, [r7, #4]
 801a1e6:	7d1b      	ldrb	r3, [r3, #20]
 801a1e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a1ec:	b2da      	uxtb	r2, r3
 801a1ee:	687b      	ldr	r3, [r7, #4]
 801a1f0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801a1f2:	7dfb      	ldrb	r3, [r7, #23]
}
 801a1f4:	4618      	mov	r0, r3
 801a1f6:	3718      	adds	r7, #24
 801a1f8:	46bd      	mov	sp, r7
 801a1fa:	bd80      	pop	{r7, pc}

0801a1fc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801a1fc:	b580      	push	{r7, lr}
 801a1fe:	b084      	sub	sp, #16
 801a200:	af00      	add	r7, sp, #0
 801a202:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801a204:	6878      	ldr	r0, [r7, #4]
 801a206:	f7ff ff7b 	bl	801a100 <f_sync>
 801a20a:	4603      	mov	r3, r0
 801a20c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801a20e:	7bfb      	ldrb	r3, [r7, #15]
 801a210:	2b00      	cmp	r3, #0
 801a212:	d118      	bne.n	801a246 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	f107 0208 	add.w	r2, r7, #8
 801a21a:	4611      	mov	r1, r2
 801a21c:	4618      	mov	r0, r3
 801a21e:	f7ff fb93 	bl	8019948 <validate>
 801a222:	4603      	mov	r3, r0
 801a224:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801a226:	7bfb      	ldrb	r3, [r7, #15]
 801a228:	2b00      	cmp	r3, #0
 801a22a:	d10c      	bne.n	801a246 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	691b      	ldr	r3, [r3, #16]
 801a230:	4618      	mov	r0, r3
 801a232:	f7fd fc91 	bl	8017b58 <dec_lock>
 801a236:	4603      	mov	r3, r0
 801a238:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801a23a:	7bfb      	ldrb	r3, [r7, #15]
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	d102      	bne.n	801a246 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801a240:	687b      	ldr	r3, [r7, #4]
 801a242:	2200      	movs	r2, #0
 801a244:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801a246:	7bfb      	ldrb	r3, [r7, #15]
}
 801a248:	4618      	mov	r0, r3
 801a24a:	3710      	adds	r7, #16
 801a24c:	46bd      	mov	sp, r7
 801a24e:	bd80      	pop	{r7, pc}

0801a250 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 801a250:	b580      	push	{r7, lr}
 801a252:	b084      	sub	sp, #16
 801a254:	af00      	add	r7, sp, #0
 801a256:	6078      	str	r0, [r7, #4]
 801a258:	460b      	mov	r3, r1
 801a25a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 801a25c:	78fb      	ldrb	r3, [r7, #3]
 801a25e:	2b0a      	cmp	r3, #10
 801a260:	d103      	bne.n	801a26a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801a262:	210d      	movs	r1, #13
 801a264:	6878      	ldr	r0, [r7, #4]
 801a266:	f7ff fff3 	bl	801a250 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 801a26a:	687b      	ldr	r3, [r7, #4]
 801a26c:	685b      	ldr	r3, [r3, #4]
 801a26e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 801a270:	68fb      	ldr	r3, [r7, #12]
 801a272:	2b00      	cmp	r3, #0
 801a274:	db25      	blt.n	801a2c2 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 801a276:	68fb      	ldr	r3, [r7, #12]
 801a278:	1c5a      	adds	r2, r3, #1
 801a27a:	60fa      	str	r2, [r7, #12]
 801a27c:	687a      	ldr	r2, [r7, #4]
 801a27e:	4413      	add	r3, r2
 801a280:	78fa      	ldrb	r2, [r7, #3]
 801a282:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801a284:	68fb      	ldr	r3, [r7, #12]
 801a286:	2b3c      	cmp	r3, #60	; 0x3c
 801a288:	dd12      	ble.n	801a2b0 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	6818      	ldr	r0, [r3, #0]
 801a28e:	687b      	ldr	r3, [r7, #4]
 801a290:	f103 010c 	add.w	r1, r3, #12
 801a294:	68fa      	ldr	r2, [r7, #12]
 801a296:	f107 0308 	add.w	r3, r7, #8
 801a29a:	f7ff fd9d 	bl	8019dd8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801a29e:	68ba      	ldr	r2, [r7, #8]
 801a2a0:	68fb      	ldr	r3, [r7, #12]
 801a2a2:	429a      	cmp	r2, r3
 801a2a4:	d101      	bne.n	801a2aa <putc_bfd+0x5a>
 801a2a6:	2300      	movs	r3, #0
 801a2a8:	e001      	b.n	801a2ae <putc_bfd+0x5e>
 801a2aa:	f04f 33ff 	mov.w	r3, #4294967295
 801a2ae:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	68fa      	ldr	r2, [r7, #12]
 801a2b4:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	689b      	ldr	r3, [r3, #8]
 801a2ba:	1c5a      	adds	r2, r3, #1
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	609a      	str	r2, [r3, #8]
 801a2c0:	e000      	b.n	801a2c4 <putc_bfd+0x74>
	if (i < 0) return;
 801a2c2:	bf00      	nop
}
 801a2c4:	3710      	adds	r7, #16
 801a2c6:	46bd      	mov	sp, r7
 801a2c8:	bd80      	pop	{r7, pc}

0801a2ca <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801a2ca:	b580      	push	{r7, lr}
 801a2cc:	b084      	sub	sp, #16
 801a2ce:	af00      	add	r7, sp, #0
 801a2d0:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	685b      	ldr	r3, [r3, #4]
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	db16      	blt.n	801a308 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	6818      	ldr	r0, [r3, #0]
 801a2de:	687b      	ldr	r3, [r7, #4]
 801a2e0:	f103 010c 	add.w	r1, r3, #12
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	685b      	ldr	r3, [r3, #4]
 801a2e8:	461a      	mov	r2, r3
 801a2ea:	f107 030c 	add.w	r3, r7, #12
 801a2ee:	f7ff fd73 	bl	8019dd8 <f_write>
 801a2f2:	4603      	mov	r3, r0
 801a2f4:	2b00      	cmp	r3, #0
 801a2f6:	d107      	bne.n	801a308 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	685b      	ldr	r3, [r3, #4]
 801a2fc:	68fa      	ldr	r2, [r7, #12]
 801a2fe:	4293      	cmp	r3, r2
 801a300:	d102      	bne.n	801a308 <putc_flush+0x3e>
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	689b      	ldr	r3, [r3, #8]
 801a306:	e001      	b.n	801a30c <putc_flush+0x42>
	return EOF;
 801a308:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a30c:	4618      	mov	r0, r3
 801a30e:	3710      	adds	r7, #16
 801a310:	46bd      	mov	sp, r7
 801a312:	bd80      	pop	{r7, pc}

0801a314 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 801a314:	b480      	push	{r7}
 801a316:	b083      	sub	sp, #12
 801a318:	af00      	add	r7, sp, #0
 801a31a:	6078      	str	r0, [r7, #4]
 801a31c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	683a      	ldr	r2, [r7, #0]
 801a322:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	2200      	movs	r2, #0
 801a328:	605a      	str	r2, [r3, #4]
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	685a      	ldr	r2, [r3, #4]
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	609a      	str	r2, [r3, #8]
}
 801a332:	bf00      	nop
 801a334:	370c      	adds	r7, #12
 801a336:	46bd      	mov	sp, r7
 801a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a33c:	4770      	bx	lr

0801a33e <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 801a33e:	b580      	push	{r7, lr}
 801a340:	b096      	sub	sp, #88	; 0x58
 801a342:	af00      	add	r7, sp, #0
 801a344:	6078      	str	r0, [r7, #4]
 801a346:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 801a348:	f107 030c 	add.w	r3, r7, #12
 801a34c:	6839      	ldr	r1, [r7, #0]
 801a34e:	4618      	mov	r0, r3
 801a350:	f7ff ffe0 	bl	801a314 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 801a354:	e009      	b.n	801a36a <f_puts+0x2c>
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	1c5a      	adds	r2, r3, #1
 801a35a:	607a      	str	r2, [r7, #4]
 801a35c:	781a      	ldrb	r2, [r3, #0]
 801a35e:	f107 030c 	add.w	r3, r7, #12
 801a362:	4611      	mov	r1, r2
 801a364:	4618      	mov	r0, r3
 801a366:	f7ff ff73 	bl	801a250 <putc_bfd>
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	781b      	ldrb	r3, [r3, #0]
 801a36e:	2b00      	cmp	r3, #0
 801a370:	d1f1      	bne.n	801a356 <f_puts+0x18>
	return putc_flush(&pb);
 801a372:	f107 030c 	add.w	r3, r7, #12
 801a376:	4618      	mov	r0, r3
 801a378:	f7ff ffa7 	bl	801a2ca <putc_flush>
 801a37c:	4603      	mov	r3, r0
}
 801a37e:	4618      	mov	r0, r3
 801a380:	3758      	adds	r7, #88	; 0x58
 801a382:	46bd      	mov	sp, r7
 801a384:	bd80      	pop	{r7, pc}
	...

0801a388 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801a388:	b480      	push	{r7}
 801a38a:	b087      	sub	sp, #28
 801a38c:	af00      	add	r7, sp, #0
 801a38e:	60f8      	str	r0, [r7, #12]
 801a390:	60b9      	str	r1, [r7, #8]
 801a392:	4613      	mov	r3, r2
 801a394:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801a396:	2301      	movs	r3, #1
 801a398:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801a39a:	2300      	movs	r3, #0
 801a39c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801a39e:	4b1f      	ldr	r3, [pc, #124]	; (801a41c <FATFS_LinkDriverEx+0x94>)
 801a3a0:	7a5b      	ldrb	r3, [r3, #9]
 801a3a2:	b2db      	uxtb	r3, r3
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	d131      	bne.n	801a40c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801a3a8:	4b1c      	ldr	r3, [pc, #112]	; (801a41c <FATFS_LinkDriverEx+0x94>)
 801a3aa:	7a5b      	ldrb	r3, [r3, #9]
 801a3ac:	b2db      	uxtb	r3, r3
 801a3ae:	461a      	mov	r2, r3
 801a3b0:	4b1a      	ldr	r3, [pc, #104]	; (801a41c <FATFS_LinkDriverEx+0x94>)
 801a3b2:	2100      	movs	r1, #0
 801a3b4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801a3b6:	4b19      	ldr	r3, [pc, #100]	; (801a41c <FATFS_LinkDriverEx+0x94>)
 801a3b8:	7a5b      	ldrb	r3, [r3, #9]
 801a3ba:	b2db      	uxtb	r3, r3
 801a3bc:	4a17      	ldr	r2, [pc, #92]	; (801a41c <FATFS_LinkDriverEx+0x94>)
 801a3be:	009b      	lsls	r3, r3, #2
 801a3c0:	4413      	add	r3, r2
 801a3c2:	68fa      	ldr	r2, [r7, #12]
 801a3c4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801a3c6:	4b15      	ldr	r3, [pc, #84]	; (801a41c <FATFS_LinkDriverEx+0x94>)
 801a3c8:	7a5b      	ldrb	r3, [r3, #9]
 801a3ca:	b2db      	uxtb	r3, r3
 801a3cc:	461a      	mov	r2, r3
 801a3ce:	4b13      	ldr	r3, [pc, #76]	; (801a41c <FATFS_LinkDriverEx+0x94>)
 801a3d0:	4413      	add	r3, r2
 801a3d2:	79fa      	ldrb	r2, [r7, #7]
 801a3d4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801a3d6:	4b11      	ldr	r3, [pc, #68]	; (801a41c <FATFS_LinkDriverEx+0x94>)
 801a3d8:	7a5b      	ldrb	r3, [r3, #9]
 801a3da:	b2db      	uxtb	r3, r3
 801a3dc:	1c5a      	adds	r2, r3, #1
 801a3de:	b2d1      	uxtb	r1, r2
 801a3e0:	4a0e      	ldr	r2, [pc, #56]	; (801a41c <FATFS_LinkDriverEx+0x94>)
 801a3e2:	7251      	strb	r1, [r2, #9]
 801a3e4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801a3e6:	7dbb      	ldrb	r3, [r7, #22]
 801a3e8:	3330      	adds	r3, #48	; 0x30
 801a3ea:	b2da      	uxtb	r2, r3
 801a3ec:	68bb      	ldr	r3, [r7, #8]
 801a3ee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801a3f0:	68bb      	ldr	r3, [r7, #8]
 801a3f2:	3301      	adds	r3, #1
 801a3f4:	223a      	movs	r2, #58	; 0x3a
 801a3f6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801a3f8:	68bb      	ldr	r3, [r7, #8]
 801a3fa:	3302      	adds	r3, #2
 801a3fc:	222f      	movs	r2, #47	; 0x2f
 801a3fe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801a400:	68bb      	ldr	r3, [r7, #8]
 801a402:	3303      	adds	r3, #3
 801a404:	2200      	movs	r2, #0
 801a406:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801a408:	2300      	movs	r3, #0
 801a40a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801a40c:	7dfb      	ldrb	r3, [r7, #23]
}
 801a40e:	4618      	mov	r0, r3
 801a410:	371c      	adds	r7, #28
 801a412:	46bd      	mov	sp, r7
 801a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a418:	4770      	bx	lr
 801a41a:	bf00      	nop
 801a41c:	240018d0 	.word	0x240018d0

0801a420 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801a420:	b580      	push	{r7, lr}
 801a422:	b082      	sub	sp, #8
 801a424:	af00      	add	r7, sp, #0
 801a426:	6078      	str	r0, [r7, #4]
 801a428:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801a42a:	2200      	movs	r2, #0
 801a42c:	6839      	ldr	r1, [r7, #0]
 801a42e:	6878      	ldr	r0, [r7, #4]
 801a430:	f7ff ffaa 	bl	801a388 <FATFS_LinkDriverEx>
 801a434:	4603      	mov	r3, r0
}
 801a436:	4618      	mov	r0, r3
 801a438:	3708      	adds	r7, #8
 801a43a:	46bd      	mov	sp, r7
 801a43c:	bd80      	pop	{r7, pc}
	...

0801a440 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801a440:	b480      	push	{r7}
 801a442:	b085      	sub	sp, #20
 801a444:	af00      	add	r7, sp, #0
 801a446:	4603      	mov	r3, r0
 801a448:	6039      	str	r1, [r7, #0]
 801a44a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801a44c:	88fb      	ldrh	r3, [r7, #6]
 801a44e:	2b7f      	cmp	r3, #127	; 0x7f
 801a450:	d802      	bhi.n	801a458 <ff_convert+0x18>
		c = chr;
 801a452:	88fb      	ldrh	r3, [r7, #6]
 801a454:	81fb      	strh	r3, [r7, #14]
 801a456:	e025      	b.n	801a4a4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801a458:	683b      	ldr	r3, [r7, #0]
 801a45a:	2b00      	cmp	r3, #0
 801a45c:	d00b      	beq.n	801a476 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801a45e:	88fb      	ldrh	r3, [r7, #6]
 801a460:	2bff      	cmp	r3, #255	; 0xff
 801a462:	d805      	bhi.n	801a470 <ff_convert+0x30>
 801a464:	88fb      	ldrh	r3, [r7, #6]
 801a466:	3b80      	subs	r3, #128	; 0x80
 801a468:	4a12      	ldr	r2, [pc, #72]	; (801a4b4 <ff_convert+0x74>)
 801a46a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a46e:	e000      	b.n	801a472 <ff_convert+0x32>
 801a470:	2300      	movs	r3, #0
 801a472:	81fb      	strh	r3, [r7, #14]
 801a474:	e016      	b.n	801a4a4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801a476:	2300      	movs	r3, #0
 801a478:	81fb      	strh	r3, [r7, #14]
 801a47a:	e009      	b.n	801a490 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801a47c:	89fb      	ldrh	r3, [r7, #14]
 801a47e:	4a0d      	ldr	r2, [pc, #52]	; (801a4b4 <ff_convert+0x74>)
 801a480:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a484:	88fa      	ldrh	r2, [r7, #6]
 801a486:	429a      	cmp	r2, r3
 801a488:	d006      	beq.n	801a498 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801a48a:	89fb      	ldrh	r3, [r7, #14]
 801a48c:	3301      	adds	r3, #1
 801a48e:	81fb      	strh	r3, [r7, #14]
 801a490:	89fb      	ldrh	r3, [r7, #14]
 801a492:	2b7f      	cmp	r3, #127	; 0x7f
 801a494:	d9f2      	bls.n	801a47c <ff_convert+0x3c>
 801a496:	e000      	b.n	801a49a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801a498:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801a49a:	89fb      	ldrh	r3, [r7, #14]
 801a49c:	3380      	adds	r3, #128	; 0x80
 801a49e:	b29b      	uxth	r3, r3
 801a4a0:	b2db      	uxtb	r3, r3
 801a4a2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801a4a4:	89fb      	ldrh	r3, [r7, #14]
}
 801a4a6:	4618      	mov	r0, r3
 801a4a8:	3714      	adds	r7, #20
 801a4aa:	46bd      	mov	sp, r7
 801a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4b0:	4770      	bx	lr
 801a4b2:	bf00      	nop
 801a4b4:	08020224 	.word	0x08020224

0801a4b8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801a4b8:	b480      	push	{r7}
 801a4ba:	b087      	sub	sp, #28
 801a4bc:	af00      	add	r7, sp, #0
 801a4be:	4603      	mov	r3, r0
 801a4c0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801a4c2:	88fb      	ldrh	r3, [r7, #6]
 801a4c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a4c8:	d201      	bcs.n	801a4ce <ff_wtoupper+0x16>
 801a4ca:	4b3e      	ldr	r3, [pc, #248]	; (801a5c4 <ff_wtoupper+0x10c>)
 801a4cc:	e000      	b.n	801a4d0 <ff_wtoupper+0x18>
 801a4ce:	4b3e      	ldr	r3, [pc, #248]	; (801a5c8 <ff_wtoupper+0x110>)
 801a4d0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801a4d2:	697b      	ldr	r3, [r7, #20]
 801a4d4:	1c9a      	adds	r2, r3, #2
 801a4d6:	617a      	str	r2, [r7, #20]
 801a4d8:	881b      	ldrh	r3, [r3, #0]
 801a4da:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801a4dc:	8a7b      	ldrh	r3, [r7, #18]
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	d068      	beq.n	801a5b4 <ff_wtoupper+0xfc>
 801a4e2:	88fa      	ldrh	r2, [r7, #6]
 801a4e4:	8a7b      	ldrh	r3, [r7, #18]
 801a4e6:	429a      	cmp	r2, r3
 801a4e8:	d364      	bcc.n	801a5b4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801a4ea:	697b      	ldr	r3, [r7, #20]
 801a4ec:	1c9a      	adds	r2, r3, #2
 801a4ee:	617a      	str	r2, [r7, #20]
 801a4f0:	881b      	ldrh	r3, [r3, #0]
 801a4f2:	823b      	strh	r3, [r7, #16]
 801a4f4:	8a3b      	ldrh	r3, [r7, #16]
 801a4f6:	0a1b      	lsrs	r3, r3, #8
 801a4f8:	81fb      	strh	r3, [r7, #14]
 801a4fa:	8a3b      	ldrh	r3, [r7, #16]
 801a4fc:	b2db      	uxtb	r3, r3
 801a4fe:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801a500:	88fa      	ldrh	r2, [r7, #6]
 801a502:	8a79      	ldrh	r1, [r7, #18]
 801a504:	8a3b      	ldrh	r3, [r7, #16]
 801a506:	440b      	add	r3, r1
 801a508:	429a      	cmp	r2, r3
 801a50a:	da49      	bge.n	801a5a0 <ff_wtoupper+0xe8>
			switch (cmd) {
 801a50c:	89fb      	ldrh	r3, [r7, #14]
 801a50e:	2b08      	cmp	r3, #8
 801a510:	d84f      	bhi.n	801a5b2 <ff_wtoupper+0xfa>
 801a512:	a201      	add	r2, pc, #4	; (adr r2, 801a518 <ff_wtoupper+0x60>)
 801a514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a518:	0801a53d 	.word	0x0801a53d
 801a51c:	0801a54f 	.word	0x0801a54f
 801a520:	0801a565 	.word	0x0801a565
 801a524:	0801a56d 	.word	0x0801a56d
 801a528:	0801a575 	.word	0x0801a575
 801a52c:	0801a57d 	.word	0x0801a57d
 801a530:	0801a585 	.word	0x0801a585
 801a534:	0801a58d 	.word	0x0801a58d
 801a538:	0801a595 	.word	0x0801a595
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801a53c:	88fa      	ldrh	r2, [r7, #6]
 801a53e:	8a7b      	ldrh	r3, [r7, #18]
 801a540:	1ad3      	subs	r3, r2, r3
 801a542:	005b      	lsls	r3, r3, #1
 801a544:	697a      	ldr	r2, [r7, #20]
 801a546:	4413      	add	r3, r2
 801a548:	881b      	ldrh	r3, [r3, #0]
 801a54a:	80fb      	strh	r3, [r7, #6]
 801a54c:	e027      	b.n	801a59e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801a54e:	88fa      	ldrh	r2, [r7, #6]
 801a550:	8a7b      	ldrh	r3, [r7, #18]
 801a552:	1ad3      	subs	r3, r2, r3
 801a554:	b29b      	uxth	r3, r3
 801a556:	f003 0301 	and.w	r3, r3, #1
 801a55a:	b29b      	uxth	r3, r3
 801a55c:	88fa      	ldrh	r2, [r7, #6]
 801a55e:	1ad3      	subs	r3, r2, r3
 801a560:	80fb      	strh	r3, [r7, #6]
 801a562:	e01c      	b.n	801a59e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801a564:	88fb      	ldrh	r3, [r7, #6]
 801a566:	3b10      	subs	r3, #16
 801a568:	80fb      	strh	r3, [r7, #6]
 801a56a:	e018      	b.n	801a59e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801a56c:	88fb      	ldrh	r3, [r7, #6]
 801a56e:	3b20      	subs	r3, #32
 801a570:	80fb      	strh	r3, [r7, #6]
 801a572:	e014      	b.n	801a59e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801a574:	88fb      	ldrh	r3, [r7, #6]
 801a576:	3b30      	subs	r3, #48	; 0x30
 801a578:	80fb      	strh	r3, [r7, #6]
 801a57a:	e010      	b.n	801a59e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801a57c:	88fb      	ldrh	r3, [r7, #6]
 801a57e:	3b1a      	subs	r3, #26
 801a580:	80fb      	strh	r3, [r7, #6]
 801a582:	e00c      	b.n	801a59e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801a584:	88fb      	ldrh	r3, [r7, #6]
 801a586:	3308      	adds	r3, #8
 801a588:	80fb      	strh	r3, [r7, #6]
 801a58a:	e008      	b.n	801a59e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801a58c:	88fb      	ldrh	r3, [r7, #6]
 801a58e:	3b50      	subs	r3, #80	; 0x50
 801a590:	80fb      	strh	r3, [r7, #6]
 801a592:	e004      	b.n	801a59e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801a594:	88fb      	ldrh	r3, [r7, #6]
 801a596:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801a59a:	80fb      	strh	r3, [r7, #6]
 801a59c:	bf00      	nop
			}
			break;
 801a59e:	e008      	b.n	801a5b2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801a5a0:	89fb      	ldrh	r3, [r7, #14]
 801a5a2:	2b00      	cmp	r3, #0
 801a5a4:	d195      	bne.n	801a4d2 <ff_wtoupper+0x1a>
 801a5a6:	8a3b      	ldrh	r3, [r7, #16]
 801a5a8:	005b      	lsls	r3, r3, #1
 801a5aa:	697a      	ldr	r2, [r7, #20]
 801a5ac:	4413      	add	r3, r2
 801a5ae:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801a5b0:	e78f      	b.n	801a4d2 <ff_wtoupper+0x1a>
			break;
 801a5b2:	bf00      	nop
	}

	return chr;
 801a5b4:	88fb      	ldrh	r3, [r7, #6]
}
 801a5b6:	4618      	mov	r0, r3
 801a5b8:	371c      	adds	r7, #28
 801a5ba:	46bd      	mov	sp, r7
 801a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5c0:	4770      	bx	lr
 801a5c2:	bf00      	nop
 801a5c4:	08020324 	.word	0x08020324
 801a5c8:	08020518 	.word	0x08020518

0801a5cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801a5cc:	b580      	push	{r7, lr}
 801a5ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 801a5d0:	2201      	movs	r2, #1
 801a5d2:	4913      	ldr	r1, [pc, #76]	; (801a620 <MX_USB_DEVICE_Init+0x54>)
 801a5d4:	4813      	ldr	r0, [pc, #76]	; (801a624 <MX_USB_DEVICE_Init+0x58>)
 801a5d6:	f7fb fd1d 	bl	8016014 <USBD_Init>
 801a5da:	4603      	mov	r3, r0
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	d001      	beq.n	801a5e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801a5e0:	f7e8 fd1e 	bl	8003020 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 801a5e4:	4910      	ldr	r1, [pc, #64]	; (801a628 <MX_USB_DEVICE_Init+0x5c>)
 801a5e6:	480f      	ldr	r0, [pc, #60]	; (801a624 <MX_USB_DEVICE_Init+0x58>)
 801a5e8:	f7fb fd44 	bl	8016074 <USBD_RegisterClass>
 801a5ec:	4603      	mov	r3, r0
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	d001      	beq.n	801a5f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801a5f2:	f7e8 fd15 	bl	8003020 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801a5f6:	490d      	ldr	r1, [pc, #52]	; (801a62c <MX_USB_DEVICE_Init+0x60>)
 801a5f8:	480a      	ldr	r0, [pc, #40]	; (801a624 <MX_USB_DEVICE_Init+0x58>)
 801a5fa:	f7fb fc3b 	bl	8015e74 <USBD_CDC_RegisterInterface>
 801a5fe:	4603      	mov	r3, r0
 801a600:	2b00      	cmp	r3, #0
 801a602:	d001      	beq.n	801a608 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801a604:	f7e8 fd0c 	bl	8003020 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 801a608:	4806      	ldr	r0, [pc, #24]	; (801a624 <MX_USB_DEVICE_Init+0x58>)
 801a60a:	f7fb fd69 	bl	80160e0 <USBD_Start>
 801a60e:	4603      	mov	r3, r0
 801a610:	2b00      	cmp	r3, #0
 801a612:	d001      	beq.n	801a618 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801a614:	f7e8 fd04 	bl	8003020 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801a618:	f7f0 f994 	bl	800a944 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801a61c:	bf00      	nop
 801a61e:	bd80      	pop	{r7, pc}
 801a620:	240000b0 	.word	0x240000b0
 801a624:	240018dc 	.word	0x240018dc
 801a628:	2400001c 	.word	0x2400001c
 801a62c:	2400009c 	.word	0x2400009c

0801a630 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 801a630:	b580      	push	{r7, lr}
 801a632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 801a634:	2200      	movs	r2, #0
 801a636:	4905      	ldr	r1, [pc, #20]	; (801a64c <CDC_Init_HS+0x1c>)
 801a638:	4805      	ldr	r0, [pc, #20]	; (801a650 <CDC_Init_HS+0x20>)
 801a63a:	f7fb fc35 	bl	8015ea8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801a63e:	4905      	ldr	r1, [pc, #20]	; (801a654 <CDC_Init_HS+0x24>)
 801a640:	4803      	ldr	r0, [pc, #12]	; (801a650 <CDC_Init_HS+0x20>)
 801a642:	f7fb fc53 	bl	8015eec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801a646:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801a648:	4618      	mov	r0, r3
 801a64a:	bd80      	pop	{r7, pc}
 801a64c:	240023b8 	.word	0x240023b8
 801a650:	240018dc 	.word	0x240018dc
 801a654:	24001bb8 	.word	0x24001bb8

0801a658 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801a658:	b480      	push	{r7}
 801a65a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 801a65c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801a65e:	4618      	mov	r0, r3
 801a660:	46bd      	mov	sp, r7
 801a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a666:	4770      	bx	lr

0801a668 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801a668:	b480      	push	{r7}
 801a66a:	b083      	sub	sp, #12
 801a66c:	af00      	add	r7, sp, #0
 801a66e:	4603      	mov	r3, r0
 801a670:	6039      	str	r1, [r7, #0]
 801a672:	71fb      	strb	r3, [r7, #7]
 801a674:	4613      	mov	r3, r2
 801a676:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801a678:	79fb      	ldrb	r3, [r7, #7]
 801a67a:	2b23      	cmp	r3, #35	; 0x23
 801a67c:	d84a      	bhi.n	801a714 <CDC_Control_HS+0xac>
 801a67e:	a201      	add	r2, pc, #4	; (adr r2, 801a684 <CDC_Control_HS+0x1c>)
 801a680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a684:	0801a715 	.word	0x0801a715
 801a688:	0801a715 	.word	0x0801a715
 801a68c:	0801a715 	.word	0x0801a715
 801a690:	0801a715 	.word	0x0801a715
 801a694:	0801a715 	.word	0x0801a715
 801a698:	0801a715 	.word	0x0801a715
 801a69c:	0801a715 	.word	0x0801a715
 801a6a0:	0801a715 	.word	0x0801a715
 801a6a4:	0801a715 	.word	0x0801a715
 801a6a8:	0801a715 	.word	0x0801a715
 801a6ac:	0801a715 	.word	0x0801a715
 801a6b0:	0801a715 	.word	0x0801a715
 801a6b4:	0801a715 	.word	0x0801a715
 801a6b8:	0801a715 	.word	0x0801a715
 801a6bc:	0801a715 	.word	0x0801a715
 801a6c0:	0801a715 	.word	0x0801a715
 801a6c4:	0801a715 	.word	0x0801a715
 801a6c8:	0801a715 	.word	0x0801a715
 801a6cc:	0801a715 	.word	0x0801a715
 801a6d0:	0801a715 	.word	0x0801a715
 801a6d4:	0801a715 	.word	0x0801a715
 801a6d8:	0801a715 	.word	0x0801a715
 801a6dc:	0801a715 	.word	0x0801a715
 801a6e0:	0801a715 	.word	0x0801a715
 801a6e4:	0801a715 	.word	0x0801a715
 801a6e8:	0801a715 	.word	0x0801a715
 801a6ec:	0801a715 	.word	0x0801a715
 801a6f0:	0801a715 	.word	0x0801a715
 801a6f4:	0801a715 	.word	0x0801a715
 801a6f8:	0801a715 	.word	0x0801a715
 801a6fc:	0801a715 	.word	0x0801a715
 801a700:	0801a715 	.word	0x0801a715
 801a704:	0801a715 	.word	0x0801a715
 801a708:	0801a715 	.word	0x0801a715
 801a70c:	0801a715 	.word	0x0801a715
 801a710:	0801a715 	.word	0x0801a715
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 801a714:	bf00      	nop
  }

  return (USBD_OK);
 801a716:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801a718:	4618      	mov	r0, r3
 801a71a:	370c      	adds	r7, #12
 801a71c:	46bd      	mov	sp, r7
 801a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a722:	4770      	bx	lr

0801a724 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 801a724:	b580      	push	{r7, lr}
 801a726:	b082      	sub	sp, #8
 801a728:	af00      	add	r7, sp, #0
 801a72a:	6078      	str	r0, [r7, #4]
 801a72c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801a72e:	6879      	ldr	r1, [r7, #4]
 801a730:	4805      	ldr	r0, [pc, #20]	; (801a748 <CDC_Receive_HS+0x24>)
 801a732:	f7fb fbdb 	bl	8015eec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801a736:	4804      	ldr	r0, [pc, #16]	; (801a748 <CDC_Receive_HS+0x24>)
 801a738:	f7fb fc36 	bl	8015fa8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801a73c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801a73e:	4618      	mov	r0, r3
 801a740:	3708      	adds	r7, #8
 801a742:	46bd      	mov	sp, r7
 801a744:	bd80      	pop	{r7, pc}
 801a746:	bf00      	nop
 801a748:	240018dc 	.word	0x240018dc

0801a74c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 801a74c:	b580      	push	{r7, lr}
 801a74e:	b084      	sub	sp, #16
 801a750:	af00      	add	r7, sp, #0
 801a752:	6078      	str	r0, [r7, #4]
 801a754:	460b      	mov	r3, r1
 801a756:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801a758:	2300      	movs	r3, #0
 801a75a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 801a75c:	4b0d      	ldr	r3, [pc, #52]	; (801a794 <CDC_Transmit_HS+0x48>)
 801a75e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801a762:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801a764:	68bb      	ldr	r3, [r7, #8]
 801a766:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801a76a:	2b00      	cmp	r3, #0
 801a76c:	d001      	beq.n	801a772 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 801a76e:	2301      	movs	r3, #1
 801a770:	e00b      	b.n	801a78a <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 801a772:	887b      	ldrh	r3, [r7, #2]
 801a774:	461a      	mov	r2, r3
 801a776:	6879      	ldr	r1, [r7, #4]
 801a778:	4806      	ldr	r0, [pc, #24]	; (801a794 <CDC_Transmit_HS+0x48>)
 801a77a:	f7fb fb95 	bl	8015ea8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 801a77e:	4805      	ldr	r0, [pc, #20]	; (801a794 <CDC_Transmit_HS+0x48>)
 801a780:	f7fb fbd2 	bl	8015f28 <USBD_CDC_TransmitPacket>
 801a784:	4603      	mov	r3, r0
 801a786:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801a788:	7bfb      	ldrb	r3, [r7, #15]
}
 801a78a:	4618      	mov	r0, r3
 801a78c:	3710      	adds	r7, #16
 801a78e:	46bd      	mov	sp, r7
 801a790:	bd80      	pop	{r7, pc}
 801a792:	bf00      	nop
 801a794:	240018dc 	.word	0x240018dc

0801a798 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801a798:	b480      	push	{r7}
 801a79a:	b087      	sub	sp, #28
 801a79c:	af00      	add	r7, sp, #0
 801a79e:	60f8      	str	r0, [r7, #12]
 801a7a0:	60b9      	str	r1, [r7, #8]
 801a7a2:	4613      	mov	r3, r2
 801a7a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801a7a6:	2300      	movs	r3, #0
 801a7a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801a7aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a7ae:	4618      	mov	r0, r3
 801a7b0:	371c      	adds	r7, #28
 801a7b2:	46bd      	mov	sp, r7
 801a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7b8:	4770      	bx	lr
	...

0801a7bc <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a7bc:	b480      	push	{r7}
 801a7be:	b083      	sub	sp, #12
 801a7c0:	af00      	add	r7, sp, #0
 801a7c2:	4603      	mov	r3, r0
 801a7c4:	6039      	str	r1, [r7, #0]
 801a7c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801a7c8:	683b      	ldr	r3, [r7, #0]
 801a7ca:	2212      	movs	r2, #18
 801a7cc:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801a7ce:	4b03      	ldr	r3, [pc, #12]	; (801a7dc <USBD_HS_DeviceDescriptor+0x20>)
}
 801a7d0:	4618      	mov	r0, r3
 801a7d2:	370c      	adds	r7, #12
 801a7d4:	46bd      	mov	sp, r7
 801a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7da:	4770      	bx	lr
 801a7dc:	240000cc 	.word	0x240000cc

0801a7e0 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a7e0:	b480      	push	{r7}
 801a7e2:	b083      	sub	sp, #12
 801a7e4:	af00      	add	r7, sp, #0
 801a7e6:	4603      	mov	r3, r0
 801a7e8:	6039      	str	r1, [r7, #0]
 801a7ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801a7ec:	683b      	ldr	r3, [r7, #0]
 801a7ee:	2204      	movs	r2, #4
 801a7f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801a7f2:	4b03      	ldr	r3, [pc, #12]	; (801a800 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 801a7f4:	4618      	mov	r0, r3
 801a7f6:	370c      	adds	r7, #12
 801a7f8:	46bd      	mov	sp, r7
 801a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7fe:	4770      	bx	lr
 801a800:	240000e0 	.word	0x240000e0

0801a804 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a804:	b580      	push	{r7, lr}
 801a806:	b082      	sub	sp, #8
 801a808:	af00      	add	r7, sp, #0
 801a80a:	4603      	mov	r3, r0
 801a80c:	6039      	str	r1, [r7, #0]
 801a80e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a810:	79fb      	ldrb	r3, [r7, #7]
 801a812:	2b00      	cmp	r3, #0
 801a814:	d105      	bne.n	801a822 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801a816:	683a      	ldr	r2, [r7, #0]
 801a818:	4907      	ldr	r1, [pc, #28]	; (801a838 <USBD_HS_ProductStrDescriptor+0x34>)
 801a81a:	4808      	ldr	r0, [pc, #32]	; (801a83c <USBD_HS_ProductStrDescriptor+0x38>)
 801a81c:	f7fc fe12 	bl	8017444 <USBD_GetString>
 801a820:	e004      	b.n	801a82c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801a822:	683a      	ldr	r2, [r7, #0]
 801a824:	4904      	ldr	r1, [pc, #16]	; (801a838 <USBD_HS_ProductStrDescriptor+0x34>)
 801a826:	4805      	ldr	r0, [pc, #20]	; (801a83c <USBD_HS_ProductStrDescriptor+0x38>)
 801a828:	f7fc fe0c 	bl	8017444 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a82c:	4b02      	ldr	r3, [pc, #8]	; (801a838 <USBD_HS_ProductStrDescriptor+0x34>)
}
 801a82e:	4618      	mov	r0, r3
 801a830:	3708      	adds	r7, #8
 801a832:	46bd      	mov	sp, r7
 801a834:	bd80      	pop	{r7, pc}
 801a836:	bf00      	nop
 801a838:	24002bb8 	.word	0x24002bb8
 801a83c:	08020088 	.word	0x08020088

0801a840 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a840:	b580      	push	{r7, lr}
 801a842:	b082      	sub	sp, #8
 801a844:	af00      	add	r7, sp, #0
 801a846:	4603      	mov	r3, r0
 801a848:	6039      	str	r1, [r7, #0]
 801a84a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801a84c:	683a      	ldr	r2, [r7, #0]
 801a84e:	4904      	ldr	r1, [pc, #16]	; (801a860 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 801a850:	4804      	ldr	r0, [pc, #16]	; (801a864 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801a852:	f7fc fdf7 	bl	8017444 <USBD_GetString>
  return USBD_StrDesc;
 801a856:	4b02      	ldr	r3, [pc, #8]	; (801a860 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801a858:	4618      	mov	r0, r3
 801a85a:	3708      	adds	r7, #8
 801a85c:	46bd      	mov	sp, r7
 801a85e:	bd80      	pop	{r7, pc}
 801a860:	24002bb8 	.word	0x24002bb8
 801a864:	080200a4 	.word	0x080200a4

0801a868 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a868:	b580      	push	{r7, lr}
 801a86a:	b082      	sub	sp, #8
 801a86c:	af00      	add	r7, sp, #0
 801a86e:	4603      	mov	r3, r0
 801a870:	6039      	str	r1, [r7, #0]
 801a872:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801a874:	683b      	ldr	r3, [r7, #0]
 801a876:	221a      	movs	r2, #26
 801a878:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801a87a:	f000 f843 	bl	801a904 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801a87e:	4b02      	ldr	r3, [pc, #8]	; (801a888 <USBD_HS_SerialStrDescriptor+0x20>)
}
 801a880:	4618      	mov	r0, r3
 801a882:	3708      	adds	r7, #8
 801a884:	46bd      	mov	sp, r7
 801a886:	bd80      	pop	{r7, pc}
 801a888:	240000e4 	.word	0x240000e4

0801a88c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a88c:	b580      	push	{r7, lr}
 801a88e:	b082      	sub	sp, #8
 801a890:	af00      	add	r7, sp, #0
 801a892:	4603      	mov	r3, r0
 801a894:	6039      	str	r1, [r7, #0]
 801a896:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801a898:	79fb      	ldrb	r3, [r7, #7]
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	d105      	bne.n	801a8aa <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801a89e:	683a      	ldr	r2, [r7, #0]
 801a8a0:	4907      	ldr	r1, [pc, #28]	; (801a8c0 <USBD_HS_ConfigStrDescriptor+0x34>)
 801a8a2:	4808      	ldr	r0, [pc, #32]	; (801a8c4 <USBD_HS_ConfigStrDescriptor+0x38>)
 801a8a4:	f7fc fdce 	bl	8017444 <USBD_GetString>
 801a8a8:	e004      	b.n	801a8b4 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801a8aa:	683a      	ldr	r2, [r7, #0]
 801a8ac:	4904      	ldr	r1, [pc, #16]	; (801a8c0 <USBD_HS_ConfigStrDescriptor+0x34>)
 801a8ae:	4805      	ldr	r0, [pc, #20]	; (801a8c4 <USBD_HS_ConfigStrDescriptor+0x38>)
 801a8b0:	f7fc fdc8 	bl	8017444 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a8b4:	4b02      	ldr	r3, [pc, #8]	; (801a8c0 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801a8b6:	4618      	mov	r0, r3
 801a8b8:	3708      	adds	r7, #8
 801a8ba:	46bd      	mov	sp, r7
 801a8bc:	bd80      	pop	{r7, pc}
 801a8be:	bf00      	nop
 801a8c0:	24002bb8 	.word	0x24002bb8
 801a8c4:	080200a8 	.word	0x080200a8

0801a8c8 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a8c8:	b580      	push	{r7, lr}
 801a8ca:	b082      	sub	sp, #8
 801a8cc:	af00      	add	r7, sp, #0
 801a8ce:	4603      	mov	r3, r0
 801a8d0:	6039      	str	r1, [r7, #0]
 801a8d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a8d4:	79fb      	ldrb	r3, [r7, #7]
 801a8d6:	2b00      	cmp	r3, #0
 801a8d8:	d105      	bne.n	801a8e6 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801a8da:	683a      	ldr	r2, [r7, #0]
 801a8dc:	4907      	ldr	r1, [pc, #28]	; (801a8fc <USBD_HS_InterfaceStrDescriptor+0x34>)
 801a8de:	4808      	ldr	r0, [pc, #32]	; (801a900 <USBD_HS_InterfaceStrDescriptor+0x38>)
 801a8e0:	f7fc fdb0 	bl	8017444 <USBD_GetString>
 801a8e4:	e004      	b.n	801a8f0 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801a8e6:	683a      	ldr	r2, [r7, #0]
 801a8e8:	4904      	ldr	r1, [pc, #16]	; (801a8fc <USBD_HS_InterfaceStrDescriptor+0x34>)
 801a8ea:	4805      	ldr	r0, [pc, #20]	; (801a900 <USBD_HS_InterfaceStrDescriptor+0x38>)
 801a8ec:	f7fc fdaa 	bl	8017444 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a8f0:	4b02      	ldr	r3, [pc, #8]	; (801a8fc <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801a8f2:	4618      	mov	r0, r3
 801a8f4:	3708      	adds	r7, #8
 801a8f6:	46bd      	mov	sp, r7
 801a8f8:	bd80      	pop	{r7, pc}
 801a8fa:	bf00      	nop
 801a8fc:	24002bb8 	.word	0x24002bb8
 801a900:	080200b4 	.word	0x080200b4

0801a904 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801a904:	b580      	push	{r7, lr}
 801a906:	b084      	sub	sp, #16
 801a908:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801a90a:	4b0f      	ldr	r3, [pc, #60]	; (801a948 <Get_SerialNum+0x44>)
 801a90c:	681b      	ldr	r3, [r3, #0]
 801a90e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801a910:	4b0e      	ldr	r3, [pc, #56]	; (801a94c <Get_SerialNum+0x48>)
 801a912:	681b      	ldr	r3, [r3, #0]
 801a914:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801a916:	4b0e      	ldr	r3, [pc, #56]	; (801a950 <Get_SerialNum+0x4c>)
 801a918:	681b      	ldr	r3, [r3, #0]
 801a91a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801a91c:	68fa      	ldr	r2, [r7, #12]
 801a91e:	687b      	ldr	r3, [r7, #4]
 801a920:	4413      	add	r3, r2
 801a922:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801a924:	68fb      	ldr	r3, [r7, #12]
 801a926:	2b00      	cmp	r3, #0
 801a928:	d009      	beq.n	801a93e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801a92a:	2208      	movs	r2, #8
 801a92c:	4909      	ldr	r1, [pc, #36]	; (801a954 <Get_SerialNum+0x50>)
 801a92e:	68f8      	ldr	r0, [r7, #12]
 801a930:	f000 f814 	bl	801a95c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801a934:	2204      	movs	r2, #4
 801a936:	4908      	ldr	r1, [pc, #32]	; (801a958 <Get_SerialNum+0x54>)
 801a938:	68b8      	ldr	r0, [r7, #8]
 801a93a:	f000 f80f 	bl	801a95c <IntToUnicode>
  }
}
 801a93e:	bf00      	nop
 801a940:	3710      	adds	r7, #16
 801a942:	46bd      	mov	sp, r7
 801a944:	bd80      	pop	{r7, pc}
 801a946:	bf00      	nop
 801a948:	1ff1e800 	.word	0x1ff1e800
 801a94c:	1ff1e804 	.word	0x1ff1e804
 801a950:	1ff1e808 	.word	0x1ff1e808
 801a954:	240000e6 	.word	0x240000e6
 801a958:	240000f6 	.word	0x240000f6

0801a95c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801a95c:	b480      	push	{r7}
 801a95e:	b087      	sub	sp, #28
 801a960:	af00      	add	r7, sp, #0
 801a962:	60f8      	str	r0, [r7, #12]
 801a964:	60b9      	str	r1, [r7, #8]
 801a966:	4613      	mov	r3, r2
 801a968:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801a96a:	2300      	movs	r3, #0
 801a96c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801a96e:	2300      	movs	r3, #0
 801a970:	75fb      	strb	r3, [r7, #23]
 801a972:	e027      	b.n	801a9c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801a974:	68fb      	ldr	r3, [r7, #12]
 801a976:	0f1b      	lsrs	r3, r3, #28
 801a978:	2b09      	cmp	r3, #9
 801a97a:	d80b      	bhi.n	801a994 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801a97c:	68fb      	ldr	r3, [r7, #12]
 801a97e:	0f1b      	lsrs	r3, r3, #28
 801a980:	b2da      	uxtb	r2, r3
 801a982:	7dfb      	ldrb	r3, [r7, #23]
 801a984:	005b      	lsls	r3, r3, #1
 801a986:	4619      	mov	r1, r3
 801a988:	68bb      	ldr	r3, [r7, #8]
 801a98a:	440b      	add	r3, r1
 801a98c:	3230      	adds	r2, #48	; 0x30
 801a98e:	b2d2      	uxtb	r2, r2
 801a990:	701a      	strb	r2, [r3, #0]
 801a992:	e00a      	b.n	801a9aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801a994:	68fb      	ldr	r3, [r7, #12]
 801a996:	0f1b      	lsrs	r3, r3, #28
 801a998:	b2da      	uxtb	r2, r3
 801a99a:	7dfb      	ldrb	r3, [r7, #23]
 801a99c:	005b      	lsls	r3, r3, #1
 801a99e:	4619      	mov	r1, r3
 801a9a0:	68bb      	ldr	r3, [r7, #8]
 801a9a2:	440b      	add	r3, r1
 801a9a4:	3237      	adds	r2, #55	; 0x37
 801a9a6:	b2d2      	uxtb	r2, r2
 801a9a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801a9aa:	68fb      	ldr	r3, [r7, #12]
 801a9ac:	011b      	lsls	r3, r3, #4
 801a9ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801a9b0:	7dfb      	ldrb	r3, [r7, #23]
 801a9b2:	005b      	lsls	r3, r3, #1
 801a9b4:	3301      	adds	r3, #1
 801a9b6:	68ba      	ldr	r2, [r7, #8]
 801a9b8:	4413      	add	r3, r2
 801a9ba:	2200      	movs	r2, #0
 801a9bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801a9be:	7dfb      	ldrb	r3, [r7, #23]
 801a9c0:	3301      	adds	r3, #1
 801a9c2:	75fb      	strb	r3, [r7, #23]
 801a9c4:	7dfa      	ldrb	r2, [r7, #23]
 801a9c6:	79fb      	ldrb	r3, [r7, #7]
 801a9c8:	429a      	cmp	r2, r3
 801a9ca:	d3d3      	bcc.n	801a974 <IntToUnicode+0x18>
  }
}
 801a9cc:	bf00      	nop
 801a9ce:	bf00      	nop
 801a9d0:	371c      	adds	r7, #28
 801a9d2:	46bd      	mov	sp, r7
 801a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9d8:	4770      	bx	lr
	...

0801a9dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801a9dc:	b580      	push	{r7, lr}
 801a9de:	b0b2      	sub	sp, #200	; 0xc8
 801a9e0:	af00      	add	r7, sp, #0
 801a9e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801a9e4:	f107 0310 	add.w	r3, r7, #16
 801a9e8:	22b8      	movs	r2, #184	; 0xb8
 801a9ea:	2100      	movs	r1, #0
 801a9ec:	4618      	mov	r0, r3
 801a9ee:	f001 fa94 	bl	801bf1a <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	681b      	ldr	r3, [r3, #0]
 801a9f6:	4a1a      	ldr	r2, [pc, #104]	; (801aa60 <HAL_PCD_MspInit+0x84>)
 801a9f8:	4293      	cmp	r3, r2
 801a9fa:	d12c      	bne.n	801aa56 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801a9fc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801aa00:	f04f 0300 	mov.w	r3, #0
 801aa04:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801aa08:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 801aa0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801aa10:	f107 0310 	add.w	r3, r7, #16
 801aa14:	4618      	mov	r0, r3
 801aa16:	f7f0 ff75 	bl	800b904 <HAL_RCCEx_PeriphCLKConfig>
 801aa1a:	4603      	mov	r3, r0
 801aa1c:	2b00      	cmp	r3, #0
 801aa1e:	d001      	beq.n	801aa24 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 801aa20:	f7e8 fafe 	bl	8003020 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801aa24:	f7ef ff8e 	bl	800a944 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801aa28:	4b0e      	ldr	r3, [pc, #56]	; (801aa64 <HAL_PCD_MspInit+0x88>)
 801aa2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801aa2e:	4a0d      	ldr	r2, [pc, #52]	; (801aa64 <HAL_PCD_MspInit+0x88>)
 801aa30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801aa34:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801aa38:	4b0a      	ldr	r3, [pc, #40]	; (801aa64 <HAL_PCD_MspInit+0x88>)
 801aa3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801aa3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801aa42:	60fb      	str	r3, [r7, #12]
 801aa44:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801aa46:	2200      	movs	r2, #0
 801aa48:	2100      	movs	r1, #0
 801aa4a:	204d      	movs	r0, #77	; 0x4d
 801aa4c:	f7eb fcff 	bl	800644e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801aa50:	204d      	movs	r0, #77	; 0x4d
 801aa52:	f7eb fd16 	bl	8006482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801aa56:	bf00      	nop
 801aa58:	37c8      	adds	r7, #200	; 0xc8
 801aa5a:	46bd      	mov	sp, r7
 801aa5c:	bd80      	pop	{r7, pc}
 801aa5e:	bf00      	nop
 801aa60:	40040000 	.word	0x40040000
 801aa64:	58024400 	.word	0x58024400

0801aa68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aa68:	b580      	push	{r7, lr}
 801aa6a:	b082      	sub	sp, #8
 801aa6c:	af00      	add	r7, sp, #0
 801aa6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801aa76:	687b      	ldr	r3, [r7, #4]
 801aa78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801aa7c:	4619      	mov	r1, r3
 801aa7e:	4610      	mov	r0, r2
 801aa80:	f7fb fb7b 	bl	801617a <USBD_LL_SetupStage>
}
 801aa84:	bf00      	nop
 801aa86:	3708      	adds	r7, #8
 801aa88:	46bd      	mov	sp, r7
 801aa8a:	bd80      	pop	{r7, pc}

0801aa8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aa8c:	b580      	push	{r7, lr}
 801aa8e:	b082      	sub	sp, #8
 801aa90:	af00      	add	r7, sp, #0
 801aa92:	6078      	str	r0, [r7, #4]
 801aa94:	460b      	mov	r3, r1
 801aa96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801aa9e:	78fa      	ldrb	r2, [r7, #3]
 801aaa0:	6879      	ldr	r1, [r7, #4]
 801aaa2:	4613      	mov	r3, r2
 801aaa4:	00db      	lsls	r3, r3, #3
 801aaa6:	4413      	add	r3, r2
 801aaa8:	009b      	lsls	r3, r3, #2
 801aaaa:	440b      	add	r3, r1
 801aaac:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801aab0:	681a      	ldr	r2, [r3, #0]
 801aab2:	78fb      	ldrb	r3, [r7, #3]
 801aab4:	4619      	mov	r1, r3
 801aab6:	f7fb fbb5 	bl	8016224 <USBD_LL_DataOutStage>
}
 801aaba:	bf00      	nop
 801aabc:	3708      	adds	r7, #8
 801aabe:	46bd      	mov	sp, r7
 801aac0:	bd80      	pop	{r7, pc}

0801aac2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aac2:	b580      	push	{r7, lr}
 801aac4:	b082      	sub	sp, #8
 801aac6:	af00      	add	r7, sp, #0
 801aac8:	6078      	str	r0, [r7, #4]
 801aaca:	460b      	mov	r3, r1
 801aacc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801aad4:	78fa      	ldrb	r2, [r7, #3]
 801aad6:	6879      	ldr	r1, [r7, #4]
 801aad8:	4613      	mov	r3, r2
 801aada:	00db      	lsls	r3, r3, #3
 801aadc:	4413      	add	r3, r2
 801aade:	009b      	lsls	r3, r3, #2
 801aae0:	440b      	add	r3, r1
 801aae2:	3348      	adds	r3, #72	; 0x48
 801aae4:	681a      	ldr	r2, [r3, #0]
 801aae6:	78fb      	ldrb	r3, [r7, #3]
 801aae8:	4619      	mov	r1, r3
 801aaea:	f7fb fc4e 	bl	801638a <USBD_LL_DataInStage>
}
 801aaee:	bf00      	nop
 801aaf0:	3708      	adds	r7, #8
 801aaf2:	46bd      	mov	sp, r7
 801aaf4:	bd80      	pop	{r7, pc}

0801aaf6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aaf6:	b580      	push	{r7, lr}
 801aaf8:	b082      	sub	sp, #8
 801aafa:	af00      	add	r7, sp, #0
 801aafc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ab04:	4618      	mov	r0, r3
 801ab06:	f7fb fd88 	bl	801661a <USBD_LL_SOF>
}
 801ab0a:	bf00      	nop
 801ab0c:	3708      	adds	r7, #8
 801ab0e:	46bd      	mov	sp, r7
 801ab10:	bd80      	pop	{r7, pc}

0801ab12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ab12:	b580      	push	{r7, lr}
 801ab14:	b084      	sub	sp, #16
 801ab16:	af00      	add	r7, sp, #0
 801ab18:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801ab1a:	2301      	movs	r3, #1
 801ab1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801ab1e:	687b      	ldr	r3, [r7, #4]
 801ab20:	691b      	ldr	r3, [r3, #16]
 801ab22:	2b00      	cmp	r3, #0
 801ab24:	d102      	bne.n	801ab2c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801ab26:	2300      	movs	r3, #0
 801ab28:	73fb      	strb	r3, [r7, #15]
 801ab2a:	e008      	b.n	801ab3e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801ab2c:	687b      	ldr	r3, [r7, #4]
 801ab2e:	691b      	ldr	r3, [r3, #16]
 801ab30:	2b02      	cmp	r3, #2
 801ab32:	d102      	bne.n	801ab3a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801ab34:	2301      	movs	r3, #1
 801ab36:	73fb      	strb	r3, [r7, #15]
 801ab38:	e001      	b.n	801ab3e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801ab3a:	f7e8 fa71 	bl	8003020 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801ab3e:	687b      	ldr	r3, [r7, #4]
 801ab40:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ab44:	7bfa      	ldrb	r2, [r7, #15]
 801ab46:	4611      	mov	r1, r2
 801ab48:	4618      	mov	r0, r3
 801ab4a:	f7fb fd22 	bl	8016592 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ab54:	4618      	mov	r0, r3
 801ab56:	f7fb fcca 	bl	80164ee <USBD_LL_Reset>
}
 801ab5a:	bf00      	nop
 801ab5c:	3710      	adds	r7, #16
 801ab5e:	46bd      	mov	sp, r7
 801ab60:	bd80      	pop	{r7, pc}
	...

0801ab64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ab64:	b580      	push	{r7, lr}
 801ab66:	b082      	sub	sp, #8
 801ab68:	af00      	add	r7, sp, #0
 801ab6a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ab72:	4618      	mov	r0, r3
 801ab74:	f7fb fd1d 	bl	80165b2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	681b      	ldr	r3, [r3, #0]
 801ab7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801ab80:	681b      	ldr	r3, [r3, #0]
 801ab82:	687a      	ldr	r2, [r7, #4]
 801ab84:	6812      	ldr	r2, [r2, #0]
 801ab86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801ab8a:	f043 0301 	orr.w	r3, r3, #1
 801ab8e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801ab90:	687b      	ldr	r3, [r7, #4]
 801ab92:	6a1b      	ldr	r3, [r3, #32]
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	d005      	beq.n	801aba4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801ab98:	4b04      	ldr	r3, [pc, #16]	; (801abac <HAL_PCD_SuspendCallback+0x48>)
 801ab9a:	691b      	ldr	r3, [r3, #16]
 801ab9c:	4a03      	ldr	r2, [pc, #12]	; (801abac <HAL_PCD_SuspendCallback+0x48>)
 801ab9e:	f043 0306 	orr.w	r3, r3, #6
 801aba2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801aba4:	bf00      	nop
 801aba6:	3708      	adds	r7, #8
 801aba8:	46bd      	mov	sp, r7
 801abaa:	bd80      	pop	{r7, pc}
 801abac:	e000ed00 	.word	0xe000ed00

0801abb0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801abb0:	b580      	push	{r7, lr}
 801abb2:	b082      	sub	sp, #8
 801abb4:	af00      	add	r7, sp, #0
 801abb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801abbe:	4618      	mov	r0, r3
 801abc0:	f7fb fd13 	bl	80165ea <USBD_LL_Resume>
}
 801abc4:	bf00      	nop
 801abc6:	3708      	adds	r7, #8
 801abc8:	46bd      	mov	sp, r7
 801abca:	bd80      	pop	{r7, pc}

0801abcc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801abcc:	b580      	push	{r7, lr}
 801abce:	b082      	sub	sp, #8
 801abd0:	af00      	add	r7, sp, #0
 801abd2:	6078      	str	r0, [r7, #4]
 801abd4:	460b      	mov	r3, r1
 801abd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801abde:	78fa      	ldrb	r2, [r7, #3]
 801abe0:	4611      	mov	r1, r2
 801abe2:	4618      	mov	r0, r3
 801abe4:	f7fb fd6b 	bl	80166be <USBD_LL_IsoOUTIncomplete>
}
 801abe8:	bf00      	nop
 801abea:	3708      	adds	r7, #8
 801abec:	46bd      	mov	sp, r7
 801abee:	bd80      	pop	{r7, pc}

0801abf0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801abf0:	b580      	push	{r7, lr}
 801abf2:	b082      	sub	sp, #8
 801abf4:	af00      	add	r7, sp, #0
 801abf6:	6078      	str	r0, [r7, #4]
 801abf8:	460b      	mov	r3, r1
 801abfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801abfc:	687b      	ldr	r3, [r7, #4]
 801abfe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ac02:	78fa      	ldrb	r2, [r7, #3]
 801ac04:	4611      	mov	r1, r2
 801ac06:	4618      	mov	r0, r3
 801ac08:	f7fb fd27 	bl	801665a <USBD_LL_IsoINIncomplete>
}
 801ac0c:	bf00      	nop
 801ac0e:	3708      	adds	r7, #8
 801ac10:	46bd      	mov	sp, r7
 801ac12:	bd80      	pop	{r7, pc}

0801ac14 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ac14:	b580      	push	{r7, lr}
 801ac16:	b082      	sub	sp, #8
 801ac18:	af00      	add	r7, sp, #0
 801ac1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ac22:	4618      	mov	r0, r3
 801ac24:	f7fb fd7d 	bl	8016722 <USBD_LL_DevConnected>
}
 801ac28:	bf00      	nop
 801ac2a:	3708      	adds	r7, #8
 801ac2c:	46bd      	mov	sp, r7
 801ac2e:	bd80      	pop	{r7, pc}

0801ac30 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ac30:	b580      	push	{r7, lr}
 801ac32:	b082      	sub	sp, #8
 801ac34:	af00      	add	r7, sp, #0
 801ac36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ac3e:	4618      	mov	r0, r3
 801ac40:	f7fb fd7a 	bl	8016738 <USBD_LL_DevDisconnected>
}
 801ac44:	bf00      	nop
 801ac46:	3708      	adds	r7, #8
 801ac48:	46bd      	mov	sp, r7
 801ac4a:	bd80      	pop	{r7, pc}

0801ac4c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801ac4c:	b580      	push	{r7, lr}
 801ac4e:	b082      	sub	sp, #8
 801ac50:	af00      	add	r7, sp, #0
 801ac52:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 801ac54:	687b      	ldr	r3, [r7, #4]
 801ac56:	781b      	ldrb	r3, [r3, #0]
 801ac58:	2b01      	cmp	r3, #1
 801ac5a:	d140      	bne.n	801acde <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 801ac5c:	4a22      	ldr	r2, [pc, #136]	; (801ace8 <USBD_LL_Init+0x9c>)
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 801ac64:	687b      	ldr	r3, [r7, #4]
 801ac66:	4a20      	ldr	r2, [pc, #128]	; (801ace8 <USBD_LL_Init+0x9c>)
 801ac68:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801ac6c:	4b1e      	ldr	r3, [pc, #120]	; (801ace8 <USBD_LL_Init+0x9c>)
 801ac6e:	4a1f      	ldr	r2, [pc, #124]	; (801acec <USBD_LL_Init+0xa0>)
 801ac70:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 801ac72:	4b1d      	ldr	r3, [pc, #116]	; (801ace8 <USBD_LL_Init+0x9c>)
 801ac74:	2209      	movs	r2, #9
 801ac76:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801ac78:	4b1b      	ldr	r3, [pc, #108]	; (801ace8 <USBD_LL_Init+0x9c>)
 801ac7a:	2202      	movs	r2, #2
 801ac7c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801ac7e:	4b1a      	ldr	r3, [pc, #104]	; (801ace8 <USBD_LL_Init+0x9c>)
 801ac80:	2200      	movs	r2, #0
 801ac82:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 801ac84:	4b18      	ldr	r3, [pc, #96]	; (801ace8 <USBD_LL_Init+0x9c>)
 801ac86:	2202      	movs	r2, #2
 801ac88:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801ac8a:	4b17      	ldr	r3, [pc, #92]	; (801ace8 <USBD_LL_Init+0x9c>)
 801ac8c:	2200      	movs	r2, #0
 801ac8e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801ac90:	4b15      	ldr	r3, [pc, #84]	; (801ace8 <USBD_LL_Init+0x9c>)
 801ac92:	2200      	movs	r2, #0
 801ac94:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801ac96:	4b14      	ldr	r3, [pc, #80]	; (801ace8 <USBD_LL_Init+0x9c>)
 801ac98:	2200      	movs	r2, #0
 801ac9a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 801ac9c:	4b12      	ldr	r3, [pc, #72]	; (801ace8 <USBD_LL_Init+0x9c>)
 801ac9e:	2200      	movs	r2, #0
 801aca0:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801aca2:	4b11      	ldr	r3, [pc, #68]	; (801ace8 <USBD_LL_Init+0x9c>)
 801aca4:	2200      	movs	r2, #0
 801aca6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801aca8:	4b0f      	ldr	r3, [pc, #60]	; (801ace8 <USBD_LL_Init+0x9c>)
 801acaa:	2200      	movs	r2, #0
 801acac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801acae:	480e      	ldr	r0, [pc, #56]	; (801ace8 <USBD_LL_Init+0x9c>)
 801acb0:	f7ee fb55 	bl	800935e <HAL_PCD_Init>
 801acb4:	4603      	mov	r3, r0
 801acb6:	2b00      	cmp	r3, #0
 801acb8:	d001      	beq.n	801acbe <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801acba:	f7e8 f9b1 	bl	8003020 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801acbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 801acc2:	4809      	ldr	r0, [pc, #36]	; (801ace8 <USBD_LL_Init+0x9c>)
 801acc4:	f7ef fdc3 	bl	800a84e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801acc8:	2280      	movs	r2, #128	; 0x80
 801acca:	2100      	movs	r1, #0
 801accc:	4806      	ldr	r0, [pc, #24]	; (801ace8 <USBD_LL_Init+0x9c>)
 801acce:	f7ef fd77 	bl	800a7c0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801acd2:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801acd6:	2101      	movs	r1, #1
 801acd8:	4803      	ldr	r0, [pc, #12]	; (801ace8 <USBD_LL_Init+0x9c>)
 801acda:	f7ef fd71 	bl	800a7c0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 801acde:	2300      	movs	r3, #0
}
 801ace0:	4618      	mov	r0, r3
 801ace2:	3708      	adds	r7, #8
 801ace4:	46bd      	mov	sp, r7
 801ace6:	bd80      	pop	{r7, pc}
 801ace8:	24002db8 	.word	0x24002db8
 801acec:	40040000 	.word	0x40040000

0801acf0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801acf0:	b580      	push	{r7, lr}
 801acf2:	b084      	sub	sp, #16
 801acf4:	af00      	add	r7, sp, #0
 801acf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801acf8:	2300      	movs	r3, #0
 801acfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801acfc:	2300      	movs	r3, #0
 801acfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801ad00:	687b      	ldr	r3, [r7, #4]
 801ad02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ad06:	4618      	mov	r0, r3
 801ad08:	f7ee fc4d 	bl	80095a6 <HAL_PCD_Start>
 801ad0c:	4603      	mov	r3, r0
 801ad0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ad10:	7bfb      	ldrb	r3, [r7, #15]
 801ad12:	4618      	mov	r0, r3
 801ad14:	f000 f942 	bl	801af9c <USBD_Get_USB_Status>
 801ad18:	4603      	mov	r3, r0
 801ad1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ad1c:	7bbb      	ldrb	r3, [r7, #14]
}
 801ad1e:	4618      	mov	r0, r3
 801ad20:	3710      	adds	r7, #16
 801ad22:	46bd      	mov	sp, r7
 801ad24:	bd80      	pop	{r7, pc}

0801ad26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801ad26:	b580      	push	{r7, lr}
 801ad28:	b084      	sub	sp, #16
 801ad2a:	af00      	add	r7, sp, #0
 801ad2c:	6078      	str	r0, [r7, #4]
 801ad2e:	4608      	mov	r0, r1
 801ad30:	4611      	mov	r1, r2
 801ad32:	461a      	mov	r2, r3
 801ad34:	4603      	mov	r3, r0
 801ad36:	70fb      	strb	r3, [r7, #3]
 801ad38:	460b      	mov	r3, r1
 801ad3a:	70bb      	strb	r3, [r7, #2]
 801ad3c:	4613      	mov	r3, r2
 801ad3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ad40:	2300      	movs	r3, #0
 801ad42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ad44:	2300      	movs	r3, #0
 801ad46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801ad48:	687b      	ldr	r3, [r7, #4]
 801ad4a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801ad4e:	78bb      	ldrb	r3, [r7, #2]
 801ad50:	883a      	ldrh	r2, [r7, #0]
 801ad52:	78f9      	ldrb	r1, [r7, #3]
 801ad54:	f7ef f94d 	bl	8009ff2 <HAL_PCD_EP_Open>
 801ad58:	4603      	mov	r3, r0
 801ad5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ad5c:	7bfb      	ldrb	r3, [r7, #15]
 801ad5e:	4618      	mov	r0, r3
 801ad60:	f000 f91c 	bl	801af9c <USBD_Get_USB_Status>
 801ad64:	4603      	mov	r3, r0
 801ad66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ad68:	7bbb      	ldrb	r3, [r7, #14]
}
 801ad6a:	4618      	mov	r0, r3
 801ad6c:	3710      	adds	r7, #16
 801ad6e:	46bd      	mov	sp, r7
 801ad70:	bd80      	pop	{r7, pc}

0801ad72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ad72:	b580      	push	{r7, lr}
 801ad74:	b084      	sub	sp, #16
 801ad76:	af00      	add	r7, sp, #0
 801ad78:	6078      	str	r0, [r7, #4]
 801ad7a:	460b      	mov	r3, r1
 801ad7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ad7e:	2300      	movs	r3, #0
 801ad80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ad82:	2300      	movs	r3, #0
 801ad84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801ad86:	687b      	ldr	r3, [r7, #4]
 801ad88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ad8c:	78fa      	ldrb	r2, [r7, #3]
 801ad8e:	4611      	mov	r1, r2
 801ad90:	4618      	mov	r0, r3
 801ad92:	f7ef f996 	bl	800a0c2 <HAL_PCD_EP_Close>
 801ad96:	4603      	mov	r3, r0
 801ad98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ad9a:	7bfb      	ldrb	r3, [r7, #15]
 801ad9c:	4618      	mov	r0, r3
 801ad9e:	f000 f8fd 	bl	801af9c <USBD_Get_USB_Status>
 801ada2:	4603      	mov	r3, r0
 801ada4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ada6:	7bbb      	ldrb	r3, [r7, #14]
}
 801ada8:	4618      	mov	r0, r3
 801adaa:	3710      	adds	r7, #16
 801adac:	46bd      	mov	sp, r7
 801adae:	bd80      	pop	{r7, pc}

0801adb0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801adb0:	b580      	push	{r7, lr}
 801adb2:	b084      	sub	sp, #16
 801adb4:	af00      	add	r7, sp, #0
 801adb6:	6078      	str	r0, [r7, #4]
 801adb8:	460b      	mov	r3, r1
 801adba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801adbc:	2300      	movs	r3, #0
 801adbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801adc0:	2300      	movs	r3, #0
 801adc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801adc4:	687b      	ldr	r3, [r7, #4]
 801adc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801adca:	78fa      	ldrb	r2, [r7, #3]
 801adcc:	4611      	mov	r1, r2
 801adce:	4618      	mov	r0, r3
 801add0:	f7ef fa50 	bl	800a274 <HAL_PCD_EP_SetStall>
 801add4:	4603      	mov	r3, r0
 801add6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801add8:	7bfb      	ldrb	r3, [r7, #15]
 801adda:	4618      	mov	r0, r3
 801addc:	f000 f8de 	bl	801af9c <USBD_Get_USB_Status>
 801ade0:	4603      	mov	r3, r0
 801ade2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ade4:	7bbb      	ldrb	r3, [r7, #14]
}
 801ade6:	4618      	mov	r0, r3
 801ade8:	3710      	adds	r7, #16
 801adea:	46bd      	mov	sp, r7
 801adec:	bd80      	pop	{r7, pc}

0801adee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801adee:	b580      	push	{r7, lr}
 801adf0:	b084      	sub	sp, #16
 801adf2:	af00      	add	r7, sp, #0
 801adf4:	6078      	str	r0, [r7, #4]
 801adf6:	460b      	mov	r3, r1
 801adf8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801adfa:	2300      	movs	r3, #0
 801adfc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801adfe:	2300      	movs	r3, #0
 801ae00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801ae02:	687b      	ldr	r3, [r7, #4]
 801ae04:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ae08:	78fa      	ldrb	r2, [r7, #3]
 801ae0a:	4611      	mov	r1, r2
 801ae0c:	4618      	mov	r0, r3
 801ae0e:	f7ef fa95 	bl	800a33c <HAL_PCD_EP_ClrStall>
 801ae12:	4603      	mov	r3, r0
 801ae14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ae16:	7bfb      	ldrb	r3, [r7, #15]
 801ae18:	4618      	mov	r0, r3
 801ae1a:	f000 f8bf 	bl	801af9c <USBD_Get_USB_Status>
 801ae1e:	4603      	mov	r3, r0
 801ae20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ae22:	7bbb      	ldrb	r3, [r7, #14]
}
 801ae24:	4618      	mov	r0, r3
 801ae26:	3710      	adds	r7, #16
 801ae28:	46bd      	mov	sp, r7
 801ae2a:	bd80      	pop	{r7, pc}

0801ae2c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ae2c:	b480      	push	{r7}
 801ae2e:	b085      	sub	sp, #20
 801ae30:	af00      	add	r7, sp, #0
 801ae32:	6078      	str	r0, [r7, #4]
 801ae34:	460b      	mov	r3, r1
 801ae36:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ae3e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801ae40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ae44:	2b00      	cmp	r3, #0
 801ae46:	da0b      	bge.n	801ae60 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801ae48:	78fb      	ldrb	r3, [r7, #3]
 801ae4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ae4e:	68f9      	ldr	r1, [r7, #12]
 801ae50:	4613      	mov	r3, r2
 801ae52:	00db      	lsls	r3, r3, #3
 801ae54:	4413      	add	r3, r2
 801ae56:	009b      	lsls	r3, r3, #2
 801ae58:	440b      	add	r3, r1
 801ae5a:	333e      	adds	r3, #62	; 0x3e
 801ae5c:	781b      	ldrb	r3, [r3, #0]
 801ae5e:	e00b      	b.n	801ae78 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801ae60:	78fb      	ldrb	r3, [r7, #3]
 801ae62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ae66:	68f9      	ldr	r1, [r7, #12]
 801ae68:	4613      	mov	r3, r2
 801ae6a:	00db      	lsls	r3, r3, #3
 801ae6c:	4413      	add	r3, r2
 801ae6e:	009b      	lsls	r3, r3, #2
 801ae70:	440b      	add	r3, r1
 801ae72:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801ae76:	781b      	ldrb	r3, [r3, #0]
  }
}
 801ae78:	4618      	mov	r0, r3
 801ae7a:	3714      	adds	r7, #20
 801ae7c:	46bd      	mov	sp, r7
 801ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae82:	4770      	bx	lr

0801ae84 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801ae84:	b580      	push	{r7, lr}
 801ae86:	b084      	sub	sp, #16
 801ae88:	af00      	add	r7, sp, #0
 801ae8a:	6078      	str	r0, [r7, #4]
 801ae8c:	460b      	mov	r3, r1
 801ae8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ae90:	2300      	movs	r3, #0
 801ae92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ae94:	2300      	movs	r3, #0
 801ae96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ae9e:	78fa      	ldrb	r2, [r7, #3]
 801aea0:	4611      	mov	r1, r2
 801aea2:	4618      	mov	r0, r3
 801aea4:	f7ef f880 	bl	8009fa8 <HAL_PCD_SetAddress>
 801aea8:	4603      	mov	r3, r0
 801aeaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801aeac:	7bfb      	ldrb	r3, [r7, #15]
 801aeae:	4618      	mov	r0, r3
 801aeb0:	f000 f874 	bl	801af9c <USBD_Get_USB_Status>
 801aeb4:	4603      	mov	r3, r0
 801aeb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801aeb8:	7bbb      	ldrb	r3, [r7, #14]
}
 801aeba:	4618      	mov	r0, r3
 801aebc:	3710      	adds	r7, #16
 801aebe:	46bd      	mov	sp, r7
 801aec0:	bd80      	pop	{r7, pc}

0801aec2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801aec2:	b580      	push	{r7, lr}
 801aec4:	b086      	sub	sp, #24
 801aec6:	af00      	add	r7, sp, #0
 801aec8:	60f8      	str	r0, [r7, #12]
 801aeca:	607a      	str	r2, [r7, #4]
 801aecc:	603b      	str	r3, [r7, #0]
 801aece:	460b      	mov	r3, r1
 801aed0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aed2:	2300      	movs	r3, #0
 801aed4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aed6:	2300      	movs	r3, #0
 801aed8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801aeda:	68fb      	ldr	r3, [r7, #12]
 801aedc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801aee0:	7af9      	ldrb	r1, [r7, #11]
 801aee2:	683b      	ldr	r3, [r7, #0]
 801aee4:	687a      	ldr	r2, [r7, #4]
 801aee6:	f7ef f98a 	bl	800a1fe <HAL_PCD_EP_Transmit>
 801aeea:	4603      	mov	r3, r0
 801aeec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801aeee:	7dfb      	ldrb	r3, [r7, #23]
 801aef0:	4618      	mov	r0, r3
 801aef2:	f000 f853 	bl	801af9c <USBD_Get_USB_Status>
 801aef6:	4603      	mov	r3, r0
 801aef8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801aefa:	7dbb      	ldrb	r3, [r7, #22]
}
 801aefc:	4618      	mov	r0, r3
 801aefe:	3718      	adds	r7, #24
 801af00:	46bd      	mov	sp, r7
 801af02:	bd80      	pop	{r7, pc}

0801af04 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801af04:	b580      	push	{r7, lr}
 801af06:	b086      	sub	sp, #24
 801af08:	af00      	add	r7, sp, #0
 801af0a:	60f8      	str	r0, [r7, #12]
 801af0c:	607a      	str	r2, [r7, #4]
 801af0e:	603b      	str	r3, [r7, #0]
 801af10:	460b      	mov	r3, r1
 801af12:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801af14:	2300      	movs	r3, #0
 801af16:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801af18:	2300      	movs	r3, #0
 801af1a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801af1c:	68fb      	ldr	r3, [r7, #12]
 801af1e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801af22:	7af9      	ldrb	r1, [r7, #11]
 801af24:	683b      	ldr	r3, [r7, #0]
 801af26:	687a      	ldr	r2, [r7, #4]
 801af28:	f7ef f915 	bl	800a156 <HAL_PCD_EP_Receive>
 801af2c:	4603      	mov	r3, r0
 801af2e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801af30:	7dfb      	ldrb	r3, [r7, #23]
 801af32:	4618      	mov	r0, r3
 801af34:	f000 f832 	bl	801af9c <USBD_Get_USB_Status>
 801af38:	4603      	mov	r3, r0
 801af3a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801af3c:	7dbb      	ldrb	r3, [r7, #22]
}
 801af3e:	4618      	mov	r0, r3
 801af40:	3718      	adds	r7, #24
 801af42:	46bd      	mov	sp, r7
 801af44:	bd80      	pop	{r7, pc}

0801af46 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801af46:	b580      	push	{r7, lr}
 801af48:	b082      	sub	sp, #8
 801af4a:	af00      	add	r7, sp, #0
 801af4c:	6078      	str	r0, [r7, #4]
 801af4e:	460b      	mov	r3, r1
 801af50:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801af52:	687b      	ldr	r3, [r7, #4]
 801af54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801af58:	78fa      	ldrb	r2, [r7, #3]
 801af5a:	4611      	mov	r1, r2
 801af5c:	4618      	mov	r0, r3
 801af5e:	f7ef f936 	bl	800a1ce <HAL_PCD_EP_GetRxCount>
 801af62:	4603      	mov	r3, r0
}
 801af64:	4618      	mov	r0, r3
 801af66:	3708      	adds	r7, #8
 801af68:	46bd      	mov	sp, r7
 801af6a:	bd80      	pop	{r7, pc}

0801af6c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801af6c:	b480      	push	{r7}
 801af6e:	b083      	sub	sp, #12
 801af70:	af00      	add	r7, sp, #0
 801af72:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801af74:	4b03      	ldr	r3, [pc, #12]	; (801af84 <USBD_static_malloc+0x18>)
}
 801af76:	4618      	mov	r0, r3
 801af78:	370c      	adds	r7, #12
 801af7a:	46bd      	mov	sp, r7
 801af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af80:	4770      	bx	lr
 801af82:	bf00      	nop
 801af84:	240032c4 	.word	0x240032c4

0801af88 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801af88:	b480      	push	{r7}
 801af8a:	b083      	sub	sp, #12
 801af8c:	af00      	add	r7, sp, #0
 801af8e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801af90:	bf00      	nop
 801af92:	370c      	adds	r7, #12
 801af94:	46bd      	mov	sp, r7
 801af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af9a:	4770      	bx	lr

0801af9c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801af9c:	b480      	push	{r7}
 801af9e:	b085      	sub	sp, #20
 801afa0:	af00      	add	r7, sp, #0
 801afa2:	4603      	mov	r3, r0
 801afa4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801afa6:	2300      	movs	r3, #0
 801afa8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801afaa:	79fb      	ldrb	r3, [r7, #7]
 801afac:	2b03      	cmp	r3, #3
 801afae:	d817      	bhi.n	801afe0 <USBD_Get_USB_Status+0x44>
 801afb0:	a201      	add	r2, pc, #4	; (adr r2, 801afb8 <USBD_Get_USB_Status+0x1c>)
 801afb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801afb6:	bf00      	nop
 801afb8:	0801afc9 	.word	0x0801afc9
 801afbc:	0801afcf 	.word	0x0801afcf
 801afc0:	0801afd5 	.word	0x0801afd5
 801afc4:	0801afdb 	.word	0x0801afdb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801afc8:	2300      	movs	r3, #0
 801afca:	73fb      	strb	r3, [r7, #15]
    break;
 801afcc:	e00b      	b.n	801afe6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801afce:	2303      	movs	r3, #3
 801afd0:	73fb      	strb	r3, [r7, #15]
    break;
 801afd2:	e008      	b.n	801afe6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801afd4:	2301      	movs	r3, #1
 801afd6:	73fb      	strb	r3, [r7, #15]
    break;
 801afd8:	e005      	b.n	801afe6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801afda:	2303      	movs	r3, #3
 801afdc:	73fb      	strb	r3, [r7, #15]
    break;
 801afde:	e002      	b.n	801afe6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801afe0:	2303      	movs	r3, #3
 801afe2:	73fb      	strb	r3, [r7, #15]
    break;
 801afe4:	bf00      	nop
  }
  return usb_status;
 801afe6:	7bfb      	ldrb	r3, [r7, #15]
}
 801afe8:	4618      	mov	r0, r3
 801afea:	3714      	adds	r7, #20
 801afec:	46bd      	mov	sp, r7
 801afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aff2:	4770      	bx	lr

0801aff4 <__cvt>:
 801aff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aff6:	ed2d 8b02 	vpush	{d8}
 801affa:	eeb0 8b40 	vmov.f64	d8, d0
 801affe:	b085      	sub	sp, #20
 801b000:	4617      	mov	r7, r2
 801b002:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801b004:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801b006:	ee18 2a90 	vmov	r2, s17
 801b00a:	f025 0520 	bic.w	r5, r5, #32
 801b00e:	2a00      	cmp	r2, #0
 801b010:	bfb6      	itet	lt
 801b012:	222d      	movlt	r2, #45	; 0x2d
 801b014:	2200      	movge	r2, #0
 801b016:	eeb1 8b40 	vneglt.f64	d8, d0
 801b01a:	2d46      	cmp	r5, #70	; 0x46
 801b01c:	460c      	mov	r4, r1
 801b01e:	701a      	strb	r2, [r3, #0]
 801b020:	d004      	beq.n	801b02c <__cvt+0x38>
 801b022:	2d45      	cmp	r5, #69	; 0x45
 801b024:	d100      	bne.n	801b028 <__cvt+0x34>
 801b026:	3401      	adds	r4, #1
 801b028:	2102      	movs	r1, #2
 801b02a:	e000      	b.n	801b02e <__cvt+0x3a>
 801b02c:	2103      	movs	r1, #3
 801b02e:	ab03      	add	r3, sp, #12
 801b030:	9301      	str	r3, [sp, #4]
 801b032:	ab02      	add	r3, sp, #8
 801b034:	9300      	str	r3, [sp, #0]
 801b036:	4622      	mov	r2, r4
 801b038:	4633      	mov	r3, r6
 801b03a:	eeb0 0b48 	vmov.f64	d0, d8
 801b03e:	f001 f893 	bl	801c168 <_dtoa_r>
 801b042:	2d47      	cmp	r5, #71	; 0x47
 801b044:	d101      	bne.n	801b04a <__cvt+0x56>
 801b046:	07fb      	lsls	r3, r7, #31
 801b048:	d51a      	bpl.n	801b080 <__cvt+0x8c>
 801b04a:	2d46      	cmp	r5, #70	; 0x46
 801b04c:	eb00 0204 	add.w	r2, r0, r4
 801b050:	d10c      	bne.n	801b06c <__cvt+0x78>
 801b052:	7803      	ldrb	r3, [r0, #0]
 801b054:	2b30      	cmp	r3, #48	; 0x30
 801b056:	d107      	bne.n	801b068 <__cvt+0x74>
 801b058:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b05c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b060:	bf1c      	itt	ne
 801b062:	f1c4 0401 	rsbne	r4, r4, #1
 801b066:	6034      	strne	r4, [r6, #0]
 801b068:	6833      	ldr	r3, [r6, #0]
 801b06a:	441a      	add	r2, r3
 801b06c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b074:	bf08      	it	eq
 801b076:	9203      	streq	r2, [sp, #12]
 801b078:	2130      	movs	r1, #48	; 0x30
 801b07a:	9b03      	ldr	r3, [sp, #12]
 801b07c:	4293      	cmp	r3, r2
 801b07e:	d307      	bcc.n	801b090 <__cvt+0x9c>
 801b080:	9b03      	ldr	r3, [sp, #12]
 801b082:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b084:	1a1b      	subs	r3, r3, r0
 801b086:	6013      	str	r3, [r2, #0]
 801b088:	b005      	add	sp, #20
 801b08a:	ecbd 8b02 	vpop	{d8}
 801b08e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b090:	1c5c      	adds	r4, r3, #1
 801b092:	9403      	str	r4, [sp, #12]
 801b094:	7019      	strb	r1, [r3, #0]
 801b096:	e7f0      	b.n	801b07a <__cvt+0x86>

0801b098 <__exponent>:
 801b098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b09a:	4603      	mov	r3, r0
 801b09c:	2900      	cmp	r1, #0
 801b09e:	bfb8      	it	lt
 801b0a0:	4249      	neglt	r1, r1
 801b0a2:	f803 2b02 	strb.w	r2, [r3], #2
 801b0a6:	bfb4      	ite	lt
 801b0a8:	222d      	movlt	r2, #45	; 0x2d
 801b0aa:	222b      	movge	r2, #43	; 0x2b
 801b0ac:	2909      	cmp	r1, #9
 801b0ae:	7042      	strb	r2, [r0, #1]
 801b0b0:	dd2a      	ble.n	801b108 <__exponent+0x70>
 801b0b2:	f10d 0207 	add.w	r2, sp, #7
 801b0b6:	4617      	mov	r7, r2
 801b0b8:	260a      	movs	r6, #10
 801b0ba:	4694      	mov	ip, r2
 801b0bc:	fb91 f5f6 	sdiv	r5, r1, r6
 801b0c0:	fb06 1415 	mls	r4, r6, r5, r1
 801b0c4:	3430      	adds	r4, #48	; 0x30
 801b0c6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801b0ca:	460c      	mov	r4, r1
 801b0cc:	2c63      	cmp	r4, #99	; 0x63
 801b0ce:	f102 32ff 	add.w	r2, r2, #4294967295
 801b0d2:	4629      	mov	r1, r5
 801b0d4:	dcf1      	bgt.n	801b0ba <__exponent+0x22>
 801b0d6:	3130      	adds	r1, #48	; 0x30
 801b0d8:	f1ac 0402 	sub.w	r4, ip, #2
 801b0dc:	f802 1c01 	strb.w	r1, [r2, #-1]
 801b0e0:	1c41      	adds	r1, r0, #1
 801b0e2:	4622      	mov	r2, r4
 801b0e4:	42ba      	cmp	r2, r7
 801b0e6:	d30a      	bcc.n	801b0fe <__exponent+0x66>
 801b0e8:	f10d 0209 	add.w	r2, sp, #9
 801b0ec:	eba2 020c 	sub.w	r2, r2, ip
 801b0f0:	42bc      	cmp	r4, r7
 801b0f2:	bf88      	it	hi
 801b0f4:	2200      	movhi	r2, #0
 801b0f6:	4413      	add	r3, r2
 801b0f8:	1a18      	subs	r0, r3, r0
 801b0fa:	b003      	add	sp, #12
 801b0fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b0fe:	f812 5b01 	ldrb.w	r5, [r2], #1
 801b102:	f801 5f01 	strb.w	r5, [r1, #1]!
 801b106:	e7ed      	b.n	801b0e4 <__exponent+0x4c>
 801b108:	2330      	movs	r3, #48	; 0x30
 801b10a:	3130      	adds	r1, #48	; 0x30
 801b10c:	7083      	strb	r3, [r0, #2]
 801b10e:	70c1      	strb	r1, [r0, #3]
 801b110:	1d03      	adds	r3, r0, #4
 801b112:	e7f1      	b.n	801b0f8 <__exponent+0x60>
 801b114:	0000      	movs	r0, r0
	...

0801b118 <_printf_float>:
 801b118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b11c:	b08b      	sub	sp, #44	; 0x2c
 801b11e:	460c      	mov	r4, r1
 801b120:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801b124:	4616      	mov	r6, r2
 801b126:	461f      	mov	r7, r3
 801b128:	4605      	mov	r5, r0
 801b12a:	f000 feff 	bl	801bf2c <_localeconv_r>
 801b12e:	f8d0 b000 	ldr.w	fp, [r0]
 801b132:	4658      	mov	r0, fp
 801b134:	f7e5 f94c 	bl	80003d0 <strlen>
 801b138:	2300      	movs	r3, #0
 801b13a:	9308      	str	r3, [sp, #32]
 801b13c:	f8d8 3000 	ldr.w	r3, [r8]
 801b140:	f894 9018 	ldrb.w	r9, [r4, #24]
 801b144:	6822      	ldr	r2, [r4, #0]
 801b146:	3307      	adds	r3, #7
 801b148:	f023 0307 	bic.w	r3, r3, #7
 801b14c:	f103 0108 	add.w	r1, r3, #8
 801b150:	f8c8 1000 	str.w	r1, [r8]
 801b154:	ed93 0b00 	vldr	d0, [r3]
 801b158:	ed9f 6b97 	vldr	d6, [pc, #604]	; 801b3b8 <_printf_float+0x2a0>
 801b15c:	eeb0 7bc0 	vabs.f64	d7, d0
 801b160:	eeb4 7b46 	vcmp.f64	d7, d6
 801b164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b168:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801b16c:	4682      	mov	sl, r0
 801b16e:	dd24      	ble.n	801b1ba <_printf_float+0xa2>
 801b170:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801b174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b178:	d502      	bpl.n	801b180 <_printf_float+0x68>
 801b17a:	232d      	movs	r3, #45	; 0x2d
 801b17c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b180:	498f      	ldr	r1, [pc, #572]	; (801b3c0 <_printf_float+0x2a8>)
 801b182:	4b90      	ldr	r3, [pc, #576]	; (801b3c4 <_printf_float+0x2ac>)
 801b184:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801b188:	bf94      	ite	ls
 801b18a:	4688      	movls	r8, r1
 801b18c:	4698      	movhi	r8, r3
 801b18e:	2303      	movs	r3, #3
 801b190:	6123      	str	r3, [r4, #16]
 801b192:	f022 0204 	bic.w	r2, r2, #4
 801b196:	2300      	movs	r3, #0
 801b198:	6022      	str	r2, [r4, #0]
 801b19a:	9304      	str	r3, [sp, #16]
 801b19c:	9700      	str	r7, [sp, #0]
 801b19e:	4633      	mov	r3, r6
 801b1a0:	aa09      	add	r2, sp, #36	; 0x24
 801b1a2:	4621      	mov	r1, r4
 801b1a4:	4628      	mov	r0, r5
 801b1a6:	f000 f9d1 	bl	801b54c <_printf_common>
 801b1aa:	3001      	adds	r0, #1
 801b1ac:	f040 808a 	bne.w	801b2c4 <_printf_float+0x1ac>
 801b1b0:	f04f 30ff 	mov.w	r0, #4294967295
 801b1b4:	b00b      	add	sp, #44	; 0x2c
 801b1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1ba:	eeb4 0b40 	vcmp.f64	d0, d0
 801b1be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b1c2:	d709      	bvc.n	801b1d8 <_printf_float+0xc0>
 801b1c4:	ee10 3a90 	vmov	r3, s1
 801b1c8:	2b00      	cmp	r3, #0
 801b1ca:	bfbc      	itt	lt
 801b1cc:	232d      	movlt	r3, #45	; 0x2d
 801b1ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801b1d2:	497d      	ldr	r1, [pc, #500]	; (801b3c8 <_printf_float+0x2b0>)
 801b1d4:	4b7d      	ldr	r3, [pc, #500]	; (801b3cc <_printf_float+0x2b4>)
 801b1d6:	e7d5      	b.n	801b184 <_printf_float+0x6c>
 801b1d8:	6863      	ldr	r3, [r4, #4]
 801b1da:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801b1de:	9104      	str	r1, [sp, #16]
 801b1e0:	1c59      	adds	r1, r3, #1
 801b1e2:	d13c      	bne.n	801b25e <_printf_float+0x146>
 801b1e4:	2306      	movs	r3, #6
 801b1e6:	6063      	str	r3, [r4, #4]
 801b1e8:	2300      	movs	r3, #0
 801b1ea:	9303      	str	r3, [sp, #12]
 801b1ec:	ab08      	add	r3, sp, #32
 801b1ee:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801b1f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801b1f6:	ab07      	add	r3, sp, #28
 801b1f8:	6861      	ldr	r1, [r4, #4]
 801b1fa:	9300      	str	r3, [sp, #0]
 801b1fc:	6022      	str	r2, [r4, #0]
 801b1fe:	f10d 031b 	add.w	r3, sp, #27
 801b202:	4628      	mov	r0, r5
 801b204:	f7ff fef6 	bl	801aff4 <__cvt>
 801b208:	9b04      	ldr	r3, [sp, #16]
 801b20a:	9907      	ldr	r1, [sp, #28]
 801b20c:	2b47      	cmp	r3, #71	; 0x47
 801b20e:	4680      	mov	r8, r0
 801b210:	d108      	bne.n	801b224 <_printf_float+0x10c>
 801b212:	1cc8      	adds	r0, r1, #3
 801b214:	db02      	blt.n	801b21c <_printf_float+0x104>
 801b216:	6863      	ldr	r3, [r4, #4]
 801b218:	4299      	cmp	r1, r3
 801b21a:	dd41      	ble.n	801b2a0 <_printf_float+0x188>
 801b21c:	f1a9 0902 	sub.w	r9, r9, #2
 801b220:	fa5f f989 	uxtb.w	r9, r9
 801b224:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801b228:	d820      	bhi.n	801b26c <_printf_float+0x154>
 801b22a:	3901      	subs	r1, #1
 801b22c:	464a      	mov	r2, r9
 801b22e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801b232:	9107      	str	r1, [sp, #28]
 801b234:	f7ff ff30 	bl	801b098 <__exponent>
 801b238:	9a08      	ldr	r2, [sp, #32]
 801b23a:	9004      	str	r0, [sp, #16]
 801b23c:	1813      	adds	r3, r2, r0
 801b23e:	2a01      	cmp	r2, #1
 801b240:	6123      	str	r3, [r4, #16]
 801b242:	dc02      	bgt.n	801b24a <_printf_float+0x132>
 801b244:	6822      	ldr	r2, [r4, #0]
 801b246:	07d2      	lsls	r2, r2, #31
 801b248:	d501      	bpl.n	801b24e <_printf_float+0x136>
 801b24a:	3301      	adds	r3, #1
 801b24c:	6123      	str	r3, [r4, #16]
 801b24e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801b252:	2b00      	cmp	r3, #0
 801b254:	d0a2      	beq.n	801b19c <_printf_float+0x84>
 801b256:	232d      	movs	r3, #45	; 0x2d
 801b258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b25c:	e79e      	b.n	801b19c <_printf_float+0x84>
 801b25e:	9904      	ldr	r1, [sp, #16]
 801b260:	2947      	cmp	r1, #71	; 0x47
 801b262:	d1c1      	bne.n	801b1e8 <_printf_float+0xd0>
 801b264:	2b00      	cmp	r3, #0
 801b266:	d1bf      	bne.n	801b1e8 <_printf_float+0xd0>
 801b268:	2301      	movs	r3, #1
 801b26a:	e7bc      	b.n	801b1e6 <_printf_float+0xce>
 801b26c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801b270:	d118      	bne.n	801b2a4 <_printf_float+0x18c>
 801b272:	2900      	cmp	r1, #0
 801b274:	6863      	ldr	r3, [r4, #4]
 801b276:	dd0b      	ble.n	801b290 <_printf_float+0x178>
 801b278:	6121      	str	r1, [r4, #16]
 801b27a:	b913      	cbnz	r3, 801b282 <_printf_float+0x16a>
 801b27c:	6822      	ldr	r2, [r4, #0]
 801b27e:	07d0      	lsls	r0, r2, #31
 801b280:	d502      	bpl.n	801b288 <_printf_float+0x170>
 801b282:	3301      	adds	r3, #1
 801b284:	440b      	add	r3, r1
 801b286:	6123      	str	r3, [r4, #16]
 801b288:	2300      	movs	r3, #0
 801b28a:	65a1      	str	r1, [r4, #88]	; 0x58
 801b28c:	9304      	str	r3, [sp, #16]
 801b28e:	e7de      	b.n	801b24e <_printf_float+0x136>
 801b290:	b913      	cbnz	r3, 801b298 <_printf_float+0x180>
 801b292:	6822      	ldr	r2, [r4, #0]
 801b294:	07d2      	lsls	r2, r2, #31
 801b296:	d501      	bpl.n	801b29c <_printf_float+0x184>
 801b298:	3302      	adds	r3, #2
 801b29a:	e7f4      	b.n	801b286 <_printf_float+0x16e>
 801b29c:	2301      	movs	r3, #1
 801b29e:	e7f2      	b.n	801b286 <_printf_float+0x16e>
 801b2a0:	f04f 0967 	mov.w	r9, #103	; 0x67
 801b2a4:	9b08      	ldr	r3, [sp, #32]
 801b2a6:	4299      	cmp	r1, r3
 801b2a8:	db05      	blt.n	801b2b6 <_printf_float+0x19e>
 801b2aa:	6823      	ldr	r3, [r4, #0]
 801b2ac:	6121      	str	r1, [r4, #16]
 801b2ae:	07d8      	lsls	r0, r3, #31
 801b2b0:	d5ea      	bpl.n	801b288 <_printf_float+0x170>
 801b2b2:	1c4b      	adds	r3, r1, #1
 801b2b4:	e7e7      	b.n	801b286 <_printf_float+0x16e>
 801b2b6:	2900      	cmp	r1, #0
 801b2b8:	bfd4      	ite	le
 801b2ba:	f1c1 0202 	rsble	r2, r1, #2
 801b2be:	2201      	movgt	r2, #1
 801b2c0:	4413      	add	r3, r2
 801b2c2:	e7e0      	b.n	801b286 <_printf_float+0x16e>
 801b2c4:	6823      	ldr	r3, [r4, #0]
 801b2c6:	055a      	lsls	r2, r3, #21
 801b2c8:	d407      	bmi.n	801b2da <_printf_float+0x1c2>
 801b2ca:	6923      	ldr	r3, [r4, #16]
 801b2cc:	4642      	mov	r2, r8
 801b2ce:	4631      	mov	r1, r6
 801b2d0:	4628      	mov	r0, r5
 801b2d2:	47b8      	blx	r7
 801b2d4:	3001      	adds	r0, #1
 801b2d6:	d12a      	bne.n	801b32e <_printf_float+0x216>
 801b2d8:	e76a      	b.n	801b1b0 <_printf_float+0x98>
 801b2da:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801b2de:	f240 80e0 	bls.w	801b4a2 <_printf_float+0x38a>
 801b2e2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801b2e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b2ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2ee:	d133      	bne.n	801b358 <_printf_float+0x240>
 801b2f0:	4a37      	ldr	r2, [pc, #220]	; (801b3d0 <_printf_float+0x2b8>)
 801b2f2:	2301      	movs	r3, #1
 801b2f4:	4631      	mov	r1, r6
 801b2f6:	4628      	mov	r0, r5
 801b2f8:	47b8      	blx	r7
 801b2fa:	3001      	adds	r0, #1
 801b2fc:	f43f af58 	beq.w	801b1b0 <_printf_float+0x98>
 801b300:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b304:	429a      	cmp	r2, r3
 801b306:	db02      	blt.n	801b30e <_printf_float+0x1f6>
 801b308:	6823      	ldr	r3, [r4, #0]
 801b30a:	07d8      	lsls	r0, r3, #31
 801b30c:	d50f      	bpl.n	801b32e <_printf_float+0x216>
 801b30e:	4653      	mov	r3, sl
 801b310:	465a      	mov	r2, fp
 801b312:	4631      	mov	r1, r6
 801b314:	4628      	mov	r0, r5
 801b316:	47b8      	blx	r7
 801b318:	3001      	adds	r0, #1
 801b31a:	f43f af49 	beq.w	801b1b0 <_printf_float+0x98>
 801b31e:	f04f 0800 	mov.w	r8, #0
 801b322:	f104 091a 	add.w	r9, r4, #26
 801b326:	9b08      	ldr	r3, [sp, #32]
 801b328:	3b01      	subs	r3, #1
 801b32a:	4543      	cmp	r3, r8
 801b32c:	dc09      	bgt.n	801b342 <_printf_float+0x22a>
 801b32e:	6823      	ldr	r3, [r4, #0]
 801b330:	079b      	lsls	r3, r3, #30
 801b332:	f100 8106 	bmi.w	801b542 <_printf_float+0x42a>
 801b336:	68e0      	ldr	r0, [r4, #12]
 801b338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b33a:	4298      	cmp	r0, r3
 801b33c:	bfb8      	it	lt
 801b33e:	4618      	movlt	r0, r3
 801b340:	e738      	b.n	801b1b4 <_printf_float+0x9c>
 801b342:	2301      	movs	r3, #1
 801b344:	464a      	mov	r2, r9
 801b346:	4631      	mov	r1, r6
 801b348:	4628      	mov	r0, r5
 801b34a:	47b8      	blx	r7
 801b34c:	3001      	adds	r0, #1
 801b34e:	f43f af2f 	beq.w	801b1b0 <_printf_float+0x98>
 801b352:	f108 0801 	add.w	r8, r8, #1
 801b356:	e7e6      	b.n	801b326 <_printf_float+0x20e>
 801b358:	9b07      	ldr	r3, [sp, #28]
 801b35a:	2b00      	cmp	r3, #0
 801b35c:	dc3a      	bgt.n	801b3d4 <_printf_float+0x2bc>
 801b35e:	4a1c      	ldr	r2, [pc, #112]	; (801b3d0 <_printf_float+0x2b8>)
 801b360:	2301      	movs	r3, #1
 801b362:	4631      	mov	r1, r6
 801b364:	4628      	mov	r0, r5
 801b366:	47b8      	blx	r7
 801b368:	3001      	adds	r0, #1
 801b36a:	f43f af21 	beq.w	801b1b0 <_printf_float+0x98>
 801b36e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801b372:	4313      	orrs	r3, r2
 801b374:	d102      	bne.n	801b37c <_printf_float+0x264>
 801b376:	6823      	ldr	r3, [r4, #0]
 801b378:	07d9      	lsls	r1, r3, #31
 801b37a:	d5d8      	bpl.n	801b32e <_printf_float+0x216>
 801b37c:	4653      	mov	r3, sl
 801b37e:	465a      	mov	r2, fp
 801b380:	4631      	mov	r1, r6
 801b382:	4628      	mov	r0, r5
 801b384:	47b8      	blx	r7
 801b386:	3001      	adds	r0, #1
 801b388:	f43f af12 	beq.w	801b1b0 <_printf_float+0x98>
 801b38c:	f04f 0900 	mov.w	r9, #0
 801b390:	f104 0a1a 	add.w	sl, r4, #26
 801b394:	9b07      	ldr	r3, [sp, #28]
 801b396:	425b      	negs	r3, r3
 801b398:	454b      	cmp	r3, r9
 801b39a:	dc01      	bgt.n	801b3a0 <_printf_float+0x288>
 801b39c:	9b08      	ldr	r3, [sp, #32]
 801b39e:	e795      	b.n	801b2cc <_printf_float+0x1b4>
 801b3a0:	2301      	movs	r3, #1
 801b3a2:	4652      	mov	r2, sl
 801b3a4:	4631      	mov	r1, r6
 801b3a6:	4628      	mov	r0, r5
 801b3a8:	47b8      	blx	r7
 801b3aa:	3001      	adds	r0, #1
 801b3ac:	f43f af00 	beq.w	801b1b0 <_printf_float+0x98>
 801b3b0:	f109 0901 	add.w	r9, r9, #1
 801b3b4:	e7ee      	b.n	801b394 <_printf_float+0x27c>
 801b3b6:	bf00      	nop
 801b3b8:	ffffffff 	.word	0xffffffff
 801b3bc:	7fefffff 	.word	0x7fefffff
 801b3c0:	080205d4 	.word	0x080205d4
 801b3c4:	080205d8 	.word	0x080205d8
 801b3c8:	080205dc 	.word	0x080205dc
 801b3cc:	080205e0 	.word	0x080205e0
 801b3d0:	08020970 	.word	0x08020970
 801b3d4:	9a08      	ldr	r2, [sp, #32]
 801b3d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b3d8:	429a      	cmp	r2, r3
 801b3da:	bfa8      	it	ge
 801b3dc:	461a      	movge	r2, r3
 801b3de:	2a00      	cmp	r2, #0
 801b3e0:	4691      	mov	r9, r2
 801b3e2:	dc38      	bgt.n	801b456 <_printf_float+0x33e>
 801b3e4:	2300      	movs	r3, #0
 801b3e6:	9305      	str	r3, [sp, #20]
 801b3e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b3ec:	f104 021a 	add.w	r2, r4, #26
 801b3f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b3f2:	9905      	ldr	r1, [sp, #20]
 801b3f4:	9304      	str	r3, [sp, #16]
 801b3f6:	eba3 0309 	sub.w	r3, r3, r9
 801b3fa:	428b      	cmp	r3, r1
 801b3fc:	dc33      	bgt.n	801b466 <_printf_float+0x34e>
 801b3fe:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b402:	429a      	cmp	r2, r3
 801b404:	db3c      	blt.n	801b480 <_printf_float+0x368>
 801b406:	6823      	ldr	r3, [r4, #0]
 801b408:	07da      	lsls	r2, r3, #31
 801b40a:	d439      	bmi.n	801b480 <_printf_float+0x368>
 801b40c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801b410:	eba2 0903 	sub.w	r9, r2, r3
 801b414:	9b04      	ldr	r3, [sp, #16]
 801b416:	1ad2      	subs	r2, r2, r3
 801b418:	4591      	cmp	r9, r2
 801b41a:	bfa8      	it	ge
 801b41c:	4691      	movge	r9, r2
 801b41e:	f1b9 0f00 	cmp.w	r9, #0
 801b422:	dc35      	bgt.n	801b490 <_printf_float+0x378>
 801b424:	f04f 0800 	mov.w	r8, #0
 801b428:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b42c:	f104 0a1a 	add.w	sl, r4, #26
 801b430:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b434:	1a9b      	subs	r3, r3, r2
 801b436:	eba3 0309 	sub.w	r3, r3, r9
 801b43a:	4543      	cmp	r3, r8
 801b43c:	f77f af77 	ble.w	801b32e <_printf_float+0x216>
 801b440:	2301      	movs	r3, #1
 801b442:	4652      	mov	r2, sl
 801b444:	4631      	mov	r1, r6
 801b446:	4628      	mov	r0, r5
 801b448:	47b8      	blx	r7
 801b44a:	3001      	adds	r0, #1
 801b44c:	f43f aeb0 	beq.w	801b1b0 <_printf_float+0x98>
 801b450:	f108 0801 	add.w	r8, r8, #1
 801b454:	e7ec      	b.n	801b430 <_printf_float+0x318>
 801b456:	4613      	mov	r3, r2
 801b458:	4631      	mov	r1, r6
 801b45a:	4642      	mov	r2, r8
 801b45c:	4628      	mov	r0, r5
 801b45e:	47b8      	blx	r7
 801b460:	3001      	adds	r0, #1
 801b462:	d1bf      	bne.n	801b3e4 <_printf_float+0x2cc>
 801b464:	e6a4      	b.n	801b1b0 <_printf_float+0x98>
 801b466:	2301      	movs	r3, #1
 801b468:	4631      	mov	r1, r6
 801b46a:	4628      	mov	r0, r5
 801b46c:	9204      	str	r2, [sp, #16]
 801b46e:	47b8      	blx	r7
 801b470:	3001      	adds	r0, #1
 801b472:	f43f ae9d 	beq.w	801b1b0 <_printf_float+0x98>
 801b476:	9b05      	ldr	r3, [sp, #20]
 801b478:	9a04      	ldr	r2, [sp, #16]
 801b47a:	3301      	adds	r3, #1
 801b47c:	9305      	str	r3, [sp, #20]
 801b47e:	e7b7      	b.n	801b3f0 <_printf_float+0x2d8>
 801b480:	4653      	mov	r3, sl
 801b482:	465a      	mov	r2, fp
 801b484:	4631      	mov	r1, r6
 801b486:	4628      	mov	r0, r5
 801b488:	47b8      	blx	r7
 801b48a:	3001      	adds	r0, #1
 801b48c:	d1be      	bne.n	801b40c <_printf_float+0x2f4>
 801b48e:	e68f      	b.n	801b1b0 <_printf_float+0x98>
 801b490:	9a04      	ldr	r2, [sp, #16]
 801b492:	464b      	mov	r3, r9
 801b494:	4442      	add	r2, r8
 801b496:	4631      	mov	r1, r6
 801b498:	4628      	mov	r0, r5
 801b49a:	47b8      	blx	r7
 801b49c:	3001      	adds	r0, #1
 801b49e:	d1c1      	bne.n	801b424 <_printf_float+0x30c>
 801b4a0:	e686      	b.n	801b1b0 <_printf_float+0x98>
 801b4a2:	9a08      	ldr	r2, [sp, #32]
 801b4a4:	2a01      	cmp	r2, #1
 801b4a6:	dc01      	bgt.n	801b4ac <_printf_float+0x394>
 801b4a8:	07db      	lsls	r3, r3, #31
 801b4aa:	d537      	bpl.n	801b51c <_printf_float+0x404>
 801b4ac:	2301      	movs	r3, #1
 801b4ae:	4642      	mov	r2, r8
 801b4b0:	4631      	mov	r1, r6
 801b4b2:	4628      	mov	r0, r5
 801b4b4:	47b8      	blx	r7
 801b4b6:	3001      	adds	r0, #1
 801b4b8:	f43f ae7a 	beq.w	801b1b0 <_printf_float+0x98>
 801b4bc:	4653      	mov	r3, sl
 801b4be:	465a      	mov	r2, fp
 801b4c0:	4631      	mov	r1, r6
 801b4c2:	4628      	mov	r0, r5
 801b4c4:	47b8      	blx	r7
 801b4c6:	3001      	adds	r0, #1
 801b4c8:	f43f ae72 	beq.w	801b1b0 <_printf_float+0x98>
 801b4cc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801b4d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b4d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4d8:	9b08      	ldr	r3, [sp, #32]
 801b4da:	d01a      	beq.n	801b512 <_printf_float+0x3fa>
 801b4dc:	3b01      	subs	r3, #1
 801b4de:	f108 0201 	add.w	r2, r8, #1
 801b4e2:	4631      	mov	r1, r6
 801b4e4:	4628      	mov	r0, r5
 801b4e6:	47b8      	blx	r7
 801b4e8:	3001      	adds	r0, #1
 801b4ea:	d10e      	bne.n	801b50a <_printf_float+0x3f2>
 801b4ec:	e660      	b.n	801b1b0 <_printf_float+0x98>
 801b4ee:	2301      	movs	r3, #1
 801b4f0:	464a      	mov	r2, r9
 801b4f2:	4631      	mov	r1, r6
 801b4f4:	4628      	mov	r0, r5
 801b4f6:	47b8      	blx	r7
 801b4f8:	3001      	adds	r0, #1
 801b4fa:	f43f ae59 	beq.w	801b1b0 <_printf_float+0x98>
 801b4fe:	f108 0801 	add.w	r8, r8, #1
 801b502:	9b08      	ldr	r3, [sp, #32]
 801b504:	3b01      	subs	r3, #1
 801b506:	4543      	cmp	r3, r8
 801b508:	dcf1      	bgt.n	801b4ee <_printf_float+0x3d6>
 801b50a:	9b04      	ldr	r3, [sp, #16]
 801b50c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b510:	e6dd      	b.n	801b2ce <_printf_float+0x1b6>
 801b512:	f04f 0800 	mov.w	r8, #0
 801b516:	f104 091a 	add.w	r9, r4, #26
 801b51a:	e7f2      	b.n	801b502 <_printf_float+0x3ea>
 801b51c:	2301      	movs	r3, #1
 801b51e:	4642      	mov	r2, r8
 801b520:	e7df      	b.n	801b4e2 <_printf_float+0x3ca>
 801b522:	2301      	movs	r3, #1
 801b524:	464a      	mov	r2, r9
 801b526:	4631      	mov	r1, r6
 801b528:	4628      	mov	r0, r5
 801b52a:	47b8      	blx	r7
 801b52c:	3001      	adds	r0, #1
 801b52e:	f43f ae3f 	beq.w	801b1b0 <_printf_float+0x98>
 801b532:	f108 0801 	add.w	r8, r8, #1
 801b536:	68e3      	ldr	r3, [r4, #12]
 801b538:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b53a:	1a5b      	subs	r3, r3, r1
 801b53c:	4543      	cmp	r3, r8
 801b53e:	dcf0      	bgt.n	801b522 <_printf_float+0x40a>
 801b540:	e6f9      	b.n	801b336 <_printf_float+0x21e>
 801b542:	f04f 0800 	mov.w	r8, #0
 801b546:	f104 0919 	add.w	r9, r4, #25
 801b54a:	e7f4      	b.n	801b536 <_printf_float+0x41e>

0801b54c <_printf_common>:
 801b54c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b550:	4616      	mov	r6, r2
 801b552:	4699      	mov	r9, r3
 801b554:	688a      	ldr	r2, [r1, #8]
 801b556:	690b      	ldr	r3, [r1, #16]
 801b558:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b55c:	4293      	cmp	r3, r2
 801b55e:	bfb8      	it	lt
 801b560:	4613      	movlt	r3, r2
 801b562:	6033      	str	r3, [r6, #0]
 801b564:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b568:	4607      	mov	r7, r0
 801b56a:	460c      	mov	r4, r1
 801b56c:	b10a      	cbz	r2, 801b572 <_printf_common+0x26>
 801b56e:	3301      	adds	r3, #1
 801b570:	6033      	str	r3, [r6, #0]
 801b572:	6823      	ldr	r3, [r4, #0]
 801b574:	0699      	lsls	r1, r3, #26
 801b576:	bf42      	ittt	mi
 801b578:	6833      	ldrmi	r3, [r6, #0]
 801b57a:	3302      	addmi	r3, #2
 801b57c:	6033      	strmi	r3, [r6, #0]
 801b57e:	6825      	ldr	r5, [r4, #0]
 801b580:	f015 0506 	ands.w	r5, r5, #6
 801b584:	d106      	bne.n	801b594 <_printf_common+0x48>
 801b586:	f104 0a19 	add.w	sl, r4, #25
 801b58a:	68e3      	ldr	r3, [r4, #12]
 801b58c:	6832      	ldr	r2, [r6, #0]
 801b58e:	1a9b      	subs	r3, r3, r2
 801b590:	42ab      	cmp	r3, r5
 801b592:	dc26      	bgt.n	801b5e2 <_printf_common+0x96>
 801b594:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b598:	1e13      	subs	r3, r2, #0
 801b59a:	6822      	ldr	r2, [r4, #0]
 801b59c:	bf18      	it	ne
 801b59e:	2301      	movne	r3, #1
 801b5a0:	0692      	lsls	r2, r2, #26
 801b5a2:	d42b      	bmi.n	801b5fc <_printf_common+0xb0>
 801b5a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b5a8:	4649      	mov	r1, r9
 801b5aa:	4638      	mov	r0, r7
 801b5ac:	47c0      	blx	r8
 801b5ae:	3001      	adds	r0, #1
 801b5b0:	d01e      	beq.n	801b5f0 <_printf_common+0xa4>
 801b5b2:	6823      	ldr	r3, [r4, #0]
 801b5b4:	6922      	ldr	r2, [r4, #16]
 801b5b6:	f003 0306 	and.w	r3, r3, #6
 801b5ba:	2b04      	cmp	r3, #4
 801b5bc:	bf02      	ittt	eq
 801b5be:	68e5      	ldreq	r5, [r4, #12]
 801b5c0:	6833      	ldreq	r3, [r6, #0]
 801b5c2:	1aed      	subeq	r5, r5, r3
 801b5c4:	68a3      	ldr	r3, [r4, #8]
 801b5c6:	bf0c      	ite	eq
 801b5c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b5cc:	2500      	movne	r5, #0
 801b5ce:	4293      	cmp	r3, r2
 801b5d0:	bfc4      	itt	gt
 801b5d2:	1a9b      	subgt	r3, r3, r2
 801b5d4:	18ed      	addgt	r5, r5, r3
 801b5d6:	2600      	movs	r6, #0
 801b5d8:	341a      	adds	r4, #26
 801b5da:	42b5      	cmp	r5, r6
 801b5dc:	d11a      	bne.n	801b614 <_printf_common+0xc8>
 801b5de:	2000      	movs	r0, #0
 801b5e0:	e008      	b.n	801b5f4 <_printf_common+0xa8>
 801b5e2:	2301      	movs	r3, #1
 801b5e4:	4652      	mov	r2, sl
 801b5e6:	4649      	mov	r1, r9
 801b5e8:	4638      	mov	r0, r7
 801b5ea:	47c0      	blx	r8
 801b5ec:	3001      	adds	r0, #1
 801b5ee:	d103      	bne.n	801b5f8 <_printf_common+0xac>
 801b5f0:	f04f 30ff 	mov.w	r0, #4294967295
 801b5f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b5f8:	3501      	adds	r5, #1
 801b5fa:	e7c6      	b.n	801b58a <_printf_common+0x3e>
 801b5fc:	18e1      	adds	r1, r4, r3
 801b5fe:	1c5a      	adds	r2, r3, #1
 801b600:	2030      	movs	r0, #48	; 0x30
 801b602:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b606:	4422      	add	r2, r4
 801b608:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b60c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b610:	3302      	adds	r3, #2
 801b612:	e7c7      	b.n	801b5a4 <_printf_common+0x58>
 801b614:	2301      	movs	r3, #1
 801b616:	4622      	mov	r2, r4
 801b618:	4649      	mov	r1, r9
 801b61a:	4638      	mov	r0, r7
 801b61c:	47c0      	blx	r8
 801b61e:	3001      	adds	r0, #1
 801b620:	d0e6      	beq.n	801b5f0 <_printf_common+0xa4>
 801b622:	3601      	adds	r6, #1
 801b624:	e7d9      	b.n	801b5da <_printf_common+0x8e>
	...

0801b628 <_printf_i>:
 801b628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b62c:	7e0f      	ldrb	r7, [r1, #24]
 801b62e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b630:	2f78      	cmp	r7, #120	; 0x78
 801b632:	4691      	mov	r9, r2
 801b634:	4680      	mov	r8, r0
 801b636:	460c      	mov	r4, r1
 801b638:	469a      	mov	sl, r3
 801b63a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b63e:	d807      	bhi.n	801b650 <_printf_i+0x28>
 801b640:	2f62      	cmp	r7, #98	; 0x62
 801b642:	d80a      	bhi.n	801b65a <_printf_i+0x32>
 801b644:	2f00      	cmp	r7, #0
 801b646:	f000 80d4 	beq.w	801b7f2 <_printf_i+0x1ca>
 801b64a:	2f58      	cmp	r7, #88	; 0x58
 801b64c:	f000 80c0 	beq.w	801b7d0 <_printf_i+0x1a8>
 801b650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b654:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b658:	e03a      	b.n	801b6d0 <_printf_i+0xa8>
 801b65a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b65e:	2b15      	cmp	r3, #21
 801b660:	d8f6      	bhi.n	801b650 <_printf_i+0x28>
 801b662:	a101      	add	r1, pc, #4	; (adr r1, 801b668 <_printf_i+0x40>)
 801b664:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b668:	0801b6c1 	.word	0x0801b6c1
 801b66c:	0801b6d5 	.word	0x0801b6d5
 801b670:	0801b651 	.word	0x0801b651
 801b674:	0801b651 	.word	0x0801b651
 801b678:	0801b651 	.word	0x0801b651
 801b67c:	0801b651 	.word	0x0801b651
 801b680:	0801b6d5 	.word	0x0801b6d5
 801b684:	0801b651 	.word	0x0801b651
 801b688:	0801b651 	.word	0x0801b651
 801b68c:	0801b651 	.word	0x0801b651
 801b690:	0801b651 	.word	0x0801b651
 801b694:	0801b7d9 	.word	0x0801b7d9
 801b698:	0801b701 	.word	0x0801b701
 801b69c:	0801b793 	.word	0x0801b793
 801b6a0:	0801b651 	.word	0x0801b651
 801b6a4:	0801b651 	.word	0x0801b651
 801b6a8:	0801b7fb 	.word	0x0801b7fb
 801b6ac:	0801b651 	.word	0x0801b651
 801b6b0:	0801b701 	.word	0x0801b701
 801b6b4:	0801b651 	.word	0x0801b651
 801b6b8:	0801b651 	.word	0x0801b651
 801b6bc:	0801b79b 	.word	0x0801b79b
 801b6c0:	682b      	ldr	r3, [r5, #0]
 801b6c2:	1d1a      	adds	r2, r3, #4
 801b6c4:	681b      	ldr	r3, [r3, #0]
 801b6c6:	602a      	str	r2, [r5, #0]
 801b6c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b6cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b6d0:	2301      	movs	r3, #1
 801b6d2:	e09f      	b.n	801b814 <_printf_i+0x1ec>
 801b6d4:	6820      	ldr	r0, [r4, #0]
 801b6d6:	682b      	ldr	r3, [r5, #0]
 801b6d8:	0607      	lsls	r7, r0, #24
 801b6da:	f103 0104 	add.w	r1, r3, #4
 801b6de:	6029      	str	r1, [r5, #0]
 801b6e0:	d501      	bpl.n	801b6e6 <_printf_i+0xbe>
 801b6e2:	681e      	ldr	r6, [r3, #0]
 801b6e4:	e003      	b.n	801b6ee <_printf_i+0xc6>
 801b6e6:	0646      	lsls	r6, r0, #25
 801b6e8:	d5fb      	bpl.n	801b6e2 <_printf_i+0xba>
 801b6ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b6ee:	2e00      	cmp	r6, #0
 801b6f0:	da03      	bge.n	801b6fa <_printf_i+0xd2>
 801b6f2:	232d      	movs	r3, #45	; 0x2d
 801b6f4:	4276      	negs	r6, r6
 801b6f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b6fa:	485a      	ldr	r0, [pc, #360]	; (801b864 <_printf_i+0x23c>)
 801b6fc:	230a      	movs	r3, #10
 801b6fe:	e012      	b.n	801b726 <_printf_i+0xfe>
 801b700:	682b      	ldr	r3, [r5, #0]
 801b702:	6820      	ldr	r0, [r4, #0]
 801b704:	1d19      	adds	r1, r3, #4
 801b706:	6029      	str	r1, [r5, #0]
 801b708:	0605      	lsls	r5, r0, #24
 801b70a:	d501      	bpl.n	801b710 <_printf_i+0xe8>
 801b70c:	681e      	ldr	r6, [r3, #0]
 801b70e:	e002      	b.n	801b716 <_printf_i+0xee>
 801b710:	0641      	lsls	r1, r0, #25
 801b712:	d5fb      	bpl.n	801b70c <_printf_i+0xe4>
 801b714:	881e      	ldrh	r6, [r3, #0]
 801b716:	4853      	ldr	r0, [pc, #332]	; (801b864 <_printf_i+0x23c>)
 801b718:	2f6f      	cmp	r7, #111	; 0x6f
 801b71a:	bf0c      	ite	eq
 801b71c:	2308      	moveq	r3, #8
 801b71e:	230a      	movne	r3, #10
 801b720:	2100      	movs	r1, #0
 801b722:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b726:	6865      	ldr	r5, [r4, #4]
 801b728:	60a5      	str	r5, [r4, #8]
 801b72a:	2d00      	cmp	r5, #0
 801b72c:	bfa2      	ittt	ge
 801b72e:	6821      	ldrge	r1, [r4, #0]
 801b730:	f021 0104 	bicge.w	r1, r1, #4
 801b734:	6021      	strge	r1, [r4, #0]
 801b736:	b90e      	cbnz	r6, 801b73c <_printf_i+0x114>
 801b738:	2d00      	cmp	r5, #0
 801b73a:	d04b      	beq.n	801b7d4 <_printf_i+0x1ac>
 801b73c:	4615      	mov	r5, r2
 801b73e:	fbb6 f1f3 	udiv	r1, r6, r3
 801b742:	fb03 6711 	mls	r7, r3, r1, r6
 801b746:	5dc7      	ldrb	r7, [r0, r7]
 801b748:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b74c:	4637      	mov	r7, r6
 801b74e:	42bb      	cmp	r3, r7
 801b750:	460e      	mov	r6, r1
 801b752:	d9f4      	bls.n	801b73e <_printf_i+0x116>
 801b754:	2b08      	cmp	r3, #8
 801b756:	d10b      	bne.n	801b770 <_printf_i+0x148>
 801b758:	6823      	ldr	r3, [r4, #0]
 801b75a:	07de      	lsls	r6, r3, #31
 801b75c:	d508      	bpl.n	801b770 <_printf_i+0x148>
 801b75e:	6923      	ldr	r3, [r4, #16]
 801b760:	6861      	ldr	r1, [r4, #4]
 801b762:	4299      	cmp	r1, r3
 801b764:	bfde      	ittt	le
 801b766:	2330      	movle	r3, #48	; 0x30
 801b768:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b76c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b770:	1b52      	subs	r2, r2, r5
 801b772:	6122      	str	r2, [r4, #16]
 801b774:	f8cd a000 	str.w	sl, [sp]
 801b778:	464b      	mov	r3, r9
 801b77a:	aa03      	add	r2, sp, #12
 801b77c:	4621      	mov	r1, r4
 801b77e:	4640      	mov	r0, r8
 801b780:	f7ff fee4 	bl	801b54c <_printf_common>
 801b784:	3001      	adds	r0, #1
 801b786:	d14a      	bne.n	801b81e <_printf_i+0x1f6>
 801b788:	f04f 30ff 	mov.w	r0, #4294967295
 801b78c:	b004      	add	sp, #16
 801b78e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b792:	6823      	ldr	r3, [r4, #0]
 801b794:	f043 0320 	orr.w	r3, r3, #32
 801b798:	6023      	str	r3, [r4, #0]
 801b79a:	4833      	ldr	r0, [pc, #204]	; (801b868 <_printf_i+0x240>)
 801b79c:	2778      	movs	r7, #120	; 0x78
 801b79e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b7a2:	6823      	ldr	r3, [r4, #0]
 801b7a4:	6829      	ldr	r1, [r5, #0]
 801b7a6:	061f      	lsls	r7, r3, #24
 801b7a8:	f851 6b04 	ldr.w	r6, [r1], #4
 801b7ac:	d402      	bmi.n	801b7b4 <_printf_i+0x18c>
 801b7ae:	065f      	lsls	r7, r3, #25
 801b7b0:	bf48      	it	mi
 801b7b2:	b2b6      	uxthmi	r6, r6
 801b7b4:	07df      	lsls	r7, r3, #31
 801b7b6:	bf48      	it	mi
 801b7b8:	f043 0320 	orrmi.w	r3, r3, #32
 801b7bc:	6029      	str	r1, [r5, #0]
 801b7be:	bf48      	it	mi
 801b7c0:	6023      	strmi	r3, [r4, #0]
 801b7c2:	b91e      	cbnz	r6, 801b7cc <_printf_i+0x1a4>
 801b7c4:	6823      	ldr	r3, [r4, #0]
 801b7c6:	f023 0320 	bic.w	r3, r3, #32
 801b7ca:	6023      	str	r3, [r4, #0]
 801b7cc:	2310      	movs	r3, #16
 801b7ce:	e7a7      	b.n	801b720 <_printf_i+0xf8>
 801b7d0:	4824      	ldr	r0, [pc, #144]	; (801b864 <_printf_i+0x23c>)
 801b7d2:	e7e4      	b.n	801b79e <_printf_i+0x176>
 801b7d4:	4615      	mov	r5, r2
 801b7d6:	e7bd      	b.n	801b754 <_printf_i+0x12c>
 801b7d8:	682b      	ldr	r3, [r5, #0]
 801b7da:	6826      	ldr	r6, [r4, #0]
 801b7dc:	6961      	ldr	r1, [r4, #20]
 801b7de:	1d18      	adds	r0, r3, #4
 801b7e0:	6028      	str	r0, [r5, #0]
 801b7e2:	0635      	lsls	r5, r6, #24
 801b7e4:	681b      	ldr	r3, [r3, #0]
 801b7e6:	d501      	bpl.n	801b7ec <_printf_i+0x1c4>
 801b7e8:	6019      	str	r1, [r3, #0]
 801b7ea:	e002      	b.n	801b7f2 <_printf_i+0x1ca>
 801b7ec:	0670      	lsls	r0, r6, #25
 801b7ee:	d5fb      	bpl.n	801b7e8 <_printf_i+0x1c0>
 801b7f0:	8019      	strh	r1, [r3, #0]
 801b7f2:	2300      	movs	r3, #0
 801b7f4:	6123      	str	r3, [r4, #16]
 801b7f6:	4615      	mov	r5, r2
 801b7f8:	e7bc      	b.n	801b774 <_printf_i+0x14c>
 801b7fa:	682b      	ldr	r3, [r5, #0]
 801b7fc:	1d1a      	adds	r2, r3, #4
 801b7fe:	602a      	str	r2, [r5, #0]
 801b800:	681d      	ldr	r5, [r3, #0]
 801b802:	6862      	ldr	r2, [r4, #4]
 801b804:	2100      	movs	r1, #0
 801b806:	4628      	mov	r0, r5
 801b808:	f7e4 fd92 	bl	8000330 <memchr>
 801b80c:	b108      	cbz	r0, 801b812 <_printf_i+0x1ea>
 801b80e:	1b40      	subs	r0, r0, r5
 801b810:	6060      	str	r0, [r4, #4]
 801b812:	6863      	ldr	r3, [r4, #4]
 801b814:	6123      	str	r3, [r4, #16]
 801b816:	2300      	movs	r3, #0
 801b818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b81c:	e7aa      	b.n	801b774 <_printf_i+0x14c>
 801b81e:	6923      	ldr	r3, [r4, #16]
 801b820:	462a      	mov	r2, r5
 801b822:	4649      	mov	r1, r9
 801b824:	4640      	mov	r0, r8
 801b826:	47d0      	blx	sl
 801b828:	3001      	adds	r0, #1
 801b82a:	d0ad      	beq.n	801b788 <_printf_i+0x160>
 801b82c:	6823      	ldr	r3, [r4, #0]
 801b82e:	079b      	lsls	r3, r3, #30
 801b830:	d413      	bmi.n	801b85a <_printf_i+0x232>
 801b832:	68e0      	ldr	r0, [r4, #12]
 801b834:	9b03      	ldr	r3, [sp, #12]
 801b836:	4298      	cmp	r0, r3
 801b838:	bfb8      	it	lt
 801b83a:	4618      	movlt	r0, r3
 801b83c:	e7a6      	b.n	801b78c <_printf_i+0x164>
 801b83e:	2301      	movs	r3, #1
 801b840:	4632      	mov	r2, r6
 801b842:	4649      	mov	r1, r9
 801b844:	4640      	mov	r0, r8
 801b846:	47d0      	blx	sl
 801b848:	3001      	adds	r0, #1
 801b84a:	d09d      	beq.n	801b788 <_printf_i+0x160>
 801b84c:	3501      	adds	r5, #1
 801b84e:	68e3      	ldr	r3, [r4, #12]
 801b850:	9903      	ldr	r1, [sp, #12]
 801b852:	1a5b      	subs	r3, r3, r1
 801b854:	42ab      	cmp	r3, r5
 801b856:	dcf2      	bgt.n	801b83e <_printf_i+0x216>
 801b858:	e7eb      	b.n	801b832 <_printf_i+0x20a>
 801b85a:	2500      	movs	r5, #0
 801b85c:	f104 0619 	add.w	r6, r4, #25
 801b860:	e7f5      	b.n	801b84e <_printf_i+0x226>
 801b862:	bf00      	nop
 801b864:	080205e4 	.word	0x080205e4
 801b868:	080205f5 	.word	0x080205f5

0801b86c <_scanf_float>:
 801b86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b870:	b087      	sub	sp, #28
 801b872:	4617      	mov	r7, r2
 801b874:	9303      	str	r3, [sp, #12]
 801b876:	688b      	ldr	r3, [r1, #8]
 801b878:	1e5a      	subs	r2, r3, #1
 801b87a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801b87e:	bf83      	ittte	hi
 801b880:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801b884:	195b      	addhi	r3, r3, r5
 801b886:	9302      	strhi	r3, [sp, #8]
 801b888:	2300      	movls	r3, #0
 801b88a:	bf86      	itte	hi
 801b88c:	f240 135d 	movwhi	r3, #349	; 0x15d
 801b890:	608b      	strhi	r3, [r1, #8]
 801b892:	9302      	strls	r3, [sp, #8]
 801b894:	680b      	ldr	r3, [r1, #0]
 801b896:	468b      	mov	fp, r1
 801b898:	2500      	movs	r5, #0
 801b89a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801b89e:	f84b 3b1c 	str.w	r3, [fp], #28
 801b8a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b8a6:	4680      	mov	r8, r0
 801b8a8:	460c      	mov	r4, r1
 801b8aa:	465e      	mov	r6, fp
 801b8ac:	46aa      	mov	sl, r5
 801b8ae:	46a9      	mov	r9, r5
 801b8b0:	9501      	str	r5, [sp, #4]
 801b8b2:	68a2      	ldr	r2, [r4, #8]
 801b8b4:	b152      	cbz	r2, 801b8cc <_scanf_float+0x60>
 801b8b6:	683b      	ldr	r3, [r7, #0]
 801b8b8:	781b      	ldrb	r3, [r3, #0]
 801b8ba:	2b4e      	cmp	r3, #78	; 0x4e
 801b8bc:	d864      	bhi.n	801b988 <_scanf_float+0x11c>
 801b8be:	2b40      	cmp	r3, #64	; 0x40
 801b8c0:	d83c      	bhi.n	801b93c <_scanf_float+0xd0>
 801b8c2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801b8c6:	b2c8      	uxtb	r0, r1
 801b8c8:	280e      	cmp	r0, #14
 801b8ca:	d93a      	bls.n	801b942 <_scanf_float+0xd6>
 801b8cc:	f1b9 0f00 	cmp.w	r9, #0
 801b8d0:	d003      	beq.n	801b8da <_scanf_float+0x6e>
 801b8d2:	6823      	ldr	r3, [r4, #0]
 801b8d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b8d8:	6023      	str	r3, [r4, #0]
 801b8da:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b8de:	f1ba 0f01 	cmp.w	sl, #1
 801b8e2:	f200 8113 	bhi.w	801bb0c <_scanf_float+0x2a0>
 801b8e6:	455e      	cmp	r6, fp
 801b8e8:	f200 8105 	bhi.w	801baf6 <_scanf_float+0x28a>
 801b8ec:	2501      	movs	r5, #1
 801b8ee:	4628      	mov	r0, r5
 801b8f0:	b007      	add	sp, #28
 801b8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8f6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801b8fa:	2a0d      	cmp	r2, #13
 801b8fc:	d8e6      	bhi.n	801b8cc <_scanf_float+0x60>
 801b8fe:	a101      	add	r1, pc, #4	; (adr r1, 801b904 <_scanf_float+0x98>)
 801b900:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b904:	0801ba43 	.word	0x0801ba43
 801b908:	0801b8cd 	.word	0x0801b8cd
 801b90c:	0801b8cd 	.word	0x0801b8cd
 801b910:	0801b8cd 	.word	0x0801b8cd
 801b914:	0801baa3 	.word	0x0801baa3
 801b918:	0801ba7b 	.word	0x0801ba7b
 801b91c:	0801b8cd 	.word	0x0801b8cd
 801b920:	0801b8cd 	.word	0x0801b8cd
 801b924:	0801ba51 	.word	0x0801ba51
 801b928:	0801b8cd 	.word	0x0801b8cd
 801b92c:	0801b8cd 	.word	0x0801b8cd
 801b930:	0801b8cd 	.word	0x0801b8cd
 801b934:	0801b8cd 	.word	0x0801b8cd
 801b938:	0801ba09 	.word	0x0801ba09
 801b93c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801b940:	e7db      	b.n	801b8fa <_scanf_float+0x8e>
 801b942:	290e      	cmp	r1, #14
 801b944:	d8c2      	bhi.n	801b8cc <_scanf_float+0x60>
 801b946:	a001      	add	r0, pc, #4	; (adr r0, 801b94c <_scanf_float+0xe0>)
 801b948:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801b94c:	0801b9fb 	.word	0x0801b9fb
 801b950:	0801b8cd 	.word	0x0801b8cd
 801b954:	0801b9fb 	.word	0x0801b9fb
 801b958:	0801ba8f 	.word	0x0801ba8f
 801b95c:	0801b8cd 	.word	0x0801b8cd
 801b960:	0801b9a9 	.word	0x0801b9a9
 801b964:	0801b9e5 	.word	0x0801b9e5
 801b968:	0801b9e5 	.word	0x0801b9e5
 801b96c:	0801b9e5 	.word	0x0801b9e5
 801b970:	0801b9e5 	.word	0x0801b9e5
 801b974:	0801b9e5 	.word	0x0801b9e5
 801b978:	0801b9e5 	.word	0x0801b9e5
 801b97c:	0801b9e5 	.word	0x0801b9e5
 801b980:	0801b9e5 	.word	0x0801b9e5
 801b984:	0801b9e5 	.word	0x0801b9e5
 801b988:	2b6e      	cmp	r3, #110	; 0x6e
 801b98a:	d809      	bhi.n	801b9a0 <_scanf_float+0x134>
 801b98c:	2b60      	cmp	r3, #96	; 0x60
 801b98e:	d8b2      	bhi.n	801b8f6 <_scanf_float+0x8a>
 801b990:	2b54      	cmp	r3, #84	; 0x54
 801b992:	d077      	beq.n	801ba84 <_scanf_float+0x218>
 801b994:	2b59      	cmp	r3, #89	; 0x59
 801b996:	d199      	bne.n	801b8cc <_scanf_float+0x60>
 801b998:	2d07      	cmp	r5, #7
 801b99a:	d197      	bne.n	801b8cc <_scanf_float+0x60>
 801b99c:	2508      	movs	r5, #8
 801b99e:	e029      	b.n	801b9f4 <_scanf_float+0x188>
 801b9a0:	2b74      	cmp	r3, #116	; 0x74
 801b9a2:	d06f      	beq.n	801ba84 <_scanf_float+0x218>
 801b9a4:	2b79      	cmp	r3, #121	; 0x79
 801b9a6:	e7f6      	b.n	801b996 <_scanf_float+0x12a>
 801b9a8:	6821      	ldr	r1, [r4, #0]
 801b9aa:	05c8      	lsls	r0, r1, #23
 801b9ac:	d51a      	bpl.n	801b9e4 <_scanf_float+0x178>
 801b9ae:	9b02      	ldr	r3, [sp, #8]
 801b9b0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801b9b4:	6021      	str	r1, [r4, #0]
 801b9b6:	f109 0901 	add.w	r9, r9, #1
 801b9ba:	b11b      	cbz	r3, 801b9c4 <_scanf_float+0x158>
 801b9bc:	3b01      	subs	r3, #1
 801b9be:	3201      	adds	r2, #1
 801b9c0:	9302      	str	r3, [sp, #8]
 801b9c2:	60a2      	str	r2, [r4, #8]
 801b9c4:	68a3      	ldr	r3, [r4, #8]
 801b9c6:	3b01      	subs	r3, #1
 801b9c8:	60a3      	str	r3, [r4, #8]
 801b9ca:	6923      	ldr	r3, [r4, #16]
 801b9cc:	3301      	adds	r3, #1
 801b9ce:	6123      	str	r3, [r4, #16]
 801b9d0:	687b      	ldr	r3, [r7, #4]
 801b9d2:	3b01      	subs	r3, #1
 801b9d4:	2b00      	cmp	r3, #0
 801b9d6:	607b      	str	r3, [r7, #4]
 801b9d8:	f340 8084 	ble.w	801bae4 <_scanf_float+0x278>
 801b9dc:	683b      	ldr	r3, [r7, #0]
 801b9de:	3301      	adds	r3, #1
 801b9e0:	603b      	str	r3, [r7, #0]
 801b9e2:	e766      	b.n	801b8b2 <_scanf_float+0x46>
 801b9e4:	eb1a 0f05 	cmn.w	sl, r5
 801b9e8:	f47f af70 	bne.w	801b8cc <_scanf_float+0x60>
 801b9ec:	6822      	ldr	r2, [r4, #0]
 801b9ee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801b9f2:	6022      	str	r2, [r4, #0]
 801b9f4:	f806 3b01 	strb.w	r3, [r6], #1
 801b9f8:	e7e4      	b.n	801b9c4 <_scanf_float+0x158>
 801b9fa:	6822      	ldr	r2, [r4, #0]
 801b9fc:	0610      	lsls	r0, r2, #24
 801b9fe:	f57f af65 	bpl.w	801b8cc <_scanf_float+0x60>
 801ba02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801ba06:	e7f4      	b.n	801b9f2 <_scanf_float+0x186>
 801ba08:	f1ba 0f00 	cmp.w	sl, #0
 801ba0c:	d10e      	bne.n	801ba2c <_scanf_float+0x1c0>
 801ba0e:	f1b9 0f00 	cmp.w	r9, #0
 801ba12:	d10e      	bne.n	801ba32 <_scanf_float+0x1c6>
 801ba14:	6822      	ldr	r2, [r4, #0]
 801ba16:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801ba1a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801ba1e:	d108      	bne.n	801ba32 <_scanf_float+0x1c6>
 801ba20:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801ba24:	6022      	str	r2, [r4, #0]
 801ba26:	f04f 0a01 	mov.w	sl, #1
 801ba2a:	e7e3      	b.n	801b9f4 <_scanf_float+0x188>
 801ba2c:	f1ba 0f02 	cmp.w	sl, #2
 801ba30:	d055      	beq.n	801bade <_scanf_float+0x272>
 801ba32:	2d01      	cmp	r5, #1
 801ba34:	d002      	beq.n	801ba3c <_scanf_float+0x1d0>
 801ba36:	2d04      	cmp	r5, #4
 801ba38:	f47f af48 	bne.w	801b8cc <_scanf_float+0x60>
 801ba3c:	3501      	adds	r5, #1
 801ba3e:	b2ed      	uxtb	r5, r5
 801ba40:	e7d8      	b.n	801b9f4 <_scanf_float+0x188>
 801ba42:	f1ba 0f01 	cmp.w	sl, #1
 801ba46:	f47f af41 	bne.w	801b8cc <_scanf_float+0x60>
 801ba4a:	f04f 0a02 	mov.w	sl, #2
 801ba4e:	e7d1      	b.n	801b9f4 <_scanf_float+0x188>
 801ba50:	b97d      	cbnz	r5, 801ba72 <_scanf_float+0x206>
 801ba52:	f1b9 0f00 	cmp.w	r9, #0
 801ba56:	f47f af3c 	bne.w	801b8d2 <_scanf_float+0x66>
 801ba5a:	6822      	ldr	r2, [r4, #0]
 801ba5c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801ba60:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801ba64:	f47f af39 	bne.w	801b8da <_scanf_float+0x6e>
 801ba68:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801ba6c:	6022      	str	r2, [r4, #0]
 801ba6e:	2501      	movs	r5, #1
 801ba70:	e7c0      	b.n	801b9f4 <_scanf_float+0x188>
 801ba72:	2d03      	cmp	r5, #3
 801ba74:	d0e2      	beq.n	801ba3c <_scanf_float+0x1d0>
 801ba76:	2d05      	cmp	r5, #5
 801ba78:	e7de      	b.n	801ba38 <_scanf_float+0x1cc>
 801ba7a:	2d02      	cmp	r5, #2
 801ba7c:	f47f af26 	bne.w	801b8cc <_scanf_float+0x60>
 801ba80:	2503      	movs	r5, #3
 801ba82:	e7b7      	b.n	801b9f4 <_scanf_float+0x188>
 801ba84:	2d06      	cmp	r5, #6
 801ba86:	f47f af21 	bne.w	801b8cc <_scanf_float+0x60>
 801ba8a:	2507      	movs	r5, #7
 801ba8c:	e7b2      	b.n	801b9f4 <_scanf_float+0x188>
 801ba8e:	6822      	ldr	r2, [r4, #0]
 801ba90:	0591      	lsls	r1, r2, #22
 801ba92:	f57f af1b 	bpl.w	801b8cc <_scanf_float+0x60>
 801ba96:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801ba9a:	6022      	str	r2, [r4, #0]
 801ba9c:	f8cd 9004 	str.w	r9, [sp, #4]
 801baa0:	e7a8      	b.n	801b9f4 <_scanf_float+0x188>
 801baa2:	6822      	ldr	r2, [r4, #0]
 801baa4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801baa8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801baac:	d006      	beq.n	801babc <_scanf_float+0x250>
 801baae:	0550      	lsls	r0, r2, #21
 801bab0:	f57f af0c 	bpl.w	801b8cc <_scanf_float+0x60>
 801bab4:	f1b9 0f00 	cmp.w	r9, #0
 801bab8:	f43f af0f 	beq.w	801b8da <_scanf_float+0x6e>
 801babc:	0591      	lsls	r1, r2, #22
 801babe:	bf58      	it	pl
 801bac0:	9901      	ldrpl	r1, [sp, #4]
 801bac2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801bac6:	bf58      	it	pl
 801bac8:	eba9 0101 	subpl.w	r1, r9, r1
 801bacc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801bad0:	bf58      	it	pl
 801bad2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801bad6:	6022      	str	r2, [r4, #0]
 801bad8:	f04f 0900 	mov.w	r9, #0
 801badc:	e78a      	b.n	801b9f4 <_scanf_float+0x188>
 801bade:	f04f 0a03 	mov.w	sl, #3
 801bae2:	e787      	b.n	801b9f4 <_scanf_float+0x188>
 801bae4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801bae8:	4639      	mov	r1, r7
 801baea:	4640      	mov	r0, r8
 801baec:	4798      	blx	r3
 801baee:	2800      	cmp	r0, #0
 801baf0:	f43f aedf 	beq.w	801b8b2 <_scanf_float+0x46>
 801baf4:	e6ea      	b.n	801b8cc <_scanf_float+0x60>
 801baf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bafa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bafe:	463a      	mov	r2, r7
 801bb00:	4640      	mov	r0, r8
 801bb02:	4798      	blx	r3
 801bb04:	6923      	ldr	r3, [r4, #16]
 801bb06:	3b01      	subs	r3, #1
 801bb08:	6123      	str	r3, [r4, #16]
 801bb0a:	e6ec      	b.n	801b8e6 <_scanf_float+0x7a>
 801bb0c:	1e6b      	subs	r3, r5, #1
 801bb0e:	2b06      	cmp	r3, #6
 801bb10:	d825      	bhi.n	801bb5e <_scanf_float+0x2f2>
 801bb12:	2d02      	cmp	r5, #2
 801bb14:	d836      	bhi.n	801bb84 <_scanf_float+0x318>
 801bb16:	455e      	cmp	r6, fp
 801bb18:	f67f aee8 	bls.w	801b8ec <_scanf_float+0x80>
 801bb1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bb20:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bb24:	463a      	mov	r2, r7
 801bb26:	4640      	mov	r0, r8
 801bb28:	4798      	blx	r3
 801bb2a:	6923      	ldr	r3, [r4, #16]
 801bb2c:	3b01      	subs	r3, #1
 801bb2e:	6123      	str	r3, [r4, #16]
 801bb30:	e7f1      	b.n	801bb16 <_scanf_float+0x2aa>
 801bb32:	9802      	ldr	r0, [sp, #8]
 801bb34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bb38:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801bb3c:	9002      	str	r0, [sp, #8]
 801bb3e:	463a      	mov	r2, r7
 801bb40:	4640      	mov	r0, r8
 801bb42:	4798      	blx	r3
 801bb44:	6923      	ldr	r3, [r4, #16]
 801bb46:	3b01      	subs	r3, #1
 801bb48:	6123      	str	r3, [r4, #16]
 801bb4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bb4e:	fa5f fa8a 	uxtb.w	sl, sl
 801bb52:	f1ba 0f02 	cmp.w	sl, #2
 801bb56:	d1ec      	bne.n	801bb32 <_scanf_float+0x2c6>
 801bb58:	3d03      	subs	r5, #3
 801bb5a:	b2ed      	uxtb	r5, r5
 801bb5c:	1b76      	subs	r6, r6, r5
 801bb5e:	6823      	ldr	r3, [r4, #0]
 801bb60:	05da      	lsls	r2, r3, #23
 801bb62:	d52f      	bpl.n	801bbc4 <_scanf_float+0x358>
 801bb64:	055b      	lsls	r3, r3, #21
 801bb66:	d510      	bpl.n	801bb8a <_scanf_float+0x31e>
 801bb68:	455e      	cmp	r6, fp
 801bb6a:	f67f aebf 	bls.w	801b8ec <_scanf_float+0x80>
 801bb6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bb72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bb76:	463a      	mov	r2, r7
 801bb78:	4640      	mov	r0, r8
 801bb7a:	4798      	blx	r3
 801bb7c:	6923      	ldr	r3, [r4, #16]
 801bb7e:	3b01      	subs	r3, #1
 801bb80:	6123      	str	r3, [r4, #16]
 801bb82:	e7f1      	b.n	801bb68 <_scanf_float+0x2fc>
 801bb84:	46aa      	mov	sl, r5
 801bb86:	9602      	str	r6, [sp, #8]
 801bb88:	e7df      	b.n	801bb4a <_scanf_float+0x2de>
 801bb8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801bb8e:	6923      	ldr	r3, [r4, #16]
 801bb90:	2965      	cmp	r1, #101	; 0x65
 801bb92:	f103 33ff 	add.w	r3, r3, #4294967295
 801bb96:	f106 35ff 	add.w	r5, r6, #4294967295
 801bb9a:	6123      	str	r3, [r4, #16]
 801bb9c:	d00c      	beq.n	801bbb8 <_scanf_float+0x34c>
 801bb9e:	2945      	cmp	r1, #69	; 0x45
 801bba0:	d00a      	beq.n	801bbb8 <_scanf_float+0x34c>
 801bba2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bba6:	463a      	mov	r2, r7
 801bba8:	4640      	mov	r0, r8
 801bbaa:	4798      	blx	r3
 801bbac:	6923      	ldr	r3, [r4, #16]
 801bbae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801bbb2:	3b01      	subs	r3, #1
 801bbb4:	1eb5      	subs	r5, r6, #2
 801bbb6:	6123      	str	r3, [r4, #16]
 801bbb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bbbc:	463a      	mov	r2, r7
 801bbbe:	4640      	mov	r0, r8
 801bbc0:	4798      	blx	r3
 801bbc2:	462e      	mov	r6, r5
 801bbc4:	6825      	ldr	r5, [r4, #0]
 801bbc6:	f015 0510 	ands.w	r5, r5, #16
 801bbca:	d14d      	bne.n	801bc68 <_scanf_float+0x3fc>
 801bbcc:	7035      	strb	r5, [r6, #0]
 801bbce:	6823      	ldr	r3, [r4, #0]
 801bbd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801bbd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bbd8:	d11a      	bne.n	801bc10 <_scanf_float+0x3a4>
 801bbda:	9b01      	ldr	r3, [sp, #4]
 801bbdc:	454b      	cmp	r3, r9
 801bbde:	eba3 0209 	sub.w	r2, r3, r9
 801bbe2:	d122      	bne.n	801bc2a <_scanf_float+0x3be>
 801bbe4:	2200      	movs	r2, #0
 801bbe6:	4659      	mov	r1, fp
 801bbe8:	4640      	mov	r0, r8
 801bbea:	f002 fb9f 	bl	801e32c <_strtod_r>
 801bbee:	9b03      	ldr	r3, [sp, #12]
 801bbf0:	6821      	ldr	r1, [r4, #0]
 801bbf2:	681b      	ldr	r3, [r3, #0]
 801bbf4:	f011 0f02 	tst.w	r1, #2
 801bbf8:	f103 0204 	add.w	r2, r3, #4
 801bbfc:	d020      	beq.n	801bc40 <_scanf_float+0x3d4>
 801bbfe:	9903      	ldr	r1, [sp, #12]
 801bc00:	600a      	str	r2, [r1, #0]
 801bc02:	681b      	ldr	r3, [r3, #0]
 801bc04:	ed83 0b00 	vstr	d0, [r3]
 801bc08:	68e3      	ldr	r3, [r4, #12]
 801bc0a:	3301      	adds	r3, #1
 801bc0c:	60e3      	str	r3, [r4, #12]
 801bc0e:	e66e      	b.n	801b8ee <_scanf_float+0x82>
 801bc10:	9b04      	ldr	r3, [sp, #16]
 801bc12:	2b00      	cmp	r3, #0
 801bc14:	d0e6      	beq.n	801bbe4 <_scanf_float+0x378>
 801bc16:	9905      	ldr	r1, [sp, #20]
 801bc18:	230a      	movs	r3, #10
 801bc1a:	462a      	mov	r2, r5
 801bc1c:	3101      	adds	r1, #1
 801bc1e:	4640      	mov	r0, r8
 801bc20:	f002 fc0c 	bl	801e43c <_strtol_r>
 801bc24:	9b04      	ldr	r3, [sp, #16]
 801bc26:	9e05      	ldr	r6, [sp, #20]
 801bc28:	1ac2      	subs	r2, r0, r3
 801bc2a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801bc2e:	429e      	cmp	r6, r3
 801bc30:	bf28      	it	cs
 801bc32:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801bc36:	490d      	ldr	r1, [pc, #52]	; (801bc6c <_scanf_float+0x400>)
 801bc38:	4630      	mov	r0, r6
 801bc3a:	f000 f8dd 	bl	801bdf8 <siprintf>
 801bc3e:	e7d1      	b.n	801bbe4 <_scanf_float+0x378>
 801bc40:	f011 0f04 	tst.w	r1, #4
 801bc44:	9903      	ldr	r1, [sp, #12]
 801bc46:	600a      	str	r2, [r1, #0]
 801bc48:	d1db      	bne.n	801bc02 <_scanf_float+0x396>
 801bc4a:	eeb4 0b40 	vcmp.f64	d0, d0
 801bc4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc52:	681e      	ldr	r6, [r3, #0]
 801bc54:	d705      	bvc.n	801bc62 <_scanf_float+0x3f6>
 801bc56:	4806      	ldr	r0, [pc, #24]	; (801bc70 <_scanf_float+0x404>)
 801bc58:	f000 f9f6 	bl	801c048 <nanf>
 801bc5c:	ed86 0a00 	vstr	s0, [r6]
 801bc60:	e7d2      	b.n	801bc08 <_scanf_float+0x39c>
 801bc62:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801bc66:	e7f9      	b.n	801bc5c <_scanf_float+0x3f0>
 801bc68:	2500      	movs	r5, #0
 801bc6a:	e640      	b.n	801b8ee <_scanf_float+0x82>
 801bc6c:	08020606 	.word	0x08020606
 801bc70:	080209b8 	.word	0x080209b8

0801bc74 <std>:
 801bc74:	2300      	movs	r3, #0
 801bc76:	b510      	push	{r4, lr}
 801bc78:	4604      	mov	r4, r0
 801bc7a:	e9c0 3300 	strd	r3, r3, [r0]
 801bc7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bc82:	6083      	str	r3, [r0, #8]
 801bc84:	8181      	strh	r1, [r0, #12]
 801bc86:	6643      	str	r3, [r0, #100]	; 0x64
 801bc88:	81c2      	strh	r2, [r0, #14]
 801bc8a:	6183      	str	r3, [r0, #24]
 801bc8c:	4619      	mov	r1, r3
 801bc8e:	2208      	movs	r2, #8
 801bc90:	305c      	adds	r0, #92	; 0x5c
 801bc92:	f000 f942 	bl	801bf1a <memset>
 801bc96:	4b0d      	ldr	r3, [pc, #52]	; (801bccc <std+0x58>)
 801bc98:	6263      	str	r3, [r4, #36]	; 0x24
 801bc9a:	4b0d      	ldr	r3, [pc, #52]	; (801bcd0 <std+0x5c>)
 801bc9c:	62a3      	str	r3, [r4, #40]	; 0x28
 801bc9e:	4b0d      	ldr	r3, [pc, #52]	; (801bcd4 <std+0x60>)
 801bca0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801bca2:	4b0d      	ldr	r3, [pc, #52]	; (801bcd8 <std+0x64>)
 801bca4:	6323      	str	r3, [r4, #48]	; 0x30
 801bca6:	4b0d      	ldr	r3, [pc, #52]	; (801bcdc <std+0x68>)
 801bca8:	6224      	str	r4, [r4, #32]
 801bcaa:	429c      	cmp	r4, r3
 801bcac:	d006      	beq.n	801bcbc <std+0x48>
 801bcae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801bcb2:	4294      	cmp	r4, r2
 801bcb4:	d002      	beq.n	801bcbc <std+0x48>
 801bcb6:	33d0      	adds	r3, #208	; 0xd0
 801bcb8:	429c      	cmp	r4, r3
 801bcba:	d105      	bne.n	801bcc8 <std+0x54>
 801bcbc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801bcc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bcc4:	f000 b9a6 	b.w	801c014 <__retarget_lock_init_recursive>
 801bcc8:	bd10      	pop	{r4, pc}
 801bcca:	bf00      	nop
 801bccc:	0801be91 	.word	0x0801be91
 801bcd0:	0801beb7 	.word	0x0801beb7
 801bcd4:	0801beef 	.word	0x0801beef
 801bcd8:	0801bf13 	.word	0x0801bf13
 801bcdc:	240034e4 	.word	0x240034e4

0801bce0 <stdio_exit_handler>:
 801bce0:	4a02      	ldr	r2, [pc, #8]	; (801bcec <stdio_exit_handler+0xc>)
 801bce2:	4903      	ldr	r1, [pc, #12]	; (801bcf0 <stdio_exit_handler+0x10>)
 801bce4:	4803      	ldr	r0, [pc, #12]	; (801bcf4 <stdio_exit_handler+0x14>)
 801bce6:	f000 b869 	b.w	801bdbc <_fwalk_sglue>
 801bcea:	bf00      	nop
 801bcec:	24000100 	.word	0x24000100
 801bcf0:	0801ee3d 	.word	0x0801ee3d
 801bcf4:	2400010c 	.word	0x2400010c

0801bcf8 <cleanup_stdio>:
 801bcf8:	6841      	ldr	r1, [r0, #4]
 801bcfa:	4b0c      	ldr	r3, [pc, #48]	; (801bd2c <cleanup_stdio+0x34>)
 801bcfc:	4299      	cmp	r1, r3
 801bcfe:	b510      	push	{r4, lr}
 801bd00:	4604      	mov	r4, r0
 801bd02:	d001      	beq.n	801bd08 <cleanup_stdio+0x10>
 801bd04:	f003 f89a 	bl	801ee3c <_fflush_r>
 801bd08:	68a1      	ldr	r1, [r4, #8]
 801bd0a:	4b09      	ldr	r3, [pc, #36]	; (801bd30 <cleanup_stdio+0x38>)
 801bd0c:	4299      	cmp	r1, r3
 801bd0e:	d002      	beq.n	801bd16 <cleanup_stdio+0x1e>
 801bd10:	4620      	mov	r0, r4
 801bd12:	f003 f893 	bl	801ee3c <_fflush_r>
 801bd16:	68e1      	ldr	r1, [r4, #12]
 801bd18:	4b06      	ldr	r3, [pc, #24]	; (801bd34 <cleanup_stdio+0x3c>)
 801bd1a:	4299      	cmp	r1, r3
 801bd1c:	d004      	beq.n	801bd28 <cleanup_stdio+0x30>
 801bd1e:	4620      	mov	r0, r4
 801bd20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd24:	f003 b88a 	b.w	801ee3c <_fflush_r>
 801bd28:	bd10      	pop	{r4, pc}
 801bd2a:	bf00      	nop
 801bd2c:	240034e4 	.word	0x240034e4
 801bd30:	2400354c 	.word	0x2400354c
 801bd34:	240035b4 	.word	0x240035b4

0801bd38 <global_stdio_init.part.0>:
 801bd38:	b510      	push	{r4, lr}
 801bd3a:	4b0b      	ldr	r3, [pc, #44]	; (801bd68 <global_stdio_init.part.0+0x30>)
 801bd3c:	4c0b      	ldr	r4, [pc, #44]	; (801bd6c <global_stdio_init.part.0+0x34>)
 801bd3e:	4a0c      	ldr	r2, [pc, #48]	; (801bd70 <global_stdio_init.part.0+0x38>)
 801bd40:	601a      	str	r2, [r3, #0]
 801bd42:	4620      	mov	r0, r4
 801bd44:	2200      	movs	r2, #0
 801bd46:	2104      	movs	r1, #4
 801bd48:	f7ff ff94 	bl	801bc74 <std>
 801bd4c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801bd50:	2201      	movs	r2, #1
 801bd52:	2109      	movs	r1, #9
 801bd54:	f7ff ff8e 	bl	801bc74 <std>
 801bd58:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801bd5c:	2202      	movs	r2, #2
 801bd5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd62:	2112      	movs	r1, #18
 801bd64:	f7ff bf86 	b.w	801bc74 <std>
 801bd68:	2400361c 	.word	0x2400361c
 801bd6c:	240034e4 	.word	0x240034e4
 801bd70:	0801bce1 	.word	0x0801bce1

0801bd74 <__sfp_lock_acquire>:
 801bd74:	4801      	ldr	r0, [pc, #4]	; (801bd7c <__sfp_lock_acquire+0x8>)
 801bd76:	f000 b94e 	b.w	801c016 <__retarget_lock_acquire_recursive>
 801bd7a:	bf00      	nop
 801bd7c:	24003625 	.word	0x24003625

0801bd80 <__sfp_lock_release>:
 801bd80:	4801      	ldr	r0, [pc, #4]	; (801bd88 <__sfp_lock_release+0x8>)
 801bd82:	f000 b949 	b.w	801c018 <__retarget_lock_release_recursive>
 801bd86:	bf00      	nop
 801bd88:	24003625 	.word	0x24003625

0801bd8c <__sinit>:
 801bd8c:	b510      	push	{r4, lr}
 801bd8e:	4604      	mov	r4, r0
 801bd90:	f7ff fff0 	bl	801bd74 <__sfp_lock_acquire>
 801bd94:	6a23      	ldr	r3, [r4, #32]
 801bd96:	b11b      	cbz	r3, 801bda0 <__sinit+0x14>
 801bd98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd9c:	f7ff bff0 	b.w	801bd80 <__sfp_lock_release>
 801bda0:	4b04      	ldr	r3, [pc, #16]	; (801bdb4 <__sinit+0x28>)
 801bda2:	6223      	str	r3, [r4, #32]
 801bda4:	4b04      	ldr	r3, [pc, #16]	; (801bdb8 <__sinit+0x2c>)
 801bda6:	681b      	ldr	r3, [r3, #0]
 801bda8:	2b00      	cmp	r3, #0
 801bdaa:	d1f5      	bne.n	801bd98 <__sinit+0xc>
 801bdac:	f7ff ffc4 	bl	801bd38 <global_stdio_init.part.0>
 801bdb0:	e7f2      	b.n	801bd98 <__sinit+0xc>
 801bdb2:	bf00      	nop
 801bdb4:	0801bcf9 	.word	0x0801bcf9
 801bdb8:	2400361c 	.word	0x2400361c

0801bdbc <_fwalk_sglue>:
 801bdbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bdc0:	4607      	mov	r7, r0
 801bdc2:	4688      	mov	r8, r1
 801bdc4:	4614      	mov	r4, r2
 801bdc6:	2600      	movs	r6, #0
 801bdc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801bdcc:	f1b9 0901 	subs.w	r9, r9, #1
 801bdd0:	d505      	bpl.n	801bdde <_fwalk_sglue+0x22>
 801bdd2:	6824      	ldr	r4, [r4, #0]
 801bdd4:	2c00      	cmp	r4, #0
 801bdd6:	d1f7      	bne.n	801bdc8 <_fwalk_sglue+0xc>
 801bdd8:	4630      	mov	r0, r6
 801bdda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bdde:	89ab      	ldrh	r3, [r5, #12]
 801bde0:	2b01      	cmp	r3, #1
 801bde2:	d907      	bls.n	801bdf4 <_fwalk_sglue+0x38>
 801bde4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801bde8:	3301      	adds	r3, #1
 801bdea:	d003      	beq.n	801bdf4 <_fwalk_sglue+0x38>
 801bdec:	4629      	mov	r1, r5
 801bdee:	4638      	mov	r0, r7
 801bdf0:	47c0      	blx	r8
 801bdf2:	4306      	orrs	r6, r0
 801bdf4:	3568      	adds	r5, #104	; 0x68
 801bdf6:	e7e9      	b.n	801bdcc <_fwalk_sglue+0x10>

0801bdf8 <siprintf>:
 801bdf8:	b40e      	push	{r1, r2, r3}
 801bdfa:	b500      	push	{lr}
 801bdfc:	b09c      	sub	sp, #112	; 0x70
 801bdfe:	ab1d      	add	r3, sp, #116	; 0x74
 801be00:	9002      	str	r0, [sp, #8]
 801be02:	9006      	str	r0, [sp, #24]
 801be04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801be08:	4809      	ldr	r0, [pc, #36]	; (801be30 <siprintf+0x38>)
 801be0a:	9107      	str	r1, [sp, #28]
 801be0c:	9104      	str	r1, [sp, #16]
 801be0e:	4909      	ldr	r1, [pc, #36]	; (801be34 <siprintf+0x3c>)
 801be10:	f853 2b04 	ldr.w	r2, [r3], #4
 801be14:	9105      	str	r1, [sp, #20]
 801be16:	6800      	ldr	r0, [r0, #0]
 801be18:	9301      	str	r3, [sp, #4]
 801be1a:	a902      	add	r1, sp, #8
 801be1c:	f002 fb6a 	bl	801e4f4 <_svfiprintf_r>
 801be20:	9b02      	ldr	r3, [sp, #8]
 801be22:	2200      	movs	r2, #0
 801be24:	701a      	strb	r2, [r3, #0]
 801be26:	b01c      	add	sp, #112	; 0x70
 801be28:	f85d eb04 	ldr.w	lr, [sp], #4
 801be2c:	b003      	add	sp, #12
 801be2e:	4770      	bx	lr
 801be30:	24000158 	.word	0x24000158
 801be34:	ffff0208 	.word	0xffff0208

0801be38 <siscanf>:
 801be38:	b40e      	push	{r1, r2, r3}
 801be3a:	b510      	push	{r4, lr}
 801be3c:	b09f      	sub	sp, #124	; 0x7c
 801be3e:	ac21      	add	r4, sp, #132	; 0x84
 801be40:	f44f 7101 	mov.w	r1, #516	; 0x204
 801be44:	f854 2b04 	ldr.w	r2, [r4], #4
 801be48:	9201      	str	r2, [sp, #4]
 801be4a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801be4e:	9004      	str	r0, [sp, #16]
 801be50:	9008      	str	r0, [sp, #32]
 801be52:	f7e4 fabd 	bl	80003d0 <strlen>
 801be56:	4b0c      	ldr	r3, [pc, #48]	; (801be88 <siscanf+0x50>)
 801be58:	9005      	str	r0, [sp, #20]
 801be5a:	9009      	str	r0, [sp, #36]	; 0x24
 801be5c:	930d      	str	r3, [sp, #52]	; 0x34
 801be5e:	480b      	ldr	r0, [pc, #44]	; (801be8c <siscanf+0x54>)
 801be60:	9a01      	ldr	r2, [sp, #4]
 801be62:	6800      	ldr	r0, [r0, #0]
 801be64:	9403      	str	r4, [sp, #12]
 801be66:	2300      	movs	r3, #0
 801be68:	9311      	str	r3, [sp, #68]	; 0x44
 801be6a:	9316      	str	r3, [sp, #88]	; 0x58
 801be6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801be70:	f8ad 301e 	strh.w	r3, [sp, #30]
 801be74:	a904      	add	r1, sp, #16
 801be76:	4623      	mov	r3, r4
 801be78:	f002 fc94 	bl	801e7a4 <__ssvfiscanf_r>
 801be7c:	b01f      	add	sp, #124	; 0x7c
 801be7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801be82:	b003      	add	sp, #12
 801be84:	4770      	bx	lr
 801be86:	bf00      	nop
 801be88:	0801beb3 	.word	0x0801beb3
 801be8c:	24000158 	.word	0x24000158

0801be90 <__sread>:
 801be90:	b510      	push	{r4, lr}
 801be92:	460c      	mov	r4, r1
 801be94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801be98:	f000 f86e 	bl	801bf78 <_read_r>
 801be9c:	2800      	cmp	r0, #0
 801be9e:	bfab      	itete	ge
 801bea0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801bea2:	89a3      	ldrhlt	r3, [r4, #12]
 801bea4:	181b      	addge	r3, r3, r0
 801bea6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801beaa:	bfac      	ite	ge
 801beac:	6563      	strge	r3, [r4, #84]	; 0x54
 801beae:	81a3      	strhlt	r3, [r4, #12]
 801beb0:	bd10      	pop	{r4, pc}

0801beb2 <__seofread>:
 801beb2:	2000      	movs	r0, #0
 801beb4:	4770      	bx	lr

0801beb6 <__swrite>:
 801beb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801beba:	461f      	mov	r7, r3
 801bebc:	898b      	ldrh	r3, [r1, #12]
 801bebe:	05db      	lsls	r3, r3, #23
 801bec0:	4605      	mov	r5, r0
 801bec2:	460c      	mov	r4, r1
 801bec4:	4616      	mov	r6, r2
 801bec6:	d505      	bpl.n	801bed4 <__swrite+0x1e>
 801bec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801becc:	2302      	movs	r3, #2
 801bece:	2200      	movs	r2, #0
 801bed0:	f000 f840 	bl	801bf54 <_lseek_r>
 801bed4:	89a3      	ldrh	r3, [r4, #12]
 801bed6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801beda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bede:	81a3      	strh	r3, [r4, #12]
 801bee0:	4632      	mov	r2, r6
 801bee2:	463b      	mov	r3, r7
 801bee4:	4628      	mov	r0, r5
 801bee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801beea:	f000 b857 	b.w	801bf9c <_write_r>

0801beee <__sseek>:
 801beee:	b510      	push	{r4, lr}
 801bef0:	460c      	mov	r4, r1
 801bef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bef6:	f000 f82d 	bl	801bf54 <_lseek_r>
 801befa:	1c43      	adds	r3, r0, #1
 801befc:	89a3      	ldrh	r3, [r4, #12]
 801befe:	bf15      	itete	ne
 801bf00:	6560      	strne	r0, [r4, #84]	; 0x54
 801bf02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801bf06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801bf0a:	81a3      	strheq	r3, [r4, #12]
 801bf0c:	bf18      	it	ne
 801bf0e:	81a3      	strhne	r3, [r4, #12]
 801bf10:	bd10      	pop	{r4, pc}

0801bf12 <__sclose>:
 801bf12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bf16:	f000 b80d 	b.w	801bf34 <_close_r>

0801bf1a <memset>:
 801bf1a:	4402      	add	r2, r0
 801bf1c:	4603      	mov	r3, r0
 801bf1e:	4293      	cmp	r3, r2
 801bf20:	d100      	bne.n	801bf24 <memset+0xa>
 801bf22:	4770      	bx	lr
 801bf24:	f803 1b01 	strb.w	r1, [r3], #1
 801bf28:	e7f9      	b.n	801bf1e <memset+0x4>
	...

0801bf2c <_localeconv_r>:
 801bf2c:	4800      	ldr	r0, [pc, #0]	; (801bf30 <_localeconv_r+0x4>)
 801bf2e:	4770      	bx	lr
 801bf30:	2400024c 	.word	0x2400024c

0801bf34 <_close_r>:
 801bf34:	b538      	push	{r3, r4, r5, lr}
 801bf36:	4d06      	ldr	r5, [pc, #24]	; (801bf50 <_close_r+0x1c>)
 801bf38:	2300      	movs	r3, #0
 801bf3a:	4604      	mov	r4, r0
 801bf3c:	4608      	mov	r0, r1
 801bf3e:	602b      	str	r3, [r5, #0]
 801bf40:	f7e8 f815 	bl	8003f6e <_close>
 801bf44:	1c43      	adds	r3, r0, #1
 801bf46:	d102      	bne.n	801bf4e <_close_r+0x1a>
 801bf48:	682b      	ldr	r3, [r5, #0]
 801bf4a:	b103      	cbz	r3, 801bf4e <_close_r+0x1a>
 801bf4c:	6023      	str	r3, [r4, #0]
 801bf4e:	bd38      	pop	{r3, r4, r5, pc}
 801bf50:	24003620 	.word	0x24003620

0801bf54 <_lseek_r>:
 801bf54:	b538      	push	{r3, r4, r5, lr}
 801bf56:	4d07      	ldr	r5, [pc, #28]	; (801bf74 <_lseek_r+0x20>)
 801bf58:	4604      	mov	r4, r0
 801bf5a:	4608      	mov	r0, r1
 801bf5c:	4611      	mov	r1, r2
 801bf5e:	2200      	movs	r2, #0
 801bf60:	602a      	str	r2, [r5, #0]
 801bf62:	461a      	mov	r2, r3
 801bf64:	f7e8 f82a 	bl	8003fbc <_lseek>
 801bf68:	1c43      	adds	r3, r0, #1
 801bf6a:	d102      	bne.n	801bf72 <_lseek_r+0x1e>
 801bf6c:	682b      	ldr	r3, [r5, #0]
 801bf6e:	b103      	cbz	r3, 801bf72 <_lseek_r+0x1e>
 801bf70:	6023      	str	r3, [r4, #0]
 801bf72:	bd38      	pop	{r3, r4, r5, pc}
 801bf74:	24003620 	.word	0x24003620

0801bf78 <_read_r>:
 801bf78:	b538      	push	{r3, r4, r5, lr}
 801bf7a:	4d07      	ldr	r5, [pc, #28]	; (801bf98 <_read_r+0x20>)
 801bf7c:	4604      	mov	r4, r0
 801bf7e:	4608      	mov	r0, r1
 801bf80:	4611      	mov	r1, r2
 801bf82:	2200      	movs	r2, #0
 801bf84:	602a      	str	r2, [r5, #0]
 801bf86:	461a      	mov	r2, r3
 801bf88:	f7e7 ffb8 	bl	8003efc <_read>
 801bf8c:	1c43      	adds	r3, r0, #1
 801bf8e:	d102      	bne.n	801bf96 <_read_r+0x1e>
 801bf90:	682b      	ldr	r3, [r5, #0]
 801bf92:	b103      	cbz	r3, 801bf96 <_read_r+0x1e>
 801bf94:	6023      	str	r3, [r4, #0]
 801bf96:	bd38      	pop	{r3, r4, r5, pc}
 801bf98:	24003620 	.word	0x24003620

0801bf9c <_write_r>:
 801bf9c:	b538      	push	{r3, r4, r5, lr}
 801bf9e:	4d07      	ldr	r5, [pc, #28]	; (801bfbc <_write_r+0x20>)
 801bfa0:	4604      	mov	r4, r0
 801bfa2:	4608      	mov	r0, r1
 801bfa4:	4611      	mov	r1, r2
 801bfa6:	2200      	movs	r2, #0
 801bfa8:	602a      	str	r2, [r5, #0]
 801bfaa:	461a      	mov	r2, r3
 801bfac:	f7e7 ffc3 	bl	8003f36 <_write>
 801bfb0:	1c43      	adds	r3, r0, #1
 801bfb2:	d102      	bne.n	801bfba <_write_r+0x1e>
 801bfb4:	682b      	ldr	r3, [r5, #0]
 801bfb6:	b103      	cbz	r3, 801bfba <_write_r+0x1e>
 801bfb8:	6023      	str	r3, [r4, #0]
 801bfba:	bd38      	pop	{r3, r4, r5, pc}
 801bfbc:	24003620 	.word	0x24003620

0801bfc0 <__errno>:
 801bfc0:	4b01      	ldr	r3, [pc, #4]	; (801bfc8 <__errno+0x8>)
 801bfc2:	6818      	ldr	r0, [r3, #0]
 801bfc4:	4770      	bx	lr
 801bfc6:	bf00      	nop
 801bfc8:	24000158 	.word	0x24000158

0801bfcc <__libc_init_array>:
 801bfcc:	b570      	push	{r4, r5, r6, lr}
 801bfce:	4d0d      	ldr	r5, [pc, #52]	; (801c004 <__libc_init_array+0x38>)
 801bfd0:	4c0d      	ldr	r4, [pc, #52]	; (801c008 <__libc_init_array+0x3c>)
 801bfd2:	1b64      	subs	r4, r4, r5
 801bfd4:	10a4      	asrs	r4, r4, #2
 801bfd6:	2600      	movs	r6, #0
 801bfd8:	42a6      	cmp	r6, r4
 801bfda:	d109      	bne.n	801bff0 <__libc_init_array+0x24>
 801bfdc:	4d0b      	ldr	r5, [pc, #44]	; (801c00c <__libc_init_array+0x40>)
 801bfde:	4c0c      	ldr	r4, [pc, #48]	; (801c010 <__libc_init_array+0x44>)
 801bfe0:	f003 ff1e 	bl	801fe20 <_init>
 801bfe4:	1b64      	subs	r4, r4, r5
 801bfe6:	10a4      	asrs	r4, r4, #2
 801bfe8:	2600      	movs	r6, #0
 801bfea:	42a6      	cmp	r6, r4
 801bfec:	d105      	bne.n	801bffa <__libc_init_array+0x2e>
 801bfee:	bd70      	pop	{r4, r5, r6, pc}
 801bff0:	f855 3b04 	ldr.w	r3, [r5], #4
 801bff4:	4798      	blx	r3
 801bff6:	3601      	adds	r6, #1
 801bff8:	e7ee      	b.n	801bfd8 <__libc_init_array+0xc>
 801bffa:	f855 3b04 	ldr.w	r3, [r5], #4
 801bffe:	4798      	blx	r3
 801c000:	3601      	adds	r6, #1
 801c002:	e7f2      	b.n	801bfea <__libc_init_array+0x1e>
 801c004:	08020a24 	.word	0x08020a24
 801c008:	08020a24 	.word	0x08020a24
 801c00c:	08020a24 	.word	0x08020a24
 801c010:	08020a28 	.word	0x08020a28

0801c014 <__retarget_lock_init_recursive>:
 801c014:	4770      	bx	lr

0801c016 <__retarget_lock_acquire_recursive>:
 801c016:	4770      	bx	lr

0801c018 <__retarget_lock_release_recursive>:
 801c018:	4770      	bx	lr

0801c01a <strcpy>:
 801c01a:	4603      	mov	r3, r0
 801c01c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c020:	f803 2b01 	strb.w	r2, [r3], #1
 801c024:	2a00      	cmp	r2, #0
 801c026:	d1f9      	bne.n	801c01c <strcpy+0x2>
 801c028:	4770      	bx	lr

0801c02a <memcpy>:
 801c02a:	440a      	add	r2, r1
 801c02c:	4291      	cmp	r1, r2
 801c02e:	f100 33ff 	add.w	r3, r0, #4294967295
 801c032:	d100      	bne.n	801c036 <memcpy+0xc>
 801c034:	4770      	bx	lr
 801c036:	b510      	push	{r4, lr}
 801c038:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c03c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c040:	4291      	cmp	r1, r2
 801c042:	d1f9      	bne.n	801c038 <memcpy+0xe>
 801c044:	bd10      	pop	{r4, pc}
	...

0801c048 <nanf>:
 801c048:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801c050 <nanf+0x8>
 801c04c:	4770      	bx	lr
 801c04e:	bf00      	nop
 801c050:	7fc00000 	.word	0x7fc00000

0801c054 <quorem>:
 801c054:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c058:	6903      	ldr	r3, [r0, #16]
 801c05a:	690c      	ldr	r4, [r1, #16]
 801c05c:	42a3      	cmp	r3, r4
 801c05e:	4607      	mov	r7, r0
 801c060:	db7e      	blt.n	801c160 <quorem+0x10c>
 801c062:	3c01      	subs	r4, #1
 801c064:	f101 0814 	add.w	r8, r1, #20
 801c068:	f100 0514 	add.w	r5, r0, #20
 801c06c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c070:	9301      	str	r3, [sp, #4]
 801c072:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c076:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c07a:	3301      	adds	r3, #1
 801c07c:	429a      	cmp	r2, r3
 801c07e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801c082:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c086:	fbb2 f6f3 	udiv	r6, r2, r3
 801c08a:	d331      	bcc.n	801c0f0 <quorem+0x9c>
 801c08c:	f04f 0e00 	mov.w	lr, #0
 801c090:	4640      	mov	r0, r8
 801c092:	46ac      	mov	ip, r5
 801c094:	46f2      	mov	sl, lr
 801c096:	f850 2b04 	ldr.w	r2, [r0], #4
 801c09a:	b293      	uxth	r3, r2
 801c09c:	fb06 e303 	mla	r3, r6, r3, lr
 801c0a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c0a4:	0c1a      	lsrs	r2, r3, #16
 801c0a6:	b29b      	uxth	r3, r3
 801c0a8:	ebaa 0303 	sub.w	r3, sl, r3
 801c0ac:	f8dc a000 	ldr.w	sl, [ip]
 801c0b0:	fa13 f38a 	uxtah	r3, r3, sl
 801c0b4:	fb06 220e 	mla	r2, r6, lr, r2
 801c0b8:	9300      	str	r3, [sp, #0]
 801c0ba:	9b00      	ldr	r3, [sp, #0]
 801c0bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c0c0:	b292      	uxth	r2, r2
 801c0c2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801c0c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c0ca:	f8bd 3000 	ldrh.w	r3, [sp]
 801c0ce:	4581      	cmp	r9, r0
 801c0d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c0d4:	f84c 3b04 	str.w	r3, [ip], #4
 801c0d8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801c0dc:	d2db      	bcs.n	801c096 <quorem+0x42>
 801c0de:	f855 300b 	ldr.w	r3, [r5, fp]
 801c0e2:	b92b      	cbnz	r3, 801c0f0 <quorem+0x9c>
 801c0e4:	9b01      	ldr	r3, [sp, #4]
 801c0e6:	3b04      	subs	r3, #4
 801c0e8:	429d      	cmp	r5, r3
 801c0ea:	461a      	mov	r2, r3
 801c0ec:	d32c      	bcc.n	801c148 <quorem+0xf4>
 801c0ee:	613c      	str	r4, [r7, #16]
 801c0f0:	4638      	mov	r0, r7
 801c0f2:	f001 f96b 	bl	801d3cc <__mcmp>
 801c0f6:	2800      	cmp	r0, #0
 801c0f8:	db22      	blt.n	801c140 <quorem+0xec>
 801c0fa:	3601      	adds	r6, #1
 801c0fc:	4629      	mov	r1, r5
 801c0fe:	2000      	movs	r0, #0
 801c100:	f858 2b04 	ldr.w	r2, [r8], #4
 801c104:	f8d1 c000 	ldr.w	ip, [r1]
 801c108:	b293      	uxth	r3, r2
 801c10a:	1ac3      	subs	r3, r0, r3
 801c10c:	0c12      	lsrs	r2, r2, #16
 801c10e:	fa13 f38c 	uxtah	r3, r3, ip
 801c112:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801c116:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c11a:	b29b      	uxth	r3, r3
 801c11c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c120:	45c1      	cmp	r9, r8
 801c122:	f841 3b04 	str.w	r3, [r1], #4
 801c126:	ea4f 4022 	mov.w	r0, r2, asr #16
 801c12a:	d2e9      	bcs.n	801c100 <quorem+0xac>
 801c12c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c130:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c134:	b922      	cbnz	r2, 801c140 <quorem+0xec>
 801c136:	3b04      	subs	r3, #4
 801c138:	429d      	cmp	r5, r3
 801c13a:	461a      	mov	r2, r3
 801c13c:	d30a      	bcc.n	801c154 <quorem+0x100>
 801c13e:	613c      	str	r4, [r7, #16]
 801c140:	4630      	mov	r0, r6
 801c142:	b003      	add	sp, #12
 801c144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c148:	6812      	ldr	r2, [r2, #0]
 801c14a:	3b04      	subs	r3, #4
 801c14c:	2a00      	cmp	r2, #0
 801c14e:	d1ce      	bne.n	801c0ee <quorem+0x9a>
 801c150:	3c01      	subs	r4, #1
 801c152:	e7c9      	b.n	801c0e8 <quorem+0x94>
 801c154:	6812      	ldr	r2, [r2, #0]
 801c156:	3b04      	subs	r3, #4
 801c158:	2a00      	cmp	r2, #0
 801c15a:	d1f0      	bne.n	801c13e <quorem+0xea>
 801c15c:	3c01      	subs	r4, #1
 801c15e:	e7eb      	b.n	801c138 <quorem+0xe4>
 801c160:	2000      	movs	r0, #0
 801c162:	e7ee      	b.n	801c142 <quorem+0xee>
 801c164:	0000      	movs	r0, r0
	...

0801c168 <_dtoa_r>:
 801c168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c16c:	ed2d 8b02 	vpush	{d8}
 801c170:	69c5      	ldr	r5, [r0, #28]
 801c172:	b091      	sub	sp, #68	; 0x44
 801c174:	ed8d 0b02 	vstr	d0, [sp, #8]
 801c178:	ec59 8b10 	vmov	r8, r9, d0
 801c17c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801c17e:	9106      	str	r1, [sp, #24]
 801c180:	4606      	mov	r6, r0
 801c182:	9208      	str	r2, [sp, #32]
 801c184:	930c      	str	r3, [sp, #48]	; 0x30
 801c186:	b975      	cbnz	r5, 801c1a6 <_dtoa_r+0x3e>
 801c188:	2010      	movs	r0, #16
 801c18a:	f000 fda5 	bl	801ccd8 <malloc>
 801c18e:	4602      	mov	r2, r0
 801c190:	61f0      	str	r0, [r6, #28]
 801c192:	b920      	cbnz	r0, 801c19e <_dtoa_r+0x36>
 801c194:	4ba6      	ldr	r3, [pc, #664]	; (801c430 <_dtoa_r+0x2c8>)
 801c196:	21ef      	movs	r1, #239	; 0xef
 801c198:	48a6      	ldr	r0, [pc, #664]	; (801c434 <_dtoa_r+0x2cc>)
 801c19a:	f002 ff31 	bl	801f000 <__assert_func>
 801c19e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c1a2:	6005      	str	r5, [r0, #0]
 801c1a4:	60c5      	str	r5, [r0, #12]
 801c1a6:	69f3      	ldr	r3, [r6, #28]
 801c1a8:	6819      	ldr	r1, [r3, #0]
 801c1aa:	b151      	cbz	r1, 801c1c2 <_dtoa_r+0x5a>
 801c1ac:	685a      	ldr	r2, [r3, #4]
 801c1ae:	604a      	str	r2, [r1, #4]
 801c1b0:	2301      	movs	r3, #1
 801c1b2:	4093      	lsls	r3, r2
 801c1b4:	608b      	str	r3, [r1, #8]
 801c1b6:	4630      	mov	r0, r6
 801c1b8:	f000 fe82 	bl	801cec0 <_Bfree>
 801c1bc:	69f3      	ldr	r3, [r6, #28]
 801c1be:	2200      	movs	r2, #0
 801c1c0:	601a      	str	r2, [r3, #0]
 801c1c2:	f1b9 0300 	subs.w	r3, r9, #0
 801c1c6:	bfbb      	ittet	lt
 801c1c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c1cc:	9303      	strlt	r3, [sp, #12]
 801c1ce:	2300      	movge	r3, #0
 801c1d0:	2201      	movlt	r2, #1
 801c1d2:	bfac      	ite	ge
 801c1d4:	6023      	strge	r3, [r4, #0]
 801c1d6:	6022      	strlt	r2, [r4, #0]
 801c1d8:	4b97      	ldr	r3, [pc, #604]	; (801c438 <_dtoa_r+0x2d0>)
 801c1da:	9c03      	ldr	r4, [sp, #12]
 801c1dc:	43a3      	bics	r3, r4
 801c1de:	d11c      	bne.n	801c21a <_dtoa_r+0xb2>
 801c1e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c1e2:	f242 730f 	movw	r3, #9999	; 0x270f
 801c1e6:	6013      	str	r3, [r2, #0]
 801c1e8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801c1ec:	ea53 0308 	orrs.w	r3, r3, r8
 801c1f0:	f000 84fb 	beq.w	801cbea <_dtoa_r+0xa82>
 801c1f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c1f6:	b963      	cbnz	r3, 801c212 <_dtoa_r+0xaa>
 801c1f8:	4b90      	ldr	r3, [pc, #576]	; (801c43c <_dtoa_r+0x2d4>)
 801c1fa:	e020      	b.n	801c23e <_dtoa_r+0xd6>
 801c1fc:	4b90      	ldr	r3, [pc, #576]	; (801c440 <_dtoa_r+0x2d8>)
 801c1fe:	9301      	str	r3, [sp, #4]
 801c200:	3308      	adds	r3, #8
 801c202:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801c204:	6013      	str	r3, [r2, #0]
 801c206:	9801      	ldr	r0, [sp, #4]
 801c208:	b011      	add	sp, #68	; 0x44
 801c20a:	ecbd 8b02 	vpop	{d8}
 801c20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c212:	4b8a      	ldr	r3, [pc, #552]	; (801c43c <_dtoa_r+0x2d4>)
 801c214:	9301      	str	r3, [sp, #4]
 801c216:	3303      	adds	r3, #3
 801c218:	e7f3      	b.n	801c202 <_dtoa_r+0x9a>
 801c21a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801c21e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801c222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c226:	d10c      	bne.n	801c242 <_dtoa_r+0xda>
 801c228:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c22a:	2301      	movs	r3, #1
 801c22c:	6013      	str	r3, [r2, #0]
 801c22e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c230:	2b00      	cmp	r3, #0
 801c232:	f000 84d7 	beq.w	801cbe4 <_dtoa_r+0xa7c>
 801c236:	4b83      	ldr	r3, [pc, #524]	; (801c444 <_dtoa_r+0x2dc>)
 801c238:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801c23a:	6013      	str	r3, [r2, #0]
 801c23c:	3b01      	subs	r3, #1
 801c23e:	9301      	str	r3, [sp, #4]
 801c240:	e7e1      	b.n	801c206 <_dtoa_r+0x9e>
 801c242:	aa0e      	add	r2, sp, #56	; 0x38
 801c244:	a90f      	add	r1, sp, #60	; 0x3c
 801c246:	4630      	mov	r0, r6
 801c248:	eeb0 0b48 	vmov.f64	d0, d8
 801c24c:	f001 f9d4 	bl	801d5f8 <__d2b>
 801c250:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801c254:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c256:	4605      	mov	r5, r0
 801c258:	2b00      	cmp	r3, #0
 801c25a:	d046      	beq.n	801c2ea <_dtoa_r+0x182>
 801c25c:	eeb0 7b48 	vmov.f64	d7, d8
 801c260:	ee18 1a90 	vmov	r1, s17
 801c264:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801c268:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801c26c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801c270:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c274:	2000      	movs	r0, #0
 801c276:	ee07 1a90 	vmov	s15, r1
 801c27a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801c27e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801c418 <_dtoa_r+0x2b0>
 801c282:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c286:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801c420 <_dtoa_r+0x2b8>
 801c28a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801c28e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801c428 <_dtoa_r+0x2c0>
 801c292:	ee07 3a90 	vmov	s15, r3
 801c296:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801c29a:	eeb0 7b46 	vmov.f64	d7, d6
 801c29e:	eea4 7b05 	vfma.f64	d7, d4, d5
 801c2a2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801c2a6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801c2aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2ae:	ee16 ba90 	vmov	fp, s13
 801c2b2:	9009      	str	r0, [sp, #36]	; 0x24
 801c2b4:	d508      	bpl.n	801c2c8 <_dtoa_r+0x160>
 801c2b6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801c2ba:	eeb4 6b47 	vcmp.f64	d6, d7
 801c2be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2c2:	bf18      	it	ne
 801c2c4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801c2c8:	f1bb 0f16 	cmp.w	fp, #22
 801c2cc:	d82b      	bhi.n	801c326 <_dtoa_r+0x1be>
 801c2ce:	495e      	ldr	r1, [pc, #376]	; (801c448 <_dtoa_r+0x2e0>)
 801c2d0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801c2d4:	ed91 7b00 	vldr	d7, [r1]
 801c2d8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801c2dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2e0:	d501      	bpl.n	801c2e6 <_dtoa_r+0x17e>
 801c2e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c2e6:	2100      	movs	r1, #0
 801c2e8:	e01e      	b.n	801c328 <_dtoa_r+0x1c0>
 801c2ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c2ec:	4413      	add	r3, r2
 801c2ee:	f203 4132 	addw	r1, r3, #1074	; 0x432
 801c2f2:	2920      	cmp	r1, #32
 801c2f4:	bfc1      	itttt	gt
 801c2f6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801c2fa:	408c      	lslgt	r4, r1
 801c2fc:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 801c300:	fa28 f101 	lsrgt.w	r1, r8, r1
 801c304:	bfd6      	itet	le
 801c306:	f1c1 0120 	rsble	r1, r1, #32
 801c30a:	4321      	orrgt	r1, r4
 801c30c:	fa08 f101 	lslle.w	r1, r8, r1
 801c310:	ee07 1a90 	vmov	s15, r1
 801c314:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801c318:	3b01      	subs	r3, #1
 801c31a:	ee17 1a90 	vmov	r1, s15
 801c31e:	2001      	movs	r0, #1
 801c320:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801c324:	e7a7      	b.n	801c276 <_dtoa_r+0x10e>
 801c326:	2101      	movs	r1, #1
 801c328:	1ad2      	subs	r2, r2, r3
 801c32a:	1e53      	subs	r3, r2, #1
 801c32c:	9305      	str	r3, [sp, #20]
 801c32e:	bf45      	ittet	mi
 801c330:	f1c2 0301 	rsbmi	r3, r2, #1
 801c334:	9304      	strmi	r3, [sp, #16]
 801c336:	2300      	movpl	r3, #0
 801c338:	2300      	movmi	r3, #0
 801c33a:	bf4c      	ite	mi
 801c33c:	9305      	strmi	r3, [sp, #20]
 801c33e:	9304      	strpl	r3, [sp, #16]
 801c340:	f1bb 0f00 	cmp.w	fp, #0
 801c344:	910b      	str	r1, [sp, #44]	; 0x2c
 801c346:	db18      	blt.n	801c37a <_dtoa_r+0x212>
 801c348:	9b05      	ldr	r3, [sp, #20]
 801c34a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801c34e:	445b      	add	r3, fp
 801c350:	9305      	str	r3, [sp, #20]
 801c352:	2300      	movs	r3, #0
 801c354:	9a06      	ldr	r2, [sp, #24]
 801c356:	2a09      	cmp	r2, #9
 801c358:	d848      	bhi.n	801c3ec <_dtoa_r+0x284>
 801c35a:	2a05      	cmp	r2, #5
 801c35c:	bfc4      	itt	gt
 801c35e:	3a04      	subgt	r2, #4
 801c360:	9206      	strgt	r2, [sp, #24]
 801c362:	9a06      	ldr	r2, [sp, #24]
 801c364:	f1a2 0202 	sub.w	r2, r2, #2
 801c368:	bfcc      	ite	gt
 801c36a:	2400      	movgt	r4, #0
 801c36c:	2401      	movle	r4, #1
 801c36e:	2a03      	cmp	r2, #3
 801c370:	d847      	bhi.n	801c402 <_dtoa_r+0x29a>
 801c372:	e8df f002 	tbb	[pc, r2]
 801c376:	2d0b      	.short	0x2d0b
 801c378:	392b      	.short	0x392b
 801c37a:	9b04      	ldr	r3, [sp, #16]
 801c37c:	2200      	movs	r2, #0
 801c37e:	eba3 030b 	sub.w	r3, r3, fp
 801c382:	9304      	str	r3, [sp, #16]
 801c384:	920a      	str	r2, [sp, #40]	; 0x28
 801c386:	f1cb 0300 	rsb	r3, fp, #0
 801c38a:	e7e3      	b.n	801c354 <_dtoa_r+0x1ec>
 801c38c:	2200      	movs	r2, #0
 801c38e:	9207      	str	r2, [sp, #28]
 801c390:	9a08      	ldr	r2, [sp, #32]
 801c392:	2a00      	cmp	r2, #0
 801c394:	dc38      	bgt.n	801c408 <_dtoa_r+0x2a0>
 801c396:	f04f 0a01 	mov.w	sl, #1
 801c39a:	46d1      	mov	r9, sl
 801c39c:	4652      	mov	r2, sl
 801c39e:	f8cd a020 	str.w	sl, [sp, #32]
 801c3a2:	69f7      	ldr	r7, [r6, #28]
 801c3a4:	2100      	movs	r1, #0
 801c3a6:	2004      	movs	r0, #4
 801c3a8:	f100 0c14 	add.w	ip, r0, #20
 801c3ac:	4594      	cmp	ip, r2
 801c3ae:	d930      	bls.n	801c412 <_dtoa_r+0x2aa>
 801c3b0:	6079      	str	r1, [r7, #4]
 801c3b2:	4630      	mov	r0, r6
 801c3b4:	930d      	str	r3, [sp, #52]	; 0x34
 801c3b6:	f000 fd43 	bl	801ce40 <_Balloc>
 801c3ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c3bc:	9001      	str	r0, [sp, #4]
 801c3be:	4602      	mov	r2, r0
 801c3c0:	2800      	cmp	r0, #0
 801c3c2:	d145      	bne.n	801c450 <_dtoa_r+0x2e8>
 801c3c4:	4b21      	ldr	r3, [pc, #132]	; (801c44c <_dtoa_r+0x2e4>)
 801c3c6:	f240 11af 	movw	r1, #431	; 0x1af
 801c3ca:	e6e5      	b.n	801c198 <_dtoa_r+0x30>
 801c3cc:	2201      	movs	r2, #1
 801c3ce:	e7de      	b.n	801c38e <_dtoa_r+0x226>
 801c3d0:	2200      	movs	r2, #0
 801c3d2:	9207      	str	r2, [sp, #28]
 801c3d4:	9a08      	ldr	r2, [sp, #32]
 801c3d6:	eb0b 0a02 	add.w	sl, fp, r2
 801c3da:	f10a 0901 	add.w	r9, sl, #1
 801c3de:	464a      	mov	r2, r9
 801c3e0:	2a01      	cmp	r2, #1
 801c3e2:	bfb8      	it	lt
 801c3e4:	2201      	movlt	r2, #1
 801c3e6:	e7dc      	b.n	801c3a2 <_dtoa_r+0x23a>
 801c3e8:	2201      	movs	r2, #1
 801c3ea:	e7f2      	b.n	801c3d2 <_dtoa_r+0x26a>
 801c3ec:	2401      	movs	r4, #1
 801c3ee:	2200      	movs	r2, #0
 801c3f0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801c3f4:	f04f 3aff 	mov.w	sl, #4294967295
 801c3f8:	2100      	movs	r1, #0
 801c3fa:	46d1      	mov	r9, sl
 801c3fc:	2212      	movs	r2, #18
 801c3fe:	9108      	str	r1, [sp, #32]
 801c400:	e7cf      	b.n	801c3a2 <_dtoa_r+0x23a>
 801c402:	2201      	movs	r2, #1
 801c404:	9207      	str	r2, [sp, #28]
 801c406:	e7f5      	b.n	801c3f4 <_dtoa_r+0x28c>
 801c408:	f8dd a020 	ldr.w	sl, [sp, #32]
 801c40c:	46d1      	mov	r9, sl
 801c40e:	4652      	mov	r2, sl
 801c410:	e7c7      	b.n	801c3a2 <_dtoa_r+0x23a>
 801c412:	3101      	adds	r1, #1
 801c414:	0040      	lsls	r0, r0, #1
 801c416:	e7c7      	b.n	801c3a8 <_dtoa_r+0x240>
 801c418:	636f4361 	.word	0x636f4361
 801c41c:	3fd287a7 	.word	0x3fd287a7
 801c420:	8b60c8b3 	.word	0x8b60c8b3
 801c424:	3fc68a28 	.word	0x3fc68a28
 801c428:	509f79fb 	.word	0x509f79fb
 801c42c:	3fd34413 	.word	0x3fd34413
 801c430:	08020618 	.word	0x08020618
 801c434:	0802062f 	.word	0x0802062f
 801c438:	7ff00000 	.word	0x7ff00000
 801c43c:	08020614 	.word	0x08020614
 801c440:	0802060b 	.word	0x0802060b
 801c444:	08020971 	.word	0x08020971
 801c448:	08020720 	.word	0x08020720
 801c44c:	08020687 	.word	0x08020687
 801c450:	69f2      	ldr	r2, [r6, #28]
 801c452:	9901      	ldr	r1, [sp, #4]
 801c454:	6011      	str	r1, [r2, #0]
 801c456:	f1b9 0f0e 	cmp.w	r9, #14
 801c45a:	d86c      	bhi.n	801c536 <_dtoa_r+0x3ce>
 801c45c:	2c00      	cmp	r4, #0
 801c45e:	d06a      	beq.n	801c536 <_dtoa_r+0x3ce>
 801c460:	f1bb 0f00 	cmp.w	fp, #0
 801c464:	f340 80a0 	ble.w	801c5a8 <_dtoa_r+0x440>
 801c468:	4ac1      	ldr	r2, [pc, #772]	; (801c770 <_dtoa_r+0x608>)
 801c46a:	f00b 010f 	and.w	r1, fp, #15
 801c46e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801c472:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801c476:	ed92 7b00 	vldr	d7, [r2]
 801c47a:	ea4f 122b 	mov.w	r2, fp, asr #4
 801c47e:	f000 8087 	beq.w	801c590 <_dtoa_r+0x428>
 801c482:	49bc      	ldr	r1, [pc, #752]	; (801c774 <_dtoa_r+0x60c>)
 801c484:	ed91 6b08 	vldr	d6, [r1, #32]
 801c488:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801c48c:	ed8d 6b02 	vstr	d6, [sp, #8]
 801c490:	f002 020f 	and.w	r2, r2, #15
 801c494:	2103      	movs	r1, #3
 801c496:	48b7      	ldr	r0, [pc, #732]	; (801c774 <_dtoa_r+0x60c>)
 801c498:	2a00      	cmp	r2, #0
 801c49a:	d17b      	bne.n	801c594 <_dtoa_r+0x42c>
 801c49c:	ed9d 6b02 	vldr	d6, [sp, #8]
 801c4a0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801c4a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c4a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c4aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c4ae:	2a00      	cmp	r2, #0
 801c4b0:	f000 80a0 	beq.w	801c5f4 <_dtoa_r+0x48c>
 801c4b4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801c4b8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801c4bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4c0:	f140 8098 	bpl.w	801c5f4 <_dtoa_r+0x48c>
 801c4c4:	f1b9 0f00 	cmp.w	r9, #0
 801c4c8:	f000 8094 	beq.w	801c5f4 <_dtoa_r+0x48c>
 801c4cc:	f1ba 0f00 	cmp.w	sl, #0
 801c4d0:	dd2f      	ble.n	801c532 <_dtoa_r+0x3ca>
 801c4d2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801c4d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c4da:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c4de:	f10b 32ff 	add.w	r2, fp, #4294967295
 801c4e2:	3101      	adds	r1, #1
 801c4e4:	4654      	mov	r4, sl
 801c4e6:	ed9d 6b02 	vldr	d6, [sp, #8]
 801c4ea:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801c4ee:	ee07 1a90 	vmov	s15, r1
 801c4f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801c4f6:	eea7 5b06 	vfma.f64	d5, d7, d6
 801c4fa:	ee15 7a90 	vmov	r7, s11
 801c4fe:	ec51 0b15 	vmov	r0, r1, d5
 801c502:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801c506:	2c00      	cmp	r4, #0
 801c508:	d177      	bne.n	801c5fa <_dtoa_r+0x492>
 801c50a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801c50e:	ee36 6b47 	vsub.f64	d6, d6, d7
 801c512:	ec41 0b17 	vmov	d7, r0, r1
 801c516:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c51e:	f300 826a 	bgt.w	801c9f6 <_dtoa_r+0x88e>
 801c522:	eeb1 7b47 	vneg.f64	d7, d7
 801c526:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c52a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c52e:	f100 8260 	bmi.w	801c9f2 <_dtoa_r+0x88a>
 801c532:	ed8d 8b02 	vstr	d8, [sp, #8]
 801c536:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c538:	2a00      	cmp	r2, #0
 801c53a:	f2c0 811d 	blt.w	801c778 <_dtoa_r+0x610>
 801c53e:	f1bb 0f0e 	cmp.w	fp, #14
 801c542:	f300 8119 	bgt.w	801c778 <_dtoa_r+0x610>
 801c546:	4b8a      	ldr	r3, [pc, #552]	; (801c770 <_dtoa_r+0x608>)
 801c548:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c54c:	ed93 6b00 	vldr	d6, [r3]
 801c550:	9b08      	ldr	r3, [sp, #32]
 801c552:	2b00      	cmp	r3, #0
 801c554:	f280 80b7 	bge.w	801c6c6 <_dtoa_r+0x55e>
 801c558:	f1b9 0f00 	cmp.w	r9, #0
 801c55c:	f300 80b3 	bgt.w	801c6c6 <_dtoa_r+0x55e>
 801c560:	f040 8246 	bne.w	801c9f0 <_dtoa_r+0x888>
 801c564:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801c568:	ee26 6b07 	vmul.f64	d6, d6, d7
 801c56c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c570:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c578:	464c      	mov	r4, r9
 801c57a:	464f      	mov	r7, r9
 801c57c:	f280 821c 	bge.w	801c9b8 <_dtoa_r+0x850>
 801c580:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c584:	2331      	movs	r3, #49	; 0x31
 801c586:	f808 3b01 	strb.w	r3, [r8], #1
 801c58a:	f10b 0b01 	add.w	fp, fp, #1
 801c58e:	e218      	b.n	801c9c2 <_dtoa_r+0x85a>
 801c590:	2102      	movs	r1, #2
 801c592:	e780      	b.n	801c496 <_dtoa_r+0x32e>
 801c594:	07d4      	lsls	r4, r2, #31
 801c596:	d504      	bpl.n	801c5a2 <_dtoa_r+0x43a>
 801c598:	ed90 6b00 	vldr	d6, [r0]
 801c59c:	3101      	adds	r1, #1
 801c59e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c5a2:	1052      	asrs	r2, r2, #1
 801c5a4:	3008      	adds	r0, #8
 801c5a6:	e777      	b.n	801c498 <_dtoa_r+0x330>
 801c5a8:	d022      	beq.n	801c5f0 <_dtoa_r+0x488>
 801c5aa:	f1cb 0200 	rsb	r2, fp, #0
 801c5ae:	4970      	ldr	r1, [pc, #448]	; (801c770 <_dtoa_r+0x608>)
 801c5b0:	f002 000f 	and.w	r0, r2, #15
 801c5b4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801c5b8:	ed91 7b00 	vldr	d7, [r1]
 801c5bc:	ee28 7b07 	vmul.f64	d7, d8, d7
 801c5c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c5c4:	486b      	ldr	r0, [pc, #428]	; (801c774 <_dtoa_r+0x60c>)
 801c5c6:	1112      	asrs	r2, r2, #4
 801c5c8:	2400      	movs	r4, #0
 801c5ca:	2102      	movs	r1, #2
 801c5cc:	b92a      	cbnz	r2, 801c5da <_dtoa_r+0x472>
 801c5ce:	2c00      	cmp	r4, #0
 801c5d0:	f43f af6a 	beq.w	801c4a8 <_dtoa_r+0x340>
 801c5d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c5d8:	e766      	b.n	801c4a8 <_dtoa_r+0x340>
 801c5da:	07d7      	lsls	r7, r2, #31
 801c5dc:	d505      	bpl.n	801c5ea <_dtoa_r+0x482>
 801c5de:	ed90 6b00 	vldr	d6, [r0]
 801c5e2:	3101      	adds	r1, #1
 801c5e4:	2401      	movs	r4, #1
 801c5e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c5ea:	1052      	asrs	r2, r2, #1
 801c5ec:	3008      	adds	r0, #8
 801c5ee:	e7ed      	b.n	801c5cc <_dtoa_r+0x464>
 801c5f0:	2102      	movs	r1, #2
 801c5f2:	e759      	b.n	801c4a8 <_dtoa_r+0x340>
 801c5f4:	465a      	mov	r2, fp
 801c5f6:	464c      	mov	r4, r9
 801c5f8:	e775      	b.n	801c4e6 <_dtoa_r+0x37e>
 801c5fa:	ec41 0b17 	vmov	d7, r0, r1
 801c5fe:	495c      	ldr	r1, [pc, #368]	; (801c770 <_dtoa_r+0x608>)
 801c600:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801c604:	ed11 4b02 	vldr	d4, [r1, #-8]
 801c608:	9901      	ldr	r1, [sp, #4]
 801c60a:	440c      	add	r4, r1
 801c60c:	9907      	ldr	r1, [sp, #28]
 801c60e:	b351      	cbz	r1, 801c666 <_dtoa_r+0x4fe>
 801c610:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801c614:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801c618:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c61c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801c620:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801c624:	ee35 7b47 	vsub.f64	d7, d5, d7
 801c628:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801c62c:	ee14 1a90 	vmov	r1, s9
 801c630:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801c634:	3130      	adds	r1, #48	; 0x30
 801c636:	ee36 6b45 	vsub.f64	d6, d6, d5
 801c63a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c63e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c642:	f808 1b01 	strb.w	r1, [r8], #1
 801c646:	d439      	bmi.n	801c6bc <_dtoa_r+0x554>
 801c648:	ee32 5b46 	vsub.f64	d5, d2, d6
 801c64c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801c650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c654:	d472      	bmi.n	801c73c <_dtoa_r+0x5d4>
 801c656:	45a0      	cmp	r8, r4
 801c658:	f43f af6b 	beq.w	801c532 <_dtoa_r+0x3ca>
 801c65c:	ee27 7b03 	vmul.f64	d7, d7, d3
 801c660:	ee26 6b03 	vmul.f64	d6, d6, d3
 801c664:	e7e0      	b.n	801c628 <_dtoa_r+0x4c0>
 801c666:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c66a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801c66e:	4620      	mov	r0, r4
 801c670:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801c674:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801c678:	ee14 1a90 	vmov	r1, s9
 801c67c:	3130      	adds	r1, #48	; 0x30
 801c67e:	f808 1b01 	strb.w	r1, [r8], #1
 801c682:	45a0      	cmp	r8, r4
 801c684:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801c688:	ee36 6b45 	vsub.f64	d6, d6, d5
 801c68c:	d118      	bne.n	801c6c0 <_dtoa_r+0x558>
 801c68e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801c692:	ee37 4b05 	vadd.f64	d4, d7, d5
 801c696:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801c69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c69e:	dc4d      	bgt.n	801c73c <_dtoa_r+0x5d4>
 801c6a0:	ee35 5b47 	vsub.f64	d5, d5, d7
 801c6a4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801c6a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6ac:	f57f af41 	bpl.w	801c532 <_dtoa_r+0x3ca>
 801c6b0:	4680      	mov	r8, r0
 801c6b2:	3801      	subs	r0, #1
 801c6b4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801c6b8:	2b30      	cmp	r3, #48	; 0x30
 801c6ba:	d0f9      	beq.n	801c6b0 <_dtoa_r+0x548>
 801c6bc:	4693      	mov	fp, r2
 801c6be:	e02a      	b.n	801c716 <_dtoa_r+0x5ae>
 801c6c0:	ee26 6b03 	vmul.f64	d6, d6, d3
 801c6c4:	e7d6      	b.n	801c674 <_dtoa_r+0x50c>
 801c6c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c6ca:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801c6ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c6d2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801c6d6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801c6da:	ee15 3a10 	vmov	r3, s10
 801c6de:	3330      	adds	r3, #48	; 0x30
 801c6e0:	f808 3b01 	strb.w	r3, [r8], #1
 801c6e4:	9b01      	ldr	r3, [sp, #4]
 801c6e6:	eba8 0303 	sub.w	r3, r8, r3
 801c6ea:	4599      	cmp	r9, r3
 801c6ec:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801c6f0:	eea3 7b46 	vfms.f64	d7, d3, d6
 801c6f4:	d133      	bne.n	801c75e <_dtoa_r+0x5f6>
 801c6f6:	ee37 7b07 	vadd.f64	d7, d7, d7
 801c6fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801c6fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c702:	dc1a      	bgt.n	801c73a <_dtoa_r+0x5d2>
 801c704:	eeb4 7b46 	vcmp.f64	d7, d6
 801c708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c70c:	d103      	bne.n	801c716 <_dtoa_r+0x5ae>
 801c70e:	ee15 3a10 	vmov	r3, s10
 801c712:	07d9      	lsls	r1, r3, #31
 801c714:	d411      	bmi.n	801c73a <_dtoa_r+0x5d2>
 801c716:	4629      	mov	r1, r5
 801c718:	4630      	mov	r0, r6
 801c71a:	f000 fbd1 	bl	801cec0 <_Bfree>
 801c71e:	2300      	movs	r3, #0
 801c720:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c722:	f888 3000 	strb.w	r3, [r8]
 801c726:	f10b 0301 	add.w	r3, fp, #1
 801c72a:	6013      	str	r3, [r2, #0]
 801c72c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c72e:	2b00      	cmp	r3, #0
 801c730:	f43f ad69 	beq.w	801c206 <_dtoa_r+0x9e>
 801c734:	f8c3 8000 	str.w	r8, [r3]
 801c738:	e565      	b.n	801c206 <_dtoa_r+0x9e>
 801c73a:	465a      	mov	r2, fp
 801c73c:	4643      	mov	r3, r8
 801c73e:	4698      	mov	r8, r3
 801c740:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801c744:	2939      	cmp	r1, #57	; 0x39
 801c746:	d106      	bne.n	801c756 <_dtoa_r+0x5ee>
 801c748:	9901      	ldr	r1, [sp, #4]
 801c74a:	4299      	cmp	r1, r3
 801c74c:	d1f7      	bne.n	801c73e <_dtoa_r+0x5d6>
 801c74e:	9801      	ldr	r0, [sp, #4]
 801c750:	2130      	movs	r1, #48	; 0x30
 801c752:	3201      	adds	r2, #1
 801c754:	7001      	strb	r1, [r0, #0]
 801c756:	7819      	ldrb	r1, [r3, #0]
 801c758:	3101      	adds	r1, #1
 801c75a:	7019      	strb	r1, [r3, #0]
 801c75c:	e7ae      	b.n	801c6bc <_dtoa_r+0x554>
 801c75e:	ee27 7b04 	vmul.f64	d7, d7, d4
 801c762:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c76a:	d1b2      	bne.n	801c6d2 <_dtoa_r+0x56a>
 801c76c:	e7d3      	b.n	801c716 <_dtoa_r+0x5ae>
 801c76e:	bf00      	nop
 801c770:	08020720 	.word	0x08020720
 801c774:	080206f8 	.word	0x080206f8
 801c778:	9907      	ldr	r1, [sp, #28]
 801c77a:	2900      	cmp	r1, #0
 801c77c:	f000 80d0 	beq.w	801c920 <_dtoa_r+0x7b8>
 801c780:	9906      	ldr	r1, [sp, #24]
 801c782:	2901      	cmp	r1, #1
 801c784:	f300 80b4 	bgt.w	801c8f0 <_dtoa_r+0x788>
 801c788:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c78a:	2900      	cmp	r1, #0
 801c78c:	f000 80ac 	beq.w	801c8e8 <_dtoa_r+0x780>
 801c790:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801c794:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801c798:	461c      	mov	r4, r3
 801c79a:	9309      	str	r3, [sp, #36]	; 0x24
 801c79c:	9b04      	ldr	r3, [sp, #16]
 801c79e:	4413      	add	r3, r2
 801c7a0:	9304      	str	r3, [sp, #16]
 801c7a2:	9b05      	ldr	r3, [sp, #20]
 801c7a4:	2101      	movs	r1, #1
 801c7a6:	4413      	add	r3, r2
 801c7a8:	4630      	mov	r0, r6
 801c7aa:	9305      	str	r3, [sp, #20]
 801c7ac:	f000 fc88 	bl	801d0c0 <__i2b>
 801c7b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c7b2:	4607      	mov	r7, r0
 801c7b4:	f1b8 0f00 	cmp.w	r8, #0
 801c7b8:	d00d      	beq.n	801c7d6 <_dtoa_r+0x66e>
 801c7ba:	9a05      	ldr	r2, [sp, #20]
 801c7bc:	2a00      	cmp	r2, #0
 801c7be:	dd0a      	ble.n	801c7d6 <_dtoa_r+0x66e>
 801c7c0:	4542      	cmp	r2, r8
 801c7c2:	9904      	ldr	r1, [sp, #16]
 801c7c4:	bfa8      	it	ge
 801c7c6:	4642      	movge	r2, r8
 801c7c8:	1a89      	subs	r1, r1, r2
 801c7ca:	9104      	str	r1, [sp, #16]
 801c7cc:	9905      	ldr	r1, [sp, #20]
 801c7ce:	eba8 0802 	sub.w	r8, r8, r2
 801c7d2:	1a8a      	subs	r2, r1, r2
 801c7d4:	9205      	str	r2, [sp, #20]
 801c7d6:	b303      	cbz	r3, 801c81a <_dtoa_r+0x6b2>
 801c7d8:	9a07      	ldr	r2, [sp, #28]
 801c7da:	2a00      	cmp	r2, #0
 801c7dc:	f000 80a5 	beq.w	801c92a <_dtoa_r+0x7c2>
 801c7e0:	2c00      	cmp	r4, #0
 801c7e2:	dd13      	ble.n	801c80c <_dtoa_r+0x6a4>
 801c7e4:	4639      	mov	r1, r7
 801c7e6:	4622      	mov	r2, r4
 801c7e8:	4630      	mov	r0, r6
 801c7ea:	930d      	str	r3, [sp, #52]	; 0x34
 801c7ec:	f000 fd28 	bl	801d240 <__pow5mult>
 801c7f0:	462a      	mov	r2, r5
 801c7f2:	4601      	mov	r1, r0
 801c7f4:	4607      	mov	r7, r0
 801c7f6:	4630      	mov	r0, r6
 801c7f8:	f000 fc78 	bl	801d0ec <__multiply>
 801c7fc:	4629      	mov	r1, r5
 801c7fe:	9009      	str	r0, [sp, #36]	; 0x24
 801c800:	4630      	mov	r0, r6
 801c802:	f000 fb5d 	bl	801cec0 <_Bfree>
 801c806:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c808:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c80a:	4615      	mov	r5, r2
 801c80c:	1b1a      	subs	r2, r3, r4
 801c80e:	d004      	beq.n	801c81a <_dtoa_r+0x6b2>
 801c810:	4629      	mov	r1, r5
 801c812:	4630      	mov	r0, r6
 801c814:	f000 fd14 	bl	801d240 <__pow5mult>
 801c818:	4605      	mov	r5, r0
 801c81a:	2101      	movs	r1, #1
 801c81c:	4630      	mov	r0, r6
 801c81e:	f000 fc4f 	bl	801d0c0 <__i2b>
 801c822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c824:	2b00      	cmp	r3, #0
 801c826:	4604      	mov	r4, r0
 801c828:	f340 8081 	ble.w	801c92e <_dtoa_r+0x7c6>
 801c82c:	461a      	mov	r2, r3
 801c82e:	4601      	mov	r1, r0
 801c830:	4630      	mov	r0, r6
 801c832:	f000 fd05 	bl	801d240 <__pow5mult>
 801c836:	9b06      	ldr	r3, [sp, #24]
 801c838:	2b01      	cmp	r3, #1
 801c83a:	4604      	mov	r4, r0
 801c83c:	dd7a      	ble.n	801c934 <_dtoa_r+0x7cc>
 801c83e:	2300      	movs	r3, #0
 801c840:	9309      	str	r3, [sp, #36]	; 0x24
 801c842:	6922      	ldr	r2, [r4, #16]
 801c844:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801c848:	6910      	ldr	r0, [r2, #16]
 801c84a:	f000 fbeb 	bl	801d024 <__hi0bits>
 801c84e:	f1c0 0020 	rsb	r0, r0, #32
 801c852:	9b05      	ldr	r3, [sp, #20]
 801c854:	4418      	add	r0, r3
 801c856:	f010 001f 	ands.w	r0, r0, #31
 801c85a:	f000 8093 	beq.w	801c984 <_dtoa_r+0x81c>
 801c85e:	f1c0 0220 	rsb	r2, r0, #32
 801c862:	2a04      	cmp	r2, #4
 801c864:	f340 8085 	ble.w	801c972 <_dtoa_r+0x80a>
 801c868:	9b04      	ldr	r3, [sp, #16]
 801c86a:	f1c0 001c 	rsb	r0, r0, #28
 801c86e:	4403      	add	r3, r0
 801c870:	9304      	str	r3, [sp, #16]
 801c872:	9b05      	ldr	r3, [sp, #20]
 801c874:	4480      	add	r8, r0
 801c876:	4403      	add	r3, r0
 801c878:	9305      	str	r3, [sp, #20]
 801c87a:	9b04      	ldr	r3, [sp, #16]
 801c87c:	2b00      	cmp	r3, #0
 801c87e:	dd05      	ble.n	801c88c <_dtoa_r+0x724>
 801c880:	4629      	mov	r1, r5
 801c882:	461a      	mov	r2, r3
 801c884:	4630      	mov	r0, r6
 801c886:	f000 fd35 	bl	801d2f4 <__lshift>
 801c88a:	4605      	mov	r5, r0
 801c88c:	9b05      	ldr	r3, [sp, #20]
 801c88e:	2b00      	cmp	r3, #0
 801c890:	dd05      	ble.n	801c89e <_dtoa_r+0x736>
 801c892:	4621      	mov	r1, r4
 801c894:	461a      	mov	r2, r3
 801c896:	4630      	mov	r0, r6
 801c898:	f000 fd2c 	bl	801d2f4 <__lshift>
 801c89c:	4604      	mov	r4, r0
 801c89e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c8a0:	2b00      	cmp	r3, #0
 801c8a2:	d071      	beq.n	801c988 <_dtoa_r+0x820>
 801c8a4:	4621      	mov	r1, r4
 801c8a6:	4628      	mov	r0, r5
 801c8a8:	f000 fd90 	bl	801d3cc <__mcmp>
 801c8ac:	2800      	cmp	r0, #0
 801c8ae:	da6b      	bge.n	801c988 <_dtoa_r+0x820>
 801c8b0:	2300      	movs	r3, #0
 801c8b2:	4629      	mov	r1, r5
 801c8b4:	220a      	movs	r2, #10
 801c8b6:	4630      	mov	r0, r6
 801c8b8:	f000 fb24 	bl	801cf04 <__multadd>
 801c8bc:	9b07      	ldr	r3, [sp, #28]
 801c8be:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c8c2:	4605      	mov	r5, r0
 801c8c4:	2b00      	cmp	r3, #0
 801c8c6:	f000 8197 	beq.w	801cbf8 <_dtoa_r+0xa90>
 801c8ca:	4639      	mov	r1, r7
 801c8cc:	2300      	movs	r3, #0
 801c8ce:	220a      	movs	r2, #10
 801c8d0:	4630      	mov	r0, r6
 801c8d2:	f000 fb17 	bl	801cf04 <__multadd>
 801c8d6:	f1ba 0f00 	cmp.w	sl, #0
 801c8da:	4607      	mov	r7, r0
 801c8dc:	f300 8093 	bgt.w	801ca06 <_dtoa_r+0x89e>
 801c8e0:	9b06      	ldr	r3, [sp, #24]
 801c8e2:	2b02      	cmp	r3, #2
 801c8e4:	dc57      	bgt.n	801c996 <_dtoa_r+0x82e>
 801c8e6:	e08e      	b.n	801ca06 <_dtoa_r+0x89e>
 801c8e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c8ea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801c8ee:	e751      	b.n	801c794 <_dtoa_r+0x62c>
 801c8f0:	f109 34ff 	add.w	r4, r9, #4294967295
 801c8f4:	42a3      	cmp	r3, r4
 801c8f6:	bfbf      	itttt	lt
 801c8f8:	1ae2      	sublt	r2, r4, r3
 801c8fa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801c8fc:	189b      	addlt	r3, r3, r2
 801c8fe:	930a      	strlt	r3, [sp, #40]	; 0x28
 801c900:	bfae      	itee	ge
 801c902:	1b1c      	subge	r4, r3, r4
 801c904:	4623      	movlt	r3, r4
 801c906:	2400      	movlt	r4, #0
 801c908:	f1b9 0f00 	cmp.w	r9, #0
 801c90c:	bfb5      	itete	lt
 801c90e:	9a04      	ldrlt	r2, [sp, #16]
 801c910:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801c914:	eba2 0809 	sublt.w	r8, r2, r9
 801c918:	464a      	movge	r2, r9
 801c91a:	bfb8      	it	lt
 801c91c:	2200      	movlt	r2, #0
 801c91e:	e73c      	b.n	801c79a <_dtoa_r+0x632>
 801c920:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801c924:	9f07      	ldr	r7, [sp, #28]
 801c926:	461c      	mov	r4, r3
 801c928:	e744      	b.n	801c7b4 <_dtoa_r+0x64c>
 801c92a:	461a      	mov	r2, r3
 801c92c:	e770      	b.n	801c810 <_dtoa_r+0x6a8>
 801c92e:	9b06      	ldr	r3, [sp, #24]
 801c930:	2b01      	cmp	r3, #1
 801c932:	dc18      	bgt.n	801c966 <_dtoa_r+0x7fe>
 801c934:	9b02      	ldr	r3, [sp, #8]
 801c936:	b9b3      	cbnz	r3, 801c966 <_dtoa_r+0x7fe>
 801c938:	9b03      	ldr	r3, [sp, #12]
 801c93a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801c93e:	b9a2      	cbnz	r2, 801c96a <_dtoa_r+0x802>
 801c940:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801c944:	0d12      	lsrs	r2, r2, #20
 801c946:	0512      	lsls	r2, r2, #20
 801c948:	b18a      	cbz	r2, 801c96e <_dtoa_r+0x806>
 801c94a:	9b04      	ldr	r3, [sp, #16]
 801c94c:	3301      	adds	r3, #1
 801c94e:	9304      	str	r3, [sp, #16]
 801c950:	9b05      	ldr	r3, [sp, #20]
 801c952:	3301      	adds	r3, #1
 801c954:	9305      	str	r3, [sp, #20]
 801c956:	2301      	movs	r3, #1
 801c958:	9309      	str	r3, [sp, #36]	; 0x24
 801c95a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c95c:	2b00      	cmp	r3, #0
 801c95e:	f47f af70 	bne.w	801c842 <_dtoa_r+0x6da>
 801c962:	2001      	movs	r0, #1
 801c964:	e775      	b.n	801c852 <_dtoa_r+0x6ea>
 801c966:	2300      	movs	r3, #0
 801c968:	e7f6      	b.n	801c958 <_dtoa_r+0x7f0>
 801c96a:	9b02      	ldr	r3, [sp, #8]
 801c96c:	e7f4      	b.n	801c958 <_dtoa_r+0x7f0>
 801c96e:	9209      	str	r2, [sp, #36]	; 0x24
 801c970:	e7f3      	b.n	801c95a <_dtoa_r+0x7f2>
 801c972:	d082      	beq.n	801c87a <_dtoa_r+0x712>
 801c974:	9b04      	ldr	r3, [sp, #16]
 801c976:	321c      	adds	r2, #28
 801c978:	4413      	add	r3, r2
 801c97a:	9304      	str	r3, [sp, #16]
 801c97c:	9b05      	ldr	r3, [sp, #20]
 801c97e:	4490      	add	r8, r2
 801c980:	4413      	add	r3, r2
 801c982:	e779      	b.n	801c878 <_dtoa_r+0x710>
 801c984:	4602      	mov	r2, r0
 801c986:	e7f5      	b.n	801c974 <_dtoa_r+0x80c>
 801c988:	f1b9 0f00 	cmp.w	r9, #0
 801c98c:	dc36      	bgt.n	801c9fc <_dtoa_r+0x894>
 801c98e:	9b06      	ldr	r3, [sp, #24]
 801c990:	2b02      	cmp	r3, #2
 801c992:	dd33      	ble.n	801c9fc <_dtoa_r+0x894>
 801c994:	46ca      	mov	sl, r9
 801c996:	f1ba 0f00 	cmp.w	sl, #0
 801c99a:	d10d      	bne.n	801c9b8 <_dtoa_r+0x850>
 801c99c:	4621      	mov	r1, r4
 801c99e:	4653      	mov	r3, sl
 801c9a0:	2205      	movs	r2, #5
 801c9a2:	4630      	mov	r0, r6
 801c9a4:	f000 faae 	bl	801cf04 <__multadd>
 801c9a8:	4601      	mov	r1, r0
 801c9aa:	4604      	mov	r4, r0
 801c9ac:	4628      	mov	r0, r5
 801c9ae:	f000 fd0d 	bl	801d3cc <__mcmp>
 801c9b2:	2800      	cmp	r0, #0
 801c9b4:	f73f ade4 	bgt.w	801c580 <_dtoa_r+0x418>
 801c9b8:	9b08      	ldr	r3, [sp, #32]
 801c9ba:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c9be:	ea6f 0b03 	mvn.w	fp, r3
 801c9c2:	f04f 0900 	mov.w	r9, #0
 801c9c6:	4621      	mov	r1, r4
 801c9c8:	4630      	mov	r0, r6
 801c9ca:	f000 fa79 	bl	801cec0 <_Bfree>
 801c9ce:	2f00      	cmp	r7, #0
 801c9d0:	f43f aea1 	beq.w	801c716 <_dtoa_r+0x5ae>
 801c9d4:	f1b9 0f00 	cmp.w	r9, #0
 801c9d8:	d005      	beq.n	801c9e6 <_dtoa_r+0x87e>
 801c9da:	45b9      	cmp	r9, r7
 801c9dc:	d003      	beq.n	801c9e6 <_dtoa_r+0x87e>
 801c9de:	4649      	mov	r1, r9
 801c9e0:	4630      	mov	r0, r6
 801c9e2:	f000 fa6d 	bl	801cec0 <_Bfree>
 801c9e6:	4639      	mov	r1, r7
 801c9e8:	4630      	mov	r0, r6
 801c9ea:	f000 fa69 	bl	801cec0 <_Bfree>
 801c9ee:	e692      	b.n	801c716 <_dtoa_r+0x5ae>
 801c9f0:	2400      	movs	r4, #0
 801c9f2:	4627      	mov	r7, r4
 801c9f4:	e7e0      	b.n	801c9b8 <_dtoa_r+0x850>
 801c9f6:	4693      	mov	fp, r2
 801c9f8:	4627      	mov	r7, r4
 801c9fa:	e5c1      	b.n	801c580 <_dtoa_r+0x418>
 801c9fc:	9b07      	ldr	r3, [sp, #28]
 801c9fe:	46ca      	mov	sl, r9
 801ca00:	2b00      	cmp	r3, #0
 801ca02:	f000 8100 	beq.w	801cc06 <_dtoa_r+0xa9e>
 801ca06:	f1b8 0f00 	cmp.w	r8, #0
 801ca0a:	dd05      	ble.n	801ca18 <_dtoa_r+0x8b0>
 801ca0c:	4639      	mov	r1, r7
 801ca0e:	4642      	mov	r2, r8
 801ca10:	4630      	mov	r0, r6
 801ca12:	f000 fc6f 	bl	801d2f4 <__lshift>
 801ca16:	4607      	mov	r7, r0
 801ca18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca1a:	2b00      	cmp	r3, #0
 801ca1c:	d05d      	beq.n	801cada <_dtoa_r+0x972>
 801ca1e:	6879      	ldr	r1, [r7, #4]
 801ca20:	4630      	mov	r0, r6
 801ca22:	f000 fa0d 	bl	801ce40 <_Balloc>
 801ca26:	4680      	mov	r8, r0
 801ca28:	b928      	cbnz	r0, 801ca36 <_dtoa_r+0x8ce>
 801ca2a:	4b82      	ldr	r3, [pc, #520]	; (801cc34 <_dtoa_r+0xacc>)
 801ca2c:	4602      	mov	r2, r0
 801ca2e:	f240 21ef 	movw	r1, #751	; 0x2ef
 801ca32:	f7ff bbb1 	b.w	801c198 <_dtoa_r+0x30>
 801ca36:	693a      	ldr	r2, [r7, #16]
 801ca38:	3202      	adds	r2, #2
 801ca3a:	0092      	lsls	r2, r2, #2
 801ca3c:	f107 010c 	add.w	r1, r7, #12
 801ca40:	300c      	adds	r0, #12
 801ca42:	f7ff faf2 	bl	801c02a <memcpy>
 801ca46:	2201      	movs	r2, #1
 801ca48:	4641      	mov	r1, r8
 801ca4a:	4630      	mov	r0, r6
 801ca4c:	f000 fc52 	bl	801d2f4 <__lshift>
 801ca50:	9b01      	ldr	r3, [sp, #4]
 801ca52:	3301      	adds	r3, #1
 801ca54:	9304      	str	r3, [sp, #16]
 801ca56:	9b01      	ldr	r3, [sp, #4]
 801ca58:	4453      	add	r3, sl
 801ca5a:	9308      	str	r3, [sp, #32]
 801ca5c:	9b02      	ldr	r3, [sp, #8]
 801ca5e:	f003 0301 	and.w	r3, r3, #1
 801ca62:	46b9      	mov	r9, r7
 801ca64:	9307      	str	r3, [sp, #28]
 801ca66:	4607      	mov	r7, r0
 801ca68:	9b04      	ldr	r3, [sp, #16]
 801ca6a:	4621      	mov	r1, r4
 801ca6c:	3b01      	subs	r3, #1
 801ca6e:	4628      	mov	r0, r5
 801ca70:	9302      	str	r3, [sp, #8]
 801ca72:	f7ff faef 	bl	801c054 <quorem>
 801ca76:	4603      	mov	r3, r0
 801ca78:	3330      	adds	r3, #48	; 0x30
 801ca7a:	9005      	str	r0, [sp, #20]
 801ca7c:	4649      	mov	r1, r9
 801ca7e:	4628      	mov	r0, r5
 801ca80:	9309      	str	r3, [sp, #36]	; 0x24
 801ca82:	f000 fca3 	bl	801d3cc <__mcmp>
 801ca86:	463a      	mov	r2, r7
 801ca88:	4682      	mov	sl, r0
 801ca8a:	4621      	mov	r1, r4
 801ca8c:	4630      	mov	r0, r6
 801ca8e:	f000 fcb9 	bl	801d404 <__mdiff>
 801ca92:	68c2      	ldr	r2, [r0, #12]
 801ca94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca96:	4680      	mov	r8, r0
 801ca98:	bb0a      	cbnz	r2, 801cade <_dtoa_r+0x976>
 801ca9a:	4601      	mov	r1, r0
 801ca9c:	4628      	mov	r0, r5
 801ca9e:	f000 fc95 	bl	801d3cc <__mcmp>
 801caa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801caa4:	4602      	mov	r2, r0
 801caa6:	4641      	mov	r1, r8
 801caa8:	4630      	mov	r0, r6
 801caaa:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801caae:	f000 fa07 	bl	801cec0 <_Bfree>
 801cab2:	9b06      	ldr	r3, [sp, #24]
 801cab4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cab6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801caba:	ea43 0102 	orr.w	r1, r3, r2
 801cabe:	9b07      	ldr	r3, [sp, #28]
 801cac0:	4319      	orrs	r1, r3
 801cac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cac4:	d10d      	bne.n	801cae2 <_dtoa_r+0x97a>
 801cac6:	2b39      	cmp	r3, #57	; 0x39
 801cac8:	d029      	beq.n	801cb1e <_dtoa_r+0x9b6>
 801caca:	f1ba 0f00 	cmp.w	sl, #0
 801cace:	dd01      	ble.n	801cad4 <_dtoa_r+0x96c>
 801cad0:	9b05      	ldr	r3, [sp, #20]
 801cad2:	3331      	adds	r3, #49	; 0x31
 801cad4:	9a02      	ldr	r2, [sp, #8]
 801cad6:	7013      	strb	r3, [r2, #0]
 801cad8:	e775      	b.n	801c9c6 <_dtoa_r+0x85e>
 801cada:	4638      	mov	r0, r7
 801cadc:	e7b8      	b.n	801ca50 <_dtoa_r+0x8e8>
 801cade:	2201      	movs	r2, #1
 801cae0:	e7e1      	b.n	801caa6 <_dtoa_r+0x93e>
 801cae2:	f1ba 0f00 	cmp.w	sl, #0
 801cae6:	db06      	blt.n	801caf6 <_dtoa_r+0x98e>
 801cae8:	9906      	ldr	r1, [sp, #24]
 801caea:	ea41 0a0a 	orr.w	sl, r1, sl
 801caee:	9907      	ldr	r1, [sp, #28]
 801caf0:	ea5a 0a01 	orrs.w	sl, sl, r1
 801caf4:	d120      	bne.n	801cb38 <_dtoa_r+0x9d0>
 801caf6:	2a00      	cmp	r2, #0
 801caf8:	ddec      	ble.n	801cad4 <_dtoa_r+0x96c>
 801cafa:	4629      	mov	r1, r5
 801cafc:	2201      	movs	r2, #1
 801cafe:	4630      	mov	r0, r6
 801cb00:	9304      	str	r3, [sp, #16]
 801cb02:	f000 fbf7 	bl	801d2f4 <__lshift>
 801cb06:	4621      	mov	r1, r4
 801cb08:	4605      	mov	r5, r0
 801cb0a:	f000 fc5f 	bl	801d3cc <__mcmp>
 801cb0e:	2800      	cmp	r0, #0
 801cb10:	9b04      	ldr	r3, [sp, #16]
 801cb12:	dc02      	bgt.n	801cb1a <_dtoa_r+0x9b2>
 801cb14:	d1de      	bne.n	801cad4 <_dtoa_r+0x96c>
 801cb16:	07da      	lsls	r2, r3, #31
 801cb18:	d5dc      	bpl.n	801cad4 <_dtoa_r+0x96c>
 801cb1a:	2b39      	cmp	r3, #57	; 0x39
 801cb1c:	d1d8      	bne.n	801cad0 <_dtoa_r+0x968>
 801cb1e:	9a02      	ldr	r2, [sp, #8]
 801cb20:	2339      	movs	r3, #57	; 0x39
 801cb22:	7013      	strb	r3, [r2, #0]
 801cb24:	4643      	mov	r3, r8
 801cb26:	4698      	mov	r8, r3
 801cb28:	3b01      	subs	r3, #1
 801cb2a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801cb2e:	2a39      	cmp	r2, #57	; 0x39
 801cb30:	d051      	beq.n	801cbd6 <_dtoa_r+0xa6e>
 801cb32:	3201      	adds	r2, #1
 801cb34:	701a      	strb	r2, [r3, #0]
 801cb36:	e746      	b.n	801c9c6 <_dtoa_r+0x85e>
 801cb38:	2a00      	cmp	r2, #0
 801cb3a:	dd03      	ble.n	801cb44 <_dtoa_r+0x9dc>
 801cb3c:	2b39      	cmp	r3, #57	; 0x39
 801cb3e:	d0ee      	beq.n	801cb1e <_dtoa_r+0x9b6>
 801cb40:	3301      	adds	r3, #1
 801cb42:	e7c7      	b.n	801cad4 <_dtoa_r+0x96c>
 801cb44:	9a04      	ldr	r2, [sp, #16]
 801cb46:	9908      	ldr	r1, [sp, #32]
 801cb48:	f802 3c01 	strb.w	r3, [r2, #-1]
 801cb4c:	428a      	cmp	r2, r1
 801cb4e:	d02b      	beq.n	801cba8 <_dtoa_r+0xa40>
 801cb50:	4629      	mov	r1, r5
 801cb52:	2300      	movs	r3, #0
 801cb54:	220a      	movs	r2, #10
 801cb56:	4630      	mov	r0, r6
 801cb58:	f000 f9d4 	bl	801cf04 <__multadd>
 801cb5c:	45b9      	cmp	r9, r7
 801cb5e:	4605      	mov	r5, r0
 801cb60:	f04f 0300 	mov.w	r3, #0
 801cb64:	f04f 020a 	mov.w	r2, #10
 801cb68:	4649      	mov	r1, r9
 801cb6a:	4630      	mov	r0, r6
 801cb6c:	d107      	bne.n	801cb7e <_dtoa_r+0xa16>
 801cb6e:	f000 f9c9 	bl	801cf04 <__multadd>
 801cb72:	4681      	mov	r9, r0
 801cb74:	4607      	mov	r7, r0
 801cb76:	9b04      	ldr	r3, [sp, #16]
 801cb78:	3301      	adds	r3, #1
 801cb7a:	9304      	str	r3, [sp, #16]
 801cb7c:	e774      	b.n	801ca68 <_dtoa_r+0x900>
 801cb7e:	f000 f9c1 	bl	801cf04 <__multadd>
 801cb82:	4639      	mov	r1, r7
 801cb84:	4681      	mov	r9, r0
 801cb86:	2300      	movs	r3, #0
 801cb88:	220a      	movs	r2, #10
 801cb8a:	4630      	mov	r0, r6
 801cb8c:	f000 f9ba 	bl	801cf04 <__multadd>
 801cb90:	4607      	mov	r7, r0
 801cb92:	e7f0      	b.n	801cb76 <_dtoa_r+0xa0e>
 801cb94:	f1ba 0f00 	cmp.w	sl, #0
 801cb98:	9a01      	ldr	r2, [sp, #4]
 801cb9a:	bfcc      	ite	gt
 801cb9c:	46d0      	movgt	r8, sl
 801cb9e:	f04f 0801 	movle.w	r8, #1
 801cba2:	4490      	add	r8, r2
 801cba4:	f04f 0900 	mov.w	r9, #0
 801cba8:	4629      	mov	r1, r5
 801cbaa:	2201      	movs	r2, #1
 801cbac:	4630      	mov	r0, r6
 801cbae:	9302      	str	r3, [sp, #8]
 801cbb0:	f000 fba0 	bl	801d2f4 <__lshift>
 801cbb4:	4621      	mov	r1, r4
 801cbb6:	4605      	mov	r5, r0
 801cbb8:	f000 fc08 	bl	801d3cc <__mcmp>
 801cbbc:	2800      	cmp	r0, #0
 801cbbe:	dcb1      	bgt.n	801cb24 <_dtoa_r+0x9bc>
 801cbc0:	d102      	bne.n	801cbc8 <_dtoa_r+0xa60>
 801cbc2:	9b02      	ldr	r3, [sp, #8]
 801cbc4:	07db      	lsls	r3, r3, #31
 801cbc6:	d4ad      	bmi.n	801cb24 <_dtoa_r+0x9bc>
 801cbc8:	4643      	mov	r3, r8
 801cbca:	4698      	mov	r8, r3
 801cbcc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cbd0:	2a30      	cmp	r2, #48	; 0x30
 801cbd2:	d0fa      	beq.n	801cbca <_dtoa_r+0xa62>
 801cbd4:	e6f7      	b.n	801c9c6 <_dtoa_r+0x85e>
 801cbd6:	9a01      	ldr	r2, [sp, #4]
 801cbd8:	429a      	cmp	r2, r3
 801cbda:	d1a4      	bne.n	801cb26 <_dtoa_r+0x9be>
 801cbdc:	f10b 0b01 	add.w	fp, fp, #1
 801cbe0:	2331      	movs	r3, #49	; 0x31
 801cbe2:	e778      	b.n	801cad6 <_dtoa_r+0x96e>
 801cbe4:	4b14      	ldr	r3, [pc, #80]	; (801cc38 <_dtoa_r+0xad0>)
 801cbe6:	f7ff bb2a 	b.w	801c23e <_dtoa_r+0xd6>
 801cbea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801cbec:	2b00      	cmp	r3, #0
 801cbee:	f47f ab05 	bne.w	801c1fc <_dtoa_r+0x94>
 801cbf2:	4b12      	ldr	r3, [pc, #72]	; (801cc3c <_dtoa_r+0xad4>)
 801cbf4:	f7ff bb23 	b.w	801c23e <_dtoa_r+0xd6>
 801cbf8:	f1ba 0f00 	cmp.w	sl, #0
 801cbfc:	dc03      	bgt.n	801cc06 <_dtoa_r+0xa9e>
 801cbfe:	9b06      	ldr	r3, [sp, #24]
 801cc00:	2b02      	cmp	r3, #2
 801cc02:	f73f aec8 	bgt.w	801c996 <_dtoa_r+0x82e>
 801cc06:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801cc0a:	4621      	mov	r1, r4
 801cc0c:	4628      	mov	r0, r5
 801cc0e:	f7ff fa21 	bl	801c054 <quorem>
 801cc12:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801cc16:	f808 3b01 	strb.w	r3, [r8], #1
 801cc1a:	9a01      	ldr	r2, [sp, #4]
 801cc1c:	eba8 0202 	sub.w	r2, r8, r2
 801cc20:	4592      	cmp	sl, r2
 801cc22:	ddb7      	ble.n	801cb94 <_dtoa_r+0xa2c>
 801cc24:	4629      	mov	r1, r5
 801cc26:	2300      	movs	r3, #0
 801cc28:	220a      	movs	r2, #10
 801cc2a:	4630      	mov	r0, r6
 801cc2c:	f000 f96a 	bl	801cf04 <__multadd>
 801cc30:	4605      	mov	r5, r0
 801cc32:	e7ea      	b.n	801cc0a <_dtoa_r+0xaa2>
 801cc34:	08020687 	.word	0x08020687
 801cc38:	08020970 	.word	0x08020970
 801cc3c:	0802060b 	.word	0x0802060b

0801cc40 <_free_r>:
 801cc40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cc42:	2900      	cmp	r1, #0
 801cc44:	d044      	beq.n	801ccd0 <_free_r+0x90>
 801cc46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cc4a:	9001      	str	r0, [sp, #4]
 801cc4c:	2b00      	cmp	r3, #0
 801cc4e:	f1a1 0404 	sub.w	r4, r1, #4
 801cc52:	bfb8      	it	lt
 801cc54:	18e4      	addlt	r4, r4, r3
 801cc56:	f000 f8e7 	bl	801ce28 <__malloc_lock>
 801cc5a:	4a1e      	ldr	r2, [pc, #120]	; (801ccd4 <_free_r+0x94>)
 801cc5c:	9801      	ldr	r0, [sp, #4]
 801cc5e:	6813      	ldr	r3, [r2, #0]
 801cc60:	b933      	cbnz	r3, 801cc70 <_free_r+0x30>
 801cc62:	6063      	str	r3, [r4, #4]
 801cc64:	6014      	str	r4, [r2, #0]
 801cc66:	b003      	add	sp, #12
 801cc68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cc6c:	f000 b8e2 	b.w	801ce34 <__malloc_unlock>
 801cc70:	42a3      	cmp	r3, r4
 801cc72:	d908      	bls.n	801cc86 <_free_r+0x46>
 801cc74:	6825      	ldr	r5, [r4, #0]
 801cc76:	1961      	adds	r1, r4, r5
 801cc78:	428b      	cmp	r3, r1
 801cc7a:	bf01      	itttt	eq
 801cc7c:	6819      	ldreq	r1, [r3, #0]
 801cc7e:	685b      	ldreq	r3, [r3, #4]
 801cc80:	1949      	addeq	r1, r1, r5
 801cc82:	6021      	streq	r1, [r4, #0]
 801cc84:	e7ed      	b.n	801cc62 <_free_r+0x22>
 801cc86:	461a      	mov	r2, r3
 801cc88:	685b      	ldr	r3, [r3, #4]
 801cc8a:	b10b      	cbz	r3, 801cc90 <_free_r+0x50>
 801cc8c:	42a3      	cmp	r3, r4
 801cc8e:	d9fa      	bls.n	801cc86 <_free_r+0x46>
 801cc90:	6811      	ldr	r1, [r2, #0]
 801cc92:	1855      	adds	r5, r2, r1
 801cc94:	42a5      	cmp	r5, r4
 801cc96:	d10b      	bne.n	801ccb0 <_free_r+0x70>
 801cc98:	6824      	ldr	r4, [r4, #0]
 801cc9a:	4421      	add	r1, r4
 801cc9c:	1854      	adds	r4, r2, r1
 801cc9e:	42a3      	cmp	r3, r4
 801cca0:	6011      	str	r1, [r2, #0]
 801cca2:	d1e0      	bne.n	801cc66 <_free_r+0x26>
 801cca4:	681c      	ldr	r4, [r3, #0]
 801cca6:	685b      	ldr	r3, [r3, #4]
 801cca8:	6053      	str	r3, [r2, #4]
 801ccaa:	440c      	add	r4, r1
 801ccac:	6014      	str	r4, [r2, #0]
 801ccae:	e7da      	b.n	801cc66 <_free_r+0x26>
 801ccb0:	d902      	bls.n	801ccb8 <_free_r+0x78>
 801ccb2:	230c      	movs	r3, #12
 801ccb4:	6003      	str	r3, [r0, #0]
 801ccb6:	e7d6      	b.n	801cc66 <_free_r+0x26>
 801ccb8:	6825      	ldr	r5, [r4, #0]
 801ccba:	1961      	adds	r1, r4, r5
 801ccbc:	428b      	cmp	r3, r1
 801ccbe:	bf04      	itt	eq
 801ccc0:	6819      	ldreq	r1, [r3, #0]
 801ccc2:	685b      	ldreq	r3, [r3, #4]
 801ccc4:	6063      	str	r3, [r4, #4]
 801ccc6:	bf04      	itt	eq
 801ccc8:	1949      	addeq	r1, r1, r5
 801ccca:	6021      	streq	r1, [r4, #0]
 801cccc:	6054      	str	r4, [r2, #4]
 801ccce:	e7ca      	b.n	801cc66 <_free_r+0x26>
 801ccd0:	b003      	add	sp, #12
 801ccd2:	bd30      	pop	{r4, r5, pc}
 801ccd4:	24003628 	.word	0x24003628

0801ccd8 <malloc>:
 801ccd8:	4b02      	ldr	r3, [pc, #8]	; (801cce4 <malloc+0xc>)
 801ccda:	4601      	mov	r1, r0
 801ccdc:	6818      	ldr	r0, [r3, #0]
 801ccde:	f000 b823 	b.w	801cd28 <_malloc_r>
 801cce2:	bf00      	nop
 801cce4:	24000158 	.word	0x24000158

0801cce8 <sbrk_aligned>:
 801cce8:	b570      	push	{r4, r5, r6, lr}
 801ccea:	4e0e      	ldr	r6, [pc, #56]	; (801cd24 <sbrk_aligned+0x3c>)
 801ccec:	460c      	mov	r4, r1
 801ccee:	6831      	ldr	r1, [r6, #0]
 801ccf0:	4605      	mov	r5, r0
 801ccf2:	b911      	cbnz	r1, 801ccfa <sbrk_aligned+0x12>
 801ccf4:	f002 f96a 	bl	801efcc <_sbrk_r>
 801ccf8:	6030      	str	r0, [r6, #0]
 801ccfa:	4621      	mov	r1, r4
 801ccfc:	4628      	mov	r0, r5
 801ccfe:	f002 f965 	bl	801efcc <_sbrk_r>
 801cd02:	1c43      	adds	r3, r0, #1
 801cd04:	d00a      	beq.n	801cd1c <sbrk_aligned+0x34>
 801cd06:	1cc4      	adds	r4, r0, #3
 801cd08:	f024 0403 	bic.w	r4, r4, #3
 801cd0c:	42a0      	cmp	r0, r4
 801cd0e:	d007      	beq.n	801cd20 <sbrk_aligned+0x38>
 801cd10:	1a21      	subs	r1, r4, r0
 801cd12:	4628      	mov	r0, r5
 801cd14:	f002 f95a 	bl	801efcc <_sbrk_r>
 801cd18:	3001      	adds	r0, #1
 801cd1a:	d101      	bne.n	801cd20 <sbrk_aligned+0x38>
 801cd1c:	f04f 34ff 	mov.w	r4, #4294967295
 801cd20:	4620      	mov	r0, r4
 801cd22:	bd70      	pop	{r4, r5, r6, pc}
 801cd24:	2400362c 	.word	0x2400362c

0801cd28 <_malloc_r>:
 801cd28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cd2c:	1ccd      	adds	r5, r1, #3
 801cd2e:	f025 0503 	bic.w	r5, r5, #3
 801cd32:	3508      	adds	r5, #8
 801cd34:	2d0c      	cmp	r5, #12
 801cd36:	bf38      	it	cc
 801cd38:	250c      	movcc	r5, #12
 801cd3a:	2d00      	cmp	r5, #0
 801cd3c:	4607      	mov	r7, r0
 801cd3e:	db01      	blt.n	801cd44 <_malloc_r+0x1c>
 801cd40:	42a9      	cmp	r1, r5
 801cd42:	d905      	bls.n	801cd50 <_malloc_r+0x28>
 801cd44:	230c      	movs	r3, #12
 801cd46:	603b      	str	r3, [r7, #0]
 801cd48:	2600      	movs	r6, #0
 801cd4a:	4630      	mov	r0, r6
 801cd4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cd50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801ce24 <_malloc_r+0xfc>
 801cd54:	f000 f868 	bl	801ce28 <__malloc_lock>
 801cd58:	f8d8 3000 	ldr.w	r3, [r8]
 801cd5c:	461c      	mov	r4, r3
 801cd5e:	bb5c      	cbnz	r4, 801cdb8 <_malloc_r+0x90>
 801cd60:	4629      	mov	r1, r5
 801cd62:	4638      	mov	r0, r7
 801cd64:	f7ff ffc0 	bl	801cce8 <sbrk_aligned>
 801cd68:	1c43      	adds	r3, r0, #1
 801cd6a:	4604      	mov	r4, r0
 801cd6c:	d155      	bne.n	801ce1a <_malloc_r+0xf2>
 801cd6e:	f8d8 4000 	ldr.w	r4, [r8]
 801cd72:	4626      	mov	r6, r4
 801cd74:	2e00      	cmp	r6, #0
 801cd76:	d145      	bne.n	801ce04 <_malloc_r+0xdc>
 801cd78:	2c00      	cmp	r4, #0
 801cd7a:	d048      	beq.n	801ce0e <_malloc_r+0xe6>
 801cd7c:	6823      	ldr	r3, [r4, #0]
 801cd7e:	4631      	mov	r1, r6
 801cd80:	4638      	mov	r0, r7
 801cd82:	eb04 0903 	add.w	r9, r4, r3
 801cd86:	f002 f921 	bl	801efcc <_sbrk_r>
 801cd8a:	4581      	cmp	r9, r0
 801cd8c:	d13f      	bne.n	801ce0e <_malloc_r+0xe6>
 801cd8e:	6821      	ldr	r1, [r4, #0]
 801cd90:	1a6d      	subs	r5, r5, r1
 801cd92:	4629      	mov	r1, r5
 801cd94:	4638      	mov	r0, r7
 801cd96:	f7ff ffa7 	bl	801cce8 <sbrk_aligned>
 801cd9a:	3001      	adds	r0, #1
 801cd9c:	d037      	beq.n	801ce0e <_malloc_r+0xe6>
 801cd9e:	6823      	ldr	r3, [r4, #0]
 801cda0:	442b      	add	r3, r5
 801cda2:	6023      	str	r3, [r4, #0]
 801cda4:	f8d8 3000 	ldr.w	r3, [r8]
 801cda8:	2b00      	cmp	r3, #0
 801cdaa:	d038      	beq.n	801ce1e <_malloc_r+0xf6>
 801cdac:	685a      	ldr	r2, [r3, #4]
 801cdae:	42a2      	cmp	r2, r4
 801cdb0:	d12b      	bne.n	801ce0a <_malloc_r+0xe2>
 801cdb2:	2200      	movs	r2, #0
 801cdb4:	605a      	str	r2, [r3, #4]
 801cdb6:	e00f      	b.n	801cdd8 <_malloc_r+0xb0>
 801cdb8:	6822      	ldr	r2, [r4, #0]
 801cdba:	1b52      	subs	r2, r2, r5
 801cdbc:	d41f      	bmi.n	801cdfe <_malloc_r+0xd6>
 801cdbe:	2a0b      	cmp	r2, #11
 801cdc0:	d917      	bls.n	801cdf2 <_malloc_r+0xca>
 801cdc2:	1961      	adds	r1, r4, r5
 801cdc4:	42a3      	cmp	r3, r4
 801cdc6:	6025      	str	r5, [r4, #0]
 801cdc8:	bf18      	it	ne
 801cdca:	6059      	strne	r1, [r3, #4]
 801cdcc:	6863      	ldr	r3, [r4, #4]
 801cdce:	bf08      	it	eq
 801cdd0:	f8c8 1000 	streq.w	r1, [r8]
 801cdd4:	5162      	str	r2, [r4, r5]
 801cdd6:	604b      	str	r3, [r1, #4]
 801cdd8:	4638      	mov	r0, r7
 801cdda:	f104 060b 	add.w	r6, r4, #11
 801cdde:	f000 f829 	bl	801ce34 <__malloc_unlock>
 801cde2:	f026 0607 	bic.w	r6, r6, #7
 801cde6:	1d23      	adds	r3, r4, #4
 801cde8:	1af2      	subs	r2, r6, r3
 801cdea:	d0ae      	beq.n	801cd4a <_malloc_r+0x22>
 801cdec:	1b9b      	subs	r3, r3, r6
 801cdee:	50a3      	str	r3, [r4, r2]
 801cdf0:	e7ab      	b.n	801cd4a <_malloc_r+0x22>
 801cdf2:	42a3      	cmp	r3, r4
 801cdf4:	6862      	ldr	r2, [r4, #4]
 801cdf6:	d1dd      	bne.n	801cdb4 <_malloc_r+0x8c>
 801cdf8:	f8c8 2000 	str.w	r2, [r8]
 801cdfc:	e7ec      	b.n	801cdd8 <_malloc_r+0xb0>
 801cdfe:	4623      	mov	r3, r4
 801ce00:	6864      	ldr	r4, [r4, #4]
 801ce02:	e7ac      	b.n	801cd5e <_malloc_r+0x36>
 801ce04:	4634      	mov	r4, r6
 801ce06:	6876      	ldr	r6, [r6, #4]
 801ce08:	e7b4      	b.n	801cd74 <_malloc_r+0x4c>
 801ce0a:	4613      	mov	r3, r2
 801ce0c:	e7cc      	b.n	801cda8 <_malloc_r+0x80>
 801ce0e:	230c      	movs	r3, #12
 801ce10:	603b      	str	r3, [r7, #0]
 801ce12:	4638      	mov	r0, r7
 801ce14:	f000 f80e 	bl	801ce34 <__malloc_unlock>
 801ce18:	e797      	b.n	801cd4a <_malloc_r+0x22>
 801ce1a:	6025      	str	r5, [r4, #0]
 801ce1c:	e7dc      	b.n	801cdd8 <_malloc_r+0xb0>
 801ce1e:	605b      	str	r3, [r3, #4]
 801ce20:	deff      	udf	#255	; 0xff
 801ce22:	bf00      	nop
 801ce24:	24003628 	.word	0x24003628

0801ce28 <__malloc_lock>:
 801ce28:	4801      	ldr	r0, [pc, #4]	; (801ce30 <__malloc_lock+0x8>)
 801ce2a:	f7ff b8f4 	b.w	801c016 <__retarget_lock_acquire_recursive>
 801ce2e:	bf00      	nop
 801ce30:	24003624 	.word	0x24003624

0801ce34 <__malloc_unlock>:
 801ce34:	4801      	ldr	r0, [pc, #4]	; (801ce3c <__malloc_unlock+0x8>)
 801ce36:	f7ff b8ef 	b.w	801c018 <__retarget_lock_release_recursive>
 801ce3a:	bf00      	nop
 801ce3c:	24003624 	.word	0x24003624

0801ce40 <_Balloc>:
 801ce40:	b570      	push	{r4, r5, r6, lr}
 801ce42:	69c6      	ldr	r6, [r0, #28]
 801ce44:	4604      	mov	r4, r0
 801ce46:	460d      	mov	r5, r1
 801ce48:	b976      	cbnz	r6, 801ce68 <_Balloc+0x28>
 801ce4a:	2010      	movs	r0, #16
 801ce4c:	f7ff ff44 	bl	801ccd8 <malloc>
 801ce50:	4602      	mov	r2, r0
 801ce52:	61e0      	str	r0, [r4, #28]
 801ce54:	b920      	cbnz	r0, 801ce60 <_Balloc+0x20>
 801ce56:	4b18      	ldr	r3, [pc, #96]	; (801ceb8 <_Balloc+0x78>)
 801ce58:	4818      	ldr	r0, [pc, #96]	; (801cebc <_Balloc+0x7c>)
 801ce5a:	216b      	movs	r1, #107	; 0x6b
 801ce5c:	f002 f8d0 	bl	801f000 <__assert_func>
 801ce60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ce64:	6006      	str	r6, [r0, #0]
 801ce66:	60c6      	str	r6, [r0, #12]
 801ce68:	69e6      	ldr	r6, [r4, #28]
 801ce6a:	68f3      	ldr	r3, [r6, #12]
 801ce6c:	b183      	cbz	r3, 801ce90 <_Balloc+0x50>
 801ce6e:	69e3      	ldr	r3, [r4, #28]
 801ce70:	68db      	ldr	r3, [r3, #12]
 801ce72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ce76:	b9b8      	cbnz	r0, 801cea8 <_Balloc+0x68>
 801ce78:	2101      	movs	r1, #1
 801ce7a:	fa01 f605 	lsl.w	r6, r1, r5
 801ce7e:	1d72      	adds	r2, r6, #5
 801ce80:	0092      	lsls	r2, r2, #2
 801ce82:	4620      	mov	r0, r4
 801ce84:	f002 f8da 	bl	801f03c <_calloc_r>
 801ce88:	b160      	cbz	r0, 801cea4 <_Balloc+0x64>
 801ce8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801ce8e:	e00e      	b.n	801ceae <_Balloc+0x6e>
 801ce90:	2221      	movs	r2, #33	; 0x21
 801ce92:	2104      	movs	r1, #4
 801ce94:	4620      	mov	r0, r4
 801ce96:	f002 f8d1 	bl	801f03c <_calloc_r>
 801ce9a:	69e3      	ldr	r3, [r4, #28]
 801ce9c:	60f0      	str	r0, [r6, #12]
 801ce9e:	68db      	ldr	r3, [r3, #12]
 801cea0:	2b00      	cmp	r3, #0
 801cea2:	d1e4      	bne.n	801ce6e <_Balloc+0x2e>
 801cea4:	2000      	movs	r0, #0
 801cea6:	bd70      	pop	{r4, r5, r6, pc}
 801cea8:	6802      	ldr	r2, [r0, #0]
 801ceaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ceae:	2300      	movs	r3, #0
 801ceb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ceb4:	e7f7      	b.n	801cea6 <_Balloc+0x66>
 801ceb6:	bf00      	nop
 801ceb8:	08020618 	.word	0x08020618
 801cebc:	08020698 	.word	0x08020698

0801cec0 <_Bfree>:
 801cec0:	b570      	push	{r4, r5, r6, lr}
 801cec2:	69c6      	ldr	r6, [r0, #28]
 801cec4:	4605      	mov	r5, r0
 801cec6:	460c      	mov	r4, r1
 801cec8:	b976      	cbnz	r6, 801cee8 <_Bfree+0x28>
 801ceca:	2010      	movs	r0, #16
 801cecc:	f7ff ff04 	bl	801ccd8 <malloc>
 801ced0:	4602      	mov	r2, r0
 801ced2:	61e8      	str	r0, [r5, #28]
 801ced4:	b920      	cbnz	r0, 801cee0 <_Bfree+0x20>
 801ced6:	4b09      	ldr	r3, [pc, #36]	; (801cefc <_Bfree+0x3c>)
 801ced8:	4809      	ldr	r0, [pc, #36]	; (801cf00 <_Bfree+0x40>)
 801ceda:	218f      	movs	r1, #143	; 0x8f
 801cedc:	f002 f890 	bl	801f000 <__assert_func>
 801cee0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cee4:	6006      	str	r6, [r0, #0]
 801cee6:	60c6      	str	r6, [r0, #12]
 801cee8:	b13c      	cbz	r4, 801cefa <_Bfree+0x3a>
 801ceea:	69eb      	ldr	r3, [r5, #28]
 801ceec:	6862      	ldr	r2, [r4, #4]
 801ceee:	68db      	ldr	r3, [r3, #12]
 801cef0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801cef4:	6021      	str	r1, [r4, #0]
 801cef6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801cefa:	bd70      	pop	{r4, r5, r6, pc}
 801cefc:	08020618 	.word	0x08020618
 801cf00:	08020698 	.word	0x08020698

0801cf04 <__multadd>:
 801cf04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf08:	690d      	ldr	r5, [r1, #16]
 801cf0a:	4607      	mov	r7, r0
 801cf0c:	460c      	mov	r4, r1
 801cf0e:	461e      	mov	r6, r3
 801cf10:	f101 0c14 	add.w	ip, r1, #20
 801cf14:	2000      	movs	r0, #0
 801cf16:	f8dc 3000 	ldr.w	r3, [ip]
 801cf1a:	b299      	uxth	r1, r3
 801cf1c:	fb02 6101 	mla	r1, r2, r1, r6
 801cf20:	0c1e      	lsrs	r6, r3, #16
 801cf22:	0c0b      	lsrs	r3, r1, #16
 801cf24:	fb02 3306 	mla	r3, r2, r6, r3
 801cf28:	b289      	uxth	r1, r1
 801cf2a:	3001      	adds	r0, #1
 801cf2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801cf30:	4285      	cmp	r5, r0
 801cf32:	f84c 1b04 	str.w	r1, [ip], #4
 801cf36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801cf3a:	dcec      	bgt.n	801cf16 <__multadd+0x12>
 801cf3c:	b30e      	cbz	r6, 801cf82 <__multadd+0x7e>
 801cf3e:	68a3      	ldr	r3, [r4, #8]
 801cf40:	42ab      	cmp	r3, r5
 801cf42:	dc19      	bgt.n	801cf78 <__multadd+0x74>
 801cf44:	6861      	ldr	r1, [r4, #4]
 801cf46:	4638      	mov	r0, r7
 801cf48:	3101      	adds	r1, #1
 801cf4a:	f7ff ff79 	bl	801ce40 <_Balloc>
 801cf4e:	4680      	mov	r8, r0
 801cf50:	b928      	cbnz	r0, 801cf5e <__multadd+0x5a>
 801cf52:	4602      	mov	r2, r0
 801cf54:	4b0c      	ldr	r3, [pc, #48]	; (801cf88 <__multadd+0x84>)
 801cf56:	480d      	ldr	r0, [pc, #52]	; (801cf8c <__multadd+0x88>)
 801cf58:	21ba      	movs	r1, #186	; 0xba
 801cf5a:	f002 f851 	bl	801f000 <__assert_func>
 801cf5e:	6922      	ldr	r2, [r4, #16]
 801cf60:	3202      	adds	r2, #2
 801cf62:	f104 010c 	add.w	r1, r4, #12
 801cf66:	0092      	lsls	r2, r2, #2
 801cf68:	300c      	adds	r0, #12
 801cf6a:	f7ff f85e 	bl	801c02a <memcpy>
 801cf6e:	4621      	mov	r1, r4
 801cf70:	4638      	mov	r0, r7
 801cf72:	f7ff ffa5 	bl	801cec0 <_Bfree>
 801cf76:	4644      	mov	r4, r8
 801cf78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801cf7c:	3501      	adds	r5, #1
 801cf7e:	615e      	str	r6, [r3, #20]
 801cf80:	6125      	str	r5, [r4, #16]
 801cf82:	4620      	mov	r0, r4
 801cf84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cf88:	08020687 	.word	0x08020687
 801cf8c:	08020698 	.word	0x08020698

0801cf90 <__s2b>:
 801cf90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cf94:	460c      	mov	r4, r1
 801cf96:	4615      	mov	r5, r2
 801cf98:	461f      	mov	r7, r3
 801cf9a:	2209      	movs	r2, #9
 801cf9c:	3308      	adds	r3, #8
 801cf9e:	4606      	mov	r6, r0
 801cfa0:	fb93 f3f2 	sdiv	r3, r3, r2
 801cfa4:	2100      	movs	r1, #0
 801cfa6:	2201      	movs	r2, #1
 801cfa8:	429a      	cmp	r2, r3
 801cfaa:	db09      	blt.n	801cfc0 <__s2b+0x30>
 801cfac:	4630      	mov	r0, r6
 801cfae:	f7ff ff47 	bl	801ce40 <_Balloc>
 801cfb2:	b940      	cbnz	r0, 801cfc6 <__s2b+0x36>
 801cfb4:	4602      	mov	r2, r0
 801cfb6:	4b19      	ldr	r3, [pc, #100]	; (801d01c <__s2b+0x8c>)
 801cfb8:	4819      	ldr	r0, [pc, #100]	; (801d020 <__s2b+0x90>)
 801cfba:	21d3      	movs	r1, #211	; 0xd3
 801cfbc:	f002 f820 	bl	801f000 <__assert_func>
 801cfc0:	0052      	lsls	r2, r2, #1
 801cfc2:	3101      	adds	r1, #1
 801cfc4:	e7f0      	b.n	801cfa8 <__s2b+0x18>
 801cfc6:	9b08      	ldr	r3, [sp, #32]
 801cfc8:	6143      	str	r3, [r0, #20]
 801cfca:	2d09      	cmp	r5, #9
 801cfcc:	f04f 0301 	mov.w	r3, #1
 801cfd0:	6103      	str	r3, [r0, #16]
 801cfd2:	dd16      	ble.n	801d002 <__s2b+0x72>
 801cfd4:	f104 0909 	add.w	r9, r4, #9
 801cfd8:	46c8      	mov	r8, r9
 801cfda:	442c      	add	r4, r5
 801cfdc:	f818 3b01 	ldrb.w	r3, [r8], #1
 801cfe0:	4601      	mov	r1, r0
 801cfe2:	3b30      	subs	r3, #48	; 0x30
 801cfe4:	220a      	movs	r2, #10
 801cfe6:	4630      	mov	r0, r6
 801cfe8:	f7ff ff8c 	bl	801cf04 <__multadd>
 801cfec:	45a0      	cmp	r8, r4
 801cfee:	d1f5      	bne.n	801cfdc <__s2b+0x4c>
 801cff0:	f1a5 0408 	sub.w	r4, r5, #8
 801cff4:	444c      	add	r4, r9
 801cff6:	1b2d      	subs	r5, r5, r4
 801cff8:	1963      	adds	r3, r4, r5
 801cffa:	42bb      	cmp	r3, r7
 801cffc:	db04      	blt.n	801d008 <__s2b+0x78>
 801cffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d002:	340a      	adds	r4, #10
 801d004:	2509      	movs	r5, #9
 801d006:	e7f6      	b.n	801cff6 <__s2b+0x66>
 801d008:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d00c:	4601      	mov	r1, r0
 801d00e:	3b30      	subs	r3, #48	; 0x30
 801d010:	220a      	movs	r2, #10
 801d012:	4630      	mov	r0, r6
 801d014:	f7ff ff76 	bl	801cf04 <__multadd>
 801d018:	e7ee      	b.n	801cff8 <__s2b+0x68>
 801d01a:	bf00      	nop
 801d01c:	08020687 	.word	0x08020687
 801d020:	08020698 	.word	0x08020698

0801d024 <__hi0bits>:
 801d024:	0c03      	lsrs	r3, r0, #16
 801d026:	041b      	lsls	r3, r3, #16
 801d028:	b9d3      	cbnz	r3, 801d060 <__hi0bits+0x3c>
 801d02a:	0400      	lsls	r0, r0, #16
 801d02c:	2310      	movs	r3, #16
 801d02e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801d032:	bf04      	itt	eq
 801d034:	0200      	lsleq	r0, r0, #8
 801d036:	3308      	addeq	r3, #8
 801d038:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801d03c:	bf04      	itt	eq
 801d03e:	0100      	lsleq	r0, r0, #4
 801d040:	3304      	addeq	r3, #4
 801d042:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801d046:	bf04      	itt	eq
 801d048:	0080      	lsleq	r0, r0, #2
 801d04a:	3302      	addeq	r3, #2
 801d04c:	2800      	cmp	r0, #0
 801d04e:	db05      	blt.n	801d05c <__hi0bits+0x38>
 801d050:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801d054:	f103 0301 	add.w	r3, r3, #1
 801d058:	bf08      	it	eq
 801d05a:	2320      	moveq	r3, #32
 801d05c:	4618      	mov	r0, r3
 801d05e:	4770      	bx	lr
 801d060:	2300      	movs	r3, #0
 801d062:	e7e4      	b.n	801d02e <__hi0bits+0xa>

0801d064 <__lo0bits>:
 801d064:	6803      	ldr	r3, [r0, #0]
 801d066:	f013 0207 	ands.w	r2, r3, #7
 801d06a:	d00c      	beq.n	801d086 <__lo0bits+0x22>
 801d06c:	07d9      	lsls	r1, r3, #31
 801d06e:	d422      	bmi.n	801d0b6 <__lo0bits+0x52>
 801d070:	079a      	lsls	r2, r3, #30
 801d072:	bf49      	itett	mi
 801d074:	085b      	lsrmi	r3, r3, #1
 801d076:	089b      	lsrpl	r3, r3, #2
 801d078:	6003      	strmi	r3, [r0, #0]
 801d07a:	2201      	movmi	r2, #1
 801d07c:	bf5c      	itt	pl
 801d07e:	6003      	strpl	r3, [r0, #0]
 801d080:	2202      	movpl	r2, #2
 801d082:	4610      	mov	r0, r2
 801d084:	4770      	bx	lr
 801d086:	b299      	uxth	r1, r3
 801d088:	b909      	cbnz	r1, 801d08e <__lo0bits+0x2a>
 801d08a:	0c1b      	lsrs	r3, r3, #16
 801d08c:	2210      	movs	r2, #16
 801d08e:	b2d9      	uxtb	r1, r3
 801d090:	b909      	cbnz	r1, 801d096 <__lo0bits+0x32>
 801d092:	3208      	adds	r2, #8
 801d094:	0a1b      	lsrs	r3, r3, #8
 801d096:	0719      	lsls	r1, r3, #28
 801d098:	bf04      	itt	eq
 801d09a:	091b      	lsreq	r3, r3, #4
 801d09c:	3204      	addeq	r2, #4
 801d09e:	0799      	lsls	r1, r3, #30
 801d0a0:	bf04      	itt	eq
 801d0a2:	089b      	lsreq	r3, r3, #2
 801d0a4:	3202      	addeq	r2, #2
 801d0a6:	07d9      	lsls	r1, r3, #31
 801d0a8:	d403      	bmi.n	801d0b2 <__lo0bits+0x4e>
 801d0aa:	085b      	lsrs	r3, r3, #1
 801d0ac:	f102 0201 	add.w	r2, r2, #1
 801d0b0:	d003      	beq.n	801d0ba <__lo0bits+0x56>
 801d0b2:	6003      	str	r3, [r0, #0]
 801d0b4:	e7e5      	b.n	801d082 <__lo0bits+0x1e>
 801d0b6:	2200      	movs	r2, #0
 801d0b8:	e7e3      	b.n	801d082 <__lo0bits+0x1e>
 801d0ba:	2220      	movs	r2, #32
 801d0bc:	e7e1      	b.n	801d082 <__lo0bits+0x1e>
	...

0801d0c0 <__i2b>:
 801d0c0:	b510      	push	{r4, lr}
 801d0c2:	460c      	mov	r4, r1
 801d0c4:	2101      	movs	r1, #1
 801d0c6:	f7ff febb 	bl	801ce40 <_Balloc>
 801d0ca:	4602      	mov	r2, r0
 801d0cc:	b928      	cbnz	r0, 801d0da <__i2b+0x1a>
 801d0ce:	4b05      	ldr	r3, [pc, #20]	; (801d0e4 <__i2b+0x24>)
 801d0d0:	4805      	ldr	r0, [pc, #20]	; (801d0e8 <__i2b+0x28>)
 801d0d2:	f240 1145 	movw	r1, #325	; 0x145
 801d0d6:	f001 ff93 	bl	801f000 <__assert_func>
 801d0da:	2301      	movs	r3, #1
 801d0dc:	6144      	str	r4, [r0, #20]
 801d0de:	6103      	str	r3, [r0, #16]
 801d0e0:	bd10      	pop	{r4, pc}
 801d0e2:	bf00      	nop
 801d0e4:	08020687 	.word	0x08020687
 801d0e8:	08020698 	.word	0x08020698

0801d0ec <__multiply>:
 801d0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0f0:	4691      	mov	r9, r2
 801d0f2:	690a      	ldr	r2, [r1, #16]
 801d0f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d0f8:	429a      	cmp	r2, r3
 801d0fa:	bfb8      	it	lt
 801d0fc:	460b      	movlt	r3, r1
 801d0fe:	460c      	mov	r4, r1
 801d100:	bfbc      	itt	lt
 801d102:	464c      	movlt	r4, r9
 801d104:	4699      	movlt	r9, r3
 801d106:	6927      	ldr	r7, [r4, #16]
 801d108:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801d10c:	68a3      	ldr	r3, [r4, #8]
 801d10e:	6861      	ldr	r1, [r4, #4]
 801d110:	eb07 060a 	add.w	r6, r7, sl
 801d114:	42b3      	cmp	r3, r6
 801d116:	b085      	sub	sp, #20
 801d118:	bfb8      	it	lt
 801d11a:	3101      	addlt	r1, #1
 801d11c:	f7ff fe90 	bl	801ce40 <_Balloc>
 801d120:	b930      	cbnz	r0, 801d130 <__multiply+0x44>
 801d122:	4602      	mov	r2, r0
 801d124:	4b44      	ldr	r3, [pc, #272]	; (801d238 <__multiply+0x14c>)
 801d126:	4845      	ldr	r0, [pc, #276]	; (801d23c <__multiply+0x150>)
 801d128:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801d12c:	f001 ff68 	bl	801f000 <__assert_func>
 801d130:	f100 0514 	add.w	r5, r0, #20
 801d134:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801d138:	462b      	mov	r3, r5
 801d13a:	2200      	movs	r2, #0
 801d13c:	4543      	cmp	r3, r8
 801d13e:	d321      	bcc.n	801d184 <__multiply+0x98>
 801d140:	f104 0314 	add.w	r3, r4, #20
 801d144:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801d148:	f109 0314 	add.w	r3, r9, #20
 801d14c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801d150:	9202      	str	r2, [sp, #8]
 801d152:	1b3a      	subs	r2, r7, r4
 801d154:	3a15      	subs	r2, #21
 801d156:	f022 0203 	bic.w	r2, r2, #3
 801d15a:	3204      	adds	r2, #4
 801d15c:	f104 0115 	add.w	r1, r4, #21
 801d160:	428f      	cmp	r7, r1
 801d162:	bf38      	it	cc
 801d164:	2204      	movcc	r2, #4
 801d166:	9201      	str	r2, [sp, #4]
 801d168:	9a02      	ldr	r2, [sp, #8]
 801d16a:	9303      	str	r3, [sp, #12]
 801d16c:	429a      	cmp	r2, r3
 801d16e:	d80c      	bhi.n	801d18a <__multiply+0x9e>
 801d170:	2e00      	cmp	r6, #0
 801d172:	dd03      	ble.n	801d17c <__multiply+0x90>
 801d174:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d178:	2b00      	cmp	r3, #0
 801d17a:	d05b      	beq.n	801d234 <__multiply+0x148>
 801d17c:	6106      	str	r6, [r0, #16]
 801d17e:	b005      	add	sp, #20
 801d180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d184:	f843 2b04 	str.w	r2, [r3], #4
 801d188:	e7d8      	b.n	801d13c <__multiply+0x50>
 801d18a:	f8b3 a000 	ldrh.w	sl, [r3]
 801d18e:	f1ba 0f00 	cmp.w	sl, #0
 801d192:	d024      	beq.n	801d1de <__multiply+0xf2>
 801d194:	f104 0e14 	add.w	lr, r4, #20
 801d198:	46a9      	mov	r9, r5
 801d19a:	f04f 0c00 	mov.w	ip, #0
 801d19e:	f85e 2b04 	ldr.w	r2, [lr], #4
 801d1a2:	f8d9 1000 	ldr.w	r1, [r9]
 801d1a6:	fa1f fb82 	uxth.w	fp, r2
 801d1aa:	b289      	uxth	r1, r1
 801d1ac:	fb0a 110b 	mla	r1, sl, fp, r1
 801d1b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801d1b4:	f8d9 2000 	ldr.w	r2, [r9]
 801d1b8:	4461      	add	r1, ip
 801d1ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d1be:	fb0a c20b 	mla	r2, sl, fp, ip
 801d1c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801d1c6:	b289      	uxth	r1, r1
 801d1c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801d1cc:	4577      	cmp	r7, lr
 801d1ce:	f849 1b04 	str.w	r1, [r9], #4
 801d1d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d1d6:	d8e2      	bhi.n	801d19e <__multiply+0xb2>
 801d1d8:	9a01      	ldr	r2, [sp, #4]
 801d1da:	f845 c002 	str.w	ip, [r5, r2]
 801d1de:	9a03      	ldr	r2, [sp, #12]
 801d1e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801d1e4:	3304      	adds	r3, #4
 801d1e6:	f1b9 0f00 	cmp.w	r9, #0
 801d1ea:	d021      	beq.n	801d230 <__multiply+0x144>
 801d1ec:	6829      	ldr	r1, [r5, #0]
 801d1ee:	f104 0c14 	add.w	ip, r4, #20
 801d1f2:	46ae      	mov	lr, r5
 801d1f4:	f04f 0a00 	mov.w	sl, #0
 801d1f8:	f8bc b000 	ldrh.w	fp, [ip]
 801d1fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801d200:	fb09 220b 	mla	r2, r9, fp, r2
 801d204:	4452      	add	r2, sl
 801d206:	b289      	uxth	r1, r1
 801d208:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801d20c:	f84e 1b04 	str.w	r1, [lr], #4
 801d210:	f85c 1b04 	ldr.w	r1, [ip], #4
 801d214:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801d218:	f8be 1000 	ldrh.w	r1, [lr]
 801d21c:	fb09 110a 	mla	r1, r9, sl, r1
 801d220:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801d224:	4567      	cmp	r7, ip
 801d226:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801d22a:	d8e5      	bhi.n	801d1f8 <__multiply+0x10c>
 801d22c:	9a01      	ldr	r2, [sp, #4]
 801d22e:	50a9      	str	r1, [r5, r2]
 801d230:	3504      	adds	r5, #4
 801d232:	e799      	b.n	801d168 <__multiply+0x7c>
 801d234:	3e01      	subs	r6, #1
 801d236:	e79b      	b.n	801d170 <__multiply+0x84>
 801d238:	08020687 	.word	0x08020687
 801d23c:	08020698 	.word	0x08020698

0801d240 <__pow5mult>:
 801d240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d244:	4615      	mov	r5, r2
 801d246:	f012 0203 	ands.w	r2, r2, #3
 801d24a:	4606      	mov	r6, r0
 801d24c:	460f      	mov	r7, r1
 801d24e:	d007      	beq.n	801d260 <__pow5mult+0x20>
 801d250:	4c25      	ldr	r4, [pc, #148]	; (801d2e8 <__pow5mult+0xa8>)
 801d252:	3a01      	subs	r2, #1
 801d254:	2300      	movs	r3, #0
 801d256:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d25a:	f7ff fe53 	bl	801cf04 <__multadd>
 801d25e:	4607      	mov	r7, r0
 801d260:	10ad      	asrs	r5, r5, #2
 801d262:	d03d      	beq.n	801d2e0 <__pow5mult+0xa0>
 801d264:	69f4      	ldr	r4, [r6, #28]
 801d266:	b97c      	cbnz	r4, 801d288 <__pow5mult+0x48>
 801d268:	2010      	movs	r0, #16
 801d26a:	f7ff fd35 	bl	801ccd8 <malloc>
 801d26e:	4602      	mov	r2, r0
 801d270:	61f0      	str	r0, [r6, #28]
 801d272:	b928      	cbnz	r0, 801d280 <__pow5mult+0x40>
 801d274:	4b1d      	ldr	r3, [pc, #116]	; (801d2ec <__pow5mult+0xac>)
 801d276:	481e      	ldr	r0, [pc, #120]	; (801d2f0 <__pow5mult+0xb0>)
 801d278:	f240 11b3 	movw	r1, #435	; 0x1b3
 801d27c:	f001 fec0 	bl	801f000 <__assert_func>
 801d280:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d284:	6004      	str	r4, [r0, #0]
 801d286:	60c4      	str	r4, [r0, #12]
 801d288:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801d28c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d290:	b94c      	cbnz	r4, 801d2a6 <__pow5mult+0x66>
 801d292:	f240 2171 	movw	r1, #625	; 0x271
 801d296:	4630      	mov	r0, r6
 801d298:	f7ff ff12 	bl	801d0c0 <__i2b>
 801d29c:	2300      	movs	r3, #0
 801d29e:	f8c8 0008 	str.w	r0, [r8, #8]
 801d2a2:	4604      	mov	r4, r0
 801d2a4:	6003      	str	r3, [r0, #0]
 801d2a6:	f04f 0900 	mov.w	r9, #0
 801d2aa:	07eb      	lsls	r3, r5, #31
 801d2ac:	d50a      	bpl.n	801d2c4 <__pow5mult+0x84>
 801d2ae:	4639      	mov	r1, r7
 801d2b0:	4622      	mov	r2, r4
 801d2b2:	4630      	mov	r0, r6
 801d2b4:	f7ff ff1a 	bl	801d0ec <__multiply>
 801d2b8:	4639      	mov	r1, r7
 801d2ba:	4680      	mov	r8, r0
 801d2bc:	4630      	mov	r0, r6
 801d2be:	f7ff fdff 	bl	801cec0 <_Bfree>
 801d2c2:	4647      	mov	r7, r8
 801d2c4:	106d      	asrs	r5, r5, #1
 801d2c6:	d00b      	beq.n	801d2e0 <__pow5mult+0xa0>
 801d2c8:	6820      	ldr	r0, [r4, #0]
 801d2ca:	b938      	cbnz	r0, 801d2dc <__pow5mult+0x9c>
 801d2cc:	4622      	mov	r2, r4
 801d2ce:	4621      	mov	r1, r4
 801d2d0:	4630      	mov	r0, r6
 801d2d2:	f7ff ff0b 	bl	801d0ec <__multiply>
 801d2d6:	6020      	str	r0, [r4, #0]
 801d2d8:	f8c0 9000 	str.w	r9, [r0]
 801d2dc:	4604      	mov	r4, r0
 801d2de:	e7e4      	b.n	801d2aa <__pow5mult+0x6a>
 801d2e0:	4638      	mov	r0, r7
 801d2e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d2e6:	bf00      	nop
 801d2e8:	080207e8 	.word	0x080207e8
 801d2ec:	08020618 	.word	0x08020618
 801d2f0:	08020698 	.word	0x08020698

0801d2f4 <__lshift>:
 801d2f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d2f8:	460c      	mov	r4, r1
 801d2fa:	6849      	ldr	r1, [r1, #4]
 801d2fc:	6923      	ldr	r3, [r4, #16]
 801d2fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d302:	68a3      	ldr	r3, [r4, #8]
 801d304:	4607      	mov	r7, r0
 801d306:	4691      	mov	r9, r2
 801d308:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d30c:	f108 0601 	add.w	r6, r8, #1
 801d310:	42b3      	cmp	r3, r6
 801d312:	db0b      	blt.n	801d32c <__lshift+0x38>
 801d314:	4638      	mov	r0, r7
 801d316:	f7ff fd93 	bl	801ce40 <_Balloc>
 801d31a:	4605      	mov	r5, r0
 801d31c:	b948      	cbnz	r0, 801d332 <__lshift+0x3e>
 801d31e:	4602      	mov	r2, r0
 801d320:	4b28      	ldr	r3, [pc, #160]	; (801d3c4 <__lshift+0xd0>)
 801d322:	4829      	ldr	r0, [pc, #164]	; (801d3c8 <__lshift+0xd4>)
 801d324:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801d328:	f001 fe6a 	bl	801f000 <__assert_func>
 801d32c:	3101      	adds	r1, #1
 801d32e:	005b      	lsls	r3, r3, #1
 801d330:	e7ee      	b.n	801d310 <__lshift+0x1c>
 801d332:	2300      	movs	r3, #0
 801d334:	f100 0114 	add.w	r1, r0, #20
 801d338:	f100 0210 	add.w	r2, r0, #16
 801d33c:	4618      	mov	r0, r3
 801d33e:	4553      	cmp	r3, sl
 801d340:	db33      	blt.n	801d3aa <__lshift+0xb6>
 801d342:	6920      	ldr	r0, [r4, #16]
 801d344:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d348:	f104 0314 	add.w	r3, r4, #20
 801d34c:	f019 091f 	ands.w	r9, r9, #31
 801d350:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d354:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d358:	d02b      	beq.n	801d3b2 <__lshift+0xbe>
 801d35a:	f1c9 0e20 	rsb	lr, r9, #32
 801d35e:	468a      	mov	sl, r1
 801d360:	2200      	movs	r2, #0
 801d362:	6818      	ldr	r0, [r3, #0]
 801d364:	fa00 f009 	lsl.w	r0, r0, r9
 801d368:	4310      	orrs	r0, r2
 801d36a:	f84a 0b04 	str.w	r0, [sl], #4
 801d36e:	f853 2b04 	ldr.w	r2, [r3], #4
 801d372:	459c      	cmp	ip, r3
 801d374:	fa22 f20e 	lsr.w	r2, r2, lr
 801d378:	d8f3      	bhi.n	801d362 <__lshift+0x6e>
 801d37a:	ebac 0304 	sub.w	r3, ip, r4
 801d37e:	3b15      	subs	r3, #21
 801d380:	f023 0303 	bic.w	r3, r3, #3
 801d384:	3304      	adds	r3, #4
 801d386:	f104 0015 	add.w	r0, r4, #21
 801d38a:	4584      	cmp	ip, r0
 801d38c:	bf38      	it	cc
 801d38e:	2304      	movcc	r3, #4
 801d390:	50ca      	str	r2, [r1, r3]
 801d392:	b10a      	cbz	r2, 801d398 <__lshift+0xa4>
 801d394:	f108 0602 	add.w	r6, r8, #2
 801d398:	3e01      	subs	r6, #1
 801d39a:	4638      	mov	r0, r7
 801d39c:	612e      	str	r6, [r5, #16]
 801d39e:	4621      	mov	r1, r4
 801d3a0:	f7ff fd8e 	bl	801cec0 <_Bfree>
 801d3a4:	4628      	mov	r0, r5
 801d3a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d3aa:	f842 0f04 	str.w	r0, [r2, #4]!
 801d3ae:	3301      	adds	r3, #1
 801d3b0:	e7c5      	b.n	801d33e <__lshift+0x4a>
 801d3b2:	3904      	subs	r1, #4
 801d3b4:	f853 2b04 	ldr.w	r2, [r3], #4
 801d3b8:	f841 2f04 	str.w	r2, [r1, #4]!
 801d3bc:	459c      	cmp	ip, r3
 801d3be:	d8f9      	bhi.n	801d3b4 <__lshift+0xc0>
 801d3c0:	e7ea      	b.n	801d398 <__lshift+0xa4>
 801d3c2:	bf00      	nop
 801d3c4:	08020687 	.word	0x08020687
 801d3c8:	08020698 	.word	0x08020698

0801d3cc <__mcmp>:
 801d3cc:	b530      	push	{r4, r5, lr}
 801d3ce:	6902      	ldr	r2, [r0, #16]
 801d3d0:	690c      	ldr	r4, [r1, #16]
 801d3d2:	1b12      	subs	r2, r2, r4
 801d3d4:	d10e      	bne.n	801d3f4 <__mcmp+0x28>
 801d3d6:	f100 0314 	add.w	r3, r0, #20
 801d3da:	3114      	adds	r1, #20
 801d3dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801d3e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801d3e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801d3e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801d3ec:	42a5      	cmp	r5, r4
 801d3ee:	d003      	beq.n	801d3f8 <__mcmp+0x2c>
 801d3f0:	d305      	bcc.n	801d3fe <__mcmp+0x32>
 801d3f2:	2201      	movs	r2, #1
 801d3f4:	4610      	mov	r0, r2
 801d3f6:	bd30      	pop	{r4, r5, pc}
 801d3f8:	4283      	cmp	r3, r0
 801d3fa:	d3f3      	bcc.n	801d3e4 <__mcmp+0x18>
 801d3fc:	e7fa      	b.n	801d3f4 <__mcmp+0x28>
 801d3fe:	f04f 32ff 	mov.w	r2, #4294967295
 801d402:	e7f7      	b.n	801d3f4 <__mcmp+0x28>

0801d404 <__mdiff>:
 801d404:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d408:	460c      	mov	r4, r1
 801d40a:	4606      	mov	r6, r0
 801d40c:	4611      	mov	r1, r2
 801d40e:	4620      	mov	r0, r4
 801d410:	4690      	mov	r8, r2
 801d412:	f7ff ffdb 	bl	801d3cc <__mcmp>
 801d416:	1e05      	subs	r5, r0, #0
 801d418:	d110      	bne.n	801d43c <__mdiff+0x38>
 801d41a:	4629      	mov	r1, r5
 801d41c:	4630      	mov	r0, r6
 801d41e:	f7ff fd0f 	bl	801ce40 <_Balloc>
 801d422:	b930      	cbnz	r0, 801d432 <__mdiff+0x2e>
 801d424:	4b3a      	ldr	r3, [pc, #232]	; (801d510 <__mdiff+0x10c>)
 801d426:	4602      	mov	r2, r0
 801d428:	f240 2137 	movw	r1, #567	; 0x237
 801d42c:	4839      	ldr	r0, [pc, #228]	; (801d514 <__mdiff+0x110>)
 801d42e:	f001 fde7 	bl	801f000 <__assert_func>
 801d432:	2301      	movs	r3, #1
 801d434:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d438:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d43c:	bfa4      	itt	ge
 801d43e:	4643      	movge	r3, r8
 801d440:	46a0      	movge	r8, r4
 801d442:	4630      	mov	r0, r6
 801d444:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d448:	bfa6      	itte	ge
 801d44a:	461c      	movge	r4, r3
 801d44c:	2500      	movge	r5, #0
 801d44e:	2501      	movlt	r5, #1
 801d450:	f7ff fcf6 	bl	801ce40 <_Balloc>
 801d454:	b920      	cbnz	r0, 801d460 <__mdiff+0x5c>
 801d456:	4b2e      	ldr	r3, [pc, #184]	; (801d510 <__mdiff+0x10c>)
 801d458:	4602      	mov	r2, r0
 801d45a:	f240 2145 	movw	r1, #581	; 0x245
 801d45e:	e7e5      	b.n	801d42c <__mdiff+0x28>
 801d460:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801d464:	6926      	ldr	r6, [r4, #16]
 801d466:	60c5      	str	r5, [r0, #12]
 801d468:	f104 0914 	add.w	r9, r4, #20
 801d46c:	f108 0514 	add.w	r5, r8, #20
 801d470:	f100 0e14 	add.w	lr, r0, #20
 801d474:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801d478:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801d47c:	f108 0210 	add.w	r2, r8, #16
 801d480:	46f2      	mov	sl, lr
 801d482:	2100      	movs	r1, #0
 801d484:	f859 3b04 	ldr.w	r3, [r9], #4
 801d488:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801d48c:	fa11 f88b 	uxtah	r8, r1, fp
 801d490:	b299      	uxth	r1, r3
 801d492:	0c1b      	lsrs	r3, r3, #16
 801d494:	eba8 0801 	sub.w	r8, r8, r1
 801d498:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801d49c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801d4a0:	fa1f f888 	uxth.w	r8, r8
 801d4a4:	1419      	asrs	r1, r3, #16
 801d4a6:	454e      	cmp	r6, r9
 801d4a8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801d4ac:	f84a 3b04 	str.w	r3, [sl], #4
 801d4b0:	d8e8      	bhi.n	801d484 <__mdiff+0x80>
 801d4b2:	1b33      	subs	r3, r6, r4
 801d4b4:	3b15      	subs	r3, #21
 801d4b6:	f023 0303 	bic.w	r3, r3, #3
 801d4ba:	3304      	adds	r3, #4
 801d4bc:	3415      	adds	r4, #21
 801d4be:	42a6      	cmp	r6, r4
 801d4c0:	bf38      	it	cc
 801d4c2:	2304      	movcc	r3, #4
 801d4c4:	441d      	add	r5, r3
 801d4c6:	4473      	add	r3, lr
 801d4c8:	469e      	mov	lr, r3
 801d4ca:	462e      	mov	r6, r5
 801d4cc:	4566      	cmp	r6, ip
 801d4ce:	d30e      	bcc.n	801d4ee <__mdiff+0xea>
 801d4d0:	f10c 0203 	add.w	r2, ip, #3
 801d4d4:	1b52      	subs	r2, r2, r5
 801d4d6:	f022 0203 	bic.w	r2, r2, #3
 801d4da:	3d03      	subs	r5, #3
 801d4dc:	45ac      	cmp	ip, r5
 801d4de:	bf38      	it	cc
 801d4e0:	2200      	movcc	r2, #0
 801d4e2:	4413      	add	r3, r2
 801d4e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801d4e8:	b17a      	cbz	r2, 801d50a <__mdiff+0x106>
 801d4ea:	6107      	str	r7, [r0, #16]
 801d4ec:	e7a4      	b.n	801d438 <__mdiff+0x34>
 801d4ee:	f856 8b04 	ldr.w	r8, [r6], #4
 801d4f2:	fa11 f288 	uxtah	r2, r1, r8
 801d4f6:	1414      	asrs	r4, r2, #16
 801d4f8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801d4fc:	b292      	uxth	r2, r2
 801d4fe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801d502:	f84e 2b04 	str.w	r2, [lr], #4
 801d506:	1421      	asrs	r1, r4, #16
 801d508:	e7e0      	b.n	801d4cc <__mdiff+0xc8>
 801d50a:	3f01      	subs	r7, #1
 801d50c:	e7ea      	b.n	801d4e4 <__mdiff+0xe0>
 801d50e:	bf00      	nop
 801d510:	08020687 	.word	0x08020687
 801d514:	08020698 	.word	0x08020698

0801d518 <__ulp>:
 801d518:	b082      	sub	sp, #8
 801d51a:	ed8d 0b00 	vstr	d0, [sp]
 801d51e:	9a01      	ldr	r2, [sp, #4]
 801d520:	4b0f      	ldr	r3, [pc, #60]	; (801d560 <__ulp+0x48>)
 801d522:	4013      	ands	r3, r2
 801d524:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801d528:	2b00      	cmp	r3, #0
 801d52a:	dc08      	bgt.n	801d53e <__ulp+0x26>
 801d52c:	425b      	negs	r3, r3
 801d52e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801d532:	ea4f 5223 	mov.w	r2, r3, asr #20
 801d536:	da04      	bge.n	801d542 <__ulp+0x2a>
 801d538:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801d53c:	4113      	asrs	r3, r2
 801d53e:	2200      	movs	r2, #0
 801d540:	e008      	b.n	801d554 <__ulp+0x3c>
 801d542:	f1a2 0314 	sub.w	r3, r2, #20
 801d546:	2b1e      	cmp	r3, #30
 801d548:	bfda      	itte	le
 801d54a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801d54e:	40da      	lsrle	r2, r3
 801d550:	2201      	movgt	r2, #1
 801d552:	2300      	movs	r3, #0
 801d554:	4619      	mov	r1, r3
 801d556:	4610      	mov	r0, r2
 801d558:	ec41 0b10 	vmov	d0, r0, r1
 801d55c:	b002      	add	sp, #8
 801d55e:	4770      	bx	lr
 801d560:	7ff00000 	.word	0x7ff00000

0801d564 <__b2d>:
 801d564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d568:	6906      	ldr	r6, [r0, #16]
 801d56a:	f100 0814 	add.w	r8, r0, #20
 801d56e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801d572:	1f37      	subs	r7, r6, #4
 801d574:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d578:	4610      	mov	r0, r2
 801d57a:	f7ff fd53 	bl	801d024 <__hi0bits>
 801d57e:	f1c0 0320 	rsb	r3, r0, #32
 801d582:	280a      	cmp	r0, #10
 801d584:	600b      	str	r3, [r1, #0]
 801d586:	491b      	ldr	r1, [pc, #108]	; (801d5f4 <__b2d+0x90>)
 801d588:	dc15      	bgt.n	801d5b6 <__b2d+0x52>
 801d58a:	f1c0 0c0b 	rsb	ip, r0, #11
 801d58e:	fa22 f30c 	lsr.w	r3, r2, ip
 801d592:	45b8      	cmp	r8, r7
 801d594:	ea43 0501 	orr.w	r5, r3, r1
 801d598:	bf34      	ite	cc
 801d59a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d59e:	2300      	movcs	r3, #0
 801d5a0:	3015      	adds	r0, #21
 801d5a2:	fa02 f000 	lsl.w	r0, r2, r0
 801d5a6:	fa23 f30c 	lsr.w	r3, r3, ip
 801d5aa:	4303      	orrs	r3, r0
 801d5ac:	461c      	mov	r4, r3
 801d5ae:	ec45 4b10 	vmov	d0, r4, r5
 801d5b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d5b6:	45b8      	cmp	r8, r7
 801d5b8:	bf3a      	itte	cc
 801d5ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d5be:	f1a6 0708 	subcc.w	r7, r6, #8
 801d5c2:	2300      	movcs	r3, #0
 801d5c4:	380b      	subs	r0, #11
 801d5c6:	d012      	beq.n	801d5ee <__b2d+0x8a>
 801d5c8:	f1c0 0120 	rsb	r1, r0, #32
 801d5cc:	fa23 f401 	lsr.w	r4, r3, r1
 801d5d0:	4082      	lsls	r2, r0
 801d5d2:	4322      	orrs	r2, r4
 801d5d4:	4547      	cmp	r7, r8
 801d5d6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801d5da:	bf8c      	ite	hi
 801d5dc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801d5e0:	2200      	movls	r2, #0
 801d5e2:	4083      	lsls	r3, r0
 801d5e4:	40ca      	lsrs	r2, r1
 801d5e6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801d5ea:	4313      	orrs	r3, r2
 801d5ec:	e7de      	b.n	801d5ac <__b2d+0x48>
 801d5ee:	ea42 0501 	orr.w	r5, r2, r1
 801d5f2:	e7db      	b.n	801d5ac <__b2d+0x48>
 801d5f4:	3ff00000 	.word	0x3ff00000

0801d5f8 <__d2b>:
 801d5f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d5fc:	460f      	mov	r7, r1
 801d5fe:	2101      	movs	r1, #1
 801d600:	ec59 8b10 	vmov	r8, r9, d0
 801d604:	4616      	mov	r6, r2
 801d606:	f7ff fc1b 	bl	801ce40 <_Balloc>
 801d60a:	4604      	mov	r4, r0
 801d60c:	b930      	cbnz	r0, 801d61c <__d2b+0x24>
 801d60e:	4602      	mov	r2, r0
 801d610:	4b24      	ldr	r3, [pc, #144]	; (801d6a4 <__d2b+0xac>)
 801d612:	4825      	ldr	r0, [pc, #148]	; (801d6a8 <__d2b+0xb0>)
 801d614:	f240 310f 	movw	r1, #783	; 0x30f
 801d618:	f001 fcf2 	bl	801f000 <__assert_func>
 801d61c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d620:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d624:	bb2d      	cbnz	r5, 801d672 <__d2b+0x7a>
 801d626:	9301      	str	r3, [sp, #4]
 801d628:	f1b8 0300 	subs.w	r3, r8, #0
 801d62c:	d026      	beq.n	801d67c <__d2b+0x84>
 801d62e:	4668      	mov	r0, sp
 801d630:	9300      	str	r3, [sp, #0]
 801d632:	f7ff fd17 	bl	801d064 <__lo0bits>
 801d636:	e9dd 1200 	ldrd	r1, r2, [sp]
 801d63a:	b1e8      	cbz	r0, 801d678 <__d2b+0x80>
 801d63c:	f1c0 0320 	rsb	r3, r0, #32
 801d640:	fa02 f303 	lsl.w	r3, r2, r3
 801d644:	430b      	orrs	r3, r1
 801d646:	40c2      	lsrs	r2, r0
 801d648:	6163      	str	r3, [r4, #20]
 801d64a:	9201      	str	r2, [sp, #4]
 801d64c:	9b01      	ldr	r3, [sp, #4]
 801d64e:	61a3      	str	r3, [r4, #24]
 801d650:	2b00      	cmp	r3, #0
 801d652:	bf14      	ite	ne
 801d654:	2202      	movne	r2, #2
 801d656:	2201      	moveq	r2, #1
 801d658:	6122      	str	r2, [r4, #16]
 801d65a:	b1bd      	cbz	r5, 801d68c <__d2b+0x94>
 801d65c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d660:	4405      	add	r5, r0
 801d662:	603d      	str	r5, [r7, #0]
 801d664:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d668:	6030      	str	r0, [r6, #0]
 801d66a:	4620      	mov	r0, r4
 801d66c:	b003      	add	sp, #12
 801d66e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d676:	e7d6      	b.n	801d626 <__d2b+0x2e>
 801d678:	6161      	str	r1, [r4, #20]
 801d67a:	e7e7      	b.n	801d64c <__d2b+0x54>
 801d67c:	a801      	add	r0, sp, #4
 801d67e:	f7ff fcf1 	bl	801d064 <__lo0bits>
 801d682:	9b01      	ldr	r3, [sp, #4]
 801d684:	6163      	str	r3, [r4, #20]
 801d686:	3020      	adds	r0, #32
 801d688:	2201      	movs	r2, #1
 801d68a:	e7e5      	b.n	801d658 <__d2b+0x60>
 801d68c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d690:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d694:	6038      	str	r0, [r7, #0]
 801d696:	6918      	ldr	r0, [r3, #16]
 801d698:	f7ff fcc4 	bl	801d024 <__hi0bits>
 801d69c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d6a0:	e7e2      	b.n	801d668 <__d2b+0x70>
 801d6a2:	bf00      	nop
 801d6a4:	08020687 	.word	0x08020687
 801d6a8:	08020698 	.word	0x08020698

0801d6ac <__ratio>:
 801d6ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6b0:	4688      	mov	r8, r1
 801d6b2:	4669      	mov	r1, sp
 801d6b4:	4681      	mov	r9, r0
 801d6b6:	f7ff ff55 	bl	801d564 <__b2d>
 801d6ba:	a901      	add	r1, sp, #4
 801d6bc:	4640      	mov	r0, r8
 801d6be:	ec55 4b10 	vmov	r4, r5, d0
 801d6c2:	ee10 aa10 	vmov	sl, s0
 801d6c6:	f7ff ff4d 	bl	801d564 <__b2d>
 801d6ca:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801d6ce:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801d6d2:	1ad2      	subs	r2, r2, r3
 801d6d4:	e9dd 3100 	ldrd	r3, r1, [sp]
 801d6d8:	1a5b      	subs	r3, r3, r1
 801d6da:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801d6de:	ec57 6b10 	vmov	r6, r7, d0
 801d6e2:	2b00      	cmp	r3, #0
 801d6e4:	bfd6      	itet	le
 801d6e6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d6ea:	462a      	movgt	r2, r5
 801d6ec:	463a      	movle	r2, r7
 801d6ee:	46ab      	mov	fp, r5
 801d6f0:	bfd6      	itet	le
 801d6f2:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801d6f6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801d6fa:	ee00 3a90 	vmovle	s1, r3
 801d6fe:	ec4b ab17 	vmov	d7, sl, fp
 801d702:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801d706:	b003      	add	sp, #12
 801d708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d70c <__copybits>:
 801d70c:	3901      	subs	r1, #1
 801d70e:	b570      	push	{r4, r5, r6, lr}
 801d710:	1149      	asrs	r1, r1, #5
 801d712:	6914      	ldr	r4, [r2, #16]
 801d714:	3101      	adds	r1, #1
 801d716:	f102 0314 	add.w	r3, r2, #20
 801d71a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d71e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d722:	1f05      	subs	r5, r0, #4
 801d724:	42a3      	cmp	r3, r4
 801d726:	d30c      	bcc.n	801d742 <__copybits+0x36>
 801d728:	1aa3      	subs	r3, r4, r2
 801d72a:	3b11      	subs	r3, #17
 801d72c:	f023 0303 	bic.w	r3, r3, #3
 801d730:	3211      	adds	r2, #17
 801d732:	42a2      	cmp	r2, r4
 801d734:	bf88      	it	hi
 801d736:	2300      	movhi	r3, #0
 801d738:	4418      	add	r0, r3
 801d73a:	2300      	movs	r3, #0
 801d73c:	4288      	cmp	r0, r1
 801d73e:	d305      	bcc.n	801d74c <__copybits+0x40>
 801d740:	bd70      	pop	{r4, r5, r6, pc}
 801d742:	f853 6b04 	ldr.w	r6, [r3], #4
 801d746:	f845 6f04 	str.w	r6, [r5, #4]!
 801d74a:	e7eb      	b.n	801d724 <__copybits+0x18>
 801d74c:	f840 3b04 	str.w	r3, [r0], #4
 801d750:	e7f4      	b.n	801d73c <__copybits+0x30>

0801d752 <__any_on>:
 801d752:	f100 0214 	add.w	r2, r0, #20
 801d756:	6900      	ldr	r0, [r0, #16]
 801d758:	114b      	asrs	r3, r1, #5
 801d75a:	4298      	cmp	r0, r3
 801d75c:	b510      	push	{r4, lr}
 801d75e:	db11      	blt.n	801d784 <__any_on+0x32>
 801d760:	dd0a      	ble.n	801d778 <__any_on+0x26>
 801d762:	f011 011f 	ands.w	r1, r1, #31
 801d766:	d007      	beq.n	801d778 <__any_on+0x26>
 801d768:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d76c:	fa24 f001 	lsr.w	r0, r4, r1
 801d770:	fa00 f101 	lsl.w	r1, r0, r1
 801d774:	428c      	cmp	r4, r1
 801d776:	d10b      	bne.n	801d790 <__any_on+0x3e>
 801d778:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d77c:	4293      	cmp	r3, r2
 801d77e:	d803      	bhi.n	801d788 <__any_on+0x36>
 801d780:	2000      	movs	r0, #0
 801d782:	bd10      	pop	{r4, pc}
 801d784:	4603      	mov	r3, r0
 801d786:	e7f7      	b.n	801d778 <__any_on+0x26>
 801d788:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d78c:	2900      	cmp	r1, #0
 801d78e:	d0f5      	beq.n	801d77c <__any_on+0x2a>
 801d790:	2001      	movs	r0, #1
 801d792:	e7f6      	b.n	801d782 <__any_on+0x30>

0801d794 <sulp>:
 801d794:	b570      	push	{r4, r5, r6, lr}
 801d796:	4604      	mov	r4, r0
 801d798:	460d      	mov	r5, r1
 801d79a:	4616      	mov	r6, r2
 801d79c:	ec45 4b10 	vmov	d0, r4, r5
 801d7a0:	f7ff feba 	bl	801d518 <__ulp>
 801d7a4:	b17e      	cbz	r6, 801d7c6 <sulp+0x32>
 801d7a6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801d7aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801d7ae:	2b00      	cmp	r3, #0
 801d7b0:	dd09      	ble.n	801d7c6 <sulp+0x32>
 801d7b2:	051b      	lsls	r3, r3, #20
 801d7b4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801d7b8:	2000      	movs	r0, #0
 801d7ba:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801d7be:	ec41 0b17 	vmov	d7, r0, r1
 801d7c2:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d7c6:	bd70      	pop	{r4, r5, r6, pc}

0801d7c8 <_strtod_l>:
 801d7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7cc:	ed2d 8b0e 	vpush	{d8-d14}
 801d7d0:	b097      	sub	sp, #92	; 0x5c
 801d7d2:	4604      	mov	r4, r0
 801d7d4:	920d      	str	r2, [sp, #52]	; 0x34
 801d7d6:	2200      	movs	r2, #0
 801d7d8:	9212      	str	r2, [sp, #72]	; 0x48
 801d7da:	468a      	mov	sl, r1
 801d7dc:	f04f 0800 	mov.w	r8, #0
 801d7e0:	f04f 0900 	mov.w	r9, #0
 801d7e4:	460a      	mov	r2, r1
 801d7e6:	9211      	str	r2, [sp, #68]	; 0x44
 801d7e8:	7811      	ldrb	r1, [r2, #0]
 801d7ea:	292b      	cmp	r1, #43	; 0x2b
 801d7ec:	d04c      	beq.n	801d888 <_strtod_l+0xc0>
 801d7ee:	d839      	bhi.n	801d864 <_strtod_l+0x9c>
 801d7f0:	290d      	cmp	r1, #13
 801d7f2:	d833      	bhi.n	801d85c <_strtod_l+0x94>
 801d7f4:	2908      	cmp	r1, #8
 801d7f6:	d833      	bhi.n	801d860 <_strtod_l+0x98>
 801d7f8:	2900      	cmp	r1, #0
 801d7fa:	d03c      	beq.n	801d876 <_strtod_l+0xae>
 801d7fc:	2200      	movs	r2, #0
 801d7fe:	9208      	str	r2, [sp, #32]
 801d800:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d802:	7832      	ldrb	r2, [r6, #0]
 801d804:	2a30      	cmp	r2, #48	; 0x30
 801d806:	f040 80b8 	bne.w	801d97a <_strtod_l+0x1b2>
 801d80a:	7872      	ldrb	r2, [r6, #1]
 801d80c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801d810:	2a58      	cmp	r2, #88	; 0x58
 801d812:	d170      	bne.n	801d8f6 <_strtod_l+0x12e>
 801d814:	9302      	str	r3, [sp, #8]
 801d816:	9b08      	ldr	r3, [sp, #32]
 801d818:	9301      	str	r3, [sp, #4]
 801d81a:	ab12      	add	r3, sp, #72	; 0x48
 801d81c:	9300      	str	r3, [sp, #0]
 801d81e:	4a91      	ldr	r2, [pc, #580]	; (801da64 <_strtod_l+0x29c>)
 801d820:	ab13      	add	r3, sp, #76	; 0x4c
 801d822:	a911      	add	r1, sp, #68	; 0x44
 801d824:	4620      	mov	r0, r4
 801d826:	f001 fc87 	bl	801f138 <__gethex>
 801d82a:	f010 070f 	ands.w	r7, r0, #15
 801d82e:	4605      	mov	r5, r0
 801d830:	d005      	beq.n	801d83e <_strtod_l+0x76>
 801d832:	2f06      	cmp	r7, #6
 801d834:	d12a      	bne.n	801d88c <_strtod_l+0xc4>
 801d836:	3601      	adds	r6, #1
 801d838:	2300      	movs	r3, #0
 801d83a:	9611      	str	r6, [sp, #68]	; 0x44
 801d83c:	9308      	str	r3, [sp, #32]
 801d83e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d840:	2b00      	cmp	r3, #0
 801d842:	f040 8555 	bne.w	801e2f0 <_strtod_l+0xb28>
 801d846:	9b08      	ldr	r3, [sp, #32]
 801d848:	ec49 8b10 	vmov	d0, r8, r9
 801d84c:	b1cb      	cbz	r3, 801d882 <_strtod_l+0xba>
 801d84e:	eeb1 0b40 	vneg.f64	d0, d0
 801d852:	b017      	add	sp, #92	; 0x5c
 801d854:	ecbd 8b0e 	vpop	{d8-d14}
 801d858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d85c:	2920      	cmp	r1, #32
 801d85e:	d1cd      	bne.n	801d7fc <_strtod_l+0x34>
 801d860:	3201      	adds	r2, #1
 801d862:	e7c0      	b.n	801d7e6 <_strtod_l+0x1e>
 801d864:	292d      	cmp	r1, #45	; 0x2d
 801d866:	d1c9      	bne.n	801d7fc <_strtod_l+0x34>
 801d868:	2101      	movs	r1, #1
 801d86a:	9108      	str	r1, [sp, #32]
 801d86c:	1c51      	adds	r1, r2, #1
 801d86e:	9111      	str	r1, [sp, #68]	; 0x44
 801d870:	7852      	ldrb	r2, [r2, #1]
 801d872:	2a00      	cmp	r2, #0
 801d874:	d1c4      	bne.n	801d800 <_strtod_l+0x38>
 801d876:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d878:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801d87c:	2b00      	cmp	r3, #0
 801d87e:	f040 8535 	bne.w	801e2ec <_strtod_l+0xb24>
 801d882:	ec49 8b10 	vmov	d0, r8, r9
 801d886:	e7e4      	b.n	801d852 <_strtod_l+0x8a>
 801d888:	2100      	movs	r1, #0
 801d88a:	e7ee      	b.n	801d86a <_strtod_l+0xa2>
 801d88c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d88e:	b13a      	cbz	r2, 801d8a0 <_strtod_l+0xd8>
 801d890:	2135      	movs	r1, #53	; 0x35
 801d892:	a814      	add	r0, sp, #80	; 0x50
 801d894:	f7ff ff3a 	bl	801d70c <__copybits>
 801d898:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d89a:	4620      	mov	r0, r4
 801d89c:	f7ff fb10 	bl	801cec0 <_Bfree>
 801d8a0:	1e7b      	subs	r3, r7, #1
 801d8a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d8a4:	2b04      	cmp	r3, #4
 801d8a6:	d806      	bhi.n	801d8b6 <_strtod_l+0xee>
 801d8a8:	e8df f003 	tbb	[pc, r3]
 801d8ac:	201d0314 	.word	0x201d0314
 801d8b0:	14          	.byte	0x14
 801d8b1:	00          	.byte	0x00
 801d8b2:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 801d8b6:	05eb      	lsls	r3, r5, #23
 801d8b8:	bf48      	it	mi
 801d8ba:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801d8be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801d8c2:	0d1b      	lsrs	r3, r3, #20
 801d8c4:	051b      	lsls	r3, r3, #20
 801d8c6:	2b00      	cmp	r3, #0
 801d8c8:	d1b9      	bne.n	801d83e <_strtod_l+0x76>
 801d8ca:	f7fe fb79 	bl	801bfc0 <__errno>
 801d8ce:	2322      	movs	r3, #34	; 0x22
 801d8d0:	6003      	str	r3, [r0, #0]
 801d8d2:	e7b4      	b.n	801d83e <_strtod_l+0x76>
 801d8d4:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 801d8d8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801d8dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801d8e0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801d8e4:	e7e7      	b.n	801d8b6 <_strtod_l+0xee>
 801d8e6:	f8df 9184 	ldr.w	r9, [pc, #388]	; 801da6c <_strtod_l+0x2a4>
 801d8ea:	e7e4      	b.n	801d8b6 <_strtod_l+0xee>
 801d8ec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801d8f0:	f04f 38ff 	mov.w	r8, #4294967295
 801d8f4:	e7df      	b.n	801d8b6 <_strtod_l+0xee>
 801d8f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d8f8:	1c5a      	adds	r2, r3, #1
 801d8fa:	9211      	str	r2, [sp, #68]	; 0x44
 801d8fc:	785b      	ldrb	r3, [r3, #1]
 801d8fe:	2b30      	cmp	r3, #48	; 0x30
 801d900:	d0f9      	beq.n	801d8f6 <_strtod_l+0x12e>
 801d902:	2b00      	cmp	r3, #0
 801d904:	d09b      	beq.n	801d83e <_strtod_l+0x76>
 801d906:	2301      	movs	r3, #1
 801d908:	9306      	str	r3, [sp, #24]
 801d90a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d90c:	9309      	str	r3, [sp, #36]	; 0x24
 801d90e:	2300      	movs	r3, #0
 801d910:	9305      	str	r3, [sp, #20]
 801d912:	9307      	str	r3, [sp, #28]
 801d914:	461e      	mov	r6, r3
 801d916:	220a      	movs	r2, #10
 801d918:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d91a:	7805      	ldrb	r5, [r0, #0]
 801d91c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 801d920:	b2d9      	uxtb	r1, r3
 801d922:	2909      	cmp	r1, #9
 801d924:	d92b      	bls.n	801d97e <_strtod_l+0x1b6>
 801d926:	4950      	ldr	r1, [pc, #320]	; (801da68 <_strtod_l+0x2a0>)
 801d928:	2201      	movs	r2, #1
 801d92a:	f001 fb3c 	bl	801efa6 <strncmp>
 801d92e:	2800      	cmp	r0, #0
 801d930:	d035      	beq.n	801d99e <_strtod_l+0x1d6>
 801d932:	2000      	movs	r0, #0
 801d934:	462a      	mov	r2, r5
 801d936:	4633      	mov	r3, r6
 801d938:	4683      	mov	fp, r0
 801d93a:	4601      	mov	r1, r0
 801d93c:	2a65      	cmp	r2, #101	; 0x65
 801d93e:	d001      	beq.n	801d944 <_strtod_l+0x17c>
 801d940:	2a45      	cmp	r2, #69	; 0x45
 801d942:	d118      	bne.n	801d976 <_strtod_l+0x1ae>
 801d944:	b91b      	cbnz	r3, 801d94e <_strtod_l+0x186>
 801d946:	9b06      	ldr	r3, [sp, #24]
 801d948:	4303      	orrs	r3, r0
 801d94a:	d094      	beq.n	801d876 <_strtod_l+0xae>
 801d94c:	2300      	movs	r3, #0
 801d94e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 801d952:	f10a 0201 	add.w	r2, sl, #1
 801d956:	9211      	str	r2, [sp, #68]	; 0x44
 801d958:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801d95c:	2a2b      	cmp	r2, #43	; 0x2b
 801d95e:	d075      	beq.n	801da4c <_strtod_l+0x284>
 801d960:	2a2d      	cmp	r2, #45	; 0x2d
 801d962:	d07b      	beq.n	801da5c <_strtod_l+0x294>
 801d964:	f04f 0e00 	mov.w	lr, #0
 801d968:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801d96c:	2d09      	cmp	r5, #9
 801d96e:	f240 8083 	bls.w	801da78 <_strtod_l+0x2b0>
 801d972:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801d976:	2500      	movs	r5, #0
 801d978:	e09e      	b.n	801dab8 <_strtod_l+0x2f0>
 801d97a:	2300      	movs	r3, #0
 801d97c:	e7c4      	b.n	801d908 <_strtod_l+0x140>
 801d97e:	2e08      	cmp	r6, #8
 801d980:	bfd5      	itete	le
 801d982:	9907      	ldrle	r1, [sp, #28]
 801d984:	9905      	ldrgt	r1, [sp, #20]
 801d986:	fb02 3301 	mlale	r3, r2, r1, r3
 801d98a:	fb02 3301 	mlagt	r3, r2, r1, r3
 801d98e:	f100 0001 	add.w	r0, r0, #1
 801d992:	bfd4      	ite	le
 801d994:	9307      	strle	r3, [sp, #28]
 801d996:	9305      	strgt	r3, [sp, #20]
 801d998:	3601      	adds	r6, #1
 801d99a:	9011      	str	r0, [sp, #68]	; 0x44
 801d99c:	e7bc      	b.n	801d918 <_strtod_l+0x150>
 801d99e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d9a0:	1c5a      	adds	r2, r3, #1
 801d9a2:	9211      	str	r2, [sp, #68]	; 0x44
 801d9a4:	785a      	ldrb	r2, [r3, #1]
 801d9a6:	b3ae      	cbz	r6, 801da14 <_strtod_l+0x24c>
 801d9a8:	4683      	mov	fp, r0
 801d9aa:	4633      	mov	r3, r6
 801d9ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801d9b0:	2909      	cmp	r1, #9
 801d9b2:	d912      	bls.n	801d9da <_strtod_l+0x212>
 801d9b4:	2101      	movs	r1, #1
 801d9b6:	e7c1      	b.n	801d93c <_strtod_l+0x174>
 801d9b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d9ba:	1c5a      	adds	r2, r3, #1
 801d9bc:	9211      	str	r2, [sp, #68]	; 0x44
 801d9be:	785a      	ldrb	r2, [r3, #1]
 801d9c0:	3001      	adds	r0, #1
 801d9c2:	2a30      	cmp	r2, #48	; 0x30
 801d9c4:	d0f8      	beq.n	801d9b8 <_strtod_l+0x1f0>
 801d9c6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801d9ca:	2b08      	cmp	r3, #8
 801d9cc:	f200 8495 	bhi.w	801e2fa <_strtod_l+0xb32>
 801d9d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d9d2:	9309      	str	r3, [sp, #36]	; 0x24
 801d9d4:	4683      	mov	fp, r0
 801d9d6:	2000      	movs	r0, #0
 801d9d8:	4603      	mov	r3, r0
 801d9da:	3a30      	subs	r2, #48	; 0x30
 801d9dc:	f100 0101 	add.w	r1, r0, #1
 801d9e0:	d012      	beq.n	801da08 <_strtod_l+0x240>
 801d9e2:	448b      	add	fp, r1
 801d9e4:	eb00 0c03 	add.w	ip, r0, r3
 801d9e8:	4619      	mov	r1, r3
 801d9ea:	250a      	movs	r5, #10
 801d9ec:	4561      	cmp	r1, ip
 801d9ee:	d113      	bne.n	801da18 <_strtod_l+0x250>
 801d9f0:	1819      	adds	r1, r3, r0
 801d9f2:	2908      	cmp	r1, #8
 801d9f4:	f103 0301 	add.w	r3, r3, #1
 801d9f8:	4403      	add	r3, r0
 801d9fa:	dc1b      	bgt.n	801da34 <_strtod_l+0x26c>
 801d9fc:	9807      	ldr	r0, [sp, #28]
 801d9fe:	210a      	movs	r1, #10
 801da00:	fb01 2200 	mla	r2, r1, r0, r2
 801da04:	9207      	str	r2, [sp, #28]
 801da06:	2100      	movs	r1, #0
 801da08:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801da0a:	1c50      	adds	r0, r2, #1
 801da0c:	9011      	str	r0, [sp, #68]	; 0x44
 801da0e:	7852      	ldrb	r2, [r2, #1]
 801da10:	4608      	mov	r0, r1
 801da12:	e7cb      	b.n	801d9ac <_strtod_l+0x1e4>
 801da14:	4630      	mov	r0, r6
 801da16:	e7d4      	b.n	801d9c2 <_strtod_l+0x1fa>
 801da18:	2908      	cmp	r1, #8
 801da1a:	f101 0101 	add.w	r1, r1, #1
 801da1e:	dc03      	bgt.n	801da28 <_strtod_l+0x260>
 801da20:	9f07      	ldr	r7, [sp, #28]
 801da22:	436f      	muls	r7, r5
 801da24:	9707      	str	r7, [sp, #28]
 801da26:	e7e1      	b.n	801d9ec <_strtod_l+0x224>
 801da28:	2910      	cmp	r1, #16
 801da2a:	bfde      	ittt	le
 801da2c:	9f05      	ldrle	r7, [sp, #20]
 801da2e:	436f      	mulle	r7, r5
 801da30:	9705      	strle	r7, [sp, #20]
 801da32:	e7db      	b.n	801d9ec <_strtod_l+0x224>
 801da34:	2b10      	cmp	r3, #16
 801da36:	bfdf      	itttt	le
 801da38:	9805      	ldrle	r0, [sp, #20]
 801da3a:	210a      	movle	r1, #10
 801da3c:	fb01 2200 	mlale	r2, r1, r0, r2
 801da40:	9205      	strle	r2, [sp, #20]
 801da42:	e7e0      	b.n	801da06 <_strtod_l+0x23e>
 801da44:	f04f 0b00 	mov.w	fp, #0
 801da48:	2101      	movs	r1, #1
 801da4a:	e77c      	b.n	801d946 <_strtod_l+0x17e>
 801da4c:	f04f 0e00 	mov.w	lr, #0
 801da50:	f10a 0202 	add.w	r2, sl, #2
 801da54:	9211      	str	r2, [sp, #68]	; 0x44
 801da56:	f89a 2002 	ldrb.w	r2, [sl, #2]
 801da5a:	e785      	b.n	801d968 <_strtod_l+0x1a0>
 801da5c:	f04f 0e01 	mov.w	lr, #1
 801da60:	e7f6      	b.n	801da50 <_strtod_l+0x288>
 801da62:	bf00      	nop
 801da64:	080207f8 	.word	0x080207f8
 801da68:	080207f4 	.word	0x080207f4
 801da6c:	7ff00000 	.word	0x7ff00000
 801da70:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801da72:	1c55      	adds	r5, r2, #1
 801da74:	9511      	str	r5, [sp, #68]	; 0x44
 801da76:	7852      	ldrb	r2, [r2, #1]
 801da78:	2a30      	cmp	r2, #48	; 0x30
 801da7a:	d0f9      	beq.n	801da70 <_strtod_l+0x2a8>
 801da7c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 801da80:	2d08      	cmp	r5, #8
 801da82:	f63f af78 	bhi.w	801d976 <_strtod_l+0x1ae>
 801da86:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801da8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801da8c:	920a      	str	r2, [sp, #40]	; 0x28
 801da8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801da90:	1c55      	adds	r5, r2, #1
 801da92:	9511      	str	r5, [sp, #68]	; 0x44
 801da94:	7852      	ldrb	r2, [r2, #1]
 801da96:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801da9a:	2f09      	cmp	r7, #9
 801da9c:	d937      	bls.n	801db0e <_strtod_l+0x346>
 801da9e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801daa0:	1bed      	subs	r5, r5, r7
 801daa2:	2d08      	cmp	r5, #8
 801daa4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801daa8:	dc02      	bgt.n	801dab0 <_strtod_l+0x2e8>
 801daaa:	4565      	cmp	r5, ip
 801daac:	bfa8      	it	ge
 801daae:	4665      	movge	r5, ip
 801dab0:	f1be 0f00 	cmp.w	lr, #0
 801dab4:	d000      	beq.n	801dab8 <_strtod_l+0x2f0>
 801dab6:	426d      	negs	r5, r5
 801dab8:	2b00      	cmp	r3, #0
 801daba:	d14d      	bne.n	801db58 <_strtod_l+0x390>
 801dabc:	9b06      	ldr	r3, [sp, #24]
 801dabe:	4303      	orrs	r3, r0
 801dac0:	f47f aebd 	bne.w	801d83e <_strtod_l+0x76>
 801dac4:	2900      	cmp	r1, #0
 801dac6:	f47f aed6 	bne.w	801d876 <_strtod_l+0xae>
 801daca:	2a69      	cmp	r2, #105	; 0x69
 801dacc:	d027      	beq.n	801db1e <_strtod_l+0x356>
 801dace:	dc24      	bgt.n	801db1a <_strtod_l+0x352>
 801dad0:	2a49      	cmp	r2, #73	; 0x49
 801dad2:	d024      	beq.n	801db1e <_strtod_l+0x356>
 801dad4:	2a4e      	cmp	r2, #78	; 0x4e
 801dad6:	f47f aece 	bne.w	801d876 <_strtod_l+0xae>
 801dada:	4995      	ldr	r1, [pc, #596]	; (801dd30 <_strtod_l+0x568>)
 801dadc:	a811      	add	r0, sp, #68	; 0x44
 801dade:	f001 fd6b 	bl	801f5b8 <__match>
 801dae2:	2800      	cmp	r0, #0
 801dae4:	f43f aec7 	beq.w	801d876 <_strtod_l+0xae>
 801dae8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801daea:	781b      	ldrb	r3, [r3, #0]
 801daec:	2b28      	cmp	r3, #40	; 0x28
 801daee:	d12d      	bne.n	801db4c <_strtod_l+0x384>
 801daf0:	4990      	ldr	r1, [pc, #576]	; (801dd34 <_strtod_l+0x56c>)
 801daf2:	aa14      	add	r2, sp, #80	; 0x50
 801daf4:	a811      	add	r0, sp, #68	; 0x44
 801daf6:	f001 fd73 	bl	801f5e0 <__hexnan>
 801dafa:	2805      	cmp	r0, #5
 801dafc:	d126      	bne.n	801db4c <_strtod_l+0x384>
 801dafe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801db00:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801db04:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801db08:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801db0c:	e697      	b.n	801d83e <_strtod_l+0x76>
 801db0e:	250a      	movs	r5, #10
 801db10:	fb05 2c0c 	mla	ip, r5, ip, r2
 801db14:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 801db18:	e7b9      	b.n	801da8e <_strtod_l+0x2c6>
 801db1a:	2a6e      	cmp	r2, #110	; 0x6e
 801db1c:	e7db      	b.n	801dad6 <_strtod_l+0x30e>
 801db1e:	4986      	ldr	r1, [pc, #536]	; (801dd38 <_strtod_l+0x570>)
 801db20:	a811      	add	r0, sp, #68	; 0x44
 801db22:	f001 fd49 	bl	801f5b8 <__match>
 801db26:	2800      	cmp	r0, #0
 801db28:	f43f aea5 	beq.w	801d876 <_strtod_l+0xae>
 801db2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801db2e:	4983      	ldr	r1, [pc, #524]	; (801dd3c <_strtod_l+0x574>)
 801db30:	3b01      	subs	r3, #1
 801db32:	a811      	add	r0, sp, #68	; 0x44
 801db34:	9311      	str	r3, [sp, #68]	; 0x44
 801db36:	f001 fd3f 	bl	801f5b8 <__match>
 801db3a:	b910      	cbnz	r0, 801db42 <_strtod_l+0x37a>
 801db3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801db3e:	3301      	adds	r3, #1
 801db40:	9311      	str	r3, [sp, #68]	; 0x44
 801db42:	f8df 920c 	ldr.w	r9, [pc, #524]	; 801dd50 <_strtod_l+0x588>
 801db46:	f04f 0800 	mov.w	r8, #0
 801db4a:	e678      	b.n	801d83e <_strtod_l+0x76>
 801db4c:	487c      	ldr	r0, [pc, #496]	; (801dd40 <_strtod_l+0x578>)
 801db4e:	f001 fa4f 	bl	801eff0 <nan>
 801db52:	ec59 8b10 	vmov	r8, r9, d0
 801db56:	e672      	b.n	801d83e <_strtod_l+0x76>
 801db58:	eddd 7a07 	vldr	s15, [sp, #28]
 801db5c:	eba5 020b 	sub.w	r2, r5, fp
 801db60:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801db64:	2e00      	cmp	r6, #0
 801db66:	bf08      	it	eq
 801db68:	461e      	moveq	r6, r3
 801db6a:	2b10      	cmp	r3, #16
 801db6c:	9206      	str	r2, [sp, #24]
 801db6e:	461a      	mov	r2, r3
 801db70:	bfa8      	it	ge
 801db72:	2210      	movge	r2, #16
 801db74:	2b09      	cmp	r3, #9
 801db76:	ec59 8b17 	vmov	r8, r9, d7
 801db7a:	dd0c      	ble.n	801db96 <_strtod_l+0x3ce>
 801db7c:	4971      	ldr	r1, [pc, #452]	; (801dd44 <_strtod_l+0x57c>)
 801db7e:	eddd 6a05 	vldr	s13, [sp, #20]
 801db82:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801db86:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 801db8a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801db8e:	eea7 6b05 	vfma.f64	d6, d7, d5
 801db92:	ec59 8b16 	vmov	r8, r9, d6
 801db96:	2b0f      	cmp	r3, #15
 801db98:	dc37      	bgt.n	801dc0a <_strtod_l+0x442>
 801db9a:	9906      	ldr	r1, [sp, #24]
 801db9c:	2900      	cmp	r1, #0
 801db9e:	f43f ae4e 	beq.w	801d83e <_strtod_l+0x76>
 801dba2:	dd23      	ble.n	801dbec <_strtod_l+0x424>
 801dba4:	2916      	cmp	r1, #22
 801dba6:	dc0b      	bgt.n	801dbc0 <_strtod_l+0x3f8>
 801dba8:	4b66      	ldr	r3, [pc, #408]	; (801dd44 <_strtod_l+0x57c>)
 801dbaa:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801dbae:	ed93 7b00 	vldr	d7, [r3]
 801dbb2:	ec49 8b16 	vmov	d6, r8, r9
 801dbb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801dbba:	ec59 8b17 	vmov	r8, r9, d7
 801dbbe:	e63e      	b.n	801d83e <_strtod_l+0x76>
 801dbc0:	9806      	ldr	r0, [sp, #24]
 801dbc2:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801dbc6:	4281      	cmp	r1, r0
 801dbc8:	db1f      	blt.n	801dc0a <_strtod_l+0x442>
 801dbca:	4a5e      	ldr	r2, [pc, #376]	; (801dd44 <_strtod_l+0x57c>)
 801dbcc:	f1c3 030f 	rsb	r3, r3, #15
 801dbd0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801dbd4:	ed91 7b00 	vldr	d7, [r1]
 801dbd8:	ec49 8b16 	vmov	d6, r8, r9
 801dbdc:	1ac3      	subs	r3, r0, r3
 801dbde:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801dbe2:	ee27 7b06 	vmul.f64	d7, d7, d6
 801dbe6:	ed92 6b00 	vldr	d6, [r2]
 801dbea:	e7e4      	b.n	801dbb6 <_strtod_l+0x3ee>
 801dbec:	9906      	ldr	r1, [sp, #24]
 801dbee:	3116      	adds	r1, #22
 801dbf0:	db0b      	blt.n	801dc0a <_strtod_l+0x442>
 801dbf2:	4b54      	ldr	r3, [pc, #336]	; (801dd44 <_strtod_l+0x57c>)
 801dbf4:	ebab 0505 	sub.w	r5, fp, r5
 801dbf8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801dbfc:	ed95 7b00 	vldr	d7, [r5]
 801dc00:	ec49 8b16 	vmov	d6, r8, r9
 801dc04:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801dc08:	e7d7      	b.n	801dbba <_strtod_l+0x3f2>
 801dc0a:	9906      	ldr	r1, [sp, #24]
 801dc0c:	1a9a      	subs	r2, r3, r2
 801dc0e:	440a      	add	r2, r1
 801dc10:	2a00      	cmp	r2, #0
 801dc12:	dd6e      	ble.n	801dcf2 <_strtod_l+0x52a>
 801dc14:	f012 000f 	ands.w	r0, r2, #15
 801dc18:	d00a      	beq.n	801dc30 <_strtod_l+0x468>
 801dc1a:	494a      	ldr	r1, [pc, #296]	; (801dd44 <_strtod_l+0x57c>)
 801dc1c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801dc20:	ed91 7b00 	vldr	d7, [r1]
 801dc24:	ec49 8b16 	vmov	d6, r8, r9
 801dc28:	ee27 7b06 	vmul.f64	d7, d7, d6
 801dc2c:	ec59 8b17 	vmov	r8, r9, d7
 801dc30:	f032 020f 	bics.w	r2, r2, #15
 801dc34:	d04e      	beq.n	801dcd4 <_strtod_l+0x50c>
 801dc36:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801dc3a:	dd22      	ble.n	801dc82 <_strtod_l+0x4ba>
 801dc3c:	2500      	movs	r5, #0
 801dc3e:	462e      	mov	r6, r5
 801dc40:	9507      	str	r5, [sp, #28]
 801dc42:	462f      	mov	r7, r5
 801dc44:	2322      	movs	r3, #34	; 0x22
 801dc46:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801dd50 <_strtod_l+0x588>
 801dc4a:	6023      	str	r3, [r4, #0]
 801dc4c:	f04f 0800 	mov.w	r8, #0
 801dc50:	9b07      	ldr	r3, [sp, #28]
 801dc52:	2b00      	cmp	r3, #0
 801dc54:	f43f adf3 	beq.w	801d83e <_strtod_l+0x76>
 801dc58:	9912      	ldr	r1, [sp, #72]	; 0x48
 801dc5a:	4620      	mov	r0, r4
 801dc5c:	f7ff f930 	bl	801cec0 <_Bfree>
 801dc60:	4639      	mov	r1, r7
 801dc62:	4620      	mov	r0, r4
 801dc64:	f7ff f92c 	bl	801cec0 <_Bfree>
 801dc68:	4631      	mov	r1, r6
 801dc6a:	4620      	mov	r0, r4
 801dc6c:	f7ff f928 	bl	801cec0 <_Bfree>
 801dc70:	9907      	ldr	r1, [sp, #28]
 801dc72:	4620      	mov	r0, r4
 801dc74:	f7ff f924 	bl	801cec0 <_Bfree>
 801dc78:	4629      	mov	r1, r5
 801dc7a:	4620      	mov	r0, r4
 801dc7c:	f7ff f920 	bl	801cec0 <_Bfree>
 801dc80:	e5dd      	b.n	801d83e <_strtod_l+0x76>
 801dc82:	2000      	movs	r0, #0
 801dc84:	ec49 8b17 	vmov	d7, r8, r9
 801dc88:	4f2f      	ldr	r7, [pc, #188]	; (801dd48 <_strtod_l+0x580>)
 801dc8a:	1112      	asrs	r2, r2, #4
 801dc8c:	4601      	mov	r1, r0
 801dc8e:	2a01      	cmp	r2, #1
 801dc90:	dc23      	bgt.n	801dcda <_strtod_l+0x512>
 801dc92:	b108      	cbz	r0, 801dc98 <_strtod_l+0x4d0>
 801dc94:	ec59 8b17 	vmov	r8, r9, d7
 801dc98:	4a2b      	ldr	r2, [pc, #172]	; (801dd48 <_strtod_l+0x580>)
 801dc9a:	482c      	ldr	r0, [pc, #176]	; (801dd4c <_strtod_l+0x584>)
 801dc9c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801dca0:	ed92 7b00 	vldr	d7, [r2]
 801dca4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801dca8:	ec49 8b16 	vmov	d6, r8, r9
 801dcac:	4a28      	ldr	r2, [pc, #160]	; (801dd50 <_strtod_l+0x588>)
 801dcae:	ee27 7b06 	vmul.f64	d7, d7, d6
 801dcb2:	ee17 1a90 	vmov	r1, s15
 801dcb6:	400a      	ands	r2, r1
 801dcb8:	4282      	cmp	r2, r0
 801dcba:	ec59 8b17 	vmov	r8, r9, d7
 801dcbe:	d8bd      	bhi.n	801dc3c <_strtod_l+0x474>
 801dcc0:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801dcc4:	4282      	cmp	r2, r0
 801dcc6:	bf86      	itte	hi
 801dcc8:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 801dd54 <_strtod_l+0x58c>
 801dccc:	f04f 38ff 	movhi.w	r8, #4294967295
 801dcd0:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801dcd4:	2200      	movs	r2, #0
 801dcd6:	9205      	str	r2, [sp, #20]
 801dcd8:	e076      	b.n	801ddc8 <_strtod_l+0x600>
 801dcda:	f012 0f01 	tst.w	r2, #1
 801dcde:	d004      	beq.n	801dcea <_strtod_l+0x522>
 801dce0:	ed97 6b00 	vldr	d6, [r7]
 801dce4:	2001      	movs	r0, #1
 801dce6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801dcea:	3101      	adds	r1, #1
 801dcec:	1052      	asrs	r2, r2, #1
 801dcee:	3708      	adds	r7, #8
 801dcf0:	e7cd      	b.n	801dc8e <_strtod_l+0x4c6>
 801dcf2:	d0ef      	beq.n	801dcd4 <_strtod_l+0x50c>
 801dcf4:	4252      	negs	r2, r2
 801dcf6:	f012 000f 	ands.w	r0, r2, #15
 801dcfa:	d00a      	beq.n	801dd12 <_strtod_l+0x54a>
 801dcfc:	4911      	ldr	r1, [pc, #68]	; (801dd44 <_strtod_l+0x57c>)
 801dcfe:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801dd02:	ed91 7b00 	vldr	d7, [r1]
 801dd06:	ec49 8b16 	vmov	d6, r8, r9
 801dd0a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801dd0e:	ec59 8b17 	vmov	r8, r9, d7
 801dd12:	1112      	asrs	r2, r2, #4
 801dd14:	d0de      	beq.n	801dcd4 <_strtod_l+0x50c>
 801dd16:	2a1f      	cmp	r2, #31
 801dd18:	dd1e      	ble.n	801dd58 <_strtod_l+0x590>
 801dd1a:	2500      	movs	r5, #0
 801dd1c:	462e      	mov	r6, r5
 801dd1e:	9507      	str	r5, [sp, #28]
 801dd20:	462f      	mov	r7, r5
 801dd22:	2322      	movs	r3, #34	; 0x22
 801dd24:	f04f 0800 	mov.w	r8, #0
 801dd28:	f04f 0900 	mov.w	r9, #0
 801dd2c:	6023      	str	r3, [r4, #0]
 801dd2e:	e78f      	b.n	801dc50 <_strtod_l+0x488>
 801dd30:	080205e1 	.word	0x080205e1
 801dd34:	0802080c 	.word	0x0802080c
 801dd38:	080205d9 	.word	0x080205d9
 801dd3c:	0802060e 	.word	0x0802060e
 801dd40:	080209b8 	.word	0x080209b8
 801dd44:	08020720 	.word	0x08020720
 801dd48:	080206f8 	.word	0x080206f8
 801dd4c:	7ca00000 	.word	0x7ca00000
 801dd50:	7ff00000 	.word	0x7ff00000
 801dd54:	7fefffff 	.word	0x7fefffff
 801dd58:	f012 0110 	ands.w	r1, r2, #16
 801dd5c:	bf18      	it	ne
 801dd5e:	216a      	movne	r1, #106	; 0x6a
 801dd60:	9105      	str	r1, [sp, #20]
 801dd62:	ec49 8b17 	vmov	d7, r8, r9
 801dd66:	49be      	ldr	r1, [pc, #760]	; (801e060 <_strtod_l+0x898>)
 801dd68:	2000      	movs	r0, #0
 801dd6a:	07d7      	lsls	r7, r2, #31
 801dd6c:	d504      	bpl.n	801dd78 <_strtod_l+0x5b0>
 801dd6e:	ed91 6b00 	vldr	d6, [r1]
 801dd72:	2001      	movs	r0, #1
 801dd74:	ee27 7b06 	vmul.f64	d7, d7, d6
 801dd78:	1052      	asrs	r2, r2, #1
 801dd7a:	f101 0108 	add.w	r1, r1, #8
 801dd7e:	d1f4      	bne.n	801dd6a <_strtod_l+0x5a2>
 801dd80:	b108      	cbz	r0, 801dd86 <_strtod_l+0x5be>
 801dd82:	ec59 8b17 	vmov	r8, r9, d7
 801dd86:	9a05      	ldr	r2, [sp, #20]
 801dd88:	b1ba      	cbz	r2, 801ddba <_strtod_l+0x5f2>
 801dd8a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 801dd8e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 801dd92:	2a00      	cmp	r2, #0
 801dd94:	4648      	mov	r0, r9
 801dd96:	dd10      	ble.n	801ddba <_strtod_l+0x5f2>
 801dd98:	2a1f      	cmp	r2, #31
 801dd9a:	f340 812c 	ble.w	801dff6 <_strtod_l+0x82e>
 801dd9e:	2a34      	cmp	r2, #52	; 0x34
 801dda0:	bfde      	ittt	le
 801dda2:	f04f 32ff 	movle.w	r2, #4294967295
 801dda6:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801ddaa:	408a      	lslle	r2, r1
 801ddac:	f04f 0800 	mov.w	r8, #0
 801ddb0:	bfcc      	ite	gt
 801ddb2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801ddb6:	ea02 0900 	andle.w	r9, r2, r0
 801ddba:	ec49 8b17 	vmov	d7, r8, r9
 801ddbe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ddc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddc6:	d0a8      	beq.n	801dd1a <_strtod_l+0x552>
 801ddc8:	9a07      	ldr	r2, [sp, #28]
 801ddca:	9200      	str	r2, [sp, #0]
 801ddcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ddce:	4632      	mov	r2, r6
 801ddd0:	4620      	mov	r0, r4
 801ddd2:	f7ff f8dd 	bl	801cf90 <__s2b>
 801ddd6:	9007      	str	r0, [sp, #28]
 801ddd8:	2800      	cmp	r0, #0
 801ddda:	f43f af2f 	beq.w	801dc3c <_strtod_l+0x474>
 801ddde:	9a06      	ldr	r2, [sp, #24]
 801dde0:	2a00      	cmp	r2, #0
 801dde2:	ebab 0305 	sub.w	r3, fp, r5
 801dde6:	ed9f 9b96 	vldr	d9, [pc, #600]	; 801e040 <_strtod_l+0x878>
 801ddea:	bfa8      	it	ge
 801ddec:	2300      	movge	r3, #0
 801ddee:	ed9f ab96 	vldr	d10, [pc, #600]	; 801e048 <_strtod_l+0x880>
 801ddf2:	ed9f bb97 	vldr	d11, [pc, #604]	; 801e050 <_strtod_l+0x888>
 801ddf6:	9309      	str	r3, [sp, #36]	; 0x24
 801ddf8:	2500      	movs	r5, #0
 801ddfa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801ddfe:	930c      	str	r3, [sp, #48]	; 0x30
 801de00:	462e      	mov	r6, r5
 801de02:	9b07      	ldr	r3, [sp, #28]
 801de04:	4620      	mov	r0, r4
 801de06:	6859      	ldr	r1, [r3, #4]
 801de08:	f7ff f81a 	bl	801ce40 <_Balloc>
 801de0c:	4607      	mov	r7, r0
 801de0e:	2800      	cmp	r0, #0
 801de10:	f43f af18 	beq.w	801dc44 <_strtod_l+0x47c>
 801de14:	9b07      	ldr	r3, [sp, #28]
 801de16:	691a      	ldr	r2, [r3, #16]
 801de18:	3202      	adds	r2, #2
 801de1a:	f103 010c 	add.w	r1, r3, #12
 801de1e:	0092      	lsls	r2, r2, #2
 801de20:	300c      	adds	r0, #12
 801de22:	f7fe f902 	bl	801c02a <memcpy>
 801de26:	ec49 8b10 	vmov	d0, r8, r9
 801de2a:	aa14      	add	r2, sp, #80	; 0x50
 801de2c:	a913      	add	r1, sp, #76	; 0x4c
 801de2e:	4620      	mov	r0, r4
 801de30:	f7ff fbe2 	bl	801d5f8 <__d2b>
 801de34:	ec49 8b18 	vmov	d8, r8, r9
 801de38:	9012      	str	r0, [sp, #72]	; 0x48
 801de3a:	2800      	cmp	r0, #0
 801de3c:	f43f af02 	beq.w	801dc44 <_strtod_l+0x47c>
 801de40:	2101      	movs	r1, #1
 801de42:	4620      	mov	r0, r4
 801de44:	f7ff f93c 	bl	801d0c0 <__i2b>
 801de48:	4606      	mov	r6, r0
 801de4a:	2800      	cmp	r0, #0
 801de4c:	f43f aefa 	beq.w	801dc44 <_strtod_l+0x47c>
 801de50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801de52:	9914      	ldr	r1, [sp, #80]	; 0x50
 801de54:	2b00      	cmp	r3, #0
 801de56:	bfab      	itete	ge
 801de58:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 801de5a:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 801de5c:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 801de60:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 801de64:	bfac      	ite	ge
 801de66:	eb03 0b02 	addge.w	fp, r3, r2
 801de6a:	eba2 0a03 	sublt.w	sl, r2, r3
 801de6e:	9a05      	ldr	r2, [sp, #20]
 801de70:	1a9b      	subs	r3, r3, r2
 801de72:	440b      	add	r3, r1
 801de74:	4a7b      	ldr	r2, [pc, #492]	; (801e064 <_strtod_l+0x89c>)
 801de76:	3b01      	subs	r3, #1
 801de78:	4293      	cmp	r3, r2
 801de7a:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801de7e:	f280 80cd 	bge.w	801e01c <_strtod_l+0x854>
 801de82:	1ad2      	subs	r2, r2, r3
 801de84:	2a1f      	cmp	r2, #31
 801de86:	eba1 0102 	sub.w	r1, r1, r2
 801de8a:	f04f 0001 	mov.w	r0, #1
 801de8e:	f300 80b9 	bgt.w	801e004 <_strtod_l+0x83c>
 801de92:	fa00 f302 	lsl.w	r3, r0, r2
 801de96:	930b      	str	r3, [sp, #44]	; 0x2c
 801de98:	2300      	movs	r3, #0
 801de9a:	930a      	str	r3, [sp, #40]	; 0x28
 801de9c:	eb0b 0301 	add.w	r3, fp, r1
 801dea0:	9a05      	ldr	r2, [sp, #20]
 801dea2:	459b      	cmp	fp, r3
 801dea4:	448a      	add	sl, r1
 801dea6:	4492      	add	sl, r2
 801dea8:	465a      	mov	r2, fp
 801deaa:	bfa8      	it	ge
 801deac:	461a      	movge	r2, r3
 801deae:	4552      	cmp	r2, sl
 801deb0:	bfa8      	it	ge
 801deb2:	4652      	movge	r2, sl
 801deb4:	2a00      	cmp	r2, #0
 801deb6:	bfc2      	ittt	gt
 801deb8:	1a9b      	subgt	r3, r3, r2
 801deba:	ebaa 0a02 	subgt.w	sl, sl, r2
 801debe:	ebab 0b02 	subgt.w	fp, fp, r2
 801dec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dec4:	2a00      	cmp	r2, #0
 801dec6:	dd18      	ble.n	801defa <_strtod_l+0x732>
 801dec8:	4631      	mov	r1, r6
 801deca:	4620      	mov	r0, r4
 801decc:	930f      	str	r3, [sp, #60]	; 0x3c
 801dece:	f7ff f9b7 	bl	801d240 <__pow5mult>
 801ded2:	4606      	mov	r6, r0
 801ded4:	2800      	cmp	r0, #0
 801ded6:	f43f aeb5 	beq.w	801dc44 <_strtod_l+0x47c>
 801deda:	4601      	mov	r1, r0
 801dedc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dede:	4620      	mov	r0, r4
 801dee0:	f7ff f904 	bl	801d0ec <__multiply>
 801dee4:	900e      	str	r0, [sp, #56]	; 0x38
 801dee6:	2800      	cmp	r0, #0
 801dee8:	f43f aeac 	beq.w	801dc44 <_strtod_l+0x47c>
 801deec:	9912      	ldr	r1, [sp, #72]	; 0x48
 801deee:	4620      	mov	r0, r4
 801def0:	f7fe ffe6 	bl	801cec0 <_Bfree>
 801def4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801def6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801def8:	9212      	str	r2, [sp, #72]	; 0x48
 801defa:	2b00      	cmp	r3, #0
 801defc:	f300 8093 	bgt.w	801e026 <_strtod_l+0x85e>
 801df00:	9b06      	ldr	r3, [sp, #24]
 801df02:	2b00      	cmp	r3, #0
 801df04:	dd08      	ble.n	801df18 <_strtod_l+0x750>
 801df06:	4639      	mov	r1, r7
 801df08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801df0a:	4620      	mov	r0, r4
 801df0c:	f7ff f998 	bl	801d240 <__pow5mult>
 801df10:	4607      	mov	r7, r0
 801df12:	2800      	cmp	r0, #0
 801df14:	f43f ae96 	beq.w	801dc44 <_strtod_l+0x47c>
 801df18:	f1ba 0f00 	cmp.w	sl, #0
 801df1c:	dd08      	ble.n	801df30 <_strtod_l+0x768>
 801df1e:	4639      	mov	r1, r7
 801df20:	4652      	mov	r2, sl
 801df22:	4620      	mov	r0, r4
 801df24:	f7ff f9e6 	bl	801d2f4 <__lshift>
 801df28:	4607      	mov	r7, r0
 801df2a:	2800      	cmp	r0, #0
 801df2c:	f43f ae8a 	beq.w	801dc44 <_strtod_l+0x47c>
 801df30:	f1bb 0f00 	cmp.w	fp, #0
 801df34:	dd08      	ble.n	801df48 <_strtod_l+0x780>
 801df36:	4631      	mov	r1, r6
 801df38:	465a      	mov	r2, fp
 801df3a:	4620      	mov	r0, r4
 801df3c:	f7ff f9da 	bl	801d2f4 <__lshift>
 801df40:	4606      	mov	r6, r0
 801df42:	2800      	cmp	r0, #0
 801df44:	f43f ae7e 	beq.w	801dc44 <_strtod_l+0x47c>
 801df48:	9912      	ldr	r1, [sp, #72]	; 0x48
 801df4a:	463a      	mov	r2, r7
 801df4c:	4620      	mov	r0, r4
 801df4e:	f7ff fa59 	bl	801d404 <__mdiff>
 801df52:	4605      	mov	r5, r0
 801df54:	2800      	cmp	r0, #0
 801df56:	f43f ae75 	beq.w	801dc44 <_strtod_l+0x47c>
 801df5a:	2300      	movs	r3, #0
 801df5c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801df60:	60c3      	str	r3, [r0, #12]
 801df62:	4631      	mov	r1, r6
 801df64:	f7ff fa32 	bl	801d3cc <__mcmp>
 801df68:	2800      	cmp	r0, #0
 801df6a:	da7f      	bge.n	801e06c <_strtod_l+0x8a4>
 801df6c:	ea5a 0a08 	orrs.w	sl, sl, r8
 801df70:	f040 80a5 	bne.w	801e0be <_strtod_l+0x8f6>
 801df74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801df78:	2b00      	cmp	r3, #0
 801df7a:	f040 80a0 	bne.w	801e0be <_strtod_l+0x8f6>
 801df7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801df82:	0d1b      	lsrs	r3, r3, #20
 801df84:	051b      	lsls	r3, r3, #20
 801df86:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801df8a:	f240 8098 	bls.w	801e0be <_strtod_l+0x8f6>
 801df8e:	696b      	ldr	r3, [r5, #20]
 801df90:	b91b      	cbnz	r3, 801df9a <_strtod_l+0x7d2>
 801df92:	692b      	ldr	r3, [r5, #16]
 801df94:	2b01      	cmp	r3, #1
 801df96:	f340 8092 	ble.w	801e0be <_strtod_l+0x8f6>
 801df9a:	4629      	mov	r1, r5
 801df9c:	2201      	movs	r2, #1
 801df9e:	4620      	mov	r0, r4
 801dfa0:	f7ff f9a8 	bl	801d2f4 <__lshift>
 801dfa4:	4631      	mov	r1, r6
 801dfa6:	4605      	mov	r5, r0
 801dfa8:	f7ff fa10 	bl	801d3cc <__mcmp>
 801dfac:	2800      	cmp	r0, #0
 801dfae:	f340 8086 	ble.w	801e0be <_strtod_l+0x8f6>
 801dfb2:	9905      	ldr	r1, [sp, #20]
 801dfb4:	4a2c      	ldr	r2, [pc, #176]	; (801e068 <_strtod_l+0x8a0>)
 801dfb6:	464b      	mov	r3, r9
 801dfb8:	2900      	cmp	r1, #0
 801dfba:	f000 809f 	beq.w	801e0fc <_strtod_l+0x934>
 801dfbe:	ea02 0109 	and.w	r1, r2, r9
 801dfc2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801dfc6:	f300 8099 	bgt.w	801e0fc <_strtod_l+0x934>
 801dfca:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801dfce:	f77f aea8 	ble.w	801dd22 <_strtod_l+0x55a>
 801dfd2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801e058 <_strtod_l+0x890>
 801dfd6:	ec49 8b16 	vmov	d6, r8, r9
 801dfda:	4b23      	ldr	r3, [pc, #140]	; (801e068 <_strtod_l+0x8a0>)
 801dfdc:	ee26 7b07 	vmul.f64	d7, d6, d7
 801dfe0:	ee17 2a90 	vmov	r2, s15
 801dfe4:	4013      	ands	r3, r2
 801dfe6:	ec59 8b17 	vmov	r8, r9, d7
 801dfea:	2b00      	cmp	r3, #0
 801dfec:	f47f ae34 	bne.w	801dc58 <_strtod_l+0x490>
 801dff0:	2322      	movs	r3, #34	; 0x22
 801dff2:	6023      	str	r3, [r4, #0]
 801dff4:	e630      	b.n	801dc58 <_strtod_l+0x490>
 801dff6:	f04f 31ff 	mov.w	r1, #4294967295
 801dffa:	fa01 f202 	lsl.w	r2, r1, r2
 801dffe:	ea02 0808 	and.w	r8, r2, r8
 801e002:	e6da      	b.n	801ddba <_strtod_l+0x5f2>
 801e004:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801e008:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801e00c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801e010:	33e2      	adds	r3, #226	; 0xe2
 801e012:	fa00 f303 	lsl.w	r3, r0, r3
 801e016:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 801e01a:	e73f      	b.n	801de9c <_strtod_l+0x6d4>
 801e01c:	2200      	movs	r2, #0
 801e01e:	2301      	movs	r3, #1
 801e020:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801e024:	e73a      	b.n	801de9c <_strtod_l+0x6d4>
 801e026:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e028:	461a      	mov	r2, r3
 801e02a:	4620      	mov	r0, r4
 801e02c:	f7ff f962 	bl	801d2f4 <__lshift>
 801e030:	9012      	str	r0, [sp, #72]	; 0x48
 801e032:	2800      	cmp	r0, #0
 801e034:	f47f af64 	bne.w	801df00 <_strtod_l+0x738>
 801e038:	e604      	b.n	801dc44 <_strtod_l+0x47c>
 801e03a:	bf00      	nop
 801e03c:	f3af 8000 	nop.w
 801e040:	94a03595 	.word	0x94a03595
 801e044:	3fcfffff 	.word	0x3fcfffff
 801e048:	94a03595 	.word	0x94a03595
 801e04c:	3fdfffff 	.word	0x3fdfffff
 801e050:	35afe535 	.word	0x35afe535
 801e054:	3fe00000 	.word	0x3fe00000
 801e058:	00000000 	.word	0x00000000
 801e05c:	39500000 	.word	0x39500000
 801e060:	08020820 	.word	0x08020820
 801e064:	fffffc02 	.word	0xfffffc02
 801e068:	7ff00000 	.word	0x7ff00000
 801e06c:	46cb      	mov	fp, r9
 801e06e:	d15f      	bne.n	801e130 <_strtod_l+0x968>
 801e070:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e074:	f1ba 0f00 	cmp.w	sl, #0
 801e078:	d02a      	beq.n	801e0d0 <_strtod_l+0x908>
 801e07a:	4aa7      	ldr	r2, [pc, #668]	; (801e318 <_strtod_l+0xb50>)
 801e07c:	4293      	cmp	r3, r2
 801e07e:	d12b      	bne.n	801e0d8 <_strtod_l+0x910>
 801e080:	9b05      	ldr	r3, [sp, #20]
 801e082:	4642      	mov	r2, r8
 801e084:	b1fb      	cbz	r3, 801e0c6 <_strtod_l+0x8fe>
 801e086:	4ba5      	ldr	r3, [pc, #660]	; (801e31c <_strtod_l+0xb54>)
 801e088:	ea09 0303 	and.w	r3, r9, r3
 801e08c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801e090:	f04f 31ff 	mov.w	r1, #4294967295
 801e094:	d81a      	bhi.n	801e0cc <_strtod_l+0x904>
 801e096:	0d1b      	lsrs	r3, r3, #20
 801e098:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801e09c:	fa01 f303 	lsl.w	r3, r1, r3
 801e0a0:	429a      	cmp	r2, r3
 801e0a2:	d119      	bne.n	801e0d8 <_strtod_l+0x910>
 801e0a4:	4b9e      	ldr	r3, [pc, #632]	; (801e320 <_strtod_l+0xb58>)
 801e0a6:	459b      	cmp	fp, r3
 801e0a8:	d102      	bne.n	801e0b0 <_strtod_l+0x8e8>
 801e0aa:	3201      	adds	r2, #1
 801e0ac:	f43f adca 	beq.w	801dc44 <_strtod_l+0x47c>
 801e0b0:	4b9a      	ldr	r3, [pc, #616]	; (801e31c <_strtod_l+0xb54>)
 801e0b2:	ea0b 0303 	and.w	r3, fp, r3
 801e0b6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801e0ba:	f04f 0800 	mov.w	r8, #0
 801e0be:	9b05      	ldr	r3, [sp, #20]
 801e0c0:	2b00      	cmp	r3, #0
 801e0c2:	d186      	bne.n	801dfd2 <_strtod_l+0x80a>
 801e0c4:	e5c8      	b.n	801dc58 <_strtod_l+0x490>
 801e0c6:	f04f 33ff 	mov.w	r3, #4294967295
 801e0ca:	e7e9      	b.n	801e0a0 <_strtod_l+0x8d8>
 801e0cc:	460b      	mov	r3, r1
 801e0ce:	e7e7      	b.n	801e0a0 <_strtod_l+0x8d8>
 801e0d0:	ea53 0308 	orrs.w	r3, r3, r8
 801e0d4:	f43f af6d 	beq.w	801dfb2 <_strtod_l+0x7ea>
 801e0d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e0da:	b1cb      	cbz	r3, 801e110 <_strtod_l+0x948>
 801e0dc:	ea13 0f0b 	tst.w	r3, fp
 801e0e0:	d0ed      	beq.n	801e0be <_strtod_l+0x8f6>
 801e0e2:	9a05      	ldr	r2, [sp, #20]
 801e0e4:	4640      	mov	r0, r8
 801e0e6:	4649      	mov	r1, r9
 801e0e8:	f1ba 0f00 	cmp.w	sl, #0
 801e0ec:	d014      	beq.n	801e118 <_strtod_l+0x950>
 801e0ee:	f7ff fb51 	bl	801d794 <sulp>
 801e0f2:	ee38 7b00 	vadd.f64	d7, d8, d0
 801e0f6:	ec59 8b17 	vmov	r8, r9, d7
 801e0fa:	e7e0      	b.n	801e0be <_strtod_l+0x8f6>
 801e0fc:	4013      	ands	r3, r2
 801e0fe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801e102:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801e106:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801e10a:	f04f 38ff 	mov.w	r8, #4294967295
 801e10e:	e7d6      	b.n	801e0be <_strtod_l+0x8f6>
 801e110:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e112:	ea13 0f08 	tst.w	r3, r8
 801e116:	e7e3      	b.n	801e0e0 <_strtod_l+0x918>
 801e118:	f7ff fb3c 	bl	801d794 <sulp>
 801e11c:	ee38 0b40 	vsub.f64	d0, d8, d0
 801e120:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801e124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e128:	ec59 8b10 	vmov	r8, r9, d0
 801e12c:	d1c7      	bne.n	801e0be <_strtod_l+0x8f6>
 801e12e:	e5f8      	b.n	801dd22 <_strtod_l+0x55a>
 801e130:	4631      	mov	r1, r6
 801e132:	4628      	mov	r0, r5
 801e134:	f7ff faba 	bl	801d6ac <__ratio>
 801e138:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801e13c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801e140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e144:	d85f      	bhi.n	801e206 <_strtod_l+0xa3e>
 801e146:	f1ba 0f00 	cmp.w	sl, #0
 801e14a:	d166      	bne.n	801e21a <_strtod_l+0xa52>
 801e14c:	f1b8 0f00 	cmp.w	r8, #0
 801e150:	d14d      	bne.n	801e1ee <_strtod_l+0xa26>
 801e152:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e156:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801e15a:	2b00      	cmp	r3, #0
 801e15c:	d162      	bne.n	801e224 <_strtod_l+0xa5c>
 801e15e:	eeb4 0bcd 	vcmpe.f64	d0, d13
 801e162:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801e166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e16a:	d401      	bmi.n	801e170 <_strtod_l+0x9a8>
 801e16c:	ee20 db0d 	vmul.f64	d13, d0, d13
 801e170:	eeb1 cb4d 	vneg.f64	d12, d13
 801e174:	4869      	ldr	r0, [pc, #420]	; (801e31c <_strtod_l+0xb54>)
 801e176:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 801e328 <_strtod_l+0xb60>
 801e17a:	ea0b 0100 	and.w	r1, fp, r0
 801e17e:	4561      	cmp	r1, ip
 801e180:	ec53 2b1c 	vmov	r2, r3, d12
 801e184:	d17a      	bne.n	801e27c <_strtod_l+0xab4>
 801e186:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801e18a:	ec49 8b10 	vmov	d0, r8, r9
 801e18e:	910a      	str	r1, [sp, #40]	; 0x28
 801e190:	f7ff f9c2 	bl	801d518 <__ulp>
 801e194:	ec49 8b1e 	vmov	d14, r8, r9
 801e198:	4860      	ldr	r0, [pc, #384]	; (801e31c <_strtod_l+0xb54>)
 801e19a:	eea0 eb0c 	vfma.f64	d14, d0, d12
 801e19e:	ee1e 3a90 	vmov	r3, s29
 801e1a2:	4a60      	ldr	r2, [pc, #384]	; (801e324 <_strtod_l+0xb5c>)
 801e1a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e1a6:	4018      	ands	r0, r3
 801e1a8:	4290      	cmp	r0, r2
 801e1aa:	ec59 8b1e 	vmov	r8, r9, d14
 801e1ae:	d93c      	bls.n	801e22a <_strtod_l+0xa62>
 801e1b0:	ee18 2a90 	vmov	r2, s17
 801e1b4:	4b5a      	ldr	r3, [pc, #360]	; (801e320 <_strtod_l+0xb58>)
 801e1b6:	429a      	cmp	r2, r3
 801e1b8:	d104      	bne.n	801e1c4 <_strtod_l+0x9fc>
 801e1ba:	ee18 3a10 	vmov	r3, s16
 801e1be:	3301      	adds	r3, #1
 801e1c0:	f43f ad40 	beq.w	801dc44 <_strtod_l+0x47c>
 801e1c4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 801e320 <_strtod_l+0xb58>
 801e1c8:	f04f 38ff 	mov.w	r8, #4294967295
 801e1cc:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e1ce:	4620      	mov	r0, r4
 801e1d0:	f7fe fe76 	bl	801cec0 <_Bfree>
 801e1d4:	4639      	mov	r1, r7
 801e1d6:	4620      	mov	r0, r4
 801e1d8:	f7fe fe72 	bl	801cec0 <_Bfree>
 801e1dc:	4631      	mov	r1, r6
 801e1de:	4620      	mov	r0, r4
 801e1e0:	f7fe fe6e 	bl	801cec0 <_Bfree>
 801e1e4:	4629      	mov	r1, r5
 801e1e6:	4620      	mov	r0, r4
 801e1e8:	f7fe fe6a 	bl	801cec0 <_Bfree>
 801e1ec:	e609      	b.n	801de02 <_strtod_l+0x63a>
 801e1ee:	f1b8 0f01 	cmp.w	r8, #1
 801e1f2:	d103      	bne.n	801e1fc <_strtod_l+0xa34>
 801e1f4:	f1b9 0f00 	cmp.w	r9, #0
 801e1f8:	f43f ad93 	beq.w	801dd22 <_strtod_l+0x55a>
 801e1fc:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801e200:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801e204:	e7b6      	b.n	801e174 <_strtod_l+0x9ac>
 801e206:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801e20a:	ee20 db0d 	vmul.f64	d13, d0, d13
 801e20e:	f1ba 0f00 	cmp.w	sl, #0
 801e212:	d0ad      	beq.n	801e170 <_strtod_l+0x9a8>
 801e214:	eeb0 cb4d 	vmov.f64	d12, d13
 801e218:	e7ac      	b.n	801e174 <_strtod_l+0x9ac>
 801e21a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 801e21e:	eeb0 db4c 	vmov.f64	d13, d12
 801e222:	e7a7      	b.n	801e174 <_strtod_l+0x9ac>
 801e224:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801e228:	e7a4      	b.n	801e174 <_strtod_l+0x9ac>
 801e22a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801e22e:	9b05      	ldr	r3, [sp, #20]
 801e230:	46cb      	mov	fp, r9
 801e232:	2b00      	cmp	r3, #0
 801e234:	d1ca      	bne.n	801e1cc <_strtod_l+0xa04>
 801e236:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e23a:	0d1b      	lsrs	r3, r3, #20
 801e23c:	051b      	lsls	r3, r3, #20
 801e23e:	4299      	cmp	r1, r3
 801e240:	d1c4      	bne.n	801e1cc <_strtod_l+0xa04>
 801e242:	ec51 0b1d 	vmov	r0, r1, d13
 801e246:	f7e2 fa9f 	bl	8000788 <__aeabi_d2lz>
 801e24a:	f7e2 fa57 	bl	80006fc <__aeabi_l2d>
 801e24e:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 801e252:	ec41 0b17 	vmov	d7, r0, r1
 801e256:	ea4b 0b08 	orr.w	fp, fp, r8
 801e25a:	ea5b 0b0a 	orrs.w	fp, fp, sl
 801e25e:	ee3d db47 	vsub.f64	d13, d13, d7
 801e262:	d03c      	beq.n	801e2de <_strtod_l+0xb16>
 801e264:	eeb4 dbca 	vcmpe.f64	d13, d10
 801e268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e26c:	f53f acf4 	bmi.w	801dc58 <_strtod_l+0x490>
 801e270:	eeb4 dbcb 	vcmpe.f64	d13, d11
 801e274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e278:	dda8      	ble.n	801e1cc <_strtod_l+0xa04>
 801e27a:	e4ed      	b.n	801dc58 <_strtod_l+0x490>
 801e27c:	9805      	ldr	r0, [sp, #20]
 801e27e:	b1f0      	cbz	r0, 801e2be <_strtod_l+0xaf6>
 801e280:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801e284:	d81b      	bhi.n	801e2be <_strtod_l+0xaf6>
 801e286:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801e310 <_strtod_l+0xb48>
 801e28a:	eeb4 dbc7 	vcmpe.f64	d13, d7
 801e28e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e292:	d811      	bhi.n	801e2b8 <_strtod_l+0xaf0>
 801e294:	eebc dbcd 	vcvt.u32.f64	s26, d13
 801e298:	ee1d 3a10 	vmov	r3, s26
 801e29c:	2b01      	cmp	r3, #1
 801e29e:	bf38      	it	cc
 801e2a0:	2301      	movcc	r3, #1
 801e2a2:	ee0d 3a10 	vmov	s26, r3
 801e2a6:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 801e2aa:	f1ba 0f00 	cmp.w	sl, #0
 801e2ae:	d113      	bne.n	801e2d8 <_strtod_l+0xb10>
 801e2b0:	eeb1 7b4d 	vneg.f64	d7, d13
 801e2b4:	ec53 2b17 	vmov	r2, r3, d7
 801e2b8:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 801e2bc:	1a43      	subs	r3, r0, r1
 801e2be:	eeb0 0b48 	vmov.f64	d0, d8
 801e2c2:	ec43 2b1c 	vmov	d12, r2, r3
 801e2c6:	910a      	str	r1, [sp, #40]	; 0x28
 801e2c8:	f7ff f926 	bl	801d518 <__ulp>
 801e2cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e2ce:	eeac 8b00 	vfma.f64	d8, d12, d0
 801e2d2:	ec59 8b18 	vmov	r8, r9, d8
 801e2d6:	e7aa      	b.n	801e22e <_strtod_l+0xa66>
 801e2d8:	eeb0 7b4d 	vmov.f64	d7, d13
 801e2dc:	e7ea      	b.n	801e2b4 <_strtod_l+0xaec>
 801e2de:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801e2e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e2e6:	f57f af71 	bpl.w	801e1cc <_strtod_l+0xa04>
 801e2ea:	e4b5      	b.n	801dc58 <_strtod_l+0x490>
 801e2ec:	2300      	movs	r3, #0
 801e2ee:	9308      	str	r3, [sp, #32]
 801e2f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e2f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e2f4:	6013      	str	r3, [r2, #0]
 801e2f6:	f7ff baa6 	b.w	801d846 <_strtod_l+0x7e>
 801e2fa:	2a65      	cmp	r2, #101	; 0x65
 801e2fc:	f43f aba2 	beq.w	801da44 <_strtod_l+0x27c>
 801e300:	2a45      	cmp	r2, #69	; 0x45
 801e302:	f43f ab9f 	beq.w	801da44 <_strtod_l+0x27c>
 801e306:	2101      	movs	r1, #1
 801e308:	f7ff bbd8 	b.w	801dabc <_strtod_l+0x2f4>
 801e30c:	f3af 8000 	nop.w
 801e310:	ffc00000 	.word	0xffc00000
 801e314:	41dfffff 	.word	0x41dfffff
 801e318:	000fffff 	.word	0x000fffff
 801e31c:	7ff00000 	.word	0x7ff00000
 801e320:	7fefffff 	.word	0x7fefffff
 801e324:	7c9fffff 	.word	0x7c9fffff
 801e328:	7fe00000 	.word	0x7fe00000

0801e32c <_strtod_r>:
 801e32c:	4b01      	ldr	r3, [pc, #4]	; (801e334 <_strtod_r+0x8>)
 801e32e:	f7ff ba4b 	b.w	801d7c8 <_strtod_l>
 801e332:	bf00      	nop
 801e334:	2400015c 	.word	0x2400015c

0801e338 <_strtol_l.constprop.0>:
 801e338:	2b01      	cmp	r3, #1
 801e33a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e33e:	d001      	beq.n	801e344 <_strtol_l.constprop.0+0xc>
 801e340:	2b24      	cmp	r3, #36	; 0x24
 801e342:	d906      	bls.n	801e352 <_strtol_l.constprop.0+0x1a>
 801e344:	f7fd fe3c 	bl	801bfc0 <__errno>
 801e348:	2316      	movs	r3, #22
 801e34a:	6003      	str	r3, [r0, #0]
 801e34c:	2000      	movs	r0, #0
 801e34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e352:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801e438 <_strtol_l.constprop.0+0x100>
 801e356:	460d      	mov	r5, r1
 801e358:	462e      	mov	r6, r5
 801e35a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e35e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801e362:	f017 0708 	ands.w	r7, r7, #8
 801e366:	d1f7      	bne.n	801e358 <_strtol_l.constprop.0+0x20>
 801e368:	2c2d      	cmp	r4, #45	; 0x2d
 801e36a:	d132      	bne.n	801e3d2 <_strtol_l.constprop.0+0x9a>
 801e36c:	782c      	ldrb	r4, [r5, #0]
 801e36e:	2701      	movs	r7, #1
 801e370:	1cb5      	adds	r5, r6, #2
 801e372:	2b00      	cmp	r3, #0
 801e374:	d05b      	beq.n	801e42e <_strtol_l.constprop.0+0xf6>
 801e376:	2b10      	cmp	r3, #16
 801e378:	d109      	bne.n	801e38e <_strtol_l.constprop.0+0x56>
 801e37a:	2c30      	cmp	r4, #48	; 0x30
 801e37c:	d107      	bne.n	801e38e <_strtol_l.constprop.0+0x56>
 801e37e:	782c      	ldrb	r4, [r5, #0]
 801e380:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801e384:	2c58      	cmp	r4, #88	; 0x58
 801e386:	d14d      	bne.n	801e424 <_strtol_l.constprop.0+0xec>
 801e388:	786c      	ldrb	r4, [r5, #1]
 801e38a:	2310      	movs	r3, #16
 801e38c:	3502      	adds	r5, #2
 801e38e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801e392:	f108 38ff 	add.w	r8, r8, #4294967295
 801e396:	f04f 0e00 	mov.w	lr, #0
 801e39a:	fbb8 f9f3 	udiv	r9, r8, r3
 801e39e:	4676      	mov	r6, lr
 801e3a0:	fb03 8a19 	mls	sl, r3, r9, r8
 801e3a4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801e3a8:	f1bc 0f09 	cmp.w	ip, #9
 801e3ac:	d816      	bhi.n	801e3dc <_strtol_l.constprop.0+0xa4>
 801e3ae:	4664      	mov	r4, ip
 801e3b0:	42a3      	cmp	r3, r4
 801e3b2:	dd24      	ble.n	801e3fe <_strtol_l.constprop.0+0xc6>
 801e3b4:	f1be 3fff 	cmp.w	lr, #4294967295
 801e3b8:	d008      	beq.n	801e3cc <_strtol_l.constprop.0+0x94>
 801e3ba:	45b1      	cmp	r9, r6
 801e3bc:	d31c      	bcc.n	801e3f8 <_strtol_l.constprop.0+0xc0>
 801e3be:	d101      	bne.n	801e3c4 <_strtol_l.constprop.0+0x8c>
 801e3c0:	45a2      	cmp	sl, r4
 801e3c2:	db19      	blt.n	801e3f8 <_strtol_l.constprop.0+0xc0>
 801e3c4:	fb06 4603 	mla	r6, r6, r3, r4
 801e3c8:	f04f 0e01 	mov.w	lr, #1
 801e3cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e3d0:	e7e8      	b.n	801e3a4 <_strtol_l.constprop.0+0x6c>
 801e3d2:	2c2b      	cmp	r4, #43	; 0x2b
 801e3d4:	bf04      	itt	eq
 801e3d6:	782c      	ldrbeq	r4, [r5, #0]
 801e3d8:	1cb5      	addeq	r5, r6, #2
 801e3da:	e7ca      	b.n	801e372 <_strtol_l.constprop.0+0x3a>
 801e3dc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801e3e0:	f1bc 0f19 	cmp.w	ip, #25
 801e3e4:	d801      	bhi.n	801e3ea <_strtol_l.constprop.0+0xb2>
 801e3e6:	3c37      	subs	r4, #55	; 0x37
 801e3e8:	e7e2      	b.n	801e3b0 <_strtol_l.constprop.0+0x78>
 801e3ea:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801e3ee:	f1bc 0f19 	cmp.w	ip, #25
 801e3f2:	d804      	bhi.n	801e3fe <_strtol_l.constprop.0+0xc6>
 801e3f4:	3c57      	subs	r4, #87	; 0x57
 801e3f6:	e7db      	b.n	801e3b0 <_strtol_l.constprop.0+0x78>
 801e3f8:	f04f 3eff 	mov.w	lr, #4294967295
 801e3fc:	e7e6      	b.n	801e3cc <_strtol_l.constprop.0+0x94>
 801e3fe:	f1be 3fff 	cmp.w	lr, #4294967295
 801e402:	d105      	bne.n	801e410 <_strtol_l.constprop.0+0xd8>
 801e404:	2322      	movs	r3, #34	; 0x22
 801e406:	6003      	str	r3, [r0, #0]
 801e408:	4646      	mov	r6, r8
 801e40a:	b942      	cbnz	r2, 801e41e <_strtol_l.constprop.0+0xe6>
 801e40c:	4630      	mov	r0, r6
 801e40e:	e79e      	b.n	801e34e <_strtol_l.constprop.0+0x16>
 801e410:	b107      	cbz	r7, 801e414 <_strtol_l.constprop.0+0xdc>
 801e412:	4276      	negs	r6, r6
 801e414:	2a00      	cmp	r2, #0
 801e416:	d0f9      	beq.n	801e40c <_strtol_l.constprop.0+0xd4>
 801e418:	f1be 0f00 	cmp.w	lr, #0
 801e41c:	d000      	beq.n	801e420 <_strtol_l.constprop.0+0xe8>
 801e41e:	1e69      	subs	r1, r5, #1
 801e420:	6011      	str	r1, [r2, #0]
 801e422:	e7f3      	b.n	801e40c <_strtol_l.constprop.0+0xd4>
 801e424:	2430      	movs	r4, #48	; 0x30
 801e426:	2b00      	cmp	r3, #0
 801e428:	d1b1      	bne.n	801e38e <_strtol_l.constprop.0+0x56>
 801e42a:	2308      	movs	r3, #8
 801e42c:	e7af      	b.n	801e38e <_strtol_l.constprop.0+0x56>
 801e42e:	2c30      	cmp	r4, #48	; 0x30
 801e430:	d0a5      	beq.n	801e37e <_strtol_l.constprop.0+0x46>
 801e432:	230a      	movs	r3, #10
 801e434:	e7ab      	b.n	801e38e <_strtol_l.constprop.0+0x56>
 801e436:	bf00      	nop
 801e438:	08020849 	.word	0x08020849

0801e43c <_strtol_r>:
 801e43c:	f7ff bf7c 	b.w	801e338 <_strtol_l.constprop.0>

0801e440 <__ssputs_r>:
 801e440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e444:	688e      	ldr	r6, [r1, #8]
 801e446:	461f      	mov	r7, r3
 801e448:	42be      	cmp	r6, r7
 801e44a:	680b      	ldr	r3, [r1, #0]
 801e44c:	4682      	mov	sl, r0
 801e44e:	460c      	mov	r4, r1
 801e450:	4690      	mov	r8, r2
 801e452:	d82c      	bhi.n	801e4ae <__ssputs_r+0x6e>
 801e454:	898a      	ldrh	r2, [r1, #12]
 801e456:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e45a:	d026      	beq.n	801e4aa <__ssputs_r+0x6a>
 801e45c:	6965      	ldr	r5, [r4, #20]
 801e45e:	6909      	ldr	r1, [r1, #16]
 801e460:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e464:	eba3 0901 	sub.w	r9, r3, r1
 801e468:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e46c:	1c7b      	adds	r3, r7, #1
 801e46e:	444b      	add	r3, r9
 801e470:	106d      	asrs	r5, r5, #1
 801e472:	429d      	cmp	r5, r3
 801e474:	bf38      	it	cc
 801e476:	461d      	movcc	r5, r3
 801e478:	0553      	lsls	r3, r2, #21
 801e47a:	d527      	bpl.n	801e4cc <__ssputs_r+0x8c>
 801e47c:	4629      	mov	r1, r5
 801e47e:	f7fe fc53 	bl	801cd28 <_malloc_r>
 801e482:	4606      	mov	r6, r0
 801e484:	b360      	cbz	r0, 801e4e0 <__ssputs_r+0xa0>
 801e486:	6921      	ldr	r1, [r4, #16]
 801e488:	464a      	mov	r2, r9
 801e48a:	f7fd fdce 	bl	801c02a <memcpy>
 801e48e:	89a3      	ldrh	r3, [r4, #12]
 801e490:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e498:	81a3      	strh	r3, [r4, #12]
 801e49a:	6126      	str	r6, [r4, #16]
 801e49c:	6165      	str	r5, [r4, #20]
 801e49e:	444e      	add	r6, r9
 801e4a0:	eba5 0509 	sub.w	r5, r5, r9
 801e4a4:	6026      	str	r6, [r4, #0]
 801e4a6:	60a5      	str	r5, [r4, #8]
 801e4a8:	463e      	mov	r6, r7
 801e4aa:	42be      	cmp	r6, r7
 801e4ac:	d900      	bls.n	801e4b0 <__ssputs_r+0x70>
 801e4ae:	463e      	mov	r6, r7
 801e4b0:	6820      	ldr	r0, [r4, #0]
 801e4b2:	4632      	mov	r2, r6
 801e4b4:	4641      	mov	r1, r8
 801e4b6:	f000 fd5c 	bl	801ef72 <memmove>
 801e4ba:	68a3      	ldr	r3, [r4, #8]
 801e4bc:	1b9b      	subs	r3, r3, r6
 801e4be:	60a3      	str	r3, [r4, #8]
 801e4c0:	6823      	ldr	r3, [r4, #0]
 801e4c2:	4433      	add	r3, r6
 801e4c4:	6023      	str	r3, [r4, #0]
 801e4c6:	2000      	movs	r0, #0
 801e4c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e4cc:	462a      	mov	r2, r5
 801e4ce:	f001 f934 	bl	801f73a <_realloc_r>
 801e4d2:	4606      	mov	r6, r0
 801e4d4:	2800      	cmp	r0, #0
 801e4d6:	d1e0      	bne.n	801e49a <__ssputs_r+0x5a>
 801e4d8:	6921      	ldr	r1, [r4, #16]
 801e4da:	4650      	mov	r0, sl
 801e4dc:	f7fe fbb0 	bl	801cc40 <_free_r>
 801e4e0:	230c      	movs	r3, #12
 801e4e2:	f8ca 3000 	str.w	r3, [sl]
 801e4e6:	89a3      	ldrh	r3, [r4, #12]
 801e4e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e4ec:	81a3      	strh	r3, [r4, #12]
 801e4ee:	f04f 30ff 	mov.w	r0, #4294967295
 801e4f2:	e7e9      	b.n	801e4c8 <__ssputs_r+0x88>

0801e4f4 <_svfiprintf_r>:
 801e4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4f8:	4698      	mov	r8, r3
 801e4fa:	898b      	ldrh	r3, [r1, #12]
 801e4fc:	061b      	lsls	r3, r3, #24
 801e4fe:	b09d      	sub	sp, #116	; 0x74
 801e500:	4607      	mov	r7, r0
 801e502:	460d      	mov	r5, r1
 801e504:	4614      	mov	r4, r2
 801e506:	d50e      	bpl.n	801e526 <_svfiprintf_r+0x32>
 801e508:	690b      	ldr	r3, [r1, #16]
 801e50a:	b963      	cbnz	r3, 801e526 <_svfiprintf_r+0x32>
 801e50c:	2140      	movs	r1, #64	; 0x40
 801e50e:	f7fe fc0b 	bl	801cd28 <_malloc_r>
 801e512:	6028      	str	r0, [r5, #0]
 801e514:	6128      	str	r0, [r5, #16]
 801e516:	b920      	cbnz	r0, 801e522 <_svfiprintf_r+0x2e>
 801e518:	230c      	movs	r3, #12
 801e51a:	603b      	str	r3, [r7, #0]
 801e51c:	f04f 30ff 	mov.w	r0, #4294967295
 801e520:	e0d0      	b.n	801e6c4 <_svfiprintf_r+0x1d0>
 801e522:	2340      	movs	r3, #64	; 0x40
 801e524:	616b      	str	r3, [r5, #20]
 801e526:	2300      	movs	r3, #0
 801e528:	9309      	str	r3, [sp, #36]	; 0x24
 801e52a:	2320      	movs	r3, #32
 801e52c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e530:	f8cd 800c 	str.w	r8, [sp, #12]
 801e534:	2330      	movs	r3, #48	; 0x30
 801e536:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801e6dc <_svfiprintf_r+0x1e8>
 801e53a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e53e:	f04f 0901 	mov.w	r9, #1
 801e542:	4623      	mov	r3, r4
 801e544:	469a      	mov	sl, r3
 801e546:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e54a:	b10a      	cbz	r2, 801e550 <_svfiprintf_r+0x5c>
 801e54c:	2a25      	cmp	r2, #37	; 0x25
 801e54e:	d1f9      	bne.n	801e544 <_svfiprintf_r+0x50>
 801e550:	ebba 0b04 	subs.w	fp, sl, r4
 801e554:	d00b      	beq.n	801e56e <_svfiprintf_r+0x7a>
 801e556:	465b      	mov	r3, fp
 801e558:	4622      	mov	r2, r4
 801e55a:	4629      	mov	r1, r5
 801e55c:	4638      	mov	r0, r7
 801e55e:	f7ff ff6f 	bl	801e440 <__ssputs_r>
 801e562:	3001      	adds	r0, #1
 801e564:	f000 80a9 	beq.w	801e6ba <_svfiprintf_r+0x1c6>
 801e568:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e56a:	445a      	add	r2, fp
 801e56c:	9209      	str	r2, [sp, #36]	; 0x24
 801e56e:	f89a 3000 	ldrb.w	r3, [sl]
 801e572:	2b00      	cmp	r3, #0
 801e574:	f000 80a1 	beq.w	801e6ba <_svfiprintf_r+0x1c6>
 801e578:	2300      	movs	r3, #0
 801e57a:	f04f 32ff 	mov.w	r2, #4294967295
 801e57e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e582:	f10a 0a01 	add.w	sl, sl, #1
 801e586:	9304      	str	r3, [sp, #16]
 801e588:	9307      	str	r3, [sp, #28]
 801e58a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e58e:	931a      	str	r3, [sp, #104]	; 0x68
 801e590:	4654      	mov	r4, sl
 801e592:	2205      	movs	r2, #5
 801e594:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e598:	4850      	ldr	r0, [pc, #320]	; (801e6dc <_svfiprintf_r+0x1e8>)
 801e59a:	f7e1 fec9 	bl	8000330 <memchr>
 801e59e:	9a04      	ldr	r2, [sp, #16]
 801e5a0:	b9d8      	cbnz	r0, 801e5da <_svfiprintf_r+0xe6>
 801e5a2:	06d0      	lsls	r0, r2, #27
 801e5a4:	bf44      	itt	mi
 801e5a6:	2320      	movmi	r3, #32
 801e5a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e5ac:	0711      	lsls	r1, r2, #28
 801e5ae:	bf44      	itt	mi
 801e5b0:	232b      	movmi	r3, #43	; 0x2b
 801e5b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e5b6:	f89a 3000 	ldrb.w	r3, [sl]
 801e5ba:	2b2a      	cmp	r3, #42	; 0x2a
 801e5bc:	d015      	beq.n	801e5ea <_svfiprintf_r+0xf6>
 801e5be:	9a07      	ldr	r2, [sp, #28]
 801e5c0:	4654      	mov	r4, sl
 801e5c2:	2000      	movs	r0, #0
 801e5c4:	f04f 0c0a 	mov.w	ip, #10
 801e5c8:	4621      	mov	r1, r4
 801e5ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e5ce:	3b30      	subs	r3, #48	; 0x30
 801e5d0:	2b09      	cmp	r3, #9
 801e5d2:	d94d      	bls.n	801e670 <_svfiprintf_r+0x17c>
 801e5d4:	b1b0      	cbz	r0, 801e604 <_svfiprintf_r+0x110>
 801e5d6:	9207      	str	r2, [sp, #28]
 801e5d8:	e014      	b.n	801e604 <_svfiprintf_r+0x110>
 801e5da:	eba0 0308 	sub.w	r3, r0, r8
 801e5de:	fa09 f303 	lsl.w	r3, r9, r3
 801e5e2:	4313      	orrs	r3, r2
 801e5e4:	9304      	str	r3, [sp, #16]
 801e5e6:	46a2      	mov	sl, r4
 801e5e8:	e7d2      	b.n	801e590 <_svfiprintf_r+0x9c>
 801e5ea:	9b03      	ldr	r3, [sp, #12]
 801e5ec:	1d19      	adds	r1, r3, #4
 801e5ee:	681b      	ldr	r3, [r3, #0]
 801e5f0:	9103      	str	r1, [sp, #12]
 801e5f2:	2b00      	cmp	r3, #0
 801e5f4:	bfbb      	ittet	lt
 801e5f6:	425b      	neglt	r3, r3
 801e5f8:	f042 0202 	orrlt.w	r2, r2, #2
 801e5fc:	9307      	strge	r3, [sp, #28]
 801e5fe:	9307      	strlt	r3, [sp, #28]
 801e600:	bfb8      	it	lt
 801e602:	9204      	strlt	r2, [sp, #16]
 801e604:	7823      	ldrb	r3, [r4, #0]
 801e606:	2b2e      	cmp	r3, #46	; 0x2e
 801e608:	d10c      	bne.n	801e624 <_svfiprintf_r+0x130>
 801e60a:	7863      	ldrb	r3, [r4, #1]
 801e60c:	2b2a      	cmp	r3, #42	; 0x2a
 801e60e:	d134      	bne.n	801e67a <_svfiprintf_r+0x186>
 801e610:	9b03      	ldr	r3, [sp, #12]
 801e612:	1d1a      	adds	r2, r3, #4
 801e614:	681b      	ldr	r3, [r3, #0]
 801e616:	9203      	str	r2, [sp, #12]
 801e618:	2b00      	cmp	r3, #0
 801e61a:	bfb8      	it	lt
 801e61c:	f04f 33ff 	movlt.w	r3, #4294967295
 801e620:	3402      	adds	r4, #2
 801e622:	9305      	str	r3, [sp, #20]
 801e624:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801e6ec <_svfiprintf_r+0x1f8>
 801e628:	7821      	ldrb	r1, [r4, #0]
 801e62a:	2203      	movs	r2, #3
 801e62c:	4650      	mov	r0, sl
 801e62e:	f7e1 fe7f 	bl	8000330 <memchr>
 801e632:	b138      	cbz	r0, 801e644 <_svfiprintf_r+0x150>
 801e634:	9b04      	ldr	r3, [sp, #16]
 801e636:	eba0 000a 	sub.w	r0, r0, sl
 801e63a:	2240      	movs	r2, #64	; 0x40
 801e63c:	4082      	lsls	r2, r0
 801e63e:	4313      	orrs	r3, r2
 801e640:	3401      	adds	r4, #1
 801e642:	9304      	str	r3, [sp, #16]
 801e644:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e648:	4825      	ldr	r0, [pc, #148]	; (801e6e0 <_svfiprintf_r+0x1ec>)
 801e64a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e64e:	2206      	movs	r2, #6
 801e650:	f7e1 fe6e 	bl	8000330 <memchr>
 801e654:	2800      	cmp	r0, #0
 801e656:	d038      	beq.n	801e6ca <_svfiprintf_r+0x1d6>
 801e658:	4b22      	ldr	r3, [pc, #136]	; (801e6e4 <_svfiprintf_r+0x1f0>)
 801e65a:	bb1b      	cbnz	r3, 801e6a4 <_svfiprintf_r+0x1b0>
 801e65c:	9b03      	ldr	r3, [sp, #12]
 801e65e:	3307      	adds	r3, #7
 801e660:	f023 0307 	bic.w	r3, r3, #7
 801e664:	3308      	adds	r3, #8
 801e666:	9303      	str	r3, [sp, #12]
 801e668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e66a:	4433      	add	r3, r6
 801e66c:	9309      	str	r3, [sp, #36]	; 0x24
 801e66e:	e768      	b.n	801e542 <_svfiprintf_r+0x4e>
 801e670:	fb0c 3202 	mla	r2, ip, r2, r3
 801e674:	460c      	mov	r4, r1
 801e676:	2001      	movs	r0, #1
 801e678:	e7a6      	b.n	801e5c8 <_svfiprintf_r+0xd4>
 801e67a:	2300      	movs	r3, #0
 801e67c:	3401      	adds	r4, #1
 801e67e:	9305      	str	r3, [sp, #20]
 801e680:	4619      	mov	r1, r3
 801e682:	f04f 0c0a 	mov.w	ip, #10
 801e686:	4620      	mov	r0, r4
 801e688:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e68c:	3a30      	subs	r2, #48	; 0x30
 801e68e:	2a09      	cmp	r2, #9
 801e690:	d903      	bls.n	801e69a <_svfiprintf_r+0x1a6>
 801e692:	2b00      	cmp	r3, #0
 801e694:	d0c6      	beq.n	801e624 <_svfiprintf_r+0x130>
 801e696:	9105      	str	r1, [sp, #20]
 801e698:	e7c4      	b.n	801e624 <_svfiprintf_r+0x130>
 801e69a:	fb0c 2101 	mla	r1, ip, r1, r2
 801e69e:	4604      	mov	r4, r0
 801e6a0:	2301      	movs	r3, #1
 801e6a2:	e7f0      	b.n	801e686 <_svfiprintf_r+0x192>
 801e6a4:	ab03      	add	r3, sp, #12
 801e6a6:	9300      	str	r3, [sp, #0]
 801e6a8:	462a      	mov	r2, r5
 801e6aa:	4b0f      	ldr	r3, [pc, #60]	; (801e6e8 <_svfiprintf_r+0x1f4>)
 801e6ac:	a904      	add	r1, sp, #16
 801e6ae:	4638      	mov	r0, r7
 801e6b0:	f7fc fd32 	bl	801b118 <_printf_float>
 801e6b4:	1c42      	adds	r2, r0, #1
 801e6b6:	4606      	mov	r6, r0
 801e6b8:	d1d6      	bne.n	801e668 <_svfiprintf_r+0x174>
 801e6ba:	89ab      	ldrh	r3, [r5, #12]
 801e6bc:	065b      	lsls	r3, r3, #25
 801e6be:	f53f af2d 	bmi.w	801e51c <_svfiprintf_r+0x28>
 801e6c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e6c4:	b01d      	add	sp, #116	; 0x74
 801e6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e6ca:	ab03      	add	r3, sp, #12
 801e6cc:	9300      	str	r3, [sp, #0]
 801e6ce:	462a      	mov	r2, r5
 801e6d0:	4b05      	ldr	r3, [pc, #20]	; (801e6e8 <_svfiprintf_r+0x1f4>)
 801e6d2:	a904      	add	r1, sp, #16
 801e6d4:	4638      	mov	r0, r7
 801e6d6:	f7fc ffa7 	bl	801b628 <_printf_i>
 801e6da:	e7eb      	b.n	801e6b4 <_svfiprintf_r+0x1c0>
 801e6dc:	08020949 	.word	0x08020949
 801e6e0:	08020953 	.word	0x08020953
 801e6e4:	0801b119 	.word	0x0801b119
 801e6e8:	0801e441 	.word	0x0801e441
 801e6ec:	0802094f 	.word	0x0802094f

0801e6f0 <_sungetc_r>:
 801e6f0:	b538      	push	{r3, r4, r5, lr}
 801e6f2:	1c4b      	adds	r3, r1, #1
 801e6f4:	4614      	mov	r4, r2
 801e6f6:	d103      	bne.n	801e700 <_sungetc_r+0x10>
 801e6f8:	f04f 35ff 	mov.w	r5, #4294967295
 801e6fc:	4628      	mov	r0, r5
 801e6fe:	bd38      	pop	{r3, r4, r5, pc}
 801e700:	8993      	ldrh	r3, [r2, #12]
 801e702:	f023 0320 	bic.w	r3, r3, #32
 801e706:	8193      	strh	r3, [r2, #12]
 801e708:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e70a:	6852      	ldr	r2, [r2, #4]
 801e70c:	b2cd      	uxtb	r5, r1
 801e70e:	b18b      	cbz	r3, 801e734 <_sungetc_r+0x44>
 801e710:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e712:	4293      	cmp	r3, r2
 801e714:	dd08      	ble.n	801e728 <_sungetc_r+0x38>
 801e716:	6823      	ldr	r3, [r4, #0]
 801e718:	1e5a      	subs	r2, r3, #1
 801e71a:	6022      	str	r2, [r4, #0]
 801e71c:	f803 5c01 	strb.w	r5, [r3, #-1]
 801e720:	6863      	ldr	r3, [r4, #4]
 801e722:	3301      	adds	r3, #1
 801e724:	6063      	str	r3, [r4, #4]
 801e726:	e7e9      	b.n	801e6fc <_sungetc_r+0xc>
 801e728:	4621      	mov	r1, r4
 801e72a:	f000 fbe8 	bl	801eefe <__submore>
 801e72e:	2800      	cmp	r0, #0
 801e730:	d0f1      	beq.n	801e716 <_sungetc_r+0x26>
 801e732:	e7e1      	b.n	801e6f8 <_sungetc_r+0x8>
 801e734:	6921      	ldr	r1, [r4, #16]
 801e736:	6823      	ldr	r3, [r4, #0]
 801e738:	b151      	cbz	r1, 801e750 <_sungetc_r+0x60>
 801e73a:	4299      	cmp	r1, r3
 801e73c:	d208      	bcs.n	801e750 <_sungetc_r+0x60>
 801e73e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801e742:	42a9      	cmp	r1, r5
 801e744:	d104      	bne.n	801e750 <_sungetc_r+0x60>
 801e746:	3b01      	subs	r3, #1
 801e748:	3201      	adds	r2, #1
 801e74a:	6023      	str	r3, [r4, #0]
 801e74c:	6062      	str	r2, [r4, #4]
 801e74e:	e7d5      	b.n	801e6fc <_sungetc_r+0xc>
 801e750:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801e754:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e758:	6363      	str	r3, [r4, #52]	; 0x34
 801e75a:	2303      	movs	r3, #3
 801e75c:	63a3      	str	r3, [r4, #56]	; 0x38
 801e75e:	4623      	mov	r3, r4
 801e760:	f803 5f46 	strb.w	r5, [r3, #70]!
 801e764:	6023      	str	r3, [r4, #0]
 801e766:	2301      	movs	r3, #1
 801e768:	e7dc      	b.n	801e724 <_sungetc_r+0x34>

0801e76a <__ssrefill_r>:
 801e76a:	b510      	push	{r4, lr}
 801e76c:	460c      	mov	r4, r1
 801e76e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801e770:	b169      	cbz	r1, 801e78e <__ssrefill_r+0x24>
 801e772:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e776:	4299      	cmp	r1, r3
 801e778:	d001      	beq.n	801e77e <__ssrefill_r+0x14>
 801e77a:	f7fe fa61 	bl	801cc40 <_free_r>
 801e77e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e780:	6063      	str	r3, [r4, #4]
 801e782:	2000      	movs	r0, #0
 801e784:	6360      	str	r0, [r4, #52]	; 0x34
 801e786:	b113      	cbz	r3, 801e78e <__ssrefill_r+0x24>
 801e788:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801e78a:	6023      	str	r3, [r4, #0]
 801e78c:	bd10      	pop	{r4, pc}
 801e78e:	6923      	ldr	r3, [r4, #16]
 801e790:	6023      	str	r3, [r4, #0]
 801e792:	2300      	movs	r3, #0
 801e794:	6063      	str	r3, [r4, #4]
 801e796:	89a3      	ldrh	r3, [r4, #12]
 801e798:	f043 0320 	orr.w	r3, r3, #32
 801e79c:	81a3      	strh	r3, [r4, #12]
 801e79e:	f04f 30ff 	mov.w	r0, #4294967295
 801e7a2:	e7f3      	b.n	801e78c <__ssrefill_r+0x22>

0801e7a4 <__ssvfiscanf_r>:
 801e7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e7a8:	460c      	mov	r4, r1
 801e7aa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801e7ae:	2100      	movs	r1, #0
 801e7b0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801e7b4:	49a6      	ldr	r1, [pc, #664]	; (801ea50 <__ssvfiscanf_r+0x2ac>)
 801e7b6:	91a0      	str	r1, [sp, #640]	; 0x280
 801e7b8:	f10d 0804 	add.w	r8, sp, #4
 801e7bc:	49a5      	ldr	r1, [pc, #660]	; (801ea54 <__ssvfiscanf_r+0x2b0>)
 801e7be:	4fa6      	ldr	r7, [pc, #664]	; (801ea58 <__ssvfiscanf_r+0x2b4>)
 801e7c0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801ea5c <__ssvfiscanf_r+0x2b8>
 801e7c4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801e7c8:	4606      	mov	r6, r0
 801e7ca:	91a1      	str	r1, [sp, #644]	; 0x284
 801e7cc:	9300      	str	r3, [sp, #0]
 801e7ce:	7813      	ldrb	r3, [r2, #0]
 801e7d0:	2b00      	cmp	r3, #0
 801e7d2:	f000 815a 	beq.w	801ea8a <__ssvfiscanf_r+0x2e6>
 801e7d6:	5cf9      	ldrb	r1, [r7, r3]
 801e7d8:	f011 0108 	ands.w	r1, r1, #8
 801e7dc:	f102 0501 	add.w	r5, r2, #1
 801e7e0:	d019      	beq.n	801e816 <__ssvfiscanf_r+0x72>
 801e7e2:	6863      	ldr	r3, [r4, #4]
 801e7e4:	2b00      	cmp	r3, #0
 801e7e6:	dd0f      	ble.n	801e808 <__ssvfiscanf_r+0x64>
 801e7e8:	6823      	ldr	r3, [r4, #0]
 801e7ea:	781a      	ldrb	r2, [r3, #0]
 801e7ec:	5cba      	ldrb	r2, [r7, r2]
 801e7ee:	0712      	lsls	r2, r2, #28
 801e7f0:	d401      	bmi.n	801e7f6 <__ssvfiscanf_r+0x52>
 801e7f2:	462a      	mov	r2, r5
 801e7f4:	e7eb      	b.n	801e7ce <__ssvfiscanf_r+0x2a>
 801e7f6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e7f8:	3201      	adds	r2, #1
 801e7fa:	9245      	str	r2, [sp, #276]	; 0x114
 801e7fc:	6862      	ldr	r2, [r4, #4]
 801e7fe:	3301      	adds	r3, #1
 801e800:	3a01      	subs	r2, #1
 801e802:	6062      	str	r2, [r4, #4]
 801e804:	6023      	str	r3, [r4, #0]
 801e806:	e7ec      	b.n	801e7e2 <__ssvfiscanf_r+0x3e>
 801e808:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e80a:	4621      	mov	r1, r4
 801e80c:	4630      	mov	r0, r6
 801e80e:	4798      	blx	r3
 801e810:	2800      	cmp	r0, #0
 801e812:	d0e9      	beq.n	801e7e8 <__ssvfiscanf_r+0x44>
 801e814:	e7ed      	b.n	801e7f2 <__ssvfiscanf_r+0x4e>
 801e816:	2b25      	cmp	r3, #37	; 0x25
 801e818:	d012      	beq.n	801e840 <__ssvfiscanf_r+0x9c>
 801e81a:	469a      	mov	sl, r3
 801e81c:	6863      	ldr	r3, [r4, #4]
 801e81e:	2b00      	cmp	r3, #0
 801e820:	f340 8091 	ble.w	801e946 <__ssvfiscanf_r+0x1a2>
 801e824:	6822      	ldr	r2, [r4, #0]
 801e826:	7813      	ldrb	r3, [r2, #0]
 801e828:	4553      	cmp	r3, sl
 801e82a:	f040 812e 	bne.w	801ea8a <__ssvfiscanf_r+0x2e6>
 801e82e:	6863      	ldr	r3, [r4, #4]
 801e830:	3b01      	subs	r3, #1
 801e832:	6063      	str	r3, [r4, #4]
 801e834:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801e836:	3201      	adds	r2, #1
 801e838:	3301      	adds	r3, #1
 801e83a:	6022      	str	r2, [r4, #0]
 801e83c:	9345      	str	r3, [sp, #276]	; 0x114
 801e83e:	e7d8      	b.n	801e7f2 <__ssvfiscanf_r+0x4e>
 801e840:	9141      	str	r1, [sp, #260]	; 0x104
 801e842:	9143      	str	r1, [sp, #268]	; 0x10c
 801e844:	7853      	ldrb	r3, [r2, #1]
 801e846:	2b2a      	cmp	r3, #42	; 0x2a
 801e848:	bf02      	ittt	eq
 801e84a:	2310      	moveq	r3, #16
 801e84c:	1c95      	addeq	r5, r2, #2
 801e84e:	9341      	streq	r3, [sp, #260]	; 0x104
 801e850:	220a      	movs	r2, #10
 801e852:	46aa      	mov	sl, r5
 801e854:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801e858:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801e85c:	2b09      	cmp	r3, #9
 801e85e:	d91c      	bls.n	801e89a <__ssvfiscanf_r+0xf6>
 801e860:	487e      	ldr	r0, [pc, #504]	; (801ea5c <__ssvfiscanf_r+0x2b8>)
 801e862:	2203      	movs	r2, #3
 801e864:	f7e1 fd64 	bl	8000330 <memchr>
 801e868:	b138      	cbz	r0, 801e87a <__ssvfiscanf_r+0xd6>
 801e86a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801e86c:	eba0 0009 	sub.w	r0, r0, r9
 801e870:	2301      	movs	r3, #1
 801e872:	4083      	lsls	r3, r0
 801e874:	4313      	orrs	r3, r2
 801e876:	9341      	str	r3, [sp, #260]	; 0x104
 801e878:	4655      	mov	r5, sl
 801e87a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801e87e:	2b78      	cmp	r3, #120	; 0x78
 801e880:	d806      	bhi.n	801e890 <__ssvfiscanf_r+0xec>
 801e882:	2b57      	cmp	r3, #87	; 0x57
 801e884:	d810      	bhi.n	801e8a8 <__ssvfiscanf_r+0x104>
 801e886:	2b25      	cmp	r3, #37	; 0x25
 801e888:	d0c7      	beq.n	801e81a <__ssvfiscanf_r+0x76>
 801e88a:	d857      	bhi.n	801e93c <__ssvfiscanf_r+0x198>
 801e88c:	2b00      	cmp	r3, #0
 801e88e:	d065      	beq.n	801e95c <__ssvfiscanf_r+0x1b8>
 801e890:	2303      	movs	r3, #3
 801e892:	9347      	str	r3, [sp, #284]	; 0x11c
 801e894:	230a      	movs	r3, #10
 801e896:	9342      	str	r3, [sp, #264]	; 0x108
 801e898:	e076      	b.n	801e988 <__ssvfiscanf_r+0x1e4>
 801e89a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801e89c:	fb02 1103 	mla	r1, r2, r3, r1
 801e8a0:	3930      	subs	r1, #48	; 0x30
 801e8a2:	9143      	str	r1, [sp, #268]	; 0x10c
 801e8a4:	4655      	mov	r5, sl
 801e8a6:	e7d4      	b.n	801e852 <__ssvfiscanf_r+0xae>
 801e8a8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801e8ac:	2a20      	cmp	r2, #32
 801e8ae:	d8ef      	bhi.n	801e890 <__ssvfiscanf_r+0xec>
 801e8b0:	a101      	add	r1, pc, #4	; (adr r1, 801e8b8 <__ssvfiscanf_r+0x114>)
 801e8b2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801e8b6:	bf00      	nop
 801e8b8:	0801e96b 	.word	0x0801e96b
 801e8bc:	0801e891 	.word	0x0801e891
 801e8c0:	0801e891 	.word	0x0801e891
 801e8c4:	0801e9c9 	.word	0x0801e9c9
 801e8c8:	0801e891 	.word	0x0801e891
 801e8cc:	0801e891 	.word	0x0801e891
 801e8d0:	0801e891 	.word	0x0801e891
 801e8d4:	0801e891 	.word	0x0801e891
 801e8d8:	0801e891 	.word	0x0801e891
 801e8dc:	0801e891 	.word	0x0801e891
 801e8e0:	0801e891 	.word	0x0801e891
 801e8e4:	0801e9df 	.word	0x0801e9df
 801e8e8:	0801e9c5 	.word	0x0801e9c5
 801e8ec:	0801e943 	.word	0x0801e943
 801e8f0:	0801e943 	.word	0x0801e943
 801e8f4:	0801e943 	.word	0x0801e943
 801e8f8:	0801e891 	.word	0x0801e891
 801e8fc:	0801e981 	.word	0x0801e981
 801e900:	0801e891 	.word	0x0801e891
 801e904:	0801e891 	.word	0x0801e891
 801e908:	0801e891 	.word	0x0801e891
 801e90c:	0801e891 	.word	0x0801e891
 801e910:	0801e9ef 	.word	0x0801e9ef
 801e914:	0801e9bd 	.word	0x0801e9bd
 801e918:	0801e963 	.word	0x0801e963
 801e91c:	0801e891 	.word	0x0801e891
 801e920:	0801e891 	.word	0x0801e891
 801e924:	0801e9eb 	.word	0x0801e9eb
 801e928:	0801e891 	.word	0x0801e891
 801e92c:	0801e9c5 	.word	0x0801e9c5
 801e930:	0801e891 	.word	0x0801e891
 801e934:	0801e891 	.word	0x0801e891
 801e938:	0801e96b 	.word	0x0801e96b
 801e93c:	3b45      	subs	r3, #69	; 0x45
 801e93e:	2b02      	cmp	r3, #2
 801e940:	d8a6      	bhi.n	801e890 <__ssvfiscanf_r+0xec>
 801e942:	2305      	movs	r3, #5
 801e944:	e01f      	b.n	801e986 <__ssvfiscanf_r+0x1e2>
 801e946:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e948:	4621      	mov	r1, r4
 801e94a:	4630      	mov	r0, r6
 801e94c:	4798      	blx	r3
 801e94e:	2800      	cmp	r0, #0
 801e950:	f43f af68 	beq.w	801e824 <__ssvfiscanf_r+0x80>
 801e954:	9844      	ldr	r0, [sp, #272]	; 0x110
 801e956:	2800      	cmp	r0, #0
 801e958:	f040 808d 	bne.w	801ea76 <__ssvfiscanf_r+0x2d2>
 801e95c:	f04f 30ff 	mov.w	r0, #4294967295
 801e960:	e08f      	b.n	801ea82 <__ssvfiscanf_r+0x2de>
 801e962:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801e964:	f042 0220 	orr.w	r2, r2, #32
 801e968:	9241      	str	r2, [sp, #260]	; 0x104
 801e96a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801e96c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e970:	9241      	str	r2, [sp, #260]	; 0x104
 801e972:	2210      	movs	r2, #16
 801e974:	2b6f      	cmp	r3, #111	; 0x6f
 801e976:	9242      	str	r2, [sp, #264]	; 0x108
 801e978:	bf34      	ite	cc
 801e97a:	2303      	movcc	r3, #3
 801e97c:	2304      	movcs	r3, #4
 801e97e:	e002      	b.n	801e986 <__ssvfiscanf_r+0x1e2>
 801e980:	2300      	movs	r3, #0
 801e982:	9342      	str	r3, [sp, #264]	; 0x108
 801e984:	2303      	movs	r3, #3
 801e986:	9347      	str	r3, [sp, #284]	; 0x11c
 801e988:	6863      	ldr	r3, [r4, #4]
 801e98a:	2b00      	cmp	r3, #0
 801e98c:	dd3d      	ble.n	801ea0a <__ssvfiscanf_r+0x266>
 801e98e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e990:	0659      	lsls	r1, r3, #25
 801e992:	d404      	bmi.n	801e99e <__ssvfiscanf_r+0x1fa>
 801e994:	6823      	ldr	r3, [r4, #0]
 801e996:	781a      	ldrb	r2, [r3, #0]
 801e998:	5cba      	ldrb	r2, [r7, r2]
 801e99a:	0712      	lsls	r2, r2, #28
 801e99c:	d43c      	bmi.n	801ea18 <__ssvfiscanf_r+0x274>
 801e99e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801e9a0:	2b02      	cmp	r3, #2
 801e9a2:	dc4b      	bgt.n	801ea3c <__ssvfiscanf_r+0x298>
 801e9a4:	466b      	mov	r3, sp
 801e9a6:	4622      	mov	r2, r4
 801e9a8:	a941      	add	r1, sp, #260	; 0x104
 801e9aa:	4630      	mov	r0, r6
 801e9ac:	f000 f872 	bl	801ea94 <_scanf_chars>
 801e9b0:	2801      	cmp	r0, #1
 801e9b2:	d06a      	beq.n	801ea8a <__ssvfiscanf_r+0x2e6>
 801e9b4:	2802      	cmp	r0, #2
 801e9b6:	f47f af1c 	bne.w	801e7f2 <__ssvfiscanf_r+0x4e>
 801e9ba:	e7cb      	b.n	801e954 <__ssvfiscanf_r+0x1b0>
 801e9bc:	2308      	movs	r3, #8
 801e9be:	9342      	str	r3, [sp, #264]	; 0x108
 801e9c0:	2304      	movs	r3, #4
 801e9c2:	e7e0      	b.n	801e986 <__ssvfiscanf_r+0x1e2>
 801e9c4:	220a      	movs	r2, #10
 801e9c6:	e7d5      	b.n	801e974 <__ssvfiscanf_r+0x1d0>
 801e9c8:	4629      	mov	r1, r5
 801e9ca:	4640      	mov	r0, r8
 801e9cc:	f000 fa5e 	bl	801ee8c <__sccl>
 801e9d0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e9d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e9d6:	9341      	str	r3, [sp, #260]	; 0x104
 801e9d8:	4605      	mov	r5, r0
 801e9da:	2301      	movs	r3, #1
 801e9dc:	e7d3      	b.n	801e986 <__ssvfiscanf_r+0x1e2>
 801e9de:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e9e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e9e4:	9341      	str	r3, [sp, #260]	; 0x104
 801e9e6:	2300      	movs	r3, #0
 801e9e8:	e7cd      	b.n	801e986 <__ssvfiscanf_r+0x1e2>
 801e9ea:	2302      	movs	r3, #2
 801e9ec:	e7cb      	b.n	801e986 <__ssvfiscanf_r+0x1e2>
 801e9ee:	9841      	ldr	r0, [sp, #260]	; 0x104
 801e9f0:	06c3      	lsls	r3, r0, #27
 801e9f2:	f53f aefe 	bmi.w	801e7f2 <__ssvfiscanf_r+0x4e>
 801e9f6:	9b00      	ldr	r3, [sp, #0]
 801e9f8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e9fa:	1d19      	adds	r1, r3, #4
 801e9fc:	9100      	str	r1, [sp, #0]
 801e9fe:	681b      	ldr	r3, [r3, #0]
 801ea00:	07c0      	lsls	r0, r0, #31
 801ea02:	bf4c      	ite	mi
 801ea04:	801a      	strhmi	r2, [r3, #0]
 801ea06:	601a      	strpl	r2, [r3, #0]
 801ea08:	e6f3      	b.n	801e7f2 <__ssvfiscanf_r+0x4e>
 801ea0a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ea0c:	4621      	mov	r1, r4
 801ea0e:	4630      	mov	r0, r6
 801ea10:	4798      	blx	r3
 801ea12:	2800      	cmp	r0, #0
 801ea14:	d0bb      	beq.n	801e98e <__ssvfiscanf_r+0x1ea>
 801ea16:	e79d      	b.n	801e954 <__ssvfiscanf_r+0x1b0>
 801ea18:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801ea1a:	3201      	adds	r2, #1
 801ea1c:	9245      	str	r2, [sp, #276]	; 0x114
 801ea1e:	6862      	ldr	r2, [r4, #4]
 801ea20:	3a01      	subs	r2, #1
 801ea22:	2a00      	cmp	r2, #0
 801ea24:	6062      	str	r2, [r4, #4]
 801ea26:	dd02      	ble.n	801ea2e <__ssvfiscanf_r+0x28a>
 801ea28:	3301      	adds	r3, #1
 801ea2a:	6023      	str	r3, [r4, #0]
 801ea2c:	e7b2      	b.n	801e994 <__ssvfiscanf_r+0x1f0>
 801ea2e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ea30:	4621      	mov	r1, r4
 801ea32:	4630      	mov	r0, r6
 801ea34:	4798      	blx	r3
 801ea36:	2800      	cmp	r0, #0
 801ea38:	d0ac      	beq.n	801e994 <__ssvfiscanf_r+0x1f0>
 801ea3a:	e78b      	b.n	801e954 <__ssvfiscanf_r+0x1b0>
 801ea3c:	2b04      	cmp	r3, #4
 801ea3e:	dc0f      	bgt.n	801ea60 <__ssvfiscanf_r+0x2bc>
 801ea40:	466b      	mov	r3, sp
 801ea42:	4622      	mov	r2, r4
 801ea44:	a941      	add	r1, sp, #260	; 0x104
 801ea46:	4630      	mov	r0, r6
 801ea48:	f000 f87e 	bl	801eb48 <_scanf_i>
 801ea4c:	e7b0      	b.n	801e9b0 <__ssvfiscanf_r+0x20c>
 801ea4e:	bf00      	nop
 801ea50:	0801e6f1 	.word	0x0801e6f1
 801ea54:	0801e76b 	.word	0x0801e76b
 801ea58:	08020849 	.word	0x08020849
 801ea5c:	0802094f 	.word	0x0802094f
 801ea60:	4b0b      	ldr	r3, [pc, #44]	; (801ea90 <__ssvfiscanf_r+0x2ec>)
 801ea62:	2b00      	cmp	r3, #0
 801ea64:	f43f aec5 	beq.w	801e7f2 <__ssvfiscanf_r+0x4e>
 801ea68:	466b      	mov	r3, sp
 801ea6a:	4622      	mov	r2, r4
 801ea6c:	a941      	add	r1, sp, #260	; 0x104
 801ea6e:	4630      	mov	r0, r6
 801ea70:	f7fc fefc 	bl	801b86c <_scanf_float>
 801ea74:	e79c      	b.n	801e9b0 <__ssvfiscanf_r+0x20c>
 801ea76:	89a3      	ldrh	r3, [r4, #12]
 801ea78:	f013 0f40 	tst.w	r3, #64	; 0x40
 801ea7c:	bf18      	it	ne
 801ea7e:	f04f 30ff 	movne.w	r0, #4294967295
 801ea82:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801ea86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ea8a:	9844      	ldr	r0, [sp, #272]	; 0x110
 801ea8c:	e7f9      	b.n	801ea82 <__ssvfiscanf_r+0x2de>
 801ea8e:	bf00      	nop
 801ea90:	0801b86d 	.word	0x0801b86d

0801ea94 <_scanf_chars>:
 801ea94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ea98:	4615      	mov	r5, r2
 801ea9a:	688a      	ldr	r2, [r1, #8]
 801ea9c:	4680      	mov	r8, r0
 801ea9e:	460c      	mov	r4, r1
 801eaa0:	b932      	cbnz	r2, 801eab0 <_scanf_chars+0x1c>
 801eaa2:	698a      	ldr	r2, [r1, #24]
 801eaa4:	2a00      	cmp	r2, #0
 801eaa6:	bf0c      	ite	eq
 801eaa8:	2201      	moveq	r2, #1
 801eaaa:	f04f 32ff 	movne.w	r2, #4294967295
 801eaae:	608a      	str	r2, [r1, #8]
 801eab0:	6822      	ldr	r2, [r4, #0]
 801eab2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801eb44 <_scanf_chars+0xb0>
 801eab6:	06d1      	lsls	r1, r2, #27
 801eab8:	bf5f      	itttt	pl
 801eaba:	681a      	ldrpl	r2, [r3, #0]
 801eabc:	1d11      	addpl	r1, r2, #4
 801eabe:	6019      	strpl	r1, [r3, #0]
 801eac0:	6816      	ldrpl	r6, [r2, #0]
 801eac2:	2700      	movs	r7, #0
 801eac4:	69a0      	ldr	r0, [r4, #24]
 801eac6:	b188      	cbz	r0, 801eaec <_scanf_chars+0x58>
 801eac8:	2801      	cmp	r0, #1
 801eaca:	d107      	bne.n	801eadc <_scanf_chars+0x48>
 801eacc:	682a      	ldr	r2, [r5, #0]
 801eace:	7811      	ldrb	r1, [r2, #0]
 801ead0:	6962      	ldr	r2, [r4, #20]
 801ead2:	5c52      	ldrb	r2, [r2, r1]
 801ead4:	b952      	cbnz	r2, 801eaec <_scanf_chars+0x58>
 801ead6:	2f00      	cmp	r7, #0
 801ead8:	d031      	beq.n	801eb3e <_scanf_chars+0xaa>
 801eada:	e022      	b.n	801eb22 <_scanf_chars+0x8e>
 801eadc:	2802      	cmp	r0, #2
 801eade:	d120      	bne.n	801eb22 <_scanf_chars+0x8e>
 801eae0:	682b      	ldr	r3, [r5, #0]
 801eae2:	781b      	ldrb	r3, [r3, #0]
 801eae4:	f819 3003 	ldrb.w	r3, [r9, r3]
 801eae8:	071b      	lsls	r3, r3, #28
 801eaea:	d41a      	bmi.n	801eb22 <_scanf_chars+0x8e>
 801eaec:	6823      	ldr	r3, [r4, #0]
 801eaee:	06da      	lsls	r2, r3, #27
 801eaf0:	bf5e      	ittt	pl
 801eaf2:	682b      	ldrpl	r3, [r5, #0]
 801eaf4:	781b      	ldrbpl	r3, [r3, #0]
 801eaf6:	f806 3b01 	strbpl.w	r3, [r6], #1
 801eafa:	682a      	ldr	r2, [r5, #0]
 801eafc:	686b      	ldr	r3, [r5, #4]
 801eafe:	3201      	adds	r2, #1
 801eb00:	602a      	str	r2, [r5, #0]
 801eb02:	68a2      	ldr	r2, [r4, #8]
 801eb04:	3b01      	subs	r3, #1
 801eb06:	3a01      	subs	r2, #1
 801eb08:	606b      	str	r3, [r5, #4]
 801eb0a:	3701      	adds	r7, #1
 801eb0c:	60a2      	str	r2, [r4, #8]
 801eb0e:	b142      	cbz	r2, 801eb22 <_scanf_chars+0x8e>
 801eb10:	2b00      	cmp	r3, #0
 801eb12:	dcd7      	bgt.n	801eac4 <_scanf_chars+0x30>
 801eb14:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801eb18:	4629      	mov	r1, r5
 801eb1a:	4640      	mov	r0, r8
 801eb1c:	4798      	blx	r3
 801eb1e:	2800      	cmp	r0, #0
 801eb20:	d0d0      	beq.n	801eac4 <_scanf_chars+0x30>
 801eb22:	6823      	ldr	r3, [r4, #0]
 801eb24:	f013 0310 	ands.w	r3, r3, #16
 801eb28:	d105      	bne.n	801eb36 <_scanf_chars+0xa2>
 801eb2a:	68e2      	ldr	r2, [r4, #12]
 801eb2c:	3201      	adds	r2, #1
 801eb2e:	60e2      	str	r2, [r4, #12]
 801eb30:	69a2      	ldr	r2, [r4, #24]
 801eb32:	b102      	cbz	r2, 801eb36 <_scanf_chars+0xa2>
 801eb34:	7033      	strb	r3, [r6, #0]
 801eb36:	6923      	ldr	r3, [r4, #16]
 801eb38:	443b      	add	r3, r7
 801eb3a:	6123      	str	r3, [r4, #16]
 801eb3c:	2000      	movs	r0, #0
 801eb3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eb42:	bf00      	nop
 801eb44:	08020849 	.word	0x08020849

0801eb48 <_scanf_i>:
 801eb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb4c:	4698      	mov	r8, r3
 801eb4e:	4b74      	ldr	r3, [pc, #464]	; (801ed20 <_scanf_i+0x1d8>)
 801eb50:	460c      	mov	r4, r1
 801eb52:	4682      	mov	sl, r0
 801eb54:	4616      	mov	r6, r2
 801eb56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801eb5a:	b087      	sub	sp, #28
 801eb5c:	ab03      	add	r3, sp, #12
 801eb5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801eb62:	4b70      	ldr	r3, [pc, #448]	; (801ed24 <_scanf_i+0x1dc>)
 801eb64:	69a1      	ldr	r1, [r4, #24]
 801eb66:	4a70      	ldr	r2, [pc, #448]	; (801ed28 <_scanf_i+0x1e0>)
 801eb68:	2903      	cmp	r1, #3
 801eb6a:	bf18      	it	ne
 801eb6c:	461a      	movne	r2, r3
 801eb6e:	68a3      	ldr	r3, [r4, #8]
 801eb70:	9201      	str	r2, [sp, #4]
 801eb72:	1e5a      	subs	r2, r3, #1
 801eb74:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801eb78:	bf88      	it	hi
 801eb7a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801eb7e:	4627      	mov	r7, r4
 801eb80:	bf82      	ittt	hi
 801eb82:	eb03 0905 	addhi.w	r9, r3, r5
 801eb86:	f240 135d 	movwhi	r3, #349	; 0x15d
 801eb8a:	60a3      	strhi	r3, [r4, #8]
 801eb8c:	f857 3b1c 	ldr.w	r3, [r7], #28
 801eb90:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801eb94:	bf98      	it	ls
 801eb96:	f04f 0900 	movls.w	r9, #0
 801eb9a:	6023      	str	r3, [r4, #0]
 801eb9c:	463d      	mov	r5, r7
 801eb9e:	f04f 0b00 	mov.w	fp, #0
 801eba2:	6831      	ldr	r1, [r6, #0]
 801eba4:	ab03      	add	r3, sp, #12
 801eba6:	7809      	ldrb	r1, [r1, #0]
 801eba8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801ebac:	2202      	movs	r2, #2
 801ebae:	f7e1 fbbf 	bl	8000330 <memchr>
 801ebb2:	b328      	cbz	r0, 801ec00 <_scanf_i+0xb8>
 801ebb4:	f1bb 0f01 	cmp.w	fp, #1
 801ebb8:	d159      	bne.n	801ec6e <_scanf_i+0x126>
 801ebba:	6862      	ldr	r2, [r4, #4]
 801ebbc:	b92a      	cbnz	r2, 801ebca <_scanf_i+0x82>
 801ebbe:	6822      	ldr	r2, [r4, #0]
 801ebc0:	2308      	movs	r3, #8
 801ebc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ebc6:	6063      	str	r3, [r4, #4]
 801ebc8:	6022      	str	r2, [r4, #0]
 801ebca:	6822      	ldr	r2, [r4, #0]
 801ebcc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801ebd0:	6022      	str	r2, [r4, #0]
 801ebd2:	68a2      	ldr	r2, [r4, #8]
 801ebd4:	1e51      	subs	r1, r2, #1
 801ebd6:	60a1      	str	r1, [r4, #8]
 801ebd8:	b192      	cbz	r2, 801ec00 <_scanf_i+0xb8>
 801ebda:	6832      	ldr	r2, [r6, #0]
 801ebdc:	1c51      	adds	r1, r2, #1
 801ebde:	6031      	str	r1, [r6, #0]
 801ebe0:	7812      	ldrb	r2, [r2, #0]
 801ebe2:	f805 2b01 	strb.w	r2, [r5], #1
 801ebe6:	6872      	ldr	r2, [r6, #4]
 801ebe8:	3a01      	subs	r2, #1
 801ebea:	2a00      	cmp	r2, #0
 801ebec:	6072      	str	r2, [r6, #4]
 801ebee:	dc07      	bgt.n	801ec00 <_scanf_i+0xb8>
 801ebf0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801ebf4:	4631      	mov	r1, r6
 801ebf6:	4650      	mov	r0, sl
 801ebf8:	4790      	blx	r2
 801ebfa:	2800      	cmp	r0, #0
 801ebfc:	f040 8085 	bne.w	801ed0a <_scanf_i+0x1c2>
 801ec00:	f10b 0b01 	add.w	fp, fp, #1
 801ec04:	f1bb 0f03 	cmp.w	fp, #3
 801ec08:	d1cb      	bne.n	801eba2 <_scanf_i+0x5a>
 801ec0a:	6863      	ldr	r3, [r4, #4]
 801ec0c:	b90b      	cbnz	r3, 801ec12 <_scanf_i+0xca>
 801ec0e:	230a      	movs	r3, #10
 801ec10:	6063      	str	r3, [r4, #4]
 801ec12:	6863      	ldr	r3, [r4, #4]
 801ec14:	4945      	ldr	r1, [pc, #276]	; (801ed2c <_scanf_i+0x1e4>)
 801ec16:	6960      	ldr	r0, [r4, #20]
 801ec18:	1ac9      	subs	r1, r1, r3
 801ec1a:	f000 f937 	bl	801ee8c <__sccl>
 801ec1e:	f04f 0b00 	mov.w	fp, #0
 801ec22:	68a3      	ldr	r3, [r4, #8]
 801ec24:	6822      	ldr	r2, [r4, #0]
 801ec26:	2b00      	cmp	r3, #0
 801ec28:	d03d      	beq.n	801eca6 <_scanf_i+0x15e>
 801ec2a:	6831      	ldr	r1, [r6, #0]
 801ec2c:	6960      	ldr	r0, [r4, #20]
 801ec2e:	f891 c000 	ldrb.w	ip, [r1]
 801ec32:	f810 000c 	ldrb.w	r0, [r0, ip]
 801ec36:	2800      	cmp	r0, #0
 801ec38:	d035      	beq.n	801eca6 <_scanf_i+0x15e>
 801ec3a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801ec3e:	d124      	bne.n	801ec8a <_scanf_i+0x142>
 801ec40:	0510      	lsls	r0, r2, #20
 801ec42:	d522      	bpl.n	801ec8a <_scanf_i+0x142>
 801ec44:	f10b 0b01 	add.w	fp, fp, #1
 801ec48:	f1b9 0f00 	cmp.w	r9, #0
 801ec4c:	d003      	beq.n	801ec56 <_scanf_i+0x10e>
 801ec4e:	3301      	adds	r3, #1
 801ec50:	f109 39ff 	add.w	r9, r9, #4294967295
 801ec54:	60a3      	str	r3, [r4, #8]
 801ec56:	6873      	ldr	r3, [r6, #4]
 801ec58:	3b01      	subs	r3, #1
 801ec5a:	2b00      	cmp	r3, #0
 801ec5c:	6073      	str	r3, [r6, #4]
 801ec5e:	dd1b      	ble.n	801ec98 <_scanf_i+0x150>
 801ec60:	6833      	ldr	r3, [r6, #0]
 801ec62:	3301      	adds	r3, #1
 801ec64:	6033      	str	r3, [r6, #0]
 801ec66:	68a3      	ldr	r3, [r4, #8]
 801ec68:	3b01      	subs	r3, #1
 801ec6a:	60a3      	str	r3, [r4, #8]
 801ec6c:	e7d9      	b.n	801ec22 <_scanf_i+0xda>
 801ec6e:	f1bb 0f02 	cmp.w	fp, #2
 801ec72:	d1ae      	bne.n	801ebd2 <_scanf_i+0x8a>
 801ec74:	6822      	ldr	r2, [r4, #0]
 801ec76:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801ec7a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801ec7e:	d1bf      	bne.n	801ec00 <_scanf_i+0xb8>
 801ec80:	2310      	movs	r3, #16
 801ec82:	6063      	str	r3, [r4, #4]
 801ec84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801ec88:	e7a2      	b.n	801ebd0 <_scanf_i+0x88>
 801ec8a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801ec8e:	6022      	str	r2, [r4, #0]
 801ec90:	780b      	ldrb	r3, [r1, #0]
 801ec92:	f805 3b01 	strb.w	r3, [r5], #1
 801ec96:	e7de      	b.n	801ec56 <_scanf_i+0x10e>
 801ec98:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801ec9c:	4631      	mov	r1, r6
 801ec9e:	4650      	mov	r0, sl
 801eca0:	4798      	blx	r3
 801eca2:	2800      	cmp	r0, #0
 801eca4:	d0df      	beq.n	801ec66 <_scanf_i+0x11e>
 801eca6:	6823      	ldr	r3, [r4, #0]
 801eca8:	05d9      	lsls	r1, r3, #23
 801ecaa:	d50d      	bpl.n	801ecc8 <_scanf_i+0x180>
 801ecac:	42bd      	cmp	r5, r7
 801ecae:	d909      	bls.n	801ecc4 <_scanf_i+0x17c>
 801ecb0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801ecb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ecb8:	4632      	mov	r2, r6
 801ecba:	4650      	mov	r0, sl
 801ecbc:	4798      	blx	r3
 801ecbe:	f105 39ff 	add.w	r9, r5, #4294967295
 801ecc2:	464d      	mov	r5, r9
 801ecc4:	42bd      	cmp	r5, r7
 801ecc6:	d028      	beq.n	801ed1a <_scanf_i+0x1d2>
 801ecc8:	6822      	ldr	r2, [r4, #0]
 801ecca:	f012 0210 	ands.w	r2, r2, #16
 801ecce:	d113      	bne.n	801ecf8 <_scanf_i+0x1b0>
 801ecd0:	702a      	strb	r2, [r5, #0]
 801ecd2:	6863      	ldr	r3, [r4, #4]
 801ecd4:	9e01      	ldr	r6, [sp, #4]
 801ecd6:	4639      	mov	r1, r7
 801ecd8:	4650      	mov	r0, sl
 801ecda:	47b0      	blx	r6
 801ecdc:	f8d8 3000 	ldr.w	r3, [r8]
 801ece0:	6821      	ldr	r1, [r4, #0]
 801ece2:	1d1a      	adds	r2, r3, #4
 801ece4:	f8c8 2000 	str.w	r2, [r8]
 801ece8:	f011 0f20 	tst.w	r1, #32
 801ecec:	681b      	ldr	r3, [r3, #0]
 801ecee:	d00f      	beq.n	801ed10 <_scanf_i+0x1c8>
 801ecf0:	6018      	str	r0, [r3, #0]
 801ecf2:	68e3      	ldr	r3, [r4, #12]
 801ecf4:	3301      	adds	r3, #1
 801ecf6:	60e3      	str	r3, [r4, #12]
 801ecf8:	6923      	ldr	r3, [r4, #16]
 801ecfa:	1bed      	subs	r5, r5, r7
 801ecfc:	445d      	add	r5, fp
 801ecfe:	442b      	add	r3, r5
 801ed00:	6123      	str	r3, [r4, #16]
 801ed02:	2000      	movs	r0, #0
 801ed04:	b007      	add	sp, #28
 801ed06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed0a:	f04f 0b00 	mov.w	fp, #0
 801ed0e:	e7ca      	b.n	801eca6 <_scanf_i+0x15e>
 801ed10:	07ca      	lsls	r2, r1, #31
 801ed12:	bf4c      	ite	mi
 801ed14:	8018      	strhmi	r0, [r3, #0]
 801ed16:	6018      	strpl	r0, [r3, #0]
 801ed18:	e7eb      	b.n	801ecf2 <_scanf_i+0x1aa>
 801ed1a:	2001      	movs	r0, #1
 801ed1c:	e7f2      	b.n	801ed04 <_scanf_i+0x1bc>
 801ed1e:	bf00      	nop
 801ed20:	080200c4 	.word	0x080200c4
 801ed24:	0801f87d 	.word	0x0801f87d
 801ed28:	0801e43d 	.word	0x0801e43d
 801ed2c:	0802096a 	.word	0x0802096a

0801ed30 <__sflush_r>:
 801ed30:	898a      	ldrh	r2, [r1, #12]
 801ed32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ed36:	4605      	mov	r5, r0
 801ed38:	0710      	lsls	r0, r2, #28
 801ed3a:	460c      	mov	r4, r1
 801ed3c:	d458      	bmi.n	801edf0 <__sflush_r+0xc0>
 801ed3e:	684b      	ldr	r3, [r1, #4]
 801ed40:	2b00      	cmp	r3, #0
 801ed42:	dc05      	bgt.n	801ed50 <__sflush_r+0x20>
 801ed44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ed46:	2b00      	cmp	r3, #0
 801ed48:	dc02      	bgt.n	801ed50 <__sflush_r+0x20>
 801ed4a:	2000      	movs	r0, #0
 801ed4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ed52:	2e00      	cmp	r6, #0
 801ed54:	d0f9      	beq.n	801ed4a <__sflush_r+0x1a>
 801ed56:	2300      	movs	r3, #0
 801ed58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ed5c:	682f      	ldr	r7, [r5, #0]
 801ed5e:	6a21      	ldr	r1, [r4, #32]
 801ed60:	602b      	str	r3, [r5, #0]
 801ed62:	d032      	beq.n	801edca <__sflush_r+0x9a>
 801ed64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ed66:	89a3      	ldrh	r3, [r4, #12]
 801ed68:	075a      	lsls	r2, r3, #29
 801ed6a:	d505      	bpl.n	801ed78 <__sflush_r+0x48>
 801ed6c:	6863      	ldr	r3, [r4, #4]
 801ed6e:	1ac0      	subs	r0, r0, r3
 801ed70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ed72:	b10b      	cbz	r3, 801ed78 <__sflush_r+0x48>
 801ed74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ed76:	1ac0      	subs	r0, r0, r3
 801ed78:	2300      	movs	r3, #0
 801ed7a:	4602      	mov	r2, r0
 801ed7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ed7e:	6a21      	ldr	r1, [r4, #32]
 801ed80:	4628      	mov	r0, r5
 801ed82:	47b0      	blx	r6
 801ed84:	1c43      	adds	r3, r0, #1
 801ed86:	89a3      	ldrh	r3, [r4, #12]
 801ed88:	d106      	bne.n	801ed98 <__sflush_r+0x68>
 801ed8a:	6829      	ldr	r1, [r5, #0]
 801ed8c:	291d      	cmp	r1, #29
 801ed8e:	d82b      	bhi.n	801ede8 <__sflush_r+0xb8>
 801ed90:	4a29      	ldr	r2, [pc, #164]	; (801ee38 <__sflush_r+0x108>)
 801ed92:	410a      	asrs	r2, r1
 801ed94:	07d6      	lsls	r6, r2, #31
 801ed96:	d427      	bmi.n	801ede8 <__sflush_r+0xb8>
 801ed98:	2200      	movs	r2, #0
 801ed9a:	6062      	str	r2, [r4, #4]
 801ed9c:	04d9      	lsls	r1, r3, #19
 801ed9e:	6922      	ldr	r2, [r4, #16]
 801eda0:	6022      	str	r2, [r4, #0]
 801eda2:	d504      	bpl.n	801edae <__sflush_r+0x7e>
 801eda4:	1c42      	adds	r2, r0, #1
 801eda6:	d101      	bne.n	801edac <__sflush_r+0x7c>
 801eda8:	682b      	ldr	r3, [r5, #0]
 801edaa:	b903      	cbnz	r3, 801edae <__sflush_r+0x7e>
 801edac:	6560      	str	r0, [r4, #84]	; 0x54
 801edae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801edb0:	602f      	str	r7, [r5, #0]
 801edb2:	2900      	cmp	r1, #0
 801edb4:	d0c9      	beq.n	801ed4a <__sflush_r+0x1a>
 801edb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801edba:	4299      	cmp	r1, r3
 801edbc:	d002      	beq.n	801edc4 <__sflush_r+0x94>
 801edbe:	4628      	mov	r0, r5
 801edc0:	f7fd ff3e 	bl	801cc40 <_free_r>
 801edc4:	2000      	movs	r0, #0
 801edc6:	6360      	str	r0, [r4, #52]	; 0x34
 801edc8:	e7c0      	b.n	801ed4c <__sflush_r+0x1c>
 801edca:	2301      	movs	r3, #1
 801edcc:	4628      	mov	r0, r5
 801edce:	47b0      	blx	r6
 801edd0:	1c41      	adds	r1, r0, #1
 801edd2:	d1c8      	bne.n	801ed66 <__sflush_r+0x36>
 801edd4:	682b      	ldr	r3, [r5, #0]
 801edd6:	2b00      	cmp	r3, #0
 801edd8:	d0c5      	beq.n	801ed66 <__sflush_r+0x36>
 801edda:	2b1d      	cmp	r3, #29
 801eddc:	d001      	beq.n	801ede2 <__sflush_r+0xb2>
 801edde:	2b16      	cmp	r3, #22
 801ede0:	d101      	bne.n	801ede6 <__sflush_r+0xb6>
 801ede2:	602f      	str	r7, [r5, #0]
 801ede4:	e7b1      	b.n	801ed4a <__sflush_r+0x1a>
 801ede6:	89a3      	ldrh	r3, [r4, #12]
 801ede8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801edec:	81a3      	strh	r3, [r4, #12]
 801edee:	e7ad      	b.n	801ed4c <__sflush_r+0x1c>
 801edf0:	690f      	ldr	r7, [r1, #16]
 801edf2:	2f00      	cmp	r7, #0
 801edf4:	d0a9      	beq.n	801ed4a <__sflush_r+0x1a>
 801edf6:	0793      	lsls	r3, r2, #30
 801edf8:	680e      	ldr	r6, [r1, #0]
 801edfa:	bf08      	it	eq
 801edfc:	694b      	ldreq	r3, [r1, #20]
 801edfe:	600f      	str	r7, [r1, #0]
 801ee00:	bf18      	it	ne
 801ee02:	2300      	movne	r3, #0
 801ee04:	eba6 0807 	sub.w	r8, r6, r7
 801ee08:	608b      	str	r3, [r1, #8]
 801ee0a:	f1b8 0f00 	cmp.w	r8, #0
 801ee0e:	dd9c      	ble.n	801ed4a <__sflush_r+0x1a>
 801ee10:	6a21      	ldr	r1, [r4, #32]
 801ee12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ee14:	4643      	mov	r3, r8
 801ee16:	463a      	mov	r2, r7
 801ee18:	4628      	mov	r0, r5
 801ee1a:	47b0      	blx	r6
 801ee1c:	2800      	cmp	r0, #0
 801ee1e:	dc06      	bgt.n	801ee2e <__sflush_r+0xfe>
 801ee20:	89a3      	ldrh	r3, [r4, #12]
 801ee22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ee26:	81a3      	strh	r3, [r4, #12]
 801ee28:	f04f 30ff 	mov.w	r0, #4294967295
 801ee2c:	e78e      	b.n	801ed4c <__sflush_r+0x1c>
 801ee2e:	4407      	add	r7, r0
 801ee30:	eba8 0800 	sub.w	r8, r8, r0
 801ee34:	e7e9      	b.n	801ee0a <__sflush_r+0xda>
 801ee36:	bf00      	nop
 801ee38:	dfbffffe 	.word	0xdfbffffe

0801ee3c <_fflush_r>:
 801ee3c:	b538      	push	{r3, r4, r5, lr}
 801ee3e:	690b      	ldr	r3, [r1, #16]
 801ee40:	4605      	mov	r5, r0
 801ee42:	460c      	mov	r4, r1
 801ee44:	b913      	cbnz	r3, 801ee4c <_fflush_r+0x10>
 801ee46:	2500      	movs	r5, #0
 801ee48:	4628      	mov	r0, r5
 801ee4a:	bd38      	pop	{r3, r4, r5, pc}
 801ee4c:	b118      	cbz	r0, 801ee56 <_fflush_r+0x1a>
 801ee4e:	6a03      	ldr	r3, [r0, #32]
 801ee50:	b90b      	cbnz	r3, 801ee56 <_fflush_r+0x1a>
 801ee52:	f7fc ff9b 	bl	801bd8c <__sinit>
 801ee56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ee5a:	2b00      	cmp	r3, #0
 801ee5c:	d0f3      	beq.n	801ee46 <_fflush_r+0xa>
 801ee5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ee60:	07d0      	lsls	r0, r2, #31
 801ee62:	d404      	bmi.n	801ee6e <_fflush_r+0x32>
 801ee64:	0599      	lsls	r1, r3, #22
 801ee66:	d402      	bmi.n	801ee6e <_fflush_r+0x32>
 801ee68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ee6a:	f7fd f8d4 	bl	801c016 <__retarget_lock_acquire_recursive>
 801ee6e:	4628      	mov	r0, r5
 801ee70:	4621      	mov	r1, r4
 801ee72:	f7ff ff5d 	bl	801ed30 <__sflush_r>
 801ee76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ee78:	07da      	lsls	r2, r3, #31
 801ee7a:	4605      	mov	r5, r0
 801ee7c:	d4e4      	bmi.n	801ee48 <_fflush_r+0xc>
 801ee7e:	89a3      	ldrh	r3, [r4, #12]
 801ee80:	059b      	lsls	r3, r3, #22
 801ee82:	d4e1      	bmi.n	801ee48 <_fflush_r+0xc>
 801ee84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ee86:	f7fd f8c7 	bl	801c018 <__retarget_lock_release_recursive>
 801ee8a:	e7dd      	b.n	801ee48 <_fflush_r+0xc>

0801ee8c <__sccl>:
 801ee8c:	b570      	push	{r4, r5, r6, lr}
 801ee8e:	780b      	ldrb	r3, [r1, #0]
 801ee90:	4604      	mov	r4, r0
 801ee92:	2b5e      	cmp	r3, #94	; 0x5e
 801ee94:	bf0b      	itete	eq
 801ee96:	784b      	ldrbeq	r3, [r1, #1]
 801ee98:	1c4a      	addne	r2, r1, #1
 801ee9a:	1c8a      	addeq	r2, r1, #2
 801ee9c:	2100      	movne	r1, #0
 801ee9e:	bf08      	it	eq
 801eea0:	2101      	moveq	r1, #1
 801eea2:	3801      	subs	r0, #1
 801eea4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801eea8:	f800 1f01 	strb.w	r1, [r0, #1]!
 801eeac:	42a8      	cmp	r0, r5
 801eeae:	d1fb      	bne.n	801eea8 <__sccl+0x1c>
 801eeb0:	b90b      	cbnz	r3, 801eeb6 <__sccl+0x2a>
 801eeb2:	1e50      	subs	r0, r2, #1
 801eeb4:	bd70      	pop	{r4, r5, r6, pc}
 801eeb6:	f081 0101 	eor.w	r1, r1, #1
 801eeba:	54e1      	strb	r1, [r4, r3]
 801eebc:	4610      	mov	r0, r2
 801eebe:	4602      	mov	r2, r0
 801eec0:	f812 5b01 	ldrb.w	r5, [r2], #1
 801eec4:	2d2d      	cmp	r5, #45	; 0x2d
 801eec6:	d005      	beq.n	801eed4 <__sccl+0x48>
 801eec8:	2d5d      	cmp	r5, #93	; 0x5d
 801eeca:	d016      	beq.n	801eefa <__sccl+0x6e>
 801eecc:	2d00      	cmp	r5, #0
 801eece:	d0f1      	beq.n	801eeb4 <__sccl+0x28>
 801eed0:	462b      	mov	r3, r5
 801eed2:	e7f2      	b.n	801eeba <__sccl+0x2e>
 801eed4:	7846      	ldrb	r6, [r0, #1]
 801eed6:	2e5d      	cmp	r6, #93	; 0x5d
 801eed8:	d0fa      	beq.n	801eed0 <__sccl+0x44>
 801eeda:	42b3      	cmp	r3, r6
 801eedc:	dcf8      	bgt.n	801eed0 <__sccl+0x44>
 801eede:	3002      	adds	r0, #2
 801eee0:	461a      	mov	r2, r3
 801eee2:	3201      	adds	r2, #1
 801eee4:	4296      	cmp	r6, r2
 801eee6:	54a1      	strb	r1, [r4, r2]
 801eee8:	dcfb      	bgt.n	801eee2 <__sccl+0x56>
 801eeea:	1af2      	subs	r2, r6, r3
 801eeec:	3a01      	subs	r2, #1
 801eeee:	1c5d      	adds	r5, r3, #1
 801eef0:	42b3      	cmp	r3, r6
 801eef2:	bfa8      	it	ge
 801eef4:	2200      	movge	r2, #0
 801eef6:	18ab      	adds	r3, r5, r2
 801eef8:	e7e1      	b.n	801eebe <__sccl+0x32>
 801eefa:	4610      	mov	r0, r2
 801eefc:	e7da      	b.n	801eeb4 <__sccl+0x28>

0801eefe <__submore>:
 801eefe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ef02:	460c      	mov	r4, r1
 801ef04:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801ef06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ef0a:	4299      	cmp	r1, r3
 801ef0c:	d11d      	bne.n	801ef4a <__submore+0x4c>
 801ef0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ef12:	f7fd ff09 	bl	801cd28 <_malloc_r>
 801ef16:	b918      	cbnz	r0, 801ef20 <__submore+0x22>
 801ef18:	f04f 30ff 	mov.w	r0, #4294967295
 801ef1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ef20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ef24:	63a3      	str	r3, [r4, #56]	; 0x38
 801ef26:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801ef2a:	6360      	str	r0, [r4, #52]	; 0x34
 801ef2c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801ef30:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801ef34:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801ef38:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801ef3c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801ef40:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801ef44:	6020      	str	r0, [r4, #0]
 801ef46:	2000      	movs	r0, #0
 801ef48:	e7e8      	b.n	801ef1c <__submore+0x1e>
 801ef4a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801ef4c:	0077      	lsls	r7, r6, #1
 801ef4e:	463a      	mov	r2, r7
 801ef50:	f000 fbf3 	bl	801f73a <_realloc_r>
 801ef54:	4605      	mov	r5, r0
 801ef56:	2800      	cmp	r0, #0
 801ef58:	d0de      	beq.n	801ef18 <__submore+0x1a>
 801ef5a:	eb00 0806 	add.w	r8, r0, r6
 801ef5e:	4601      	mov	r1, r0
 801ef60:	4632      	mov	r2, r6
 801ef62:	4640      	mov	r0, r8
 801ef64:	f7fd f861 	bl	801c02a <memcpy>
 801ef68:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801ef6c:	f8c4 8000 	str.w	r8, [r4]
 801ef70:	e7e9      	b.n	801ef46 <__submore+0x48>

0801ef72 <memmove>:
 801ef72:	4288      	cmp	r0, r1
 801ef74:	b510      	push	{r4, lr}
 801ef76:	eb01 0402 	add.w	r4, r1, r2
 801ef7a:	d902      	bls.n	801ef82 <memmove+0x10>
 801ef7c:	4284      	cmp	r4, r0
 801ef7e:	4623      	mov	r3, r4
 801ef80:	d807      	bhi.n	801ef92 <memmove+0x20>
 801ef82:	1e43      	subs	r3, r0, #1
 801ef84:	42a1      	cmp	r1, r4
 801ef86:	d008      	beq.n	801ef9a <memmove+0x28>
 801ef88:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ef8c:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ef90:	e7f8      	b.n	801ef84 <memmove+0x12>
 801ef92:	4402      	add	r2, r0
 801ef94:	4601      	mov	r1, r0
 801ef96:	428a      	cmp	r2, r1
 801ef98:	d100      	bne.n	801ef9c <memmove+0x2a>
 801ef9a:	bd10      	pop	{r4, pc}
 801ef9c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801efa0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801efa4:	e7f7      	b.n	801ef96 <memmove+0x24>

0801efa6 <strncmp>:
 801efa6:	b510      	push	{r4, lr}
 801efa8:	b16a      	cbz	r2, 801efc6 <strncmp+0x20>
 801efaa:	3901      	subs	r1, #1
 801efac:	1884      	adds	r4, r0, r2
 801efae:	f810 2b01 	ldrb.w	r2, [r0], #1
 801efb2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801efb6:	429a      	cmp	r2, r3
 801efb8:	d103      	bne.n	801efc2 <strncmp+0x1c>
 801efba:	42a0      	cmp	r0, r4
 801efbc:	d001      	beq.n	801efc2 <strncmp+0x1c>
 801efbe:	2a00      	cmp	r2, #0
 801efc0:	d1f5      	bne.n	801efae <strncmp+0x8>
 801efc2:	1ad0      	subs	r0, r2, r3
 801efc4:	bd10      	pop	{r4, pc}
 801efc6:	4610      	mov	r0, r2
 801efc8:	e7fc      	b.n	801efc4 <strncmp+0x1e>
	...

0801efcc <_sbrk_r>:
 801efcc:	b538      	push	{r3, r4, r5, lr}
 801efce:	4d06      	ldr	r5, [pc, #24]	; (801efe8 <_sbrk_r+0x1c>)
 801efd0:	2300      	movs	r3, #0
 801efd2:	4604      	mov	r4, r0
 801efd4:	4608      	mov	r0, r1
 801efd6:	602b      	str	r3, [r5, #0]
 801efd8:	f7e4 fffe 	bl	8003fd8 <_sbrk>
 801efdc:	1c43      	adds	r3, r0, #1
 801efde:	d102      	bne.n	801efe6 <_sbrk_r+0x1a>
 801efe0:	682b      	ldr	r3, [r5, #0]
 801efe2:	b103      	cbz	r3, 801efe6 <_sbrk_r+0x1a>
 801efe4:	6023      	str	r3, [r4, #0]
 801efe6:	bd38      	pop	{r3, r4, r5, pc}
 801efe8:	24003620 	.word	0x24003620
 801efec:	00000000 	.word	0x00000000

0801eff0 <nan>:
 801eff0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801eff8 <nan+0x8>
 801eff4:	4770      	bx	lr
 801eff6:	bf00      	nop
 801eff8:	00000000 	.word	0x00000000
 801effc:	7ff80000 	.word	0x7ff80000

0801f000 <__assert_func>:
 801f000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f002:	4614      	mov	r4, r2
 801f004:	461a      	mov	r2, r3
 801f006:	4b09      	ldr	r3, [pc, #36]	; (801f02c <__assert_func+0x2c>)
 801f008:	681b      	ldr	r3, [r3, #0]
 801f00a:	4605      	mov	r5, r0
 801f00c:	68d8      	ldr	r0, [r3, #12]
 801f00e:	b14c      	cbz	r4, 801f024 <__assert_func+0x24>
 801f010:	4b07      	ldr	r3, [pc, #28]	; (801f030 <__assert_func+0x30>)
 801f012:	9100      	str	r1, [sp, #0]
 801f014:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f018:	4906      	ldr	r1, [pc, #24]	; (801f034 <__assert_func+0x34>)
 801f01a:	462b      	mov	r3, r5
 801f01c:	f000 fc3e 	bl	801f89c <fiprintf>
 801f020:	f000 fc4e 	bl	801f8c0 <abort>
 801f024:	4b04      	ldr	r3, [pc, #16]	; (801f038 <__assert_func+0x38>)
 801f026:	461c      	mov	r4, r3
 801f028:	e7f3      	b.n	801f012 <__assert_func+0x12>
 801f02a:	bf00      	nop
 801f02c:	24000158 	.word	0x24000158
 801f030:	0802097d 	.word	0x0802097d
 801f034:	0802098a 	.word	0x0802098a
 801f038:	080209b8 	.word	0x080209b8

0801f03c <_calloc_r>:
 801f03c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f03e:	fba1 2402 	umull	r2, r4, r1, r2
 801f042:	b94c      	cbnz	r4, 801f058 <_calloc_r+0x1c>
 801f044:	4611      	mov	r1, r2
 801f046:	9201      	str	r2, [sp, #4]
 801f048:	f7fd fe6e 	bl	801cd28 <_malloc_r>
 801f04c:	9a01      	ldr	r2, [sp, #4]
 801f04e:	4605      	mov	r5, r0
 801f050:	b930      	cbnz	r0, 801f060 <_calloc_r+0x24>
 801f052:	4628      	mov	r0, r5
 801f054:	b003      	add	sp, #12
 801f056:	bd30      	pop	{r4, r5, pc}
 801f058:	220c      	movs	r2, #12
 801f05a:	6002      	str	r2, [r0, #0]
 801f05c:	2500      	movs	r5, #0
 801f05e:	e7f8      	b.n	801f052 <_calloc_r+0x16>
 801f060:	4621      	mov	r1, r4
 801f062:	f7fc ff5a 	bl	801bf1a <memset>
 801f066:	e7f4      	b.n	801f052 <_calloc_r+0x16>

0801f068 <rshift>:
 801f068:	6903      	ldr	r3, [r0, #16]
 801f06a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801f06e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f072:	ea4f 1261 	mov.w	r2, r1, asr #5
 801f076:	f100 0414 	add.w	r4, r0, #20
 801f07a:	dd45      	ble.n	801f108 <rshift+0xa0>
 801f07c:	f011 011f 	ands.w	r1, r1, #31
 801f080:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801f084:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801f088:	d10c      	bne.n	801f0a4 <rshift+0x3c>
 801f08a:	f100 0710 	add.w	r7, r0, #16
 801f08e:	4629      	mov	r1, r5
 801f090:	42b1      	cmp	r1, r6
 801f092:	d334      	bcc.n	801f0fe <rshift+0x96>
 801f094:	1a9b      	subs	r3, r3, r2
 801f096:	009b      	lsls	r3, r3, #2
 801f098:	1eea      	subs	r2, r5, #3
 801f09a:	4296      	cmp	r6, r2
 801f09c:	bf38      	it	cc
 801f09e:	2300      	movcc	r3, #0
 801f0a0:	4423      	add	r3, r4
 801f0a2:	e015      	b.n	801f0d0 <rshift+0x68>
 801f0a4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801f0a8:	f1c1 0820 	rsb	r8, r1, #32
 801f0ac:	40cf      	lsrs	r7, r1
 801f0ae:	f105 0e04 	add.w	lr, r5, #4
 801f0b2:	46a1      	mov	r9, r4
 801f0b4:	4576      	cmp	r6, lr
 801f0b6:	46f4      	mov	ip, lr
 801f0b8:	d815      	bhi.n	801f0e6 <rshift+0x7e>
 801f0ba:	1a9a      	subs	r2, r3, r2
 801f0bc:	0092      	lsls	r2, r2, #2
 801f0be:	3a04      	subs	r2, #4
 801f0c0:	3501      	adds	r5, #1
 801f0c2:	42ae      	cmp	r6, r5
 801f0c4:	bf38      	it	cc
 801f0c6:	2200      	movcc	r2, #0
 801f0c8:	18a3      	adds	r3, r4, r2
 801f0ca:	50a7      	str	r7, [r4, r2]
 801f0cc:	b107      	cbz	r7, 801f0d0 <rshift+0x68>
 801f0ce:	3304      	adds	r3, #4
 801f0d0:	1b1a      	subs	r2, r3, r4
 801f0d2:	42a3      	cmp	r3, r4
 801f0d4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801f0d8:	bf08      	it	eq
 801f0da:	2300      	moveq	r3, #0
 801f0dc:	6102      	str	r2, [r0, #16]
 801f0de:	bf08      	it	eq
 801f0e0:	6143      	streq	r3, [r0, #20]
 801f0e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f0e6:	f8dc c000 	ldr.w	ip, [ip]
 801f0ea:	fa0c fc08 	lsl.w	ip, ip, r8
 801f0ee:	ea4c 0707 	orr.w	r7, ip, r7
 801f0f2:	f849 7b04 	str.w	r7, [r9], #4
 801f0f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 801f0fa:	40cf      	lsrs	r7, r1
 801f0fc:	e7da      	b.n	801f0b4 <rshift+0x4c>
 801f0fe:	f851 cb04 	ldr.w	ip, [r1], #4
 801f102:	f847 cf04 	str.w	ip, [r7, #4]!
 801f106:	e7c3      	b.n	801f090 <rshift+0x28>
 801f108:	4623      	mov	r3, r4
 801f10a:	e7e1      	b.n	801f0d0 <rshift+0x68>

0801f10c <__hexdig_fun>:
 801f10c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801f110:	2b09      	cmp	r3, #9
 801f112:	d802      	bhi.n	801f11a <__hexdig_fun+0xe>
 801f114:	3820      	subs	r0, #32
 801f116:	b2c0      	uxtb	r0, r0
 801f118:	4770      	bx	lr
 801f11a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801f11e:	2b05      	cmp	r3, #5
 801f120:	d801      	bhi.n	801f126 <__hexdig_fun+0x1a>
 801f122:	3847      	subs	r0, #71	; 0x47
 801f124:	e7f7      	b.n	801f116 <__hexdig_fun+0xa>
 801f126:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801f12a:	2b05      	cmp	r3, #5
 801f12c:	d801      	bhi.n	801f132 <__hexdig_fun+0x26>
 801f12e:	3827      	subs	r0, #39	; 0x27
 801f130:	e7f1      	b.n	801f116 <__hexdig_fun+0xa>
 801f132:	2000      	movs	r0, #0
 801f134:	4770      	bx	lr
	...

0801f138 <__gethex>:
 801f138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f13c:	4617      	mov	r7, r2
 801f13e:	680a      	ldr	r2, [r1, #0]
 801f140:	b085      	sub	sp, #20
 801f142:	f102 0b02 	add.w	fp, r2, #2
 801f146:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801f14a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801f14e:	4681      	mov	r9, r0
 801f150:	468a      	mov	sl, r1
 801f152:	9302      	str	r3, [sp, #8]
 801f154:	32fe      	adds	r2, #254	; 0xfe
 801f156:	eb02 030b 	add.w	r3, r2, fp
 801f15a:	46d8      	mov	r8, fp
 801f15c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801f160:	9301      	str	r3, [sp, #4]
 801f162:	2830      	cmp	r0, #48	; 0x30
 801f164:	d0f7      	beq.n	801f156 <__gethex+0x1e>
 801f166:	f7ff ffd1 	bl	801f10c <__hexdig_fun>
 801f16a:	4604      	mov	r4, r0
 801f16c:	2800      	cmp	r0, #0
 801f16e:	d138      	bne.n	801f1e2 <__gethex+0xaa>
 801f170:	49a7      	ldr	r1, [pc, #668]	; (801f410 <__gethex+0x2d8>)
 801f172:	2201      	movs	r2, #1
 801f174:	4640      	mov	r0, r8
 801f176:	f7ff ff16 	bl	801efa6 <strncmp>
 801f17a:	4606      	mov	r6, r0
 801f17c:	2800      	cmp	r0, #0
 801f17e:	d169      	bne.n	801f254 <__gethex+0x11c>
 801f180:	f898 0001 	ldrb.w	r0, [r8, #1]
 801f184:	465d      	mov	r5, fp
 801f186:	f7ff ffc1 	bl	801f10c <__hexdig_fun>
 801f18a:	2800      	cmp	r0, #0
 801f18c:	d064      	beq.n	801f258 <__gethex+0x120>
 801f18e:	465a      	mov	r2, fp
 801f190:	7810      	ldrb	r0, [r2, #0]
 801f192:	2830      	cmp	r0, #48	; 0x30
 801f194:	4690      	mov	r8, r2
 801f196:	f102 0201 	add.w	r2, r2, #1
 801f19a:	d0f9      	beq.n	801f190 <__gethex+0x58>
 801f19c:	f7ff ffb6 	bl	801f10c <__hexdig_fun>
 801f1a0:	2301      	movs	r3, #1
 801f1a2:	fab0 f480 	clz	r4, r0
 801f1a6:	0964      	lsrs	r4, r4, #5
 801f1a8:	465e      	mov	r6, fp
 801f1aa:	9301      	str	r3, [sp, #4]
 801f1ac:	4642      	mov	r2, r8
 801f1ae:	4615      	mov	r5, r2
 801f1b0:	3201      	adds	r2, #1
 801f1b2:	7828      	ldrb	r0, [r5, #0]
 801f1b4:	f7ff ffaa 	bl	801f10c <__hexdig_fun>
 801f1b8:	2800      	cmp	r0, #0
 801f1ba:	d1f8      	bne.n	801f1ae <__gethex+0x76>
 801f1bc:	4994      	ldr	r1, [pc, #592]	; (801f410 <__gethex+0x2d8>)
 801f1be:	2201      	movs	r2, #1
 801f1c0:	4628      	mov	r0, r5
 801f1c2:	f7ff fef0 	bl	801efa6 <strncmp>
 801f1c6:	b978      	cbnz	r0, 801f1e8 <__gethex+0xb0>
 801f1c8:	b946      	cbnz	r6, 801f1dc <__gethex+0xa4>
 801f1ca:	1c6e      	adds	r6, r5, #1
 801f1cc:	4632      	mov	r2, r6
 801f1ce:	4615      	mov	r5, r2
 801f1d0:	3201      	adds	r2, #1
 801f1d2:	7828      	ldrb	r0, [r5, #0]
 801f1d4:	f7ff ff9a 	bl	801f10c <__hexdig_fun>
 801f1d8:	2800      	cmp	r0, #0
 801f1da:	d1f8      	bne.n	801f1ce <__gethex+0x96>
 801f1dc:	1b73      	subs	r3, r6, r5
 801f1de:	009e      	lsls	r6, r3, #2
 801f1e0:	e004      	b.n	801f1ec <__gethex+0xb4>
 801f1e2:	2400      	movs	r4, #0
 801f1e4:	4626      	mov	r6, r4
 801f1e6:	e7e1      	b.n	801f1ac <__gethex+0x74>
 801f1e8:	2e00      	cmp	r6, #0
 801f1ea:	d1f7      	bne.n	801f1dc <__gethex+0xa4>
 801f1ec:	782b      	ldrb	r3, [r5, #0]
 801f1ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801f1f2:	2b50      	cmp	r3, #80	; 0x50
 801f1f4:	d13d      	bne.n	801f272 <__gethex+0x13a>
 801f1f6:	786b      	ldrb	r3, [r5, #1]
 801f1f8:	2b2b      	cmp	r3, #43	; 0x2b
 801f1fa:	d02f      	beq.n	801f25c <__gethex+0x124>
 801f1fc:	2b2d      	cmp	r3, #45	; 0x2d
 801f1fe:	d031      	beq.n	801f264 <__gethex+0x12c>
 801f200:	1c69      	adds	r1, r5, #1
 801f202:	f04f 0b00 	mov.w	fp, #0
 801f206:	7808      	ldrb	r0, [r1, #0]
 801f208:	f7ff ff80 	bl	801f10c <__hexdig_fun>
 801f20c:	1e42      	subs	r2, r0, #1
 801f20e:	b2d2      	uxtb	r2, r2
 801f210:	2a18      	cmp	r2, #24
 801f212:	d82e      	bhi.n	801f272 <__gethex+0x13a>
 801f214:	f1a0 0210 	sub.w	r2, r0, #16
 801f218:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801f21c:	f7ff ff76 	bl	801f10c <__hexdig_fun>
 801f220:	f100 3cff 	add.w	ip, r0, #4294967295
 801f224:	fa5f fc8c 	uxtb.w	ip, ip
 801f228:	f1bc 0f18 	cmp.w	ip, #24
 801f22c:	d91d      	bls.n	801f26a <__gethex+0x132>
 801f22e:	f1bb 0f00 	cmp.w	fp, #0
 801f232:	d000      	beq.n	801f236 <__gethex+0xfe>
 801f234:	4252      	negs	r2, r2
 801f236:	4416      	add	r6, r2
 801f238:	f8ca 1000 	str.w	r1, [sl]
 801f23c:	b1dc      	cbz	r4, 801f276 <__gethex+0x13e>
 801f23e:	9b01      	ldr	r3, [sp, #4]
 801f240:	2b00      	cmp	r3, #0
 801f242:	bf14      	ite	ne
 801f244:	f04f 0800 	movne.w	r8, #0
 801f248:	f04f 0806 	moveq.w	r8, #6
 801f24c:	4640      	mov	r0, r8
 801f24e:	b005      	add	sp, #20
 801f250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f254:	4645      	mov	r5, r8
 801f256:	4626      	mov	r6, r4
 801f258:	2401      	movs	r4, #1
 801f25a:	e7c7      	b.n	801f1ec <__gethex+0xb4>
 801f25c:	f04f 0b00 	mov.w	fp, #0
 801f260:	1ca9      	adds	r1, r5, #2
 801f262:	e7d0      	b.n	801f206 <__gethex+0xce>
 801f264:	f04f 0b01 	mov.w	fp, #1
 801f268:	e7fa      	b.n	801f260 <__gethex+0x128>
 801f26a:	230a      	movs	r3, #10
 801f26c:	fb03 0002 	mla	r0, r3, r2, r0
 801f270:	e7d0      	b.n	801f214 <__gethex+0xdc>
 801f272:	4629      	mov	r1, r5
 801f274:	e7e0      	b.n	801f238 <__gethex+0x100>
 801f276:	eba5 0308 	sub.w	r3, r5, r8
 801f27a:	3b01      	subs	r3, #1
 801f27c:	4621      	mov	r1, r4
 801f27e:	2b07      	cmp	r3, #7
 801f280:	dc0a      	bgt.n	801f298 <__gethex+0x160>
 801f282:	4648      	mov	r0, r9
 801f284:	f7fd fddc 	bl	801ce40 <_Balloc>
 801f288:	4604      	mov	r4, r0
 801f28a:	b940      	cbnz	r0, 801f29e <__gethex+0x166>
 801f28c:	4b61      	ldr	r3, [pc, #388]	; (801f414 <__gethex+0x2dc>)
 801f28e:	4602      	mov	r2, r0
 801f290:	21e4      	movs	r1, #228	; 0xe4
 801f292:	4861      	ldr	r0, [pc, #388]	; (801f418 <__gethex+0x2e0>)
 801f294:	f7ff feb4 	bl	801f000 <__assert_func>
 801f298:	3101      	adds	r1, #1
 801f29a:	105b      	asrs	r3, r3, #1
 801f29c:	e7ef      	b.n	801f27e <__gethex+0x146>
 801f29e:	f100 0a14 	add.w	sl, r0, #20
 801f2a2:	2300      	movs	r3, #0
 801f2a4:	495a      	ldr	r1, [pc, #360]	; (801f410 <__gethex+0x2d8>)
 801f2a6:	f8cd a004 	str.w	sl, [sp, #4]
 801f2aa:	469b      	mov	fp, r3
 801f2ac:	45a8      	cmp	r8, r5
 801f2ae:	d342      	bcc.n	801f336 <__gethex+0x1fe>
 801f2b0:	9801      	ldr	r0, [sp, #4]
 801f2b2:	f840 bb04 	str.w	fp, [r0], #4
 801f2b6:	eba0 000a 	sub.w	r0, r0, sl
 801f2ba:	1080      	asrs	r0, r0, #2
 801f2bc:	6120      	str	r0, [r4, #16]
 801f2be:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801f2c2:	4658      	mov	r0, fp
 801f2c4:	f7fd feae 	bl	801d024 <__hi0bits>
 801f2c8:	683d      	ldr	r5, [r7, #0]
 801f2ca:	eba8 0000 	sub.w	r0, r8, r0
 801f2ce:	42a8      	cmp	r0, r5
 801f2d0:	dd59      	ble.n	801f386 <__gethex+0x24e>
 801f2d2:	eba0 0805 	sub.w	r8, r0, r5
 801f2d6:	4641      	mov	r1, r8
 801f2d8:	4620      	mov	r0, r4
 801f2da:	f7fe fa3a 	bl	801d752 <__any_on>
 801f2de:	4683      	mov	fp, r0
 801f2e0:	b1b8      	cbz	r0, 801f312 <__gethex+0x1da>
 801f2e2:	f108 33ff 	add.w	r3, r8, #4294967295
 801f2e6:	1159      	asrs	r1, r3, #5
 801f2e8:	f003 021f 	and.w	r2, r3, #31
 801f2ec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801f2f0:	f04f 0b01 	mov.w	fp, #1
 801f2f4:	fa0b f202 	lsl.w	r2, fp, r2
 801f2f8:	420a      	tst	r2, r1
 801f2fa:	d00a      	beq.n	801f312 <__gethex+0x1da>
 801f2fc:	455b      	cmp	r3, fp
 801f2fe:	dd06      	ble.n	801f30e <__gethex+0x1d6>
 801f300:	f1a8 0102 	sub.w	r1, r8, #2
 801f304:	4620      	mov	r0, r4
 801f306:	f7fe fa24 	bl	801d752 <__any_on>
 801f30a:	2800      	cmp	r0, #0
 801f30c:	d138      	bne.n	801f380 <__gethex+0x248>
 801f30e:	f04f 0b02 	mov.w	fp, #2
 801f312:	4641      	mov	r1, r8
 801f314:	4620      	mov	r0, r4
 801f316:	f7ff fea7 	bl	801f068 <rshift>
 801f31a:	4446      	add	r6, r8
 801f31c:	68bb      	ldr	r3, [r7, #8]
 801f31e:	42b3      	cmp	r3, r6
 801f320:	da41      	bge.n	801f3a6 <__gethex+0x26e>
 801f322:	4621      	mov	r1, r4
 801f324:	4648      	mov	r0, r9
 801f326:	f7fd fdcb 	bl	801cec0 <_Bfree>
 801f32a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f32c:	2300      	movs	r3, #0
 801f32e:	6013      	str	r3, [r2, #0]
 801f330:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801f334:	e78a      	b.n	801f24c <__gethex+0x114>
 801f336:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801f33a:	2a2e      	cmp	r2, #46	; 0x2e
 801f33c:	d014      	beq.n	801f368 <__gethex+0x230>
 801f33e:	2b20      	cmp	r3, #32
 801f340:	d106      	bne.n	801f350 <__gethex+0x218>
 801f342:	9b01      	ldr	r3, [sp, #4]
 801f344:	f843 bb04 	str.w	fp, [r3], #4
 801f348:	f04f 0b00 	mov.w	fp, #0
 801f34c:	9301      	str	r3, [sp, #4]
 801f34e:	465b      	mov	r3, fp
 801f350:	7828      	ldrb	r0, [r5, #0]
 801f352:	9303      	str	r3, [sp, #12]
 801f354:	f7ff feda 	bl	801f10c <__hexdig_fun>
 801f358:	9b03      	ldr	r3, [sp, #12]
 801f35a:	f000 000f 	and.w	r0, r0, #15
 801f35e:	4098      	lsls	r0, r3
 801f360:	ea4b 0b00 	orr.w	fp, fp, r0
 801f364:	3304      	adds	r3, #4
 801f366:	e7a1      	b.n	801f2ac <__gethex+0x174>
 801f368:	45a8      	cmp	r8, r5
 801f36a:	d8e8      	bhi.n	801f33e <__gethex+0x206>
 801f36c:	2201      	movs	r2, #1
 801f36e:	4628      	mov	r0, r5
 801f370:	9303      	str	r3, [sp, #12]
 801f372:	f7ff fe18 	bl	801efa6 <strncmp>
 801f376:	4926      	ldr	r1, [pc, #152]	; (801f410 <__gethex+0x2d8>)
 801f378:	9b03      	ldr	r3, [sp, #12]
 801f37a:	2800      	cmp	r0, #0
 801f37c:	d1df      	bne.n	801f33e <__gethex+0x206>
 801f37e:	e795      	b.n	801f2ac <__gethex+0x174>
 801f380:	f04f 0b03 	mov.w	fp, #3
 801f384:	e7c5      	b.n	801f312 <__gethex+0x1da>
 801f386:	da0b      	bge.n	801f3a0 <__gethex+0x268>
 801f388:	eba5 0800 	sub.w	r8, r5, r0
 801f38c:	4621      	mov	r1, r4
 801f38e:	4642      	mov	r2, r8
 801f390:	4648      	mov	r0, r9
 801f392:	f7fd ffaf 	bl	801d2f4 <__lshift>
 801f396:	eba6 0608 	sub.w	r6, r6, r8
 801f39a:	4604      	mov	r4, r0
 801f39c:	f100 0a14 	add.w	sl, r0, #20
 801f3a0:	f04f 0b00 	mov.w	fp, #0
 801f3a4:	e7ba      	b.n	801f31c <__gethex+0x1e4>
 801f3a6:	687b      	ldr	r3, [r7, #4]
 801f3a8:	42b3      	cmp	r3, r6
 801f3aa:	dd73      	ble.n	801f494 <__gethex+0x35c>
 801f3ac:	1b9e      	subs	r6, r3, r6
 801f3ae:	42b5      	cmp	r5, r6
 801f3b0:	dc34      	bgt.n	801f41c <__gethex+0x2e4>
 801f3b2:	68fb      	ldr	r3, [r7, #12]
 801f3b4:	2b02      	cmp	r3, #2
 801f3b6:	d023      	beq.n	801f400 <__gethex+0x2c8>
 801f3b8:	2b03      	cmp	r3, #3
 801f3ba:	d025      	beq.n	801f408 <__gethex+0x2d0>
 801f3bc:	2b01      	cmp	r3, #1
 801f3be:	d115      	bne.n	801f3ec <__gethex+0x2b4>
 801f3c0:	42b5      	cmp	r5, r6
 801f3c2:	d113      	bne.n	801f3ec <__gethex+0x2b4>
 801f3c4:	2d01      	cmp	r5, #1
 801f3c6:	d10b      	bne.n	801f3e0 <__gethex+0x2a8>
 801f3c8:	9a02      	ldr	r2, [sp, #8]
 801f3ca:	687b      	ldr	r3, [r7, #4]
 801f3cc:	6013      	str	r3, [r2, #0]
 801f3ce:	2301      	movs	r3, #1
 801f3d0:	6123      	str	r3, [r4, #16]
 801f3d2:	f8ca 3000 	str.w	r3, [sl]
 801f3d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f3d8:	f04f 0862 	mov.w	r8, #98	; 0x62
 801f3dc:	601c      	str	r4, [r3, #0]
 801f3de:	e735      	b.n	801f24c <__gethex+0x114>
 801f3e0:	1e69      	subs	r1, r5, #1
 801f3e2:	4620      	mov	r0, r4
 801f3e4:	f7fe f9b5 	bl	801d752 <__any_on>
 801f3e8:	2800      	cmp	r0, #0
 801f3ea:	d1ed      	bne.n	801f3c8 <__gethex+0x290>
 801f3ec:	4621      	mov	r1, r4
 801f3ee:	4648      	mov	r0, r9
 801f3f0:	f7fd fd66 	bl	801cec0 <_Bfree>
 801f3f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f3f6:	2300      	movs	r3, #0
 801f3f8:	6013      	str	r3, [r2, #0]
 801f3fa:	f04f 0850 	mov.w	r8, #80	; 0x50
 801f3fe:	e725      	b.n	801f24c <__gethex+0x114>
 801f400:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f402:	2b00      	cmp	r3, #0
 801f404:	d1f2      	bne.n	801f3ec <__gethex+0x2b4>
 801f406:	e7df      	b.n	801f3c8 <__gethex+0x290>
 801f408:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f40a:	2b00      	cmp	r3, #0
 801f40c:	d1dc      	bne.n	801f3c8 <__gethex+0x290>
 801f40e:	e7ed      	b.n	801f3ec <__gethex+0x2b4>
 801f410:	080207f4 	.word	0x080207f4
 801f414:	08020687 	.word	0x08020687
 801f418:	080209b9 	.word	0x080209b9
 801f41c:	f106 38ff 	add.w	r8, r6, #4294967295
 801f420:	f1bb 0f00 	cmp.w	fp, #0
 801f424:	d133      	bne.n	801f48e <__gethex+0x356>
 801f426:	f1b8 0f00 	cmp.w	r8, #0
 801f42a:	d004      	beq.n	801f436 <__gethex+0x2fe>
 801f42c:	4641      	mov	r1, r8
 801f42e:	4620      	mov	r0, r4
 801f430:	f7fe f98f 	bl	801d752 <__any_on>
 801f434:	4683      	mov	fp, r0
 801f436:	ea4f 1268 	mov.w	r2, r8, asr #5
 801f43a:	2301      	movs	r3, #1
 801f43c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801f440:	f008 081f 	and.w	r8, r8, #31
 801f444:	fa03 f308 	lsl.w	r3, r3, r8
 801f448:	4213      	tst	r3, r2
 801f44a:	4631      	mov	r1, r6
 801f44c:	4620      	mov	r0, r4
 801f44e:	bf18      	it	ne
 801f450:	f04b 0b02 	orrne.w	fp, fp, #2
 801f454:	1bad      	subs	r5, r5, r6
 801f456:	f7ff fe07 	bl	801f068 <rshift>
 801f45a:	687e      	ldr	r6, [r7, #4]
 801f45c:	f04f 0802 	mov.w	r8, #2
 801f460:	f1bb 0f00 	cmp.w	fp, #0
 801f464:	d04a      	beq.n	801f4fc <__gethex+0x3c4>
 801f466:	68fb      	ldr	r3, [r7, #12]
 801f468:	2b02      	cmp	r3, #2
 801f46a:	d016      	beq.n	801f49a <__gethex+0x362>
 801f46c:	2b03      	cmp	r3, #3
 801f46e:	d018      	beq.n	801f4a2 <__gethex+0x36a>
 801f470:	2b01      	cmp	r3, #1
 801f472:	d109      	bne.n	801f488 <__gethex+0x350>
 801f474:	f01b 0f02 	tst.w	fp, #2
 801f478:	d006      	beq.n	801f488 <__gethex+0x350>
 801f47a:	f8da 3000 	ldr.w	r3, [sl]
 801f47e:	ea4b 0b03 	orr.w	fp, fp, r3
 801f482:	f01b 0f01 	tst.w	fp, #1
 801f486:	d10f      	bne.n	801f4a8 <__gethex+0x370>
 801f488:	f048 0810 	orr.w	r8, r8, #16
 801f48c:	e036      	b.n	801f4fc <__gethex+0x3c4>
 801f48e:	f04f 0b01 	mov.w	fp, #1
 801f492:	e7d0      	b.n	801f436 <__gethex+0x2fe>
 801f494:	f04f 0801 	mov.w	r8, #1
 801f498:	e7e2      	b.n	801f460 <__gethex+0x328>
 801f49a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f49c:	f1c3 0301 	rsb	r3, r3, #1
 801f4a0:	930f      	str	r3, [sp, #60]	; 0x3c
 801f4a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f4a4:	2b00      	cmp	r3, #0
 801f4a6:	d0ef      	beq.n	801f488 <__gethex+0x350>
 801f4a8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801f4ac:	f104 0214 	add.w	r2, r4, #20
 801f4b0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801f4b4:	9301      	str	r3, [sp, #4]
 801f4b6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801f4ba:	2300      	movs	r3, #0
 801f4bc:	4694      	mov	ip, r2
 801f4be:	f852 1b04 	ldr.w	r1, [r2], #4
 801f4c2:	f1b1 3fff 	cmp.w	r1, #4294967295
 801f4c6:	d01e      	beq.n	801f506 <__gethex+0x3ce>
 801f4c8:	3101      	adds	r1, #1
 801f4ca:	f8cc 1000 	str.w	r1, [ip]
 801f4ce:	f1b8 0f02 	cmp.w	r8, #2
 801f4d2:	f104 0214 	add.w	r2, r4, #20
 801f4d6:	d13d      	bne.n	801f554 <__gethex+0x41c>
 801f4d8:	683b      	ldr	r3, [r7, #0]
 801f4da:	3b01      	subs	r3, #1
 801f4dc:	42ab      	cmp	r3, r5
 801f4de:	d10b      	bne.n	801f4f8 <__gethex+0x3c0>
 801f4e0:	1169      	asrs	r1, r5, #5
 801f4e2:	2301      	movs	r3, #1
 801f4e4:	f005 051f 	and.w	r5, r5, #31
 801f4e8:	fa03 f505 	lsl.w	r5, r3, r5
 801f4ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f4f0:	421d      	tst	r5, r3
 801f4f2:	bf18      	it	ne
 801f4f4:	f04f 0801 	movne.w	r8, #1
 801f4f8:	f048 0820 	orr.w	r8, r8, #32
 801f4fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f4fe:	601c      	str	r4, [r3, #0]
 801f500:	9b02      	ldr	r3, [sp, #8]
 801f502:	601e      	str	r6, [r3, #0]
 801f504:	e6a2      	b.n	801f24c <__gethex+0x114>
 801f506:	4290      	cmp	r0, r2
 801f508:	f842 3c04 	str.w	r3, [r2, #-4]
 801f50c:	d8d6      	bhi.n	801f4bc <__gethex+0x384>
 801f50e:	68a2      	ldr	r2, [r4, #8]
 801f510:	4593      	cmp	fp, r2
 801f512:	db17      	blt.n	801f544 <__gethex+0x40c>
 801f514:	6861      	ldr	r1, [r4, #4]
 801f516:	4648      	mov	r0, r9
 801f518:	3101      	adds	r1, #1
 801f51a:	f7fd fc91 	bl	801ce40 <_Balloc>
 801f51e:	4682      	mov	sl, r0
 801f520:	b918      	cbnz	r0, 801f52a <__gethex+0x3f2>
 801f522:	4b1b      	ldr	r3, [pc, #108]	; (801f590 <__gethex+0x458>)
 801f524:	4602      	mov	r2, r0
 801f526:	2184      	movs	r1, #132	; 0x84
 801f528:	e6b3      	b.n	801f292 <__gethex+0x15a>
 801f52a:	6922      	ldr	r2, [r4, #16]
 801f52c:	3202      	adds	r2, #2
 801f52e:	f104 010c 	add.w	r1, r4, #12
 801f532:	0092      	lsls	r2, r2, #2
 801f534:	300c      	adds	r0, #12
 801f536:	f7fc fd78 	bl	801c02a <memcpy>
 801f53a:	4621      	mov	r1, r4
 801f53c:	4648      	mov	r0, r9
 801f53e:	f7fd fcbf 	bl	801cec0 <_Bfree>
 801f542:	4654      	mov	r4, sl
 801f544:	6922      	ldr	r2, [r4, #16]
 801f546:	1c51      	adds	r1, r2, #1
 801f548:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801f54c:	6121      	str	r1, [r4, #16]
 801f54e:	2101      	movs	r1, #1
 801f550:	6151      	str	r1, [r2, #20]
 801f552:	e7bc      	b.n	801f4ce <__gethex+0x396>
 801f554:	6921      	ldr	r1, [r4, #16]
 801f556:	4559      	cmp	r1, fp
 801f558:	dd0b      	ble.n	801f572 <__gethex+0x43a>
 801f55a:	2101      	movs	r1, #1
 801f55c:	4620      	mov	r0, r4
 801f55e:	f7ff fd83 	bl	801f068 <rshift>
 801f562:	68bb      	ldr	r3, [r7, #8]
 801f564:	3601      	adds	r6, #1
 801f566:	42b3      	cmp	r3, r6
 801f568:	f6ff aedb 	blt.w	801f322 <__gethex+0x1ea>
 801f56c:	f04f 0801 	mov.w	r8, #1
 801f570:	e7c2      	b.n	801f4f8 <__gethex+0x3c0>
 801f572:	f015 051f 	ands.w	r5, r5, #31
 801f576:	d0f9      	beq.n	801f56c <__gethex+0x434>
 801f578:	9b01      	ldr	r3, [sp, #4]
 801f57a:	441a      	add	r2, r3
 801f57c:	f1c5 0520 	rsb	r5, r5, #32
 801f580:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801f584:	f7fd fd4e 	bl	801d024 <__hi0bits>
 801f588:	42a8      	cmp	r0, r5
 801f58a:	dbe6      	blt.n	801f55a <__gethex+0x422>
 801f58c:	e7ee      	b.n	801f56c <__gethex+0x434>
 801f58e:	bf00      	nop
 801f590:	08020687 	.word	0x08020687

0801f594 <L_shift>:
 801f594:	f1c2 0208 	rsb	r2, r2, #8
 801f598:	0092      	lsls	r2, r2, #2
 801f59a:	b570      	push	{r4, r5, r6, lr}
 801f59c:	f1c2 0620 	rsb	r6, r2, #32
 801f5a0:	6843      	ldr	r3, [r0, #4]
 801f5a2:	6804      	ldr	r4, [r0, #0]
 801f5a4:	fa03 f506 	lsl.w	r5, r3, r6
 801f5a8:	432c      	orrs	r4, r5
 801f5aa:	40d3      	lsrs	r3, r2
 801f5ac:	6004      	str	r4, [r0, #0]
 801f5ae:	f840 3f04 	str.w	r3, [r0, #4]!
 801f5b2:	4288      	cmp	r0, r1
 801f5b4:	d3f4      	bcc.n	801f5a0 <L_shift+0xc>
 801f5b6:	bd70      	pop	{r4, r5, r6, pc}

0801f5b8 <__match>:
 801f5b8:	b530      	push	{r4, r5, lr}
 801f5ba:	6803      	ldr	r3, [r0, #0]
 801f5bc:	3301      	adds	r3, #1
 801f5be:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f5c2:	b914      	cbnz	r4, 801f5ca <__match+0x12>
 801f5c4:	6003      	str	r3, [r0, #0]
 801f5c6:	2001      	movs	r0, #1
 801f5c8:	bd30      	pop	{r4, r5, pc}
 801f5ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f5ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801f5d2:	2d19      	cmp	r5, #25
 801f5d4:	bf98      	it	ls
 801f5d6:	3220      	addls	r2, #32
 801f5d8:	42a2      	cmp	r2, r4
 801f5da:	d0f0      	beq.n	801f5be <__match+0x6>
 801f5dc:	2000      	movs	r0, #0
 801f5de:	e7f3      	b.n	801f5c8 <__match+0x10>

0801f5e0 <__hexnan>:
 801f5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5e4:	680b      	ldr	r3, [r1, #0]
 801f5e6:	6801      	ldr	r1, [r0, #0]
 801f5e8:	115e      	asrs	r6, r3, #5
 801f5ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801f5ee:	f013 031f 	ands.w	r3, r3, #31
 801f5f2:	b087      	sub	sp, #28
 801f5f4:	bf18      	it	ne
 801f5f6:	3604      	addne	r6, #4
 801f5f8:	2500      	movs	r5, #0
 801f5fa:	1f37      	subs	r7, r6, #4
 801f5fc:	4682      	mov	sl, r0
 801f5fe:	4690      	mov	r8, r2
 801f600:	9301      	str	r3, [sp, #4]
 801f602:	f846 5c04 	str.w	r5, [r6, #-4]
 801f606:	46b9      	mov	r9, r7
 801f608:	463c      	mov	r4, r7
 801f60a:	9502      	str	r5, [sp, #8]
 801f60c:	46ab      	mov	fp, r5
 801f60e:	784a      	ldrb	r2, [r1, #1]
 801f610:	1c4b      	adds	r3, r1, #1
 801f612:	9303      	str	r3, [sp, #12]
 801f614:	b342      	cbz	r2, 801f668 <__hexnan+0x88>
 801f616:	4610      	mov	r0, r2
 801f618:	9105      	str	r1, [sp, #20]
 801f61a:	9204      	str	r2, [sp, #16]
 801f61c:	f7ff fd76 	bl	801f10c <__hexdig_fun>
 801f620:	2800      	cmp	r0, #0
 801f622:	d14f      	bne.n	801f6c4 <__hexnan+0xe4>
 801f624:	9a04      	ldr	r2, [sp, #16]
 801f626:	9905      	ldr	r1, [sp, #20]
 801f628:	2a20      	cmp	r2, #32
 801f62a:	d818      	bhi.n	801f65e <__hexnan+0x7e>
 801f62c:	9b02      	ldr	r3, [sp, #8]
 801f62e:	459b      	cmp	fp, r3
 801f630:	dd13      	ble.n	801f65a <__hexnan+0x7a>
 801f632:	454c      	cmp	r4, r9
 801f634:	d206      	bcs.n	801f644 <__hexnan+0x64>
 801f636:	2d07      	cmp	r5, #7
 801f638:	dc04      	bgt.n	801f644 <__hexnan+0x64>
 801f63a:	462a      	mov	r2, r5
 801f63c:	4649      	mov	r1, r9
 801f63e:	4620      	mov	r0, r4
 801f640:	f7ff ffa8 	bl	801f594 <L_shift>
 801f644:	4544      	cmp	r4, r8
 801f646:	d950      	bls.n	801f6ea <__hexnan+0x10a>
 801f648:	2300      	movs	r3, #0
 801f64a:	f1a4 0904 	sub.w	r9, r4, #4
 801f64e:	f844 3c04 	str.w	r3, [r4, #-4]
 801f652:	f8cd b008 	str.w	fp, [sp, #8]
 801f656:	464c      	mov	r4, r9
 801f658:	461d      	mov	r5, r3
 801f65a:	9903      	ldr	r1, [sp, #12]
 801f65c:	e7d7      	b.n	801f60e <__hexnan+0x2e>
 801f65e:	2a29      	cmp	r2, #41	; 0x29
 801f660:	d155      	bne.n	801f70e <__hexnan+0x12e>
 801f662:	3102      	adds	r1, #2
 801f664:	f8ca 1000 	str.w	r1, [sl]
 801f668:	f1bb 0f00 	cmp.w	fp, #0
 801f66c:	d04f      	beq.n	801f70e <__hexnan+0x12e>
 801f66e:	454c      	cmp	r4, r9
 801f670:	d206      	bcs.n	801f680 <__hexnan+0xa0>
 801f672:	2d07      	cmp	r5, #7
 801f674:	dc04      	bgt.n	801f680 <__hexnan+0xa0>
 801f676:	462a      	mov	r2, r5
 801f678:	4649      	mov	r1, r9
 801f67a:	4620      	mov	r0, r4
 801f67c:	f7ff ff8a 	bl	801f594 <L_shift>
 801f680:	4544      	cmp	r4, r8
 801f682:	d934      	bls.n	801f6ee <__hexnan+0x10e>
 801f684:	f1a8 0204 	sub.w	r2, r8, #4
 801f688:	4623      	mov	r3, r4
 801f68a:	f853 1b04 	ldr.w	r1, [r3], #4
 801f68e:	f842 1f04 	str.w	r1, [r2, #4]!
 801f692:	429f      	cmp	r7, r3
 801f694:	d2f9      	bcs.n	801f68a <__hexnan+0xaa>
 801f696:	1b3b      	subs	r3, r7, r4
 801f698:	f023 0303 	bic.w	r3, r3, #3
 801f69c:	3304      	adds	r3, #4
 801f69e:	3e03      	subs	r6, #3
 801f6a0:	3401      	adds	r4, #1
 801f6a2:	42a6      	cmp	r6, r4
 801f6a4:	bf38      	it	cc
 801f6a6:	2304      	movcc	r3, #4
 801f6a8:	4443      	add	r3, r8
 801f6aa:	2200      	movs	r2, #0
 801f6ac:	f843 2b04 	str.w	r2, [r3], #4
 801f6b0:	429f      	cmp	r7, r3
 801f6b2:	d2fb      	bcs.n	801f6ac <__hexnan+0xcc>
 801f6b4:	683b      	ldr	r3, [r7, #0]
 801f6b6:	b91b      	cbnz	r3, 801f6c0 <__hexnan+0xe0>
 801f6b8:	4547      	cmp	r7, r8
 801f6ba:	d126      	bne.n	801f70a <__hexnan+0x12a>
 801f6bc:	2301      	movs	r3, #1
 801f6be:	603b      	str	r3, [r7, #0]
 801f6c0:	2005      	movs	r0, #5
 801f6c2:	e025      	b.n	801f710 <__hexnan+0x130>
 801f6c4:	3501      	adds	r5, #1
 801f6c6:	2d08      	cmp	r5, #8
 801f6c8:	f10b 0b01 	add.w	fp, fp, #1
 801f6cc:	dd06      	ble.n	801f6dc <__hexnan+0xfc>
 801f6ce:	4544      	cmp	r4, r8
 801f6d0:	d9c3      	bls.n	801f65a <__hexnan+0x7a>
 801f6d2:	2300      	movs	r3, #0
 801f6d4:	f844 3c04 	str.w	r3, [r4, #-4]
 801f6d8:	2501      	movs	r5, #1
 801f6da:	3c04      	subs	r4, #4
 801f6dc:	6822      	ldr	r2, [r4, #0]
 801f6de:	f000 000f 	and.w	r0, r0, #15
 801f6e2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801f6e6:	6020      	str	r0, [r4, #0]
 801f6e8:	e7b7      	b.n	801f65a <__hexnan+0x7a>
 801f6ea:	2508      	movs	r5, #8
 801f6ec:	e7b5      	b.n	801f65a <__hexnan+0x7a>
 801f6ee:	9b01      	ldr	r3, [sp, #4]
 801f6f0:	2b00      	cmp	r3, #0
 801f6f2:	d0df      	beq.n	801f6b4 <__hexnan+0xd4>
 801f6f4:	f1c3 0320 	rsb	r3, r3, #32
 801f6f8:	f04f 32ff 	mov.w	r2, #4294967295
 801f6fc:	40da      	lsrs	r2, r3
 801f6fe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801f702:	4013      	ands	r3, r2
 801f704:	f846 3c04 	str.w	r3, [r6, #-4]
 801f708:	e7d4      	b.n	801f6b4 <__hexnan+0xd4>
 801f70a:	3f04      	subs	r7, #4
 801f70c:	e7d2      	b.n	801f6b4 <__hexnan+0xd4>
 801f70e:	2004      	movs	r0, #4
 801f710:	b007      	add	sp, #28
 801f712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f716 <__ascii_mbtowc>:
 801f716:	b082      	sub	sp, #8
 801f718:	b901      	cbnz	r1, 801f71c <__ascii_mbtowc+0x6>
 801f71a:	a901      	add	r1, sp, #4
 801f71c:	b142      	cbz	r2, 801f730 <__ascii_mbtowc+0x1a>
 801f71e:	b14b      	cbz	r3, 801f734 <__ascii_mbtowc+0x1e>
 801f720:	7813      	ldrb	r3, [r2, #0]
 801f722:	600b      	str	r3, [r1, #0]
 801f724:	7812      	ldrb	r2, [r2, #0]
 801f726:	1e10      	subs	r0, r2, #0
 801f728:	bf18      	it	ne
 801f72a:	2001      	movne	r0, #1
 801f72c:	b002      	add	sp, #8
 801f72e:	4770      	bx	lr
 801f730:	4610      	mov	r0, r2
 801f732:	e7fb      	b.n	801f72c <__ascii_mbtowc+0x16>
 801f734:	f06f 0001 	mvn.w	r0, #1
 801f738:	e7f8      	b.n	801f72c <__ascii_mbtowc+0x16>

0801f73a <_realloc_r>:
 801f73a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f73e:	4680      	mov	r8, r0
 801f740:	4614      	mov	r4, r2
 801f742:	460e      	mov	r6, r1
 801f744:	b921      	cbnz	r1, 801f750 <_realloc_r+0x16>
 801f746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f74a:	4611      	mov	r1, r2
 801f74c:	f7fd baec 	b.w	801cd28 <_malloc_r>
 801f750:	b92a      	cbnz	r2, 801f75e <_realloc_r+0x24>
 801f752:	f7fd fa75 	bl	801cc40 <_free_r>
 801f756:	4625      	mov	r5, r4
 801f758:	4628      	mov	r0, r5
 801f75a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f75e:	f000 f8b6 	bl	801f8ce <_malloc_usable_size_r>
 801f762:	4284      	cmp	r4, r0
 801f764:	4607      	mov	r7, r0
 801f766:	d802      	bhi.n	801f76e <_realloc_r+0x34>
 801f768:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801f76c:	d812      	bhi.n	801f794 <_realloc_r+0x5a>
 801f76e:	4621      	mov	r1, r4
 801f770:	4640      	mov	r0, r8
 801f772:	f7fd fad9 	bl	801cd28 <_malloc_r>
 801f776:	4605      	mov	r5, r0
 801f778:	2800      	cmp	r0, #0
 801f77a:	d0ed      	beq.n	801f758 <_realloc_r+0x1e>
 801f77c:	42bc      	cmp	r4, r7
 801f77e:	4622      	mov	r2, r4
 801f780:	4631      	mov	r1, r6
 801f782:	bf28      	it	cs
 801f784:	463a      	movcs	r2, r7
 801f786:	f7fc fc50 	bl	801c02a <memcpy>
 801f78a:	4631      	mov	r1, r6
 801f78c:	4640      	mov	r0, r8
 801f78e:	f7fd fa57 	bl	801cc40 <_free_r>
 801f792:	e7e1      	b.n	801f758 <_realloc_r+0x1e>
 801f794:	4635      	mov	r5, r6
 801f796:	e7df      	b.n	801f758 <_realloc_r+0x1e>

0801f798 <_strtoul_l.constprop.0>:
 801f798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f79c:	4f36      	ldr	r7, [pc, #216]	; (801f878 <_strtoul_l.constprop.0+0xe0>)
 801f79e:	4686      	mov	lr, r0
 801f7a0:	460d      	mov	r5, r1
 801f7a2:	4628      	mov	r0, r5
 801f7a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f7a8:	5d3e      	ldrb	r6, [r7, r4]
 801f7aa:	f016 0608 	ands.w	r6, r6, #8
 801f7ae:	d1f8      	bne.n	801f7a2 <_strtoul_l.constprop.0+0xa>
 801f7b0:	2c2d      	cmp	r4, #45	; 0x2d
 801f7b2:	d130      	bne.n	801f816 <_strtoul_l.constprop.0+0x7e>
 801f7b4:	782c      	ldrb	r4, [r5, #0]
 801f7b6:	2601      	movs	r6, #1
 801f7b8:	1c85      	adds	r5, r0, #2
 801f7ba:	2b00      	cmp	r3, #0
 801f7bc:	d057      	beq.n	801f86e <_strtoul_l.constprop.0+0xd6>
 801f7be:	2b10      	cmp	r3, #16
 801f7c0:	d109      	bne.n	801f7d6 <_strtoul_l.constprop.0+0x3e>
 801f7c2:	2c30      	cmp	r4, #48	; 0x30
 801f7c4:	d107      	bne.n	801f7d6 <_strtoul_l.constprop.0+0x3e>
 801f7c6:	7828      	ldrb	r0, [r5, #0]
 801f7c8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801f7cc:	2858      	cmp	r0, #88	; 0x58
 801f7ce:	d149      	bne.n	801f864 <_strtoul_l.constprop.0+0xcc>
 801f7d0:	786c      	ldrb	r4, [r5, #1]
 801f7d2:	2310      	movs	r3, #16
 801f7d4:	3502      	adds	r5, #2
 801f7d6:	f04f 38ff 	mov.w	r8, #4294967295
 801f7da:	2700      	movs	r7, #0
 801f7dc:	fbb8 f8f3 	udiv	r8, r8, r3
 801f7e0:	fb03 f908 	mul.w	r9, r3, r8
 801f7e4:	ea6f 0909 	mvn.w	r9, r9
 801f7e8:	4638      	mov	r0, r7
 801f7ea:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801f7ee:	f1bc 0f09 	cmp.w	ip, #9
 801f7f2:	d815      	bhi.n	801f820 <_strtoul_l.constprop.0+0x88>
 801f7f4:	4664      	mov	r4, ip
 801f7f6:	42a3      	cmp	r3, r4
 801f7f8:	dd23      	ble.n	801f842 <_strtoul_l.constprop.0+0xaa>
 801f7fa:	f1b7 3fff 	cmp.w	r7, #4294967295
 801f7fe:	d007      	beq.n	801f810 <_strtoul_l.constprop.0+0x78>
 801f800:	4580      	cmp	r8, r0
 801f802:	d31b      	bcc.n	801f83c <_strtoul_l.constprop.0+0xa4>
 801f804:	d101      	bne.n	801f80a <_strtoul_l.constprop.0+0x72>
 801f806:	45a1      	cmp	r9, r4
 801f808:	db18      	blt.n	801f83c <_strtoul_l.constprop.0+0xa4>
 801f80a:	fb00 4003 	mla	r0, r0, r3, r4
 801f80e:	2701      	movs	r7, #1
 801f810:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f814:	e7e9      	b.n	801f7ea <_strtoul_l.constprop.0+0x52>
 801f816:	2c2b      	cmp	r4, #43	; 0x2b
 801f818:	bf04      	itt	eq
 801f81a:	782c      	ldrbeq	r4, [r5, #0]
 801f81c:	1c85      	addeq	r5, r0, #2
 801f81e:	e7cc      	b.n	801f7ba <_strtoul_l.constprop.0+0x22>
 801f820:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801f824:	f1bc 0f19 	cmp.w	ip, #25
 801f828:	d801      	bhi.n	801f82e <_strtoul_l.constprop.0+0x96>
 801f82a:	3c37      	subs	r4, #55	; 0x37
 801f82c:	e7e3      	b.n	801f7f6 <_strtoul_l.constprop.0+0x5e>
 801f82e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801f832:	f1bc 0f19 	cmp.w	ip, #25
 801f836:	d804      	bhi.n	801f842 <_strtoul_l.constprop.0+0xaa>
 801f838:	3c57      	subs	r4, #87	; 0x57
 801f83a:	e7dc      	b.n	801f7f6 <_strtoul_l.constprop.0+0x5e>
 801f83c:	f04f 37ff 	mov.w	r7, #4294967295
 801f840:	e7e6      	b.n	801f810 <_strtoul_l.constprop.0+0x78>
 801f842:	1c7b      	adds	r3, r7, #1
 801f844:	d106      	bne.n	801f854 <_strtoul_l.constprop.0+0xbc>
 801f846:	2322      	movs	r3, #34	; 0x22
 801f848:	f8ce 3000 	str.w	r3, [lr]
 801f84c:	4638      	mov	r0, r7
 801f84e:	b932      	cbnz	r2, 801f85e <_strtoul_l.constprop.0+0xc6>
 801f850:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f854:	b106      	cbz	r6, 801f858 <_strtoul_l.constprop.0+0xc0>
 801f856:	4240      	negs	r0, r0
 801f858:	2a00      	cmp	r2, #0
 801f85a:	d0f9      	beq.n	801f850 <_strtoul_l.constprop.0+0xb8>
 801f85c:	b107      	cbz	r7, 801f860 <_strtoul_l.constprop.0+0xc8>
 801f85e:	1e69      	subs	r1, r5, #1
 801f860:	6011      	str	r1, [r2, #0]
 801f862:	e7f5      	b.n	801f850 <_strtoul_l.constprop.0+0xb8>
 801f864:	2430      	movs	r4, #48	; 0x30
 801f866:	2b00      	cmp	r3, #0
 801f868:	d1b5      	bne.n	801f7d6 <_strtoul_l.constprop.0+0x3e>
 801f86a:	2308      	movs	r3, #8
 801f86c:	e7b3      	b.n	801f7d6 <_strtoul_l.constprop.0+0x3e>
 801f86e:	2c30      	cmp	r4, #48	; 0x30
 801f870:	d0a9      	beq.n	801f7c6 <_strtoul_l.constprop.0+0x2e>
 801f872:	230a      	movs	r3, #10
 801f874:	e7af      	b.n	801f7d6 <_strtoul_l.constprop.0+0x3e>
 801f876:	bf00      	nop
 801f878:	08020849 	.word	0x08020849

0801f87c <_strtoul_r>:
 801f87c:	f7ff bf8c 	b.w	801f798 <_strtoul_l.constprop.0>

0801f880 <__ascii_wctomb>:
 801f880:	b149      	cbz	r1, 801f896 <__ascii_wctomb+0x16>
 801f882:	2aff      	cmp	r2, #255	; 0xff
 801f884:	bf85      	ittet	hi
 801f886:	238a      	movhi	r3, #138	; 0x8a
 801f888:	6003      	strhi	r3, [r0, #0]
 801f88a:	700a      	strbls	r2, [r1, #0]
 801f88c:	f04f 30ff 	movhi.w	r0, #4294967295
 801f890:	bf98      	it	ls
 801f892:	2001      	movls	r0, #1
 801f894:	4770      	bx	lr
 801f896:	4608      	mov	r0, r1
 801f898:	4770      	bx	lr
	...

0801f89c <fiprintf>:
 801f89c:	b40e      	push	{r1, r2, r3}
 801f89e:	b503      	push	{r0, r1, lr}
 801f8a0:	4601      	mov	r1, r0
 801f8a2:	ab03      	add	r3, sp, #12
 801f8a4:	4805      	ldr	r0, [pc, #20]	; (801f8bc <fiprintf+0x20>)
 801f8a6:	f853 2b04 	ldr.w	r2, [r3], #4
 801f8aa:	6800      	ldr	r0, [r0, #0]
 801f8ac:	9301      	str	r3, [sp, #4]
 801f8ae:	f000 f83f 	bl	801f930 <_vfiprintf_r>
 801f8b2:	b002      	add	sp, #8
 801f8b4:	f85d eb04 	ldr.w	lr, [sp], #4
 801f8b8:	b003      	add	sp, #12
 801f8ba:	4770      	bx	lr
 801f8bc:	24000158 	.word	0x24000158

0801f8c0 <abort>:
 801f8c0:	b508      	push	{r3, lr}
 801f8c2:	2006      	movs	r0, #6
 801f8c4:	f000 fa0c 	bl	801fce0 <raise>
 801f8c8:	2001      	movs	r0, #1
 801f8ca:	f7e4 fb0d 	bl	8003ee8 <_exit>

0801f8ce <_malloc_usable_size_r>:
 801f8ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f8d2:	1f18      	subs	r0, r3, #4
 801f8d4:	2b00      	cmp	r3, #0
 801f8d6:	bfbc      	itt	lt
 801f8d8:	580b      	ldrlt	r3, [r1, r0]
 801f8da:	18c0      	addlt	r0, r0, r3
 801f8dc:	4770      	bx	lr

0801f8de <__sfputc_r>:
 801f8de:	6893      	ldr	r3, [r2, #8]
 801f8e0:	3b01      	subs	r3, #1
 801f8e2:	2b00      	cmp	r3, #0
 801f8e4:	b410      	push	{r4}
 801f8e6:	6093      	str	r3, [r2, #8]
 801f8e8:	da08      	bge.n	801f8fc <__sfputc_r+0x1e>
 801f8ea:	6994      	ldr	r4, [r2, #24]
 801f8ec:	42a3      	cmp	r3, r4
 801f8ee:	db01      	blt.n	801f8f4 <__sfputc_r+0x16>
 801f8f0:	290a      	cmp	r1, #10
 801f8f2:	d103      	bne.n	801f8fc <__sfputc_r+0x1e>
 801f8f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f8f8:	f000 b934 	b.w	801fb64 <__swbuf_r>
 801f8fc:	6813      	ldr	r3, [r2, #0]
 801f8fe:	1c58      	adds	r0, r3, #1
 801f900:	6010      	str	r0, [r2, #0]
 801f902:	7019      	strb	r1, [r3, #0]
 801f904:	4608      	mov	r0, r1
 801f906:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f90a:	4770      	bx	lr

0801f90c <__sfputs_r>:
 801f90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f90e:	4606      	mov	r6, r0
 801f910:	460f      	mov	r7, r1
 801f912:	4614      	mov	r4, r2
 801f914:	18d5      	adds	r5, r2, r3
 801f916:	42ac      	cmp	r4, r5
 801f918:	d101      	bne.n	801f91e <__sfputs_r+0x12>
 801f91a:	2000      	movs	r0, #0
 801f91c:	e007      	b.n	801f92e <__sfputs_r+0x22>
 801f91e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f922:	463a      	mov	r2, r7
 801f924:	4630      	mov	r0, r6
 801f926:	f7ff ffda 	bl	801f8de <__sfputc_r>
 801f92a:	1c43      	adds	r3, r0, #1
 801f92c:	d1f3      	bne.n	801f916 <__sfputs_r+0xa>
 801f92e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801f930 <_vfiprintf_r>:
 801f930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f934:	460d      	mov	r5, r1
 801f936:	b09d      	sub	sp, #116	; 0x74
 801f938:	4614      	mov	r4, r2
 801f93a:	4698      	mov	r8, r3
 801f93c:	4606      	mov	r6, r0
 801f93e:	b118      	cbz	r0, 801f948 <_vfiprintf_r+0x18>
 801f940:	6a03      	ldr	r3, [r0, #32]
 801f942:	b90b      	cbnz	r3, 801f948 <_vfiprintf_r+0x18>
 801f944:	f7fc fa22 	bl	801bd8c <__sinit>
 801f948:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f94a:	07d9      	lsls	r1, r3, #31
 801f94c:	d405      	bmi.n	801f95a <_vfiprintf_r+0x2a>
 801f94e:	89ab      	ldrh	r3, [r5, #12]
 801f950:	059a      	lsls	r2, r3, #22
 801f952:	d402      	bmi.n	801f95a <_vfiprintf_r+0x2a>
 801f954:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f956:	f7fc fb5e 	bl	801c016 <__retarget_lock_acquire_recursive>
 801f95a:	89ab      	ldrh	r3, [r5, #12]
 801f95c:	071b      	lsls	r3, r3, #28
 801f95e:	d501      	bpl.n	801f964 <_vfiprintf_r+0x34>
 801f960:	692b      	ldr	r3, [r5, #16]
 801f962:	b99b      	cbnz	r3, 801f98c <_vfiprintf_r+0x5c>
 801f964:	4629      	mov	r1, r5
 801f966:	4630      	mov	r0, r6
 801f968:	f000 f93a 	bl	801fbe0 <__swsetup_r>
 801f96c:	b170      	cbz	r0, 801f98c <_vfiprintf_r+0x5c>
 801f96e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f970:	07dc      	lsls	r4, r3, #31
 801f972:	d504      	bpl.n	801f97e <_vfiprintf_r+0x4e>
 801f974:	f04f 30ff 	mov.w	r0, #4294967295
 801f978:	b01d      	add	sp, #116	; 0x74
 801f97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f97e:	89ab      	ldrh	r3, [r5, #12]
 801f980:	0598      	lsls	r0, r3, #22
 801f982:	d4f7      	bmi.n	801f974 <_vfiprintf_r+0x44>
 801f984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f986:	f7fc fb47 	bl	801c018 <__retarget_lock_release_recursive>
 801f98a:	e7f3      	b.n	801f974 <_vfiprintf_r+0x44>
 801f98c:	2300      	movs	r3, #0
 801f98e:	9309      	str	r3, [sp, #36]	; 0x24
 801f990:	2320      	movs	r3, #32
 801f992:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f996:	f8cd 800c 	str.w	r8, [sp, #12]
 801f99a:	2330      	movs	r3, #48	; 0x30
 801f99c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801fb50 <_vfiprintf_r+0x220>
 801f9a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f9a4:	f04f 0901 	mov.w	r9, #1
 801f9a8:	4623      	mov	r3, r4
 801f9aa:	469a      	mov	sl, r3
 801f9ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f9b0:	b10a      	cbz	r2, 801f9b6 <_vfiprintf_r+0x86>
 801f9b2:	2a25      	cmp	r2, #37	; 0x25
 801f9b4:	d1f9      	bne.n	801f9aa <_vfiprintf_r+0x7a>
 801f9b6:	ebba 0b04 	subs.w	fp, sl, r4
 801f9ba:	d00b      	beq.n	801f9d4 <_vfiprintf_r+0xa4>
 801f9bc:	465b      	mov	r3, fp
 801f9be:	4622      	mov	r2, r4
 801f9c0:	4629      	mov	r1, r5
 801f9c2:	4630      	mov	r0, r6
 801f9c4:	f7ff ffa2 	bl	801f90c <__sfputs_r>
 801f9c8:	3001      	adds	r0, #1
 801f9ca:	f000 80a9 	beq.w	801fb20 <_vfiprintf_r+0x1f0>
 801f9ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f9d0:	445a      	add	r2, fp
 801f9d2:	9209      	str	r2, [sp, #36]	; 0x24
 801f9d4:	f89a 3000 	ldrb.w	r3, [sl]
 801f9d8:	2b00      	cmp	r3, #0
 801f9da:	f000 80a1 	beq.w	801fb20 <_vfiprintf_r+0x1f0>
 801f9de:	2300      	movs	r3, #0
 801f9e0:	f04f 32ff 	mov.w	r2, #4294967295
 801f9e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f9e8:	f10a 0a01 	add.w	sl, sl, #1
 801f9ec:	9304      	str	r3, [sp, #16]
 801f9ee:	9307      	str	r3, [sp, #28]
 801f9f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f9f4:	931a      	str	r3, [sp, #104]	; 0x68
 801f9f6:	4654      	mov	r4, sl
 801f9f8:	2205      	movs	r2, #5
 801f9fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f9fe:	4854      	ldr	r0, [pc, #336]	; (801fb50 <_vfiprintf_r+0x220>)
 801fa00:	f7e0 fc96 	bl	8000330 <memchr>
 801fa04:	9a04      	ldr	r2, [sp, #16]
 801fa06:	b9d8      	cbnz	r0, 801fa40 <_vfiprintf_r+0x110>
 801fa08:	06d1      	lsls	r1, r2, #27
 801fa0a:	bf44      	itt	mi
 801fa0c:	2320      	movmi	r3, #32
 801fa0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fa12:	0713      	lsls	r3, r2, #28
 801fa14:	bf44      	itt	mi
 801fa16:	232b      	movmi	r3, #43	; 0x2b
 801fa18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fa1c:	f89a 3000 	ldrb.w	r3, [sl]
 801fa20:	2b2a      	cmp	r3, #42	; 0x2a
 801fa22:	d015      	beq.n	801fa50 <_vfiprintf_r+0x120>
 801fa24:	9a07      	ldr	r2, [sp, #28]
 801fa26:	4654      	mov	r4, sl
 801fa28:	2000      	movs	r0, #0
 801fa2a:	f04f 0c0a 	mov.w	ip, #10
 801fa2e:	4621      	mov	r1, r4
 801fa30:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fa34:	3b30      	subs	r3, #48	; 0x30
 801fa36:	2b09      	cmp	r3, #9
 801fa38:	d94d      	bls.n	801fad6 <_vfiprintf_r+0x1a6>
 801fa3a:	b1b0      	cbz	r0, 801fa6a <_vfiprintf_r+0x13a>
 801fa3c:	9207      	str	r2, [sp, #28]
 801fa3e:	e014      	b.n	801fa6a <_vfiprintf_r+0x13a>
 801fa40:	eba0 0308 	sub.w	r3, r0, r8
 801fa44:	fa09 f303 	lsl.w	r3, r9, r3
 801fa48:	4313      	orrs	r3, r2
 801fa4a:	9304      	str	r3, [sp, #16]
 801fa4c:	46a2      	mov	sl, r4
 801fa4e:	e7d2      	b.n	801f9f6 <_vfiprintf_r+0xc6>
 801fa50:	9b03      	ldr	r3, [sp, #12]
 801fa52:	1d19      	adds	r1, r3, #4
 801fa54:	681b      	ldr	r3, [r3, #0]
 801fa56:	9103      	str	r1, [sp, #12]
 801fa58:	2b00      	cmp	r3, #0
 801fa5a:	bfbb      	ittet	lt
 801fa5c:	425b      	neglt	r3, r3
 801fa5e:	f042 0202 	orrlt.w	r2, r2, #2
 801fa62:	9307      	strge	r3, [sp, #28]
 801fa64:	9307      	strlt	r3, [sp, #28]
 801fa66:	bfb8      	it	lt
 801fa68:	9204      	strlt	r2, [sp, #16]
 801fa6a:	7823      	ldrb	r3, [r4, #0]
 801fa6c:	2b2e      	cmp	r3, #46	; 0x2e
 801fa6e:	d10c      	bne.n	801fa8a <_vfiprintf_r+0x15a>
 801fa70:	7863      	ldrb	r3, [r4, #1]
 801fa72:	2b2a      	cmp	r3, #42	; 0x2a
 801fa74:	d134      	bne.n	801fae0 <_vfiprintf_r+0x1b0>
 801fa76:	9b03      	ldr	r3, [sp, #12]
 801fa78:	1d1a      	adds	r2, r3, #4
 801fa7a:	681b      	ldr	r3, [r3, #0]
 801fa7c:	9203      	str	r2, [sp, #12]
 801fa7e:	2b00      	cmp	r3, #0
 801fa80:	bfb8      	it	lt
 801fa82:	f04f 33ff 	movlt.w	r3, #4294967295
 801fa86:	3402      	adds	r4, #2
 801fa88:	9305      	str	r3, [sp, #20]
 801fa8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801fb60 <_vfiprintf_r+0x230>
 801fa8e:	7821      	ldrb	r1, [r4, #0]
 801fa90:	2203      	movs	r2, #3
 801fa92:	4650      	mov	r0, sl
 801fa94:	f7e0 fc4c 	bl	8000330 <memchr>
 801fa98:	b138      	cbz	r0, 801faaa <_vfiprintf_r+0x17a>
 801fa9a:	9b04      	ldr	r3, [sp, #16]
 801fa9c:	eba0 000a 	sub.w	r0, r0, sl
 801faa0:	2240      	movs	r2, #64	; 0x40
 801faa2:	4082      	lsls	r2, r0
 801faa4:	4313      	orrs	r3, r2
 801faa6:	3401      	adds	r4, #1
 801faa8:	9304      	str	r3, [sp, #16]
 801faaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801faae:	4829      	ldr	r0, [pc, #164]	; (801fb54 <_vfiprintf_r+0x224>)
 801fab0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fab4:	2206      	movs	r2, #6
 801fab6:	f7e0 fc3b 	bl	8000330 <memchr>
 801faba:	2800      	cmp	r0, #0
 801fabc:	d03f      	beq.n	801fb3e <_vfiprintf_r+0x20e>
 801fabe:	4b26      	ldr	r3, [pc, #152]	; (801fb58 <_vfiprintf_r+0x228>)
 801fac0:	bb1b      	cbnz	r3, 801fb0a <_vfiprintf_r+0x1da>
 801fac2:	9b03      	ldr	r3, [sp, #12]
 801fac4:	3307      	adds	r3, #7
 801fac6:	f023 0307 	bic.w	r3, r3, #7
 801faca:	3308      	adds	r3, #8
 801facc:	9303      	str	r3, [sp, #12]
 801face:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fad0:	443b      	add	r3, r7
 801fad2:	9309      	str	r3, [sp, #36]	; 0x24
 801fad4:	e768      	b.n	801f9a8 <_vfiprintf_r+0x78>
 801fad6:	fb0c 3202 	mla	r2, ip, r2, r3
 801fada:	460c      	mov	r4, r1
 801fadc:	2001      	movs	r0, #1
 801fade:	e7a6      	b.n	801fa2e <_vfiprintf_r+0xfe>
 801fae0:	2300      	movs	r3, #0
 801fae2:	3401      	adds	r4, #1
 801fae4:	9305      	str	r3, [sp, #20]
 801fae6:	4619      	mov	r1, r3
 801fae8:	f04f 0c0a 	mov.w	ip, #10
 801faec:	4620      	mov	r0, r4
 801faee:	f810 2b01 	ldrb.w	r2, [r0], #1
 801faf2:	3a30      	subs	r2, #48	; 0x30
 801faf4:	2a09      	cmp	r2, #9
 801faf6:	d903      	bls.n	801fb00 <_vfiprintf_r+0x1d0>
 801faf8:	2b00      	cmp	r3, #0
 801fafa:	d0c6      	beq.n	801fa8a <_vfiprintf_r+0x15a>
 801fafc:	9105      	str	r1, [sp, #20]
 801fafe:	e7c4      	b.n	801fa8a <_vfiprintf_r+0x15a>
 801fb00:	fb0c 2101 	mla	r1, ip, r1, r2
 801fb04:	4604      	mov	r4, r0
 801fb06:	2301      	movs	r3, #1
 801fb08:	e7f0      	b.n	801faec <_vfiprintf_r+0x1bc>
 801fb0a:	ab03      	add	r3, sp, #12
 801fb0c:	9300      	str	r3, [sp, #0]
 801fb0e:	462a      	mov	r2, r5
 801fb10:	4b12      	ldr	r3, [pc, #72]	; (801fb5c <_vfiprintf_r+0x22c>)
 801fb12:	a904      	add	r1, sp, #16
 801fb14:	4630      	mov	r0, r6
 801fb16:	f7fb faff 	bl	801b118 <_printf_float>
 801fb1a:	4607      	mov	r7, r0
 801fb1c:	1c78      	adds	r0, r7, #1
 801fb1e:	d1d6      	bne.n	801face <_vfiprintf_r+0x19e>
 801fb20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fb22:	07d9      	lsls	r1, r3, #31
 801fb24:	d405      	bmi.n	801fb32 <_vfiprintf_r+0x202>
 801fb26:	89ab      	ldrh	r3, [r5, #12]
 801fb28:	059a      	lsls	r2, r3, #22
 801fb2a:	d402      	bmi.n	801fb32 <_vfiprintf_r+0x202>
 801fb2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fb2e:	f7fc fa73 	bl	801c018 <__retarget_lock_release_recursive>
 801fb32:	89ab      	ldrh	r3, [r5, #12]
 801fb34:	065b      	lsls	r3, r3, #25
 801fb36:	f53f af1d 	bmi.w	801f974 <_vfiprintf_r+0x44>
 801fb3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fb3c:	e71c      	b.n	801f978 <_vfiprintf_r+0x48>
 801fb3e:	ab03      	add	r3, sp, #12
 801fb40:	9300      	str	r3, [sp, #0]
 801fb42:	462a      	mov	r2, r5
 801fb44:	4b05      	ldr	r3, [pc, #20]	; (801fb5c <_vfiprintf_r+0x22c>)
 801fb46:	a904      	add	r1, sp, #16
 801fb48:	4630      	mov	r0, r6
 801fb4a:	f7fb fd6d 	bl	801b628 <_printf_i>
 801fb4e:	e7e4      	b.n	801fb1a <_vfiprintf_r+0x1ea>
 801fb50:	08020949 	.word	0x08020949
 801fb54:	08020953 	.word	0x08020953
 801fb58:	0801b119 	.word	0x0801b119
 801fb5c:	0801f90d 	.word	0x0801f90d
 801fb60:	0802094f 	.word	0x0802094f

0801fb64 <__swbuf_r>:
 801fb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fb66:	460e      	mov	r6, r1
 801fb68:	4614      	mov	r4, r2
 801fb6a:	4605      	mov	r5, r0
 801fb6c:	b118      	cbz	r0, 801fb76 <__swbuf_r+0x12>
 801fb6e:	6a03      	ldr	r3, [r0, #32]
 801fb70:	b90b      	cbnz	r3, 801fb76 <__swbuf_r+0x12>
 801fb72:	f7fc f90b 	bl	801bd8c <__sinit>
 801fb76:	69a3      	ldr	r3, [r4, #24]
 801fb78:	60a3      	str	r3, [r4, #8]
 801fb7a:	89a3      	ldrh	r3, [r4, #12]
 801fb7c:	071a      	lsls	r2, r3, #28
 801fb7e:	d525      	bpl.n	801fbcc <__swbuf_r+0x68>
 801fb80:	6923      	ldr	r3, [r4, #16]
 801fb82:	b31b      	cbz	r3, 801fbcc <__swbuf_r+0x68>
 801fb84:	6823      	ldr	r3, [r4, #0]
 801fb86:	6922      	ldr	r2, [r4, #16]
 801fb88:	1a98      	subs	r0, r3, r2
 801fb8a:	6963      	ldr	r3, [r4, #20]
 801fb8c:	b2f6      	uxtb	r6, r6
 801fb8e:	4283      	cmp	r3, r0
 801fb90:	4637      	mov	r7, r6
 801fb92:	dc04      	bgt.n	801fb9e <__swbuf_r+0x3a>
 801fb94:	4621      	mov	r1, r4
 801fb96:	4628      	mov	r0, r5
 801fb98:	f7ff f950 	bl	801ee3c <_fflush_r>
 801fb9c:	b9e0      	cbnz	r0, 801fbd8 <__swbuf_r+0x74>
 801fb9e:	68a3      	ldr	r3, [r4, #8]
 801fba0:	3b01      	subs	r3, #1
 801fba2:	60a3      	str	r3, [r4, #8]
 801fba4:	6823      	ldr	r3, [r4, #0]
 801fba6:	1c5a      	adds	r2, r3, #1
 801fba8:	6022      	str	r2, [r4, #0]
 801fbaa:	701e      	strb	r6, [r3, #0]
 801fbac:	6962      	ldr	r2, [r4, #20]
 801fbae:	1c43      	adds	r3, r0, #1
 801fbb0:	429a      	cmp	r2, r3
 801fbb2:	d004      	beq.n	801fbbe <__swbuf_r+0x5a>
 801fbb4:	89a3      	ldrh	r3, [r4, #12]
 801fbb6:	07db      	lsls	r3, r3, #31
 801fbb8:	d506      	bpl.n	801fbc8 <__swbuf_r+0x64>
 801fbba:	2e0a      	cmp	r6, #10
 801fbbc:	d104      	bne.n	801fbc8 <__swbuf_r+0x64>
 801fbbe:	4621      	mov	r1, r4
 801fbc0:	4628      	mov	r0, r5
 801fbc2:	f7ff f93b 	bl	801ee3c <_fflush_r>
 801fbc6:	b938      	cbnz	r0, 801fbd8 <__swbuf_r+0x74>
 801fbc8:	4638      	mov	r0, r7
 801fbca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fbcc:	4621      	mov	r1, r4
 801fbce:	4628      	mov	r0, r5
 801fbd0:	f000 f806 	bl	801fbe0 <__swsetup_r>
 801fbd4:	2800      	cmp	r0, #0
 801fbd6:	d0d5      	beq.n	801fb84 <__swbuf_r+0x20>
 801fbd8:	f04f 37ff 	mov.w	r7, #4294967295
 801fbdc:	e7f4      	b.n	801fbc8 <__swbuf_r+0x64>
	...

0801fbe0 <__swsetup_r>:
 801fbe0:	b538      	push	{r3, r4, r5, lr}
 801fbe2:	4b2a      	ldr	r3, [pc, #168]	; (801fc8c <__swsetup_r+0xac>)
 801fbe4:	4605      	mov	r5, r0
 801fbe6:	6818      	ldr	r0, [r3, #0]
 801fbe8:	460c      	mov	r4, r1
 801fbea:	b118      	cbz	r0, 801fbf4 <__swsetup_r+0x14>
 801fbec:	6a03      	ldr	r3, [r0, #32]
 801fbee:	b90b      	cbnz	r3, 801fbf4 <__swsetup_r+0x14>
 801fbf0:	f7fc f8cc 	bl	801bd8c <__sinit>
 801fbf4:	89a3      	ldrh	r3, [r4, #12]
 801fbf6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fbfa:	0718      	lsls	r0, r3, #28
 801fbfc:	d422      	bmi.n	801fc44 <__swsetup_r+0x64>
 801fbfe:	06d9      	lsls	r1, r3, #27
 801fc00:	d407      	bmi.n	801fc12 <__swsetup_r+0x32>
 801fc02:	2309      	movs	r3, #9
 801fc04:	602b      	str	r3, [r5, #0]
 801fc06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801fc0a:	81a3      	strh	r3, [r4, #12]
 801fc0c:	f04f 30ff 	mov.w	r0, #4294967295
 801fc10:	e034      	b.n	801fc7c <__swsetup_r+0x9c>
 801fc12:	0758      	lsls	r0, r3, #29
 801fc14:	d512      	bpl.n	801fc3c <__swsetup_r+0x5c>
 801fc16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fc18:	b141      	cbz	r1, 801fc2c <__swsetup_r+0x4c>
 801fc1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fc1e:	4299      	cmp	r1, r3
 801fc20:	d002      	beq.n	801fc28 <__swsetup_r+0x48>
 801fc22:	4628      	mov	r0, r5
 801fc24:	f7fd f80c 	bl	801cc40 <_free_r>
 801fc28:	2300      	movs	r3, #0
 801fc2a:	6363      	str	r3, [r4, #52]	; 0x34
 801fc2c:	89a3      	ldrh	r3, [r4, #12]
 801fc2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801fc32:	81a3      	strh	r3, [r4, #12]
 801fc34:	2300      	movs	r3, #0
 801fc36:	6063      	str	r3, [r4, #4]
 801fc38:	6923      	ldr	r3, [r4, #16]
 801fc3a:	6023      	str	r3, [r4, #0]
 801fc3c:	89a3      	ldrh	r3, [r4, #12]
 801fc3e:	f043 0308 	orr.w	r3, r3, #8
 801fc42:	81a3      	strh	r3, [r4, #12]
 801fc44:	6923      	ldr	r3, [r4, #16]
 801fc46:	b94b      	cbnz	r3, 801fc5c <__swsetup_r+0x7c>
 801fc48:	89a3      	ldrh	r3, [r4, #12]
 801fc4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801fc4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fc52:	d003      	beq.n	801fc5c <__swsetup_r+0x7c>
 801fc54:	4621      	mov	r1, r4
 801fc56:	4628      	mov	r0, r5
 801fc58:	f000 f884 	bl	801fd64 <__smakebuf_r>
 801fc5c:	89a0      	ldrh	r0, [r4, #12]
 801fc5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fc62:	f010 0301 	ands.w	r3, r0, #1
 801fc66:	d00a      	beq.n	801fc7e <__swsetup_r+0x9e>
 801fc68:	2300      	movs	r3, #0
 801fc6a:	60a3      	str	r3, [r4, #8]
 801fc6c:	6963      	ldr	r3, [r4, #20]
 801fc6e:	425b      	negs	r3, r3
 801fc70:	61a3      	str	r3, [r4, #24]
 801fc72:	6923      	ldr	r3, [r4, #16]
 801fc74:	b943      	cbnz	r3, 801fc88 <__swsetup_r+0xa8>
 801fc76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801fc7a:	d1c4      	bne.n	801fc06 <__swsetup_r+0x26>
 801fc7c:	bd38      	pop	{r3, r4, r5, pc}
 801fc7e:	0781      	lsls	r1, r0, #30
 801fc80:	bf58      	it	pl
 801fc82:	6963      	ldrpl	r3, [r4, #20]
 801fc84:	60a3      	str	r3, [r4, #8]
 801fc86:	e7f4      	b.n	801fc72 <__swsetup_r+0x92>
 801fc88:	2000      	movs	r0, #0
 801fc8a:	e7f7      	b.n	801fc7c <__swsetup_r+0x9c>
 801fc8c:	24000158 	.word	0x24000158

0801fc90 <_raise_r>:
 801fc90:	291f      	cmp	r1, #31
 801fc92:	b538      	push	{r3, r4, r5, lr}
 801fc94:	4604      	mov	r4, r0
 801fc96:	460d      	mov	r5, r1
 801fc98:	d904      	bls.n	801fca4 <_raise_r+0x14>
 801fc9a:	2316      	movs	r3, #22
 801fc9c:	6003      	str	r3, [r0, #0]
 801fc9e:	f04f 30ff 	mov.w	r0, #4294967295
 801fca2:	bd38      	pop	{r3, r4, r5, pc}
 801fca4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801fca6:	b112      	cbz	r2, 801fcae <_raise_r+0x1e>
 801fca8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801fcac:	b94b      	cbnz	r3, 801fcc2 <_raise_r+0x32>
 801fcae:	4620      	mov	r0, r4
 801fcb0:	f000 f830 	bl	801fd14 <_getpid_r>
 801fcb4:	462a      	mov	r2, r5
 801fcb6:	4601      	mov	r1, r0
 801fcb8:	4620      	mov	r0, r4
 801fcba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fcbe:	f000 b817 	b.w	801fcf0 <_kill_r>
 801fcc2:	2b01      	cmp	r3, #1
 801fcc4:	d00a      	beq.n	801fcdc <_raise_r+0x4c>
 801fcc6:	1c59      	adds	r1, r3, #1
 801fcc8:	d103      	bne.n	801fcd2 <_raise_r+0x42>
 801fcca:	2316      	movs	r3, #22
 801fccc:	6003      	str	r3, [r0, #0]
 801fcce:	2001      	movs	r0, #1
 801fcd0:	e7e7      	b.n	801fca2 <_raise_r+0x12>
 801fcd2:	2400      	movs	r4, #0
 801fcd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801fcd8:	4628      	mov	r0, r5
 801fcda:	4798      	blx	r3
 801fcdc:	2000      	movs	r0, #0
 801fcde:	e7e0      	b.n	801fca2 <_raise_r+0x12>

0801fce0 <raise>:
 801fce0:	4b02      	ldr	r3, [pc, #8]	; (801fcec <raise+0xc>)
 801fce2:	4601      	mov	r1, r0
 801fce4:	6818      	ldr	r0, [r3, #0]
 801fce6:	f7ff bfd3 	b.w	801fc90 <_raise_r>
 801fcea:	bf00      	nop
 801fcec:	24000158 	.word	0x24000158

0801fcf0 <_kill_r>:
 801fcf0:	b538      	push	{r3, r4, r5, lr}
 801fcf2:	4d07      	ldr	r5, [pc, #28]	; (801fd10 <_kill_r+0x20>)
 801fcf4:	2300      	movs	r3, #0
 801fcf6:	4604      	mov	r4, r0
 801fcf8:	4608      	mov	r0, r1
 801fcfa:	4611      	mov	r1, r2
 801fcfc:	602b      	str	r3, [r5, #0]
 801fcfe:	f7e4 f8e3 	bl	8003ec8 <_kill>
 801fd02:	1c43      	adds	r3, r0, #1
 801fd04:	d102      	bne.n	801fd0c <_kill_r+0x1c>
 801fd06:	682b      	ldr	r3, [r5, #0]
 801fd08:	b103      	cbz	r3, 801fd0c <_kill_r+0x1c>
 801fd0a:	6023      	str	r3, [r4, #0]
 801fd0c:	bd38      	pop	{r3, r4, r5, pc}
 801fd0e:	bf00      	nop
 801fd10:	24003620 	.word	0x24003620

0801fd14 <_getpid_r>:
 801fd14:	f7e4 b8d0 	b.w	8003eb8 <_getpid>

0801fd18 <__swhatbuf_r>:
 801fd18:	b570      	push	{r4, r5, r6, lr}
 801fd1a:	460c      	mov	r4, r1
 801fd1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fd20:	2900      	cmp	r1, #0
 801fd22:	b096      	sub	sp, #88	; 0x58
 801fd24:	4615      	mov	r5, r2
 801fd26:	461e      	mov	r6, r3
 801fd28:	da0d      	bge.n	801fd46 <__swhatbuf_r+0x2e>
 801fd2a:	89a3      	ldrh	r3, [r4, #12]
 801fd2c:	f013 0f80 	tst.w	r3, #128	; 0x80
 801fd30:	f04f 0100 	mov.w	r1, #0
 801fd34:	bf0c      	ite	eq
 801fd36:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801fd3a:	2340      	movne	r3, #64	; 0x40
 801fd3c:	2000      	movs	r0, #0
 801fd3e:	6031      	str	r1, [r6, #0]
 801fd40:	602b      	str	r3, [r5, #0]
 801fd42:	b016      	add	sp, #88	; 0x58
 801fd44:	bd70      	pop	{r4, r5, r6, pc}
 801fd46:	466a      	mov	r2, sp
 801fd48:	f000 f848 	bl	801fddc <_fstat_r>
 801fd4c:	2800      	cmp	r0, #0
 801fd4e:	dbec      	blt.n	801fd2a <__swhatbuf_r+0x12>
 801fd50:	9901      	ldr	r1, [sp, #4]
 801fd52:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801fd56:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801fd5a:	4259      	negs	r1, r3
 801fd5c:	4159      	adcs	r1, r3
 801fd5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801fd62:	e7eb      	b.n	801fd3c <__swhatbuf_r+0x24>

0801fd64 <__smakebuf_r>:
 801fd64:	898b      	ldrh	r3, [r1, #12]
 801fd66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801fd68:	079d      	lsls	r5, r3, #30
 801fd6a:	4606      	mov	r6, r0
 801fd6c:	460c      	mov	r4, r1
 801fd6e:	d507      	bpl.n	801fd80 <__smakebuf_r+0x1c>
 801fd70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801fd74:	6023      	str	r3, [r4, #0]
 801fd76:	6123      	str	r3, [r4, #16]
 801fd78:	2301      	movs	r3, #1
 801fd7a:	6163      	str	r3, [r4, #20]
 801fd7c:	b002      	add	sp, #8
 801fd7e:	bd70      	pop	{r4, r5, r6, pc}
 801fd80:	ab01      	add	r3, sp, #4
 801fd82:	466a      	mov	r2, sp
 801fd84:	f7ff ffc8 	bl	801fd18 <__swhatbuf_r>
 801fd88:	9900      	ldr	r1, [sp, #0]
 801fd8a:	4605      	mov	r5, r0
 801fd8c:	4630      	mov	r0, r6
 801fd8e:	f7fc ffcb 	bl	801cd28 <_malloc_r>
 801fd92:	b948      	cbnz	r0, 801fda8 <__smakebuf_r+0x44>
 801fd94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fd98:	059a      	lsls	r2, r3, #22
 801fd9a:	d4ef      	bmi.n	801fd7c <__smakebuf_r+0x18>
 801fd9c:	f023 0303 	bic.w	r3, r3, #3
 801fda0:	f043 0302 	orr.w	r3, r3, #2
 801fda4:	81a3      	strh	r3, [r4, #12]
 801fda6:	e7e3      	b.n	801fd70 <__smakebuf_r+0xc>
 801fda8:	89a3      	ldrh	r3, [r4, #12]
 801fdaa:	6020      	str	r0, [r4, #0]
 801fdac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fdb0:	81a3      	strh	r3, [r4, #12]
 801fdb2:	9b00      	ldr	r3, [sp, #0]
 801fdb4:	6163      	str	r3, [r4, #20]
 801fdb6:	9b01      	ldr	r3, [sp, #4]
 801fdb8:	6120      	str	r0, [r4, #16]
 801fdba:	b15b      	cbz	r3, 801fdd4 <__smakebuf_r+0x70>
 801fdbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fdc0:	4630      	mov	r0, r6
 801fdc2:	f000 f81d 	bl	801fe00 <_isatty_r>
 801fdc6:	b128      	cbz	r0, 801fdd4 <__smakebuf_r+0x70>
 801fdc8:	89a3      	ldrh	r3, [r4, #12]
 801fdca:	f023 0303 	bic.w	r3, r3, #3
 801fdce:	f043 0301 	orr.w	r3, r3, #1
 801fdd2:	81a3      	strh	r3, [r4, #12]
 801fdd4:	89a3      	ldrh	r3, [r4, #12]
 801fdd6:	431d      	orrs	r5, r3
 801fdd8:	81a5      	strh	r5, [r4, #12]
 801fdda:	e7cf      	b.n	801fd7c <__smakebuf_r+0x18>

0801fddc <_fstat_r>:
 801fddc:	b538      	push	{r3, r4, r5, lr}
 801fdde:	4d07      	ldr	r5, [pc, #28]	; (801fdfc <_fstat_r+0x20>)
 801fde0:	2300      	movs	r3, #0
 801fde2:	4604      	mov	r4, r0
 801fde4:	4608      	mov	r0, r1
 801fde6:	4611      	mov	r1, r2
 801fde8:	602b      	str	r3, [r5, #0]
 801fdea:	f7e4 f8cc 	bl	8003f86 <_fstat>
 801fdee:	1c43      	adds	r3, r0, #1
 801fdf0:	d102      	bne.n	801fdf8 <_fstat_r+0x1c>
 801fdf2:	682b      	ldr	r3, [r5, #0]
 801fdf4:	b103      	cbz	r3, 801fdf8 <_fstat_r+0x1c>
 801fdf6:	6023      	str	r3, [r4, #0]
 801fdf8:	bd38      	pop	{r3, r4, r5, pc}
 801fdfa:	bf00      	nop
 801fdfc:	24003620 	.word	0x24003620

0801fe00 <_isatty_r>:
 801fe00:	b538      	push	{r3, r4, r5, lr}
 801fe02:	4d06      	ldr	r5, [pc, #24]	; (801fe1c <_isatty_r+0x1c>)
 801fe04:	2300      	movs	r3, #0
 801fe06:	4604      	mov	r4, r0
 801fe08:	4608      	mov	r0, r1
 801fe0a:	602b      	str	r3, [r5, #0]
 801fe0c:	f7e4 f8cb 	bl	8003fa6 <_isatty>
 801fe10:	1c43      	adds	r3, r0, #1
 801fe12:	d102      	bne.n	801fe1a <_isatty_r+0x1a>
 801fe14:	682b      	ldr	r3, [r5, #0]
 801fe16:	b103      	cbz	r3, 801fe1a <_isatty_r+0x1a>
 801fe18:	6023      	str	r3, [r4, #0]
 801fe1a:	bd38      	pop	{r3, r4, r5, pc}
 801fe1c:	24003620 	.word	0x24003620

0801fe20 <_init>:
 801fe20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fe22:	bf00      	nop
 801fe24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fe26:	bc08      	pop	{r3}
 801fe28:	469e      	mov	lr, r3
 801fe2a:	4770      	bx	lr

0801fe2c <_fini>:
 801fe2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fe2e:	bf00      	nop
 801fe30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fe32:	bc08      	pop	{r3}
 801fe34:	469e      	mov	lr, r3
 801fe36:	4770      	bx	lr
