
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fa70  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bdc  0801fd40  0801fd40  0002fd40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802091c  0802091c  0003091c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08020924  08020924  00030924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08020928  08020928  00030928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002c8  24000000  0802092c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003368  240002c8  08020bf4  000402c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  24003630  08020bf4  00043630  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000402c8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000402f6  2**0
                  CONTENTS, READONLY
 11 .debug_info   00037d4f  00000000  00000000  00040339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000659f  00000000  00000000  00078088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002db0  00000000  00000000  0007e628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000237c  00000000  00000000  000813d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000b5c0  00000000  00000000  00083754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003f2ed  00000000  00000000  0008ed14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017fe74  00000000  00000000  000ce001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000dc94  00000000  00000000  0024de78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  0025bb0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002c8 	.word	0x240002c8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801fd28 	.word	0x0801fd28

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002cc 	.word	0x240002cc
 800030c:	0801fd28 	.word	0x0801fd28

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	; 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9a8 	b.w	8000ac0 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9e08      	ldr	r6, [sp, #32]
 80007fe:	460d      	mov	r5, r1
 8000800:	4604      	mov	r4, r0
 8000802:	460f      	mov	r7, r1
 8000804:	2b00      	cmp	r3, #0
 8000806:	d14a      	bne.n	800089e <__udivmoddi4+0xa6>
 8000808:	428a      	cmp	r2, r1
 800080a:	4694      	mov	ip, r2
 800080c:	d965      	bls.n	80008da <__udivmoddi4+0xe2>
 800080e:	fab2 f382 	clz	r3, r2
 8000812:	b143      	cbz	r3, 8000826 <__udivmoddi4+0x2e>
 8000814:	fa02 fc03 	lsl.w	ip, r2, r3
 8000818:	f1c3 0220 	rsb	r2, r3, #32
 800081c:	409f      	lsls	r7, r3
 800081e:	fa20 f202 	lsr.w	r2, r0, r2
 8000822:	4317      	orrs	r7, r2
 8000824:	409c      	lsls	r4, r3
 8000826:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800082a:	fa1f f58c 	uxth.w	r5, ip
 800082e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000832:	0c22      	lsrs	r2, r4, #16
 8000834:	fb0e 7711 	mls	r7, lr, r1, r7
 8000838:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800083c:	fb01 f005 	mul.w	r0, r1, r5
 8000840:	4290      	cmp	r0, r2
 8000842:	d90a      	bls.n	800085a <__udivmoddi4+0x62>
 8000844:	eb1c 0202 	adds.w	r2, ip, r2
 8000848:	f101 37ff 	add.w	r7, r1, #4294967295
 800084c:	f080 811c 	bcs.w	8000a88 <__udivmoddi4+0x290>
 8000850:	4290      	cmp	r0, r2
 8000852:	f240 8119 	bls.w	8000a88 <__udivmoddi4+0x290>
 8000856:	3902      	subs	r1, #2
 8000858:	4462      	add	r2, ip
 800085a:	1a12      	subs	r2, r2, r0
 800085c:	b2a4      	uxth	r4, r4
 800085e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000862:	fb0e 2210 	mls	r2, lr, r0, r2
 8000866:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800086a:	fb00 f505 	mul.w	r5, r0, r5
 800086e:	42a5      	cmp	r5, r4
 8000870:	d90a      	bls.n	8000888 <__udivmoddi4+0x90>
 8000872:	eb1c 0404 	adds.w	r4, ip, r4
 8000876:	f100 32ff 	add.w	r2, r0, #4294967295
 800087a:	f080 8107 	bcs.w	8000a8c <__udivmoddi4+0x294>
 800087e:	42a5      	cmp	r5, r4
 8000880:	f240 8104 	bls.w	8000a8c <__udivmoddi4+0x294>
 8000884:	4464      	add	r4, ip
 8000886:	3802      	subs	r0, #2
 8000888:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800088c:	1b64      	subs	r4, r4, r5
 800088e:	2100      	movs	r1, #0
 8000890:	b11e      	cbz	r6, 800089a <__udivmoddi4+0xa2>
 8000892:	40dc      	lsrs	r4, r3
 8000894:	2300      	movs	r3, #0
 8000896:	e9c6 4300 	strd	r4, r3, [r6]
 800089a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089e:	428b      	cmp	r3, r1
 80008a0:	d908      	bls.n	80008b4 <__udivmoddi4+0xbc>
 80008a2:	2e00      	cmp	r6, #0
 80008a4:	f000 80ed 	beq.w	8000a82 <__udivmoddi4+0x28a>
 80008a8:	2100      	movs	r1, #0
 80008aa:	e9c6 0500 	strd	r0, r5, [r6]
 80008ae:	4608      	mov	r0, r1
 80008b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b4:	fab3 f183 	clz	r1, r3
 80008b8:	2900      	cmp	r1, #0
 80008ba:	d149      	bne.n	8000950 <__udivmoddi4+0x158>
 80008bc:	42ab      	cmp	r3, r5
 80008be:	d302      	bcc.n	80008c6 <__udivmoddi4+0xce>
 80008c0:	4282      	cmp	r2, r0
 80008c2:	f200 80f8 	bhi.w	8000ab6 <__udivmoddi4+0x2be>
 80008c6:	1a84      	subs	r4, r0, r2
 80008c8:	eb65 0203 	sbc.w	r2, r5, r3
 80008cc:	2001      	movs	r0, #1
 80008ce:	4617      	mov	r7, r2
 80008d0:	2e00      	cmp	r6, #0
 80008d2:	d0e2      	beq.n	800089a <__udivmoddi4+0xa2>
 80008d4:	e9c6 4700 	strd	r4, r7, [r6]
 80008d8:	e7df      	b.n	800089a <__udivmoddi4+0xa2>
 80008da:	b902      	cbnz	r2, 80008de <__udivmoddi4+0xe6>
 80008dc:	deff      	udf	#255	; 0xff
 80008de:	fab2 f382 	clz	r3, r2
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	f040 8090 	bne.w	8000a08 <__udivmoddi4+0x210>
 80008e8:	1a8a      	subs	r2, r1, r2
 80008ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ee:	fa1f fe8c 	uxth.w	lr, ip
 80008f2:	2101      	movs	r1, #1
 80008f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008f8:	fb07 2015 	mls	r0, r7, r5, r2
 80008fc:	0c22      	lsrs	r2, r4, #16
 80008fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000902:	fb0e f005 	mul.w	r0, lr, r5
 8000906:	4290      	cmp	r0, r2
 8000908:	d908      	bls.n	800091c <__udivmoddi4+0x124>
 800090a:	eb1c 0202 	adds.w	r2, ip, r2
 800090e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000912:	d202      	bcs.n	800091a <__udivmoddi4+0x122>
 8000914:	4290      	cmp	r0, r2
 8000916:	f200 80cb 	bhi.w	8000ab0 <__udivmoddi4+0x2b8>
 800091a:	4645      	mov	r5, r8
 800091c:	1a12      	subs	r2, r2, r0
 800091e:	b2a4      	uxth	r4, r4
 8000920:	fbb2 f0f7 	udiv	r0, r2, r7
 8000924:	fb07 2210 	mls	r2, r7, r0, r2
 8000928:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800092c:	fb0e fe00 	mul.w	lr, lr, r0
 8000930:	45a6      	cmp	lr, r4
 8000932:	d908      	bls.n	8000946 <__udivmoddi4+0x14e>
 8000934:	eb1c 0404 	adds.w	r4, ip, r4
 8000938:	f100 32ff 	add.w	r2, r0, #4294967295
 800093c:	d202      	bcs.n	8000944 <__udivmoddi4+0x14c>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f200 80bb 	bhi.w	8000aba <__udivmoddi4+0x2c2>
 8000944:	4610      	mov	r0, r2
 8000946:	eba4 040e 	sub.w	r4, r4, lr
 800094a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800094e:	e79f      	b.n	8000890 <__udivmoddi4+0x98>
 8000950:	f1c1 0720 	rsb	r7, r1, #32
 8000954:	408b      	lsls	r3, r1
 8000956:	fa22 fc07 	lsr.w	ip, r2, r7
 800095a:	ea4c 0c03 	orr.w	ip, ip, r3
 800095e:	fa05 f401 	lsl.w	r4, r5, r1
 8000962:	fa20 f307 	lsr.w	r3, r0, r7
 8000966:	40fd      	lsrs	r5, r7
 8000968:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800096c:	4323      	orrs	r3, r4
 800096e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000972:	fa1f fe8c 	uxth.w	lr, ip
 8000976:	fb09 5518 	mls	r5, r9, r8, r5
 800097a:	0c1c      	lsrs	r4, r3, #16
 800097c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000980:	fb08 f50e 	mul.w	r5, r8, lr
 8000984:	42a5      	cmp	r5, r4
 8000986:	fa02 f201 	lsl.w	r2, r2, r1
 800098a:	fa00 f001 	lsl.w	r0, r0, r1
 800098e:	d90b      	bls.n	80009a8 <__udivmoddi4+0x1b0>
 8000990:	eb1c 0404 	adds.w	r4, ip, r4
 8000994:	f108 3aff 	add.w	sl, r8, #4294967295
 8000998:	f080 8088 	bcs.w	8000aac <__udivmoddi4+0x2b4>
 800099c:	42a5      	cmp	r5, r4
 800099e:	f240 8085 	bls.w	8000aac <__udivmoddi4+0x2b4>
 80009a2:	f1a8 0802 	sub.w	r8, r8, #2
 80009a6:	4464      	add	r4, ip
 80009a8:	1b64      	subs	r4, r4, r5
 80009aa:	b29d      	uxth	r5, r3
 80009ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80009b0:	fb09 4413 	mls	r4, r9, r3, r4
 80009b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80009bc:	45a6      	cmp	lr, r4
 80009be:	d908      	bls.n	80009d2 <__udivmoddi4+0x1da>
 80009c0:	eb1c 0404 	adds.w	r4, ip, r4
 80009c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80009c8:	d26c      	bcs.n	8000aa4 <__udivmoddi4+0x2ac>
 80009ca:	45a6      	cmp	lr, r4
 80009cc:	d96a      	bls.n	8000aa4 <__udivmoddi4+0x2ac>
 80009ce:	3b02      	subs	r3, #2
 80009d0:	4464      	add	r4, ip
 80009d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009d6:	fba3 9502 	umull	r9, r5, r3, r2
 80009da:	eba4 040e 	sub.w	r4, r4, lr
 80009de:	42ac      	cmp	r4, r5
 80009e0:	46c8      	mov	r8, r9
 80009e2:	46ae      	mov	lr, r5
 80009e4:	d356      	bcc.n	8000a94 <__udivmoddi4+0x29c>
 80009e6:	d053      	beq.n	8000a90 <__udivmoddi4+0x298>
 80009e8:	b156      	cbz	r6, 8000a00 <__udivmoddi4+0x208>
 80009ea:	ebb0 0208 	subs.w	r2, r0, r8
 80009ee:	eb64 040e 	sbc.w	r4, r4, lr
 80009f2:	fa04 f707 	lsl.w	r7, r4, r7
 80009f6:	40ca      	lsrs	r2, r1
 80009f8:	40cc      	lsrs	r4, r1
 80009fa:	4317      	orrs	r7, r2
 80009fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000a00:	4618      	mov	r0, r3
 8000a02:	2100      	movs	r1, #0
 8000a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a08:	f1c3 0120 	rsb	r1, r3, #32
 8000a0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a10:	fa20 f201 	lsr.w	r2, r0, r1
 8000a14:	fa25 f101 	lsr.w	r1, r5, r1
 8000a18:	409d      	lsls	r5, r3
 8000a1a:	432a      	orrs	r2, r5
 8000a1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a20:	fa1f fe8c 	uxth.w	lr, ip
 8000a24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a28:	fb07 1510 	mls	r5, r7, r0, r1
 8000a2c:	0c11      	lsrs	r1, r2, #16
 8000a2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a32:	fb00 f50e 	mul.w	r5, r0, lr
 8000a36:	428d      	cmp	r5, r1
 8000a38:	fa04 f403 	lsl.w	r4, r4, r3
 8000a3c:	d908      	bls.n	8000a50 <__udivmoddi4+0x258>
 8000a3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a46:	d22f      	bcs.n	8000aa8 <__udivmoddi4+0x2b0>
 8000a48:	428d      	cmp	r5, r1
 8000a4a:	d92d      	bls.n	8000aa8 <__udivmoddi4+0x2b0>
 8000a4c:	3802      	subs	r0, #2
 8000a4e:	4461      	add	r1, ip
 8000a50:	1b49      	subs	r1, r1, r5
 8000a52:	b292      	uxth	r2, r2
 8000a54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a58:	fb07 1115 	mls	r1, r7, r5, r1
 8000a5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a60:	fb05 f10e 	mul.w	r1, r5, lr
 8000a64:	4291      	cmp	r1, r2
 8000a66:	d908      	bls.n	8000a7a <__udivmoddi4+0x282>
 8000a68:	eb1c 0202 	adds.w	r2, ip, r2
 8000a6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a70:	d216      	bcs.n	8000aa0 <__udivmoddi4+0x2a8>
 8000a72:	4291      	cmp	r1, r2
 8000a74:	d914      	bls.n	8000aa0 <__udivmoddi4+0x2a8>
 8000a76:	3d02      	subs	r5, #2
 8000a78:	4462      	add	r2, ip
 8000a7a:	1a52      	subs	r2, r2, r1
 8000a7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a80:	e738      	b.n	80008f4 <__udivmoddi4+0xfc>
 8000a82:	4631      	mov	r1, r6
 8000a84:	4630      	mov	r0, r6
 8000a86:	e708      	b.n	800089a <__udivmoddi4+0xa2>
 8000a88:	4639      	mov	r1, r7
 8000a8a:	e6e6      	b.n	800085a <__udivmoddi4+0x62>
 8000a8c:	4610      	mov	r0, r2
 8000a8e:	e6fb      	b.n	8000888 <__udivmoddi4+0x90>
 8000a90:	4548      	cmp	r0, r9
 8000a92:	d2a9      	bcs.n	80009e8 <__udivmoddi4+0x1f0>
 8000a94:	ebb9 0802 	subs.w	r8, r9, r2
 8000a98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	e7a3      	b.n	80009e8 <__udivmoddi4+0x1f0>
 8000aa0:	4645      	mov	r5, r8
 8000aa2:	e7ea      	b.n	8000a7a <__udivmoddi4+0x282>
 8000aa4:	462b      	mov	r3, r5
 8000aa6:	e794      	b.n	80009d2 <__udivmoddi4+0x1da>
 8000aa8:	4640      	mov	r0, r8
 8000aaa:	e7d1      	b.n	8000a50 <__udivmoddi4+0x258>
 8000aac:	46d0      	mov	r8, sl
 8000aae:	e77b      	b.n	80009a8 <__udivmoddi4+0x1b0>
 8000ab0:	3d02      	subs	r5, #2
 8000ab2:	4462      	add	r2, ip
 8000ab4:	e732      	b.n	800091c <__udivmoddi4+0x124>
 8000ab6:	4608      	mov	r0, r1
 8000ab8:	e70a      	b.n	80008d0 <__udivmoddi4+0xd8>
 8000aba:	4464      	add	r4, ip
 8000abc:	3802      	subs	r0, #2
 8000abe:	e742      	b.n	8000946 <__udivmoddi4+0x14e>

08000ac0 <__aeabi_idiv0>:
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <setServo>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;

void setServo(int servoNum, float angle) {
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal = (int) (3000 + (4000 * (angle / 100)));
 8000ad0:	ed97 7a00 	vldr	s14, [r7]
 8000ad4:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000b44 <setServo+0x80>
 8000ad8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000adc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000b48 <setServo+0x84>
 8000ae0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ae4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000b4c <setServo+0x88>
 8000ae8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000aec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000af0:	ee17 3a90 	vmov	r3, s15
 8000af4:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	3b01      	subs	r3, #1
 8000afa:	2b03      	cmp	r3, #3
 8000afc:	d81a      	bhi.n	8000b34 <setServo+0x70>
 8000afe:	a201      	add	r2, pc, #4	; (adr r2, 8000b04 <setServo+0x40>)
 8000b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b04:	08000b15 	.word	0x08000b15
 8000b08:	08000b1d 	.word	0x08000b1d
 8000b0c:	08000b25 	.word	0x08000b25
 8000b10:	08000b2d 	.word	0x08000b2d
	case 1:
		TIM4->CCR4 = timerVal;
 8000b14:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <setServo+0x8c>)
 8000b16:	89fb      	ldrh	r3, [r7, #14]
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000b1a:	e00c      	b.n	8000b36 <setServo+0x72>
	case 2:
		TIM4->CCR3 = timerVal;
 8000b1c:	4a0c      	ldr	r2, [pc, #48]	; (8000b50 <setServo+0x8c>)
 8000b1e:	89fb      	ldrh	r3, [r7, #14]
 8000b20:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000b22:	e008      	b.n	8000b36 <setServo+0x72>
	case 3:
		TIM4->CCR2 = timerVal;
 8000b24:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <setServo+0x8c>)
 8000b26:	89fb      	ldrh	r3, [r7, #14]
 8000b28:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000b2a:	e004      	b.n	8000b36 <setServo+0x72>
	case 4:
		TIM4->CCR1 = timerVal;
 8000b2c:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <setServo+0x8c>)
 8000b2e:	89fb      	ldrh	r3, [r7, #14]
 8000b30:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 8000b32:	e000      	b.n	8000b36 <setServo+0x72>

	default:
		break;
 8000b34:	bf00      	nop
	}
}
 8000b36:	bf00      	nop
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	42c80000 	.word	0x42c80000
 8000b48:	457a0000 	.word	0x457a0000
 8000b4c:	453b8000 	.word	0x453b8000
 8000b50:	40000800 	.word	0x40000800

08000b54 <setLEDs>:

void setLEDs(void) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08e      	sub	sp, #56	; 0x38
 8000b58:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8000b5e:	e181      	b.n	8000e64 <setLEDs+0x310>
			i++) {
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 8000b60:	4aa1      	ldr	r2, [pc, #644]	; (8000de8 <setLEDs+0x294>)
 8000b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b68:	2b03      	cmp	r3, #3
 8000b6a:	f200 8177 	bhi.w	8000e5c <setLEDs+0x308>
 8000b6e:	a201      	add	r2, pc, #4	; (adr r2, 8000b74 <setLEDs+0x20>)
 8000b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b74:	08000b85 	.word	0x08000b85
 8000b78:	08000c35 	.word	0x08000c35
 8000b7c:	08000ce5 	.word	0x08000ce5
 8000b80:	08000d95 	.word	0x08000d95
		case 0:
			for (int j = 0; j < 3; j++) {
 8000b84:	2300      	movs	r3, #0
 8000b86:	633b      	str	r3, [r7, #48]	; 0x30
 8000b88:	e042      	b.n	8000c10 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b8e:	e039      	b.n	8000c04 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b90:	4996      	ldr	r1, [pc, #600]	; (8000dec <setLEDs+0x298>)
 8000b92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b94:	4613      	mov	r3, r2
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	4413      	add	r3, r2
 8000b9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b9c:	4413      	add	r3, r2
 8000b9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ba2:	2180      	movs	r1, #128	; 0x80
 8000ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ba6:	fa41 f202 	asr.w	r2, r1, r2
 8000baa:	4013      	ands	r3, r2
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d013      	beq.n	8000bd8 <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bb2:	00da      	lsls	r2, r3, #3
 8000bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bb6:	18d1      	adds	r1, r2, r3
 8000bb8:	4a8b      	ldr	r2, [pc, #556]	; (8000de8 <setLEDs+0x294>)
 8000bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	4413      	add	r3, r2
 8000bc0:	685a      	ldr	r2, [r3, #4]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	4413      	add	r3, r2
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	440b      	add	r3, r1
								+ 8] = 60;
 8000bcc:	3308      	adds	r3, #8
 8000bce:	4a88      	ldr	r2, [pc, #544]	; (8000df0 <setLEDs+0x29c>)
 8000bd0:	213c      	movs	r1, #60	; 0x3c
 8000bd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000bd6:	e012      	b.n	8000bfe <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bda:	00da      	lsls	r2, r3, #3
 8000bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bde:	18d1      	adds	r1, r2, r3
 8000be0:	4a81      	ldr	r2, [pc, #516]	; (8000de8 <setLEDs+0x294>)
 8000be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	4413      	add	r3, r2
 8000be8:	685a      	ldr	r2, [r3, #4]
 8000bea:	4613      	mov	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	4413      	add	r3, r2
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	440b      	add	r3, r1
								+ 8] = 30;
 8000bf4:	3308      	adds	r3, #8
 8000bf6:	4a7e      	ldr	r2, [pc, #504]	; (8000df0 <setLEDs+0x29c>)
 8000bf8:	211e      	movs	r1, #30
 8000bfa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c00:	3301      	adds	r3, #1
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c06:	2b07      	cmp	r3, #7
 8000c08:	ddc2      	ble.n	8000b90 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	633b      	str	r3, [r7, #48]	; 0x30
 8000c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	ddb9      	ble.n	8000b8a <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 8000c16:	2380      	movs	r3, #128	; 0x80
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c1a:	e007      	b.n	8000c2c <setLEDs+0xd8>
					i++) {
				LED_PWM_Data_0[i] = 0;
 8000c1c:	4a74      	ldr	r2, [pc, #464]	; (8000df0 <setLEDs+0x29c>)
 8000c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c20:	2100      	movs	r1, #0
 8000c22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c28:	3301      	adds	r3, #1
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 8000c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c2e:	2bb1      	cmp	r3, #177	; 0xb1
 8000c30:	ddf4      	ble.n	8000c1c <setLEDs+0xc8>
			}
			break;
 8000c32:	e114      	b.n	8000e5e <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
 8000c38:	e042      	b.n	8000cc0 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
 8000c3e:	e039      	b.n	8000cb4 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000c40:	496a      	ldr	r1, [pc, #424]	; (8000dec <setLEDs+0x298>)
 8000c42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c44:	4613      	mov	r3, r2
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	4413      	add	r3, r2
 8000c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c4c:	4413      	add	r3, r2
 8000c4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c52:	2180      	movs	r1, #128	; 0x80
 8000c54:	6a3a      	ldr	r2, [r7, #32]
 8000c56:	fa41 f202 	asr.w	r2, r1, r2
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d013      	beq.n	8000c88 <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	00da      	lsls	r2, r3, #3
 8000c64:	6a3b      	ldr	r3, [r7, #32]
 8000c66:	18d1      	adds	r1, r2, r3
 8000c68:	4a5f      	ldr	r2, [pc, #380]	; (8000de8 <setLEDs+0x294>)
 8000c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	4413      	add	r3, r2
 8000c70:	685a      	ldr	r2, [r3, #4]
 8000c72:	4613      	mov	r3, r2
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	4413      	add	r3, r2
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	440b      	add	r3, r1
								+ 8] = 60;
 8000c7c:	3308      	adds	r3, #8
 8000c7e:	4a5d      	ldr	r2, [pc, #372]	; (8000df4 <setLEDs+0x2a0>)
 8000c80:	213c      	movs	r1, #60	; 0x3c
 8000c82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c86:	e012      	b.n	8000cae <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8a:	00da      	lsls	r2, r3, #3
 8000c8c:	6a3b      	ldr	r3, [r7, #32]
 8000c8e:	18d1      	adds	r1, r2, r3
 8000c90:	4a55      	ldr	r2, [pc, #340]	; (8000de8 <setLEDs+0x294>)
 8000c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	4413      	add	r3, r2
 8000c98:	685a      	ldr	r2, [r3, #4]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	4413      	add	r3, r2
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	440b      	add	r3, r1
								+ 8] = 30;
 8000ca4:	3308      	adds	r3, #8
 8000ca6:	4a53      	ldr	r2, [pc, #332]	; (8000df4 <setLEDs+0x2a0>)
 8000ca8:	211e      	movs	r1, #30
 8000caa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000cae:	6a3b      	ldr	r3, [r7, #32]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	623b      	str	r3, [r7, #32]
 8000cb4:	6a3b      	ldr	r3, [r7, #32]
 8000cb6:	2b07      	cmp	r3, #7
 8000cb8:	ddc2      	ble.n	8000c40 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	ddb9      	ble.n	8000c3a <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 8000cc6:	2380      	movs	r3, #128	; 0x80
 8000cc8:	61fb      	str	r3, [r7, #28]
 8000cca:	e007      	b.n	8000cdc <setLEDs+0x188>
					i++) {
				LED_PWM_Data_1[i] = 0;
 8000ccc:	4a49      	ldr	r2, [pc, #292]	; (8000df4 <setLEDs+0x2a0>)
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	61fb      	str	r3, [r7, #28]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	2bb1      	cmp	r3, #177	; 0xb1
 8000ce0:	ddf4      	ble.n	8000ccc <setLEDs+0x178>
			}
			break;
 8000ce2:	e0bc      	b.n	8000e5e <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61bb      	str	r3, [r7, #24]
 8000ce8:	e042      	b.n	8000d70 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	e039      	b.n	8000d64 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000cf0:	493e      	ldr	r1, [pc, #248]	; (8000dec <setLEDs+0x298>)
 8000cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	4413      	add	r3, r2
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d02:	2180      	movs	r1, #128	; 0x80
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	fa41 f202 	asr.w	r2, r1, r2
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d013      	beq.n	8000d38 <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	00da      	lsls	r2, r3, #3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	18d1      	adds	r1, r2, r3
 8000d18:	4a33      	ldr	r2, [pc, #204]	; (8000de8 <setLEDs+0x294>)
 8000d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	4413      	add	r3, r2
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	4613      	mov	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	440b      	add	r3, r1
								+ 8] = 60;
 8000d2c:	3308      	adds	r3, #8
 8000d2e:	4a32      	ldr	r2, [pc, #200]	; (8000df8 <setLEDs+0x2a4>)
 8000d30:	213c      	movs	r1, #60	; 0x3c
 8000d32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000d36:	e012      	b.n	8000d5e <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	00da      	lsls	r2, r3, #3
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	18d1      	adds	r1, r2, r3
 8000d40:	4a29      	ldr	r2, [pc, #164]	; (8000de8 <setLEDs+0x294>)
 8000d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	4413      	add	r3, r2
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	4413      	add	r3, r2
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	440b      	add	r3, r1
								+ 8] = 30;
 8000d54:	3308      	adds	r3, #8
 8000d56:	4a28      	ldr	r2, [pc, #160]	; (8000df8 <setLEDs+0x2a4>)
 8000d58:	211e      	movs	r1, #30
 8000d5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3301      	adds	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	2b07      	cmp	r3, #7
 8000d68:	ddc2      	ble.n	8000cf0 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	61bb      	str	r3, [r7, #24]
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	ddb9      	ble.n	8000cea <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 8000d76:	2338      	movs	r3, #56	; 0x38
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	e007      	b.n	8000d8c <setLEDs+0x238>
					i++) {
				LED_PWM_Data_2[i] = 0;
 8000d7c:	4a1e      	ldr	r2, [pc, #120]	; (8000df8 <setLEDs+0x2a4>)
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	2100      	movs	r1, #0
 8000d82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	613b      	str	r3, [r7, #16]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	2b69      	cmp	r3, #105	; 0x69
 8000d90:	ddf4      	ble.n	8000d7c <setLEDs+0x228>
			}
			break;
 8000d92:	e064      	b.n	8000e5e <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	e04e      	b.n	8000e38 <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	e045      	b.n	8000e2c <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000da0:	4912      	ldr	r1, [pc, #72]	; (8000dec <setLEDs+0x298>)
 8000da2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000da4:	4613      	mov	r3, r2
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	4413      	add	r3, r2
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	4413      	add	r3, r2
 8000dae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000db2:	2180      	movs	r1, #128	; 0x80
 8000db4:	68ba      	ldr	r2, [r7, #8]
 8000db6:	fa41 f202 	asr.w	r2, r1, r2
 8000dba:	4013      	ands	r3, r2
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d01f      	beq.n	8000e00 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	00da      	lsls	r2, r3, #3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	18d1      	adds	r1, r2, r3
 8000dc8:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <setLEDs+0x294>)
 8000dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	4413      	add	r3, r2
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	4413      	add	r3, r2
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	440b      	add	r3, r1
								+ 8] = 60;
 8000ddc:	3308      	adds	r3, #8
 8000dde:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <setLEDs+0x2a8>)
 8000de0:	213c      	movs	r1, #60	; 0x3c
 8000de2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000de6:	e01e      	b.n	8000e26 <setLEDs+0x2d2>
 8000de8:	0801ffd0 	.word	0x0801ffd0
 8000dec:	24000bc4 	.word	0x24000bc4
 8000df0:	240002e4 	.word	0x240002e4
 8000df4:	240005ac 	.word	0x240005ac
 8000df8:	24000874 	.word	0x24000874
 8000dfc:	24000a1c 	.word	0x24000a1c
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	00da      	lsls	r2, r3, #3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	18d1      	adds	r1, r2, r3
 8000e08:	4a26      	ldr	r2, [pc, #152]	; (8000ea4 <setLEDs+0x350>)
 8000e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	4413      	add	r3, r2
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	4613      	mov	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4413      	add	r3, r2
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	440b      	add	r3, r1
								+ 8] = 30;
 8000e1c:	3308      	adds	r3, #8
 8000e1e:	4a22      	ldr	r2, [pc, #136]	; (8000ea8 <setLEDs+0x354>)
 8000e20:	211e      	movs	r1, #30
 8000e22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	2b07      	cmp	r3, #7
 8000e30:	ddb6      	ble.n	8000da0 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	3301      	adds	r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	ddad      	ble.n	8000d9a <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 8000e3e:	2338      	movs	r3, #56	; 0x38
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	e007      	b.n	8000e54 <setLEDs+0x300>
					i++) {
				LED_PWM_Data_3[i] = 0;
 8000e44:	4a18      	ldr	r2, [pc, #96]	; (8000ea8 <setLEDs+0x354>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3301      	adds	r3, #1
 8000e52:	607b      	str	r3, [r7, #4]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b69      	cmp	r3, #105	; 0x69
 8000e58:	ddf4      	ble.n	8000e44 <setLEDs+0x2f0>
			}
			break;
 8000e5a:	e000      	b.n	8000e5e <setLEDs+0x30a>
		default:
			break;
 8000e5c:	bf00      	nop
			i++) {
 8000e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e60:	3301      	adds	r3, #1
 8000e62:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8000e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e66:	2b0d      	cmp	r3, #13
 8000e68:	f77f ae7a 	ble.w	8000b60 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0,
 8000e6c:	23b2      	movs	r3, #178	; 0xb2
 8000e6e:	4a0f      	ldr	r2, [pc, #60]	; (8000eac <setLEDs+0x358>)
 8000e70:	210c      	movs	r1, #12
 8000e72:	480f      	ldr	r0, [pc, #60]	; (8000eb0 <setLEDs+0x35c>)
 8000e74:	f00f fc7a 	bl	801076c <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1,
 8000e78:	23b2      	movs	r3, #178	; 0xb2
 8000e7a:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <setLEDs+0x360>)
 8000e7c:	2108      	movs	r1, #8
 8000e7e:	480e      	ldr	r0, [pc, #56]	; (8000eb8 <setLEDs+0x364>)
 8000e80:	f00f fc74 	bl	801076c <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2,
 8000e84:	236a      	movs	r3, #106	; 0x6a
 8000e86:	4a0d      	ldr	r2, [pc, #52]	; (8000ebc <setLEDs+0x368>)
 8000e88:	2104      	movs	r1, #4
 8000e8a:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <setLEDs+0x36c>)
 8000e8c:	f00f fc6e 	bl	801076c <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3,
 8000e90:	236a      	movs	r3, #106	; 0x6a
 8000e92:	4a05      	ldr	r2, [pc, #20]	; (8000ea8 <setLEDs+0x354>)
 8000e94:	2100      	movs	r1, #0
 8000e96:	480a      	ldr	r0, [pc, #40]	; (8000ec0 <setLEDs+0x36c>)
 8000e98:	f00f fc68 	bl	801076c <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3

}
 8000e9c:	bf00      	nop
 8000e9e:	3738      	adds	r7, #56	; 0x38
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	0801ffd0 	.word	0x0801ffd0
 8000ea8:	24000a1c 	.word	0x24000a1c
 8000eac:	240002e4 	.word	0x240002e4
 8000eb0:	24001228 	.word	0x24001228
 8000eb4:	240005ac 	.word	0x240005ac
 8000eb8:	24001144 	.word	0x24001144
 8000ebc:	24000874 	.word	0x24000874
 8000ec0:	24001190 	.word	0x24001190

08000ec4 <LoRA_Read_Register>:
	} else {
		return normalized - LENGTH * 2 / 3;
	}
}

uint8_t LoRA_Read_Register(uint8_t addr) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ed4:	480d      	ldr	r0, [pc, #52]	; (8000f0c <LoRA_Read_Register+0x48>)
 8000ed6:	f008 f86d 	bl	8008fb4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000eda:	1df9      	adds	r1, r7, #7
 8000edc:	2364      	movs	r3, #100	; 0x64
 8000ede:	2201      	movs	r2, #1
 8000ee0:	480b      	ldr	r0, [pc, #44]	; (8000f10 <LoRA_Read_Register+0x4c>)
 8000ee2:	f00e fe03 	bl	800faec <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000ee6:	f107 010f 	add.w	r1, r7, #15
 8000eea:	2364      	movs	r3, #100	; 0x64
 8000eec:	2201      	movs	r2, #1
 8000eee:	4808      	ldr	r0, [pc, #32]	; (8000f10 <LoRA_Read_Register+0x4c>)
 8000ef0:	f00e fff8 	bl	800fee4 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000efa:	4804      	ldr	r0, [pc, #16]	; (8000f0c <LoRA_Read_Register+0x48>)
 8000efc:	f008 f85a 	bl	8008fb4 <HAL_GPIO_WritePin>

	return reg_value;
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	58020000 	.word	0x58020000
 8000f10:	240010bc 	.word	0x240010bc

08000f14 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	460a      	mov	r2, r1
 8000f1e:	71fb      	strb	r3, [r7, #7]
 8000f20:	4613      	mov	r3, r2
 8000f22:	71bb      	strb	r3, [r7, #6]
	addr |= (1 << 7);
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f34:	480c      	ldr	r0, [pc, #48]	; (8000f68 <LoRA_Write_Register+0x54>)
 8000f36:	f008 f83d 	bl	8008fb4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000f3a:	1df9      	adds	r1, r7, #7
 8000f3c:	2364      	movs	r3, #100	; 0x64
 8000f3e:	2201      	movs	r2, #1
 8000f40:	480a      	ldr	r0, [pc, #40]	; (8000f6c <LoRA_Write_Register+0x58>)
 8000f42:	f00e fdd3 	bl	800faec <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000f46:	1db9      	adds	r1, r7, #6
 8000f48:	2364      	movs	r3, #100	; 0x64
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4807      	ldr	r0, [pc, #28]	; (8000f6c <LoRA_Write_Register+0x58>)
 8000f4e:	f00e fdcd 	bl	800faec <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f52:	2201      	movs	r2, #1
 8000f54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f58:	4803      	ldr	r0, [pc, #12]	; (8000f68 <LoRA_Write_Register+0x54>)
 8000f5a:	f008 f82b 	bl	8008fb4 <HAL_GPIO_WritePin>

}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	58020000 	.word	0x58020000
 8000f6c:	240010bc 	.word	0x240010bc

08000f70 <LoRA_sleep>:

void LoRA_sleep(void) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000f74:	2180      	movs	r1, #128	; 0x80
 8000f76:	2001      	movs	r0, #1
 8000f78:	f7ff ffcc 	bl	8000f14 <LoRA_Write_Register>
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency) {
 8000f80:	b5b0      	push	{r4, r5, r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t) frequency << 19) / 32000000;
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	17c8      	asrs	r0, r1, #31
 8000f8c:	460a      	mov	r2, r1
 8000f8e:	4603      	mov	r3, r0
 8000f90:	1355      	asrs	r5, r2, #13
 8000f92:	04d4      	lsls	r4, r2, #19
 8000f94:	4a18      	ldr	r2, [pc, #96]	; (8000ff8 <LoRA_set_frequency+0x78>)
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	4629      	mov	r1, r5
 8000f9e:	f7ff fbdb 	bl	8000758 <__aeabi_uldivmod>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t) (frf >> 16));
 8000faa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	0c02      	lsrs	r2, r0, #16
 8000fb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fbc:	0c0b      	lsrs	r3, r1, #16
 8000fbe:	b2d3      	uxtb	r3, r2
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	2006      	movs	r0, #6
 8000fc4:	f7ff ffa6 	bl	8000f14 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t) (frf >> 8));
 8000fc8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	f04f 0300 	mov.w	r3, #0
 8000fd4:	0a02      	lsrs	r2, r0, #8
 8000fd6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000fda:	0a0b      	lsrs	r3, r1, #8
 8000fdc:	b2d3      	uxtb	r3, r2
 8000fde:	4619      	mov	r1, r3
 8000fe0:	2007      	movs	r0, #7
 8000fe2:	f7ff ff97 	bl	8000f14 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t) (frf >> 0));
 8000fe6:	7a3b      	ldrb	r3, [r7, #8]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	2008      	movs	r0, #8
 8000fec:	f7ff ff92 	bl	8000f14 <LoRA_Write_Register>
}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ff8:	01e84800 	.word	0x01e84800

08000ffc <LoRA_setOCP>:

void LoRA_idle() {
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
}

void LoRA_setOCP(uint8_t mA) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
	uint8_t ocpTrim = 27;
 8001006:	231b      	movs	r3, #27
 8001008:	73fb      	strb	r3, [r7, #15]

	if (mA <= 120) {
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2b78      	cmp	r3, #120	; 0x78
 800100e:	d809      	bhi.n	8001024 <LoRA_setOCP+0x28>
		ocpTrim = (mA - 45) / 5;
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	3b2d      	subs	r3, #45	; 0x2d
 8001014:	4a11      	ldr	r2, [pc, #68]	; (800105c <LoRA_setOCP+0x60>)
 8001016:	fb82 1203 	smull	r1, r2, r2, r3
 800101a:	1052      	asrs	r2, r2, #1
 800101c:	17db      	asrs	r3, r3, #31
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	73fb      	strb	r3, [r7, #15]
 8001022:	e00b      	b.n	800103c <LoRA_setOCP+0x40>
	} else if (mA <= 240) {
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	2bf0      	cmp	r3, #240	; 0xf0
 8001028:	d808      	bhi.n	800103c <LoRA_setOCP+0x40>
		ocpTrim = (mA + 30) / 10;
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	331e      	adds	r3, #30
 800102e:	4a0b      	ldr	r2, [pc, #44]	; (800105c <LoRA_setOCP+0x60>)
 8001030:	fb82 1203 	smull	r1, r2, r2, r3
 8001034:	1092      	asrs	r2, r2, #2
 8001036:	17db      	asrs	r3, r3, #31
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	73fb      	strb	r3, [r7, #15]
	}

	LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	f003 031f 	and.w	r3, r3, #31
 8001042:	b2db      	uxtb	r3, r3
 8001044:	f043 0320 	orr.w	r3, r3, #32
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4619      	mov	r1, r3
 800104c:	200b      	movs	r0, #11
 800104e:	f7ff ff61 	bl	8000f14 <LoRA_Write_Register>
}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	66666667 	.word	0x66666667

08001060 <LoRA_setTxPower>:

void LoRA_setTxPower(int level) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	// PA BOOST
	if (level > 17) {
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b11      	cmp	r3, #17
 800106c:	dd0f      	ble.n	800108e <LoRA_setTxPower+0x2e>
		if (level > 20) {
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b14      	cmp	r3, #20
 8001072:	dd01      	ble.n	8001078 <LoRA_setTxPower+0x18>
			level = 20;
 8001074:	2314      	movs	r3, #20
 8001076:	607b      	str	r3, [r7, #4]
		}

		// subtract 3 from level, so 18 - 20 maps to 15 - 17
		level -= 3;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b03      	subs	r3, #3
 800107c:	607b      	str	r3, [r7, #4]

		// High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
		LoRA_Write_Register(REG_PA_DAC, 0x87);
 800107e:	2187      	movs	r1, #135	; 0x87
 8001080:	204d      	movs	r0, #77	; 0x4d
 8001082:	f7ff ff47 	bl	8000f14 <LoRA_Write_Register>
		LoRA_setOCP(140);
 8001086:	208c      	movs	r0, #140	; 0x8c
 8001088:	f7ff ffb8 	bl	8000ffc <LoRA_setOCP>
 800108c:	e00b      	b.n	80010a6 <LoRA_setTxPower+0x46>
	} else {
		if (level < 2) {
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b01      	cmp	r3, #1
 8001092:	dc01      	bgt.n	8001098 <LoRA_setTxPower+0x38>
			level = 2;
 8001094:	2302      	movs	r3, #2
 8001096:	607b      	str	r3, [r7, #4]
		}
		//Default value PA_HF/LF or +17dBm
		LoRA_Write_Register(REG_PA_DAC, 0x84);
 8001098:	2184      	movs	r1, #132	; 0x84
 800109a:	204d      	movs	r0, #77	; 0x4d
 800109c:	f7ff ff3a 	bl	8000f14 <LoRA_Write_Register>
		LoRA_setOCP(100);
 80010a0:	2064      	movs	r0, #100	; 0x64
 80010a2:	f7ff ffab 	bl	8000ffc <LoRA_setOCP>
	}

	LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	3b02      	subs	r3, #2
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	b25b      	sxtb	r3, r3
 80010b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	4619      	mov	r1, r3
 80010ba:	2009      	movs	r0, #9
 80010bc:	f7ff ff2a 	bl	8000f14 <LoRA_Write_Register>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode() {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1,
			LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 80010cc:	201d      	movs	r0, #29
 80010ce:	f7ff fef9 	bl	8000ec4 <LoRA_Read_Register>
 80010d2:	4603      	mov	r3, r0
	LoRA_Write_Register(REG_MODEM_CONFIG_1,
 80010d4:	f023 0301 	bic.w	r3, r3, #1
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	4619      	mov	r1, r3
 80010dc:	201d      	movs	r0, #29
 80010de:	f7ff ff19 	bl	8000f14 <LoRA_Write_Register>
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <LoRA_begin>:

void LoRA_begin(long frequency) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2101      	movs	r1, #1
 80010f4:	4818      	ldr	r0, [pc, #96]	; (8001158 <LoRA_begin+0x70>)
 80010f6:	f007 ff5d 	bl	8008fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80010fa:	2201      	movs	r2, #1
 80010fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001100:	4816      	ldr	r0, [pc, #88]	; (800115c <LoRA_begin+0x74>)
 8001102:	f007 ff57 	bl	8008fb4 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8001106:	2042      	movs	r0, #66	; 0x42
 8001108:	f7ff fedc 	bl	8000ec4 <LoRA_Read_Register>
 800110c:	4603      	mov	r3, r0
 800110e:	73fb      	strb	r3, [r7, #15]

	LoRA_sleep();
 8001110:	f7ff ff2e 	bl	8000f70 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8001114:	4812      	ldr	r0, [pc, #72]	; (8001160 <LoRA_begin+0x78>)
 8001116:	f7ff ff33 	bl	8000f80 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 800111a:	2100      	movs	r1, #0
 800111c:	200f      	movs	r0, #15
 800111e:	f7ff fef9 	bl	8000f14 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8001122:	2100      	movs	r1, #0
 8001124:	200e      	movs	r0, #14
 8001126:	f7ff fef5 	bl	8000f14 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 800112a:	200c      	movs	r0, #12
 800112c:	f7ff feca 	bl	8000ec4 <LoRA_Read_Register>
 8001130:	4603      	mov	r3, r0
 8001132:	f043 0303 	orr.w	r3, r3, #3
 8001136:	b2db      	uxtb	r3, r3
 8001138:	4619      	mov	r1, r3
 800113a:	200c      	movs	r0, #12
 800113c:	f7ff feea 	bl	8000f14 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8001140:	2104      	movs	r1, #4
 8001142:	2026      	movs	r0, #38	; 0x26
 8001144:	f7ff fee6 	bl	8000f14 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8001148:	2011      	movs	r0, #17
 800114a:	f7ff ff89 	bl	8001060 <LoRA_setTxPower>

}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	58020c00 	.word	0x58020c00
 800115c:	58020000 	.word	0x58020000
 8001160:	33bca100 	.word	0x33bca100

08001164 <LoRA_beginPacket>:

void LoRA_beginPacket() {
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8001168:	f7ff ffae 	bl	80010c8 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 800116c:	2100      	movs	r1, #0
 800116e:	200d      	movs	r0, #13
 8001170:	f7ff fed0 	bl	8000f14 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8001174:	2100      	movs	r1, #0
 8001176:	2022      	movs	r0, #34	; 0x22
 8001178:	f7ff fecc 	bl	8000f14 <LoRA_Write_Register>
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}

08001180 <LoRA_endPacket>:

void LoRA_endPacket(){
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8001184:	2183      	movs	r1, #131	; 0x83
 8001186:	2001      	movs	r0, #1
 8001188:	f7ff fec4 	bl	8000f14 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 800118c:	bf00      	nop
 800118e:	2012      	movs	r0, #18
 8001190:	f7ff fe98 	bl	8000ec4 <LoRA_Read_Register>
 8001194:	4603      	mov	r3, r0
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0f7      	beq.n	800118e <LoRA_endPacket+0xe>

	}
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 800119e:	2185      	movs	r1, #133	; 0x85
 80011a0:	2001      	movs	r0, #1
 80011a2:	f7ff feb7 	bl	8000f14 <LoRA_Write_Register>

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 80011a6:	2108      	movs	r1, #8
 80011a8:	2012      	movs	r0, #18
 80011aa:	f7ff feb3 	bl	8000f14 <LoRA_Write_Register>

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <LoRA_parsePacket>:


int LoRA_parsePacket(){
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 80011bc:	2012      	movs	r0, #18
 80011be:	f7ff fe81 	bl	8000ec4 <LoRA_Read_Register>
 80011c2:	4603      	mov	r3, r0
 80011c4:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 80011c6:	f7ff ff7f 	bl	80010c8 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	4619      	mov	r1, r3
 80011d0:	2012      	movs	r0, #18
 80011d2:	f7ff fe9f 	bl	8000f14 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d016      	beq.n	800120e <LoRA_parsePacket+0x5c>
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	f003 0320 	and.w	r3, r3, #32
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d111      	bne.n	800120e <LoRA_parsePacket+0x5c>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 80011ea:	2013      	movs	r0, #19
 80011ec:	f7ff fe6a 	bl	8000ec4 <LoRA_Read_Register>
 80011f0:	4603      	mov	r3, r0
 80011f2:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 80011f4:	2010      	movs	r0, #16
 80011f6:	f7ff fe65 	bl	8000ec4 <LoRA_Read_Register>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4619      	mov	r1, r3
 80011fe:	200d      	movs	r0, #13
 8001200:	f7ff fe88 	bl	8000f14 <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001204:	2185      	movs	r1, #133	; 0x85
 8001206:	2001      	movs	r0, #1
 8001208:	f7ff fe84 	bl	8000f14 <LoRA_Write_Register>
 800120c:	e00d      	b.n	800122a <LoRA_parsePacket+0x78>

		//LoRA_idle();
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS)){
 800120e:	2001      	movs	r0, #1
 8001210:	f7ff fe58 	bl	8000ec4 <LoRA_Read_Register>
 8001214:	4603      	mov	r3, r0
 8001216:	2b85      	cmp	r3, #133	; 0x85
 8001218:	d007      	beq.n	800122a <LoRA_parsePacket+0x78>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 800121a:	2100      	movs	r1, #0
 800121c:	200d      	movs	r0, #13
 800121e:	f7ff fe79 	bl	8000f14 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001222:	2185      	movs	r1, #133	; 0x85
 8001224:	2001      	movs	r0, #1
 8001226:	f7ff fe75 	bl	8000f14 <LoRA_Write_Register>
	}
	return packetLenght;
 800122a:	687b      	ldr	r3, [r7, #4]

}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <LoRA_sendPacket>:

void LoRA_sendPacket(char *data) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	LoRA_beginPacket();
 800123c:	f7ff ff92 	bl	8001164 <LoRA_beginPacket>
	for (int i = 0; i < strlen(data); i++) {
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	e00a      	b.n	800125c <LoRA_sendPacket+0x28>
		LoRA_Write_Register(REG_FIFO, data[i]);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	4413      	add	r3, r2
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	4619      	mov	r1, r3
 8001250:	2000      	movs	r0, #0
 8001252:	f7ff fe5f 	bl	8000f14 <LoRA_Write_Register>
	for (int i = 0; i < strlen(data); i++) {
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	3301      	adds	r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff f8b7 	bl	80003d0 <strlen>
 8001262:	4602      	mov	r2, r0
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	429a      	cmp	r2, r3
 8001268:	d8ed      	bhi.n	8001246 <LoRA_sendPacket+0x12>
	}
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff f8b0 	bl	80003d0 <strlen>
 8001270:	4603      	mov	r3, r0
 8001272:	b2db      	uxtb	r3, r3
 8001274:	4619      	mov	r1, r3
 8001276:	2022      	movs	r0, #34	; 0x22
 8001278:	f7ff fe4c 	bl	8000f14 <LoRA_Write_Register>
	LoRA_endPacket();
 800127c:	f7ff ff80 	bl	8001180 <LoRA_endPacket>
}
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <disarm>:
int mount_SD() {
	int status = f_mount(&SDFatFS, (TCHAR const*) SDPath, 0);
	return status;
}

int disarm(char *state) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2102      	movs	r1, #2
 8001294:	482d      	ldr	r0, [pc, #180]	; (800134c <disarm+0xc4>)
 8001296:	f007 fe8d 	bl	8008fb4 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);

	HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2102      	movs	r1, #2
 800129e:	482c      	ldr	r0, [pc, #176]	; (8001350 <disarm+0xc8>)
 80012a0:	f007 fe88 	bl	8008fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012aa:	482a      	ldr	r0, [pc, #168]	; (8001354 <disarm+0xcc>)
 80012ac:	f007 fe82 	bl	8008fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 80012b0:	2200      	movs	r2, #0
 80012b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012b6:	4827      	ldr	r0, [pc, #156]	; (8001354 <disarm+0xcc>)
 80012b8:	f007 fe7c 	bl	8008fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 80012bc:	2200      	movs	r2, #0
 80012be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012c2:	4824      	ldr	r0, [pc, #144]	; (8001354 <disarm+0xcc>)
 80012c4:	f007 fe76 	bl	8008fb4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2102      	movs	r1, #2
 80012cc:	4822      	ldr	r0, [pc, #136]	; (8001358 <disarm+0xd0>)
 80012ce:	f007 fe71 	bl	8008fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012d8:	4820      	ldr	r0, [pc, #128]	; (800135c <disarm+0xd4>)
 80012da:	f007 fe6b 	bl	8008fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012e4:	481d      	ldr	r0, [pc, #116]	; (800135c <disarm+0xd4>)
 80012e6:	f007 fe65 	bl	8008fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f0:	481a      	ldr	r0, [pc, #104]	; (800135c <disarm+0xd4>)
 80012f2:	f007 fe5f 	bl	8008fb4 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80012f6:	210c      	movs	r1, #12
 80012f8:	4819      	ldr	r0, [pc, #100]	; (8001360 <disarm+0xd8>)
 80012fa:	f00f f91b 	bl	8010534 <HAL_TIM_PWM_Start>
	setServo(1, 0);
 80012fe:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8001364 <disarm+0xdc>
 8001302:	2001      	movs	r0, #1
 8001304:	f7ff fbde 	bl	8000ac4 <setServo>

	LED_Color_Data[7][0] = 255;
 8001308:	4b17      	ldr	r3, [pc, #92]	; (8001368 <disarm+0xe0>)
 800130a:	22ff      	movs	r2, #255	; 0xff
 800130c:	655a      	str	r2, [r3, #84]	; 0x54
	LED_Color_Data[7][1] = 0;
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <disarm+0xe0>)
 8001310:	2200      	movs	r2, #0
 8001312:	659a      	str	r2, [r3, #88]	; 0x58
	LED_Color_Data[7][2] = 0;
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <disarm+0xe0>)
 8001316:	2200      	movs	r2, #0
 8001318:	65da      	str	r2, [r3, #92]	; 0x5c

	LED_Color_Data[2][0] = 255;
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <disarm+0xe0>)
 800131c:	22ff      	movs	r2, #255	; 0xff
 800131e:	619a      	str	r2, [r3, #24]
	LED_Color_Data[2][1] = 0;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <disarm+0xe0>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
	LED_Color_Data[2][2] = 0;
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <disarm+0xe0>)
 8001328:	2200      	movs	r2, #0
 800132a:	621a      	str	r2, [r3, #32]
	setLEDs();
 800132c:	f7ff fc12 	bl	8000b54 <setLEDs>

	strcpy(state, "DISARMED");
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	490e      	ldr	r1, [pc, #56]	; (800136c <disarm+0xe4>)
 8001334:	461a      	mov	r2, r3
 8001336:	460b      	mov	r3, r1
 8001338:	cb03      	ldmia	r3!, {r0, r1}
 800133a:	6010      	str	r0, [r2, #0]
 800133c:	6051      	str	r1, [r2, #4]
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	7213      	strb	r3, [r2, #8]
	return 0;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	58020000 	.word	0x58020000
 8001350:	58020400 	.word	0x58020400
 8001354:	58021400 	.word	0x58021400
 8001358:	58021800 	.word	0x58021800
 800135c:	58021000 	.word	0x58021000
 8001360:	240011dc 	.word	0x240011dc
 8001364:	00000000 	.word	0x00000000
 8001368:	24000bc4 	.word	0x24000bc4
 800136c:	0801fd40 	.word	0x0801fd40

08001370 <arm>:

int arm(char *state) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 1);
 8001378:	2201      	movs	r2, #1
 800137a:	2102      	movs	r1, #2
 800137c:	4810      	ldr	r0, [pc, #64]	; (80013c0 <arm+0x50>)
 800137e:	f007 fe19 	bl	8008fb4 <HAL_GPIO_WritePin>
//HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 1);

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001382:	210c      	movs	r1, #12
 8001384:	480f      	ldr	r0, [pc, #60]	; (80013c4 <arm+0x54>)
 8001386:	f00f f8d5 	bl	8010534 <HAL_TIM_PWM_Start>
	setServo(1, 100);
 800138a:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80013c8 <arm+0x58>
 800138e:	2001      	movs	r0, #1
 8001390:	f7ff fb98 	bl	8000ac4 <setServo>

	strcpy(state, "ARMED");
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <arm+0x5c>)
 8001398:	6810      	ldr	r0, [r2, #0]
 800139a:	6018      	str	r0, [r3, #0]
 800139c:	8892      	ldrh	r2, [r2, #4]
 800139e:	809a      	strh	r2, [r3, #4]
	LED_Color_Data[7][0] = 0;
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <arm+0x60>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	655a      	str	r2, [r3, #84]	; 0x54
	LED_Color_Data[7][1] = 255;
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <arm+0x60>)
 80013a8:	22ff      	movs	r2, #255	; 0xff
 80013aa:	659a      	str	r2, [r3, #88]	; 0x58
	LED_Color_Data[7][2] = 0;
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <arm+0x60>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	65da      	str	r2, [r3, #92]	; 0x5c
	setLEDs();
 80013b2:	f7ff fbcf 	bl	8000b54 <setLEDs>
	return 0;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	58020000 	.word	0x58020000
 80013c4:	240011dc 	.word	0x240011dc
 80013c8:	42c80000 	.word	0x42c80000
 80013cc:	0801fd4c 	.word	0x0801fd4c
 80013d0:	24000bc4 	.word	0x24000bc4

080013d4 <recv_packet>:

int recv_packet(char *LoRA_data, int max_length) {
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
	int packet_length = LoRA_parsePacket();
 80013de:	f7ff fee8 	bl	80011b2 <LoRA_parsePacket>
 80013e2:	60b8      	str	r0, [r7, #8]
	if (max_length - 1 < packet_length) //-1 for the null terminator
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	dc01      	bgt.n	80013f0 <recv_packet+0x1c>
			{
		return 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	e01c      	b.n	800142a <recv_packet+0x56>
	}
	if (packet_length) {
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d018      	beq.n	8001428 <recv_packet+0x54>
		for (int i = 0; i < packet_length; i++) {
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	e00a      	b.n	8001412 <recv_packet+0x3e>
			LoRA_data[i] = LoRA_Read_Register(0x00);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	18d4      	adds	r4, r2, r3
 8001402:	2000      	movs	r0, #0
 8001404:	f7ff fd5e 	bl	8000ec4 <LoRA_Read_Register>
 8001408:	4603      	mov	r3, r0
 800140a:	7023      	strb	r3, [r4, #0]
		for (int i = 0; i < packet_length; i++) {
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	3301      	adds	r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	429a      	cmp	r2, r3
 8001418:	dbf0      	blt.n	80013fc <recv_packet+0x28>
		}
		LoRA_data[packet_length] = '\0';
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	4413      	add	r3, r2
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
		return packet_length;
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	e000      	b.n	800142a <recv_packet+0x56>
	} else {
		return 0;
 8001428:	2300      	movs	r3, #0
	}
}
 800142a:	4618      	mov	r0, r3
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	bd90      	pop	{r4, r7, pc}
	...

08001434 <reliable_send_packet>:

void reliable_send_packet(char *LoRA_data) {
 8001434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001438:	b0d3      	sub	sp, #332	; 0x14c
 800143a:	af00      	add	r7, sp, #0
 800143c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001440:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001444:	6018      	str	r0, [r3, #0]
 8001446:	466b      	mov	r3, sp
 8001448:	461e      	mov	r6, r3
	char debug[300];
	sprintf(debug, "sending: %s", LoRA_data);
 800144a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800144e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001452:	f107 000c 	add.w	r0, r7, #12
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4944      	ldr	r1, [pc, #272]	; (800156c <reliable_send_packet+0x138>)
 800145a:	f01a fc51 	bl	801bd00 <siprintf>
	CDC_Transmit_HS(debug, strlen(debug));
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	4618      	mov	r0, r3
 8001464:	f7fe ffb4 	bl	80003d0 <strlen>
 8001468:	4602      	mov	r2, r0
 800146a:	f107 030c 	add.w	r3, r7, #12
 800146e:	4611      	mov	r1, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f019 f8f1 	bl	801a658 <CDC_Transmit_HS>

	uint16_t length = strlen(LoRA_data) + 1; //+1 for the \0
 8001476:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800147a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800147e:	6818      	ldr	r0, [r3, #0]
 8001480:	f7fe ffa6 	bl	80003d0 <strlen>
 8001484:	4603      	mov	r3, r0
 8001486:	b29b      	uxth	r3, r3
 8001488:	3301      	adds	r3, #1
 800148a:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	char acknowledge[length];
 800148e:	f8b7 1142 	ldrh.w	r1, [r7, #322]	; 0x142
 8001492:	460b      	mov	r3, r1
 8001494:	3b01      	subs	r3, #1
 8001496:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800149a:	b28b      	uxth	r3, r1
 800149c:	2200      	movs	r2, #0
 800149e:	4698      	mov	r8, r3
 80014a0:	4691      	mov	r9, r2
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	f04f 0300 	mov.w	r3, #0
 80014aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014b6:	b28b      	uxth	r3, r1
 80014b8:	2200      	movs	r2, #0
 80014ba:	461c      	mov	r4, r3
 80014bc:	4615      	mov	r5, r2
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	f04f 0300 	mov.w	r3, #0
 80014c6:	00eb      	lsls	r3, r5, #3
 80014c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014cc:	00e2      	lsls	r2, r4, #3
 80014ce:	460b      	mov	r3, r1
 80014d0:	3307      	adds	r3, #7
 80014d2:	08db      	lsrs	r3, r3, #3
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	ebad 0d03 	sub.w	sp, sp, r3
 80014da:	466b      	mov	r3, sp
 80014dc:	3300      	adds	r3, #0
 80014de:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint32_t lastTime = HAL_GetTick();
 80014e2:	f002 fe5d 	bl	80041a0 <HAL_GetTick>
 80014e6:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
	LoRA_sendPacket(LoRA_data);
 80014ea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80014ee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80014f2:	6818      	ldr	r0, [r3, #0]
 80014f4:	f7ff fe9e 	bl	8001234 <LoRA_sendPacket>
	while (1) {

		if (recv_packet(acknowledge, length)) {
 80014f8:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 80014fc:	4619      	mov	r1, r3
 80014fe:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8001502:	f7ff ff67 	bl	80013d4 <recv_packet>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d012      	beq.n	8001532 <reliable_send_packet+0xfe>
			//cehck crc
			if (strcmp(acknowledge, LoRA_data) != 0) {
 800150c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001510:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001514:	6819      	ldr	r1, [r3, #0]
 8001516:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 800151a:	f7fe fef9 	bl	8000310 <strcmp>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d01b      	beq.n	800155c <reliable_send_packet+0x128>
				LoRA_sendPacket(LoRA_data);
 8001524:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001528:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800152c:	6818      	ldr	r0, [r3, #0]
 800152e:	f7ff fe81 	bl	8001234 <LoRA_sendPacket>
			} else {
				break;
			}
		}

		if (HAL_GetTick() - lastTime > 2000) {
 8001532:	f002 fe35 	bl	80041a0 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001542:	d9d9      	bls.n	80014f8 <reliable_send_packet+0xc4>
			LoRA_sendPacket(LoRA_data);
 8001544:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001548:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800154c:	6818      	ldr	r0, [r3, #0]
 800154e:	f7ff fe71 	bl	8001234 <LoRA_sendPacket>
			lastTime = HAL_GetTick();
 8001552:	f002 fe25 	bl	80041a0 <HAL_GetTick>
 8001556:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
		if (recv_packet(acknowledge, length)) {
 800155a:	e7cd      	b.n	80014f8 <reliable_send_packet+0xc4>
				break;
 800155c:	bf00      	nop
 800155e:	46b5      	mov	sp, r6
		}
	}
}
 8001560:	bf00      	nop
 8001562:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8001566:	46bd      	mov	sp, r7
 8001568:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800156c:	0801fd54 	.word	0x0801fd54

08001570 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001572:	f5ad 5d20 	sub.w	sp, sp, #10240	; 0x2800
 8001576:	b087      	sub	sp, #28
 8001578:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800157a:	f002 fd8b 	bl	8004094 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800157e:	f000 fd4b 	bl	8002018 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8001582:	f000 fdc1 	bl	8002108 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001586:	f001 fb6d 	bl	8002c64 <MX_GPIO_Init>
	MX_DMA_Init();
 800158a:	f001 fb0b 	bl	8002ba4 <MX_DMA_Init>
	MX_SPI3_Init();
 800158e:	f001 f841 	bl	8002614 <MX_SPI3_Init>
	MX_FDCAN3_Init();
 8001592:	f000 fed1 	bl	8002338 <MX_FDCAN3_Init>
	MX_USART6_UART_Init();
 8001596:	f001 fab9 	bl	8002b0c <MX_USART6_UART_Init>
	MX_ADC1_Init();
 800159a:	f000 fde7 	bl	800216c <MX_ADC1_Init>
	MX_TIM4_Init();
 800159e:	f001 f94b 	bl	8002838 <MX_TIM4_Init>
	MX_ADC3_Init();
 80015a2:	f000 fe5b 	bl	800225c <MX_ADC3_Init>
	MX_SPI2_Init();
 80015a6:	f000 ffdf 	bl	8002568 <MX_SPI2_Init>
	MX_I2C2_Init();
 80015aa:	f000 ff29 	bl	8002400 <MX_I2C2_Init>
	MX_TIM2_Init();
 80015ae:	f001 f887 	bl	80026c0 <MX_TIM2_Init>
	MX_TIM5_Init();
 80015b2:	f001 f9bd 	bl	8002930 <MX_TIM5_Init>
	MX_TIM3_Init();
 80015b6:	f001 f8db 	bl	8002770 <MX_TIM3_Init>
	MX_USB_DEVICE_Init();
 80015ba:	f018 ff8d 	bl	801a4d8 <MX_USB_DEVICE_Init>
	MX_SPI1_Init();
 80015be:	f000 ff7d 	bl	80024bc <MX_SPI1_Init>
	MX_UART4_Init();
 80015c2:	f001 fa57 	bl	8002a74 <MX_UART4_Init>
	MX_FATFS_Init();
 80015c6:	f013 fda7 	bl	8015118 <MX_FATFS_Init>
	MX_SDMMC2_SD_Init();
 80015ca:	f000 ff59 	bl	8002480 <MX_SDMMC2_SD_Init>
	MX_TIM13_Init();
 80015ce:	f001 fa09 	bl	80029e4 <MX_TIM13_Init>
	MX_TIM14_Init();
 80015d2:	f001 fa2b 	bl	8002a2c <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */
	char dummy[50];
	disarm(dummy);
 80015d6:	f242 73bc 	movw	r3, #10172	; 0x27bc
 80015da:	443b      	add	r3, r7
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fe53 	bl	8001288 <disarm>

	FATFS FatFs;
	FIL Fil;
	FRESULT FR_Status;
	FR_Status = f_mount(&FatFs, SDPath, 1);
 80015e2:	4bb9      	ldr	r3, [pc, #740]	; (80018c8 <main+0x358>)
 80015e4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80015e8:	f103 0310 	add.w	r3, r3, #16
 80015ec:	443b      	add	r3, r7
 80015ee:	2201      	movs	r2, #1
 80015f0:	49b6      	ldr	r1, [pc, #728]	; (80018cc <main+0x35c>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f018 f964 	bl	80198c0 <f_mount>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f242 72ff 	movw	r2, #10239	; 0x27ff
 80015fe:	443a      	add	r2, r7
 8001600:	7013      	strb	r3, [r2, #0]

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001602:	210c      	movs	r1, #12
 8001604:	48b2      	ldr	r0, [pc, #712]	; (80018d0 <main+0x360>)
 8001606:	f00e ff95 	bl	8010534 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 800160a:	2201      	movs	r2, #1
 800160c:	2104      	movs	r1, #4
 800160e:	48b1      	ldr	r0, [pc, #708]	; (80018d4 <main+0x364>)
 8001610:	f007 fcd0 	bl	8008fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 8001614:	2201      	movs	r2, #1
 8001616:	2108      	movs	r1, #8
 8001618:	48ae      	ldr	r0, [pc, #696]	; (80018d4 <main+0x364>)
 800161a:	f007 fccb 	bl	8008fb4 <HAL_GPIO_WritePin>

	FR_Status = f_open(&Fil, "MyTextFile.txt", FA_CREATE_NEW);
 800161e:	4bae      	ldr	r3, [pc, #696]	; (80018d8 <main+0x368>)
 8001620:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001624:	f103 0310 	add.w	r3, r3, #16
 8001628:	443b      	add	r3, r7
 800162a:	2204      	movs	r2, #4
 800162c:	49ab      	ldr	r1, [pc, #684]	; (80018dc <main+0x36c>)
 800162e:	4618      	mov	r0, r3
 8001630:	f018 f98c 	bl	801994c <f_open>
 8001634:	4603      	mov	r3, r0
 8001636:	f242 72ff 	movw	r2, #10239	; 0x27ff
 800163a:	443a      	add	r2, r7
 800163c:	7013      	strb	r3, [r2, #0]
	f_close(&Fil);
 800163e:	4ba6      	ldr	r3, [pc, #664]	; (80018d8 <main+0x368>)
 8001640:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001644:	f103 0310 	add.w	r3, r3, #16
 8001648:	443b      	add	r3, r7
 800164a:	4618      	mov	r0, r3
 800164c:	f018 fd5c 	bl	801a108 <f_close>

	LoRA_begin(868000000);
 8001650:	48a3      	ldr	r0, [pc, #652]	; (80018e0 <main+0x370>)
 8001652:	f7ff fd49 	bl	80010e8 <LoRA_begin>
		}
		HAL_Delay(1000);
		LoRA_sendPacket("SENDIT");
	}*/

	int connected = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	f242 72f8 	movw	r2, #10232	; 0x27f8
 800165c:	443a      	add	r2, r7
 800165e:	6013      	str	r3, [r2, #0]
	long last_packet = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	f242 72f4 	movw	r2, #10228	; 0x27f4
 8001666:	443a      	add	r2, r7
 8001668:	6013      	str	r3, [r2, #0]
	int ARMED = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	f242 72f0 	movw	r2, #10224	; 0x27f0
 8001670:	443a      	add	r2, r7
 8001672:	6013      	str	r3, [r2, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);
	//char buffered_debug_data[MAX_PACKET_LENGTH];
	char state[MAX_PACKET_LENGTH] = "DISARMED";
 8001674:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001678:	f5a3 74dc 	sub.w	r4, r3, #440	; 0x1b8
 800167c:	4a99      	ldr	r2, [pc, #612]	; (80018e4 <main+0x374>)
 800167e:	4623      	mov	r3, r4
 8001680:	6810      	ldr	r0, [r2, #0]
 8001682:	6851      	ldr	r1, [r2, #4]
 8001684:	c303      	stmia	r3!, {r0, r1}
 8001686:	7a12      	ldrb	r2, [r2, #8]
 8001688:	701a      	strb	r2, [r3, #0]
 800168a:	f104 0309 	add.w	r3, r4, #9
 800168e:	22f1      	movs	r2, #241	; 0xf1
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f01a fbc5 	bl	801be22 <memset>
	char command[MAX_PACKET_LENGTH];
	char recieved_packet[MAX_PACKET_LENGTH];
	char previous_packet[MAX_PACKET_LENGTH];
	char response_packet[MAX_PACKET_LENGTH];
	char packets_streamed[MAX_PACKET_LENGTH];
	int max_packet_count = 0;
 8001698:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800169c:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
	int have_recieved_anything = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f642 020c 	movw	r2, #10252	; 0x280c
 80016aa:	443a      	add	r2, r7
 80016ac:	6013      	str	r3, [r2, #0]
	int packetId;
	char communication_state[MAX_PACKET_LENGTH] = "RECEIVING RELIABLE";
 80016ae:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80016b2:	f2a3 76a4 	subw	r6, r3, #1956	; 0x7a4
 80016b6:	4b8c      	ldr	r3, [pc, #560]	; (80018e8 <main+0x378>)
 80016b8:	4634      	mov	r4, r6
 80016ba:	461d      	mov	r5, r3
 80016bc:	6828      	ldr	r0, [r5, #0]
 80016be:	6869      	ldr	r1, [r5, #4]
 80016c0:	68aa      	ldr	r2, [r5, #8]
 80016c2:	68eb      	ldr	r3, [r5, #12]
 80016c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c6:	8a2b      	ldrh	r3, [r5, #16]
 80016c8:	7caa      	ldrb	r2, [r5, #18]
 80016ca:	8023      	strh	r3, [r4, #0]
 80016cc:	4613      	mov	r3, r2
 80016ce:	70a3      	strb	r3, [r4, #2]
 80016d0:	f106 0313 	add.w	r3, r6, #19
 80016d4:	22e7      	movs	r2, #231	; 0xe7
 80016d6:	2100      	movs	r1, #0
 80016d8:	4618      	mov	r0, r3
 80016da:	f01a fba2 	bl	801be22 <memset>
		//sprintf(data, "%x", version);
		//CDC_Transmit_HS(data, strlen(data));
		LoRA_sendPacket("hello\n");
		HAL_Delay(1000);
	}*/
	uint32_t previousTime = HAL_GetTick();
 80016de:	f002 fd5f 	bl	80041a0 <HAL_GetTick>
 80016e2:	f642 0308 	movw	r3, #10248	; 0x2808
 80016e6:	443b      	add	r3, r7
 80016e8:	6018      	str	r0, [r3, #0]
	uint32_t debugTime = HAL_GetTick();
 80016ea:	f002 fd59 	bl	80041a0 <HAL_GetTick>
 80016ee:	f642 0304 	movw	r3, #10244	; 0x2804
 80016f2:	443b      	add	r3, r7
 80016f4:	6018      	str	r0, [r3, #0]

	while (1) {
		if(HAL_GetTick()- debugTime > 1000) {
 80016f6:	f002 fd53 	bl	80041a0 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	f642 0304 	movw	r3, #10244	; 0x2804
 8001700:	443b      	add	r3, r7
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800170a:	d934      	bls.n	8001776 <main+0x206>
			debugTime = HAL_GetTick();
 800170c:	f002 fd48 	bl	80041a0 <HAL_GetTick>
 8001710:	f642 0304 	movw	r3, #10244	; 0x2804
 8001714:	443b      	add	r3, r7
 8001716:	6018      	str	r0, [r3, #0]
			sprintf(response_packet, "Lora: %d, Sate: %s, Comms: %s\n", LoRA_Read_Register(REG_MODEM_CONFIG_1), state, communication_state);
 8001718:	201d      	movs	r0, #29
 800171a:	f7ff fbd3 	bl	8000ec4 <LoRA_Read_Register>
 800171e:	4603      	mov	r3, r0
 8001720:	4619      	mov	r1, r3
 8001722:	4a72      	ldr	r2, [pc, #456]	; (80018ec <main+0x37c>)
 8001724:	f642 0310 	movw	r3, #10256	; 0x2810
 8001728:	4413      	add	r3, r2
 800172a:	19da      	adds	r2, r3, r7
 800172c:	4870      	ldr	r0, [pc, #448]	; (80018f0 <main+0x380>)
 800172e:	f642 0310 	movw	r3, #10256	; 0x2810
 8001732:	4403      	add	r3, r0
 8001734:	19d8      	adds	r0, r3, r7
 8001736:	4b6f      	ldr	r3, [pc, #444]	; (80018f4 <main+0x384>)
 8001738:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800173c:	f103 0310 	add.w	r3, r3, #16
 8001740:	443b      	add	r3, r7
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	4613      	mov	r3, r2
 8001746:	460a      	mov	r2, r1
 8001748:	496b      	ldr	r1, [pc, #428]	; (80018f8 <main+0x388>)
 800174a:	f01a fad9 	bl	801bd00 <siprintf>
			CDC_Transmit_HS(response_packet, strlen(response_packet));
 800174e:	4b68      	ldr	r3, [pc, #416]	; (80018f0 <main+0x380>)
 8001750:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001754:	f103 0310 	add.w	r3, r3, #16
 8001758:	443b      	add	r3, r7
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe fe38 	bl	80003d0 <strlen>
 8001760:	4602      	mov	r2, r0
 8001762:	4b63      	ldr	r3, [pc, #396]	; (80018f0 <main+0x380>)
 8001764:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001768:	f103 0310 	add.w	r3, r3, #16
 800176c:	443b      	add	r3, r7
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f018 ff71 	bl	801a658 <CDC_Transmit_HS>
		}

		if (strcmp(communication_state, "RECEIVING RELIABLE") == 0) {
 8001776:	4b5f      	ldr	r3, [pc, #380]	; (80018f4 <main+0x384>)
 8001778:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800177c:	f103 0310 	add.w	r3, r3, #16
 8001780:	443b      	add	r3, r7
 8001782:	4959      	ldr	r1, [pc, #356]	; (80018e8 <main+0x378>)
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fdc3 	bl	8000310 <strcmp>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	f040 810d 	bne.w	80019ac <main+0x43c>


			//CDC_Transmit_HS("hi4\n", strlen("hi4\n"));
			if (recv_packet(recieved_packet, MAX_PACKET_LENGTH)) {
 8001792:	4b5a      	ldr	r3, [pc, #360]	; (80018fc <main+0x38c>)
 8001794:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001798:	f103 0310 	add.w	r3, r3, #16
 800179c:	443b      	add	r3, r7
 800179e:	21fa      	movs	r1, #250	; 0xfa
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fe17 	bl	80013d4 <recv_packet>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f000 80b7 	beq.w	800191c <main+0x3ac>
				have_recieved_anything = 1;
 80017ae:	2301      	movs	r3, #1
 80017b0:	f642 020c 	movw	r2, #10252	; 0x280c
 80017b4:	443a      	add	r2, r7
 80017b6:	6013      	str	r3, [r2, #0]
				//CDC_Transmit_HS("hi3", strlen("hi3"));
				previousTime = HAL_GetTick();
 80017b8:	f002 fcf2 	bl	80041a0 <HAL_GetTick>
 80017bc:	f642 0308 	movw	r3, #10248	; 0x2808
 80017c0:	443b      	add	r3, r7
 80017c2:	6018      	str	r0, [r3, #0]
				if (strcmp(recieved_packet, "$") == 0) {
 80017c4:	4b4d      	ldr	r3, [pc, #308]	; (80018fc <main+0x38c>)
 80017c6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80017ca:	f103 0310 	add.w	r3, r3, #16
 80017ce:	443b      	add	r3, r7
 80017d0:	494b      	ldr	r1, [pc, #300]	; (8001900 <main+0x390>)
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fd9c 	bl	8000310 <strcmp>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10d      	bne.n	80017fa <main+0x28a>
					//CDC_Transmit_HS("hi2", strlen("hi2"));
					strcpy(communication_state, "SENDING RELIABLE");
 80017de:	4b45      	ldr	r3, [pc, #276]	; (80018f4 <main+0x384>)
 80017e0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80017e4:	f103 0310 	add.w	r3, r3, #16
 80017e8:	443b      	add	r3, r7
 80017ea:	4a46      	ldr	r2, [pc, #280]	; (8001904 <main+0x394>)
 80017ec:	461c      	mov	r4, r3
 80017ee:	4615      	mov	r5, r2
 80017f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017f4:	682b      	ldr	r3, [r5, #0]
 80017f6:	7023      	strb	r3, [r4, #0]
 80017f8:	e77d      	b.n	80016f6 <main+0x186>
				} else if(sscanf(recieved_packet, "! %d", &max_packet_count) == 1) {
 80017fa:	4a43      	ldr	r2, [pc, #268]	; (8001908 <main+0x398>)
 80017fc:	f642 0310 	movw	r3, #10256	; 0x2810
 8001800:	4413      	add	r3, r2
 8001802:	19da      	adds	r2, r3, r7
 8001804:	4b3d      	ldr	r3, [pc, #244]	; (80018fc <main+0x38c>)
 8001806:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800180a:	f103 0310 	add.w	r3, r3, #16
 800180e:	443b      	add	r3, r7
 8001810:	493e      	ldr	r1, [pc, #248]	; (800190c <main+0x39c>)
 8001812:	4618      	mov	r0, r3
 8001814:	f01a fa94 	bl	801bd40 <siscanf>
 8001818:	4603      	mov	r3, r0
 800181a:	2b01      	cmp	r3, #1
 800181c:	d10f      	bne.n	800183e <main+0x2ce>
					strcpy(communication_state,"SENDING STREAM");
 800181e:	4b35      	ldr	r3, [pc, #212]	; (80018f4 <main+0x384>)
 8001820:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001824:	f103 0310 	add.w	r3, r3, #16
 8001828:	443b      	add	r3, r7
 800182a:	4a39      	ldr	r2, [pc, #228]	; (8001910 <main+0x3a0>)
 800182c:	461c      	mov	r4, r3
 800182e:	4613      	mov	r3, r2
 8001830:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001832:	c407      	stmia	r4!, {r0, r1, r2}
 8001834:	8023      	strh	r3, [r4, #0]
 8001836:	3402      	adds	r4, #2
 8001838:	0c1b      	lsrs	r3, r3, #16
 800183a:	7023      	strb	r3, [r4, #0]
 800183c:	e75b      	b.n	80016f6 <main+0x186>
				} else if (strcmp(recieved_packet, previous_packet) == 0) {
 800183e:	4a35      	ldr	r2, [pc, #212]	; (8001914 <main+0x3a4>)
 8001840:	f642 0310 	movw	r3, #10256	; 0x2810
 8001844:	4413      	add	r3, r2
 8001846:	19da      	adds	r2, r3, r7
 8001848:	4b2c      	ldr	r3, [pc, #176]	; (80018fc <main+0x38c>)
 800184a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800184e:	f103 0310 	add.w	r3, r3, #16
 8001852:	443b      	add	r3, r7
 8001854:	4611      	mov	r1, r2
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fd5a 	bl	8000310 <strcmp>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d109      	bne.n	8001876 <main+0x306>
					//send acknowledge again
					LoRA_sendPacket(recieved_packet);
 8001862:	4b26      	ldr	r3, [pc, #152]	; (80018fc <main+0x38c>)
 8001864:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001868:	f103 0310 	add.w	r3, r3, #16
 800186c:	443b      	add	r3, r7
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fce0 	bl	8001234 <LoRA_sendPacket>
 8001874:	e73f      	b.n	80016f6 <main+0x186>
				} else {
					//CDC_Transmit_HS("hi1", strlen("hi1"));
					strcpy(previous_packet, recieved_packet);
 8001876:	4a21      	ldr	r2, [pc, #132]	; (80018fc <main+0x38c>)
 8001878:	f642 0310 	movw	r3, #10256	; 0x2810
 800187c:	4413      	add	r3, r2
 800187e:	19da      	adds	r2, r3, r7
 8001880:	4b24      	ldr	r3, [pc, #144]	; (8001914 <main+0x3a4>)
 8001882:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001886:	f103 0310 	add.w	r3, r3, #16
 800188a:	443b      	add	r3, r7
 800188c:	4611      	mov	r1, r2
 800188e:	4618      	mov	r0, r3
 8001890:	f01a fb47 	bl	801bf22 <strcpy>
					LoRA_sendPacket(recieved_packet);
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <main+0x38c>)
 8001896:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800189a:	f103 0310 	add.w	r3, r3, #16
 800189e:	443b      	add	r3, r7
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fcc7 	bl	8001234 <LoRA_sendPacket>
					strcpy(command, recieved_packet);
 80018a6:	4a15      	ldr	r2, [pc, #84]	; (80018fc <main+0x38c>)
 80018a8:	f642 0310 	movw	r3, #10256	; 0x2810
 80018ac:	4413      	add	r3, r2
 80018ae:	19da      	adds	r2, r3, r7
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <main+0x3a8>)
 80018b2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80018b6:	f103 0310 	add.w	r3, r3, #16
 80018ba:	443b      	add	r3, r7
 80018bc:	4611      	mov	r1, r2
 80018be:	4618      	mov	r0, r3
 80018c0:	f01a fb2f 	bl	801bf22 <strcpy>
 80018c4:	e717      	b.n	80016f6 <main+0x186>
 80018c6:	bf00      	nop
 80018c8:	ffffef74 	.word	0xffffef74
 80018cc:	24001698 	.word	0x24001698
 80018d0:	240011dc 	.word	0x240011dc
 80018d4:	58021800 	.word	0x58021800
 80018d8:	ffffdf44 	.word	0xffffdf44
 80018dc:	0801fd60 	.word	0x0801fd60
 80018e0:	33bca100 	.word	0x33bca100
 80018e4:	0801fd40 	.word	0x0801fd40
 80018e8:	0801fd90 	.word	0x0801fd90
 80018ec:	ffffde48 	.word	0xffffde48
 80018f0:	ffffda58 	.word	0xffffda58
 80018f4:	ffffd85c 	.word	0xffffd85c
 80018f8:	0801fd70 	.word	0x0801fd70
 80018fc:	ffffdc50 	.word	0xffffdc50
 8001900:	0801fda4 	.word	0x0801fda4
 8001904:	0801fda8 	.word	0x0801fda8
 8001908:	ffffd958 	.word	0xffffd958
 800190c:	0801fdbc 	.word	0x0801fdbc
 8001910:	0801fdc4 	.word	0x0801fdc4
 8001914:	ffffdb54 	.word	0xffffdb54
 8001918:	ffffdd4c 	.word	0xffffdd4c
					//CDC_Transmit_HS(command, strlen(command));
				}
			} else if ((!have_recieved_anything && HAL_GetTick() - previousTime > 1000) ||
 800191c:	f642 030c 	movw	r3, #10252	; 0x280c
 8001920:	443b      	add	r3, r7
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d10a      	bne.n	800193e <main+0x3ce>
 8001928:	f002 fc3a 	bl	80041a0 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	f642 0308 	movw	r3, #10248	; 0x2808
 8001932:	443b      	add	r3, r7
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800193c:	d813      	bhi.n	8001966 <main+0x3f6>
 800193e:	f642 030c 	movw	r3, #10252	; 0x280c
 8001942:	443b      	add	r3, r7
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	f43f aed5 	beq.w	80016f6 <main+0x186>
					(have_recieved_anything && HAL_GetTick() - previousTime > 5000)) {
 800194c:	f002 fc28 	bl	80041a0 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	f642 0308 	movw	r3, #10248	; 0x2808
 8001956:	443b      	add	r3, r7
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001960:	4293      	cmp	r3, r2
 8001962:	f67f aec8 	bls.w	80016f6 <main+0x186>
				//CDC_Transmit_HS("hi5", strlen("hi5"));
				CDC_Transmit_HS("reset\n", strlen("reset\n"));
 8001966:	2106      	movs	r1, #6
 8001968:	48ae      	ldr	r0, [pc, #696]	; (8001c24 <main+0x6b4>)
 800196a:	f018 fe75 	bl	801a658 <CDC_Transmit_HS>
				previousTime = HAL_GetTick();
 800196e:	f002 fc17 	bl	80041a0 <HAL_GetTick>
 8001972:	f642 0308 	movw	r3, #10248	; 0x2808
 8001976:	443b      	add	r3, r7
 8001978:	6018      	str	r0, [r3, #0]
				//give up MASTER
				sprintf(response_packet, "$ %s", state);
 800197a:	4aab      	ldr	r2, [pc, #684]	; (8001c28 <main+0x6b8>)
 800197c:	f642 0310 	movw	r3, #10256	; 0x2810
 8001980:	4413      	add	r3, r2
 8001982:	19da      	adds	r2, r3, r7
 8001984:	4ba9      	ldr	r3, [pc, #676]	; (8001c2c <main+0x6bc>)
 8001986:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800198a:	f103 0310 	add.w	r3, r3, #16
 800198e:	443b      	add	r3, r7
 8001990:	49a7      	ldr	r1, [pc, #668]	; (8001c30 <main+0x6c0>)
 8001992:	4618      	mov	r0, r3
 8001994:	f01a f9b4 	bl	801bd00 <siprintf>
				LoRA_sendPacket(response_packet);
 8001998:	4ba4      	ldr	r3, [pc, #656]	; (8001c2c <main+0x6bc>)
 800199a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800199e:	f103 0310 	add.w	r3, r3, #16
 80019a2:	443b      	add	r3, r7
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fc45 	bl	8001234 <LoRA_sendPacket>
 80019aa:	e6a4      	b.n	80016f6 <main+0x186>
			}
		} else if (strcmp(communication_state, "RECEIVING STREAM") == 0){
 80019ac:	4ba1      	ldr	r3, [pc, #644]	; (8001c34 <main+0x6c4>)
 80019ae:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80019b2:	f103 0310 	add.w	r3, r3, #16
 80019b6:	443b      	add	r3, r7
 80019b8:	499f      	ldr	r1, [pc, #636]	; (8001c38 <main+0x6c8>)
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fca8 	bl	8000310 <strcmp>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d172      	bne.n	8001aac <main+0x53c>
			if(recv_packet(recieved_packet, MAX_PACKET_LENGTH))
 80019c6:	4b9d      	ldr	r3, [pc, #628]	; (8001c3c <main+0x6cc>)
 80019c8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80019cc:	f103 0310 	add.w	r3, r3, #16
 80019d0:	443b      	add	r3, r7
 80019d2:	21fa      	movs	r1, #250	; 0xfa
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff fcfd 	bl	80013d4 <recv_packet>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d03a      	beq.n	8001a56 <main+0x4e6>
			{
				previousTime = HAL_GetTick();
 80019e0:	f002 fbde 	bl	80041a0 <HAL_GetTick>
 80019e4:	f642 0308 	movw	r3, #10248	; 0x2808
 80019e8:	443b      	add	r3, r7
 80019ea:	6018      	str	r0, [r3, #0]
				if(sscanf(recieved_packet, "$ %s", state) == 1)
 80019ec:	4a8e      	ldr	r2, [pc, #568]	; (8001c28 <main+0x6b8>)
 80019ee:	f642 0310 	movw	r3, #10256	; 0x2810
 80019f2:	4413      	add	r3, r2
 80019f4:	19da      	adds	r2, r3, r7
 80019f6:	4b91      	ldr	r3, [pc, #580]	; (8001c3c <main+0x6cc>)
 80019f8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80019fc:	f103 0310 	add.w	r3, r3, #16
 8001a00:	443b      	add	r3, r7
 8001a02:	498b      	ldr	r1, [pc, #556]	; (8001c30 <main+0x6c0>)
 8001a04:	4618      	mov	r0, r3
 8001a06:	f01a f99b 	bl	801bd40 <siscanf>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d10d      	bne.n	8001a2c <main+0x4bc>
				{
					strcpy(communication_state,"SENDING RELIABLE");
 8001a10:	4b88      	ldr	r3, [pc, #544]	; (8001c34 <main+0x6c4>)
 8001a12:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001a16:	f103 0310 	add.w	r3, r3, #16
 8001a1a:	443b      	add	r3, r7
 8001a1c:	4a88      	ldr	r2, [pc, #544]	; (8001c40 <main+0x6d0>)
 8001a1e:	461c      	mov	r4, r3
 8001a20:	4615      	mov	r5, r2
 8001a22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a26:	682b      	ldr	r3, [r5, #0]
 8001a28:	7023      	strb	r3, [r4, #0]
 8001a2a:	e664      	b.n	80016f6 <main+0x186>
				}
				else
				{
					CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 8001a2c:	4b83      	ldr	r3, [pc, #524]	; (8001c3c <main+0x6cc>)
 8001a2e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001a32:	f103 0310 	add.w	r3, r3, #16
 8001a36:	443b      	add	r3, r7
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fcc9 	bl	80003d0 <strlen>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	4b7e      	ldr	r3, [pc, #504]	; (8001c3c <main+0x6cc>)
 8001a42:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001a46:	f103 0310 	add.w	r3, r3, #16
 8001a4a:	443b      	add	r3, r7
 8001a4c:	4611      	mov	r1, r2
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f018 fe02 	bl	801a658 <CDC_Transmit_HS>
 8001a54:	e64f      	b.n	80016f6 <main+0x186>
				}
			}
			else if(HAL_GetTick()-previousTime > 1000)
 8001a56:	f002 fba3 	bl	80041a0 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	f642 0308 	movw	r3, #10248	; 0x2808
 8001a60:	443b      	add	r3, r7
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a6a:	f67f ae44 	bls.w	80016f6 <main+0x186>
			{
			  previousTime = HAL_GetTick();
 8001a6e:	f002 fb97 	bl	80041a0 <HAL_GetTick>
 8001a72:	f642 0308 	movw	r3, #10248	; 0x2808
 8001a76:	443b      	add	r3, r7
 8001a78:	6018      	str	r0, [r3, #0]
			  //give up SENDING
			  sprintf(response_packet, "! %d", packets_streamed);
 8001a7a:	4a72      	ldr	r2, [pc, #456]	; (8001c44 <main+0x6d4>)
 8001a7c:	f642 0310 	movw	r3, #10256	; 0x2810
 8001a80:	4413      	add	r3, r2
 8001a82:	19da      	adds	r2, r3, r7
 8001a84:	4b69      	ldr	r3, [pc, #420]	; (8001c2c <main+0x6bc>)
 8001a86:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001a8a:	f103 0310 	add.w	r3, r3, #16
 8001a8e:	443b      	add	r3, r7
 8001a90:	496d      	ldr	r1, [pc, #436]	; (8001c48 <main+0x6d8>)
 8001a92:	4618      	mov	r0, r3
 8001a94:	f01a f934 	bl	801bd00 <siprintf>
			  LoRA_sendPacket(response_packet);
 8001a98:	4b64      	ldr	r3, [pc, #400]	; (8001c2c <main+0x6bc>)
 8001a9a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001a9e:	f103 0310 	add.w	r3, r3, #16
 8001aa2:	443b      	add	r3, r7
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fbc5 	bl	8001234 <LoRA_sendPacket>
 8001aaa:	e624      	b.n	80016f6 <main+0x186>
			}
		} else if(strcmp(communication_state,"SENDING STREAM") == 0) {
 8001aac:	4b61      	ldr	r3, [pc, #388]	; (8001c34 <main+0x6c4>)
 8001aae:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001ab2:	f103 0310 	add.w	r3, r3, #16
 8001ab6:	443b      	add	r3, r7
 8001ab8:	4964      	ldr	r1, [pc, #400]	; (8001c4c <main+0x6dc>)
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fc28 	bl	8000310 <strcmp>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f040 80d6 	bne.w	8001c74 <main+0x704>
			if(max_packet_count == 0)
 8001ac8:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001acc:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d12e      	bne.n	8001b34 <main+0x5c4>
			{
				strcpy(communication_state,"RECEIVING RELIABLE");
 8001ad6:	4b57      	ldr	r3, [pc, #348]	; (8001c34 <main+0x6c4>)
 8001ad8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001adc:	f103 0310 	add.w	r3, r3, #16
 8001ae0:	443b      	add	r3, r7
 8001ae2:	4a5b      	ldr	r2, [pc, #364]	; (8001c50 <main+0x6e0>)
 8001ae4:	461c      	mov	r4, r3
 8001ae6:	4615      	mov	r5, r2
 8001ae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aec:	682b      	ldr	r3, [r5, #0]
 8001aee:	461a      	mov	r2, r3
 8001af0:	8022      	strh	r2, [r4, #0]
 8001af2:	3402      	adds	r4, #2
 8001af4:	0c1b      	lsrs	r3, r3, #16
 8001af6:	7023      	strb	r3, [r4, #0]
				have_recieved_anything = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	f642 020c 	movw	r2, #10252	; 0x280c
 8001afe:	443a      	add	r2, r7
 8001b00:	6013      	str	r3, [r2, #0]
				sprintf(response_packet, "$ %s", state);
 8001b02:	4a49      	ldr	r2, [pc, #292]	; (8001c28 <main+0x6b8>)
 8001b04:	f642 0310 	movw	r3, #10256	; 0x2810
 8001b08:	4413      	add	r3, r2
 8001b0a:	19da      	adds	r2, r3, r7
 8001b0c:	4b47      	ldr	r3, [pc, #284]	; (8001c2c <main+0x6bc>)
 8001b0e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001b12:	f103 0310 	add.w	r3, r3, #16
 8001b16:	443b      	add	r3, r7
 8001b18:	4945      	ldr	r1, [pc, #276]	; (8001c30 <main+0x6c0>)
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f01a f8f0 	bl	801bd00 <siprintf>
				LoRA_sendPacket(response_packet);
 8001b20:	4b42      	ldr	r3, [pc, #264]	; (8001c2c <main+0x6bc>)
 8001b22:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001b26:	f103 0310 	add.w	r3, r3, #16
 8001b2a:	443b      	add	r3, r7
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff fb81 	bl	8001234 <LoRA_sendPacket>
 8001b32:	e5e0      	b.n	80016f6 <main+0x186>
			}
			else
			{
				//send whatever
				if (strcmp(state, "ARMED") == 0) {
 8001b34:	4b3c      	ldr	r3, [pc, #240]	; (8001c28 <main+0x6b8>)
 8001b36:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001b3a:	f103 0310 	add.w	r3, r3, #16
 8001b3e:	443b      	add	r3, r7
 8001b40:	4944      	ldr	r1, [pc, #272]	; (8001c54 <main+0x6e4>)
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fbe4 	bl	8000310 <strcmp>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d15e      	bne.n	8001c0c <main+0x69c>
					if (strcmp(command, "FIRE") == 0) {
 8001b4e:	4b42      	ldr	r3, [pc, #264]	; (8001c58 <main+0x6e8>)
 8001b50:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001b54:	f103 0310 	add.w	r3, r3, #16
 8001b58:	443b      	add	r3, r7
 8001b5a:	4940      	ldr	r1, [pc, #256]	; (8001c5c <main+0x6ec>)
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fbd7 	bl	8000310 <strcmp>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d151      	bne.n	8001c0c <main+0x69c>
						HAL_ADC_Start(&hadc1); // start the adc
 8001b68:	483d      	ldr	r0, [pc, #244]	; (8001c60 <main+0x6f0>)
 8001b6a:	f003 f853 	bl	8004c14 <HAL_ADC_Start>
						HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 8001b6e:	2164      	movs	r1, #100	; 0x64
 8001b70:	483b      	ldr	r0, [pc, #236]	; (8001c60 <main+0x6f0>)
 8001b72:	f003 f94d 	bl	8004e10 <HAL_ADC_PollForConversion>
						char debug_data[100];
						uint16_t adc_val = HAL_ADC_GetValue(&hadc1); // get the adc value
 8001b76:	483a      	ldr	r0, [pc, #232]	; (8001c60 <main+0x6f0>)
 8001b78:	f003 fa3e 	bl	8004ff8 <HAL_ADC_GetValue>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	f242 72ee 	movw	r2, #10222	; 0x27ee
 8001b82:	443a      	add	r2, r7
 8001b84:	8013      	strh	r3, [r2, #0]
						sprintf(debug_data, "%d, %d\n", HAL_GetTick(), adc_val);
 8001b86:	f002 fb0b 	bl	80041a0 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	f242 73ee 	movw	r3, #10222	; 0x27ee
 8001b90:	443b      	add	r3, r7
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	4833      	ldr	r0, [pc, #204]	; (8001c64 <main+0x6f4>)
 8001b96:	f642 0110 	movw	r1, #10256	; 0x2810
 8001b9a:	4401      	add	r1, r0
 8001b9c:	19c8      	adds	r0, r1, r7
 8001b9e:	4932      	ldr	r1, [pc, #200]	; (8001c68 <main+0x6f8>)
 8001ba0:	f01a f8ae 	bl	801bd00 <siprintf>
						FR_Status = f_open(&Fil, "MyTextFile.txt",
 8001ba4:	4b31      	ldr	r3, [pc, #196]	; (8001c6c <main+0x6fc>)
 8001ba6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001baa:	f103 0310 	add.w	r3, r3, #16
 8001bae:	443b      	add	r3, r7
 8001bb0:	2232      	movs	r2, #50	; 0x32
 8001bb2:	492f      	ldr	r1, [pc, #188]	; (8001c70 <main+0x700>)
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f017 fec9 	bl	801994c <f_open>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	f242 72ff 	movw	r2, #10239	; 0x27ff
 8001bc0:	443a      	add	r2, r7
 8001bc2:	7013      	strb	r3, [r2, #0]
								FA_OPEN_APPEND | FA_WRITE);
						f_puts(debug_data, &Fil);
 8001bc4:	4a29      	ldr	r2, [pc, #164]	; (8001c6c <main+0x6fc>)
 8001bc6:	f642 0310 	movw	r3, #10256	; 0x2810
 8001bca:	4413      	add	r3, r2
 8001bcc:	19da      	adds	r2, r3, r7
 8001bce:	4b25      	ldr	r3, [pc, #148]	; (8001c64 <main+0x6f4>)
 8001bd0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001bd4:	f103 0310 	add.w	r3, r3, #16
 8001bd8:	443b      	add	r3, r7
 8001bda:	4611      	mov	r1, r2
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f018 fb34 	bl	801a24a <f_puts>
						f_close(&Fil);
 8001be2:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <main+0x6fc>)
 8001be4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001be8:	f103 0310 	add.w	r3, r3, #16
 8001bec:	443b      	add	r3, r7
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f018 fa8a 	bl	801a108 <f_close>
						HAL_ADC_Stop(&hadc1); // stop adc
 8001bf4:	481a      	ldr	r0, [pc, #104]	; (8001c60 <main+0x6f0>)
 8001bf6:	f003 f8d7 	bl	8004da8 <HAL_ADC_Stop>
						LoRA_sendPacket(debug_data);
 8001bfa:	4b1a      	ldr	r3, [pc, #104]	; (8001c64 <main+0x6f4>)
 8001bfc:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001c00:	f103 0310 	add.w	r3, r3, #16
 8001c04:	443b      	add	r3, r7
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fb14 	bl	8001234 <LoRA_sendPacket>
					}
				}
				max_packet_count--;
 8001c0c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001c10:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	1e5a      	subs	r2, r3, #1
 8001c18:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001c1c:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	e568      	b.n	80016f6 <main+0x186>
 8001c24:	0801fdd4 	.word	0x0801fdd4
 8001c28:	ffffde48 	.word	0xffffde48
 8001c2c:	ffffda58 	.word	0xffffda58
 8001c30:	0801fddc 	.word	0x0801fddc
 8001c34:	ffffd85c 	.word	0xffffd85c
 8001c38:	0801fde4 	.word	0x0801fde4
 8001c3c:	ffffdc50 	.word	0xffffdc50
 8001c40:	0801fda8 	.word	0x0801fda8
 8001c44:	ffffd95c 	.word	0xffffd95c
 8001c48:	0801fdbc 	.word	0x0801fdbc
 8001c4c:	0801fdc4 	.word	0x0801fdc4
 8001c50:	0801fd90 	.word	0x0801fd90
 8001c54:	0801fd4c 	.word	0x0801fd4c
 8001c58:	ffffdd4c 	.word	0xffffdd4c
 8001c5c:	0801fdf8 	.word	0x0801fdf8
 8001c60:	24000c6c 	.word	0x24000c6c
 8001c64:	ffffd7f0 	.word	0xffffd7f0
 8001c68:	0801fe00 	.word	0x0801fe00
 8001c6c:	ffffdf44 	.word	0xffffdf44
 8001c70:	0801fd60 	.word	0x0801fd60
			}
			
		}
		else if (strcmp(communication_state, "SENDING RELIABLE") == 0) {
 8001c74:	4bc9      	ldr	r3, [pc, #804]	; (8001f9c <main+0xa2c>)
 8001c76:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001c7a:	f103 0310 	add.w	r3, r3, #16
 8001c7e:	443b      	add	r3, r7
 8001c80:	49c7      	ldr	r1, [pc, #796]	; (8001fa0 <main+0xa30>)
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe fb44 	bl	8000310 <strcmp>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f47f ad33 	bne.w	80016f6 <main+0x186>
			if (strcmp(state, "DISARMED") == 0) {
 8001c90:	4bc4      	ldr	r3, [pc, #784]	; (8001fa4 <main+0xa34>)
 8001c92:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001c96:	f103 0310 	add.w	r3, r3, #16
 8001c9a:	443b      	add	r3, r7
 8001c9c:	49c2      	ldr	r1, [pc, #776]	; (8001fa8 <main+0xa38>)
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fb36 	bl	8000310 <strcmp>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f040 80e7 	bne.w	8001e7a <main+0x90a>
				if (strcmp(command, "ARM") == 0) {
 8001cac:	4bbf      	ldr	r3, [pc, #764]	; (8001fac <main+0xa3c>)
 8001cae:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001cb2:	f103 0310 	add.w	r3, r3, #16
 8001cb6:	443b      	add	r3, r7
 8001cb8:	49bd      	ldr	r1, [pc, #756]	; (8001fb0 <main+0xa40>)
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fb28 	bl	8000310 <strcmp>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d11a      	bne.n	8001cfc <main+0x78c>
					CDC_Transmit_HS("HELLO 2", strlen("HELLO 2"));
 8001cc6:	2107      	movs	r1, #7
 8001cc8:	48ba      	ldr	r0, [pc, #744]	; (8001fb4 <main+0xa44>)
 8001cca:	f018 fcc5 	bl	801a658 <CDC_Transmit_HS>
					if (!arm(state)) {
 8001cce:	4bb5      	ldr	r3, [pc, #724]	; (8001fa4 <main+0xa34>)
 8001cd0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001cd4:	f103 0310 	add.w	r3, r3, #16
 8001cd8:	443b      	add	r3, r7
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fb48 	bl	8001370 <arm>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d106      	bne.n	8001cf4 <main+0x784>
						LoRA_sendPacket("h");
 8001ce6:	48b4      	ldr	r0, [pc, #720]	; (8001fb8 <main+0xa48>)
 8001ce8:	f7ff faa4 	bl	8001234 <LoRA_sendPacket>
						reliable_send_packet("ARM SUCCESS");
 8001cec:	48b3      	ldr	r0, [pc, #716]	; (8001fbc <main+0xa4c>)
 8001cee:	f7ff fba1 	bl	8001434 <reliable_send_packet>
 8001cf2:	e11f      	b.n	8001f34 <main+0x9c4>
					} else {
						reliable_send_packet("ARM UNSUCCESSFUL");
 8001cf4:	48b2      	ldr	r0, [pc, #712]	; (8001fc0 <main+0xa50>)
 8001cf6:	f7ff fb9d 	bl	8001434 <reliable_send_packet>
 8001cfa:	e11b      	b.n	8001f34 <main+0x9c4>
					}
				} else if (strcmp(command, "DISARM") == 0) {
 8001cfc:	4bab      	ldr	r3, [pc, #684]	; (8001fac <main+0xa3c>)
 8001cfe:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001d02:	f103 0310 	add.w	r3, r3, #16
 8001d06:	443b      	add	r3, r7
 8001d08:	49ae      	ldr	r1, [pc, #696]	; (8001fc4 <main+0xa54>)
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fb00 	bl	8000310 <strcmp>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d103      	bne.n	8001d1e <main+0x7ae>
					reliable_send_packet("ALREADY DISARMED");
 8001d16:	48ac      	ldr	r0, [pc, #688]	; (8001fc8 <main+0xa58>)
 8001d18:	f7ff fb8c 	bl	8001434 <reliable_send_packet>
 8001d1c:	e10a      	b.n	8001f34 <main+0x9c4>
				} else if (strcmp(command, "CONT") == 0) {
 8001d1e:	4ba3      	ldr	r3, [pc, #652]	; (8001fac <main+0xa3c>)
 8001d20:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001d24:	f103 0310 	add.w	r3, r3, #16
 8001d28:	443b      	add	r3, r7
 8001d2a:	49a8      	ldr	r1, [pc, #672]	; (8001fcc <main+0xa5c>)
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe faef 	bl	8000310 <strcmp>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f040 80fd 	bne.w	8001f34 <main+0x9c4>
					uint8_t CONTS[8];
					CONTS[0] = HAL_GPIO_ReadPin(CONT1_GPIO_Port, CONT1_Pin);
 8001d3a:	2104      	movs	r1, #4
 8001d3c:	48a4      	ldr	r0, [pc, #656]	; (8001fd0 <main+0xa60>)
 8001d3e:	f007 f921 	bl	8008f84 <HAL_GPIO_ReadPin>
 8001d42:	4603      	mov	r3, r0
 8001d44:	461a      	mov	r2, r3
 8001d46:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001d4a:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8001d4e:	701a      	strb	r2, [r3, #0]
					CONTS[1] = HAL_GPIO_ReadPin(CONT2_GPIO_Port, CONT2_Pin);
 8001d50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d54:	489f      	ldr	r0, [pc, #636]	; (8001fd4 <main+0xa64>)
 8001d56:	f007 f915 	bl	8008f84 <HAL_GPIO_ReadPin>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001d62:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8001d66:	705a      	strb	r2, [r3, #1]
					CONTS[2] = HAL_GPIO_ReadPin(CONT3_GPIO_Port, CONT3_Pin);
 8001d68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d6c:	4899      	ldr	r0, [pc, #612]	; (8001fd4 <main+0xa64>)
 8001d6e:	f007 f909 	bl	8008f84 <HAL_GPIO_ReadPin>
 8001d72:	4603      	mov	r3, r0
 8001d74:	461a      	mov	r2, r3
 8001d76:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001d7a:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8001d7e:	709a      	strb	r2, [r3, #2]
					CONTS[3] = HAL_GPIO_ReadPin(CONT4_GPIO_Port, CONT4_Pin);
 8001d80:	2101      	movs	r1, #1
 8001d82:	4895      	ldr	r0, [pc, #596]	; (8001fd8 <main+0xa68>)
 8001d84:	f007 f8fe 	bl	8008f84 <HAL_GPIO_ReadPin>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001d90:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8001d94:	70da      	strb	r2, [r3, #3]
					CONTS[4] = HAL_GPIO_ReadPin(CONT5_GPIO_Port, CONT5_Pin);
 8001d96:	2180      	movs	r1, #128	; 0x80
 8001d98:	4890      	ldr	r0, [pc, #576]	; (8001fdc <main+0xa6c>)
 8001d9a:	f007 f8f3 	bl	8008f84 <HAL_GPIO_ReadPin>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	461a      	mov	r2, r3
 8001da2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001da6:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8001daa:	711a      	strb	r2, [r3, #4]
					CONTS[5] = HAL_GPIO_ReadPin(CONT6_GPIO_Port, CONT6_Pin);
 8001dac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001db0:	488a      	ldr	r0, [pc, #552]	; (8001fdc <main+0xa6c>)
 8001db2:	f007 f8e7 	bl	8008f84 <HAL_GPIO_ReadPin>
 8001db6:	4603      	mov	r3, r0
 8001db8:	461a      	mov	r2, r3
 8001dba:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001dbe:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8001dc2:	715a      	strb	r2, [r3, #5]
					CONTS[6] = HAL_GPIO_ReadPin(CONT7_GPIO_Port, CONT7_Pin);
 8001dc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dc8:	4884      	ldr	r0, [pc, #528]	; (8001fdc <main+0xa6c>)
 8001dca:	f007 f8db 	bl	8008f84 <HAL_GPIO_ReadPin>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001dd6:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8001dda:	719a      	strb	r2, [r3, #6]
					CONTS[7] = HAL_GPIO_ReadPin(CONT8_GPIO_Port, CONT8_Pin);
 8001ddc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001de0:	487e      	ldr	r0, [pc, #504]	; (8001fdc <main+0xa6c>)
 8001de2:	f007 f8cf 	bl	8008f84 <HAL_GPIO_ReadPin>
 8001de6:	4603      	mov	r3, r0
 8001de8:	461a      	mov	r2, r3
 8001dea:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001dee:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8001df2:	71da      	strb	r2, [r3, #7]

					char message[100];
					for (int i = 0; i < 8; i++) {
 8001df4:	2300      	movs	r3, #0
 8001df6:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	e037      	b.n	8001e6e <main+0x8fe>
						if (CONTS[i]) {
 8001dfe:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001e02:	f2a3 72ac 	subw	r2, r3, #1964	; 0x7ac
 8001e06:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00e      	beq.n	8001e32 <main+0x8c2>
							sprintf(message, "PYRO %d DOESN'T HAVE CONTINUITY",
 8001e14:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	1c5a      	adds	r2, r3, #1
 8001e1c:	4b70      	ldr	r3, [pc, #448]	; (8001fe0 <main+0xa70>)
 8001e1e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001e22:	f103 0310 	add.w	r3, r3, #16
 8001e26:	443b      	add	r3, r7
 8001e28:	496e      	ldr	r1, [pc, #440]	; (8001fe4 <main+0xa74>)
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f019 ff68 	bl	801bd00 <siprintf>
 8001e30:	e00d      	b.n	8001e4e <main+0x8de>
									i + 1);
						} else {
							sprintf(message, "PYRO %d HAS CONTINUITY", i + 1);
 8001e32:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	4b69      	ldr	r3, [pc, #420]	; (8001fe0 <main+0xa70>)
 8001e3c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001e40:	f103 0310 	add.w	r3, r3, #16
 8001e44:	443b      	add	r3, r7
 8001e46:	4968      	ldr	r1, [pc, #416]	; (8001fe8 <main+0xa78>)
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f019 ff59 	bl	801bd00 <siprintf>
						}

						reliable_send_packet(message);
 8001e4e:	4b64      	ldr	r3, [pc, #400]	; (8001fe0 <main+0xa70>)
 8001e50:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001e54:	f103 0310 	add.w	r3, r3, #16
 8001e58:	443b      	add	r3, r7
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff faea 	bl	8001434 <reliable_send_packet>
					for (int i = 0; i < 8; i++) {
 8001e60:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	3301      	adds	r3, #1
 8001e68:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b07      	cmp	r3, #7
 8001e76:	ddc2      	ble.n	8001dfe <main+0x88e>
 8001e78:	e05c      	b.n	8001f34 <main+0x9c4>
					}
				}
			} else if (strcmp(state, "ARMED") == 0) {
 8001e7a:	4b4a      	ldr	r3, [pc, #296]	; (8001fa4 <main+0xa34>)
 8001e7c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001e80:	f103 0310 	add.w	r3, r3, #16
 8001e84:	443b      	add	r3, r7
 8001e86:	4959      	ldr	r1, [pc, #356]	; (8001fec <main+0xa7c>)
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fa41 	bl	8000310 <strcmp>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d140      	bne.n	8001f16 <main+0x9a6>
				if (strcmp(command, "DISARM") == 0) {
 8001e94:	4b45      	ldr	r3, [pc, #276]	; (8001fac <main+0xa3c>)
 8001e96:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001e9a:	f103 0310 	add.w	r3, r3, #16
 8001e9e:	443b      	add	r3, r7
 8001ea0:	4948      	ldr	r1, [pc, #288]	; (8001fc4 <main+0xa54>)
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe fa34 	bl	8000310 <strcmp>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d113      	bne.n	8001ed6 <main+0x966>
					if (!disarm(state)) {
 8001eae:	4b3d      	ldr	r3, [pc, #244]	; (8001fa4 <main+0xa34>)
 8001eb0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001eb4:	f103 0310 	add.w	r3, r3, #16
 8001eb8:	443b      	add	r3, r7
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff f9e4 	bl	8001288 <disarm>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d103      	bne.n	8001ece <main+0x95e>
						reliable_send_packet("DISARM SUCCESS");
 8001ec6:	484a      	ldr	r0, [pc, #296]	; (8001ff0 <main+0xa80>)
 8001ec8:	f7ff fab4 	bl	8001434 <reliable_send_packet>
 8001ecc:	e01e      	b.n	8001f0c <main+0x99c>
					} else {
						reliable_send_packet("DISARM UNSUCCESS");
 8001ece:	4849      	ldr	r0, [pc, #292]	; (8001ff4 <main+0xa84>)
 8001ed0:	f7ff fab0 	bl	8001434 <reliable_send_packet>
 8001ed4:	e01a      	b.n	8001f0c <main+0x99c>
					}
				} else if (strcmp(command, "ARM") == 0) {
 8001ed6:	4b35      	ldr	r3, [pc, #212]	; (8001fac <main+0xa3c>)
 8001ed8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001edc:	f103 0310 	add.w	r3, r3, #16
 8001ee0:	443b      	add	r3, r7
 8001ee2:	4933      	ldr	r1, [pc, #204]	; (8001fb0 <main+0xa40>)
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7fe fa13 	bl	8000310 <strcmp>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d103      	bne.n	8001ef8 <main+0x988>
					reliable_send_packet("ALREADY ARMED");
 8001ef0:	4841      	ldr	r0, [pc, #260]	; (8001ff8 <main+0xa88>)
 8001ef2:	f7ff fa9f 	bl	8001434 <reliable_send_packet>
 8001ef6:	e009      	b.n	8001f0c <main+0x99c>
				} else if (strcmp(command, "FIRE") == 0) {
 8001ef8:	4b2c      	ldr	r3, [pc, #176]	; (8001fac <main+0xa3c>)
 8001efa:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001efe:	f103 0310 	add.w	r3, r3, #16
 8001f02:	443b      	add	r3, r7
 8001f04:	493d      	ldr	r1, [pc, #244]	; (8001ffc <main+0xa8c>)
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe fa02 	bl	8000310 <strcmp>
					//strcpy(state, "STATIC_FIRE_LOGGING");
				}
				CDC_Transmit_HS("\nIamhere\n", strlen("\nIamhere\n"));
 8001f0c:	2109      	movs	r1, #9
 8001f0e:	483c      	ldr	r0, [pc, #240]	; (8002000 <main+0xa90>)
 8001f10:	f018 fba2 	bl	801a658 <CDC_Transmit_HS>
 8001f14:	e00e      	b.n	8001f34 <main+0x9c4>
			} else {
				LoRA_sendPacket("state wrong!");
 8001f16:	483b      	ldr	r0, [pc, #236]	; (8002004 <main+0xa94>)
 8001f18:	f7ff f98c 	bl	8001234 <LoRA_sendPacket>
				HAL_Delay(100);
 8001f1c:	2064      	movs	r0, #100	; 0x64
 8001f1e:	f002 f94b 	bl	80041b8 <HAL_Delay>
				LoRA_sendPacket(state);
 8001f22:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <main+0xa34>)
 8001f24:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001f28:	f103 0310 	add.w	r3, r3, #16
 8001f2c:	443b      	add	r3, r7
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff f980 	bl	8001234 <LoRA_sendPacket>
			}
			//HAL_Delay(100);
			sprintf(response_packet, "$ %s", state);
 8001f34:	4a1b      	ldr	r2, [pc, #108]	; (8001fa4 <main+0xa34>)
 8001f36:	f642 0310 	movw	r3, #10256	; 0x2810
 8001f3a:	4413      	add	r3, r2
 8001f3c:	19da      	adds	r2, r3, r7
 8001f3e:	4b32      	ldr	r3, [pc, #200]	; (8002008 <main+0xa98>)
 8001f40:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001f44:	f103 0310 	add.w	r3, r3, #16
 8001f48:	443b      	add	r3, r7
 8001f4a:	4930      	ldr	r1, [pc, #192]	; (800200c <main+0xa9c>)
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f019 fed7 	bl	801bd00 <siprintf>
			LoRA_sendPacket(response_packet);
 8001f52:	4b2d      	ldr	r3, [pc, #180]	; (8002008 <main+0xa98>)
 8001f54:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001f58:	f103 0310 	add.w	r3, r3, #16
 8001f5c:	443b      	add	r3, r7
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff f968 	bl	8001234 <LoRA_sendPacket>
			CDC_Transmit_HS("\nIamhere2\n", strlen("\nIamhere2\n"));
 8001f64:	210a      	movs	r1, #10
 8001f66:	482a      	ldr	r0, [pc, #168]	; (8002010 <main+0xaa0>)
 8001f68:	f018 fb76 	bl	801a658 <CDC_Transmit_HS>
			strcpy(communication_state, "RECEIVING RELIABLE");
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <main+0xa2c>)
 8001f6e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001f72:	f103 0310 	add.w	r3, r3, #16
 8001f76:	443b      	add	r3, r7
 8001f78:	4a26      	ldr	r2, [pc, #152]	; (8002014 <main+0xaa4>)
 8001f7a:	461c      	mov	r4, r3
 8001f7c:	4615      	mov	r5, r2
 8001f7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f82:	682b      	ldr	r3, [r5, #0]
 8001f84:	461a      	mov	r2, r3
 8001f86:	8022      	strh	r2, [r4, #0]
 8001f88:	3402      	adds	r4, #2
 8001f8a:	0c1b      	lsrs	r3, r3, #16
 8001f8c:	7023      	strb	r3, [r4, #0]
			have_recieved_anything = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f642 020c 	movw	r2, #10252	; 0x280c
 8001f94:	443a      	add	r2, r7
 8001f96:	6013      	str	r3, [r2, #0]
		if(HAL_GetTick()- debugTime > 1000) {
 8001f98:	f7ff bbad 	b.w	80016f6 <main+0x186>
 8001f9c:	ffffd85c 	.word	0xffffd85c
 8001fa0:	0801fda8 	.word	0x0801fda8
 8001fa4:	ffffde48 	.word	0xffffde48
 8001fa8:	0801fd40 	.word	0x0801fd40
 8001fac:	ffffdd4c 	.word	0xffffdd4c
 8001fb0:	0801fe08 	.word	0x0801fe08
 8001fb4:	0801fe0c 	.word	0x0801fe0c
 8001fb8:	0801fe14 	.word	0x0801fe14
 8001fbc:	0801fe18 	.word	0x0801fe18
 8001fc0:	0801fe24 	.word	0x0801fe24
 8001fc4:	0801fe38 	.word	0x0801fe38
 8001fc8:	0801fe40 	.word	0x0801fe40
 8001fcc:	0801fe54 	.word	0x0801fe54
 8001fd0:	58020400 	.word	0x58020400
 8001fd4:	58021400 	.word	0x58021400
 8001fd8:	58021800 	.word	0x58021800
 8001fdc:	58021000 	.word	0x58021000
 8001fe0:	ffffd7f0 	.word	0xffffd7f0
 8001fe4:	0801fe5c 	.word	0x0801fe5c
 8001fe8:	0801fe7c 	.word	0x0801fe7c
 8001fec:	0801fd4c 	.word	0x0801fd4c
 8001ff0:	0801fe94 	.word	0x0801fe94
 8001ff4:	0801fea4 	.word	0x0801fea4
 8001ff8:	0801feb8 	.word	0x0801feb8
 8001ffc:	0801fdf8 	.word	0x0801fdf8
 8002000:	0801fec8 	.word	0x0801fec8
 8002004:	0801fed4 	.word	0x0801fed4
 8002008:	ffffda58 	.word	0xffffda58
 800200c:	0801fddc 	.word	0x0801fddc
 8002010:	0801fee4 	.word	0x0801fee4
 8002014:	0801fd90 	.word	0x0801fd90

08002018 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002018:	b580      	push	{r7, lr}
 800201a:	b09c      	sub	sp, #112	; 0x70
 800201c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800201e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002022:	224c      	movs	r2, #76	; 0x4c
 8002024:	2100      	movs	r1, #0
 8002026:	4618      	mov	r0, r3
 8002028:	f019 fefb 	bl	801be22 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	2220      	movs	r2, #32
 8002030:	2100      	movs	r1, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f019 fef5 	bl	801be22 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002038:	2002      	movs	r0, #2
 800203a:	f008 fbcf 	bl	800a7dc <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800203e:	2300      	movs	r3, #0
 8002040:	603b      	str	r3, [r7, #0]
 8002042:	4b30      	ldr	r3, [pc, #192]	; (8002104 <SystemClock_Config+0xec>)
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800204a:	4a2e      	ldr	r2, [pc, #184]	; (8002104 <SystemClock_Config+0xec>)
 800204c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002050:	6193      	str	r3, [r2, #24]
 8002052:	4b2c      	ldr	r3, [pc, #176]	; (8002104 <SystemClock_Config+0xec>)
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800205a:	603b      	str	r3, [r7, #0]
 800205c:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 800205e:	bf00      	nop
 8002060:	4b28      	ldr	r3, [pc, #160]	; (8002104 <SystemClock_Config+0xec>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800206c:	d1f8      	bne.n	8002060 <SystemClock_Config+0x48>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 800206e:	2322      	movs	r3, #34	; 0x22
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002072:	2301      	movs	r3, #1
 8002074:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 8002076:	2340      	movs	r3, #64	; 0x40
 8002078:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800207a:	2301      	movs	r3, #1
 800207c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800207e:	2302      	movs	r3, #2
 8002080:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002082:	2300      	movs	r3, #0
 8002084:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8002086:	2304      	movs	r3, #4
 8002088:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 12;
 800208a:	230c      	movs	r3, #12
 800208c:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 800208e:	2301      	movs	r3, #1
 8002090:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8002092:	2303      	movs	r3, #3
 8002094:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002096:	2302      	movs	r3, #2
 8002098:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800209a:	230c      	movs	r3, #12
 800209c:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800209e:	2300      	movs	r3, #0
 80020a0:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80020a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020aa:	4618      	mov	r0, r3
 80020ac:	f008 fbe0 	bl	800a870 <HAL_RCC_OscConfig>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <SystemClock_Config+0xa2>
		Error_Handler();
 80020b6:	f000 ff39 	bl	8002f2c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80020ba:	233f      	movs	r3, #63	; 0x3f
 80020bc:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020be:	2303      	movs	r3, #3
 80020c0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80020c6:	2308      	movs	r3, #8
 80020c8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80020ca:	2340      	movs	r3, #64	; 0x40
 80020cc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80020ce:	2340      	movs	r3, #64	; 0x40
 80020d0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80020d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020d6:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80020d8:	2340      	movs	r3, #64	; 0x40
 80020da:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80020dc:	1d3b      	adds	r3, r7, #4
 80020de:	2101      	movs	r1, #1
 80020e0:	4618      	mov	r0, r3
 80020e2:	f008 ff9f 	bl	800b024 <HAL_RCC_ClockConfig>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <SystemClock_Config+0xd8>
		Error_Handler();
 80020ec:	f000 ff1e 	bl	8002f2c <Error_Handler>
	}
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80020f0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80020f4:	2100      	movs	r1, #0
 80020f6:	2000      	movs	r0, #0
 80020f8:	f009 f94a 	bl	800b390 <HAL_RCC_MCOConfig>
}
 80020fc:	bf00      	nop
 80020fe:	3770      	adds	r7, #112	; 0x70
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	58024800 	.word	0x58024800

08002108 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b0ae      	sub	sp, #184	; 0xb8
 800210c:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800210e:	463b      	mov	r3, r7
 8002110:	22b8      	movs	r2, #184	; 0xb8
 8002112:	2100      	movs	r1, #0
 8002114:	4618      	mov	r0, r3
 8002116:	f019 fe84 	bl	801be22 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC
 800211a:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 800211e:	f04f 0300 	mov.w	r3, #0
 8002122:	e9c7 2300 	strd	r2, r3, [r7]
			| RCC_PERIPHCLK_SPI3 | RCC_PERIPHCLK_SPI2 | RCC_PERIPHCLK_SPI1;
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 8002126:	2304      	movs	r3, #4
 8002128:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 12;
 800212a:	230c      	movs	r3, #12
 800212c:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 4;
 800212e:	2304      	movs	r3, #4
 8002130:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002132:	2302      	movs	r3, #2
 8002134:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002136:	2302      	movs	r3, #2
 8002138:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800213a:	23c0      	movs	r3, #192	; 0xc0
 800213c:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800213e:	2300      	movs	r3, #0
 8002140:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8002146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800214a:	65fb      	str	r3, [r7, #92]	; 0x5c
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800214c:	2300      	movs	r3, #0
 800214e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8002152:	463b      	mov	r3, r7
 8002154:	4618      	mov	r0, r3
 8002156:	f009 fb5b 	bl	800b810 <HAL_RCCEx_PeriphCLKConfig>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <PeriphCommonClock_Config+0x5c>
		Error_Handler();
 8002160:	f000 fee4 	bl	8002f2c <Error_Handler>
	}
}
 8002164:	bf00      	nop
 8002166:	37b8      	adds	r7, #184	; 0xb8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800216c:	b580      	push	{r7, lr}
 800216e:	b08c      	sub	sp, #48	; 0x30
 8002170:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8002172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800217e:	463b      	mov	r3, r7
 8002180:	2224      	movs	r2, #36	; 0x24
 8002182:	2100      	movs	r1, #0
 8002184:	4618      	mov	r0, r3
 8002186:	f019 fe4c 	bl	801be22 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800218a:	4b31      	ldr	r3, [pc, #196]	; (8002250 <MX_ADC1_Init+0xe4>)
 800218c:	4a31      	ldr	r2, [pc, #196]	; (8002254 <MX_ADC1_Init+0xe8>)
 800218e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8002190:	4b2f      	ldr	r3, [pc, #188]	; (8002250 <MX_ADC1_Init+0xe4>)
 8002192:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8002196:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8002198:	4b2d      	ldr	r3, [pc, #180]	; (8002250 <MX_ADC1_Init+0xe4>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800219e:	4b2c      	ldr	r3, [pc, #176]	; (8002250 <MX_ADC1_Init+0xe4>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021a4:	4b2a      	ldr	r3, [pc, #168]	; (8002250 <MX_ADC1_Init+0xe4>)
 80021a6:	2204      	movs	r2, #4
 80021a8:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80021aa:	4b29      	ldr	r3, [pc, #164]	; (8002250 <MX_ADC1_Init+0xe4>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80021b0:	4b27      	ldr	r3, [pc, #156]	; (8002250 <MX_ADC1_Init+0xe4>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 80021b6:	4b26      	ldr	r3, [pc, #152]	; (8002250 <MX_ADC1_Init+0xe4>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80021bc:	4b24      	ldr	r3, [pc, #144]	; (8002250 <MX_ADC1_Init+0xe4>)
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021c4:	4b22      	ldr	r3, [pc, #136]	; (8002250 <MX_ADC1_Init+0xe4>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021ca:	4b21      	ldr	r3, [pc, #132]	; (8002250 <MX_ADC1_Init+0xe4>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80021d0:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <MX_ADC1_Init+0xe4>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80021d6:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <MX_ADC1_Init+0xe4>)
 80021d8:	2200      	movs	r2, #0
 80021da:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80021dc:	4b1c      	ldr	r3, [pc, #112]	; (8002250 <MX_ADC1_Init+0xe4>)
 80021de:	2200      	movs	r2, #0
 80021e0:	641a      	str	r2, [r3, #64]	; 0x40
	hadc1.Init.OversamplingMode = DISABLE;
 80021e2:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <MX_ADC1_Init+0xe4>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80021ea:	4819      	ldr	r0, [pc, #100]	; (8002250 <MX_ADC1_Init+0xe4>)
 80021ec:	f002 fb0a 	bl	8004804 <HAL_ADC_Init>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_ADC1_Init+0x8e>
		Error_Handler();
 80021f6:	f000 fe99 	bl	8002f2c <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80021fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002202:	4619      	mov	r1, r3
 8002204:	4812      	ldr	r0, [pc, #72]	; (8002250 <MX_ADC1_Init+0xe4>)
 8002206:	f003 feeb 	bl	8005fe0 <HAL_ADCEx_MultiModeConfigChannel>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_ADC1_Init+0xa8>
		Error_Handler();
 8002210:	f000 fe8c 	bl	8002f2c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 8002214:	4b10      	ldr	r3, [pc, #64]	; (8002258 <MX_ADC1_Init+0xec>)
 8002216:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002218:	2306      	movs	r3, #6
 800221a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 800221c:	2303      	movs	r3, #3
 800221e:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002220:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002224:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002226:	2304      	movs	r3, #4
 8002228:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 800222e:	2300      	movs	r3, #0
 8002230:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002234:	463b      	mov	r3, r7
 8002236:	4619      	mov	r1, r3
 8002238:	4805      	ldr	r0, [pc, #20]	; (8002250 <MX_ADC1_Init+0xe4>)
 800223a:	f002 feeb 	bl	8005014 <HAL_ADC_ConfigChannel>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_ADC1_Init+0xdc>
		Error_Handler();
 8002244:	f000 fe72 	bl	8002f2c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002248:	bf00      	nop
 800224a:	3730      	adds	r7, #48	; 0x30
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	24000c6c 	.word	0x24000c6c
 8002254:	40022000 	.word	0x40022000
 8002258:	3ac04000 	.word	0x3ac04000

0800225c <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 800225c:	b580      	push	{r7, lr}
 800225e:	b08a      	sub	sp, #40	; 0x28
 8002260:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002262:	1d3b      	adds	r3, r7, #4
 8002264:	2224      	movs	r2, #36	; 0x24
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f019 fdda 	bl	801be22 <memset>

	/* USER CODE END ADC3_Init 1 */

	/** Common config
	 */
	hadc3.Instance = ADC3;
 800226e:	4b2f      	ldr	r3, [pc, #188]	; (800232c <MX_ADC3_Init+0xd0>)
 8002270:	4a2f      	ldr	r2, [pc, #188]	; (8002330 <MX_ADC3_Init+0xd4>)
 8002272:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8002274:	4b2d      	ldr	r3, [pc, #180]	; (800232c <MX_ADC3_Init+0xd0>)
 8002276:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 800227a:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800227c:	4b2b      	ldr	r3, [pc, #172]	; (800232c <MX_ADC3_Init+0xd0>)
 800227e:	2208      	movs	r2, #8
 8002280:	609a      	str	r2, [r3, #8]
	hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8002282:	4b2a      	ldr	r3, [pc, #168]	; (800232c <MX_ADC3_Init+0xd0>)
 8002284:	2200      	movs	r2, #0
 8002286:	60da      	str	r2, [r3, #12]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002288:	4b28      	ldr	r3, [pc, #160]	; (800232c <MX_ADC3_Init+0xd0>)
 800228a:	2200      	movs	r2, #0
 800228c:	611a      	str	r2, [r3, #16]
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800228e:	4b27      	ldr	r3, [pc, #156]	; (800232c <MX_ADC3_Init+0xd0>)
 8002290:	2204      	movs	r2, #4
 8002292:	615a      	str	r2, [r3, #20]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 8002294:	4b25      	ldr	r3, [pc, #148]	; (800232c <MX_ADC3_Init+0xd0>)
 8002296:	2200      	movs	r2, #0
 8002298:	761a      	strb	r2, [r3, #24]
	hadc3.Init.ContinuousConvMode = DISABLE;
 800229a:	4b24      	ldr	r3, [pc, #144]	; (800232c <MX_ADC3_Init+0xd0>)
 800229c:	2200      	movs	r2, #0
 800229e:	765a      	strb	r2, [r3, #25]
	hadc3.Init.NbrOfConversion = 1;
 80022a0:	4b22      	ldr	r3, [pc, #136]	; (800232c <MX_ADC3_Init+0xd0>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	61da      	str	r2, [r3, #28]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 80022a6:	4b21      	ldr	r3, [pc, #132]	; (800232c <MX_ADC3_Init+0xd0>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022ae:	4b1f      	ldr	r3, [pc, #124]	; (800232c <MX_ADC3_Init+0xd0>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022b4:	4b1d      	ldr	r3, [pc, #116]	; (800232c <MX_ADC3_Init+0xd0>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.DMAContinuousRequests = ENABLE;
 80022ba:	4b1c      	ldr	r3, [pc, #112]	; (800232c <MX_ADC3_Init+0xd0>)
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80022c2:	4b1a      	ldr	r3, [pc, #104]	; (800232c <MX_ADC3_Init+0xd0>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	635a      	str	r2, [r3, #52]	; 0x34
	hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80022c8:	4b18      	ldr	r3, [pc, #96]	; (800232c <MX_ADC3_Init+0xd0>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	631a      	str	r2, [r3, #48]	; 0x30
	hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80022ce:	4b17      	ldr	r3, [pc, #92]	; (800232c <MX_ADC3_Init+0xd0>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80022d4:	4b15      	ldr	r3, [pc, #84]	; (800232c <MX_ADC3_Init+0xd0>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	641a      	str	r2, [r3, #64]	; 0x40
	hadc3.Init.OversamplingMode = DISABLE;
 80022da:	4b14      	ldr	r3, [pc, #80]	; (800232c <MX_ADC3_Init+0xd0>)
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 80022e2:	4812      	ldr	r0, [pc, #72]	; (800232c <MX_ADC3_Init+0xd0>)
 80022e4:	f002 fa8e 	bl	8004804 <HAL_ADC_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_ADC3_Init+0x96>
		Error_Handler();
 80022ee:	f000 fe1d 	bl	8002f2c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80022f2:	4b10      	ldr	r3, [pc, #64]	; (8002334 <MX_ADC3_Init+0xd8>)
 80022f4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80022f6:	2306      	movs	r3, #6
 80022f8:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 80022fa:	2300      	movs	r3, #0
 80022fc:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80022fe:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002302:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002304:	2304      	movs	r3, #4
 8002306:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 800230c:	2300      	movs	r3, #0
 800230e:	623b      	str	r3, [r7, #32]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8002310:	1d3b      	adds	r3, r7, #4
 8002312:	4619      	mov	r1, r3
 8002314:	4805      	ldr	r0, [pc, #20]	; (800232c <MX_ADC3_Init+0xd0>)
 8002316:	f002 fe7d 	bl	8005014 <HAL_ADC_ConfigChannel>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_ADC3_Init+0xc8>
		Error_Handler();
 8002320:	f000 fe04 	bl	8002f2c <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8002324:	bf00      	nop
 8002326:	3728      	adds	r7, #40	; 0x28
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	24000cdc 	.word	0x24000cdc
 8002330:	58026000 	.word	0x58026000
 8002334:	04300002 	.word	0x04300002

08002338 <MX_FDCAN3_Init>:
/**
 * @brief FDCAN3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN3_Init(void) {
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN3_Init 0 */

	/* USER CODE BEGIN FDCAN3_Init 1 */

	/* USER CODE END FDCAN3_Init 1 */
	hfdcan3.Instance = FDCAN3;
 800233c:	4b2e      	ldr	r3, [pc, #184]	; (80023f8 <MX_FDCAN3_Init+0xc0>)
 800233e:	4a2f      	ldr	r2, [pc, #188]	; (80023fc <MX_FDCAN3_Init+0xc4>)
 8002340:	601a      	str	r2, [r3, #0]
	hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002342:	4b2d      	ldr	r3, [pc, #180]	; (80023f8 <MX_FDCAN3_Init+0xc0>)
 8002344:	2200      	movs	r2, #0
 8002346:	609a      	str	r2, [r3, #8]
	hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8002348:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <MX_FDCAN3_Init+0xc0>)
 800234a:	2200      	movs	r2, #0
 800234c:	60da      	str	r2, [r3, #12]
	hfdcan3.Init.AutoRetransmission = DISABLE;
 800234e:	4b2a      	ldr	r3, [pc, #168]	; (80023f8 <MX_FDCAN3_Init+0xc0>)
 8002350:	2200      	movs	r2, #0
 8002352:	741a      	strb	r2, [r3, #16]
	hfdcan3.Init.TransmitPause = DISABLE;
 8002354:	4b28      	ldr	r3, [pc, #160]	; (80023f8 <MX_FDCAN3_Init+0xc0>)
 8002356:	2200      	movs	r2, #0
 8002358:	745a      	strb	r2, [r3, #17]
	hfdcan3.Init.ProtocolException = DISABLE;
 800235a:	4b27      	ldr	r3, [pc, #156]	; (80023f8 <MX_FDCAN3_Init+0xc0>)
 800235c:	2200      	movs	r2, #0
 800235e:	749a      	strb	r2, [r3, #18]
	hfdcan3.Init.NominalPrescaler = 16;
 8002360:	4b25      	ldr	r3, [pc, #148]	; (80023f8 <MX_FDCAN3_Init+0xc0>)
 8002362:	2210      	movs	r2, #16
 8002364:	615a      	str	r2, [r3, #20]
	hfdcan3.Init.NominalSyncJumpWidth = 1;
 8002366:	4b24      	ldr	r3, [pc, #144]	; (80023f8 <MX_FDCAN3_Init+0xc0>)
 8002368:	2201      	movs	r2, #1
 800236a:	619a      	str	r2, [r3, #24]
	hfdcan3.Init.NominalTimeSeg1 = 2;
 800236c:	4b22      	ldr	r3, [pc, #136]	; (80023f8 <MX_FDCAN3_Init+0xc0>)
 800236e:	2202      	movs	r2, #2
 8002370:	61da      	str	r2, [r3, #28]
	hfdcan3.Init.NominalTimeSeg2 = 2;
 8002372:	4b21      	ldr	r3, [pc, #132]	; (80023f8 <MX_FDCAN3_Init+0xc0>)
 8002374:	2202      	movs	r2, #2
 8002376:	621a      	str	r2, [r3, #32]
	hfdcan3.Init.DataPrescaler = 1;
 8002378:	4b1f      	ldr	r3, [pc, #124]	; (80023f8 <MX_FDCAN3_Init+0xc0>)
 800237a:	2201      	movs	r2, #1
 800237c:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan3.Init.DataSyncJumpWidth = 1;
 800237e:	4b1e      	ldr	r3, [pc, #120]	; (80023f8 <MX_FDCAN3_Init+0xc0>)
 8002380:	2201      	movs	r2, #1
 8002382:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan3.Init.DataTimeSeg1 = 1;
 8002384:	4b1c      	ldr	r3, [pc, #112]	; (80023f8 <MX_FDCAN3_Init+0xc0>)
 8002386:	2201      	movs	r2, #1
 8002388:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan3.Init.DataTimeSeg2 = 1;
 800238a:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <MX_FDCAN3_Init+0xc0>)
 800238c:	2201      	movs	r2, #1
 800238e:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan3.Init.MessageRAMOffset = 0;
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <MX_FDCAN3_Init+0xc0>)
 8002392:	2200      	movs	r2, #0
 8002394:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan3.Init.StdFiltersNbr = 0;
 8002396:	4b18      	ldr	r3, [pc, #96]	; (80023f8 <MX_FDCAN3_Init+0xc0>)
 8002398:	2200      	movs	r2, #0
 800239a:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan3.Init.ExtFiltersNbr = 0;
 800239c:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <MX_FDCAN3_Init+0xc0>)
 800239e:	2200      	movs	r2, #0
 80023a0:	63da      	str	r2, [r3, #60]	; 0x3c
	hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 80023a2:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <MX_FDCAN3_Init+0xc0>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	641a      	str	r2, [r3, #64]	; 0x40
	hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80023a8:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <MX_FDCAN3_Init+0xc0>)
 80023aa:	2204      	movs	r2, #4
 80023ac:	645a      	str	r2, [r3, #68]	; 0x44
	hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 80023ae:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <MX_FDCAN3_Init+0xc0>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	649a      	str	r2, [r3, #72]	; 0x48
	hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80023b4:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <MX_FDCAN3_Init+0xc0>)
 80023b6:	2204      	movs	r2, #4
 80023b8:	64da      	str	r2, [r3, #76]	; 0x4c
	hfdcan3.Init.RxBuffersNbr = 0;
 80023ba:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <MX_FDCAN3_Init+0xc0>)
 80023bc:	2200      	movs	r2, #0
 80023be:	651a      	str	r2, [r3, #80]	; 0x50
	hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80023c0:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <MX_FDCAN3_Init+0xc0>)
 80023c2:	2204      	movs	r2, #4
 80023c4:	655a      	str	r2, [r3, #84]	; 0x54
	hfdcan3.Init.TxEventsNbr = 0;
 80023c6:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <MX_FDCAN3_Init+0xc0>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	659a      	str	r2, [r3, #88]	; 0x58
	hfdcan3.Init.TxBuffersNbr = 0;
 80023cc:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <MX_FDCAN3_Init+0xc0>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	65da      	str	r2, [r3, #92]	; 0x5c
	hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 80023d2:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <MX_FDCAN3_Init+0xc0>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	661a      	str	r2, [r3, #96]	; 0x60
	hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80023d8:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <MX_FDCAN3_Init+0xc0>)
 80023da:	2200      	movs	r2, #0
 80023dc:	665a      	str	r2, [r3, #100]	; 0x64
	hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80023de:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <MX_FDCAN3_Init+0xc0>)
 80023e0:	2204      	movs	r2, #4
 80023e2:	669a      	str	r2, [r3, #104]	; 0x68
	if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK) {
 80023e4:	4804      	ldr	r0, [pc, #16]	; (80023f8 <MX_FDCAN3_Init+0xc0>)
 80023e6:	f006 f8c1 	bl	800856c <HAL_FDCAN_Init>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_FDCAN3_Init+0xbc>
		Error_Handler();
 80023f0:	f000 fd9c 	bl	8002f2c <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN3_Init 2 */

	/* USER CODE END FDCAN3_Init 2 */

}
 80023f4:	bf00      	nop
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	24000e3c 	.word	0x24000e3c
 80023fc:	4000d400 	.word	0x4000d400

08002400 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8002404:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <MX_I2C2_Init+0x74>)
 8002406:	4a1c      	ldr	r2, [pc, #112]	; (8002478 <MX_I2C2_Init+0x78>)
 8002408:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x20303E5D;
 800240a:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <MX_I2C2_Init+0x74>)
 800240c:	4a1b      	ldr	r2, [pc, #108]	; (800247c <MX_I2C2_Init+0x7c>)
 800240e:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8002410:	4b18      	ldr	r3, [pc, #96]	; (8002474 <MX_I2C2_Init+0x74>)
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002416:	4b17      	ldr	r3, [pc, #92]	; (8002474 <MX_I2C2_Init+0x74>)
 8002418:	2201      	movs	r2, #1
 800241a:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800241c:	4b15      	ldr	r3, [pc, #84]	; (8002474 <MX_I2C2_Init+0x74>)
 800241e:	2200      	movs	r2, #0
 8002420:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8002422:	4b14      	ldr	r3, [pc, #80]	; (8002474 <MX_I2C2_Init+0x74>)
 8002424:	2200      	movs	r2, #0
 8002426:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002428:	4b12      	ldr	r3, [pc, #72]	; (8002474 <MX_I2C2_Init+0x74>)
 800242a:	2200      	movs	r2, #0
 800242c:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800242e:	4b11      	ldr	r3, [pc, #68]	; (8002474 <MX_I2C2_Init+0x74>)
 8002430:	2200      	movs	r2, #0
 8002432:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002434:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <MX_I2C2_Init+0x74>)
 8002436:	2200      	movs	r2, #0
 8002438:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 800243a:	480e      	ldr	r0, [pc, #56]	; (8002474 <MX_I2C2_Init+0x74>)
 800243c:	f006 fdd4 	bl	8008fe8 <HAL_I2C_Init>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_I2C2_Init+0x4a>
		Error_Handler();
 8002446:	f000 fd71 	bl	8002f2c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 800244a:	2100      	movs	r1, #0
 800244c:	4809      	ldr	r0, [pc, #36]	; (8002474 <MX_I2C2_Init+0x74>)
 800244e:	f006 fe75 	bl	800913c <HAL_I2CEx_ConfigAnalogFilter>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8002458:	f000 fd68 	bl	8002f2c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 800245c:	2100      	movs	r1, #0
 800245e:	4805      	ldr	r0, [pc, #20]	; (8002474 <MX_I2C2_Init+0x74>)
 8002460:	f006 feb7 	bl	80091d2 <HAL_I2CEx_ConfigDigitalFilter>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_I2C2_Init+0x6e>
		Error_Handler();
 800246a:	f000 fd5f 	bl	8002f2c <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	24000edc 	.word	0x24000edc
 8002478:	40005800 	.word	0x40005800
 800247c:	20303e5d 	.word	0x20303e5d

08002480 <MX_SDMMC2_SD_Init>:
/**
 * @brief SDMMC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC2_SD_Init(void) {
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC2_Init 0 */

	/* USER CODE BEGIN SDMMC2_Init 1 */

	/* USER CODE END SDMMC2_Init 1 */
	hsd2.Instance = SDMMC2;
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <MX_SDMMC2_SD_Init+0x34>)
 8002486:	4a0c      	ldr	r2, [pc, #48]	; (80024b8 <MX_SDMMC2_SD_Init+0x38>)
 8002488:	601a      	str	r2, [r3, #0]
	hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800248a:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <MX_SDMMC2_SD_Init+0x34>)
 800248c:	2200      	movs	r2, #0
 800248e:	605a      	str	r2, [r3, #4]
	hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002490:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <MX_SDMMC2_SD_Init+0x34>)
 8002492:	2200      	movs	r2, #0
 8002494:	609a      	str	r2, [r3, #8]
	hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002496:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <MX_SDMMC2_SD_Init+0x34>)
 8002498:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800249c:	60da      	str	r2, [r3, #12]
	hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800249e:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <MX_SDMMC2_SD_Init+0x34>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	611a      	str	r2, [r3, #16]
	hsd2.Init.ClockDiv = 8;
 80024a4:	4b03      	ldr	r3, [pc, #12]	; (80024b4 <MX_SDMMC2_SD_Init+0x34>)
 80024a6:	2208      	movs	r2, #8
 80024a8:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN SDMMC2_Init 2 */

	/* USER CODE END SDMMC2_Init 2 */

}
 80024aa:	bf00      	nop
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	24000f30 	.word	0x24000f30
 80024b8:	48022400 	.word	0x48022400

080024bc <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80024c0:	4b27      	ldr	r3, [pc, #156]	; (8002560 <MX_SPI1_Init+0xa4>)
 80024c2:	4a28      	ldr	r2, [pc, #160]	; (8002564 <MX_SPI1_Init+0xa8>)
 80024c4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80024c6:	4b26      	ldr	r3, [pc, #152]	; (8002560 <MX_SPI1_Init+0xa4>)
 80024c8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80024cc:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024ce:	4b24      	ldr	r3, [pc, #144]	; (8002560 <MX_SPI1_Init+0xa4>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024d4:	4b22      	ldr	r3, [pc, #136]	; (8002560 <MX_SPI1_Init+0xa4>)
 80024d6:	2207      	movs	r2, #7
 80024d8:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024da:	4b21      	ldr	r3, [pc, #132]	; (8002560 <MX_SPI1_Init+0xa4>)
 80024dc:	2200      	movs	r2, #0
 80024de:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024e0:	4b1f      	ldr	r3, [pc, #124]	; (8002560 <MX_SPI1_Init+0xa4>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80024e6:	4b1e      	ldr	r3, [pc, #120]	; (8002560 <MX_SPI1_Init+0xa4>)
 80024e8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80024ec:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80024ee:	4b1c      	ldr	r3, [pc, #112]	; (8002560 <MX_SPI1_Init+0xa4>)
 80024f0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80024f4:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024f6:	4b1a      	ldr	r3, [pc, #104]	; (8002560 <MX_SPI1_Init+0xa4>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024fc:	4b18      	ldr	r3, [pc, #96]	; (8002560 <MX_SPI1_Init+0xa4>)
 80024fe:	2200      	movs	r2, #0
 8002500:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002502:	4b17      	ldr	r3, [pc, #92]	; (8002560 <MX_SPI1_Init+0xa4>)
 8002504:	2200      	movs	r2, #0
 8002506:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 8002508:	4b15      	ldr	r3, [pc, #84]	; (8002560 <MX_SPI1_Init+0xa4>)
 800250a:	2200      	movs	r2, #0
 800250c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800250e:	4b14      	ldr	r3, [pc, #80]	; (8002560 <MX_SPI1_Init+0xa4>)
 8002510:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002514:	635a      	str	r2, [r3, #52]	; 0x34
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002516:	4b12      	ldr	r3, [pc, #72]	; (8002560 <MX_SPI1_Init+0xa4>)
 8002518:	2200      	movs	r2, #0
 800251a:	639a      	str	r2, [r3, #56]	; 0x38
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800251c:	4b10      	ldr	r3, [pc, #64]	; (8002560 <MX_SPI1_Init+0xa4>)
 800251e:	2200      	movs	r2, #0
 8002520:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi1.Init.TxCRCInitializationPattern =
 8002522:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <MX_SPI1_Init+0xa4>)
 8002524:	2200      	movs	r2, #0
 8002526:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.RxCRCInitializationPattern =
 8002528:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <MX_SPI1_Init+0xa4>)
 800252a:	2200      	movs	r2, #0
 800252c:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800252e:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <MX_SPI1_Init+0xa4>)
 8002530:	2200      	movs	r2, #0
 8002532:	649a      	str	r2, [r3, #72]	; 0x48
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002534:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <MX_SPI1_Init+0xa4>)
 8002536:	2200      	movs	r2, #0
 8002538:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800253a:	4b09      	ldr	r3, [pc, #36]	; (8002560 <MX_SPI1_Init+0xa4>)
 800253c:	2200      	movs	r2, #0
 800253e:	651a      	str	r2, [r3, #80]	; 0x50
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002540:	4b07      	ldr	r3, [pc, #28]	; (8002560 <MX_SPI1_Init+0xa4>)
 8002542:	2200      	movs	r2, #0
 8002544:	655a      	str	r2, [r3, #84]	; 0x54
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002546:	4b06      	ldr	r3, [pc, #24]	; (8002560 <MX_SPI1_Init+0xa4>)
 8002548:	2200      	movs	r2, #0
 800254a:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800254c:	4804      	ldr	r0, [pc, #16]	; (8002560 <MX_SPI1_Init+0xa4>)
 800254e:	f00d f9a9 	bl	800f8a4 <HAL_SPI_Init>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_SPI1_Init+0xa0>
		Error_Handler();
 8002558:	f000 fce8 	bl	8002f2c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800255c:	bf00      	nop
 800255e:	bd80      	pop	{r7, pc}
 8002560:	24000fac 	.word	0x24000fac
 8002564:	40013000 	.word	0x40013000

08002568 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800256c:	4b27      	ldr	r3, [pc, #156]	; (800260c <MX_SPI2_Init+0xa4>)
 800256e:	4a28      	ldr	r2, [pc, #160]	; (8002610 <MX_SPI2_Init+0xa8>)
 8002570:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8002572:	4b26      	ldr	r3, [pc, #152]	; (800260c <MX_SPI2_Init+0xa4>)
 8002574:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002578:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800257a:	4b24      	ldr	r3, [pc, #144]	; (800260c <MX_SPI2_Init+0xa4>)
 800257c:	2200      	movs	r2, #0
 800257e:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002580:	4b22      	ldr	r3, [pc, #136]	; (800260c <MX_SPI2_Init+0xa4>)
 8002582:	2207      	movs	r2, #7
 8002584:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002586:	4b21      	ldr	r3, [pc, #132]	; (800260c <MX_SPI2_Init+0xa4>)
 8002588:	2200      	movs	r2, #0
 800258a:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800258c:	4b1f      	ldr	r3, [pc, #124]	; (800260c <MX_SPI2_Init+0xa4>)
 800258e:	2200      	movs	r2, #0
 8002590:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8002592:	4b1e      	ldr	r3, [pc, #120]	; (800260c <MX_SPI2_Init+0xa4>)
 8002594:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002598:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800259a:	4b1c      	ldr	r3, [pc, #112]	; (800260c <MX_SPI2_Init+0xa4>)
 800259c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80025a0:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025a2:	4b1a      	ldr	r3, [pc, #104]	; (800260c <MX_SPI2_Init+0xa4>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025a8:	4b18      	ldr	r3, [pc, #96]	; (800260c <MX_SPI2_Init+0xa4>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025ae:	4b17      	ldr	r3, [pc, #92]	; (800260c <MX_SPI2_Init+0xa4>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0x0;
 80025b4:	4b15      	ldr	r3, [pc, #84]	; (800260c <MX_SPI2_Init+0xa4>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80025ba:	4b14      	ldr	r3, [pc, #80]	; (800260c <MX_SPI2_Init+0xa4>)
 80025bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025c0:	635a      	str	r2, [r3, #52]	; 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80025c2:	4b12      	ldr	r3, [pc, #72]	; (800260c <MX_SPI2_Init+0xa4>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	639a      	str	r2, [r3, #56]	; 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80025c8:	4b10      	ldr	r3, [pc, #64]	; (800260c <MX_SPI2_Init+0xa4>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi2.Init.TxCRCInitializationPattern =
 80025ce:	4b0f      	ldr	r3, [pc, #60]	; (800260c <MX_SPI2_Init+0xa4>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.RxCRCInitializationPattern =
 80025d4:	4b0d      	ldr	r3, [pc, #52]	; (800260c <MX_SPI2_Init+0xa4>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80025da:	4b0c      	ldr	r3, [pc, #48]	; (800260c <MX_SPI2_Init+0xa4>)
 80025dc:	2200      	movs	r2, #0
 80025de:	649a      	str	r2, [r3, #72]	; 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80025e0:	4b0a      	ldr	r3, [pc, #40]	; (800260c <MX_SPI2_Init+0xa4>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80025e6:	4b09      	ldr	r3, [pc, #36]	; (800260c <MX_SPI2_Init+0xa4>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	651a      	str	r2, [r3, #80]	; 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80025ec:	4b07      	ldr	r3, [pc, #28]	; (800260c <MX_SPI2_Init+0xa4>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	655a      	str	r2, [r3, #84]	; 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80025f2:	4b06      	ldr	r3, [pc, #24]	; (800260c <MX_SPI2_Init+0xa4>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80025f8:	4804      	ldr	r0, [pc, #16]	; (800260c <MX_SPI2_Init+0xa4>)
 80025fa:	f00d f953 	bl	800f8a4 <HAL_SPI_Init>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_SPI2_Init+0xa0>
		Error_Handler();
 8002604:	f000 fc92 	bl	8002f2c <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8002608:	bf00      	nop
 800260a:	bd80      	pop	{r7, pc}
 800260c:	24001034 	.word	0x24001034
 8002610:	40003800 	.word	0x40003800

08002614 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8002618:	4b27      	ldr	r3, [pc, #156]	; (80026b8 <MX_SPI3_Init+0xa4>)
 800261a:	4a28      	ldr	r2, [pc, #160]	; (80026bc <MX_SPI3_Init+0xa8>)
 800261c:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 800261e:	4b26      	ldr	r3, [pc, #152]	; (80026b8 <MX_SPI3_Init+0xa4>)
 8002620:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002624:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002626:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <MX_SPI3_Init+0xa4>)
 8002628:	2200      	movs	r2, #0
 800262a:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800262c:	4b22      	ldr	r3, [pc, #136]	; (80026b8 <MX_SPI3_Init+0xa4>)
 800262e:	2207      	movs	r2, #7
 8002630:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002632:	4b21      	ldr	r3, [pc, #132]	; (80026b8 <MX_SPI3_Init+0xa4>)
 8002634:	2200      	movs	r2, #0
 8002636:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002638:	4b1f      	ldr	r3, [pc, #124]	; (80026b8 <MX_SPI3_Init+0xa4>)
 800263a:	2200      	movs	r2, #0
 800263c:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 800263e:	4b1e      	ldr	r3, [pc, #120]	; (80026b8 <MX_SPI3_Init+0xa4>)
 8002640:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002644:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002646:	4b1c      	ldr	r3, [pc, #112]	; (80026b8 <MX_SPI3_Init+0xa4>)
 8002648:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800264c:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800264e:	4b1a      	ldr	r3, [pc, #104]	; (80026b8 <MX_SPI3_Init+0xa4>)
 8002650:	2200      	movs	r2, #0
 8002652:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002654:	4b18      	ldr	r3, [pc, #96]	; (80026b8 <MX_SPI3_Init+0xa4>)
 8002656:	2200      	movs	r2, #0
 8002658:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800265a:	4b17      	ldr	r3, [pc, #92]	; (80026b8 <MX_SPI3_Init+0xa4>)
 800265c:	2200      	movs	r2, #0
 800265e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 0x0;
 8002660:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <MX_SPI3_Init+0xa4>)
 8002662:	2200      	movs	r2, #0
 8002664:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002666:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <MX_SPI3_Init+0xa4>)
 8002668:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800266c:	635a      	str	r2, [r3, #52]	; 0x34
	hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800266e:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <MX_SPI3_Init+0xa4>)
 8002670:	2200      	movs	r2, #0
 8002672:	639a      	str	r2, [r3, #56]	; 0x38
	hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002674:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <MX_SPI3_Init+0xa4>)
 8002676:	2200      	movs	r2, #0
 8002678:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi3.Init.TxCRCInitializationPattern =
 800267a:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <MX_SPI3_Init+0xa4>)
 800267c:	2200      	movs	r2, #0
 800267e:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi3.Init.RxCRCInitializationPattern =
 8002680:	4b0d      	ldr	r3, [pc, #52]	; (80026b8 <MX_SPI3_Init+0xa4>)
 8002682:	2200      	movs	r2, #0
 8002684:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002686:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <MX_SPI3_Init+0xa4>)
 8002688:	2200      	movs	r2, #0
 800268a:	649a      	str	r2, [r3, #72]	; 0x48
	hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800268c:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <MX_SPI3_Init+0xa4>)
 800268e:	2200      	movs	r2, #0
 8002690:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002692:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <MX_SPI3_Init+0xa4>)
 8002694:	2200      	movs	r2, #0
 8002696:	651a      	str	r2, [r3, #80]	; 0x50
	hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002698:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <MX_SPI3_Init+0xa4>)
 800269a:	2200      	movs	r2, #0
 800269c:	655a      	str	r2, [r3, #84]	; 0x54
	hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800269e:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <MX_SPI3_Init+0xa4>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 80026a4:	4804      	ldr	r0, [pc, #16]	; (80026b8 <MX_SPI3_Init+0xa4>)
 80026a6:	f00d f8fd 	bl	800f8a4 <HAL_SPI_Init>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <MX_SPI3_Init+0xa0>
		Error_Handler();
 80026b0:	f000 fc3c 	bl	8002f2c <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 80026b4:	bf00      	nop
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	240010bc 	.word	0x240010bc
 80026bc:	40003c00 	.word	0x40003c00

080026c0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08a      	sub	sp, #40	; 0x28
 80026c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80026c6:	f107 031c 	add.w	r3, r7, #28
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	605a      	str	r2, [r3, #4]
 80026d0:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80026d2:	463b      	mov	r3, r7
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	611a      	str	r2, [r3, #16]
 80026e0:	615a      	str	r2, [r3, #20]
 80026e2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80026e4:	4b21      	ldr	r3, [pc, #132]	; (800276c <MX_TIM2_Init+0xac>)
 80026e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026ea:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80026ec:	4b1f      	ldr	r3, [pc, #124]	; (800276c <MX_TIM2_Init+0xac>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f2:	4b1e      	ldr	r3, [pc, #120]	; (800276c <MX_TIM2_Init+0xac>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 90;
 80026f8:	4b1c      	ldr	r3, [pc, #112]	; (800276c <MX_TIM2_Init+0xac>)
 80026fa:	225a      	movs	r2, #90	; 0x5a
 80026fc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026fe:	4b1b      	ldr	r3, [pc, #108]	; (800276c <MX_TIM2_Init+0xac>)
 8002700:	2200      	movs	r2, #0
 8002702:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002704:	4b19      	ldr	r3, [pc, #100]	; (800276c <MX_TIM2_Init+0xac>)
 8002706:	2200      	movs	r2, #0
 8002708:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800270a:	4818      	ldr	r0, [pc, #96]	; (800276c <MX_TIM2_Init+0xac>)
 800270c:	f00d feba 	bl	8010484 <HAL_TIM_PWM_Init>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_TIM2_Init+0x5a>
		Error_Handler();
 8002716:	f000 fc09 	bl	8002f2c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800271e:	2300      	movs	r3, #0
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002722:	f107 031c 	add.w	r3, r7, #28
 8002726:	4619      	mov	r1, r3
 8002728:	4810      	ldr	r0, [pc, #64]	; (800276c <MX_TIM2_Init+0xac>)
 800272a:	f00f f941 	bl	80119b0 <HAL_TIMEx_MasterConfigSynchronization>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_TIM2_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8002734:	f000 fbfa 	bl	8002f2c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002738:	2360      	movs	r3, #96	; 0x60
 800273a:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800273c:	2300      	movs	r3, #0
 800273e:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002740:	2300      	movs	r3, #0
 8002742:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002744:	2300      	movs	r3, #0
 8002746:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8002748:	463b      	mov	r3, r7
 800274a:	2208      	movs	r2, #8
 800274c:	4619      	mov	r1, r3
 800274e:	4807      	ldr	r0, [pc, #28]	; (800276c <MX_TIM2_Init+0xac>)
 8002750:	f00e fb60 	bl	8010e14 <HAL_TIM_PWM_ConfigChannel>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_TIM2_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 800275a:	f000 fbe7 	bl	8002f2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800275e:	4803      	ldr	r0, [pc, #12]	; (800276c <MX_TIM2_Init+0xac>)
 8002760:	f001 f91a 	bl	8003998 <HAL_TIM_MspPostInit>

}
 8002764:	bf00      	nop
 8002766:	3728      	adds	r7, #40	; 0x28
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	24001144 	.word	0x24001144

08002770 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002770:	b580      	push	{r7, lr}
 8002772:	b08a      	sub	sp, #40	; 0x28
 8002774:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002776:	f107 031c 	add.w	r3, r7, #28
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002782:	463b      	mov	r3, r7
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]
 8002790:	615a      	str	r2, [r3, #20]
 8002792:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002794:	4b26      	ldr	r3, [pc, #152]	; (8002830 <MX_TIM3_Init+0xc0>)
 8002796:	4a27      	ldr	r2, [pc, #156]	; (8002834 <MX_TIM3_Init+0xc4>)
 8002798:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800279a:	4b25      	ldr	r3, [pc, #148]	; (8002830 <MX_TIM3_Init+0xc0>)
 800279c:	2200      	movs	r2, #0
 800279e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027a0:	4b23      	ldr	r3, [pc, #140]	; (8002830 <MX_TIM3_Init+0xc0>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 90;
 80027a6:	4b22      	ldr	r3, [pc, #136]	; (8002830 <MX_TIM3_Init+0xc0>)
 80027a8:	225a      	movs	r2, #90	; 0x5a
 80027aa:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ac:	4b20      	ldr	r3, [pc, #128]	; (8002830 <MX_TIM3_Init+0xc0>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027b2:	4b1f      	ldr	r3, [pc, #124]	; (8002830 <MX_TIM3_Init+0xc0>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80027b8:	481d      	ldr	r0, [pc, #116]	; (8002830 <MX_TIM3_Init+0xc0>)
 80027ba:	f00d fe63 	bl	8010484 <HAL_TIM_PWM_Init>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <MX_TIM3_Init+0x58>
		Error_Handler();
 80027c4:	f000 fbb2 	bl	8002f2c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027c8:	2300      	movs	r3, #0
 80027ca:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027cc:	2300      	movs	r3, #0
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80027d0:	f107 031c 	add.w	r3, r7, #28
 80027d4:	4619      	mov	r1, r3
 80027d6:	4816      	ldr	r0, [pc, #88]	; (8002830 <MX_TIM3_Init+0xc0>)
 80027d8:	f00f f8ea 	bl	80119b0 <HAL_TIMEx_MasterConfigSynchronization>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <MX_TIM3_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 80027e2:	f000 fba3 	bl	8002f2c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027e6:	2360      	movs	r3, #96	; 0x60
 80027e8:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027ee:	2300      	movs	r3, #0
 80027f0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 80027f6:	463b      	mov	r3, r7
 80027f8:	2200      	movs	r2, #0
 80027fa:	4619      	mov	r1, r3
 80027fc:	480c      	ldr	r0, [pc, #48]	; (8002830 <MX_TIM3_Init+0xc0>)
 80027fe:	f00e fb09 	bl	8010e14 <HAL_TIM_PWM_ConfigChannel>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <MX_TIM3_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 8002808:	f000 fb90 	bl	8002f2c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 800280c:	463b      	mov	r3, r7
 800280e:	2204      	movs	r2, #4
 8002810:	4619      	mov	r1, r3
 8002812:	4807      	ldr	r0, [pc, #28]	; (8002830 <MX_TIM3_Init+0xc0>)
 8002814:	f00e fafe 	bl	8010e14 <HAL_TIM_PWM_ConfigChannel>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 800281e:	f000 fb85 	bl	8002f2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8002822:	4803      	ldr	r0, [pc, #12]	; (8002830 <MX_TIM3_Init+0xc0>)
 8002824:	f001 f8b8 	bl	8003998 <HAL_TIM_MspPostInit>

}
 8002828:	bf00      	nop
 800282a:	3728      	adds	r7, #40	; 0x28
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	24001190 	.word	0x24001190
 8002834:	40000400 	.word	0x40000400

08002838 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8002838:	b580      	push	{r7, lr}
 800283a:	b08a      	sub	sp, #40	; 0x28
 800283c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800283e:	f107 031c 	add.w	r3, r7, #28
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	605a      	str	r2, [r3, #4]
 8002848:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800284a:	463b      	mov	r3, r7
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	60da      	str	r2, [r3, #12]
 8002856:	611a      	str	r2, [r3, #16]
 8002858:	615a      	str	r2, [r3, #20]
 800285a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800285c:	4b32      	ldr	r3, [pc, #200]	; (8002928 <MX_TIM4_Init+0xf0>)
 800285e:	4a33      	ldr	r2, [pc, #204]	; (800292c <MX_TIM4_Init+0xf4>)
 8002860:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 29;
 8002862:	4b31      	ldr	r3, [pc, #196]	; (8002928 <MX_TIM4_Init+0xf0>)
 8002864:	221d      	movs	r2, #29
 8002866:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002868:	4b2f      	ldr	r3, [pc, #188]	; (8002928 <MX_TIM4_Init+0xf0>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 9999;
 800286e:	4b2e      	ldr	r3, [pc, #184]	; (8002928 <MX_TIM4_Init+0xf0>)
 8002870:	f242 720f 	movw	r2, #9999	; 0x270f
 8002874:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002876:	4b2c      	ldr	r3, [pc, #176]	; (8002928 <MX_TIM4_Init+0xf0>)
 8002878:	2200      	movs	r2, #0
 800287a:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800287c:	4b2a      	ldr	r3, [pc, #168]	; (8002928 <MX_TIM4_Init+0xf0>)
 800287e:	2200      	movs	r2, #0
 8002880:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8002882:	4829      	ldr	r0, [pc, #164]	; (8002928 <MX_TIM4_Init+0xf0>)
 8002884:	f00d fdfe 	bl	8010484 <HAL_TIM_PWM_Init>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <MX_TIM4_Init+0x5a>
		Error_Handler();
 800288e:	f000 fb4d 	bl	8002f2c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002896:	2300      	movs	r3, #0
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800289a:	f107 031c 	add.w	r3, r7, #28
 800289e:	4619      	mov	r1, r3
 80028a0:	4821      	ldr	r0, [pc, #132]	; (8002928 <MX_TIM4_Init+0xf0>)
 80028a2:	f00f f885 	bl	80119b0 <HAL_TIMEx_MasterConfigSynchronization>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MX_TIM4_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 80028ac:	f000 fb3e 	bl	8002f2c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028b0:	2360      	movs	r3, #96	; 0x60
 80028b2:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028b8:	2300      	movs	r3, #0
 80028ba:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028bc:	2300      	movs	r3, #0
 80028be:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 80028c0:	463b      	mov	r3, r7
 80028c2:	2200      	movs	r2, #0
 80028c4:	4619      	mov	r1, r3
 80028c6:	4818      	ldr	r0, [pc, #96]	; (8002928 <MX_TIM4_Init+0xf0>)
 80028c8:	f00e faa4 	bl	8010e14 <HAL_TIM_PWM_ConfigChannel>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_TIM4_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 80028d2:	f000 fb2b 	bl	8002f2c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 80028d6:	463b      	mov	r3, r7
 80028d8:	2204      	movs	r2, #4
 80028da:	4619      	mov	r1, r3
 80028dc:	4812      	ldr	r0, [pc, #72]	; (8002928 <MX_TIM4_Init+0xf0>)
 80028de:	f00e fa99 	bl	8010e14 <HAL_TIM_PWM_ConfigChannel>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <MX_TIM4_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 80028e8:	f000 fb20 	bl	8002f2c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 80028ec:	463b      	mov	r3, r7
 80028ee:	2208      	movs	r2, #8
 80028f0:	4619      	mov	r1, r3
 80028f2:	480d      	ldr	r0, [pc, #52]	; (8002928 <MX_TIM4_Init+0xf0>)
 80028f4:	f00e fa8e 	bl	8010e14 <HAL_TIM_PWM_ConfigChannel>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_TIM4_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 80028fe:	f000 fb15 	bl	8002f2c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8002902:	463b      	mov	r3, r7
 8002904:	220c      	movs	r2, #12
 8002906:	4619      	mov	r1, r3
 8002908:	4807      	ldr	r0, [pc, #28]	; (8002928 <MX_TIM4_Init+0xf0>)
 800290a:	f00e fa83 	bl	8010e14 <HAL_TIM_PWM_ConfigChannel>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <MX_TIM4_Init+0xe0>
			!= HAL_OK) {
		Error_Handler();
 8002914:	f000 fb0a 	bl	8002f2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8002918:	4803      	ldr	r0, [pc, #12]	; (8002928 <MX_TIM4_Init+0xf0>)
 800291a:	f001 f83d 	bl	8003998 <HAL_TIM_MspPostInit>

}
 800291e:	bf00      	nop
 8002920:	3728      	adds	r7, #40	; 0x28
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	240011dc 	.word	0x240011dc
 800292c:	40000800 	.word	0x40000800

08002930 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8002930:	b580      	push	{r7, lr}
 8002932:	b08a      	sub	sp, #40	; 0x28
 8002934:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002936:	f107 031c 	add.w	r3, r7, #28
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	605a      	str	r2, [r3, #4]
 8002940:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002942:	463b      	mov	r3, r7
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	611a      	str	r2, [r3, #16]
 8002950:	615a      	str	r2, [r3, #20]
 8002952:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8002954:	4b21      	ldr	r3, [pc, #132]	; (80029dc <MX_TIM5_Init+0xac>)
 8002956:	4a22      	ldr	r2, [pc, #136]	; (80029e0 <MX_TIM5_Init+0xb0>)
 8002958:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 800295a:	4b20      	ldr	r3, [pc, #128]	; (80029dc <MX_TIM5_Init+0xac>)
 800295c:	2200      	movs	r2, #0
 800295e:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002960:	4b1e      	ldr	r3, [pc, #120]	; (80029dc <MX_TIM5_Init+0xac>)
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 90;
 8002966:	4b1d      	ldr	r3, [pc, #116]	; (80029dc <MX_TIM5_Init+0xac>)
 8002968:	225a      	movs	r2, #90	; 0x5a
 800296a:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800296c:	4b1b      	ldr	r3, [pc, #108]	; (80029dc <MX_TIM5_Init+0xac>)
 800296e:	2200      	movs	r2, #0
 8002970:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002972:	4b1a      	ldr	r3, [pc, #104]	; (80029dc <MX_TIM5_Init+0xac>)
 8002974:	2200      	movs	r2, #0
 8002976:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK) {
 8002978:	4818      	ldr	r0, [pc, #96]	; (80029dc <MX_TIM5_Init+0xac>)
 800297a:	f00d fd83 	bl	8010484 <HAL_TIM_PWM_Init>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_TIM5_Init+0x58>
		Error_Handler();
 8002984:	f000 fad2 	bl	8002f2c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002988:	2300      	movs	r3, #0
 800298a:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800298c:	2300      	movs	r3, #0
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8002990:	f107 031c 	add.w	r3, r7, #28
 8002994:	4619      	mov	r1, r3
 8002996:	4811      	ldr	r0, [pc, #68]	; (80029dc <MX_TIM5_Init+0xac>)
 8002998:	f00f f80a 	bl	80119b0 <HAL_TIMEx_MasterConfigSynchronization>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <MX_TIM5_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 80029a2:	f000 fac3 	bl	8002f2c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029a6:	2360      	movs	r3, #96	; 0x60
 80029a8:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80029aa:	2300      	movs	r3, #0
 80029ac:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029ae:	2300      	movs	r3, #0
 80029b0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4)
 80029b6:	463b      	mov	r3, r7
 80029b8:	220c      	movs	r2, #12
 80029ba:	4619      	mov	r1, r3
 80029bc:	4807      	ldr	r0, [pc, #28]	; (80029dc <MX_TIM5_Init+0xac>)
 80029be:	f00e fa29 	bl	8010e14 <HAL_TIM_PWM_ConfigChannel>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <MX_TIM5_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 80029c8:	f000 fab0 	bl	8002f2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 80029cc:	4803      	ldr	r0, [pc, #12]	; (80029dc <MX_TIM5_Init+0xac>)
 80029ce:	f000 ffe3 	bl	8003998 <HAL_TIM_MspPostInit>

}
 80029d2:	bf00      	nop
 80029d4:	3728      	adds	r7, #40	; 0x28
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	24001228 	.word	0x24001228
 80029e0:	40000c00 	.word	0x40000c00

080029e4 <MX_TIM13_Init>:
/**
 * @brief TIM13 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM13_Init(void) {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
	/* USER CODE END TIM13_Init 0 */

	/* USER CODE BEGIN TIM13_Init 1 */

	/* USER CODE END TIM13_Init 1 */
	htim13.Instance = TIM13;
 80029e8:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <MX_TIM13_Init+0x40>)
 80029ea:	4a0f      	ldr	r2, [pc, #60]	; (8002a28 <MX_TIM13_Init+0x44>)
 80029ec:	601a      	str	r2, [r3, #0]
	htim13.Init.Prescaler = 99;
 80029ee:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <MX_TIM13_Init+0x40>)
 80029f0:	2263      	movs	r2, #99	; 0x63
 80029f2:	605a      	str	r2, [r3, #4]
	htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <MX_TIM13_Init+0x40>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	609a      	str	r2, [r3, #8]
	htim13.Init.Period = 65535;
 80029fa:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <MX_TIM13_Init+0x40>)
 80029fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a00:	60da      	str	r2, [r3, #12]
	htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a02:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <MX_TIM13_Init+0x40>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	611a      	str	r2, [r3, #16]
	htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a08:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <MX_TIM13_Init+0x40>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim13) != HAL_OK) {
 8002a0e:	4805      	ldr	r0, [pc, #20]	; (8002a24 <MX_TIM13_Init+0x40>)
 8002a10:	f00d fce1 	bl	80103d6 <HAL_TIM_Base_Init>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <MX_TIM13_Init+0x3a>
		Error_Handler();
 8002a1a:	f000 fa87 	bl	8002f2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM13_Init 2 */

	/* USER CODE END TIM13_Init 2 */

}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	24001274 	.word	0x24001274
 8002a28:	40001c00 	.word	0x40001c00

08002a2c <MX_TIM14_Init>:
/**
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void) {
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
	/* USER CODE END TIM14_Init 0 */

	/* USER CODE BEGIN TIM14_Init 1 */

	/* USER CODE END TIM14_Init 1 */
	htim14.Instance = TIM14;
 8002a30:	4b0e      	ldr	r3, [pc, #56]	; (8002a6c <MX_TIM14_Init+0x40>)
 8002a32:	4a0f      	ldr	r2, [pc, #60]	; (8002a70 <MX_TIM14_Init+0x44>)
 8002a34:	601a      	str	r2, [r3, #0]
	htim14.Init.Prescaler = 99;
 8002a36:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <MX_TIM14_Init+0x40>)
 8002a38:	2263      	movs	r2, #99	; 0x63
 8002a3a:	605a      	str	r2, [r3, #4]
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <MX_TIM14_Init+0x40>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
	htim14.Init.Period = 65535;
 8002a42:	4b0a      	ldr	r3, [pc, #40]	; (8002a6c <MX_TIM14_Init+0x40>)
 8002a44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a48:	60da      	str	r2, [r3, #12]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a4a:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <MX_TIM14_Init+0x40>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	611a      	str	r2, [r3, #16]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a50:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <MX_TIM14_Init+0x40>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 8002a56:	4805      	ldr	r0, [pc, #20]	; (8002a6c <MX_TIM14_Init+0x40>)
 8002a58:	f00d fcbd 	bl	80103d6 <HAL_TIM_Base_Init>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_TIM14_Init+0x3a>
		Error_Handler();
 8002a62:	f000 fa63 	bl	8002f2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM14_Init 2 */

	/* USER CODE END TIM14_Init 2 */

}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	240012c0 	.word	0x240012c0
 8002a70:	40002000 	.word	0x40002000

08002a74 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8002a78:	4b22      	ldr	r3, [pc, #136]	; (8002b04 <MX_UART4_Init+0x90>)
 8002a7a:	4a23      	ldr	r2, [pc, #140]	; (8002b08 <MX_UART4_Init+0x94>)
 8002a7c:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8002a7e:	4b21      	ldr	r3, [pc, #132]	; (8002b04 <MX_UART4_Init+0x90>)
 8002a80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a84:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002a86:	4b1f      	ldr	r3, [pc, #124]	; (8002b04 <MX_UART4_Init+0x90>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8002a8c:	4b1d      	ldr	r3, [pc, #116]	; (8002b04 <MX_UART4_Init+0x90>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8002a92:	4b1c      	ldr	r3, [pc, #112]	; (8002b04 <MX_UART4_Init+0x90>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8002a98:	4b1a      	ldr	r3, [pc, #104]	; (8002b04 <MX_UART4_Init+0x90>)
 8002a9a:	220c      	movs	r2, #12
 8002a9c:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a9e:	4b19      	ldr	r3, [pc, #100]	; (8002b04 <MX_UART4_Init+0x90>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aa4:	4b17      	ldr	r3, [pc, #92]	; (8002b04 <MX_UART4_Init+0x90>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002aaa:	4b16      	ldr	r3, [pc, #88]	; (8002b04 <MX_UART4_Init+0x90>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ab0:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <MX_UART4_Init+0x90>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	625a      	str	r2, [r3, #36]	; 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ab6:	4b13      	ldr	r3, [pc, #76]	; (8002b04 <MX_UART4_Init+0x90>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8002abc:	4811      	ldr	r0, [pc, #68]	; (8002b04 <MX_UART4_Init+0x90>)
 8002abe:	f00f f831 	bl	8011b24 <HAL_UART_Init>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_UART4_Init+0x58>
		Error_Handler();
 8002ac8:	f000 fa30 	bl	8002f2c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
 8002acc:	2100      	movs	r1, #0
 8002ace:	480d      	ldr	r0, [pc, #52]	; (8002b04 <MX_UART4_Init+0x90>)
 8002ad0:	f010 f937 	bl	8012d42 <HAL_UARTEx_SetTxFifoThreshold>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_UART4_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8002ada:	f000 fa27 	bl	8002f2c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
 8002ade:	2100      	movs	r1, #0
 8002ae0:	4808      	ldr	r0, [pc, #32]	; (8002b04 <MX_UART4_Init+0x90>)
 8002ae2:	f010 f96c 	bl	8012dbe <HAL_UARTEx_SetRxFifoThreshold>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MX_UART4_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8002aec:	f000 fa1e 	bl	8002f2c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK) {
 8002af0:	4804      	ldr	r0, [pc, #16]	; (8002b04 <MX_UART4_Init+0x90>)
 8002af2:	f010 f8ed 	bl	8012cd0 <HAL_UARTEx_DisableFifoMode>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <MX_UART4_Init+0x8c>
		Error_Handler();
 8002afc:	f000 fa16 	bl	8002f2c <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8002b00:	bf00      	nop
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	24001564 	.word	0x24001564
 8002b08:	40004c00 	.word	0x40004c00

08002b0c <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8002b10:	4b22      	ldr	r3, [pc, #136]	; (8002b9c <MX_USART6_UART_Init+0x90>)
 8002b12:	4a23      	ldr	r2, [pc, #140]	; (8002ba0 <MX_USART6_UART_Init+0x94>)
 8002b14:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8002b16:	4b21      	ldr	r3, [pc, #132]	; (8002b9c <MX_USART6_UART_Init+0x90>)
 8002b18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b1c:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002b1e:	4b1f      	ldr	r3, [pc, #124]	; (8002b9c <MX_USART6_UART_Init+0x90>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8002b24:	4b1d      	ldr	r3, [pc, #116]	; (8002b9c <MX_USART6_UART_Init+0x90>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8002b2a:	4b1c      	ldr	r3, [pc, #112]	; (8002b9c <MX_USART6_UART_Init+0x90>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8002b30:	4b1a      	ldr	r3, [pc, #104]	; (8002b9c <MX_USART6_UART_Init+0x90>)
 8002b32:	220c      	movs	r2, #12
 8002b34:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b36:	4b19      	ldr	r3, [pc, #100]	; (8002b9c <MX_USART6_UART_Init+0x90>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b3c:	4b17      	ldr	r3, [pc, #92]	; (8002b9c <MX_USART6_UART_Init+0x90>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b42:	4b16      	ldr	r3, [pc, #88]	; (8002b9c <MX_USART6_UART_Init+0x90>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	621a      	str	r2, [r3, #32]
	huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b48:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <MX_USART6_UART_Init+0x90>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	625a      	str	r2, [r3, #36]	; 0x24
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b4e:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <MX_USART6_UART_Init+0x90>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8002b54:	4811      	ldr	r0, [pc, #68]	; (8002b9c <MX_USART6_UART_Init+0x90>)
 8002b56:	f00e ffe5 	bl	8011b24 <HAL_UART_Init>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <MX_USART6_UART_Init+0x58>
		Error_Handler();
 8002b60:	f000 f9e4 	bl	8002f2c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8)
 8002b64:	2100      	movs	r1, #0
 8002b66:	480d      	ldr	r0, [pc, #52]	; (8002b9c <MX_USART6_UART_Init+0x90>)
 8002b68:	f010 f8eb 	bl	8012d42 <HAL_UARTEx_SetTxFifoThreshold>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_USART6_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8002b72:	f000 f9db 	bl	8002f2c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8)
 8002b76:	2100      	movs	r1, #0
 8002b78:	4808      	ldr	r0, [pc, #32]	; (8002b9c <MX_USART6_UART_Init+0x90>)
 8002b7a:	f010 f920 	bl	8012dbe <HAL_UARTEx_SetRxFifoThreshold>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <MX_USART6_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8002b84:	f000 f9d2 	bl	8002f2c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK) {
 8002b88:	4804      	ldr	r0, [pc, #16]	; (8002b9c <MX_USART6_UART_Init+0x90>)
 8002b8a:	f010 f8a1 	bl	8012cd0 <HAL_UARTEx_DisableFifoMode>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <MX_USART6_UART_Init+0x8c>
		Error_Handler();
 8002b94:	f000 f9ca 	bl	8002f2c <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8002b98:	bf00      	nop
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	240015f8 	.word	0x240015f8
 8002ba0:	40011400 	.word	0x40011400

08002ba4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002baa:	4b2d      	ldr	r3, [pc, #180]	; (8002c60 <MX_DMA_Init+0xbc>)
 8002bac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002bb0:	4a2b      	ldr	r2, [pc, #172]	; (8002c60 <MX_DMA_Init+0xbc>)
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002bba:	4b29      	ldr	r3, [pc, #164]	; (8002c60 <MX_DMA_Init+0xbc>)
 8002bbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	607b      	str	r3, [r7, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002bc8:	4b25      	ldr	r3, [pc, #148]	; (8002c60 <MX_DMA_Init+0xbc>)
 8002bca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002bce:	4a24      	ldr	r2, [pc, #144]	; (8002c60 <MX_DMA_Init+0xbc>)
 8002bd0:	f043 0302 	orr.w	r3, r3, #2
 8002bd4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002bd8:	4b21      	ldr	r3, [pc, #132]	; (8002c60 <MX_DMA_Init+0xbc>)
 8002bda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	603b      	str	r3, [r7, #0]
 8002be4:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002be6:	2200      	movs	r2, #0
 8002be8:	2100      	movs	r1, #0
 8002bea:	200b      	movs	r0, #11
 8002bec:	f003 fbb5 	bl	800635a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002bf0:	200b      	movs	r0, #11
 8002bf2:	f003 fbcc 	bl	800638e <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	200c      	movs	r0, #12
 8002bfc:	f003 fbad 	bl	800635a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002c00:	200c      	movs	r0, #12
 8002c02:	f003 fbc4 	bl	800638e <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002c06:	2200      	movs	r2, #0
 8002c08:	2100      	movs	r1, #0
 8002c0a:	200d      	movs	r0, #13
 8002c0c:	f003 fba5 	bl	800635a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002c10:	200d      	movs	r0, #13
 8002c12:	f003 fbbc 	bl	800638e <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002c16:	2200      	movs	r2, #0
 8002c18:	2100      	movs	r1, #0
 8002c1a:	200e      	movs	r0, #14
 8002c1c:	f003 fb9d 	bl	800635a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002c20:	200e      	movs	r0, #14
 8002c22:	f003 fbb4 	bl	800638e <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002c26:	2200      	movs	r2, #0
 8002c28:	2100      	movs	r1, #0
 8002c2a:	200f      	movs	r0, #15
 8002c2c:	f003 fb95 	bl	800635a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002c30:	200f      	movs	r0, #15
 8002c32:	f003 fbac 	bl	800638e <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002c36:	2200      	movs	r2, #0
 8002c38:	2100      	movs	r1, #0
 8002c3a:	2010      	movs	r0, #16
 8002c3c:	f003 fb8d 	bl	800635a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002c40:	2010      	movs	r0, #16
 8002c42:	f003 fba4 	bl	800638e <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002c46:	2200      	movs	r2, #0
 8002c48:	2100      	movs	r1, #0
 8002c4a:	2046      	movs	r0, #70	; 0x46
 8002c4c:	f003 fb85 	bl	800635a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002c50:	2046      	movs	r0, #70	; 0x46
 8002c52:	f003 fb9c 	bl	800638e <HAL_NVIC_EnableIRQ>

}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	58024400 	.word	0x58024400

08002c64 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08c      	sub	sp, #48	; 0x30
 8002c68:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002c6a:	f107 031c 	add.w	r3, r7, #28
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	609a      	str	r2, [r3, #8]
 8002c76:	60da      	str	r2, [r3, #12]
 8002c78:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002c7a:	4ba4      	ldr	r3, [pc, #656]	; (8002f0c <MX_GPIO_Init+0x2a8>)
 8002c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c80:	4aa2      	ldr	r2, [pc, #648]	; (8002f0c <MX_GPIO_Init+0x2a8>)
 8002c82:	f043 0310 	orr.w	r3, r3, #16
 8002c86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c8a:	4ba0      	ldr	r3, [pc, #640]	; (8002f0c <MX_GPIO_Init+0x2a8>)
 8002c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c90:	f003 0310 	and.w	r3, r3, #16
 8002c94:	61bb      	str	r3, [r7, #24]
 8002c96:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002c98:	4b9c      	ldr	r3, [pc, #624]	; (8002f0c <MX_GPIO_Init+0x2a8>)
 8002c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c9e:	4a9b      	ldr	r2, [pc, #620]	; (8002f0c <MX_GPIO_Init+0x2a8>)
 8002ca0:	f043 0320 	orr.w	r3, r3, #32
 8002ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ca8:	4b98      	ldr	r3, [pc, #608]	; (8002f0c <MX_GPIO_Init+0x2a8>)
 8002caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cae:	f003 0320 	and.w	r3, r3, #32
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002cb6:	4b95      	ldr	r3, [pc, #596]	; (8002f0c <MX_GPIO_Init+0x2a8>)
 8002cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cbc:	4a93      	ldr	r2, [pc, #588]	; (8002f0c <MX_GPIO_Init+0x2a8>)
 8002cbe:	f043 0304 	orr.w	r3, r3, #4
 8002cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cc6:	4b91      	ldr	r3, [pc, #580]	; (8002f0c <MX_GPIO_Init+0x2a8>)
 8002cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	613b      	str	r3, [r7, #16]
 8002cd2:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd4:	4b8d      	ldr	r3, [pc, #564]	; (8002f0c <MX_GPIO_Init+0x2a8>)
 8002cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cda:	4a8c      	ldr	r2, [pc, #560]	; (8002f0c <MX_GPIO_Init+0x2a8>)
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ce4:	4b89      	ldr	r3, [pc, #548]	; (8002f0c <MX_GPIO_Init+0x2a8>)
 8002ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf2:	4b86      	ldr	r3, [pc, #536]	; (8002f0c <MX_GPIO_Init+0x2a8>)
 8002cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cf8:	4a84      	ldr	r2, [pc, #528]	; (8002f0c <MX_GPIO_Init+0x2a8>)
 8002cfa:	f043 0302 	orr.w	r3, r3, #2
 8002cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d02:	4b82      	ldr	r3, [pc, #520]	; (8002f0c <MX_GPIO_Init+0x2a8>)
 8002d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8002d10:	4b7e      	ldr	r3, [pc, #504]	; (8002f0c <MX_GPIO_Init+0x2a8>)
 8002d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d16:	4a7d      	ldr	r2, [pc, #500]	; (8002f0c <MX_GPIO_Init+0x2a8>)
 8002d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d20:	4b7a      	ldr	r3, [pc, #488]	; (8002f0c <MX_GPIO_Init+0x2a8>)
 8002d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2a:	607b      	str	r3, [r7, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002d2e:	4b77      	ldr	r3, [pc, #476]	; (8002f0c <MX_GPIO_Init+0x2a8>)
 8002d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d34:	4a75      	ldr	r2, [pc, #468]	; (8002f0c <MX_GPIO_Init+0x2a8>)
 8002d36:	f043 0308 	orr.w	r3, r3, #8
 8002d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d3e:	4b73      	ldr	r3, [pc, #460]	; (8002f0c <MX_GPIO_Init+0x2a8>)
 8002d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	603b      	str	r3, [r7, #0]
 8002d4a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | PYRO6_Pin | PYRO7_Pin | PYRO8_Pin,
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f241 5104 	movw	r1, #5380	; 0x1504
 8002d52:	486f      	ldr	r0, [pc, #444]	; (8002f10 <MX_GPIO_Init+0x2ac>)
 8002d54:	f006 f92e 	bl	8008fb4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ARM1_Pin | GPIO_PIN_15, GPIO_PIN_RESET);
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f248 0102 	movw	r1, #32770	; 0x8002
 8002d5e:	486d      	ldr	r0, [pc, #436]	; (8002f14 <MX_GPIO_Init+0x2b0>)
 8002d60:	f006 f928 	bl	8008fb4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8002d64:	2200      	movs	r2, #0
 8002d66:	2130      	movs	r1, #48	; 0x30
 8002d68:	486b      	ldr	r0, [pc, #428]	; (8002f18 <MX_GPIO_Init+0x2b4>)
 8002d6a:	f006 f923 	bl	8008fb4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2102      	movs	r1, #2
 8002d72:	486a      	ldr	r0, [pc, #424]	; (8002f1c <MX_GPIO_Init+0x2b8>)
 8002d74:	f006 f91e 	bl	8008fb4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, PYRO2_Pin | PYRO3_Pin | PYRO4_Pin, GPIO_PIN_RESET);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8002d7e:	4868      	ldr	r0, [pc, #416]	; (8002f20 <MX_GPIO_Init+0x2bc>)
 8002d80:	f006 f918 	bl	8008fb4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, PYRO5_Pin | GPIO_PIN_2 | GPIO_PIN_3,
 8002d84:	2200      	movs	r2, #0
 8002d86:	210e      	movs	r1, #14
 8002d88:	4866      	ldr	r0, [pc, #408]	; (8002f24 <MX_GPIO_Init+0x2c0>)
 8002d8a:	f006 f913 	bl	8008fb4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_0,
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f240 3101 	movw	r1, #769	; 0x301
 8002d94:	4864      	ldr	r0, [pc, #400]	; (8002f28 <MX_GPIO_Init+0x2c4>)
 8002d96:	f006 f90d 	bl	8008fb4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | PYRO6_Pin | PYRO7_Pin | PYRO8_Pin;
 8002d9a:	f241 5304 	movw	r3, #5380	; 0x1504
 8002d9e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002da0:	2301      	movs	r3, #1
 8002da2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da8:	2300      	movs	r3, #0
 8002daa:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dac:	f107 031c 	add.w	r3, r7, #28
 8002db0:	4619      	mov	r1, r3
 8002db2:	4857      	ldr	r0, [pc, #348]	; (8002f10 <MX_GPIO_Init+0x2ac>)
 8002db4:	f005 ff3e 	bl	8008c34 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARM1_Pin PA15 */
	GPIO_InitStruct.Pin = ARM1_Pin | GPIO_PIN_15;
 8002db8:	f248 0302 	movw	r3, #32770	; 0x8002
 8002dbc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dca:	f107 031c 	add.w	r3, r7, #28
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4850      	ldr	r0, [pc, #320]	; (8002f14 <MX_GPIO_Init+0x2b0>)
 8002dd2:	f005 ff2f 	bl	8008c34 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC4 PC5 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8002dd6:	2330      	movs	r3, #48	; 0x30
 8002dd8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de2:	2300      	movs	r3, #0
 8002de4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002de6:	f107 031c 	add.w	r3, r7, #28
 8002dea:	4619      	mov	r1, r3
 8002dec:	484a      	ldr	r0, [pc, #296]	; (8002f18 <MX_GPIO_Init+0x2b4>)
 8002dee:	f005 ff21 	bl	8008c34 <HAL_GPIO_Init>

	/*Configure GPIO pin : PYRO1_Pin */
	GPIO_InitStruct.Pin = PYRO1_Pin;
 8002df2:	2302      	movs	r3, #2
 8002df4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002df6:	2301      	movs	r3, #1
 8002df8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 8002e02:	f107 031c 	add.w	r3, r7, #28
 8002e06:	4619      	mov	r1, r3
 8002e08:	4844      	ldr	r0, [pc, #272]	; (8002f1c <MX_GPIO_Init+0x2b8>)
 8002e0a:	f005 ff13 	bl	8008c34 <HAL_GPIO_Init>

	/*Configure GPIO pin : CONT1_Pin */
	GPIO_InitStruct.Pin = CONT1_Pin;
 8002e0e:	2304      	movs	r3, #4
 8002e10:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e12:	2300      	movs	r3, #0
 8002e14:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e16:	2301      	movs	r3, #1
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8002e1a:	f107 031c 	add.w	r3, r7, #28
 8002e1e:	4619      	mov	r1, r3
 8002e20:	483e      	ldr	r0, [pc, #248]	; (8002f1c <MX_GPIO_Init+0x2b8>)
 8002e22:	f005 ff07 	bl	8008c34 <HAL_GPIO_Init>

	/*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
	GPIO_InitStruct.Pin = PYRO2_Pin | PYRO3_Pin | PYRO4_Pin;
 8002e26:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8002e2a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e34:	2300      	movs	r3, #0
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e38:	f107 031c 	add.w	r3, r7, #28
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4838      	ldr	r0, [pc, #224]	; (8002f20 <MX_GPIO_Init+0x2bc>)
 8002e40:	f005 fef8 	bl	8008c34 <HAL_GPIO_Init>

	/*Configure GPIO pins : CONT2_Pin CONT3_Pin */
	GPIO_InitStruct.Pin = CONT2_Pin | CONT3_Pin;
 8002e44:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002e48:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e52:	f107 031c 	add.w	r3, r7, #28
 8002e56:	4619      	mov	r1, r3
 8002e58:	4831      	ldr	r0, [pc, #196]	; (8002f20 <MX_GPIO_Init+0x2bc>)
 8002e5a:	f005 feeb 	bl	8008c34 <HAL_GPIO_Init>

	/*Configure GPIO pin : CONT4_Pin */
	GPIO_InitStruct.Pin = CONT4_Pin;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e62:	2300      	movs	r3, #0
 8002e64:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e66:	2301      	movs	r3, #1
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8002e6a:	f107 031c 	add.w	r3, r7, #28
 8002e6e:	4619      	mov	r1, r3
 8002e70:	482c      	ldr	r0, [pc, #176]	; (8002f24 <MX_GPIO_Init+0x2c0>)
 8002e72:	f005 fedf 	bl	8008c34 <HAL_GPIO_Init>

	/*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
	GPIO_InitStruct.Pin = PYRO5_Pin | GPIO_PIN_2 | GPIO_PIN_3;
 8002e76:	230e      	movs	r3, #14
 8002e78:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e82:	2300      	movs	r3, #0
 8002e84:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e86:	f107 031c 	add.w	r3, r7, #28
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4825      	ldr	r0, [pc, #148]	; (8002f24 <MX_GPIO_Init+0x2c0>)
 8002e8e:	f005 fed1 	bl	8008c34 <HAL_GPIO_Init>

	/*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
	GPIO_InitStruct.Pin = CONT5_Pin | CONT6_Pin | CONT7_Pin | CONT8_Pin;
 8002e92:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8002e96:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ea0:	f107 031c 	add.w	r3, r7, #28
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	481a      	ldr	r0, [pc, #104]	; (8002f10 <MX_GPIO_Init+0x2ac>)
 8002ea8:	f005 fec4 	bl	8008c34 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD8 PD9 PD0 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_0;
 8002eac:	f240 3301 	movw	r3, #769	; 0x301
 8002eb0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ebe:	f107 031c 	add.w	r3, r7, #28
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4818      	ldr	r0, [pc, #96]	; (8002f28 <MX_GPIO_Init+0x2c4>)
 8002ec6:	f005 feb5 	bl	8008c34 <HAL_GPIO_Init>

	/*Configure GPIO pin : Servo_ARM_CHECK_Pin */
	GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8002eca:	2310      	movs	r3, #16
 8002ecc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002ed6:	f107 031c 	add.w	r3, r7, #28
 8002eda:	4619      	mov	r1, r3
 8002edc:	4811      	ldr	r0, [pc, #68]	; (8002f24 <MX_GPIO_Init+0x2c0>)
 8002ede:	f005 fea9 	bl	8008c34 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ee2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ee6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef8:	f107 031c 	add.w	r3, r7, #28
 8002efc:	4619      	mov	r1, r3
 8002efe:	4805      	ldr	r0, [pc, #20]	; (8002f14 <MX_GPIO_Init+0x2b0>)
 8002f00:	f005 fe98 	bl	8008c34 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002f04:	bf00      	nop
 8002f06:	3730      	adds	r7, #48	; 0x30
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	58024400 	.word	0x58024400
 8002f10:	58021000 	.word	0x58021000
 8002f14:	58020000 	.word	0x58020000
 8002f18:	58020800 	.word	0x58020800
 8002f1c:	58020400 	.word	0x58020400
 8002f20:	58021400 	.word	0x58021400
 8002f24:	58021800 	.word	0x58021800
 8002f28:	58020c00 	.word	0x58020c00

08002f2c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f30:	b672      	cpsid	i
}
 8002f32:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002f34:	e7fe      	b.n	8002f34 <Error_Handler+0x8>
	...

08002f38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f3e:	4b0a      	ldr	r3, [pc, #40]	; (8002f68 <HAL_MspInit+0x30>)
 8002f40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f44:	4a08      	ldr	r2, [pc, #32]	; (8002f68 <HAL_MspInit+0x30>)
 8002f46:	f043 0302 	orr.w	r3, r3, #2
 8002f4a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002f4e:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <HAL_MspInit+0x30>)
 8002f50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	607b      	str	r3, [r7, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	58024400 	.word	0x58024400

08002f6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08c      	sub	sp, #48	; 0x30
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f74:	f107 031c 	add.w	r3, r7, #28
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	60da      	str	r2, [r3, #12]
 8002f82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a5d      	ldr	r2, [pc, #372]	; (8003100 <HAL_ADC_MspInit+0x194>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d159      	bne.n	8003042 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002f8e:	4b5d      	ldr	r3, [pc, #372]	; (8003104 <HAL_ADC_MspInit+0x198>)
 8002f90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f94:	4a5b      	ldr	r2, [pc, #364]	; (8003104 <HAL_ADC_MspInit+0x198>)
 8002f96:	f043 0320 	orr.w	r3, r3, #32
 8002f9a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002f9e:	4b59      	ldr	r3, [pc, #356]	; (8003104 <HAL_ADC_MspInit+0x198>)
 8002fa0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002fa4:	f003 0320 	and.w	r3, r3, #32
 8002fa8:	61bb      	str	r3, [r7, #24]
 8002faa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fac:	4b55      	ldr	r3, [pc, #340]	; (8003104 <HAL_ADC_MspInit+0x198>)
 8002fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fb2:	4a54      	ldr	r2, [pc, #336]	; (8003104 <HAL_ADC_MspInit+0x198>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fbc:	4b51      	ldr	r3, [pc, #324]	; (8003104 <HAL_ADC_MspInit+0x198>)
 8002fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_INP14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fca:	2304      	movs	r3, #4
 8002fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd6:	f107 031c 	add.w	r3, r7, #28
 8002fda:	4619      	mov	r1, r3
 8002fdc:	484a      	ldr	r0, [pc, #296]	; (8003108 <HAL_ADC_MspInit+0x19c>)
 8002fde:	f005 fe29 	bl	8008c34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8002fe2:	4b4a      	ldr	r3, [pc, #296]	; (800310c <HAL_ADC_MspInit+0x1a0>)
 8002fe4:	4a4a      	ldr	r2, [pc, #296]	; (8003110 <HAL_ADC_MspInit+0x1a4>)
 8002fe6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002fe8:	4b48      	ldr	r3, [pc, #288]	; (800310c <HAL_ADC_MspInit+0x1a0>)
 8002fea:	2209      	movs	r2, #9
 8002fec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fee:	4b47      	ldr	r3, [pc, #284]	; (800310c <HAL_ADC_MspInit+0x1a0>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ff4:	4b45      	ldr	r3, [pc, #276]	; (800310c <HAL_ADC_MspInit+0x1a0>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002ffa:	4b44      	ldr	r3, [pc, #272]	; (800310c <HAL_ADC_MspInit+0x1a0>)
 8002ffc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003000:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003002:	4b42      	ldr	r3, [pc, #264]	; (800310c <HAL_ADC_MspInit+0x1a0>)
 8003004:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003008:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800300a:	4b40      	ldr	r3, [pc, #256]	; (800310c <HAL_ADC_MspInit+0x1a0>)
 800300c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003010:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003012:	4b3e      	ldr	r3, [pc, #248]	; (800310c <HAL_ADC_MspInit+0x1a0>)
 8003014:	2200      	movs	r2, #0
 8003016:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003018:	4b3c      	ldr	r3, [pc, #240]	; (800310c <HAL_ADC_MspInit+0x1a0>)
 800301a:	2200      	movs	r2, #0
 800301c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800301e:	4b3b      	ldr	r3, [pc, #236]	; (800310c <HAL_ADC_MspInit+0x1a0>)
 8003020:	2200      	movs	r2, #0
 8003022:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003024:	4839      	ldr	r0, [pc, #228]	; (800310c <HAL_ADC_MspInit+0x1a0>)
 8003026:	f003 f9cd 	bl	80063c4 <HAL_DMA_Init>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8003030:	f7ff ff7c 	bl	8002f2c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a35      	ldr	r2, [pc, #212]	; (800310c <HAL_ADC_MspInit+0x1a0>)
 8003038:	659a      	str	r2, [r3, #88]	; 0x58
 800303a:	4a34      	ldr	r2, [pc, #208]	; (800310c <HAL_ADC_MspInit+0x1a0>)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003040:	e059      	b.n	80030f6 <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a33      	ldr	r2, [pc, #204]	; (8003114 <HAL_ADC_MspInit+0x1a8>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d154      	bne.n	80030f6 <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800304c:	4b2d      	ldr	r3, [pc, #180]	; (8003104 <HAL_ADC_MspInit+0x198>)
 800304e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003052:	4a2c      	ldr	r2, [pc, #176]	; (8003104 <HAL_ADC_MspInit+0x198>)
 8003054:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003058:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800305c:	4b29      	ldr	r3, [pc, #164]	; (8003104 <HAL_ADC_MspInit+0x198>)
 800305e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003062:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003066:	613b      	str	r3, [r7, #16]
 8003068:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800306a:	4b26      	ldr	r3, [pc, #152]	; (8003104 <HAL_ADC_MspInit+0x198>)
 800306c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003070:	4a24      	ldr	r2, [pc, #144]	; (8003104 <HAL_ADC_MspInit+0x198>)
 8003072:	f043 0304 	orr.w	r3, r3, #4
 8003076:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800307a:	4b22      	ldr	r3, [pc, #136]	; (8003104 <HAL_ADC_MspInit+0x198>)
 800307c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8003088:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800308c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8003090:	f001 f8b6 	bl	8004200 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8003094:	4b20      	ldr	r3, [pc, #128]	; (8003118 <HAL_ADC_MspInit+0x1ac>)
 8003096:	4a21      	ldr	r2, [pc, #132]	; (800311c <HAL_ADC_MspInit+0x1b0>)
 8003098:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800309a:	4b1f      	ldr	r3, [pc, #124]	; (8003118 <HAL_ADC_MspInit+0x1ac>)
 800309c:	2273      	movs	r2, #115	; 0x73
 800309e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030a0:	4b1d      	ldr	r3, [pc, #116]	; (8003118 <HAL_ADC_MspInit+0x1ac>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80030a6:	4b1c      	ldr	r3, [pc, #112]	; (8003118 <HAL_ADC_MspInit+0x1ac>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80030ac:	4b1a      	ldr	r3, [pc, #104]	; (8003118 <HAL_ADC_MspInit+0x1ac>)
 80030ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030b2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80030b4:	4b18      	ldr	r3, [pc, #96]	; (8003118 <HAL_ADC_MspInit+0x1ac>)
 80030b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030ba:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80030bc:	4b16      	ldr	r3, [pc, #88]	; (8003118 <HAL_ADC_MspInit+0x1ac>)
 80030be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030c2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80030c4:	4b14      	ldr	r3, [pc, #80]	; (8003118 <HAL_ADC_MspInit+0x1ac>)
 80030c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030ca:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 80030cc:	4b12      	ldr	r3, [pc, #72]	; (8003118 <HAL_ADC_MspInit+0x1ac>)
 80030ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80030d2:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030d4:	4b10      	ldr	r3, [pc, #64]	; (8003118 <HAL_ADC_MspInit+0x1ac>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80030da:	480f      	ldr	r0, [pc, #60]	; (8003118 <HAL_ADC_MspInit+0x1ac>)
 80030dc:	f003 f972 	bl	80063c4 <HAL_DMA_Init>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 80030e6:	f7ff ff21 	bl	8002f2c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a0a      	ldr	r2, [pc, #40]	; (8003118 <HAL_ADC_MspInit+0x1ac>)
 80030ee:	659a      	str	r2, [r3, #88]	; 0x58
 80030f0:	4a09      	ldr	r2, [pc, #36]	; (8003118 <HAL_ADC_MspInit+0x1ac>)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80030f6:	bf00      	nop
 80030f8:	3730      	adds	r7, #48	; 0x30
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40022000 	.word	0x40022000
 8003104:	58024400 	.word	0x58024400
 8003108:	58020000 	.word	0x58020000
 800310c:	24000d4c 	.word	0x24000d4c
 8003110:	40020088 	.word	0x40020088
 8003114:	58026000 	.word	0x58026000
 8003118:	24000dc4 	.word	0x24000dc4
 800311c:	400204b8 	.word	0x400204b8

08003120 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b0b8      	sub	sp, #224	; 0xe0
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003128:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	605a      	str	r2, [r3, #4]
 8003132:	609a      	str	r2, [r3, #8]
 8003134:	60da      	str	r2, [r3, #12]
 8003136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003138:	f107 0310 	add.w	r3, r7, #16
 800313c:	22b8      	movs	r2, #184	; 0xb8
 800313e:	2100      	movs	r1, #0
 8003140:	4618      	mov	r0, r3
 8003142:	f018 fe6e 	bl	801be22 <memset>
  if(hfdcan->Instance==FDCAN3)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a26      	ldr	r2, [pc, #152]	; (80031e4 <HAL_FDCAN_MspInit+0xc4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d145      	bne.n	80031dc <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003150:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800315c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003160:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003162:	f107 0310 	add.w	r3, r7, #16
 8003166:	4618      	mov	r0, r3
 8003168:	f008 fb52 	bl	800b810 <HAL_RCCEx_PeriphCLKConfig>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8003172:	f7ff fedb 	bl	8002f2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003176:	4b1c      	ldr	r3, [pc, #112]	; (80031e8 <HAL_FDCAN_MspInit+0xc8>)
 8003178:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800317c:	4a1a      	ldr	r2, [pc, #104]	; (80031e8 <HAL_FDCAN_MspInit+0xc8>)
 800317e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003182:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003186:	4b18      	ldr	r3, [pc, #96]	; (80031e8 <HAL_FDCAN_MspInit+0xc8>)
 8003188:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800318c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003194:	4b14      	ldr	r3, [pc, #80]	; (80031e8 <HAL_FDCAN_MspInit+0xc8>)
 8003196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800319a:	4a13      	ldr	r2, [pc, #76]	; (80031e8 <HAL_FDCAN_MspInit+0xc8>)
 800319c:	f043 0320 	orr.w	r3, r3, #32
 80031a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031a4:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <HAL_FDCAN_MspInit+0xc8>)
 80031a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	60bb      	str	r3, [r7, #8]
 80031b0:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031b2:	23c0      	movs	r3, #192	; 0xc0
 80031b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b8:	2302      	movs	r3, #2
 80031ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031be:	2300      	movs	r3, #0
 80031c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c4:	2300      	movs	r3, #0
 80031c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 80031ca:	2302      	movs	r3, #2
 80031cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80031d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80031d4:	4619      	mov	r1, r3
 80031d6:	4805      	ldr	r0, [pc, #20]	; (80031ec <HAL_FDCAN_MspInit+0xcc>)
 80031d8:	f005 fd2c 	bl	8008c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 80031dc:	bf00      	nop
 80031de:	37e0      	adds	r7, #224	; 0xe0
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	4000d400 	.word	0x4000d400
 80031e8:	58024400 	.word	0x58024400
 80031ec:	58021400 	.word	0x58021400

080031f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b0b8      	sub	sp, #224	; 0xe0
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	609a      	str	r2, [r3, #8]
 8003204:	60da      	str	r2, [r3, #12]
 8003206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003208:	f107 0310 	add.w	r3, r7, #16
 800320c:	22b8      	movs	r2, #184	; 0xb8
 800320e:	2100      	movs	r1, #0
 8003210:	4618      	mov	r0, r3
 8003212:	f018 fe06 	bl	801be22 <memset>
  if(hi2c->Instance==I2C2)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a2a      	ldr	r2, [pc, #168]	; (80032c4 <HAL_I2C_MspInit+0xd4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d14d      	bne.n	80032bc <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003220:	f04f 0208 	mov.w	r2, #8
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 800322c:	2300      	movs	r3, #0
 800322e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003232:	f107 0310 	add.w	r3, r7, #16
 8003236:	4618      	mov	r0, r3
 8003238:	f008 faea 	bl	800b810 <HAL_RCCEx_PeriphCLKConfig>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8003242:	f7ff fe73 	bl	8002f2c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003246:	4b20      	ldr	r3, [pc, #128]	; (80032c8 <HAL_I2C_MspInit+0xd8>)
 8003248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800324c:	4a1e      	ldr	r2, [pc, #120]	; (80032c8 <HAL_I2C_MspInit+0xd8>)
 800324e:	f043 0320 	orr.w	r3, r3, #32
 8003252:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003256:	4b1c      	ldr	r3, [pc, #112]	; (80032c8 <HAL_I2C_MspInit+0xd8>)
 8003258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800325c:	f003 0320 	and.w	r3, r3, #32
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003264:	2303      	movs	r3, #3
 8003266:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800326a:	2312      	movs	r3, #18
 800326c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003270:	2300      	movs	r3, #0
 8003272:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003276:	2300      	movs	r3, #0
 8003278:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800327c:	2304      	movs	r3, #4
 800327e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003282:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003286:	4619      	mov	r1, r3
 8003288:	4810      	ldr	r0, [pc, #64]	; (80032cc <HAL_I2C_MspInit+0xdc>)
 800328a:	f005 fcd3 	bl	8008c34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800328e:	4b0e      	ldr	r3, [pc, #56]	; (80032c8 <HAL_I2C_MspInit+0xd8>)
 8003290:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003294:	4a0c      	ldr	r2, [pc, #48]	; (80032c8 <HAL_I2C_MspInit+0xd8>)
 8003296:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800329a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800329e:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <HAL_I2C_MspInit+0xd8>)
 80032a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 80032ac:	2200      	movs	r2, #0
 80032ae:	2101      	movs	r1, #1
 80032b0:	2021      	movs	r0, #33	; 0x21
 80032b2:	f003 f852 	bl	800635a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80032b6:	2021      	movs	r0, #33	; 0x21
 80032b8:	f003 f869 	bl	800638e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80032bc:	bf00      	nop
 80032be:	37e0      	adds	r7, #224	; 0xe0
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40005800 	.word	0x40005800
 80032c8:	58024400 	.word	0x58024400
 80032cc:	58021400 	.word	0x58021400

080032d0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b0ba      	sub	sp, #232	; 0xe8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	609a      	str	r2, [r3, #8]
 80032e4:	60da      	str	r2, [r3, #12]
 80032e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032e8:	f107 0318 	add.w	r3, r7, #24
 80032ec:	22b8      	movs	r2, #184	; 0xb8
 80032ee:	2100      	movs	r1, #0
 80032f0:	4618      	mov	r0, r3
 80032f2:	f018 fd96 	bl	801be22 <memset>
  if(hsd->Instance==SDMMC2)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a5d      	ldr	r2, [pc, #372]	; (8003470 <HAL_SD_MspInit+0x1a0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	f040 80b3 	bne.w	8003468 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8003302:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003306:	f04f 0300 	mov.w	r3, #0
 800330a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800330e:	2300      	movs	r3, #0
 8003310:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003312:	f107 0318 	add.w	r3, r7, #24
 8003316:	4618      	mov	r0, r3
 8003318:	f008 fa7a 	bl	800b810 <HAL_RCCEx_PeriphCLKConfig>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8003322:	f7ff fe03 	bl	8002f2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8003326:	4b53      	ldr	r3, [pc, #332]	; (8003474 <HAL_SD_MspInit+0x1a4>)
 8003328:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800332c:	4a51      	ldr	r2, [pc, #324]	; (8003474 <HAL_SD_MspInit+0x1a4>)
 800332e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003332:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003336:	4b4f      	ldr	r3, [pc, #316]	; (8003474 <HAL_SD_MspInit+0x1a4>)
 8003338:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800333c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003344:	4b4b      	ldr	r3, [pc, #300]	; (8003474 <HAL_SD_MspInit+0x1a4>)
 8003346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800334a:	4a4a      	ldr	r2, [pc, #296]	; (8003474 <HAL_SD_MspInit+0x1a4>)
 800334c:	f043 0308 	orr.w	r3, r3, #8
 8003350:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003354:	4b47      	ldr	r3, [pc, #284]	; (8003474 <HAL_SD_MspInit+0x1a4>)
 8003356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	613b      	str	r3, [r7, #16]
 8003360:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003362:	4b44      	ldr	r3, [pc, #272]	; (8003474 <HAL_SD_MspInit+0x1a4>)
 8003364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003368:	4a42      	ldr	r2, [pc, #264]	; (8003474 <HAL_SD_MspInit+0x1a4>)
 800336a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800336e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003372:	4b40      	ldr	r3, [pc, #256]	; (8003474 <HAL_SD_MspInit+0x1a4>)
 8003374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003380:	2340      	movs	r3, #64	; 0x40
 8003382:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003386:	2302      	movs	r3, #2
 8003388:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338c:	2300      	movs	r3, #0
 800338e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003392:	2303      	movs	r3, #3
 8003394:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003398:	230b      	movs	r3, #11
 800339a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800339e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80033a2:	4619      	mov	r1, r3
 80033a4:	4834      	ldr	r0, [pc, #208]	; (8003478 <HAL_SD_MspInit+0x1a8>)
 80033a6:	f005 fc45 	bl	8008c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80033aa:	2380      	movs	r3, #128	; 0x80
 80033ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b0:	2302      	movs	r3, #2
 80033b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033b6:	2301      	movs	r3, #1
 80033b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033bc:	2303      	movs	r3, #3
 80033be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80033c2:	230b      	movs	r3, #11
 80033c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80033cc:	4619      	mov	r1, r3
 80033ce:	482a      	ldr	r0, [pc, #168]	; (8003478 <HAL_SD_MspInit+0x1a8>)
 80033d0:	f005 fc30 	bl	8008c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80033d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033dc:	2302      	movs	r3, #2
 80033de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033e2:	2301      	movs	r3, #1
 80033e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e8:	2303      	movs	r3, #3
 80033ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80033ee:	230b      	movs	r3, #11
 80033f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80033f8:	4619      	mov	r1, r3
 80033fa:	4820      	ldr	r0, [pc, #128]	; (800347c <HAL_SD_MspInit+0x1ac>)
 80033fc:	f005 fc1a 	bl	8008c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003400:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003404:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003408:	2302      	movs	r3, #2
 800340a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340e:	2300      	movs	r3, #0
 8003410:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003414:	2303      	movs	r3, #3
 8003416:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800341a:	230b      	movs	r3, #11
 800341c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003420:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003424:	4619      	mov	r1, r3
 8003426:	4815      	ldr	r0, [pc, #84]	; (800347c <HAL_SD_MspInit+0x1ac>)
 8003428:	f005 fc04 	bl	8008c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800342c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003430:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003434:	2302      	movs	r3, #2
 8003436:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343a:	2300      	movs	r3, #0
 800343c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003440:	2303      	movs	r3, #3
 8003442:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8003446:	230a      	movs	r3, #10
 8003448:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800344c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003450:	4619      	mov	r1, r3
 8003452:	480a      	ldr	r0, [pc, #40]	; (800347c <HAL_SD_MspInit+0x1ac>)
 8003454:	f005 fbee 	bl	8008c34 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8003458:	2200      	movs	r2, #0
 800345a:	2100      	movs	r1, #0
 800345c:	207c      	movs	r0, #124	; 0x7c
 800345e:	f002 ff7c 	bl	800635a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8003462:	207c      	movs	r0, #124	; 0x7c
 8003464:	f002 ff93 	bl	800638e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8003468:	bf00      	nop
 800346a:	37e8      	adds	r7, #232	; 0xe8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	48022400 	.word	0x48022400
 8003474:	58024400 	.word	0x58024400
 8003478:	58020c00 	.word	0x58020c00
 800347c:	58021800 	.word	0x58021800

08003480 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08e      	sub	sp, #56	; 0x38
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	60da      	str	r2, [r3, #12]
 8003496:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a4f      	ldr	r2, [pc, #316]	; (80035dc <HAL_SPI_MspInit+0x15c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d12e      	bne.n	8003500 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034a2:	4b4f      	ldr	r3, [pc, #316]	; (80035e0 <HAL_SPI_MspInit+0x160>)
 80034a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034a8:	4a4d      	ldr	r2, [pc, #308]	; (80035e0 <HAL_SPI_MspInit+0x160>)
 80034aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034b2:	4b4b      	ldr	r3, [pc, #300]	; (80035e0 <HAL_SPI_MspInit+0x160>)
 80034b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034bc:	623b      	str	r3, [r7, #32]
 80034be:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c0:	4b47      	ldr	r3, [pc, #284]	; (80035e0 <HAL_SPI_MspInit+0x160>)
 80034c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034c6:	4a46      	ldr	r2, [pc, #280]	; (80035e0 <HAL_SPI_MspInit+0x160>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034d0:	4b43      	ldr	r3, [pc, #268]	; (80035e0 <HAL_SPI_MspInit+0x160>)
 80034d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	61fb      	str	r3, [r7, #28]
 80034dc:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80034de:	23e0      	movs	r3, #224	; 0xe0
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e2:	2302      	movs	r3, #2
 80034e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ea:	2300      	movs	r3, #0
 80034ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034ee:	2305      	movs	r3, #5
 80034f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034f6:	4619      	mov	r1, r3
 80034f8:	483a      	ldr	r0, [pc, #232]	; (80035e4 <HAL_SPI_MspInit+0x164>)
 80034fa:	f005 fb9b 	bl	8008c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80034fe:	e068      	b.n	80035d2 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a38      	ldr	r2, [pc, #224]	; (80035e8 <HAL_SPI_MspInit+0x168>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d12f      	bne.n	800356a <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800350a:	4b35      	ldr	r3, [pc, #212]	; (80035e0 <HAL_SPI_MspInit+0x160>)
 800350c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003510:	4a33      	ldr	r2, [pc, #204]	; (80035e0 <HAL_SPI_MspInit+0x160>)
 8003512:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003516:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800351a:	4b31      	ldr	r3, [pc, #196]	; (80035e0 <HAL_SPI_MspInit+0x160>)
 800351c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003524:	61bb      	str	r3, [r7, #24]
 8003526:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003528:	4b2d      	ldr	r3, [pc, #180]	; (80035e0 <HAL_SPI_MspInit+0x160>)
 800352a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800352e:	4a2c      	ldr	r2, [pc, #176]	; (80035e0 <HAL_SPI_MspInit+0x160>)
 8003530:	f043 0302 	orr.w	r3, r3, #2
 8003534:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003538:	4b29      	ldr	r3, [pc, #164]	; (80035e0 <HAL_SPI_MspInit+0x160>)
 800353a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	617b      	str	r3, [r7, #20]
 8003544:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003546:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800354c:	2302      	movs	r3, #2
 800354e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003550:	2300      	movs	r3, #0
 8003552:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003554:	2300      	movs	r3, #0
 8003556:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003558:	2305      	movs	r3, #5
 800355a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800355c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003560:	4619      	mov	r1, r3
 8003562:	4822      	ldr	r0, [pc, #136]	; (80035ec <HAL_SPI_MspInit+0x16c>)
 8003564:	f005 fb66 	bl	8008c34 <HAL_GPIO_Init>
}
 8003568:	e033      	b.n	80035d2 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a20      	ldr	r2, [pc, #128]	; (80035f0 <HAL_SPI_MspInit+0x170>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d12e      	bne.n	80035d2 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003574:	4b1a      	ldr	r3, [pc, #104]	; (80035e0 <HAL_SPI_MspInit+0x160>)
 8003576:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800357a:	4a19      	ldr	r2, [pc, #100]	; (80035e0 <HAL_SPI_MspInit+0x160>)
 800357c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003580:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003584:	4b16      	ldr	r3, [pc, #88]	; (80035e0 <HAL_SPI_MspInit+0x160>)
 8003586:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800358a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800358e:	613b      	str	r3, [r7, #16]
 8003590:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003592:	4b13      	ldr	r3, [pc, #76]	; (80035e0 <HAL_SPI_MspInit+0x160>)
 8003594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003598:	4a11      	ldr	r2, [pc, #68]	; (80035e0 <HAL_SPI_MspInit+0x160>)
 800359a:	f043 0304 	orr.w	r3, r3, #4
 800359e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035a2:	4b0f      	ldr	r3, [pc, #60]	; (80035e0 <HAL_SPI_MspInit+0x160>)
 80035a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80035b0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b6:	2302      	movs	r3, #2
 80035b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035be:	2300      	movs	r3, #0
 80035c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80035c2:	2306      	movs	r3, #6
 80035c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035ca:	4619      	mov	r1, r3
 80035cc:	4809      	ldr	r0, [pc, #36]	; (80035f4 <HAL_SPI_MspInit+0x174>)
 80035ce:	f005 fb31 	bl	8008c34 <HAL_GPIO_Init>
}
 80035d2:	bf00      	nop
 80035d4:	3738      	adds	r7, #56	; 0x38
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40013000 	.word	0x40013000
 80035e0:	58024400 	.word	0x58024400
 80035e4:	58020000 	.word	0x58020000
 80035e8:	40003800 	.word	0x40003800
 80035ec:	58020400 	.word	0x58020400
 80035f0:	40003c00 	.word	0x40003c00
 80035f4:	58020800 	.word	0x58020800

080035f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08c      	sub	sp, #48	; 0x30
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003600:	f107 031c 	add.w	r3, r7, #28
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	605a      	str	r2, [r3, #4]
 800360a:	609a      	str	r2, [r3, #8]
 800360c:	60da      	str	r2, [r3, #12]
 800360e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003618:	d15d      	bne.n	80036d6 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800361a:	4b8e      	ldr	r3, [pc, #568]	; (8003854 <HAL_TIM_PWM_MspInit+0x25c>)
 800361c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003620:	4a8c      	ldr	r2, [pc, #560]	; (8003854 <HAL_TIM_PWM_MspInit+0x25c>)
 8003622:	f043 0301 	orr.w	r3, r3, #1
 8003626:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800362a:	4b8a      	ldr	r3, [pc, #552]	; (8003854 <HAL_TIM_PWM_MspInit+0x25c>)
 800362c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	61bb      	str	r3, [r7, #24]
 8003636:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003638:	4b86      	ldr	r3, [pc, #536]	; (8003854 <HAL_TIM_PWM_MspInit+0x25c>)
 800363a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800363e:	4a85      	ldr	r2, [pc, #532]	; (8003854 <HAL_TIM_PWM_MspInit+0x25c>)
 8003640:	f043 0301 	orr.w	r3, r3, #1
 8003644:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003648:	4b82      	ldr	r3, [pc, #520]	; (8003854 <HAL_TIM_PWM_MspInit+0x25c>)
 800364a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003656:	2301      	movs	r3, #1
 8003658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365a:	2302      	movs	r3, #2
 800365c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365e:	2300      	movs	r3, #0
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003662:	2300      	movs	r3, #0
 8003664:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003666:	2301      	movs	r3, #1
 8003668:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800366a:	f107 031c 	add.w	r3, r7, #28
 800366e:	4619      	mov	r1, r3
 8003670:	4879      	ldr	r0, [pc, #484]	; (8003858 <HAL_TIM_PWM_MspInit+0x260>)
 8003672:	f005 fadf 	bl	8008c34 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8003676:	4b79      	ldr	r3, [pc, #484]	; (800385c <HAL_TIM_PWM_MspInit+0x264>)
 8003678:	4a79      	ldr	r2, [pc, #484]	; (8003860 <HAL_TIM_PWM_MspInit+0x268>)
 800367a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 800367c:	4b77      	ldr	r3, [pc, #476]	; (800385c <HAL_TIM_PWM_MspInit+0x264>)
 800367e:	2214      	movs	r2, #20
 8003680:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003682:	4b76      	ldr	r3, [pc, #472]	; (800385c <HAL_TIM_PWM_MspInit+0x264>)
 8003684:	2240      	movs	r2, #64	; 0x40
 8003686:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003688:	4b74      	ldr	r3, [pc, #464]	; (800385c <HAL_TIM_PWM_MspInit+0x264>)
 800368a:	2200      	movs	r2, #0
 800368c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800368e:	4b73      	ldr	r3, [pc, #460]	; (800385c <HAL_TIM_PWM_MspInit+0x264>)
 8003690:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003694:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003696:	4b71      	ldr	r3, [pc, #452]	; (800385c <HAL_TIM_PWM_MspInit+0x264>)
 8003698:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800369c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800369e:	4b6f      	ldr	r3, [pc, #444]	; (800385c <HAL_TIM_PWM_MspInit+0x264>)
 80036a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036a4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80036a6:	4b6d      	ldr	r3, [pc, #436]	; (800385c <HAL_TIM_PWM_MspInit+0x264>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80036ac:	4b6b      	ldr	r3, [pc, #428]	; (800385c <HAL_TIM_PWM_MspInit+0x264>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036b2:	4b6a      	ldr	r3, [pc, #424]	; (800385c <HAL_TIM_PWM_MspInit+0x264>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80036b8:	4868      	ldr	r0, [pc, #416]	; (800385c <HAL_TIM_PWM_MspInit+0x264>)
 80036ba:	f002 fe83 	bl	80063c4 <HAL_DMA_Init>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 80036c4:	f7ff fc32 	bl	8002f2c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a64      	ldr	r2, [pc, #400]	; (800385c <HAL_TIM_PWM_MspInit+0x264>)
 80036cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80036ce:	4a63      	ldr	r2, [pc, #396]	; (800385c <HAL_TIM_PWM_MspInit+0x264>)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80036d4:	e119      	b.n	800390a <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a62      	ldr	r2, [pc, #392]	; (8003864 <HAL_TIM_PWM_MspInit+0x26c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d16d      	bne.n	80037bc <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036e0:	4b5c      	ldr	r3, [pc, #368]	; (8003854 <HAL_TIM_PWM_MspInit+0x25c>)
 80036e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036e6:	4a5b      	ldr	r2, [pc, #364]	; (8003854 <HAL_TIM_PWM_MspInit+0x25c>)
 80036e8:	f043 0302 	orr.w	r3, r3, #2
 80036ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036f0:	4b58      	ldr	r3, [pc, #352]	; (8003854 <HAL_TIM_PWM_MspInit+0x25c>)
 80036f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	613b      	str	r3, [r7, #16]
 80036fc:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 80036fe:	4b5a      	ldr	r3, [pc, #360]	; (8003868 <HAL_TIM_PWM_MspInit+0x270>)
 8003700:	4a5a      	ldr	r2, [pc, #360]	; (800386c <HAL_TIM_PWM_MspInit+0x274>)
 8003702:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8003704:	4b58      	ldr	r3, [pc, #352]	; (8003868 <HAL_TIM_PWM_MspInit+0x270>)
 8003706:	2218      	movs	r2, #24
 8003708:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800370a:	4b57      	ldr	r3, [pc, #348]	; (8003868 <HAL_TIM_PWM_MspInit+0x270>)
 800370c:	2240      	movs	r2, #64	; 0x40
 800370e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003710:	4b55      	ldr	r3, [pc, #340]	; (8003868 <HAL_TIM_PWM_MspInit+0x270>)
 8003712:	2200      	movs	r2, #0
 8003714:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003716:	4b54      	ldr	r3, [pc, #336]	; (8003868 <HAL_TIM_PWM_MspInit+0x270>)
 8003718:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800371c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800371e:	4b52      	ldr	r3, [pc, #328]	; (8003868 <HAL_TIM_PWM_MspInit+0x270>)
 8003720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003724:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003726:	4b50      	ldr	r3, [pc, #320]	; (8003868 <HAL_TIM_PWM_MspInit+0x270>)
 8003728:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800372c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 800372e:	4b4e      	ldr	r3, [pc, #312]	; (8003868 <HAL_TIM_PWM_MspInit+0x270>)
 8003730:	2200      	movs	r2, #0
 8003732:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003734:	4b4c      	ldr	r3, [pc, #304]	; (8003868 <HAL_TIM_PWM_MspInit+0x270>)
 8003736:	2200      	movs	r2, #0
 8003738:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800373a:	4b4b      	ldr	r3, [pc, #300]	; (8003868 <HAL_TIM_PWM_MspInit+0x270>)
 800373c:	2200      	movs	r2, #0
 800373e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8003740:	4849      	ldr	r0, [pc, #292]	; (8003868 <HAL_TIM_PWM_MspInit+0x270>)
 8003742:	f002 fe3f 	bl	80063c4 <HAL_DMA_Init>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 800374c:	f7ff fbee 	bl	8002f2c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a45      	ldr	r2, [pc, #276]	; (8003868 <HAL_TIM_PWM_MspInit+0x270>)
 8003754:	629a      	str	r2, [r3, #40]	; 0x28
 8003756:	4a44      	ldr	r2, [pc, #272]	; (8003868 <HAL_TIM_PWM_MspInit+0x270>)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 800375c:	4b44      	ldr	r3, [pc, #272]	; (8003870 <HAL_TIM_PWM_MspInit+0x278>)
 800375e:	4a45      	ldr	r2, [pc, #276]	; (8003874 <HAL_TIM_PWM_MspInit+0x27c>)
 8003760:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8003762:	4b43      	ldr	r3, [pc, #268]	; (8003870 <HAL_TIM_PWM_MspInit+0x278>)
 8003764:	2217      	movs	r2, #23
 8003766:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003768:	4b41      	ldr	r3, [pc, #260]	; (8003870 <HAL_TIM_PWM_MspInit+0x278>)
 800376a:	2240      	movs	r2, #64	; 0x40
 800376c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800376e:	4b40      	ldr	r3, [pc, #256]	; (8003870 <HAL_TIM_PWM_MspInit+0x278>)
 8003770:	2200      	movs	r2, #0
 8003772:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003774:	4b3e      	ldr	r3, [pc, #248]	; (8003870 <HAL_TIM_PWM_MspInit+0x278>)
 8003776:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800377a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800377c:	4b3c      	ldr	r3, [pc, #240]	; (8003870 <HAL_TIM_PWM_MspInit+0x278>)
 800377e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003782:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003784:	4b3a      	ldr	r3, [pc, #232]	; (8003870 <HAL_TIM_PWM_MspInit+0x278>)
 8003786:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800378a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 800378c:	4b38      	ldr	r3, [pc, #224]	; (8003870 <HAL_TIM_PWM_MspInit+0x278>)
 800378e:	2200      	movs	r2, #0
 8003790:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003792:	4b37      	ldr	r3, [pc, #220]	; (8003870 <HAL_TIM_PWM_MspInit+0x278>)
 8003794:	2200      	movs	r2, #0
 8003796:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003798:	4b35      	ldr	r3, [pc, #212]	; (8003870 <HAL_TIM_PWM_MspInit+0x278>)
 800379a:	2200      	movs	r2, #0
 800379c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 800379e:	4834      	ldr	r0, [pc, #208]	; (8003870 <HAL_TIM_PWM_MspInit+0x278>)
 80037a0:	f002 fe10 	bl	80063c4 <HAL_DMA_Init>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 80037aa:	f7ff fbbf 	bl	8002f2c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a2f      	ldr	r2, [pc, #188]	; (8003870 <HAL_TIM_PWM_MspInit+0x278>)
 80037b2:	625a      	str	r2, [r3, #36]	; 0x24
 80037b4:	4a2e      	ldr	r2, [pc, #184]	; (8003870 <HAL_TIM_PWM_MspInit+0x278>)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80037ba:	e0a6      	b.n	800390a <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a2d      	ldr	r2, [pc, #180]	; (8003878 <HAL_TIM_PWM_MspInit+0x280>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d15e      	bne.n	8003884 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80037c6:	4b23      	ldr	r3, [pc, #140]	; (8003854 <HAL_TIM_PWM_MspInit+0x25c>)
 80037c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037cc:	4a21      	ldr	r2, [pc, #132]	; (8003854 <HAL_TIM_PWM_MspInit+0x25c>)
 80037ce:	f043 0304 	orr.w	r3, r3, #4
 80037d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037d6:	4b1f      	ldr	r3, [pc, #124]	; (8003854 <HAL_TIM_PWM_MspInit+0x25c>)
 80037d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 80037e4:	4b25      	ldr	r3, [pc, #148]	; (800387c <HAL_TIM_PWM_MspInit+0x284>)
 80037e6:	4a26      	ldr	r2, [pc, #152]	; (8003880 <HAL_TIM_PWM_MspInit+0x288>)
 80037e8:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 80037ea:	4b24      	ldr	r3, [pc, #144]	; (800387c <HAL_TIM_PWM_MspInit+0x284>)
 80037ec:	221f      	movs	r2, #31
 80037ee:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037f0:	4b22      	ldr	r3, [pc, #136]	; (800387c <HAL_TIM_PWM_MspInit+0x284>)
 80037f2:	2240      	movs	r2, #64	; 0x40
 80037f4:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80037f6:	4b21      	ldr	r3, [pc, #132]	; (800387c <HAL_TIM_PWM_MspInit+0x284>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80037fc:	4b1f      	ldr	r3, [pc, #124]	; (800387c <HAL_TIM_PWM_MspInit+0x284>)
 80037fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003802:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003804:	4b1d      	ldr	r3, [pc, #116]	; (800387c <HAL_TIM_PWM_MspInit+0x284>)
 8003806:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800380a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800380c:	4b1b      	ldr	r3, [pc, #108]	; (800387c <HAL_TIM_PWM_MspInit+0x284>)
 800380e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003812:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8003814:	4b19      	ldr	r3, [pc, #100]	; (800387c <HAL_TIM_PWM_MspInit+0x284>)
 8003816:	2200      	movs	r2, #0
 8003818:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800381a:	4b18      	ldr	r3, [pc, #96]	; (800387c <HAL_TIM_PWM_MspInit+0x284>)
 800381c:	2200      	movs	r2, #0
 800381e:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003820:	4b16      	ldr	r3, [pc, #88]	; (800387c <HAL_TIM_PWM_MspInit+0x284>)
 8003822:	2200      	movs	r2, #0
 8003824:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8003826:	4815      	ldr	r0, [pc, #84]	; (800387c <HAL_TIM_PWM_MspInit+0x284>)
 8003828:	f002 fdcc 	bl	80063c4 <HAL_DMA_Init>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 8003832:	f7ff fb7b 	bl	8002f2c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a10      	ldr	r2, [pc, #64]	; (800387c <HAL_TIM_PWM_MspInit+0x284>)
 800383a:	62da      	str	r2, [r3, #44]	; 0x2c
 800383c:	4a0f      	ldr	r2, [pc, #60]	; (800387c <HAL_TIM_PWM_MspInit+0x284>)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003842:	2200      	movs	r2, #0
 8003844:	2100      	movs	r1, #0
 8003846:	201e      	movs	r0, #30
 8003848:	f002 fd87 	bl	800635a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800384c:	201e      	movs	r0, #30
 800384e:	f002 fd9e 	bl	800638e <HAL_NVIC_EnableIRQ>
}
 8003852:	e05a      	b.n	800390a <HAL_TIM_PWM_MspInit+0x312>
 8003854:	58024400 	.word	0x58024400
 8003858:	58020000 	.word	0x58020000
 800385c:	2400130c 	.word	0x2400130c
 8003860:	40020028 	.word	0x40020028
 8003864:	40000400 	.word	0x40000400
 8003868:	24001384 	.word	0x24001384
 800386c:	40020058 	.word	0x40020058
 8003870:	240013fc 	.word	0x240013fc
 8003874:	40020070 	.word	0x40020070
 8003878:	40000800 	.word	0x40000800
 800387c:	24001474 	.word	0x24001474
 8003880:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a22      	ldr	r2, [pc, #136]	; (8003914 <HAL_TIM_PWM_MspInit+0x31c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d13d      	bne.n	800390a <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800388e:	4b22      	ldr	r3, [pc, #136]	; (8003918 <HAL_TIM_PWM_MspInit+0x320>)
 8003890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003894:	4a20      	ldr	r2, [pc, #128]	; (8003918 <HAL_TIM_PWM_MspInit+0x320>)
 8003896:	f043 0308 	orr.w	r3, r3, #8
 800389a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800389e:	4b1e      	ldr	r3, [pc, #120]	; (8003918 <HAL_TIM_PWM_MspInit+0x320>)
 80038a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 80038ac:	4b1b      	ldr	r3, [pc, #108]	; (800391c <HAL_TIM_PWM_MspInit+0x324>)
 80038ae:	4a1c      	ldr	r2, [pc, #112]	; (8003920 <HAL_TIM_PWM_MspInit+0x328>)
 80038b0:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 80038b2:	4b1a      	ldr	r3, [pc, #104]	; (800391c <HAL_TIM_PWM_MspInit+0x324>)
 80038b4:	223a      	movs	r2, #58	; 0x3a
 80038b6:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038b8:	4b18      	ldr	r3, [pc, #96]	; (800391c <HAL_TIM_PWM_MspInit+0x324>)
 80038ba:	2240      	movs	r2, #64	; 0x40
 80038bc:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80038be:	4b17      	ldr	r3, [pc, #92]	; (800391c <HAL_TIM_PWM_MspInit+0x324>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80038c4:	4b15      	ldr	r3, [pc, #84]	; (800391c <HAL_TIM_PWM_MspInit+0x324>)
 80038c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038ca:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80038cc:	4b13      	ldr	r3, [pc, #76]	; (800391c <HAL_TIM_PWM_MspInit+0x324>)
 80038ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038d2:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80038d4:	4b11      	ldr	r3, [pc, #68]	; (800391c <HAL_TIM_PWM_MspInit+0x324>)
 80038d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038da:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 80038dc:	4b0f      	ldr	r3, [pc, #60]	; (800391c <HAL_TIM_PWM_MspInit+0x324>)
 80038de:	2200      	movs	r2, #0
 80038e0:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80038e2:	4b0e      	ldr	r3, [pc, #56]	; (800391c <HAL_TIM_PWM_MspInit+0x324>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038e8:	4b0c      	ldr	r3, [pc, #48]	; (800391c <HAL_TIM_PWM_MspInit+0x324>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 80038ee:	480b      	ldr	r0, [pc, #44]	; (800391c <HAL_TIM_PWM_MspInit+0x324>)
 80038f0:	f002 fd68 	bl	80063c4 <HAL_DMA_Init>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 80038fa:	f7ff fb17 	bl	8002f2c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a06      	ldr	r2, [pc, #24]	; (800391c <HAL_TIM_PWM_MspInit+0x324>)
 8003902:	631a      	str	r2, [r3, #48]	; 0x30
 8003904:	4a05      	ldr	r2, [pc, #20]	; (800391c <HAL_TIM_PWM_MspInit+0x324>)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6393      	str	r3, [r2, #56]	; 0x38
}
 800390a:	bf00      	nop
 800390c:	3730      	adds	r7, #48	; 0x30
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40000c00 	.word	0x40000c00
 8003918:	58024400 	.word	0x58024400
 800391c:	240014ec 	.word	0x240014ec
 8003920:	40020040 	.word	0x40020040

08003924 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a16      	ldr	r2, [pc, #88]	; (800398c <HAL_TIM_Base_MspInit+0x68>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d10f      	bne.n	8003956 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003936:	4b16      	ldr	r3, [pc, #88]	; (8003990 <HAL_TIM_Base_MspInit+0x6c>)
 8003938:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800393c:	4a14      	ldr	r2, [pc, #80]	; (8003990 <HAL_TIM_Base_MspInit+0x6c>)
 800393e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003942:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003946:	4b12      	ldr	r3, [pc, #72]	; (8003990 <HAL_TIM_Base_MspInit+0x6c>)
 8003948:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800394c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8003954:	e013      	b.n	800397e <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a0e      	ldr	r2, [pc, #56]	; (8003994 <HAL_TIM_Base_MspInit+0x70>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d10e      	bne.n	800397e <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003960:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <HAL_TIM_Base_MspInit+0x6c>)
 8003962:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003966:	4a0a      	ldr	r2, [pc, #40]	; (8003990 <HAL_TIM_Base_MspInit+0x6c>)
 8003968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800396c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003970:	4b07      	ldr	r3, [pc, #28]	; (8003990 <HAL_TIM_Base_MspInit+0x6c>)
 8003972:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397a:	60bb      	str	r3, [r7, #8]
 800397c:	68bb      	ldr	r3, [r7, #8]
}
 800397e:	bf00      	nop
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40001c00 	.word	0x40001c00
 8003990:	58024400 	.word	0x58024400
 8003994:	40002000 	.word	0x40002000

08003998 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08c      	sub	sp, #48	; 0x30
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a0:	f107 031c 	add.w	r3, r7, #28
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	605a      	str	r2, [r3, #4]
 80039aa:	609a      	str	r2, [r3, #8]
 80039ac:	60da      	str	r2, [r3, #12]
 80039ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b8:	d120      	bne.n	80039fc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ba:	4b52      	ldr	r3, [pc, #328]	; (8003b04 <HAL_TIM_MspPostInit+0x16c>)
 80039bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039c0:	4a50      	ldr	r2, [pc, #320]	; (8003b04 <HAL_TIM_MspPostInit+0x16c>)
 80039c2:	f043 0302 	orr.w	r3, r3, #2
 80039c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039ca:	4b4e      	ldr	r3, [pc, #312]	; (8003b04 <HAL_TIM_MspPostInit+0x16c>)
 80039cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	61bb      	str	r3, [r7, #24]
 80039d6:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80039d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039de:	2302      	movs	r3, #2
 80039e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80039e2:	2302      	movs	r3, #2
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e6:	2300      	movs	r3, #0
 80039e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80039ea:	2301      	movs	r3, #1
 80039ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ee:	f107 031c 	add.w	r3, r7, #28
 80039f2:	4619      	mov	r1, r3
 80039f4:	4844      	ldr	r0, [pc, #272]	; (8003b08 <HAL_TIM_MspPostInit+0x170>)
 80039f6:	f005 f91d 	bl	8008c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80039fa:	e07f      	b.n	8003afc <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a42      	ldr	r2, [pc, #264]	; (8003b0c <HAL_TIM_MspPostInit+0x174>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d11f      	bne.n	8003a46 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a06:	4b3f      	ldr	r3, [pc, #252]	; (8003b04 <HAL_TIM_MspPostInit+0x16c>)
 8003a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a0c:	4a3d      	ldr	r2, [pc, #244]	; (8003b04 <HAL_TIM_MspPostInit+0x16c>)
 8003a0e:	f043 0302 	orr.w	r3, r3, #2
 8003a12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a16:	4b3b      	ldr	r3, [pc, #236]	; (8003b04 <HAL_TIM_MspPostInit+0x16c>)
 8003a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003a24:	2330      	movs	r3, #48	; 0x30
 8003a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a30:	2300      	movs	r3, #0
 8003a32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003a34:	2302      	movs	r3, #2
 8003a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a38:	f107 031c 	add.w	r3, r7, #28
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4832      	ldr	r0, [pc, #200]	; (8003b08 <HAL_TIM_MspPostInit+0x170>)
 8003a40:	f005 f8f8 	bl	8008c34 <HAL_GPIO_Init>
}
 8003a44:	e05a      	b.n	8003afc <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a31      	ldr	r2, [pc, #196]	; (8003b10 <HAL_TIM_MspPostInit+0x178>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d131      	bne.n	8003ab4 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a50:	4b2c      	ldr	r3, [pc, #176]	; (8003b04 <HAL_TIM_MspPostInit+0x16c>)
 8003a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a56:	4a2b      	ldr	r2, [pc, #172]	; (8003b04 <HAL_TIM_MspPostInit+0x16c>)
 8003a58:	f043 0308 	orr.w	r3, r3, #8
 8003a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a60:	4b28      	ldr	r3, [pc, #160]	; (8003b04 <HAL_TIM_MspPostInit+0x16c>)
 8003a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	613b      	str	r3, [r7, #16]
 8003a6c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003a6e:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a74:	2302      	movs	r3, #2
 8003a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003a80:	2302      	movs	r3, #2
 8003a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a84:	f107 031c 	add.w	r3, r7, #28
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4822      	ldr	r0, [pc, #136]	; (8003b14 <HAL_TIM_MspPostInit+0x17c>)
 8003a8c:	f005 f8d2 	bl	8008c34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003a90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a96:	2302      	movs	r3, #2
 8003a98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003aa6:	f107 031c 	add.w	r3, r7, #28
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4819      	ldr	r0, [pc, #100]	; (8003b14 <HAL_TIM_MspPostInit+0x17c>)
 8003aae:	f005 f8c1 	bl	8008c34 <HAL_GPIO_Init>
}
 8003ab2:	e023      	b.n	8003afc <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a17      	ldr	r2, [pc, #92]	; (8003b18 <HAL_TIM_MspPostInit+0x180>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d11e      	bne.n	8003afc <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003abe:	4b11      	ldr	r3, [pc, #68]	; (8003b04 <HAL_TIM_MspPostInit+0x16c>)
 8003ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ac4:	4a0f      	ldr	r2, [pc, #60]	; (8003b04 <HAL_TIM_MspPostInit+0x16c>)
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ace:	4b0d      	ldr	r3, [pc, #52]	; (8003b04 <HAL_TIM_MspPostInit+0x16c>)
 8003ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003adc:	2308      	movs	r3, #8
 8003ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003aec:	2302      	movs	r3, #2
 8003aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af0:	f107 031c 	add.w	r3, r7, #28
 8003af4:	4619      	mov	r1, r3
 8003af6:	4809      	ldr	r0, [pc, #36]	; (8003b1c <HAL_TIM_MspPostInit+0x184>)
 8003af8:	f005 f89c 	bl	8008c34 <HAL_GPIO_Init>
}
 8003afc:	bf00      	nop
 8003afe:	3730      	adds	r7, #48	; 0x30
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	58024400 	.word	0x58024400
 8003b08:	58020400 	.word	0x58020400
 8003b0c:	40000400 	.word	0x40000400
 8003b10:	40000800 	.word	0x40000800
 8003b14:	58020c00 	.word	0x58020c00
 8003b18:	40000c00 	.word	0x40000c00
 8003b1c:	58020000 	.word	0x58020000

08003b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b0ba      	sub	sp, #232	; 0xe8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b28:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	605a      	str	r2, [r3, #4]
 8003b32:	609a      	str	r2, [r3, #8]
 8003b34:	60da      	str	r2, [r3, #12]
 8003b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b38:	f107 0318 	add.w	r3, r7, #24
 8003b3c:	22b8      	movs	r2, #184	; 0xb8
 8003b3e:	2100      	movs	r1, #0
 8003b40:	4618      	mov	r0, r3
 8003b42:	f018 f96e 	bl	801be22 <memset>
  if(huart->Instance==UART4)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a4d      	ldr	r2, [pc, #308]	; (8003c80 <HAL_UART_MspInit+0x160>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d147      	bne.n	8003be0 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003b50:	f04f 0202 	mov.w	r2, #2
 8003b54:	f04f 0300 	mov.w	r3, #0
 8003b58:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b62:	f107 0318 	add.w	r3, r7, #24
 8003b66:	4618      	mov	r0, r3
 8003b68:	f007 fe52 	bl	800b810 <HAL_RCCEx_PeriphCLKConfig>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003b72:	f7ff f9db 	bl	8002f2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003b76:	4b43      	ldr	r3, [pc, #268]	; (8003c84 <HAL_UART_MspInit+0x164>)
 8003b78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b7c:	4a41      	ldr	r2, [pc, #260]	; (8003c84 <HAL_UART_MspInit+0x164>)
 8003b7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b86:	4b3f      	ldr	r3, [pc, #252]	; (8003c84 <HAL_UART_MspInit+0x164>)
 8003b88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b94:	4b3b      	ldr	r3, [pc, #236]	; (8003c84 <HAL_UART_MspInit+0x164>)
 8003b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b9a:	4a3a      	ldr	r2, [pc, #232]	; (8003c84 <HAL_UART_MspInit+0x164>)
 8003b9c:	f043 0302 	orr.w	r3, r3, #2
 8003ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ba4:	4b37      	ldr	r3, [pc, #220]	; (8003c84 <HAL_UART_MspInit+0x164>)
 8003ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003bb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003bb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bba:	2302      	movs	r3, #2
 8003bbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003bcc:	2308      	movs	r3, #8
 8003bce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bd2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	482b      	ldr	r0, [pc, #172]	; (8003c88 <HAL_UART_MspInit+0x168>)
 8003bda:	f005 f82b 	bl	8008c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003bde:	e04a      	b.n	8003c76 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a29      	ldr	r2, [pc, #164]	; (8003c8c <HAL_UART_MspInit+0x16c>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d145      	bne.n	8003c76 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003bea:	f04f 0201 	mov.w	r2, #1
 8003bee:	f04f 0300 	mov.w	r3, #0
 8003bf2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bfc:	f107 0318 	add.w	r3, r7, #24
 8003c00:	4618      	mov	r0, r3
 8003c02:	f007 fe05 	bl	800b810 <HAL_RCCEx_PeriphCLKConfig>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003c0c:	f7ff f98e 	bl	8002f2c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003c10:	4b1c      	ldr	r3, [pc, #112]	; (8003c84 <HAL_UART_MspInit+0x164>)
 8003c12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c16:	4a1b      	ldr	r2, [pc, #108]	; (8003c84 <HAL_UART_MspInit+0x164>)
 8003c18:	f043 0320 	orr.w	r3, r3, #32
 8003c1c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003c20:	4b18      	ldr	r3, [pc, #96]	; (8003c84 <HAL_UART_MspInit+0x164>)
 8003c22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c26:	f003 0320 	and.w	r3, r3, #32
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c2e:	4b15      	ldr	r3, [pc, #84]	; (8003c84 <HAL_UART_MspInit+0x164>)
 8003c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c34:	4a13      	ldr	r2, [pc, #76]	; (8003c84 <HAL_UART_MspInit+0x164>)
 8003c36:	f043 0304 	orr.w	r3, r3, #4
 8003c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c3e:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <HAL_UART_MspInit+0x164>)
 8003c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	60bb      	str	r3, [r7, #8]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c4c:	23c0      	movs	r3, #192	; 0xc0
 8003c4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c52:	2302      	movs	r3, #2
 8003c54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003c64:	2307      	movs	r3, #7
 8003c66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c6a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4807      	ldr	r0, [pc, #28]	; (8003c90 <HAL_UART_MspInit+0x170>)
 8003c72:	f004 ffdf 	bl	8008c34 <HAL_GPIO_Init>
}
 8003c76:	bf00      	nop
 8003c78:	37e8      	adds	r7, #232	; 0xe8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40004c00 	.word	0x40004c00
 8003c84:	58024400 	.word	0x58024400
 8003c88:	58020400 	.word	0x58020400
 8003c8c:	40011400 	.word	0x40011400
 8003c90:	58020800 	.word	0x58020800

08003c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c98:	e7fe      	b.n	8003c98 <NMI_Handler+0x4>

08003c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c9e:	e7fe      	b.n	8003c9e <HardFault_Handler+0x4>

08003ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ca4:	e7fe      	b.n	8003ca4 <MemManage_Handler+0x4>

08003ca6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003caa:	e7fe      	b.n	8003caa <BusFault_Handler+0x4>

08003cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cb0:	e7fe      	b.n	8003cb0 <UsageFault_Handler+0x4>

08003cb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003cb6:	bf00      	nop
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cc4:	bf00      	nop
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cd2:	bf00      	nop
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ce0:	f000 fa4a 	bl	8004178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ce4:	bf00      	nop
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8003cec:	4802      	ldr	r0, [pc, #8]	; (8003cf8 <DMA1_Stream0_IRQHandler+0x10>)
 8003cee:	f003 f92b 	bl	8006f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003cf2:	bf00      	nop
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	24001474 	.word	0x24001474

08003cfc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8003d00:	4802      	ldr	r0, [pc, #8]	; (8003d0c <DMA1_Stream1_IRQHandler+0x10>)
 8003d02:	f003 f921 	bl	8006f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003d06:	bf00      	nop
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	2400130c 	.word	0x2400130c

08003d10 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003d14:	4802      	ldr	r0, [pc, #8]	; (8003d20 <DMA1_Stream2_IRQHandler+0x10>)
 8003d16:	f003 f917 	bl	8006f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003d1a:	bf00      	nop
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	240014ec 	.word	0x240014ec

08003d24 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003d28:	4802      	ldr	r0, [pc, #8]	; (8003d34 <DMA1_Stream3_IRQHandler+0x10>)
 8003d2a:	f003 f90d 	bl	8006f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003d2e:	bf00      	nop
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	24001384 	.word	0x24001384

08003d38 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8003d3c:	4802      	ldr	r0, [pc, #8]	; (8003d48 <DMA1_Stream4_IRQHandler+0x10>)
 8003d3e:	f003 f903 	bl	8006f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003d42:	bf00      	nop
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	240013fc 	.word	0x240013fc

08003d4c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003d50:	4802      	ldr	r0, [pc, #8]	; (8003d5c <DMA1_Stream5_IRQHandler+0x10>)
 8003d52:	f003 f8f9 	bl	8006f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003d56:	bf00      	nop
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	24000d4c 	.word	0x24000d4c

08003d60 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003d64:	4802      	ldr	r0, [pc, #8]	; (8003d70 <TIM4_IRQHandler+0x10>)
 8003d66:	f00c ff35 	bl	8010bd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003d6a:	bf00      	nop
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	240011dc 	.word	0x240011dc

08003d74 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003d78:	4802      	ldr	r0, [pc, #8]	; (8003d84 <I2C2_EV_IRQHandler+0x10>)
 8003d7a:	f005 f9c5 	bl	8009108 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003d7e:	bf00      	nop
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	24000edc 	.word	0x24000edc

08003d88 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003d8c:	4802      	ldr	r0, [pc, #8]	; (8003d98 <DMA2_Stream7_IRQHandler+0x10>)
 8003d8e:	f003 f8db 	bl	8006f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003d92:	bf00      	nop
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	24000dc4 	.word	0x24000dc4

08003d9c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003da0:	4802      	ldr	r0, [pc, #8]	; (8003dac <OTG_HS_IRQHandler+0x10>)
 8003da2:	f005 fbbb 	bl	800951c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003da6:	bf00      	nop
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	24002db8 	.word	0x24002db8

08003db0 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8003db4:	4802      	ldr	r0, [pc, #8]	; (8003dc0 <SDMMC2_IRQHandler+0x10>)
 8003db6:	f00a fb81 	bl	800e4bc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8003dba:	bf00      	nop
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	24000f30 	.word	0x24000f30

08003dc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
  return 1;
 8003dc8:	2301      	movs	r3, #1
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <_kill>:

int _kill(int pid, int sig)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003dde:	f018 f873 	bl	801bec8 <__errno>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2216      	movs	r2, #22
 8003de6:	601a      	str	r2, [r3, #0]
  return -1;
 8003de8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <_exit>:

void _exit (int status)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7ff ffe7 	bl	8003dd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e06:	e7fe      	b.n	8003e06 <_exit+0x12>

08003e08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e14:	2300      	movs	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	e00a      	b.n	8003e30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003e1a:	f3af 8000 	nop.w
 8003e1e:	4601      	mov	r1, r0
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	60ba      	str	r2, [r7, #8]
 8003e26:	b2ca      	uxtb	r2, r1
 8003e28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	617b      	str	r3, [r7, #20]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	dbf0      	blt.n	8003e1a <_read+0x12>
  }

  return len;
 8003e38:	687b      	ldr	r3, [r7, #4]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b086      	sub	sp, #24
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	60f8      	str	r0, [r7, #12]
 8003e4a:	60b9      	str	r1, [r7, #8]
 8003e4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e4e:	2300      	movs	r3, #0
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	e009      	b.n	8003e68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	1c5a      	adds	r2, r3, #1
 8003e58:	60ba      	str	r2, [r7, #8]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	3301      	adds	r3, #1
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	dbf1      	blt.n	8003e54 <_write+0x12>
  }
  return len;
 8003e70:	687b      	ldr	r3, [r7, #4]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <_close>:

int _close(int file)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ea2:	605a      	str	r2, [r3, #4]
  return 0;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <_isatty>:

int _isatty(int file)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003eba:	2301      	movs	r3, #1
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
	...

08003ee4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003eec:	4a14      	ldr	r2, [pc, #80]	; (8003f40 <_sbrk+0x5c>)
 8003eee:	4b15      	ldr	r3, [pc, #84]	; (8003f44 <_sbrk+0x60>)
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ef8:	4b13      	ldr	r3, [pc, #76]	; (8003f48 <_sbrk+0x64>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d102      	bne.n	8003f06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f00:	4b11      	ldr	r3, [pc, #68]	; (8003f48 <_sbrk+0x64>)
 8003f02:	4a12      	ldr	r2, [pc, #72]	; (8003f4c <_sbrk+0x68>)
 8003f04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f06:	4b10      	ldr	r3, [pc, #64]	; (8003f48 <_sbrk+0x64>)
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d207      	bcs.n	8003f24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f14:	f017 ffd8 	bl	801bec8 <__errno>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	220c      	movs	r2, #12
 8003f1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f22:	e009      	b.n	8003f38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f24:	4b08      	ldr	r3, [pc, #32]	; (8003f48 <_sbrk+0x64>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f2a:	4b07      	ldr	r3, [pc, #28]	; (8003f48 <_sbrk+0x64>)
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4413      	add	r3, r2
 8003f32:	4a05      	ldr	r2, [pc, #20]	; (8003f48 <_sbrk+0x64>)
 8003f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f36:	68fb      	ldr	r3, [r7, #12]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	24050000 	.word	0x24050000
 8003f44:	00000800 	.word	0x00000800
 8003f48:	2400168c 	.word	0x2400168c
 8003f4c:	24003630 	.word	0x24003630

08003f50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003f54:	4b32      	ldr	r3, [pc, #200]	; (8004020 <SystemInit+0xd0>)
 8003f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5a:	4a31      	ldr	r2, [pc, #196]	; (8004020 <SystemInit+0xd0>)
 8003f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003f64:	4b2f      	ldr	r3, [pc, #188]	; (8004024 <SystemInit+0xd4>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 030f 	and.w	r3, r3, #15
 8003f6c:	2b06      	cmp	r3, #6
 8003f6e:	d807      	bhi.n	8003f80 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003f70:	4b2c      	ldr	r3, [pc, #176]	; (8004024 <SystemInit+0xd4>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f023 030f 	bic.w	r3, r3, #15
 8003f78:	4a2a      	ldr	r2, [pc, #168]	; (8004024 <SystemInit+0xd4>)
 8003f7a:	f043 0307 	orr.w	r3, r3, #7
 8003f7e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003f80:	4b29      	ldr	r3, [pc, #164]	; (8004028 <SystemInit+0xd8>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a28      	ldr	r2, [pc, #160]	; (8004028 <SystemInit+0xd8>)
 8003f86:	f043 0301 	orr.w	r3, r3, #1
 8003f8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003f8c:	4b26      	ldr	r3, [pc, #152]	; (8004028 <SystemInit+0xd8>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003f92:	4b25      	ldr	r3, [pc, #148]	; (8004028 <SystemInit+0xd8>)
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	4924      	ldr	r1, [pc, #144]	; (8004028 <SystemInit+0xd8>)
 8003f98:	4b24      	ldr	r3, [pc, #144]	; (800402c <SystemInit+0xdc>)
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003f9e:	4b21      	ldr	r3, [pc, #132]	; (8004024 <SystemInit+0xd4>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d007      	beq.n	8003fba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003faa:	4b1e      	ldr	r3, [pc, #120]	; (8004024 <SystemInit+0xd4>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f023 030f 	bic.w	r3, r3, #15
 8003fb2:	4a1c      	ldr	r2, [pc, #112]	; (8004024 <SystemInit+0xd4>)
 8003fb4:	f043 0307 	orr.w	r3, r3, #7
 8003fb8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003fba:	4b1b      	ldr	r3, [pc, #108]	; (8004028 <SystemInit+0xd8>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003fc0:	4b19      	ldr	r3, [pc, #100]	; (8004028 <SystemInit+0xd8>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003fc6:	4b18      	ldr	r3, [pc, #96]	; (8004028 <SystemInit+0xd8>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003fcc:	4b16      	ldr	r3, [pc, #88]	; (8004028 <SystemInit+0xd8>)
 8003fce:	4a18      	ldr	r2, [pc, #96]	; (8004030 <SystemInit+0xe0>)
 8003fd0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003fd2:	4b15      	ldr	r3, [pc, #84]	; (8004028 <SystemInit+0xd8>)
 8003fd4:	4a17      	ldr	r2, [pc, #92]	; (8004034 <SystemInit+0xe4>)
 8003fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003fd8:	4b13      	ldr	r3, [pc, #76]	; (8004028 <SystemInit+0xd8>)
 8003fda:	4a17      	ldr	r2, [pc, #92]	; (8004038 <SystemInit+0xe8>)
 8003fdc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003fde:	4b12      	ldr	r3, [pc, #72]	; (8004028 <SystemInit+0xd8>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003fe4:	4b10      	ldr	r3, [pc, #64]	; (8004028 <SystemInit+0xd8>)
 8003fe6:	4a14      	ldr	r2, [pc, #80]	; (8004038 <SystemInit+0xe8>)
 8003fe8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003fea:	4b0f      	ldr	r3, [pc, #60]	; (8004028 <SystemInit+0xd8>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003ff0:	4b0d      	ldr	r3, [pc, #52]	; (8004028 <SystemInit+0xd8>)
 8003ff2:	4a11      	ldr	r2, [pc, #68]	; (8004038 <SystemInit+0xe8>)
 8003ff4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003ff6:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <SystemInit+0xd8>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003ffc:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <SystemInit+0xd8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a09      	ldr	r2, [pc, #36]	; (8004028 <SystemInit+0xd8>)
 8004002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004006:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004008:	4b07      	ldr	r3, [pc, #28]	; (8004028 <SystemInit+0xd8>)
 800400a:	2200      	movs	r2, #0
 800400c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800400e:	4b0b      	ldr	r3, [pc, #44]	; (800403c <SystemInit+0xec>)
 8004010:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004014:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004016:	bf00      	nop
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	e000ed00 	.word	0xe000ed00
 8004024:	52002000 	.word	0x52002000
 8004028:	58024400 	.word	0x58024400
 800402c:	eaf6ed7f 	.word	0xeaf6ed7f
 8004030:	02020200 	.word	0x02020200
 8004034:	01ff0000 	.word	0x01ff0000
 8004038:	01010280 	.word	0x01010280
 800403c:	52004000 	.word	0x52004000

08004040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004040:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004078 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004044:	f7ff ff84 	bl	8003f50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004048:	480c      	ldr	r0, [pc, #48]	; (800407c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800404a:	490d      	ldr	r1, [pc, #52]	; (8004080 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800404c:	4a0d      	ldr	r2, [pc, #52]	; (8004084 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800404e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004050:	e002      	b.n	8004058 <LoopCopyDataInit>

08004052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004056:	3304      	adds	r3, #4

08004058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800405a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800405c:	d3f9      	bcc.n	8004052 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800405e:	4a0a      	ldr	r2, [pc, #40]	; (8004088 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004060:	4c0a      	ldr	r4, [pc, #40]	; (800408c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004064:	e001      	b.n	800406a <LoopFillZerobss>

08004066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004068:	3204      	adds	r2, #4

0800406a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800406a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800406c:	d3fb      	bcc.n	8004066 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800406e:	f017 ff31 	bl	801bed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004072:	f7fd fa7d 	bl	8001570 <main>
  bx  lr
 8004076:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004078:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800407c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004080:	240002c8 	.word	0x240002c8
  ldr r2, =_sidata
 8004084:	0802092c 	.word	0x0802092c
  ldr r2, =_sbss
 8004088:	240002c8 	.word	0x240002c8
  ldr r4, =_ebss
 800408c:	24003630 	.word	0x24003630

08004090 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004090:	e7fe      	b.n	8004090 <ADC3_IRQHandler>
	...

08004094 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800409a:	2003      	movs	r0, #3
 800409c:	f002 f952 	bl	8006344 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040a0:	f007 f9e0 	bl	800b464 <HAL_RCC_GetSysClockFreq>
 80040a4:	4602      	mov	r2, r0
 80040a6:	4b15      	ldr	r3, [pc, #84]	; (80040fc <HAL_Init+0x68>)
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	0a1b      	lsrs	r3, r3, #8
 80040ac:	f003 030f 	and.w	r3, r3, #15
 80040b0:	4913      	ldr	r1, [pc, #76]	; (8004100 <HAL_Init+0x6c>)
 80040b2:	5ccb      	ldrb	r3, [r1, r3]
 80040b4:	f003 031f 	and.w	r3, r3, #31
 80040b8:	fa22 f303 	lsr.w	r3, r2, r3
 80040bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040be:	4b0f      	ldr	r3, [pc, #60]	; (80040fc <HAL_Init+0x68>)
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	4a0e      	ldr	r2, [pc, #56]	; (8004100 <HAL_Init+0x6c>)
 80040c8:	5cd3      	ldrb	r3, [r2, r3]
 80040ca:	f003 031f 	and.w	r3, r3, #31
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	fa22 f303 	lsr.w	r3, r2, r3
 80040d4:	4a0b      	ldr	r2, [pc, #44]	; (8004104 <HAL_Init+0x70>)
 80040d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040d8:	4a0b      	ldr	r2, [pc, #44]	; (8004108 <HAL_Init+0x74>)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040de:	200f      	movs	r0, #15
 80040e0:	f000 f814 	bl	800410c <HAL_InitTick>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e002      	b.n	80040f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80040ee:	f7fe ff23 	bl	8002f38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	58024400 	.word	0x58024400
 8004100:	08020040 	.word	0x08020040
 8004104:	24000004 	.word	0x24000004
 8004108:	24000000 	.word	0x24000000

0800410c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004114:	4b15      	ldr	r3, [pc, #84]	; (800416c <HAL_InitTick+0x60>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e021      	b.n	8004164 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004120:	4b13      	ldr	r3, [pc, #76]	; (8004170 <HAL_InitTick+0x64>)
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	4b11      	ldr	r3, [pc, #68]	; (800416c <HAL_InitTick+0x60>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	4619      	mov	r1, r3
 800412a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800412e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004132:	fbb2 f3f3 	udiv	r3, r2, r3
 8004136:	4618      	mov	r0, r3
 8004138:	f002 f937 	bl	80063aa <HAL_SYSTICK_Config>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e00e      	b.n	8004164 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b0f      	cmp	r3, #15
 800414a:	d80a      	bhi.n	8004162 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800414c:	2200      	movs	r2, #0
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	f04f 30ff 	mov.w	r0, #4294967295
 8004154:	f002 f901 	bl	800635a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004158:	4a06      	ldr	r2, [pc, #24]	; (8004174 <HAL_InitTick+0x68>)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	e000      	b.n	8004164 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
}
 8004164:	4618      	mov	r0, r3
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	2400000c 	.word	0x2400000c
 8004170:	24000000 	.word	0x24000000
 8004174:	24000008 	.word	0x24000008

08004178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800417c:	4b06      	ldr	r3, [pc, #24]	; (8004198 <HAL_IncTick+0x20>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	4b06      	ldr	r3, [pc, #24]	; (800419c <HAL_IncTick+0x24>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4413      	add	r3, r2
 8004188:	4a04      	ldr	r2, [pc, #16]	; (800419c <HAL_IncTick+0x24>)
 800418a:	6013      	str	r3, [r2, #0]
}
 800418c:	bf00      	nop
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	2400000c 	.word	0x2400000c
 800419c:	24001690 	.word	0x24001690

080041a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  return uwTick;
 80041a4:	4b03      	ldr	r3, [pc, #12]	; (80041b4 <HAL_GetTick+0x14>)
 80041a6:	681b      	ldr	r3, [r3, #0]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	24001690 	.word	0x24001690

080041b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041c0:	f7ff ffee 	bl	80041a0 <HAL_GetTick>
 80041c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d0:	d005      	beq.n	80041de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041d2:	4b0a      	ldr	r3, [pc, #40]	; (80041fc <HAL_Delay+0x44>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4413      	add	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041de:	bf00      	nop
 80041e0:	f7ff ffde 	bl	80041a0 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d8f7      	bhi.n	80041e0 <HAL_Delay+0x28>
  {
  }
}
 80041f0:	bf00      	nop
 80041f2:	bf00      	nop
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	2400000c 	.word	0x2400000c

08004200 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800420a:	4b07      	ldr	r3, [pc, #28]	; (8004228 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	43db      	mvns	r3, r3
 8004212:	401a      	ands	r2, r3
 8004214:	4904      	ldr	r1, [pc, #16]	; (8004228 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	4313      	orrs	r3, r2
 800421a:	604b      	str	r3, [r1, #4]
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	58000400 	.word	0x58000400

0800422c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	609a      	str	r2, [r3, #8]
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	609a      	str	r2, [r3, #8]
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004288:	4618      	mov	r0, r3
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	3360      	adds	r3, #96	; 0x60
 80042a6:	461a      	mov	r2, r3
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4a10      	ldr	r2, [pc, #64]	; (80042f4 <LL_ADC_SetOffset+0x60>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d10b      	bne.n	80042d0 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80042ce:	e00b      	b.n	80042e8 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	430b      	orrs	r3, r1
 80042e2:	431a      	orrs	r2, r3
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	601a      	str	r2, [r3, #0]
}
 80042e8:	bf00      	nop
 80042ea:	371c      	adds	r7, #28
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	58026000 	.word	0x58026000

080042f8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3360      	adds	r3, #96	; 0x60
 8004306:	461a      	mov	r2, r3
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004318:	4618      	mov	r0, r3
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f003 031f 	and.w	r3, r3, #31
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	fa01 f303 	lsl.w	r3, r1, r3
 8004344:	431a      	orrs	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	611a      	str	r2, [r3, #16]
}
 800434a:	bf00      	nop
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
	...

08004358 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004358:	b480      	push	{r7}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4a0c      	ldr	r2, [pc, #48]	; (8004398 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d00e      	beq.n	800438a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	3360      	adds	r3, #96	; 0x60
 8004370:	461a      	mov	r2, r3
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	431a      	orrs	r2, r3
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	601a      	str	r2, [r3, #0]
  }
}
 800438a:	bf00      	nop
 800438c:	371c      	adds	r7, #28
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	58026000 	.word	0x58026000

0800439c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4a0c      	ldr	r2, [pc, #48]	; (80043dc <LL_ADC_SetOffsetSaturation+0x40>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d10e      	bne.n	80043ce <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	3360      	adds	r3, #96	; 0x60
 80043b4:	461a      	mov	r2, r3
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	431a      	orrs	r2, r3
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80043ce:	bf00      	nop
 80043d0:	371c      	adds	r7, #28
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	58026000 	.word	0x58026000

080043e0 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b087      	sub	sp, #28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4a0c      	ldr	r2, [pc, #48]	; (8004420 <LL_ADC_SetOffsetSign+0x40>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d10e      	bne.n	8004412 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	3360      	adds	r3, #96	; 0x60
 80043f8:	461a      	mov	r2, r3
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	431a      	orrs	r2, r3
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8004412:	bf00      	nop
 8004414:	371c      	adds	r7, #28
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	58026000 	.word	0x58026000

08004424 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	3360      	adds	r3, #96	; 0x60
 8004434:	461a      	mov	r2, r3
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4a0c      	ldr	r2, [pc, #48]	; (8004474 <LL_ADC_SetOffsetState+0x50>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d108      	bne.n	8004458 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	431a      	orrs	r2, r3
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8004456:	e007      	b.n	8004468 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	431a      	orrs	r2, r3
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	601a      	str	r2, [r3, #0]
}
 8004468:	bf00      	nop
 800446a:	371c      	adds	r7, #28
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr
 8004474:	58026000 	.word	0x58026000

08004478 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800448c:	2301      	movs	r3, #1
 800448e:	e000      	b.n	8004492 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800449e:	b480      	push	{r7}
 80044a0:	b087      	sub	sp, #28
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	60f8      	str	r0, [r7, #12]
 80044a6:	60b9      	str	r1, [r7, #8]
 80044a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	3330      	adds	r3, #48	; 0x30
 80044ae:	461a      	mov	r2, r3
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	0a1b      	lsrs	r3, r3, #8
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	f003 030c 	and.w	r3, r3, #12
 80044ba:	4413      	add	r3, r2
 80044bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	f003 031f 	and.w	r3, r3, #31
 80044c8:	211f      	movs	r1, #31
 80044ca:	fa01 f303 	lsl.w	r3, r1, r3
 80044ce:	43db      	mvns	r3, r3
 80044d0:	401a      	ands	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	0e9b      	lsrs	r3, r3, #26
 80044d6:	f003 011f 	and.w	r1, r3, #31
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f003 031f 	and.w	r3, r3, #31
 80044e0:	fa01 f303 	lsl.w	r3, r1, r3
 80044e4:	431a      	orrs	r2, r3
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80044ea:	bf00      	nop
 80044ec:	371c      	adds	r7, #28
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b087      	sub	sp, #28
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	60f8      	str	r0, [r7, #12]
 80044fe:	60b9      	str	r1, [r7, #8]
 8004500:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	3314      	adds	r3, #20
 8004506:	461a      	mov	r2, r3
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	0e5b      	lsrs	r3, r3, #25
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	f003 0304 	and.w	r3, r3, #4
 8004512:	4413      	add	r3, r2
 8004514:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	0d1b      	lsrs	r3, r3, #20
 800451e:	f003 031f 	and.w	r3, r3, #31
 8004522:	2107      	movs	r1, #7
 8004524:	fa01 f303 	lsl.w	r3, r1, r3
 8004528:	43db      	mvns	r3, r3
 800452a:	401a      	ands	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	0d1b      	lsrs	r3, r3, #20
 8004530:	f003 031f 	and.w	r3, r3, #31
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	fa01 f303 	lsl.w	r3, r1, r3
 800453a:	431a      	orrs	r2, r3
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004540:	bf00      	nop
 8004542:	371c      	adds	r7, #28
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4a1a      	ldr	r2, [pc, #104]	; (80045c4 <LL_ADC_SetChannelSingleDiff+0x78>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d115      	bne.n	800458c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800456c:	43db      	mvns	r3, r3
 800456e:	401a      	ands	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f003 0318 	and.w	r3, r3, #24
 8004576:	4914      	ldr	r1, [pc, #80]	; (80045c8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004578:	40d9      	lsrs	r1, r3
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	400b      	ands	r3, r1
 800457e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004582:	431a      	orrs	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800458a:	e014      	b.n	80045b6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004598:	43db      	mvns	r3, r3
 800459a:	401a      	ands	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f003 0318 	and.w	r3, r3, #24
 80045a2:	4909      	ldr	r1, [pc, #36]	; (80045c8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80045a4:	40d9      	lsrs	r1, r3
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	400b      	ands	r3, r1
 80045aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045ae:	431a      	orrs	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80045b6:	bf00      	nop
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	58026000 	.word	0x58026000
 80045c8:	000fffff 	.word	0x000fffff

080045cc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 031f 	and.w	r3, r3, #31
}
 80045dc:	4618      	mov	r0, r3
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	4b04      	ldr	r3, [pc, #16]	; (8004624 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004612:	4013      	ands	r3, r2
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	6093      	str	r3, [r2, #8]
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	5fffffc0 	.word	0x5fffffc0

08004628 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004638:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800463c:	d101      	bne.n	8004642 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800463e:	2301      	movs	r3, #1
 8004640:	e000      	b.n	8004644 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	4b05      	ldr	r3, [pc, #20]	; (8004674 <LL_ADC_EnableInternalRegulator+0x24>)
 800465e:	4013      	ands	r3, r2
 8004660:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	6fffffc0 	.word	0x6fffffc0

08004678 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004688:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800468c:	d101      	bne.n	8004692 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800468e:	2301      	movs	r3, #1
 8004690:	e000      	b.n	8004694 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <LL_ADC_Enable+0x24>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	f043 0201 	orr.w	r2, r3, #1
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	7fffffc0 	.word	0x7fffffc0

080046c8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	4b05      	ldr	r3, [pc, #20]	; (80046ec <LL_ADC_Disable+0x24>)
 80046d6:	4013      	ands	r3, r2
 80046d8:	f043 0202 	orr.w	r2, r3, #2
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	7fffffc0 	.word	0x7fffffc0

080046f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b01      	cmp	r3, #1
 8004702:	d101      	bne.n	8004708 <LL_ADC_IsEnabled+0x18>
 8004704:	2301      	movs	r3, #1
 8004706:	e000      	b.n	800470a <LL_ADC_IsEnabled+0x1a>
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b02      	cmp	r3, #2
 8004728:	d101      	bne.n	800472e <LL_ADC_IsDisableOngoing+0x18>
 800472a:	2301      	movs	r3, #1
 800472c:	e000      	b.n	8004730 <LL_ADC_IsDisableOngoing+0x1a>
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	4b05      	ldr	r3, [pc, #20]	; (8004760 <LL_ADC_REG_StartConversion+0x24>)
 800474a:	4013      	ands	r3, r2
 800474c:	f043 0204 	orr.w	r2, r3, #4
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	7fffffc0 	.word	0x7fffffc0

08004764 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	4b05      	ldr	r3, [pc, #20]	; (8004788 <LL_ADC_REG_StopConversion+0x24>)
 8004772:	4013      	ands	r3, r2
 8004774:	f043 0210 	orr.w	r2, r3, #16
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	7fffffc0 	.word	0x7fffffc0

0800478c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b04      	cmp	r3, #4
 800479e:	d101      	bne.n	80047a4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80047a0:	2301      	movs	r3, #1
 80047a2:	e000      	b.n	80047a6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
	...

080047b4 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <LL_ADC_INJ_StopConversion+0x24>)
 80047c2:	4013      	ands	r3, r2
 80047c4:	f043 0220 	orr.w	r2, r3, #32
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	7fffffc0 	.word	0x7fffffc0

080047dc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f003 0308 	and.w	r3, r3, #8
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d101      	bne.n	80047f4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80047f0:	2301      	movs	r3, #1
 80047f2:	e000      	b.n	80047f6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
	...

08004804 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004804:	b590      	push	{r4, r7, lr}
 8004806:	b089      	sub	sp, #36	; 0x24
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800480c:	2300      	movs	r3, #0
 800480e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004810:	2300      	movs	r3, #0
 8004812:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e1ee      	b.n	8004bfc <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004828:	2b00      	cmp	r3, #0
 800482a:	d109      	bne.n	8004840 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7fe fb9d 	bl	8002f6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff feef 	bl	8004628 <LL_ADC_IsDeepPowerDownEnabled>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d004      	beq.n	800485a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff fed5 	bl	8004604 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f7ff ff0a 	bl	8004678 <LL_ADC_IsInternalRegulatorEnabled>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d114      	bne.n	8004894 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff feee 	bl	8004650 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004874:	4b8e      	ldr	r3, [pc, #568]	; (8004ab0 <HAL_ADC_Init+0x2ac>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	099b      	lsrs	r3, r3, #6
 800487a:	4a8e      	ldr	r2, [pc, #568]	; (8004ab4 <HAL_ADC_Init+0x2b0>)
 800487c:	fba2 2303 	umull	r2, r3, r2, r3
 8004880:	099b      	lsrs	r3, r3, #6
 8004882:	3301      	adds	r3, #1
 8004884:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004886:	e002      	b.n	800488e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	3b01      	subs	r3, #1
 800488c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1f9      	bne.n	8004888 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4618      	mov	r0, r3
 800489a:	f7ff feed 	bl	8004678 <LL_ADC_IsInternalRegulatorEnabled>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10d      	bne.n	80048c0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048a8:	f043 0210 	orr.w	r2, r3, #16
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048b4:	f043 0201 	orr.w	r2, r3, #1
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff ff61 	bl	800478c <LL_ADC_REG_IsConversionOngoing>
 80048ca:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d0:	f003 0310 	and.w	r3, r3, #16
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f040 8188 	bne.w	8004bea <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f040 8184 	bne.w	8004bea <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80048ea:	f043 0202 	orr.w	r2, r3, #2
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff fefa 	bl	80046f0 <LL_ADC_IsEnabled>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d136      	bne.n	8004970 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a6c      	ldr	r2, [pc, #432]	; (8004ab8 <HAL_ADC_Init+0x2b4>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d004      	beq.n	8004916 <HAL_ADC_Init+0x112>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a6a      	ldr	r2, [pc, #424]	; (8004abc <HAL_ADC_Init+0x2b8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d10e      	bne.n	8004934 <HAL_ADC_Init+0x130>
 8004916:	4868      	ldr	r0, [pc, #416]	; (8004ab8 <HAL_ADC_Init+0x2b4>)
 8004918:	f7ff feea 	bl	80046f0 <LL_ADC_IsEnabled>
 800491c:	4604      	mov	r4, r0
 800491e:	4867      	ldr	r0, [pc, #412]	; (8004abc <HAL_ADC_Init+0x2b8>)
 8004920:	f7ff fee6 	bl	80046f0 <LL_ADC_IsEnabled>
 8004924:	4603      	mov	r3, r0
 8004926:	4323      	orrs	r3, r4
 8004928:	2b00      	cmp	r3, #0
 800492a:	bf0c      	ite	eq
 800492c:	2301      	moveq	r3, #1
 800492e:	2300      	movne	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	e008      	b.n	8004946 <HAL_ADC_Init+0x142>
 8004934:	4862      	ldr	r0, [pc, #392]	; (8004ac0 <HAL_ADC_Init+0x2bc>)
 8004936:	f7ff fedb 	bl	80046f0 <LL_ADC_IsEnabled>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	bf0c      	ite	eq
 8004940:	2301      	moveq	r3, #1
 8004942:	2300      	movne	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d012      	beq.n	8004970 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a5a      	ldr	r2, [pc, #360]	; (8004ab8 <HAL_ADC_Init+0x2b4>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d004      	beq.n	800495e <HAL_ADC_Init+0x15a>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a58      	ldr	r2, [pc, #352]	; (8004abc <HAL_ADC_Init+0x2b8>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d101      	bne.n	8004962 <HAL_ADC_Init+0x15e>
 800495e:	4a59      	ldr	r2, [pc, #356]	; (8004ac4 <HAL_ADC_Init+0x2c0>)
 8004960:	e000      	b.n	8004964 <HAL_ADC_Init+0x160>
 8004962:	4a59      	ldr	r2, [pc, #356]	; (8004ac8 <HAL_ADC_Init+0x2c4>)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	4619      	mov	r1, r3
 800496a:	4610      	mov	r0, r2
 800496c:	f7ff fc5e 	bl	800422c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a52      	ldr	r2, [pc, #328]	; (8004ac0 <HAL_ADC_Init+0x2bc>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d129      	bne.n	80049ce <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	7e5b      	ldrb	r3, [r3, #25]
 800497e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004984:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800498a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	2b08      	cmp	r3, #8
 8004992:	d013      	beq.n	80049bc <HAL_ADC_Init+0x1b8>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	2b0c      	cmp	r3, #12
 800499a:	d00d      	beq.n	80049b8 <HAL_ADC_Init+0x1b4>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	2b1c      	cmp	r3, #28
 80049a2:	d007      	beq.n	80049b4 <HAL_ADC_Init+0x1b0>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	2b18      	cmp	r3, #24
 80049aa:	d101      	bne.n	80049b0 <HAL_ADC_Init+0x1ac>
 80049ac:	2318      	movs	r3, #24
 80049ae:	e006      	b.n	80049be <HAL_ADC_Init+0x1ba>
 80049b0:	2300      	movs	r3, #0
 80049b2:	e004      	b.n	80049be <HAL_ADC_Init+0x1ba>
 80049b4:	2310      	movs	r3, #16
 80049b6:	e002      	b.n	80049be <HAL_ADC_Init+0x1ba>
 80049b8:	2308      	movs	r3, #8
 80049ba:	e000      	b.n	80049be <HAL_ADC_Init+0x1ba>
 80049bc:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80049be:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049c6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80049c8:	4313      	orrs	r3, r2
 80049ca:	61bb      	str	r3, [r7, #24]
 80049cc:	e00e      	b.n	80049ec <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	7e5b      	ldrb	r3, [r3, #25]
 80049d2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80049d8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80049de:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049e6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80049e8:	4313      	orrs	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d106      	bne.n	8004a04 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	3b01      	subs	r3, #1
 80049fc:	045b      	lsls	r3, r3, #17
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d009      	beq.n	8004a20 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a10:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a26      	ldr	r2, [pc, #152]	; (8004ac0 <HAL_ADC_Init+0x2bc>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d115      	bne.n	8004a56 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68da      	ldr	r2, [r3, #12]
 8004a30:	4b26      	ldr	r3, [pc, #152]	; (8004acc <HAL_ADC_Init+0x2c8>)
 8004a32:	4013      	ands	r3, r2
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6812      	ldr	r2, [r2, #0]
 8004a38:	69b9      	ldr	r1, [r7, #24]
 8004a3a:	430b      	orrs	r3, r1
 8004a3c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	611a      	str	r2, [r3, #16]
 8004a54:	e009      	b.n	8004a6a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	4b1c      	ldr	r3, [pc, #112]	; (8004ad0 <HAL_ADC_Init+0x2cc>)
 8004a5e:	4013      	ands	r3, r2
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6812      	ldr	r2, [r2, #0]
 8004a64:	69b9      	ldr	r1, [r7, #24]
 8004a66:	430b      	orrs	r3, r1
 8004a68:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7ff fe8c 	bl	800478c <LL_ADC_REG_IsConversionOngoing>
 8004a74:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7ff feae 	bl	80047dc <LL_ADC_INJ_IsConversionOngoing>
 8004a80:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f040 808e 	bne.w	8004ba6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f040 808a 	bne.w	8004ba6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a0a      	ldr	r2, [pc, #40]	; (8004ac0 <HAL_ADC_Init+0x2bc>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d11b      	bne.n	8004ad4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	7e1b      	ldrb	r3, [r3, #24]
 8004aa0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004aa8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	61bb      	str	r3, [r7, #24]
 8004aae:	e018      	b.n	8004ae2 <HAL_ADC_Init+0x2de>
 8004ab0:	24000000 	.word	0x24000000
 8004ab4:	053e2d63 	.word	0x053e2d63
 8004ab8:	40022000 	.word	0x40022000
 8004abc:	40022100 	.word	0x40022100
 8004ac0:	58026000 	.word	0x58026000
 8004ac4:	40022300 	.word	0x40022300
 8004ac8:	58026300 	.word	0x58026300
 8004acc:	fff04007 	.word	0xfff04007
 8004ad0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	7e1b      	ldrb	r3, [r3, #24]
 8004ad8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	4b46      	ldr	r3, [pc, #280]	; (8004c04 <HAL_ADC_Init+0x400>)
 8004aea:	4013      	ands	r3, r2
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6812      	ldr	r2, [r2, #0]
 8004af0:	69b9      	ldr	r1, [r7, #24]
 8004af2:	430b      	orrs	r3, r1
 8004af4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d137      	bne.n	8004b70 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b04:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a3f      	ldr	r2, [pc, #252]	; (8004c08 <HAL_ADC_Init+0x404>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d116      	bne.n	8004b3e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	691a      	ldr	r2, [r3, #16]
 8004b16:	4b3d      	ldr	r3, [pc, #244]	; (8004c0c <HAL_ADC_Init+0x408>)
 8004b18:	4013      	ands	r3, r2
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004b22:	4311      	orrs	r1, r2
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b28:	4311      	orrs	r1, r2
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0201 	orr.w	r2, r2, #1
 8004b3a:	611a      	str	r2, [r3, #16]
 8004b3c:	e020      	b.n	8004b80 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	4b32      	ldr	r3, [pc, #200]	; (8004c10 <HAL_ADC_Init+0x40c>)
 8004b46:	4013      	ands	r3, r2
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004b4c:	3a01      	subs	r2, #1
 8004b4e:	0411      	lsls	r1, r2, #16
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004b54:	4311      	orrs	r1, r2
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b5a:	4311      	orrs	r1, r2
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004b60:	430a      	orrs	r2, r1
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f042 0201 	orr.w	r2, r2, #1
 8004b6c:	611a      	str	r2, [r3, #16]
 8004b6e:	e007      	b.n	8004b80 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691a      	ldr	r2, [r3, #16]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0201 	bic.w	r2, r2, #1
 8004b7e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a1b      	ldr	r2, [pc, #108]	; (8004c08 <HAL_ADC_Init+0x404>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d002      	beq.n	8004ba6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f001 f909 	bl	8005db8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d10c      	bne.n	8004bc8 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb4:	f023 010f 	bic.w	r1, r3, #15
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	1e5a      	subs	r2, r3, #1
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	631a      	str	r2, [r3, #48]	; 0x30
 8004bc6:	e007      	b.n	8004bd8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 020f 	bic.w	r2, r2, #15
 8004bd6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bdc:	f023 0303 	bic.w	r3, r3, #3
 8004be0:	f043 0201 	orr.w	r2, r3, #1
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	661a      	str	r2, [r3, #96]	; 0x60
 8004be8:	e007      	b.n	8004bfa <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bee:	f043 0210 	orr.w	r2, r3, #16
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004bfa:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3724      	adds	r7, #36	; 0x24
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd90      	pop	{r4, r7, pc}
 8004c04:	ffffbffc 	.word	0xffffbffc
 8004c08:	58026000 	.word	0x58026000
 8004c0c:	fc00f81f 	.word	0xfc00f81f
 8004c10:	fc00f81e 	.word	0xfc00f81e

08004c14 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a5c      	ldr	r2, [pc, #368]	; (8004d94 <HAL_ADC_Start+0x180>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d004      	beq.n	8004c30 <HAL_ADC_Start+0x1c>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a5b      	ldr	r2, [pc, #364]	; (8004d98 <HAL_ADC_Start+0x184>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d101      	bne.n	8004c34 <HAL_ADC_Start+0x20>
 8004c30:	4b5a      	ldr	r3, [pc, #360]	; (8004d9c <HAL_ADC_Start+0x188>)
 8004c32:	e000      	b.n	8004c36 <HAL_ADC_Start+0x22>
 8004c34:	4b5a      	ldr	r3, [pc, #360]	; (8004da0 <HAL_ADC_Start+0x18c>)
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7ff fcc8 	bl	80045cc <LL_ADC_GetMultimode>
 8004c3c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7ff fda2 	bl	800478c <LL_ADC_REG_IsConversionOngoing>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f040 809a 	bne.w	8004d84 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d101      	bne.n	8004c5e <HAL_ADC_Start+0x4a>
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	e095      	b.n	8004d8a <HAL_ADC_Start+0x176>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 ffbc 	bl	8005be4 <ADC_Enable>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004c70:	7dfb      	ldrb	r3, [r7, #23]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f040 8081 	bne.w	8004d7a <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c7c:	4b49      	ldr	r3, [pc, #292]	; (8004da4 <HAL_ADC_Start+0x190>)
 8004c7e:	4013      	ands	r3, r2
 8004c80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a42      	ldr	r2, [pc, #264]	; (8004d98 <HAL_ADC_Start+0x184>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d002      	beq.n	8004c98 <HAL_ADC_Start+0x84>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	e000      	b.n	8004c9a <HAL_ADC_Start+0x86>
 8004c98:	4b3e      	ldr	r3, [pc, #248]	; (8004d94 <HAL_ADC_Start+0x180>)
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	6812      	ldr	r2, [r2, #0]
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d002      	beq.n	8004ca8 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d105      	bne.n	8004cb4 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cc0:	d106      	bne.n	8004cd0 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cc6:	f023 0206 	bic.w	r2, r3, #6
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	665a      	str	r2, [r3, #100]	; 0x64
 8004cce:	e002      	b.n	8004cd6 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	221c      	movs	r2, #28
 8004cdc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a2b      	ldr	r2, [pc, #172]	; (8004d98 <HAL_ADC_Start+0x184>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d002      	beq.n	8004cf6 <HAL_ADC_Start+0xe2>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	e000      	b.n	8004cf8 <HAL_ADC_Start+0xe4>
 8004cf6:	4b27      	ldr	r3, [pc, #156]	; (8004d94 <HAL_ADC_Start+0x180>)
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	6812      	ldr	r2, [r2, #0]
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d008      	beq.n	8004d12 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d005      	beq.n	8004d12 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	2b05      	cmp	r3, #5
 8004d0a:	d002      	beq.n	8004d12 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	2b09      	cmp	r3, #9
 8004d10:	d114      	bne.n	8004d3c <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d007      	beq.n	8004d30 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004d28:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7ff fd01 	bl	800473c <LL_ADC_REG_StartConversion>
 8004d3a:	e025      	b.n	8004d88 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d40:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a12      	ldr	r2, [pc, #72]	; (8004d98 <HAL_ADC_Start+0x184>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d002      	beq.n	8004d58 <HAL_ADC_Start+0x144>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	e000      	b.n	8004d5a <HAL_ADC_Start+0x146>
 8004d58:	4b0e      	ldr	r3, [pc, #56]	; (8004d94 <HAL_ADC_Start+0x180>)
 8004d5a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00f      	beq.n	8004d88 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004d70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	661a      	str	r2, [r3, #96]	; 0x60
 8004d78:	e006      	b.n	8004d88 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8004d82:	e001      	b.n	8004d88 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004d84:	2302      	movs	r3, #2
 8004d86:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3718      	adds	r7, #24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40022000 	.word	0x40022000
 8004d98:	40022100 	.word	0x40022100
 8004d9c:	40022300 	.word	0x40022300
 8004da0:	58026300 	.word	0x58026300
 8004da4:	fffff0fe 	.word	0xfffff0fe

08004da8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d101      	bne.n	8004dbe <HAL_ADC_Stop+0x16>
 8004dba:	2302      	movs	r3, #2
 8004dbc:	e021      	b.n	8004e02 <HAL_ADC_Stop+0x5a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004dc6:	2103      	movs	r1, #3
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 fe4f 	bl	8005a6c <ADC_ConversionStop>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10f      	bne.n	8004df8 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 ff8d 	bl	8005cf8 <ADC_Disable>
 8004dde:	4603      	mov	r3, r0
 8004de0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d107      	bne.n	8004df8 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004dec:	4b07      	ldr	r3, [pc, #28]	; (8004e0c <HAL_ADC_Stop+0x64>)
 8004dee:	4013      	ands	r3, r2
 8004df0:	f043 0201 	orr.w	r2, r3, #1
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	ffffeefe 	.word	0xffffeefe

08004e10 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b088      	sub	sp, #32
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a72      	ldr	r2, [pc, #456]	; (8004fe8 <HAL_ADC_PollForConversion+0x1d8>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d004      	beq.n	8004e2e <HAL_ADC_PollForConversion+0x1e>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a70      	ldr	r2, [pc, #448]	; (8004fec <HAL_ADC_PollForConversion+0x1dc>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d101      	bne.n	8004e32 <HAL_ADC_PollForConversion+0x22>
 8004e2e:	4b70      	ldr	r3, [pc, #448]	; (8004ff0 <HAL_ADC_PollForConversion+0x1e0>)
 8004e30:	e000      	b.n	8004e34 <HAL_ADC_PollForConversion+0x24>
 8004e32:	4b70      	ldr	r3, [pc, #448]	; (8004ff4 <HAL_ADC_PollForConversion+0x1e4>)
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff fbc9 	bl	80045cc <LL_ADC_GetMultimode>
 8004e3a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	d102      	bne.n	8004e4a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004e44:	2308      	movs	r3, #8
 8004e46:	61fb      	str	r3, [r7, #28]
 8004e48:	e037      	b.n	8004eba <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d005      	beq.n	8004e5c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	2b05      	cmp	r3, #5
 8004e54:	d002      	beq.n	8004e5c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2b09      	cmp	r3, #9
 8004e5a:	d111      	bne.n	8004e80 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d007      	beq.n	8004e7a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e6e:	f043 0220 	orr.w	r2, r3, #32
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e0b1      	b.n	8004fde <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004e7a:	2304      	movs	r3, #4
 8004e7c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004e7e:	e01c      	b.n	8004eba <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a58      	ldr	r2, [pc, #352]	; (8004fe8 <HAL_ADC_PollForConversion+0x1d8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d004      	beq.n	8004e94 <HAL_ADC_PollForConversion+0x84>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a57      	ldr	r2, [pc, #348]	; (8004fec <HAL_ADC_PollForConversion+0x1dc>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d101      	bne.n	8004e98 <HAL_ADC_PollForConversion+0x88>
 8004e94:	4b56      	ldr	r3, [pc, #344]	; (8004ff0 <HAL_ADC_PollForConversion+0x1e0>)
 8004e96:	e000      	b.n	8004e9a <HAL_ADC_PollForConversion+0x8a>
 8004e98:	4b56      	ldr	r3, [pc, #344]	; (8004ff4 <HAL_ADC_PollForConversion+0x1e4>)
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7ff fba4 	bl	80045e8 <LL_ADC_GetMultiDMATransfer>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d007      	beq.n	8004eb6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eaa:	f043 0220 	orr.w	r2, r3, #32
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e093      	b.n	8004fde <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004eb6:	2304      	movs	r3, #4
 8004eb8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004eba:	f7ff f971 	bl	80041a0 <HAL_GetTick>
 8004ebe:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004ec0:	e021      	b.n	8004f06 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec8:	d01d      	beq.n	8004f06 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004eca:	f7ff f969 	bl	80041a0 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d302      	bcc.n	8004ee0 <HAL_ADC_PollForConversion+0xd0>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d112      	bne.n	8004f06 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10b      	bne.n	8004f06 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ef2:	f043 0204 	orr.w	r2, r3, #4
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	661a      	str	r2, [r3, #96]	; 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

          return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e06b      	b.n	8004fde <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d0d6      	beq.n	8004ec2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7ff faa7 	bl	8004478 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d01c      	beq.n	8004f6a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	7e5b      	ldrb	r3, [r3, #25]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d118      	bne.n	8004f6a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	2b08      	cmp	r3, #8
 8004f44:	d111      	bne.n	8004f6a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	661a      	str	r2, [r3, #96]	; 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d105      	bne.n	8004f6a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f62:	f043 0201 	orr.w	r2, r3, #1
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a1f      	ldr	r2, [pc, #124]	; (8004fec <HAL_ADC_PollForConversion+0x1dc>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d002      	beq.n	8004f7a <HAL_ADC_PollForConversion+0x16a>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	e000      	b.n	8004f7c <HAL_ADC_PollForConversion+0x16c>
 8004f7a:	4b1b      	ldr	r3, [pc, #108]	; (8004fe8 <HAL_ADC_PollForConversion+0x1d8>)
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6812      	ldr	r2, [r2, #0]
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d008      	beq.n	8004f96 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d005      	beq.n	8004f96 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b05      	cmp	r3, #5
 8004f8e:	d002      	beq.n	8004f96 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	2b09      	cmp	r3, #9
 8004f94:	d104      	bne.n	8004fa0 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	61bb      	str	r3, [r7, #24]
 8004f9e:	e00c      	b.n	8004fba <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a11      	ldr	r2, [pc, #68]	; (8004fec <HAL_ADC_PollForConversion+0x1dc>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d002      	beq.n	8004fb0 <HAL_ADC_PollForConversion+0x1a0>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	e000      	b.n	8004fb2 <HAL_ADC_PollForConversion+0x1a2>
 8004fb0:	4b0d      	ldr	r3, [pc, #52]	; (8004fe8 <HAL_ADC_PollForConversion+0x1d8>)
 8004fb2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d104      	bne.n	8004fca <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2208      	movs	r2, #8
 8004fc6:	601a      	str	r2, [r3, #0]
 8004fc8:	e008      	b.n	8004fdc <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d103      	bne.n	8004fdc <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	220c      	movs	r2, #12
 8004fda:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3720      	adds	r7, #32
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	40022000 	.word	0x40022000
 8004fec:	40022100 	.word	0x40022100
 8004ff0:	40022300 	.word	0x40022300
 8004ff4:	58026300 	.word	0x58026300

08004ff8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005006:	4618      	mov	r0, r3
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
	...

08005014 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005014:	b590      	push	{r4, r7, lr}
 8005016:	b0b9      	sub	sp, #228	; 0xe4
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005024:	2300      	movs	r3, #0
 8005026:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800502e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	4aa9      	ldr	r2, [pc, #676]	; (80052dc <HAL_ADC_ConfigChannel+0x2c8>)
 8005036:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800503e:	2b01      	cmp	r3, #1
 8005040:	d102      	bne.n	8005048 <HAL_ADC_ConfigChannel+0x34>
 8005042:	2302      	movs	r3, #2
 8005044:	f000 bcfa 	b.w	8005a3c <HAL_ADC_ConfigChannel+0xa28>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4618      	mov	r0, r3
 8005056:	f7ff fb99 	bl	800478c <LL_ADC_REG_IsConversionOngoing>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	f040 84de 	bne.w	8005a1e <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a9e      	ldr	r2, [pc, #632]	; (80052e0 <HAL_ADC_ConfigChannel+0x2cc>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d033      	beq.n	80050d4 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005074:	2b00      	cmp	r3, #0
 8005076:	d108      	bne.n	800508a <HAL_ADC_ConfigChannel+0x76>
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	0e9b      	lsrs	r3, r3, #26
 800507e:	f003 031f 	and.w	r3, r3, #31
 8005082:	2201      	movs	r2, #1
 8005084:	fa02 f303 	lsl.w	r3, r2, r3
 8005088:	e01d      	b.n	80050c6 <HAL_ADC_ConfigChannel+0xb2>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005092:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005096:	fa93 f3a3 	rbit	r3, r3
 800509a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800509e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80050a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80050a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80050ae:	2320      	movs	r3, #32
 80050b0:	e004      	b.n	80050bc <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80050b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050b6:	fab3 f383 	clz	r3, r3
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	f003 031f 	and.w	r3, r3, #31
 80050c0:	2201      	movs	r2, #1
 80050c2:	fa02 f303 	lsl.w	r3, r2, r3
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6812      	ldr	r2, [r2, #0]
 80050ca:	69d1      	ldr	r1, [r2, #28]
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	6812      	ldr	r2, [r2, #0]
 80050d0:	430b      	orrs	r3, r1
 80050d2:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6818      	ldr	r0, [r3, #0]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	6859      	ldr	r1, [r3, #4]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	461a      	mov	r2, r3
 80050e2:	f7ff f9dc 	bl	800449e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7ff fb4e 	bl	800478c <LL_ADC_REG_IsConversionOngoing>
 80050f0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7ff fb6f 	bl	80047dc <LL_ADC_INJ_IsConversionOngoing>
 80050fe:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005106:	2b00      	cmp	r3, #0
 8005108:	f040 8270 	bne.w	80055ec <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800510c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005110:	2b00      	cmp	r3, #0
 8005112:	f040 826b 	bne.w	80055ec <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6818      	ldr	r0, [r3, #0]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	6819      	ldr	r1, [r3, #0]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	461a      	mov	r2, r3
 8005124:	f7ff f9e7 	bl	80044f6 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a6c      	ldr	r2, [pc, #432]	; (80052e0 <HAL_ADC_ConfigChannel+0x2cc>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d10d      	bne.n	800514e <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	695a      	ldr	r2, [r3, #20]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	08db      	lsrs	r3, r3, #3
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	005b      	lsls	r3, r3, #1
 8005144:	fa02 f303 	lsl.w	r3, r2, r3
 8005148:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800514c:	e032      	b.n	80051b4 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800514e:	4b65      	ldr	r3, [pc, #404]	; (80052e4 <HAL_ADC_ConfigChannel+0x2d0>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800515a:	d10b      	bne.n	8005174 <HAL_ADC_ConfigChannel+0x160>
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	695a      	ldr	r2, [r3, #20]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	089b      	lsrs	r3, r3, #2
 8005168:	f003 0307 	and.w	r3, r3, #7
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	e01d      	b.n	80051b0 <HAL_ADC_ConfigChannel+0x19c>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	f003 0310 	and.w	r3, r3, #16
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10b      	bne.n	800519a <HAL_ADC_ConfigChannel+0x186>
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	695a      	ldr	r2, [r3, #20]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	089b      	lsrs	r3, r3, #2
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	fa02 f303 	lsl.w	r3, r2, r3
 8005198:	e00a      	b.n	80051b0 <HAL_ADC_ConfigChannel+0x19c>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	695a      	ldr	r2, [r3, #20]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	089b      	lsrs	r3, r3, #2
 80051a6:	f003 0304 	and.w	r3, r3, #4
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	fa02 f303 	lsl.w	r3, r2, r3
 80051b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	2b04      	cmp	r3, #4
 80051ba:	d048      	beq.n	800524e <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6818      	ldr	r0, [r3, #0]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	6919      	ldr	r1, [r3, #16]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051cc:	f7ff f862 	bl	8004294 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a42      	ldr	r2, [pc, #264]	; (80052e0 <HAL_ADC_ConfigChannel+0x2cc>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d119      	bne.n	800520e <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6818      	ldr	r0, [r3, #0]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	6919      	ldr	r1, [r3, #16]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	461a      	mov	r2, r3
 80051e8:	f7ff f8fa 	bl	80043e0 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6818      	ldr	r0, [r3, #0]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	6919      	ldr	r1, [r3, #16]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d102      	bne.n	8005204 <HAL_ADC_ConfigChannel+0x1f0>
 80051fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005202:	e000      	b.n	8005206 <HAL_ADC_ConfigChannel+0x1f2>
 8005204:	2300      	movs	r3, #0
 8005206:	461a      	mov	r2, r3
 8005208:	f7ff f8c8 	bl	800439c <LL_ADC_SetOffsetSaturation>
 800520c:	e1ee      	b.n	80055ec <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6818      	ldr	r0, [r3, #0]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	6919      	ldr	r1, [r3, #16]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800521c:	2b01      	cmp	r3, #1
 800521e:	d102      	bne.n	8005226 <HAL_ADC_ConfigChannel+0x212>
 8005220:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005224:	e000      	b.n	8005228 <HAL_ADC_ConfigChannel+0x214>
 8005226:	2300      	movs	r3, #0
 8005228:	461a      	mov	r2, r3
 800522a:	f7ff f895 	bl	8004358 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6818      	ldr	r0, [r3, #0]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	6919      	ldr	r1, [r3, #16]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	7e1b      	ldrb	r3, [r3, #24]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d102      	bne.n	8005244 <HAL_ADC_ConfigChannel+0x230>
 800523e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005242:	e000      	b.n	8005246 <HAL_ADC_ConfigChannel+0x232>
 8005244:	2300      	movs	r3, #0
 8005246:	461a      	mov	r2, r3
 8005248:	f7ff f86c 	bl	8004324 <LL_ADC_SetDataRightShift>
 800524c:	e1ce      	b.n	80055ec <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a23      	ldr	r2, [pc, #140]	; (80052e0 <HAL_ADC_ConfigChannel+0x2cc>)
 8005254:	4293      	cmp	r3, r2
 8005256:	f040 8181 	bne.w	800555c <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2100      	movs	r1, #0
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff f849 	bl	80042f8 <LL_ADC_GetOffsetChannel>
 8005266:	4603      	mov	r3, r0
 8005268:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10a      	bne.n	8005286 <HAL_ADC_ConfigChannel+0x272>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2100      	movs	r1, #0
 8005276:	4618      	mov	r0, r3
 8005278:	f7ff f83e 	bl	80042f8 <LL_ADC_GetOffsetChannel>
 800527c:	4603      	mov	r3, r0
 800527e:	0e9b      	lsrs	r3, r3, #26
 8005280:	f003 021f 	and.w	r2, r3, #31
 8005284:	e01e      	b.n	80052c4 <HAL_ADC_ConfigChannel+0x2b0>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2100      	movs	r1, #0
 800528c:	4618      	mov	r0, r3
 800528e:	f7ff f833 	bl	80042f8 <LL_ADC_GetOffsetChannel>
 8005292:	4603      	mov	r3, r0
 8005294:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005298:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800529c:	fa93 f3a3 	rbit	r3, r3
 80052a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80052a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80052a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80052ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80052b4:	2320      	movs	r3, #32
 80052b6:	e004      	b.n	80052c2 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80052b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80052bc:	fab3 f383 	clz	r3, r3
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	461a      	mov	r2, r3
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10b      	bne.n	80052e8 <HAL_ADC_ConfigChannel+0x2d4>
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	0e9b      	lsrs	r3, r3, #26
 80052d6:	f003 031f 	and.w	r3, r3, #31
 80052da:	e01e      	b.n	800531a <HAL_ADC_ConfigChannel+0x306>
 80052dc:	47ff0000 	.word	0x47ff0000
 80052e0:	58026000 	.word	0x58026000
 80052e4:	5c001000 	.word	0x5c001000
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052f4:	fa93 f3a3 	rbit	r3, r3
 80052f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80052fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005300:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8005304:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 800530c:	2320      	movs	r3, #32
 800530e:	e004      	b.n	800531a <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8005310:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005314:	fab3 f383 	clz	r3, r3
 8005318:	b2db      	uxtb	r3, r3
 800531a:	429a      	cmp	r2, r3
 800531c:	d106      	bne.n	800532c <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2200      	movs	r2, #0
 8005324:	2100      	movs	r1, #0
 8005326:	4618      	mov	r0, r3
 8005328:	f7ff f87c 	bl	8004424 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2101      	movs	r1, #1
 8005332:	4618      	mov	r0, r3
 8005334:	f7fe ffe0 	bl	80042f8 <LL_ADC_GetOffsetChannel>
 8005338:	4603      	mov	r3, r0
 800533a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10a      	bne.n	8005358 <HAL_ADC_ConfigChannel+0x344>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2101      	movs	r1, #1
 8005348:	4618      	mov	r0, r3
 800534a:	f7fe ffd5 	bl	80042f8 <LL_ADC_GetOffsetChannel>
 800534e:	4603      	mov	r3, r0
 8005350:	0e9b      	lsrs	r3, r3, #26
 8005352:	f003 021f 	and.w	r2, r3, #31
 8005356:	e01e      	b.n	8005396 <HAL_ADC_ConfigChannel+0x382>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2101      	movs	r1, #1
 800535e:	4618      	mov	r0, r3
 8005360:	f7fe ffca 	bl	80042f8 <LL_ADC_GetOffsetChannel>
 8005364:	4603      	mov	r3, r0
 8005366:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800536a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800536e:	fa93 f3a3 	rbit	r3, r3
 8005372:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8005376:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800537a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800537e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8005386:	2320      	movs	r3, #32
 8005388:	e004      	b.n	8005394 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800538a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800538e:	fab3 f383 	clz	r3, r3
 8005392:	b2db      	uxtb	r3, r3
 8005394:	461a      	mov	r2, r3
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d105      	bne.n	80053ae <HAL_ADC_ConfigChannel+0x39a>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	0e9b      	lsrs	r3, r3, #26
 80053a8:	f003 031f 	and.w	r3, r3, #31
 80053ac:	e018      	b.n	80053e0 <HAL_ADC_ConfigChannel+0x3cc>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80053ba:	fa93 f3a3 	rbit	r3, r3
 80053be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80053c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80053c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80053ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80053d2:	2320      	movs	r3, #32
 80053d4:	e004      	b.n	80053e0 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80053d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053da:	fab3 f383 	clz	r3, r3
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d106      	bne.n	80053f2 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2200      	movs	r2, #0
 80053ea:	2101      	movs	r1, #1
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7ff f819 	bl	8004424 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2102      	movs	r1, #2
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7fe ff7d 	bl	80042f8 <LL_ADC_GetOffsetChannel>
 80053fe:	4603      	mov	r3, r0
 8005400:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10a      	bne.n	800541e <HAL_ADC_ConfigChannel+0x40a>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2102      	movs	r1, #2
 800540e:	4618      	mov	r0, r3
 8005410:	f7fe ff72 	bl	80042f8 <LL_ADC_GetOffsetChannel>
 8005414:	4603      	mov	r3, r0
 8005416:	0e9b      	lsrs	r3, r3, #26
 8005418:	f003 021f 	and.w	r2, r3, #31
 800541c:	e01e      	b.n	800545c <HAL_ADC_ConfigChannel+0x448>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2102      	movs	r1, #2
 8005424:	4618      	mov	r0, r3
 8005426:	f7fe ff67 	bl	80042f8 <LL_ADC_GetOffsetChannel>
 800542a:	4603      	mov	r3, r0
 800542c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005430:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005434:	fa93 f3a3 	rbit	r3, r3
 8005438:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800543c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005440:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8005444:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 800544c:	2320      	movs	r3, #32
 800544e:	e004      	b.n	800545a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8005450:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005454:	fab3 f383 	clz	r3, r3
 8005458:	b2db      	uxtb	r3, r3
 800545a:	461a      	mov	r2, r3
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005464:	2b00      	cmp	r3, #0
 8005466:	d105      	bne.n	8005474 <HAL_ADC_ConfigChannel+0x460>
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	0e9b      	lsrs	r3, r3, #26
 800546e:	f003 031f 	and.w	r3, r3, #31
 8005472:	e014      	b.n	800549e <HAL_ADC_ConfigChannel+0x48a>
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800547a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800547c:	fa93 f3a3 	rbit	r3, r3
 8005480:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8005482:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005484:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8005488:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800548c:	2b00      	cmp	r3, #0
 800548e:	d101      	bne.n	8005494 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8005490:	2320      	movs	r3, #32
 8005492:	e004      	b.n	800549e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8005494:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005498:	fab3 f383 	clz	r3, r3
 800549c:	b2db      	uxtb	r3, r3
 800549e:	429a      	cmp	r2, r3
 80054a0:	d106      	bne.n	80054b0 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2200      	movs	r2, #0
 80054a8:	2102      	movs	r1, #2
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7fe ffba 	bl	8004424 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2103      	movs	r1, #3
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fe ff1e 	bl	80042f8 <LL_ADC_GetOffsetChannel>
 80054bc:	4603      	mov	r3, r0
 80054be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10a      	bne.n	80054dc <HAL_ADC_ConfigChannel+0x4c8>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2103      	movs	r1, #3
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7fe ff13 	bl	80042f8 <LL_ADC_GetOffsetChannel>
 80054d2:	4603      	mov	r3, r0
 80054d4:	0e9b      	lsrs	r3, r3, #26
 80054d6:	f003 021f 	and.w	r2, r3, #31
 80054da:	e017      	b.n	800550c <HAL_ADC_ConfigChannel+0x4f8>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2103      	movs	r1, #3
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7fe ff08 	bl	80042f8 <LL_ADC_GetOffsetChannel>
 80054e8:	4603      	mov	r3, r0
 80054ea:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054ee:	fa93 f3a3 	rbit	r3, r3
 80054f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80054f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80054f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80054fe:	2320      	movs	r3, #32
 8005500:	e003      	b.n	800550a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8005502:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005504:	fab3 f383 	clz	r3, r3
 8005508:	b2db      	uxtb	r3, r3
 800550a:	461a      	mov	r2, r3
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005514:	2b00      	cmp	r3, #0
 8005516:	d105      	bne.n	8005524 <HAL_ADC_ConfigChannel+0x510>
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	0e9b      	lsrs	r3, r3, #26
 800551e:	f003 031f 	and.w	r3, r3, #31
 8005522:	e011      	b.n	8005548 <HAL_ADC_ConfigChannel+0x534>
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800552a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800552c:	fa93 f3a3 	rbit	r3, r3
 8005530:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8005532:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005534:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8005536:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 800553c:	2320      	movs	r3, #32
 800553e:	e003      	b.n	8005548 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8005540:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005542:	fab3 f383 	clz	r3, r3
 8005546:	b2db      	uxtb	r3, r3
 8005548:	429a      	cmp	r2, r3
 800554a:	d14f      	bne.n	80055ec <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2200      	movs	r2, #0
 8005552:	2103      	movs	r1, #3
 8005554:	4618      	mov	r0, r3
 8005556:	f7fe ff65 	bl	8004424 <LL_ADC_SetOffsetState>
 800555a:	e047      	b.n	80055ec <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005562:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	069b      	lsls	r3, r3, #26
 800556c:	429a      	cmp	r2, r3
 800556e:	d107      	bne.n	8005580 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800557e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005586:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	069b      	lsls	r3, r3, #26
 8005590:	429a      	cmp	r2, r3
 8005592:	d107      	bne.n	80055a4 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80055a2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	069b      	lsls	r3, r3, #26
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d107      	bne.n	80055c8 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80055c6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	069b      	lsls	r3, r3, #26
 80055d8:	429a      	cmp	r2, r3
 80055da:	d107      	bne.n	80055ec <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80055ea:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7ff f87d 	bl	80046f0 <LL_ADC_IsEnabled>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f040 8219 	bne.w	8005a30 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6818      	ldr	r0, [r3, #0]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	6819      	ldr	r1, [r3, #0]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	461a      	mov	r2, r3
 800560c:	f7fe ff9e 	bl	800454c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	4aa1      	ldr	r2, [pc, #644]	; (800589c <HAL_ADC_ConfigChannel+0x888>)
 8005616:	4293      	cmp	r3, r2
 8005618:	f040 812e 	bne.w	8005878 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10b      	bne.n	8005644 <HAL_ADC_ConfigChannel+0x630>
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	0e9b      	lsrs	r3, r3, #26
 8005632:	3301      	adds	r3, #1
 8005634:	f003 031f 	and.w	r3, r3, #31
 8005638:	2b09      	cmp	r3, #9
 800563a:	bf94      	ite	ls
 800563c:	2301      	movls	r3, #1
 800563e:	2300      	movhi	r3, #0
 8005640:	b2db      	uxtb	r3, r3
 8005642:	e019      	b.n	8005678 <HAL_ADC_ConfigChannel+0x664>
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800564a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800564c:	fa93 f3a3 	rbit	r3, r3
 8005650:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005654:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 800565c:	2320      	movs	r3, #32
 800565e:	e003      	b.n	8005668 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8005660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005662:	fab3 f383 	clz	r3, r3
 8005666:	b2db      	uxtb	r3, r3
 8005668:	3301      	adds	r3, #1
 800566a:	f003 031f 	and.w	r3, r3, #31
 800566e:	2b09      	cmp	r3, #9
 8005670:	bf94      	ite	ls
 8005672:	2301      	movls	r3, #1
 8005674:	2300      	movhi	r3, #0
 8005676:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005678:	2b00      	cmp	r3, #0
 800567a:	d079      	beq.n	8005770 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005684:	2b00      	cmp	r3, #0
 8005686:	d107      	bne.n	8005698 <HAL_ADC_ConfigChannel+0x684>
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	0e9b      	lsrs	r3, r3, #26
 800568e:	3301      	adds	r3, #1
 8005690:	069b      	lsls	r3, r3, #26
 8005692:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005696:	e015      	b.n	80056c4 <HAL_ADC_ConfigChannel+0x6b0>
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800569e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056a0:	fa93 f3a3 	rbit	r3, r3
 80056a4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80056a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056a8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80056aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80056b0:	2320      	movs	r3, #32
 80056b2:	e003      	b.n	80056bc <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80056b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056b6:	fab3 f383 	clz	r3, r3
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	3301      	adds	r3, #1
 80056be:	069b      	lsls	r3, r3, #26
 80056c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d109      	bne.n	80056e4 <HAL_ADC_ConfigChannel+0x6d0>
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	0e9b      	lsrs	r3, r3, #26
 80056d6:	3301      	adds	r3, #1
 80056d8:	f003 031f 	and.w	r3, r3, #31
 80056dc:	2101      	movs	r1, #1
 80056de:	fa01 f303 	lsl.w	r3, r1, r3
 80056e2:	e017      	b.n	8005714 <HAL_ADC_ConfigChannel+0x700>
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ec:	fa93 f3a3 	rbit	r3, r3
 80056f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80056f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80056f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80056fc:	2320      	movs	r3, #32
 80056fe:	e003      	b.n	8005708 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8005700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005702:	fab3 f383 	clz	r3, r3
 8005706:	b2db      	uxtb	r3, r3
 8005708:	3301      	adds	r3, #1
 800570a:	f003 031f 	and.w	r3, r3, #31
 800570e:	2101      	movs	r1, #1
 8005710:	fa01 f303 	lsl.w	r3, r1, r3
 8005714:	ea42 0103 	orr.w	r1, r2, r3
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10a      	bne.n	800573a <HAL_ADC_ConfigChannel+0x726>
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	0e9b      	lsrs	r3, r3, #26
 800572a:	3301      	adds	r3, #1
 800572c:	f003 021f 	and.w	r2, r3, #31
 8005730:	4613      	mov	r3, r2
 8005732:	005b      	lsls	r3, r3, #1
 8005734:	4413      	add	r3, r2
 8005736:	051b      	lsls	r3, r3, #20
 8005738:	e018      	b.n	800576c <HAL_ADC_ConfigChannel+0x758>
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005742:	fa93 f3a3 	rbit	r3, r3
 8005746:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800574c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8005752:	2320      	movs	r3, #32
 8005754:	e003      	b.n	800575e <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8005756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005758:	fab3 f383 	clz	r3, r3
 800575c:	b2db      	uxtb	r3, r3
 800575e:	3301      	adds	r3, #1
 8005760:	f003 021f 	and.w	r2, r3, #31
 8005764:	4613      	mov	r3, r2
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	4413      	add	r3, r2
 800576a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800576c:	430b      	orrs	r3, r1
 800576e:	e07e      	b.n	800586e <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005778:	2b00      	cmp	r3, #0
 800577a:	d107      	bne.n	800578c <HAL_ADC_ConfigChannel+0x778>
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	0e9b      	lsrs	r3, r3, #26
 8005782:	3301      	adds	r3, #1
 8005784:	069b      	lsls	r3, r3, #26
 8005786:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800578a:	e015      	b.n	80057b8 <HAL_ADC_ConfigChannel+0x7a4>
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005794:	fa93 f3a3 	rbit	r3, r3
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800579e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80057a4:	2320      	movs	r3, #32
 80057a6:	e003      	b.n	80057b0 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80057a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057aa:	fab3 f383 	clz	r3, r3
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	3301      	adds	r3, #1
 80057b2:	069b      	lsls	r3, r3, #26
 80057b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d109      	bne.n	80057d8 <HAL_ADC_ConfigChannel+0x7c4>
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	0e9b      	lsrs	r3, r3, #26
 80057ca:	3301      	adds	r3, #1
 80057cc:	f003 031f 	and.w	r3, r3, #31
 80057d0:	2101      	movs	r1, #1
 80057d2:	fa01 f303 	lsl.w	r3, r1, r3
 80057d6:	e017      	b.n	8005808 <HAL_ADC_ConfigChannel+0x7f4>
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	fa93 f3a3 	rbit	r3, r3
 80057e4:	61bb      	str	r3, [r7, #24]
  return result;
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80057f0:	2320      	movs	r3, #32
 80057f2:	e003      	b.n	80057fc <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	fab3 f383 	clz	r3, r3
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	3301      	adds	r3, #1
 80057fe:	f003 031f 	and.w	r3, r3, #31
 8005802:	2101      	movs	r1, #1
 8005804:	fa01 f303 	lsl.w	r3, r1, r3
 8005808:	ea42 0103 	orr.w	r1, r2, r3
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10d      	bne.n	8005834 <HAL_ADC_ConfigChannel+0x820>
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	0e9b      	lsrs	r3, r3, #26
 800581e:	3301      	adds	r3, #1
 8005820:	f003 021f 	and.w	r2, r3, #31
 8005824:	4613      	mov	r3, r2
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	4413      	add	r3, r2
 800582a:	3b1e      	subs	r3, #30
 800582c:	051b      	lsls	r3, r3, #20
 800582e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005832:	e01b      	b.n	800586c <HAL_ADC_ConfigChannel+0x858>
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	fa93 f3a3 	rbit	r3, r3
 8005840:	60fb      	str	r3, [r7, #12]
  return result;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 800584c:	2320      	movs	r3, #32
 800584e:	e003      	b.n	8005858 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	fab3 f383 	clz	r3, r3
 8005856:	b2db      	uxtb	r3, r3
 8005858:	3301      	adds	r3, #1
 800585a:	f003 021f 	and.w	r2, r3, #31
 800585e:	4613      	mov	r3, r2
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	4413      	add	r3, r2
 8005864:	3b1e      	subs	r3, #30
 8005866:	051b      	lsls	r3, r3, #20
 8005868:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800586c:	430b      	orrs	r3, r1
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	6892      	ldr	r2, [r2, #8]
 8005872:	4619      	mov	r1, r3
 8005874:	f7fe fe3f 	bl	80044f6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	f280 80d7 	bge.w	8005a30 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a06      	ldr	r2, [pc, #24]	; (80058a0 <HAL_ADC_ConfigChannel+0x88c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d004      	beq.n	8005896 <HAL_ADC_ConfigChannel+0x882>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a04      	ldr	r2, [pc, #16]	; (80058a4 <HAL_ADC_ConfigChannel+0x890>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d10a      	bne.n	80058ac <HAL_ADC_ConfigChannel+0x898>
 8005896:	4b04      	ldr	r3, [pc, #16]	; (80058a8 <HAL_ADC_ConfigChannel+0x894>)
 8005898:	e009      	b.n	80058ae <HAL_ADC_ConfigChannel+0x89a>
 800589a:	bf00      	nop
 800589c:	47ff0000 	.word	0x47ff0000
 80058a0:	40022000 	.word	0x40022000
 80058a4:	40022100 	.word	0x40022100
 80058a8:	40022300 	.word	0x40022300
 80058ac:	4b65      	ldr	r3, [pc, #404]	; (8005a44 <HAL_ADC_ConfigChannel+0xa30>)
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fe fce2 	bl	8004278 <LL_ADC_GetCommonPathInternalCh>
 80058b4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a62      	ldr	r2, [pc, #392]	; (8005a48 <HAL_ADC_ConfigChannel+0xa34>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d004      	beq.n	80058cc <HAL_ADC_ConfigChannel+0x8b8>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a61      	ldr	r2, [pc, #388]	; (8005a4c <HAL_ADC_ConfigChannel+0xa38>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d10e      	bne.n	80058ea <HAL_ADC_ConfigChannel+0x8d6>
 80058cc:	485e      	ldr	r0, [pc, #376]	; (8005a48 <HAL_ADC_ConfigChannel+0xa34>)
 80058ce:	f7fe ff0f 	bl	80046f0 <LL_ADC_IsEnabled>
 80058d2:	4604      	mov	r4, r0
 80058d4:	485d      	ldr	r0, [pc, #372]	; (8005a4c <HAL_ADC_ConfigChannel+0xa38>)
 80058d6:	f7fe ff0b 	bl	80046f0 <LL_ADC_IsEnabled>
 80058da:	4603      	mov	r3, r0
 80058dc:	4323      	orrs	r3, r4
 80058de:	2b00      	cmp	r3, #0
 80058e0:	bf0c      	ite	eq
 80058e2:	2301      	moveq	r3, #1
 80058e4:	2300      	movne	r3, #0
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	e008      	b.n	80058fc <HAL_ADC_ConfigChannel+0x8e8>
 80058ea:	4859      	ldr	r0, [pc, #356]	; (8005a50 <HAL_ADC_ConfigChannel+0xa3c>)
 80058ec:	f7fe ff00 	bl	80046f0 <LL_ADC_IsEnabled>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	bf0c      	ite	eq
 80058f6:	2301      	moveq	r3, #1
 80058f8:	2300      	movne	r3, #0
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f000 8084 	beq.w	8005a0a <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a53      	ldr	r2, [pc, #332]	; (8005a54 <HAL_ADC_ConfigChannel+0xa40>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d132      	bne.n	8005972 <HAL_ADC_ConfigChannel+0x95e>
 800590c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005910:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d12c      	bne.n	8005972 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a4c      	ldr	r2, [pc, #304]	; (8005a50 <HAL_ADC_ConfigChannel+0xa3c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	f040 8086 	bne.w	8005a30 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a47      	ldr	r2, [pc, #284]	; (8005a48 <HAL_ADC_ConfigChannel+0xa34>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d004      	beq.n	8005938 <HAL_ADC_ConfigChannel+0x924>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a46      	ldr	r2, [pc, #280]	; (8005a4c <HAL_ADC_ConfigChannel+0xa38>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d101      	bne.n	800593c <HAL_ADC_ConfigChannel+0x928>
 8005938:	4a47      	ldr	r2, [pc, #284]	; (8005a58 <HAL_ADC_ConfigChannel+0xa44>)
 800593a:	e000      	b.n	800593e <HAL_ADC_ConfigChannel+0x92a>
 800593c:	4a41      	ldr	r2, [pc, #260]	; (8005a44 <HAL_ADC_ConfigChannel+0xa30>)
 800593e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005942:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005946:	4619      	mov	r1, r3
 8005948:	4610      	mov	r0, r2
 800594a:	f7fe fc82 	bl	8004252 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800594e:	4b43      	ldr	r3, [pc, #268]	; (8005a5c <HAL_ADC_ConfigChannel+0xa48>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	099b      	lsrs	r3, r3, #6
 8005954:	4a42      	ldr	r2, [pc, #264]	; (8005a60 <HAL_ADC_ConfigChannel+0xa4c>)
 8005956:	fba2 2303 	umull	r2, r3, r2, r3
 800595a:	099b      	lsrs	r3, r3, #6
 800595c:	3301      	adds	r3, #1
 800595e:	005b      	lsls	r3, r3, #1
 8005960:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005962:	e002      	b.n	800596a <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	3b01      	subs	r3, #1
 8005968:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1f9      	bne.n	8005964 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005970:	e05e      	b.n	8005a30 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a3b      	ldr	r2, [pc, #236]	; (8005a64 <HAL_ADC_ConfigChannel+0xa50>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d120      	bne.n	80059be <HAL_ADC_ConfigChannel+0x9aa>
 800597c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d11a      	bne.n	80059be <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a30      	ldr	r2, [pc, #192]	; (8005a50 <HAL_ADC_ConfigChannel+0xa3c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d14e      	bne.n	8005a30 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a2c      	ldr	r2, [pc, #176]	; (8005a48 <HAL_ADC_ConfigChannel+0xa34>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d004      	beq.n	80059a6 <HAL_ADC_ConfigChannel+0x992>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a2a      	ldr	r2, [pc, #168]	; (8005a4c <HAL_ADC_ConfigChannel+0xa38>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d101      	bne.n	80059aa <HAL_ADC_ConfigChannel+0x996>
 80059a6:	4a2c      	ldr	r2, [pc, #176]	; (8005a58 <HAL_ADC_ConfigChannel+0xa44>)
 80059a8:	e000      	b.n	80059ac <HAL_ADC_ConfigChannel+0x998>
 80059aa:	4a26      	ldr	r2, [pc, #152]	; (8005a44 <HAL_ADC_ConfigChannel+0xa30>)
 80059ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80059b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059b4:	4619      	mov	r1, r3
 80059b6:	4610      	mov	r0, r2
 80059b8:	f7fe fc4b 	bl	8004252 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80059bc:	e038      	b.n	8005a30 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a29      	ldr	r2, [pc, #164]	; (8005a68 <HAL_ADC_ConfigChannel+0xa54>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d133      	bne.n	8005a30 <HAL_ADC_ConfigChannel+0xa1c>
 80059c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80059cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d12d      	bne.n	8005a30 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a1d      	ldr	r2, [pc, #116]	; (8005a50 <HAL_ADC_ConfigChannel+0xa3c>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d128      	bne.n	8005a30 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a19      	ldr	r2, [pc, #100]	; (8005a48 <HAL_ADC_ConfigChannel+0xa34>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d004      	beq.n	80059f2 <HAL_ADC_ConfigChannel+0x9de>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a17      	ldr	r2, [pc, #92]	; (8005a4c <HAL_ADC_ConfigChannel+0xa38>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d101      	bne.n	80059f6 <HAL_ADC_ConfigChannel+0x9e2>
 80059f2:	4a19      	ldr	r2, [pc, #100]	; (8005a58 <HAL_ADC_ConfigChannel+0xa44>)
 80059f4:	e000      	b.n	80059f8 <HAL_ADC_ConfigChannel+0x9e4>
 80059f6:	4a13      	ldr	r2, [pc, #76]	; (8005a44 <HAL_ADC_ConfigChannel+0xa30>)
 80059f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80059fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a00:	4619      	mov	r1, r3
 8005a02:	4610      	mov	r0, r2
 8005a04:	f7fe fc25 	bl	8004252 <LL_ADC_SetCommonPathInternalCh>
 8005a08:	e012      	b.n	8005a30 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a0e:	f043 0220 	orr.w	r2, r3, #32
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8005a1c:	e008      	b.n	8005a30 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a22:	f043 0220 	orr.w	r2, r3, #32
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005a38:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	37e4      	adds	r7, #228	; 0xe4
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd90      	pop	{r4, r7, pc}
 8005a44:	58026300 	.word	0x58026300
 8005a48:	40022000 	.word	0x40022000
 8005a4c:	40022100 	.word	0x40022100
 8005a50:	58026000 	.word	0x58026000
 8005a54:	c7520000 	.word	0xc7520000
 8005a58:	40022300 	.word	0x40022300
 8005a5c:	24000000 	.word	0x24000000
 8005a60:	053e2d63 	.word	0x053e2d63
 8005a64:	c3210000 	.word	0xc3210000
 8005a68:	cb840000 	.word	0xcb840000

08005a6c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b088      	sub	sp, #32
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8005a76:	2300      	movs	r3, #0
 8005a78:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fe fe82 	bl	800478c <LL_ADC_REG_IsConversionOngoing>
 8005a88:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fe fea4 	bl	80047dc <LL_ADC_INJ_IsConversionOngoing>
 8005a94:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d103      	bne.n	8005aa4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f000 8098 	beq.w	8005bd4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d02a      	beq.n	8005b08 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	7e5b      	ldrb	r3, [r3, #25]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d126      	bne.n	8005b08 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	7e1b      	ldrb	r3, [r3, #24]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d122      	bne.n	8005b08 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005ac6:	e014      	b.n	8005af2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	4a45      	ldr	r2, [pc, #276]	; (8005be0 <ADC_ConversionStop+0x174>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d90d      	bls.n	8005aec <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad4:	f043 0210 	orr.w	r2, r3, #16
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ae0:	f043 0201 	orr.w	r2, r3, #1
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e074      	b.n	8005bd6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	3301      	adds	r3, #1
 8005af0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afc:	2b40      	cmp	r3, #64	; 0x40
 8005afe:	d1e3      	bne.n	8005ac8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2240      	movs	r2, #64	; 0x40
 8005b06:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d014      	beq.n	8005b38 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fe fe3a 	bl	800478c <LL_ADC_REG_IsConversionOngoing>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00c      	beq.n	8005b38 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fe fdf7 	bl	8004716 <LL_ADC_IsDisableOngoing>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d104      	bne.n	8005b38 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7fe fe16 	bl	8004764 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d014      	beq.n	8005b68 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fe fe4a 	bl	80047dc <LL_ADC_INJ_IsConversionOngoing>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00c      	beq.n	8005b68 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7fe fddf 	bl	8004716 <LL_ADC_IsDisableOngoing>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d104      	bne.n	8005b68 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fe fe26 	bl	80047b4 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d005      	beq.n	8005b7a <ADC_ConversionStop+0x10e>
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	2b03      	cmp	r3, #3
 8005b72:	d105      	bne.n	8005b80 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005b74:	230c      	movs	r3, #12
 8005b76:	617b      	str	r3, [r7, #20]
        break;
 8005b78:	e005      	b.n	8005b86 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005b7a:	2308      	movs	r3, #8
 8005b7c:	617b      	str	r3, [r7, #20]
        break;
 8005b7e:	e002      	b.n	8005b86 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005b80:	2304      	movs	r3, #4
 8005b82:	617b      	str	r3, [r7, #20]
        break;
 8005b84:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005b86:	f7fe fb0b 	bl	80041a0 <HAL_GetTick>
 8005b8a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005b8c:	e01b      	b.n	8005bc6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005b8e:	f7fe fb07 	bl	80041a0 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b05      	cmp	r3, #5
 8005b9a:	d914      	bls.n	8005bc6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689a      	ldr	r2, [r3, #8]
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00d      	beq.n	8005bc6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bae:	f043 0210 	orr.w	r2, r3, #16
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bba:	f043 0201 	orr.w	r2, r3, #1
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e007      	b.n	8005bd6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689a      	ldr	r2, [r3, #8]
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	4013      	ands	r3, r2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1dc      	bne.n	8005b8e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3720      	adds	r7, #32
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	000cdbff 	.word	0x000cdbff

08005be4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7fe fd7d 	bl	80046f0 <LL_ADC_IsEnabled>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d16e      	bne.n	8005cda <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689a      	ldr	r2, [r3, #8]
 8005c02:	4b38      	ldr	r3, [pc, #224]	; (8005ce4 <ADC_Enable+0x100>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00d      	beq.n	8005c26 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c0e:	f043 0210 	orr.w	r2, r3, #16
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c1a:	f043 0201 	orr.w	r2, r3, #1
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e05a      	b.n	8005cdc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7fe fd38 	bl	80046a0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005c30:	f7fe fab6 	bl	80041a0 <HAL_GetTick>
 8005c34:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a2b      	ldr	r2, [pc, #172]	; (8005ce8 <ADC_Enable+0x104>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d004      	beq.n	8005c4a <ADC_Enable+0x66>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a29      	ldr	r2, [pc, #164]	; (8005cec <ADC_Enable+0x108>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d101      	bne.n	8005c4e <ADC_Enable+0x6a>
 8005c4a:	4b29      	ldr	r3, [pc, #164]	; (8005cf0 <ADC_Enable+0x10c>)
 8005c4c:	e000      	b.n	8005c50 <ADC_Enable+0x6c>
 8005c4e:	4b29      	ldr	r3, [pc, #164]	; (8005cf4 <ADC_Enable+0x110>)
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7fe fcbb 	bl	80045cc <LL_ADC_GetMultimode>
 8005c56:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a23      	ldr	r2, [pc, #140]	; (8005cec <ADC_Enable+0x108>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d002      	beq.n	8005c68 <ADC_Enable+0x84>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	e000      	b.n	8005c6a <ADC_Enable+0x86>
 8005c68:	4b1f      	ldr	r3, [pc, #124]	; (8005ce8 <ADC_Enable+0x104>)
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6812      	ldr	r2, [r2, #0]
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d02c      	beq.n	8005ccc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d130      	bne.n	8005cda <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005c78:	e028      	b.n	8005ccc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fe fd36 	bl	80046f0 <LL_ADC_IsEnabled>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d104      	bne.n	8005c94 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fe fd06 	bl	80046a0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005c94:	f7fe fa84 	bl	80041a0 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d914      	bls.n	8005ccc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d00d      	beq.n	8005ccc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cb4:	f043 0210 	orr.w	r2, r3, #16
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cc0:	f043 0201 	orr.w	r2, r3, #1
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e007      	b.n	8005cdc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0301 	and.w	r3, r3, #1
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d1cf      	bne.n	8005c7a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	8000003f 	.word	0x8000003f
 8005ce8:	40022000 	.word	0x40022000
 8005cec:	40022100 	.word	0x40022100
 8005cf0:	40022300 	.word	0x40022300
 8005cf4:	58026300 	.word	0x58026300

08005cf8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7fe fd06 	bl	8004716 <LL_ADC_IsDisableOngoing>
 8005d0a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7fe fced 	bl	80046f0 <LL_ADC_IsEnabled>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d047      	beq.n	8005dac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d144      	bne.n	8005dac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f003 030d 	and.w	r3, r3, #13
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d10c      	bne.n	8005d4a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7fe fcc7 	bl	80046c8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2203      	movs	r2, #3
 8005d40:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005d42:	f7fe fa2d 	bl	80041a0 <HAL_GetTick>
 8005d46:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005d48:	e029      	b.n	8005d9e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d4e:	f043 0210 	orr.w	r2, r3, #16
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d5a:	f043 0201 	orr.w	r2, r3, #1
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e023      	b.n	8005dae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005d66:	f7fe fa1b 	bl	80041a0 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d914      	bls.n	8005d9e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 0301 	and.w	r3, r3, #1
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00d      	beq.n	8005d9e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d86:	f043 0210 	orr.w	r2, r3, #16
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d92:	f043 0201 	orr.w	r2, r3, #1
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e007      	b.n	8005dae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1dc      	bne.n	8005d66 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
	...

08005db8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a6c      	ldr	r2, [pc, #432]	; (8005f78 <ADC_ConfigureBoostMode+0x1c0>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d004      	beq.n	8005dd4 <ADC_ConfigureBoostMode+0x1c>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a6b      	ldr	r2, [pc, #428]	; (8005f7c <ADC_ConfigureBoostMode+0x1c4>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d109      	bne.n	8005de8 <ADC_ConfigureBoostMode+0x30>
 8005dd4:	4b6a      	ldr	r3, [pc, #424]	; (8005f80 <ADC_ConfigureBoostMode+0x1c8>)
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	bf14      	ite	ne
 8005de0:	2301      	movne	r3, #1
 8005de2:	2300      	moveq	r3, #0
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	e008      	b.n	8005dfa <ADC_ConfigureBoostMode+0x42>
 8005de8:	4b66      	ldr	r3, [pc, #408]	; (8005f84 <ADC_ConfigureBoostMode+0x1cc>)
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	bf14      	ite	ne
 8005df4:	2301      	movne	r3, #1
 8005df6:	2300      	moveq	r3, #0
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d01c      	beq.n	8005e38 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005dfe:	f005 fcab 	bl	800b758 <HAL_RCC_GetHCLKFreq>
 8005e02:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e0c:	d010      	beq.n	8005e30 <ADC_ConfigureBoostMode+0x78>
 8005e0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e12:	d873      	bhi.n	8005efc <ADC_ConfigureBoostMode+0x144>
 8005e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e18:	d002      	beq.n	8005e20 <ADC_ConfigureBoostMode+0x68>
 8005e1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e1e:	d16d      	bne.n	8005efc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	0c1b      	lsrs	r3, r3, #16
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2c:	60fb      	str	r3, [r7, #12]
        break;
 8005e2e:	e068      	b.n	8005f02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	089b      	lsrs	r3, r3, #2
 8005e34:	60fb      	str	r3, [r7, #12]
        break;
 8005e36:	e064      	b.n	8005f02 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005e38:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005e3c:	f04f 0100 	mov.w	r1, #0
 8005e40:	f006 fe86 	bl	800cb50 <HAL_RCCEx_GetPeriphCLKFreq>
 8005e44:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005e4e:	d051      	beq.n	8005ef4 <ADC_ConfigureBoostMode+0x13c>
 8005e50:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005e54:	d854      	bhi.n	8005f00 <ADC_ConfigureBoostMode+0x148>
 8005e56:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005e5a:	d047      	beq.n	8005eec <ADC_ConfigureBoostMode+0x134>
 8005e5c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005e60:	d84e      	bhi.n	8005f00 <ADC_ConfigureBoostMode+0x148>
 8005e62:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005e66:	d03d      	beq.n	8005ee4 <ADC_ConfigureBoostMode+0x12c>
 8005e68:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005e6c:	d848      	bhi.n	8005f00 <ADC_ConfigureBoostMode+0x148>
 8005e6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e72:	d033      	beq.n	8005edc <ADC_ConfigureBoostMode+0x124>
 8005e74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e78:	d842      	bhi.n	8005f00 <ADC_ConfigureBoostMode+0x148>
 8005e7a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005e7e:	d029      	beq.n	8005ed4 <ADC_ConfigureBoostMode+0x11c>
 8005e80:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005e84:	d83c      	bhi.n	8005f00 <ADC_ConfigureBoostMode+0x148>
 8005e86:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005e8a:	d01a      	beq.n	8005ec2 <ADC_ConfigureBoostMode+0x10a>
 8005e8c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005e90:	d836      	bhi.n	8005f00 <ADC_ConfigureBoostMode+0x148>
 8005e92:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005e96:	d014      	beq.n	8005ec2 <ADC_ConfigureBoostMode+0x10a>
 8005e98:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005e9c:	d830      	bhi.n	8005f00 <ADC_ConfigureBoostMode+0x148>
 8005e9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ea2:	d00e      	beq.n	8005ec2 <ADC_ConfigureBoostMode+0x10a>
 8005ea4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ea8:	d82a      	bhi.n	8005f00 <ADC_ConfigureBoostMode+0x148>
 8005eaa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005eae:	d008      	beq.n	8005ec2 <ADC_ConfigureBoostMode+0x10a>
 8005eb0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005eb4:	d824      	bhi.n	8005f00 <ADC_ConfigureBoostMode+0x148>
 8005eb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005eba:	d002      	beq.n	8005ec2 <ADC_ConfigureBoostMode+0x10a>
 8005ebc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005ec0:	d11e      	bne.n	8005f00 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	0c9b      	lsrs	r3, r3, #18
 8005ec8:	005b      	lsls	r3, r3, #1
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed0:	60fb      	str	r3, [r7, #12]
        break;
 8005ed2:	e016      	b.n	8005f02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	091b      	lsrs	r3, r3, #4
 8005ed8:	60fb      	str	r3, [r7, #12]
        break;
 8005eda:	e012      	b.n	8005f02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	095b      	lsrs	r3, r3, #5
 8005ee0:	60fb      	str	r3, [r7, #12]
        break;
 8005ee2:	e00e      	b.n	8005f02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	099b      	lsrs	r3, r3, #6
 8005ee8:	60fb      	str	r3, [r7, #12]
        break;
 8005eea:	e00a      	b.n	8005f02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	09db      	lsrs	r3, r3, #7
 8005ef0:	60fb      	str	r3, [r7, #12]
        break;
 8005ef2:	e006      	b.n	8005f02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	0a1b      	lsrs	r3, r3, #8
 8005ef8:	60fb      	str	r3, [r7, #12]
        break;
 8005efa:	e002      	b.n	8005f02 <ADC_ConfigureBoostMode+0x14a>
        break;
 8005efc:	bf00      	nop
 8005efe:	e000      	b.n	8005f02 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005f00:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	085b      	lsrs	r3, r3, #1
 8005f06:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	4a1f      	ldr	r2, [pc, #124]	; (8005f88 <ADC_ConfigureBoostMode+0x1d0>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d808      	bhi.n	8005f22 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689a      	ldr	r2, [r3, #8]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005f1e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005f20:	e025      	b.n	8005f6e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4a19      	ldr	r2, [pc, #100]	; (8005f8c <ADC_ConfigureBoostMode+0x1d4>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d80a      	bhi.n	8005f40 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f3c:	609a      	str	r2, [r3, #8]
}
 8005f3e:	e016      	b.n	8005f6e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4a13      	ldr	r2, [pc, #76]	; (8005f90 <ADC_ConfigureBoostMode+0x1d8>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d80a      	bhi.n	8005f5e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f5a:	609a      	str	r2, [r3, #8]
}
 8005f5c:	e007      	b.n	8005f6e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689a      	ldr	r2, [r3, #8]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005f6c:	609a      	str	r2, [r3, #8]
}
 8005f6e:	bf00      	nop
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	40022000 	.word	0x40022000
 8005f7c:	40022100 	.word	0x40022100
 8005f80:	40022300 	.word	0x40022300
 8005f84:	58026300 	.word	0x58026300
 8005f88:	005f5e10 	.word	0x005f5e10
 8005f8c:	00bebc20 	.word	0x00bebc20
 8005f90:	017d7840 	.word	0x017d7840

08005f94 <LL_ADC_IsEnabled>:
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d101      	bne.n	8005fac <LL_ADC_IsEnabled+0x18>
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e000      	b.n	8005fae <LL_ADC_IsEnabled+0x1a>
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <LL_ADC_REG_IsConversionOngoing>:
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f003 0304 	and.w	r3, r3, #4
 8005fca:	2b04      	cmp	r3, #4
 8005fcc:	d101      	bne.n	8005fd2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e000      	b.n	8005fd4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005fe0:	b590      	push	{r4, r7, lr}
 8005fe2:	b0a3      	sub	sp, #140	; 0x8c
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005fea:	2300      	movs	r3, #0
 8005fec:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d101      	bne.n	8005ffe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	e0c1      	b.n	8006182 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006006:	2300      	movs	r3, #0
 8006008:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800600a:	2300      	movs	r3, #0
 800600c:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a5e      	ldr	r2, [pc, #376]	; (800618c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d102      	bne.n	800601e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006018:	4b5d      	ldr	r3, [pc, #372]	; (8006190 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	e001      	b.n	8006022 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800601e:	2300      	movs	r3, #0
 8006020:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10b      	bne.n	8006040 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800602c:	f043 0220 	orr.w	r2, r3, #32
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e0a0      	b.n	8006182 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4618      	mov	r0, r3
 8006044:	f7ff ffb9 	bl	8005fba <LL_ADC_REG_IsConversionOngoing>
 8006048:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4618      	mov	r0, r3
 8006052:	f7ff ffb2 	bl	8005fba <LL_ADC_REG_IsConversionOngoing>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	f040 8081 	bne.w	8006160 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800605e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006062:	2b00      	cmp	r3, #0
 8006064:	d17c      	bne.n	8006160 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a48      	ldr	r2, [pc, #288]	; (800618c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d004      	beq.n	800607a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a46      	ldr	r2, [pc, #280]	; (8006190 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d101      	bne.n	800607e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800607a:	4b46      	ldr	r3, [pc, #280]	; (8006194 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800607c:	e000      	b.n	8006080 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800607e:	4b46      	ldr	r3, [pc, #280]	; (8006198 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006080:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d039      	beq.n	80060fe <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800608a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	431a      	orrs	r2, r3
 8006098:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800609a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a3a      	ldr	r2, [pc, #232]	; (800618c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d004      	beq.n	80060b0 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a39      	ldr	r2, [pc, #228]	; (8006190 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d10e      	bne.n	80060ce <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80060b0:	4836      	ldr	r0, [pc, #216]	; (800618c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80060b2:	f7ff ff6f 	bl	8005f94 <LL_ADC_IsEnabled>
 80060b6:	4604      	mov	r4, r0
 80060b8:	4835      	ldr	r0, [pc, #212]	; (8006190 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80060ba:	f7ff ff6b 	bl	8005f94 <LL_ADC_IsEnabled>
 80060be:	4603      	mov	r3, r0
 80060c0:	4323      	orrs	r3, r4
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	bf0c      	ite	eq
 80060c6:	2301      	moveq	r3, #1
 80060c8:	2300      	movne	r3, #0
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	e008      	b.n	80060e0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80060ce:	4833      	ldr	r0, [pc, #204]	; (800619c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80060d0:	f7ff ff60 	bl	8005f94 <LL_ADC_IsEnabled>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	bf0c      	ite	eq
 80060da:	2301      	moveq	r3, #1
 80060dc:	2300      	movne	r3, #0
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d047      	beq.n	8006174 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80060e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060e6:	689a      	ldr	r2, [r3, #8]
 80060e8:	4b2d      	ldr	r3, [pc, #180]	; (80061a0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80060ea:	4013      	ands	r3, r2
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	6811      	ldr	r1, [r2, #0]
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	6892      	ldr	r2, [r2, #8]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	431a      	orrs	r2, r3
 80060f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060fa:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80060fc:	e03a      	b.n	8006174 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80060fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006106:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006108:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a1f      	ldr	r2, [pc, #124]	; (800618c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d004      	beq.n	800611e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a1d      	ldr	r2, [pc, #116]	; (8006190 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d10e      	bne.n	800613c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800611e:	481b      	ldr	r0, [pc, #108]	; (800618c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006120:	f7ff ff38 	bl	8005f94 <LL_ADC_IsEnabled>
 8006124:	4604      	mov	r4, r0
 8006126:	481a      	ldr	r0, [pc, #104]	; (8006190 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006128:	f7ff ff34 	bl	8005f94 <LL_ADC_IsEnabled>
 800612c:	4603      	mov	r3, r0
 800612e:	4323      	orrs	r3, r4
 8006130:	2b00      	cmp	r3, #0
 8006132:	bf0c      	ite	eq
 8006134:	2301      	moveq	r3, #1
 8006136:	2300      	movne	r3, #0
 8006138:	b2db      	uxtb	r3, r3
 800613a:	e008      	b.n	800614e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800613c:	4817      	ldr	r0, [pc, #92]	; (800619c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800613e:	f7ff ff29 	bl	8005f94 <LL_ADC_IsEnabled>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	bf0c      	ite	eq
 8006148:	2301      	moveq	r3, #1
 800614a:	2300      	movne	r3, #0
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d010      	beq.n	8006174 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006152:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006154:	689a      	ldr	r2, [r3, #8]
 8006156:	4b12      	ldr	r3, [pc, #72]	; (80061a0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006158:	4013      	ands	r3, r2
 800615a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800615c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800615e:	e009      	b.n	8006174 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006164:	f043 0220 	orr.w	r2, r3, #32
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8006172:	e000      	b.n	8006176 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006174:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800617e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8006182:	4618      	mov	r0, r3
 8006184:	378c      	adds	r7, #140	; 0x8c
 8006186:	46bd      	mov	sp, r7
 8006188:	bd90      	pop	{r4, r7, pc}
 800618a:	bf00      	nop
 800618c:	40022000 	.word	0x40022000
 8006190:	40022100 	.word	0x40022100
 8006194:	40022300 	.word	0x40022300
 8006198:	58026300 	.word	0x58026300
 800619c:	58026000 	.word	0x58026000
 80061a0:	fffff0e0 	.word	0xfffff0e0

080061a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f003 0307 	and.w	r3, r3, #7
 80061b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80061b4:	4b0b      	ldr	r3, [pc, #44]	; (80061e4 <__NVIC_SetPriorityGrouping+0x40>)
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80061c0:	4013      	ands	r3, r2
 80061c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80061cc:	4b06      	ldr	r3, [pc, #24]	; (80061e8 <__NVIC_SetPriorityGrouping+0x44>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061d2:	4a04      	ldr	r2, [pc, #16]	; (80061e4 <__NVIC_SetPriorityGrouping+0x40>)
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	60d3      	str	r3, [r2, #12]
}
 80061d8:	bf00      	nop
 80061da:	3714      	adds	r7, #20
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr
 80061e4:	e000ed00 	.word	0xe000ed00
 80061e8:	05fa0000 	.word	0x05fa0000

080061ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061f0:	4b04      	ldr	r3, [pc, #16]	; (8006204 <__NVIC_GetPriorityGrouping+0x18>)
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	0a1b      	lsrs	r3, r3, #8
 80061f6:	f003 0307 	and.w	r3, r3, #7
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr
 8006204:	e000ed00 	.word	0xe000ed00

08006208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	4603      	mov	r3, r0
 8006210:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006216:	2b00      	cmp	r3, #0
 8006218:	db0b      	blt.n	8006232 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800621a:	88fb      	ldrh	r3, [r7, #6]
 800621c:	f003 021f 	and.w	r2, r3, #31
 8006220:	4907      	ldr	r1, [pc, #28]	; (8006240 <__NVIC_EnableIRQ+0x38>)
 8006222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006226:	095b      	lsrs	r3, r3, #5
 8006228:	2001      	movs	r0, #1
 800622a:	fa00 f202 	lsl.w	r2, r0, r2
 800622e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006232:	bf00      	nop
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	e000e100 	.word	0xe000e100

08006244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	4603      	mov	r3, r0
 800624c:	6039      	str	r1, [r7, #0]
 800624e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006250:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006254:	2b00      	cmp	r3, #0
 8006256:	db0a      	blt.n	800626e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	b2da      	uxtb	r2, r3
 800625c:	490c      	ldr	r1, [pc, #48]	; (8006290 <__NVIC_SetPriority+0x4c>)
 800625e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006262:	0112      	lsls	r2, r2, #4
 8006264:	b2d2      	uxtb	r2, r2
 8006266:	440b      	add	r3, r1
 8006268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800626c:	e00a      	b.n	8006284 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	b2da      	uxtb	r2, r3
 8006272:	4908      	ldr	r1, [pc, #32]	; (8006294 <__NVIC_SetPriority+0x50>)
 8006274:	88fb      	ldrh	r3, [r7, #6]
 8006276:	f003 030f 	and.w	r3, r3, #15
 800627a:	3b04      	subs	r3, #4
 800627c:	0112      	lsls	r2, r2, #4
 800627e:	b2d2      	uxtb	r2, r2
 8006280:	440b      	add	r3, r1
 8006282:	761a      	strb	r2, [r3, #24]
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	e000e100 	.word	0xe000e100
 8006294:	e000ed00 	.word	0xe000ed00

08006298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006298:	b480      	push	{r7}
 800629a:	b089      	sub	sp, #36	; 0x24
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f003 0307 	and.w	r3, r3, #7
 80062aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	f1c3 0307 	rsb	r3, r3, #7
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	bf28      	it	cs
 80062b6:	2304      	movcs	r3, #4
 80062b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	3304      	adds	r3, #4
 80062be:	2b06      	cmp	r3, #6
 80062c0:	d902      	bls.n	80062c8 <NVIC_EncodePriority+0x30>
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	3b03      	subs	r3, #3
 80062c6:	e000      	b.n	80062ca <NVIC_EncodePriority+0x32>
 80062c8:	2300      	movs	r3, #0
 80062ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062cc:	f04f 32ff 	mov.w	r2, #4294967295
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	fa02 f303 	lsl.w	r3, r2, r3
 80062d6:	43da      	mvns	r2, r3
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	401a      	ands	r2, r3
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062e0:	f04f 31ff 	mov.w	r1, #4294967295
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	fa01 f303 	lsl.w	r3, r1, r3
 80062ea:	43d9      	mvns	r1, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062f0:	4313      	orrs	r3, r2
         );
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3724      	adds	r7, #36	; 0x24
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
	...

08006300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	3b01      	subs	r3, #1
 800630c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006310:	d301      	bcc.n	8006316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006312:	2301      	movs	r3, #1
 8006314:	e00f      	b.n	8006336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006316:	4a0a      	ldr	r2, [pc, #40]	; (8006340 <SysTick_Config+0x40>)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	3b01      	subs	r3, #1
 800631c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800631e:	210f      	movs	r1, #15
 8006320:	f04f 30ff 	mov.w	r0, #4294967295
 8006324:	f7ff ff8e 	bl	8006244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006328:	4b05      	ldr	r3, [pc, #20]	; (8006340 <SysTick_Config+0x40>)
 800632a:	2200      	movs	r2, #0
 800632c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800632e:	4b04      	ldr	r3, [pc, #16]	; (8006340 <SysTick_Config+0x40>)
 8006330:	2207      	movs	r2, #7
 8006332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3708      	adds	r7, #8
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	e000e010 	.word	0xe000e010

08006344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f7ff ff29 	bl	80061a4 <__NVIC_SetPriorityGrouping>
}
 8006352:	bf00      	nop
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b086      	sub	sp, #24
 800635e:	af00      	add	r7, sp, #0
 8006360:	4603      	mov	r3, r0
 8006362:	60b9      	str	r1, [r7, #8]
 8006364:	607a      	str	r2, [r7, #4]
 8006366:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006368:	f7ff ff40 	bl	80061ec <__NVIC_GetPriorityGrouping>
 800636c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	68b9      	ldr	r1, [r7, #8]
 8006372:	6978      	ldr	r0, [r7, #20]
 8006374:	f7ff ff90 	bl	8006298 <NVIC_EncodePriority>
 8006378:	4602      	mov	r2, r0
 800637a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800637e:	4611      	mov	r1, r2
 8006380:	4618      	mov	r0, r3
 8006382:	f7ff ff5f 	bl	8006244 <__NVIC_SetPriority>
}
 8006386:	bf00      	nop
 8006388:	3718      	adds	r7, #24
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b082      	sub	sp, #8
 8006392:	af00      	add	r7, sp, #0
 8006394:	4603      	mov	r3, r0
 8006396:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006398:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800639c:	4618      	mov	r0, r3
 800639e:	f7ff ff33 	bl	8006208 <__NVIC_EnableIRQ>
}
 80063a2:	bf00      	nop
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b082      	sub	sp, #8
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f7ff ffa4 	bl	8006300 <SysTick_Config>
 80063b8:	4603      	mov	r3, r0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3708      	adds	r7, #8
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
	...

080063c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80063cc:	f7fd fee8 	bl	80041a0 <HAL_GetTick>
 80063d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e312      	b.n	8006a02 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a66      	ldr	r2, [pc, #408]	; (800657c <HAL_DMA_Init+0x1b8>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d04a      	beq.n	800647c <HAL_DMA_Init+0xb8>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a65      	ldr	r2, [pc, #404]	; (8006580 <HAL_DMA_Init+0x1bc>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d045      	beq.n	800647c <HAL_DMA_Init+0xb8>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a63      	ldr	r2, [pc, #396]	; (8006584 <HAL_DMA_Init+0x1c0>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d040      	beq.n	800647c <HAL_DMA_Init+0xb8>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a62      	ldr	r2, [pc, #392]	; (8006588 <HAL_DMA_Init+0x1c4>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d03b      	beq.n	800647c <HAL_DMA_Init+0xb8>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a60      	ldr	r2, [pc, #384]	; (800658c <HAL_DMA_Init+0x1c8>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d036      	beq.n	800647c <HAL_DMA_Init+0xb8>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a5f      	ldr	r2, [pc, #380]	; (8006590 <HAL_DMA_Init+0x1cc>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d031      	beq.n	800647c <HAL_DMA_Init+0xb8>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a5d      	ldr	r2, [pc, #372]	; (8006594 <HAL_DMA_Init+0x1d0>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d02c      	beq.n	800647c <HAL_DMA_Init+0xb8>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a5c      	ldr	r2, [pc, #368]	; (8006598 <HAL_DMA_Init+0x1d4>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d027      	beq.n	800647c <HAL_DMA_Init+0xb8>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a5a      	ldr	r2, [pc, #360]	; (800659c <HAL_DMA_Init+0x1d8>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d022      	beq.n	800647c <HAL_DMA_Init+0xb8>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a59      	ldr	r2, [pc, #356]	; (80065a0 <HAL_DMA_Init+0x1dc>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d01d      	beq.n	800647c <HAL_DMA_Init+0xb8>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a57      	ldr	r2, [pc, #348]	; (80065a4 <HAL_DMA_Init+0x1e0>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d018      	beq.n	800647c <HAL_DMA_Init+0xb8>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a56      	ldr	r2, [pc, #344]	; (80065a8 <HAL_DMA_Init+0x1e4>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d013      	beq.n	800647c <HAL_DMA_Init+0xb8>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a54      	ldr	r2, [pc, #336]	; (80065ac <HAL_DMA_Init+0x1e8>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d00e      	beq.n	800647c <HAL_DMA_Init+0xb8>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a53      	ldr	r2, [pc, #332]	; (80065b0 <HAL_DMA_Init+0x1ec>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d009      	beq.n	800647c <HAL_DMA_Init+0xb8>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a51      	ldr	r2, [pc, #324]	; (80065b4 <HAL_DMA_Init+0x1f0>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d004      	beq.n	800647c <HAL_DMA_Init+0xb8>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a50      	ldr	r2, [pc, #320]	; (80065b8 <HAL_DMA_Init+0x1f4>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d101      	bne.n	8006480 <HAL_DMA_Init+0xbc>
 800647c:	2301      	movs	r3, #1
 800647e:	e000      	b.n	8006482 <HAL_DMA_Init+0xbe>
 8006480:	2300      	movs	r3, #0
 8006482:	2b00      	cmp	r3, #0
 8006484:	f000 813c 	beq.w	8006700 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2202      	movs	r2, #2
 800648c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a37      	ldr	r2, [pc, #220]	; (800657c <HAL_DMA_Init+0x1b8>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d04a      	beq.n	8006538 <HAL_DMA_Init+0x174>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a36      	ldr	r2, [pc, #216]	; (8006580 <HAL_DMA_Init+0x1bc>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d045      	beq.n	8006538 <HAL_DMA_Init+0x174>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a34      	ldr	r2, [pc, #208]	; (8006584 <HAL_DMA_Init+0x1c0>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d040      	beq.n	8006538 <HAL_DMA_Init+0x174>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a33      	ldr	r2, [pc, #204]	; (8006588 <HAL_DMA_Init+0x1c4>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d03b      	beq.n	8006538 <HAL_DMA_Init+0x174>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a31      	ldr	r2, [pc, #196]	; (800658c <HAL_DMA_Init+0x1c8>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d036      	beq.n	8006538 <HAL_DMA_Init+0x174>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a30      	ldr	r2, [pc, #192]	; (8006590 <HAL_DMA_Init+0x1cc>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d031      	beq.n	8006538 <HAL_DMA_Init+0x174>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a2e      	ldr	r2, [pc, #184]	; (8006594 <HAL_DMA_Init+0x1d0>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d02c      	beq.n	8006538 <HAL_DMA_Init+0x174>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a2d      	ldr	r2, [pc, #180]	; (8006598 <HAL_DMA_Init+0x1d4>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d027      	beq.n	8006538 <HAL_DMA_Init+0x174>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a2b      	ldr	r2, [pc, #172]	; (800659c <HAL_DMA_Init+0x1d8>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d022      	beq.n	8006538 <HAL_DMA_Init+0x174>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a2a      	ldr	r2, [pc, #168]	; (80065a0 <HAL_DMA_Init+0x1dc>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d01d      	beq.n	8006538 <HAL_DMA_Init+0x174>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a28      	ldr	r2, [pc, #160]	; (80065a4 <HAL_DMA_Init+0x1e0>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d018      	beq.n	8006538 <HAL_DMA_Init+0x174>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a27      	ldr	r2, [pc, #156]	; (80065a8 <HAL_DMA_Init+0x1e4>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d013      	beq.n	8006538 <HAL_DMA_Init+0x174>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a25      	ldr	r2, [pc, #148]	; (80065ac <HAL_DMA_Init+0x1e8>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d00e      	beq.n	8006538 <HAL_DMA_Init+0x174>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a24      	ldr	r2, [pc, #144]	; (80065b0 <HAL_DMA_Init+0x1ec>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d009      	beq.n	8006538 <HAL_DMA_Init+0x174>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a22      	ldr	r2, [pc, #136]	; (80065b4 <HAL_DMA_Init+0x1f0>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d004      	beq.n	8006538 <HAL_DMA_Init+0x174>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a21      	ldr	r2, [pc, #132]	; (80065b8 <HAL_DMA_Init+0x1f4>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d108      	bne.n	800654a <HAL_DMA_Init+0x186>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f022 0201 	bic.w	r2, r2, #1
 8006546:	601a      	str	r2, [r3, #0]
 8006548:	e007      	b.n	800655a <HAL_DMA_Init+0x196>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f022 0201 	bic.w	r2, r2, #1
 8006558:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800655a:	e02f      	b.n	80065bc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800655c:	f7fd fe20 	bl	80041a0 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	2b05      	cmp	r3, #5
 8006568:	d928      	bls.n	80065bc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2220      	movs	r2, #32
 800656e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2203      	movs	r2, #3
 8006574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e242      	b.n	8006a02 <HAL_DMA_Init+0x63e>
 800657c:	40020010 	.word	0x40020010
 8006580:	40020028 	.word	0x40020028
 8006584:	40020040 	.word	0x40020040
 8006588:	40020058 	.word	0x40020058
 800658c:	40020070 	.word	0x40020070
 8006590:	40020088 	.word	0x40020088
 8006594:	400200a0 	.word	0x400200a0
 8006598:	400200b8 	.word	0x400200b8
 800659c:	40020410 	.word	0x40020410
 80065a0:	40020428 	.word	0x40020428
 80065a4:	40020440 	.word	0x40020440
 80065a8:	40020458 	.word	0x40020458
 80065ac:	40020470 	.word	0x40020470
 80065b0:	40020488 	.word	0x40020488
 80065b4:	400204a0 	.word	0x400204a0
 80065b8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1c8      	bne.n	800655c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	4b83      	ldr	r3, [pc, #524]	; (80067e4 <HAL_DMA_Init+0x420>)
 80065d6:	4013      	ands	r3, r2
 80065d8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80065e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065fa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a1b      	ldr	r3, [r3, #32]
 8006600:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	4313      	orrs	r3, r2
 8006606:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660c:	2b04      	cmp	r3, #4
 800660e:	d107      	bne.n	8006620 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006618:	4313      	orrs	r3, r2
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	4313      	orrs	r3, r2
 800661e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	2b28      	cmp	r3, #40	; 0x28
 8006626:	d903      	bls.n	8006630 <HAL_DMA_Init+0x26c>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	2b2e      	cmp	r3, #46	; 0x2e
 800662e:	d91f      	bls.n	8006670 <HAL_DMA_Init+0x2ac>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	2b3e      	cmp	r3, #62	; 0x3e
 8006636:	d903      	bls.n	8006640 <HAL_DMA_Init+0x27c>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	2b42      	cmp	r3, #66	; 0x42
 800663e:	d917      	bls.n	8006670 <HAL_DMA_Init+0x2ac>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	2b46      	cmp	r3, #70	; 0x46
 8006646:	d903      	bls.n	8006650 <HAL_DMA_Init+0x28c>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	2b48      	cmp	r3, #72	; 0x48
 800664e:	d90f      	bls.n	8006670 <HAL_DMA_Init+0x2ac>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	2b4e      	cmp	r3, #78	; 0x4e
 8006656:	d903      	bls.n	8006660 <HAL_DMA_Init+0x29c>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	2b52      	cmp	r3, #82	; 0x52
 800665e:	d907      	bls.n	8006670 <HAL_DMA_Init+0x2ac>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	2b73      	cmp	r3, #115	; 0x73
 8006666:	d905      	bls.n	8006674 <HAL_DMA_Init+0x2b0>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	2b77      	cmp	r3, #119	; 0x77
 800666e:	d801      	bhi.n	8006674 <HAL_DMA_Init+0x2b0>
 8006670:	2301      	movs	r3, #1
 8006672:	e000      	b.n	8006676 <HAL_DMA_Init+0x2b2>
 8006674:	2300      	movs	r3, #0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006680:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f023 0307 	bic.w	r3, r3, #7
 8006698:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a8:	2b04      	cmp	r3, #4
 80066aa:	d117      	bne.n	80066dc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00e      	beq.n	80066dc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f001 fdca 	bl	8008258 <DMA_CheckFifoParam>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d008      	beq.n	80066dc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2240      	movs	r2, #64	; 0x40
 80066ce:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e192      	b.n	8006a02 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f001 fd05 	bl	80080f4 <DMA_CalcBaseAndBitshift>
 80066ea:	4603      	mov	r3, r0
 80066ec:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066f2:	f003 031f 	and.w	r3, r3, #31
 80066f6:	223f      	movs	r2, #63	; 0x3f
 80066f8:	409a      	lsls	r2, r3
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	609a      	str	r2, [r3, #8]
 80066fe:	e0c8      	b.n	8006892 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a38      	ldr	r2, [pc, #224]	; (80067e8 <HAL_DMA_Init+0x424>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d022      	beq.n	8006750 <HAL_DMA_Init+0x38c>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a37      	ldr	r2, [pc, #220]	; (80067ec <HAL_DMA_Init+0x428>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d01d      	beq.n	8006750 <HAL_DMA_Init+0x38c>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a35      	ldr	r2, [pc, #212]	; (80067f0 <HAL_DMA_Init+0x42c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d018      	beq.n	8006750 <HAL_DMA_Init+0x38c>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a34      	ldr	r2, [pc, #208]	; (80067f4 <HAL_DMA_Init+0x430>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d013      	beq.n	8006750 <HAL_DMA_Init+0x38c>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a32      	ldr	r2, [pc, #200]	; (80067f8 <HAL_DMA_Init+0x434>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d00e      	beq.n	8006750 <HAL_DMA_Init+0x38c>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a31      	ldr	r2, [pc, #196]	; (80067fc <HAL_DMA_Init+0x438>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d009      	beq.n	8006750 <HAL_DMA_Init+0x38c>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a2f      	ldr	r2, [pc, #188]	; (8006800 <HAL_DMA_Init+0x43c>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d004      	beq.n	8006750 <HAL_DMA_Init+0x38c>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a2e      	ldr	r2, [pc, #184]	; (8006804 <HAL_DMA_Init+0x440>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d101      	bne.n	8006754 <HAL_DMA_Init+0x390>
 8006750:	2301      	movs	r3, #1
 8006752:	e000      	b.n	8006756 <HAL_DMA_Init+0x392>
 8006754:	2300      	movs	r3, #0
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 8092 	beq.w	8006880 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a21      	ldr	r2, [pc, #132]	; (80067e8 <HAL_DMA_Init+0x424>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d021      	beq.n	80067aa <HAL_DMA_Init+0x3e6>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a20      	ldr	r2, [pc, #128]	; (80067ec <HAL_DMA_Init+0x428>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d01c      	beq.n	80067aa <HAL_DMA_Init+0x3e6>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a1e      	ldr	r2, [pc, #120]	; (80067f0 <HAL_DMA_Init+0x42c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d017      	beq.n	80067aa <HAL_DMA_Init+0x3e6>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a1d      	ldr	r2, [pc, #116]	; (80067f4 <HAL_DMA_Init+0x430>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d012      	beq.n	80067aa <HAL_DMA_Init+0x3e6>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a1b      	ldr	r2, [pc, #108]	; (80067f8 <HAL_DMA_Init+0x434>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d00d      	beq.n	80067aa <HAL_DMA_Init+0x3e6>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a1a      	ldr	r2, [pc, #104]	; (80067fc <HAL_DMA_Init+0x438>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d008      	beq.n	80067aa <HAL_DMA_Init+0x3e6>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a18      	ldr	r2, [pc, #96]	; (8006800 <HAL_DMA_Init+0x43c>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d003      	beq.n	80067aa <HAL_DMA_Init+0x3e6>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a17      	ldr	r2, [pc, #92]	; (8006804 <HAL_DMA_Init+0x440>)
 80067a8:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2202      	movs	r2, #2
 80067ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	4b10      	ldr	r3, [pc, #64]	; (8006808 <HAL_DMA_Init+0x444>)
 80067c6:	4013      	ands	r3, r2
 80067c8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	2b40      	cmp	r3, #64	; 0x40
 80067d0:	d01c      	beq.n	800680c <HAL_DMA_Init+0x448>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	2b80      	cmp	r3, #128	; 0x80
 80067d8:	d102      	bne.n	80067e0 <HAL_DMA_Init+0x41c>
 80067da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80067de:	e016      	b.n	800680e <HAL_DMA_Init+0x44a>
 80067e0:	2300      	movs	r3, #0
 80067e2:	e014      	b.n	800680e <HAL_DMA_Init+0x44a>
 80067e4:	fe10803f 	.word	0xfe10803f
 80067e8:	58025408 	.word	0x58025408
 80067ec:	5802541c 	.word	0x5802541c
 80067f0:	58025430 	.word	0x58025430
 80067f4:	58025444 	.word	0x58025444
 80067f8:	58025458 	.word	0x58025458
 80067fc:	5802546c 	.word	0x5802546c
 8006800:	58025480 	.word	0x58025480
 8006804:	58025494 	.word	0x58025494
 8006808:	fffe000f 	.word	0xfffe000f
 800680c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	68d2      	ldr	r2, [r2, #12]
 8006812:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006814:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800681c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006824:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800682c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	69db      	ldr	r3, [r3, #28]
 8006832:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006834:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800683c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	4313      	orrs	r3, r2
 8006842:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	461a      	mov	r2, r3
 8006852:	4b6e      	ldr	r3, [pc, #440]	; (8006a0c <HAL_DMA_Init+0x648>)
 8006854:	4413      	add	r3, r2
 8006856:	4a6e      	ldr	r2, [pc, #440]	; (8006a10 <HAL_DMA_Init+0x64c>)
 8006858:	fba2 2303 	umull	r2, r3, r2, r3
 800685c:	091b      	lsrs	r3, r3, #4
 800685e:	009a      	lsls	r2, r3, #2
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f001 fc45 	bl	80080f4 <DMA_CalcBaseAndBitshift>
 800686a:	4603      	mov	r3, r0
 800686c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006872:	f003 031f 	and.w	r3, r3, #31
 8006876:	2201      	movs	r2, #1
 8006878:	409a      	lsls	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	605a      	str	r2, [r3, #4]
 800687e:	e008      	b.n	8006892 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2240      	movs	r2, #64	; 0x40
 8006884:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2203      	movs	r2, #3
 800688a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e0b7      	b.n	8006a02 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a5f      	ldr	r2, [pc, #380]	; (8006a14 <HAL_DMA_Init+0x650>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d072      	beq.n	8006982 <HAL_DMA_Init+0x5be>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a5d      	ldr	r2, [pc, #372]	; (8006a18 <HAL_DMA_Init+0x654>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d06d      	beq.n	8006982 <HAL_DMA_Init+0x5be>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a5c      	ldr	r2, [pc, #368]	; (8006a1c <HAL_DMA_Init+0x658>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d068      	beq.n	8006982 <HAL_DMA_Init+0x5be>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a5a      	ldr	r2, [pc, #360]	; (8006a20 <HAL_DMA_Init+0x65c>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d063      	beq.n	8006982 <HAL_DMA_Init+0x5be>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a59      	ldr	r2, [pc, #356]	; (8006a24 <HAL_DMA_Init+0x660>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d05e      	beq.n	8006982 <HAL_DMA_Init+0x5be>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a57      	ldr	r2, [pc, #348]	; (8006a28 <HAL_DMA_Init+0x664>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d059      	beq.n	8006982 <HAL_DMA_Init+0x5be>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a56      	ldr	r2, [pc, #344]	; (8006a2c <HAL_DMA_Init+0x668>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d054      	beq.n	8006982 <HAL_DMA_Init+0x5be>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a54      	ldr	r2, [pc, #336]	; (8006a30 <HAL_DMA_Init+0x66c>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d04f      	beq.n	8006982 <HAL_DMA_Init+0x5be>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a53      	ldr	r2, [pc, #332]	; (8006a34 <HAL_DMA_Init+0x670>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d04a      	beq.n	8006982 <HAL_DMA_Init+0x5be>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a51      	ldr	r2, [pc, #324]	; (8006a38 <HAL_DMA_Init+0x674>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d045      	beq.n	8006982 <HAL_DMA_Init+0x5be>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a50      	ldr	r2, [pc, #320]	; (8006a3c <HAL_DMA_Init+0x678>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d040      	beq.n	8006982 <HAL_DMA_Init+0x5be>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a4e      	ldr	r2, [pc, #312]	; (8006a40 <HAL_DMA_Init+0x67c>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d03b      	beq.n	8006982 <HAL_DMA_Init+0x5be>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a4d      	ldr	r2, [pc, #308]	; (8006a44 <HAL_DMA_Init+0x680>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d036      	beq.n	8006982 <HAL_DMA_Init+0x5be>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a4b      	ldr	r2, [pc, #300]	; (8006a48 <HAL_DMA_Init+0x684>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d031      	beq.n	8006982 <HAL_DMA_Init+0x5be>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a4a      	ldr	r2, [pc, #296]	; (8006a4c <HAL_DMA_Init+0x688>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d02c      	beq.n	8006982 <HAL_DMA_Init+0x5be>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a48      	ldr	r2, [pc, #288]	; (8006a50 <HAL_DMA_Init+0x68c>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d027      	beq.n	8006982 <HAL_DMA_Init+0x5be>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a47      	ldr	r2, [pc, #284]	; (8006a54 <HAL_DMA_Init+0x690>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d022      	beq.n	8006982 <HAL_DMA_Init+0x5be>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a45      	ldr	r2, [pc, #276]	; (8006a58 <HAL_DMA_Init+0x694>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d01d      	beq.n	8006982 <HAL_DMA_Init+0x5be>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a44      	ldr	r2, [pc, #272]	; (8006a5c <HAL_DMA_Init+0x698>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d018      	beq.n	8006982 <HAL_DMA_Init+0x5be>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a42      	ldr	r2, [pc, #264]	; (8006a60 <HAL_DMA_Init+0x69c>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d013      	beq.n	8006982 <HAL_DMA_Init+0x5be>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a41      	ldr	r2, [pc, #260]	; (8006a64 <HAL_DMA_Init+0x6a0>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d00e      	beq.n	8006982 <HAL_DMA_Init+0x5be>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a3f      	ldr	r2, [pc, #252]	; (8006a68 <HAL_DMA_Init+0x6a4>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d009      	beq.n	8006982 <HAL_DMA_Init+0x5be>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a3e      	ldr	r2, [pc, #248]	; (8006a6c <HAL_DMA_Init+0x6a8>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d004      	beq.n	8006982 <HAL_DMA_Init+0x5be>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a3c      	ldr	r2, [pc, #240]	; (8006a70 <HAL_DMA_Init+0x6ac>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d101      	bne.n	8006986 <HAL_DMA_Init+0x5c2>
 8006982:	2301      	movs	r3, #1
 8006984:	e000      	b.n	8006988 <HAL_DMA_Init+0x5c4>
 8006986:	2300      	movs	r3, #0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d032      	beq.n	80069f2 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f001 fcdf 	bl	8008350 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	2b80      	cmp	r3, #128	; 0x80
 8006998:	d102      	bne.n	80069a0 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069a8:	b2d2      	uxtb	r2, r2
 80069aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80069b4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d010      	beq.n	80069e0 <HAL_DMA_Init+0x61c>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	2b08      	cmp	r3, #8
 80069c4:	d80c      	bhi.n	80069e0 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f001 fd5c 	bl	8008484 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069d0:	2200      	movs	r2, #0
 80069d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80069dc:	605a      	str	r2, [r3, #4]
 80069de:	e008      	b.n	80069f2 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3718      	adds	r7, #24
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	a7fdabf8 	.word	0xa7fdabf8
 8006a10:	cccccccd 	.word	0xcccccccd
 8006a14:	40020010 	.word	0x40020010
 8006a18:	40020028 	.word	0x40020028
 8006a1c:	40020040 	.word	0x40020040
 8006a20:	40020058 	.word	0x40020058
 8006a24:	40020070 	.word	0x40020070
 8006a28:	40020088 	.word	0x40020088
 8006a2c:	400200a0 	.word	0x400200a0
 8006a30:	400200b8 	.word	0x400200b8
 8006a34:	40020410 	.word	0x40020410
 8006a38:	40020428 	.word	0x40020428
 8006a3c:	40020440 	.word	0x40020440
 8006a40:	40020458 	.word	0x40020458
 8006a44:	40020470 	.word	0x40020470
 8006a48:	40020488 	.word	0x40020488
 8006a4c:	400204a0 	.word	0x400204a0
 8006a50:	400204b8 	.word	0x400204b8
 8006a54:	58025408 	.word	0x58025408
 8006a58:	5802541c 	.word	0x5802541c
 8006a5c:	58025430 	.word	0x58025430
 8006a60:	58025444 	.word	0x58025444
 8006a64:	58025458 	.word	0x58025458
 8006a68:	5802546c 	.word	0x5802546c
 8006a6c:	58025480 	.word	0x58025480
 8006a70:	58025494 	.word	0x58025494

08006a74 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
 8006a80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d101      	bne.n	8006a90 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e226      	b.n	8006ede <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d101      	bne.n	8006a9e <HAL_DMA_Start_IT+0x2a>
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	e21f      	b.n	8006ede <HAL_DMA_Start_IT+0x46a>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	f040 820a 	bne.w	8006ec8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a68      	ldr	r2, [pc, #416]	; (8006c68 <HAL_DMA_Start_IT+0x1f4>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d04a      	beq.n	8006b62 <HAL_DMA_Start_IT+0xee>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a66      	ldr	r2, [pc, #408]	; (8006c6c <HAL_DMA_Start_IT+0x1f8>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d045      	beq.n	8006b62 <HAL_DMA_Start_IT+0xee>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a65      	ldr	r2, [pc, #404]	; (8006c70 <HAL_DMA_Start_IT+0x1fc>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d040      	beq.n	8006b62 <HAL_DMA_Start_IT+0xee>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a63      	ldr	r2, [pc, #396]	; (8006c74 <HAL_DMA_Start_IT+0x200>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d03b      	beq.n	8006b62 <HAL_DMA_Start_IT+0xee>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a62      	ldr	r2, [pc, #392]	; (8006c78 <HAL_DMA_Start_IT+0x204>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d036      	beq.n	8006b62 <HAL_DMA_Start_IT+0xee>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a60      	ldr	r2, [pc, #384]	; (8006c7c <HAL_DMA_Start_IT+0x208>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d031      	beq.n	8006b62 <HAL_DMA_Start_IT+0xee>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a5f      	ldr	r2, [pc, #380]	; (8006c80 <HAL_DMA_Start_IT+0x20c>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d02c      	beq.n	8006b62 <HAL_DMA_Start_IT+0xee>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a5d      	ldr	r2, [pc, #372]	; (8006c84 <HAL_DMA_Start_IT+0x210>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d027      	beq.n	8006b62 <HAL_DMA_Start_IT+0xee>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a5c      	ldr	r2, [pc, #368]	; (8006c88 <HAL_DMA_Start_IT+0x214>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d022      	beq.n	8006b62 <HAL_DMA_Start_IT+0xee>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a5a      	ldr	r2, [pc, #360]	; (8006c8c <HAL_DMA_Start_IT+0x218>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d01d      	beq.n	8006b62 <HAL_DMA_Start_IT+0xee>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a59      	ldr	r2, [pc, #356]	; (8006c90 <HAL_DMA_Start_IT+0x21c>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d018      	beq.n	8006b62 <HAL_DMA_Start_IT+0xee>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a57      	ldr	r2, [pc, #348]	; (8006c94 <HAL_DMA_Start_IT+0x220>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d013      	beq.n	8006b62 <HAL_DMA_Start_IT+0xee>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a56      	ldr	r2, [pc, #344]	; (8006c98 <HAL_DMA_Start_IT+0x224>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d00e      	beq.n	8006b62 <HAL_DMA_Start_IT+0xee>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a54      	ldr	r2, [pc, #336]	; (8006c9c <HAL_DMA_Start_IT+0x228>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d009      	beq.n	8006b62 <HAL_DMA_Start_IT+0xee>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a53      	ldr	r2, [pc, #332]	; (8006ca0 <HAL_DMA_Start_IT+0x22c>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d004      	beq.n	8006b62 <HAL_DMA_Start_IT+0xee>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a51      	ldr	r2, [pc, #324]	; (8006ca4 <HAL_DMA_Start_IT+0x230>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d108      	bne.n	8006b74 <HAL_DMA_Start_IT+0x100>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f022 0201 	bic.w	r2, r2, #1
 8006b70:	601a      	str	r2, [r3, #0]
 8006b72:	e007      	b.n	8006b84 <HAL_DMA_Start_IT+0x110>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 0201 	bic.w	r2, r2, #1
 8006b82:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	68b9      	ldr	r1, [r7, #8]
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f001 f906 	bl	8007d9c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a34      	ldr	r2, [pc, #208]	; (8006c68 <HAL_DMA_Start_IT+0x1f4>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d04a      	beq.n	8006c30 <HAL_DMA_Start_IT+0x1bc>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a33      	ldr	r2, [pc, #204]	; (8006c6c <HAL_DMA_Start_IT+0x1f8>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d045      	beq.n	8006c30 <HAL_DMA_Start_IT+0x1bc>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a31      	ldr	r2, [pc, #196]	; (8006c70 <HAL_DMA_Start_IT+0x1fc>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d040      	beq.n	8006c30 <HAL_DMA_Start_IT+0x1bc>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a30      	ldr	r2, [pc, #192]	; (8006c74 <HAL_DMA_Start_IT+0x200>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d03b      	beq.n	8006c30 <HAL_DMA_Start_IT+0x1bc>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a2e      	ldr	r2, [pc, #184]	; (8006c78 <HAL_DMA_Start_IT+0x204>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d036      	beq.n	8006c30 <HAL_DMA_Start_IT+0x1bc>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a2d      	ldr	r2, [pc, #180]	; (8006c7c <HAL_DMA_Start_IT+0x208>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d031      	beq.n	8006c30 <HAL_DMA_Start_IT+0x1bc>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a2b      	ldr	r2, [pc, #172]	; (8006c80 <HAL_DMA_Start_IT+0x20c>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d02c      	beq.n	8006c30 <HAL_DMA_Start_IT+0x1bc>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a2a      	ldr	r2, [pc, #168]	; (8006c84 <HAL_DMA_Start_IT+0x210>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d027      	beq.n	8006c30 <HAL_DMA_Start_IT+0x1bc>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a28      	ldr	r2, [pc, #160]	; (8006c88 <HAL_DMA_Start_IT+0x214>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d022      	beq.n	8006c30 <HAL_DMA_Start_IT+0x1bc>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a27      	ldr	r2, [pc, #156]	; (8006c8c <HAL_DMA_Start_IT+0x218>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d01d      	beq.n	8006c30 <HAL_DMA_Start_IT+0x1bc>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a25      	ldr	r2, [pc, #148]	; (8006c90 <HAL_DMA_Start_IT+0x21c>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d018      	beq.n	8006c30 <HAL_DMA_Start_IT+0x1bc>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a24      	ldr	r2, [pc, #144]	; (8006c94 <HAL_DMA_Start_IT+0x220>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d013      	beq.n	8006c30 <HAL_DMA_Start_IT+0x1bc>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a22      	ldr	r2, [pc, #136]	; (8006c98 <HAL_DMA_Start_IT+0x224>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d00e      	beq.n	8006c30 <HAL_DMA_Start_IT+0x1bc>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a21      	ldr	r2, [pc, #132]	; (8006c9c <HAL_DMA_Start_IT+0x228>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d009      	beq.n	8006c30 <HAL_DMA_Start_IT+0x1bc>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a1f      	ldr	r2, [pc, #124]	; (8006ca0 <HAL_DMA_Start_IT+0x22c>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d004      	beq.n	8006c30 <HAL_DMA_Start_IT+0x1bc>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a1e      	ldr	r2, [pc, #120]	; (8006ca4 <HAL_DMA_Start_IT+0x230>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d101      	bne.n	8006c34 <HAL_DMA_Start_IT+0x1c0>
 8006c30:	2301      	movs	r3, #1
 8006c32:	e000      	b.n	8006c36 <HAL_DMA_Start_IT+0x1c2>
 8006c34:	2300      	movs	r3, #0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d036      	beq.n	8006ca8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f023 021e 	bic.w	r2, r3, #30
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f042 0216 	orr.w	r2, r2, #22
 8006c4c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d03e      	beq.n	8006cd4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f042 0208 	orr.w	r2, r2, #8
 8006c64:	601a      	str	r2, [r3, #0]
 8006c66:	e035      	b.n	8006cd4 <HAL_DMA_Start_IT+0x260>
 8006c68:	40020010 	.word	0x40020010
 8006c6c:	40020028 	.word	0x40020028
 8006c70:	40020040 	.word	0x40020040
 8006c74:	40020058 	.word	0x40020058
 8006c78:	40020070 	.word	0x40020070
 8006c7c:	40020088 	.word	0x40020088
 8006c80:	400200a0 	.word	0x400200a0
 8006c84:	400200b8 	.word	0x400200b8
 8006c88:	40020410 	.word	0x40020410
 8006c8c:	40020428 	.word	0x40020428
 8006c90:	40020440 	.word	0x40020440
 8006c94:	40020458 	.word	0x40020458
 8006c98:	40020470 	.word	0x40020470
 8006c9c:	40020488 	.word	0x40020488
 8006ca0:	400204a0 	.word	0x400204a0
 8006ca4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f023 020e 	bic.w	r2, r3, #14
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f042 020a 	orr.w	r2, r2, #10
 8006cba:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d007      	beq.n	8006cd4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f042 0204 	orr.w	r2, r2, #4
 8006cd2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a83      	ldr	r2, [pc, #524]	; (8006ee8 <HAL_DMA_Start_IT+0x474>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d072      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x350>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a82      	ldr	r2, [pc, #520]	; (8006eec <HAL_DMA_Start_IT+0x478>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d06d      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x350>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a80      	ldr	r2, [pc, #512]	; (8006ef0 <HAL_DMA_Start_IT+0x47c>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d068      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x350>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a7f      	ldr	r2, [pc, #508]	; (8006ef4 <HAL_DMA_Start_IT+0x480>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d063      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x350>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a7d      	ldr	r2, [pc, #500]	; (8006ef8 <HAL_DMA_Start_IT+0x484>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d05e      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x350>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a7c      	ldr	r2, [pc, #496]	; (8006efc <HAL_DMA_Start_IT+0x488>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d059      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x350>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a7a      	ldr	r2, [pc, #488]	; (8006f00 <HAL_DMA_Start_IT+0x48c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d054      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x350>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a79      	ldr	r2, [pc, #484]	; (8006f04 <HAL_DMA_Start_IT+0x490>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d04f      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x350>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a77      	ldr	r2, [pc, #476]	; (8006f08 <HAL_DMA_Start_IT+0x494>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d04a      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x350>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a76      	ldr	r2, [pc, #472]	; (8006f0c <HAL_DMA_Start_IT+0x498>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d045      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x350>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a74      	ldr	r2, [pc, #464]	; (8006f10 <HAL_DMA_Start_IT+0x49c>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d040      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x350>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a73      	ldr	r2, [pc, #460]	; (8006f14 <HAL_DMA_Start_IT+0x4a0>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d03b      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x350>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a71      	ldr	r2, [pc, #452]	; (8006f18 <HAL_DMA_Start_IT+0x4a4>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d036      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x350>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a70      	ldr	r2, [pc, #448]	; (8006f1c <HAL_DMA_Start_IT+0x4a8>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d031      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x350>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a6e      	ldr	r2, [pc, #440]	; (8006f20 <HAL_DMA_Start_IT+0x4ac>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d02c      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x350>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a6d      	ldr	r2, [pc, #436]	; (8006f24 <HAL_DMA_Start_IT+0x4b0>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d027      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x350>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a6b      	ldr	r2, [pc, #428]	; (8006f28 <HAL_DMA_Start_IT+0x4b4>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d022      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x350>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a6a      	ldr	r2, [pc, #424]	; (8006f2c <HAL_DMA_Start_IT+0x4b8>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d01d      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x350>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a68      	ldr	r2, [pc, #416]	; (8006f30 <HAL_DMA_Start_IT+0x4bc>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d018      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x350>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a67      	ldr	r2, [pc, #412]	; (8006f34 <HAL_DMA_Start_IT+0x4c0>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d013      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x350>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a65      	ldr	r2, [pc, #404]	; (8006f38 <HAL_DMA_Start_IT+0x4c4>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d00e      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x350>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a64      	ldr	r2, [pc, #400]	; (8006f3c <HAL_DMA_Start_IT+0x4c8>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d009      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x350>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a62      	ldr	r2, [pc, #392]	; (8006f40 <HAL_DMA_Start_IT+0x4cc>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d004      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x350>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a61      	ldr	r2, [pc, #388]	; (8006f44 <HAL_DMA_Start_IT+0x4d0>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d101      	bne.n	8006dc8 <HAL_DMA_Start_IT+0x354>
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e000      	b.n	8006dca <HAL_DMA_Start_IT+0x356>
 8006dc8:	2300      	movs	r3, #0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d01a      	beq.n	8006e04 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d007      	beq.n	8006dec <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006de6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dea:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d007      	beq.n	8006e04 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e02:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a37      	ldr	r2, [pc, #220]	; (8006ee8 <HAL_DMA_Start_IT+0x474>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d04a      	beq.n	8006ea4 <HAL_DMA_Start_IT+0x430>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a36      	ldr	r2, [pc, #216]	; (8006eec <HAL_DMA_Start_IT+0x478>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d045      	beq.n	8006ea4 <HAL_DMA_Start_IT+0x430>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a34      	ldr	r2, [pc, #208]	; (8006ef0 <HAL_DMA_Start_IT+0x47c>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d040      	beq.n	8006ea4 <HAL_DMA_Start_IT+0x430>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a33      	ldr	r2, [pc, #204]	; (8006ef4 <HAL_DMA_Start_IT+0x480>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d03b      	beq.n	8006ea4 <HAL_DMA_Start_IT+0x430>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a31      	ldr	r2, [pc, #196]	; (8006ef8 <HAL_DMA_Start_IT+0x484>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d036      	beq.n	8006ea4 <HAL_DMA_Start_IT+0x430>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a30      	ldr	r2, [pc, #192]	; (8006efc <HAL_DMA_Start_IT+0x488>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d031      	beq.n	8006ea4 <HAL_DMA_Start_IT+0x430>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a2e      	ldr	r2, [pc, #184]	; (8006f00 <HAL_DMA_Start_IT+0x48c>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d02c      	beq.n	8006ea4 <HAL_DMA_Start_IT+0x430>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a2d      	ldr	r2, [pc, #180]	; (8006f04 <HAL_DMA_Start_IT+0x490>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d027      	beq.n	8006ea4 <HAL_DMA_Start_IT+0x430>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a2b      	ldr	r2, [pc, #172]	; (8006f08 <HAL_DMA_Start_IT+0x494>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d022      	beq.n	8006ea4 <HAL_DMA_Start_IT+0x430>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a2a      	ldr	r2, [pc, #168]	; (8006f0c <HAL_DMA_Start_IT+0x498>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d01d      	beq.n	8006ea4 <HAL_DMA_Start_IT+0x430>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a28      	ldr	r2, [pc, #160]	; (8006f10 <HAL_DMA_Start_IT+0x49c>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d018      	beq.n	8006ea4 <HAL_DMA_Start_IT+0x430>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a27      	ldr	r2, [pc, #156]	; (8006f14 <HAL_DMA_Start_IT+0x4a0>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d013      	beq.n	8006ea4 <HAL_DMA_Start_IT+0x430>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a25      	ldr	r2, [pc, #148]	; (8006f18 <HAL_DMA_Start_IT+0x4a4>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d00e      	beq.n	8006ea4 <HAL_DMA_Start_IT+0x430>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a24      	ldr	r2, [pc, #144]	; (8006f1c <HAL_DMA_Start_IT+0x4a8>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d009      	beq.n	8006ea4 <HAL_DMA_Start_IT+0x430>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a22      	ldr	r2, [pc, #136]	; (8006f20 <HAL_DMA_Start_IT+0x4ac>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d004      	beq.n	8006ea4 <HAL_DMA_Start_IT+0x430>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a21      	ldr	r2, [pc, #132]	; (8006f24 <HAL_DMA_Start_IT+0x4b0>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d108      	bne.n	8006eb6 <HAL_DMA_Start_IT+0x442>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f042 0201 	orr.w	r2, r2, #1
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	e012      	b.n	8006edc <HAL_DMA_Start_IT+0x468>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f042 0201 	orr.w	r2, r2, #1
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	e009      	b.n	8006edc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ece:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3718      	adds	r7, #24
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	40020010 	.word	0x40020010
 8006eec:	40020028 	.word	0x40020028
 8006ef0:	40020040 	.word	0x40020040
 8006ef4:	40020058 	.word	0x40020058
 8006ef8:	40020070 	.word	0x40020070
 8006efc:	40020088 	.word	0x40020088
 8006f00:	400200a0 	.word	0x400200a0
 8006f04:	400200b8 	.word	0x400200b8
 8006f08:	40020410 	.word	0x40020410
 8006f0c:	40020428 	.word	0x40020428
 8006f10:	40020440 	.word	0x40020440
 8006f14:	40020458 	.word	0x40020458
 8006f18:	40020470 	.word	0x40020470
 8006f1c:	40020488 	.word	0x40020488
 8006f20:	400204a0 	.word	0x400204a0
 8006f24:	400204b8 	.word	0x400204b8
 8006f28:	58025408 	.word	0x58025408
 8006f2c:	5802541c 	.word	0x5802541c
 8006f30:	58025430 	.word	0x58025430
 8006f34:	58025444 	.word	0x58025444
 8006f38:	58025458 	.word	0x58025458
 8006f3c:	5802546c 	.word	0x5802546c
 8006f40:	58025480 	.word	0x58025480
 8006f44:	58025494 	.word	0x58025494

08006f48 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b08a      	sub	sp, #40	; 0x28
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006f50:	2300      	movs	r3, #0
 8006f52:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006f54:	4b67      	ldr	r3, [pc, #412]	; (80070f4 <HAL_DMA_IRQHandler+0x1ac>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a67      	ldr	r2, [pc, #412]	; (80070f8 <HAL_DMA_IRQHandler+0x1b0>)
 8006f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f5e:	0a9b      	lsrs	r3, r3, #10
 8006f60:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f66:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f6c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006f6e:	6a3b      	ldr	r3, [r7, #32]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a5f      	ldr	r2, [pc, #380]	; (80070fc <HAL_DMA_IRQHandler+0x1b4>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d04a      	beq.n	800701a <HAL_DMA_IRQHandler+0xd2>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a5d      	ldr	r2, [pc, #372]	; (8007100 <HAL_DMA_IRQHandler+0x1b8>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d045      	beq.n	800701a <HAL_DMA_IRQHandler+0xd2>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a5c      	ldr	r2, [pc, #368]	; (8007104 <HAL_DMA_IRQHandler+0x1bc>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d040      	beq.n	800701a <HAL_DMA_IRQHandler+0xd2>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a5a      	ldr	r2, [pc, #360]	; (8007108 <HAL_DMA_IRQHandler+0x1c0>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d03b      	beq.n	800701a <HAL_DMA_IRQHandler+0xd2>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a59      	ldr	r2, [pc, #356]	; (800710c <HAL_DMA_IRQHandler+0x1c4>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d036      	beq.n	800701a <HAL_DMA_IRQHandler+0xd2>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a57      	ldr	r2, [pc, #348]	; (8007110 <HAL_DMA_IRQHandler+0x1c8>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d031      	beq.n	800701a <HAL_DMA_IRQHandler+0xd2>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a56      	ldr	r2, [pc, #344]	; (8007114 <HAL_DMA_IRQHandler+0x1cc>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d02c      	beq.n	800701a <HAL_DMA_IRQHandler+0xd2>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a54      	ldr	r2, [pc, #336]	; (8007118 <HAL_DMA_IRQHandler+0x1d0>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d027      	beq.n	800701a <HAL_DMA_IRQHandler+0xd2>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a53      	ldr	r2, [pc, #332]	; (800711c <HAL_DMA_IRQHandler+0x1d4>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d022      	beq.n	800701a <HAL_DMA_IRQHandler+0xd2>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a51      	ldr	r2, [pc, #324]	; (8007120 <HAL_DMA_IRQHandler+0x1d8>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d01d      	beq.n	800701a <HAL_DMA_IRQHandler+0xd2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a50      	ldr	r2, [pc, #320]	; (8007124 <HAL_DMA_IRQHandler+0x1dc>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d018      	beq.n	800701a <HAL_DMA_IRQHandler+0xd2>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a4e      	ldr	r2, [pc, #312]	; (8007128 <HAL_DMA_IRQHandler+0x1e0>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d013      	beq.n	800701a <HAL_DMA_IRQHandler+0xd2>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a4d      	ldr	r2, [pc, #308]	; (800712c <HAL_DMA_IRQHandler+0x1e4>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d00e      	beq.n	800701a <HAL_DMA_IRQHandler+0xd2>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a4b      	ldr	r2, [pc, #300]	; (8007130 <HAL_DMA_IRQHandler+0x1e8>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d009      	beq.n	800701a <HAL_DMA_IRQHandler+0xd2>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a4a      	ldr	r2, [pc, #296]	; (8007134 <HAL_DMA_IRQHandler+0x1ec>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d004      	beq.n	800701a <HAL_DMA_IRQHandler+0xd2>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a48      	ldr	r2, [pc, #288]	; (8007138 <HAL_DMA_IRQHandler+0x1f0>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d101      	bne.n	800701e <HAL_DMA_IRQHandler+0xd6>
 800701a:	2301      	movs	r3, #1
 800701c:	e000      	b.n	8007020 <HAL_DMA_IRQHandler+0xd8>
 800701e:	2300      	movs	r3, #0
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 842b 	beq.w	800787c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800702a:	f003 031f 	and.w	r3, r3, #31
 800702e:	2208      	movs	r2, #8
 8007030:	409a      	lsls	r2, r3
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	4013      	ands	r3, r2
 8007036:	2b00      	cmp	r3, #0
 8007038:	f000 80a2 	beq.w	8007180 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a2e      	ldr	r2, [pc, #184]	; (80070fc <HAL_DMA_IRQHandler+0x1b4>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d04a      	beq.n	80070dc <HAL_DMA_IRQHandler+0x194>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a2d      	ldr	r2, [pc, #180]	; (8007100 <HAL_DMA_IRQHandler+0x1b8>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d045      	beq.n	80070dc <HAL_DMA_IRQHandler+0x194>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a2b      	ldr	r2, [pc, #172]	; (8007104 <HAL_DMA_IRQHandler+0x1bc>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d040      	beq.n	80070dc <HAL_DMA_IRQHandler+0x194>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a2a      	ldr	r2, [pc, #168]	; (8007108 <HAL_DMA_IRQHandler+0x1c0>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d03b      	beq.n	80070dc <HAL_DMA_IRQHandler+0x194>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a28      	ldr	r2, [pc, #160]	; (800710c <HAL_DMA_IRQHandler+0x1c4>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d036      	beq.n	80070dc <HAL_DMA_IRQHandler+0x194>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a27      	ldr	r2, [pc, #156]	; (8007110 <HAL_DMA_IRQHandler+0x1c8>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d031      	beq.n	80070dc <HAL_DMA_IRQHandler+0x194>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a25      	ldr	r2, [pc, #148]	; (8007114 <HAL_DMA_IRQHandler+0x1cc>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d02c      	beq.n	80070dc <HAL_DMA_IRQHandler+0x194>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a24      	ldr	r2, [pc, #144]	; (8007118 <HAL_DMA_IRQHandler+0x1d0>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d027      	beq.n	80070dc <HAL_DMA_IRQHandler+0x194>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a22      	ldr	r2, [pc, #136]	; (800711c <HAL_DMA_IRQHandler+0x1d4>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d022      	beq.n	80070dc <HAL_DMA_IRQHandler+0x194>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a21      	ldr	r2, [pc, #132]	; (8007120 <HAL_DMA_IRQHandler+0x1d8>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d01d      	beq.n	80070dc <HAL_DMA_IRQHandler+0x194>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a1f      	ldr	r2, [pc, #124]	; (8007124 <HAL_DMA_IRQHandler+0x1dc>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d018      	beq.n	80070dc <HAL_DMA_IRQHandler+0x194>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a1e      	ldr	r2, [pc, #120]	; (8007128 <HAL_DMA_IRQHandler+0x1e0>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d013      	beq.n	80070dc <HAL_DMA_IRQHandler+0x194>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a1c      	ldr	r2, [pc, #112]	; (800712c <HAL_DMA_IRQHandler+0x1e4>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d00e      	beq.n	80070dc <HAL_DMA_IRQHandler+0x194>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a1b      	ldr	r2, [pc, #108]	; (8007130 <HAL_DMA_IRQHandler+0x1e8>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d009      	beq.n	80070dc <HAL_DMA_IRQHandler+0x194>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a19      	ldr	r2, [pc, #100]	; (8007134 <HAL_DMA_IRQHandler+0x1ec>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d004      	beq.n	80070dc <HAL_DMA_IRQHandler+0x194>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a18      	ldr	r2, [pc, #96]	; (8007138 <HAL_DMA_IRQHandler+0x1f0>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d12f      	bne.n	800713c <HAL_DMA_IRQHandler+0x1f4>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0304 	and.w	r3, r3, #4
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	bf14      	ite	ne
 80070ea:	2301      	movne	r3, #1
 80070ec:	2300      	moveq	r3, #0
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	e02e      	b.n	8007150 <HAL_DMA_IRQHandler+0x208>
 80070f2:	bf00      	nop
 80070f4:	24000000 	.word	0x24000000
 80070f8:	1b4e81b5 	.word	0x1b4e81b5
 80070fc:	40020010 	.word	0x40020010
 8007100:	40020028 	.word	0x40020028
 8007104:	40020040 	.word	0x40020040
 8007108:	40020058 	.word	0x40020058
 800710c:	40020070 	.word	0x40020070
 8007110:	40020088 	.word	0x40020088
 8007114:	400200a0 	.word	0x400200a0
 8007118:	400200b8 	.word	0x400200b8
 800711c:	40020410 	.word	0x40020410
 8007120:	40020428 	.word	0x40020428
 8007124:	40020440 	.word	0x40020440
 8007128:	40020458 	.word	0x40020458
 800712c:	40020470 	.word	0x40020470
 8007130:	40020488 	.word	0x40020488
 8007134:	400204a0 	.word	0x400204a0
 8007138:	400204b8 	.word	0x400204b8
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0308 	and.w	r3, r3, #8
 8007146:	2b00      	cmp	r3, #0
 8007148:	bf14      	ite	ne
 800714a:	2301      	movne	r3, #1
 800714c:	2300      	moveq	r3, #0
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b00      	cmp	r3, #0
 8007152:	d015      	beq.n	8007180 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 0204 	bic.w	r2, r2, #4
 8007162:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007168:	f003 031f 	and.w	r3, r3, #31
 800716c:	2208      	movs	r2, #8
 800716e:	409a      	lsls	r2, r3
 8007170:	6a3b      	ldr	r3, [r7, #32]
 8007172:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007178:	f043 0201 	orr.w	r2, r3, #1
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007184:	f003 031f 	and.w	r3, r3, #31
 8007188:	69ba      	ldr	r2, [r7, #24]
 800718a:	fa22 f303 	lsr.w	r3, r2, r3
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	d06e      	beq.n	8007274 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a69      	ldr	r2, [pc, #420]	; (8007340 <HAL_DMA_IRQHandler+0x3f8>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d04a      	beq.n	8007236 <HAL_DMA_IRQHandler+0x2ee>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a67      	ldr	r2, [pc, #412]	; (8007344 <HAL_DMA_IRQHandler+0x3fc>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d045      	beq.n	8007236 <HAL_DMA_IRQHandler+0x2ee>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a66      	ldr	r2, [pc, #408]	; (8007348 <HAL_DMA_IRQHandler+0x400>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d040      	beq.n	8007236 <HAL_DMA_IRQHandler+0x2ee>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a64      	ldr	r2, [pc, #400]	; (800734c <HAL_DMA_IRQHandler+0x404>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d03b      	beq.n	8007236 <HAL_DMA_IRQHandler+0x2ee>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a63      	ldr	r2, [pc, #396]	; (8007350 <HAL_DMA_IRQHandler+0x408>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d036      	beq.n	8007236 <HAL_DMA_IRQHandler+0x2ee>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a61      	ldr	r2, [pc, #388]	; (8007354 <HAL_DMA_IRQHandler+0x40c>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d031      	beq.n	8007236 <HAL_DMA_IRQHandler+0x2ee>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a60      	ldr	r2, [pc, #384]	; (8007358 <HAL_DMA_IRQHandler+0x410>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d02c      	beq.n	8007236 <HAL_DMA_IRQHandler+0x2ee>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a5e      	ldr	r2, [pc, #376]	; (800735c <HAL_DMA_IRQHandler+0x414>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d027      	beq.n	8007236 <HAL_DMA_IRQHandler+0x2ee>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a5d      	ldr	r2, [pc, #372]	; (8007360 <HAL_DMA_IRQHandler+0x418>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d022      	beq.n	8007236 <HAL_DMA_IRQHandler+0x2ee>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a5b      	ldr	r2, [pc, #364]	; (8007364 <HAL_DMA_IRQHandler+0x41c>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d01d      	beq.n	8007236 <HAL_DMA_IRQHandler+0x2ee>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a5a      	ldr	r2, [pc, #360]	; (8007368 <HAL_DMA_IRQHandler+0x420>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d018      	beq.n	8007236 <HAL_DMA_IRQHandler+0x2ee>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a58      	ldr	r2, [pc, #352]	; (800736c <HAL_DMA_IRQHandler+0x424>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d013      	beq.n	8007236 <HAL_DMA_IRQHandler+0x2ee>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a57      	ldr	r2, [pc, #348]	; (8007370 <HAL_DMA_IRQHandler+0x428>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d00e      	beq.n	8007236 <HAL_DMA_IRQHandler+0x2ee>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a55      	ldr	r2, [pc, #340]	; (8007374 <HAL_DMA_IRQHandler+0x42c>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d009      	beq.n	8007236 <HAL_DMA_IRQHandler+0x2ee>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a54      	ldr	r2, [pc, #336]	; (8007378 <HAL_DMA_IRQHandler+0x430>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d004      	beq.n	8007236 <HAL_DMA_IRQHandler+0x2ee>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a52      	ldr	r2, [pc, #328]	; (800737c <HAL_DMA_IRQHandler+0x434>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d10a      	bne.n	800724c <HAL_DMA_IRQHandler+0x304>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	695b      	ldr	r3, [r3, #20]
 800723c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007240:	2b00      	cmp	r3, #0
 8007242:	bf14      	ite	ne
 8007244:	2301      	movne	r3, #1
 8007246:	2300      	moveq	r3, #0
 8007248:	b2db      	uxtb	r3, r3
 800724a:	e003      	b.n	8007254 <HAL_DMA_IRQHandler+0x30c>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2300      	movs	r3, #0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00d      	beq.n	8007274 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800725c:	f003 031f 	and.w	r3, r3, #31
 8007260:	2201      	movs	r2, #1
 8007262:	409a      	lsls	r2, r3
 8007264:	6a3b      	ldr	r3, [r7, #32]
 8007266:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800726c:	f043 0202 	orr.w	r2, r3, #2
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007278:	f003 031f 	and.w	r3, r3, #31
 800727c:	2204      	movs	r2, #4
 800727e:	409a      	lsls	r2, r3
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	4013      	ands	r3, r2
 8007284:	2b00      	cmp	r3, #0
 8007286:	f000 808f 	beq.w	80073a8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a2c      	ldr	r2, [pc, #176]	; (8007340 <HAL_DMA_IRQHandler+0x3f8>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d04a      	beq.n	800732a <HAL_DMA_IRQHandler+0x3e2>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a2a      	ldr	r2, [pc, #168]	; (8007344 <HAL_DMA_IRQHandler+0x3fc>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d045      	beq.n	800732a <HAL_DMA_IRQHandler+0x3e2>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a29      	ldr	r2, [pc, #164]	; (8007348 <HAL_DMA_IRQHandler+0x400>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d040      	beq.n	800732a <HAL_DMA_IRQHandler+0x3e2>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a27      	ldr	r2, [pc, #156]	; (800734c <HAL_DMA_IRQHandler+0x404>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d03b      	beq.n	800732a <HAL_DMA_IRQHandler+0x3e2>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a26      	ldr	r2, [pc, #152]	; (8007350 <HAL_DMA_IRQHandler+0x408>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d036      	beq.n	800732a <HAL_DMA_IRQHandler+0x3e2>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a24      	ldr	r2, [pc, #144]	; (8007354 <HAL_DMA_IRQHandler+0x40c>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d031      	beq.n	800732a <HAL_DMA_IRQHandler+0x3e2>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a23      	ldr	r2, [pc, #140]	; (8007358 <HAL_DMA_IRQHandler+0x410>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d02c      	beq.n	800732a <HAL_DMA_IRQHandler+0x3e2>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a21      	ldr	r2, [pc, #132]	; (800735c <HAL_DMA_IRQHandler+0x414>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d027      	beq.n	800732a <HAL_DMA_IRQHandler+0x3e2>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a20      	ldr	r2, [pc, #128]	; (8007360 <HAL_DMA_IRQHandler+0x418>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d022      	beq.n	800732a <HAL_DMA_IRQHandler+0x3e2>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a1e      	ldr	r2, [pc, #120]	; (8007364 <HAL_DMA_IRQHandler+0x41c>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d01d      	beq.n	800732a <HAL_DMA_IRQHandler+0x3e2>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a1d      	ldr	r2, [pc, #116]	; (8007368 <HAL_DMA_IRQHandler+0x420>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d018      	beq.n	800732a <HAL_DMA_IRQHandler+0x3e2>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a1b      	ldr	r2, [pc, #108]	; (800736c <HAL_DMA_IRQHandler+0x424>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d013      	beq.n	800732a <HAL_DMA_IRQHandler+0x3e2>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a1a      	ldr	r2, [pc, #104]	; (8007370 <HAL_DMA_IRQHandler+0x428>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d00e      	beq.n	800732a <HAL_DMA_IRQHandler+0x3e2>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a18      	ldr	r2, [pc, #96]	; (8007374 <HAL_DMA_IRQHandler+0x42c>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d009      	beq.n	800732a <HAL_DMA_IRQHandler+0x3e2>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a17      	ldr	r2, [pc, #92]	; (8007378 <HAL_DMA_IRQHandler+0x430>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d004      	beq.n	800732a <HAL_DMA_IRQHandler+0x3e2>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a15      	ldr	r2, [pc, #84]	; (800737c <HAL_DMA_IRQHandler+0x434>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d12a      	bne.n	8007380 <HAL_DMA_IRQHandler+0x438>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0302 	and.w	r3, r3, #2
 8007334:	2b00      	cmp	r3, #0
 8007336:	bf14      	ite	ne
 8007338:	2301      	movne	r3, #1
 800733a:	2300      	moveq	r3, #0
 800733c:	b2db      	uxtb	r3, r3
 800733e:	e023      	b.n	8007388 <HAL_DMA_IRQHandler+0x440>
 8007340:	40020010 	.word	0x40020010
 8007344:	40020028 	.word	0x40020028
 8007348:	40020040 	.word	0x40020040
 800734c:	40020058 	.word	0x40020058
 8007350:	40020070 	.word	0x40020070
 8007354:	40020088 	.word	0x40020088
 8007358:	400200a0 	.word	0x400200a0
 800735c:	400200b8 	.word	0x400200b8
 8007360:	40020410 	.word	0x40020410
 8007364:	40020428 	.word	0x40020428
 8007368:	40020440 	.word	0x40020440
 800736c:	40020458 	.word	0x40020458
 8007370:	40020470 	.word	0x40020470
 8007374:	40020488 	.word	0x40020488
 8007378:	400204a0 	.word	0x400204a0
 800737c:	400204b8 	.word	0x400204b8
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2300      	movs	r3, #0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00d      	beq.n	80073a8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007390:	f003 031f 	and.w	r3, r3, #31
 8007394:	2204      	movs	r2, #4
 8007396:	409a      	lsls	r2, r3
 8007398:	6a3b      	ldr	r3, [r7, #32]
 800739a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073a0:	f043 0204 	orr.w	r2, r3, #4
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ac:	f003 031f 	and.w	r3, r3, #31
 80073b0:	2210      	movs	r2, #16
 80073b2:	409a      	lsls	r2, r3
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	4013      	ands	r3, r2
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f000 80a6 	beq.w	800750a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a85      	ldr	r2, [pc, #532]	; (80075d8 <HAL_DMA_IRQHandler+0x690>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d04a      	beq.n	800745e <HAL_DMA_IRQHandler+0x516>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a83      	ldr	r2, [pc, #524]	; (80075dc <HAL_DMA_IRQHandler+0x694>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d045      	beq.n	800745e <HAL_DMA_IRQHandler+0x516>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a82      	ldr	r2, [pc, #520]	; (80075e0 <HAL_DMA_IRQHandler+0x698>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d040      	beq.n	800745e <HAL_DMA_IRQHandler+0x516>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a80      	ldr	r2, [pc, #512]	; (80075e4 <HAL_DMA_IRQHandler+0x69c>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d03b      	beq.n	800745e <HAL_DMA_IRQHandler+0x516>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a7f      	ldr	r2, [pc, #508]	; (80075e8 <HAL_DMA_IRQHandler+0x6a0>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d036      	beq.n	800745e <HAL_DMA_IRQHandler+0x516>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a7d      	ldr	r2, [pc, #500]	; (80075ec <HAL_DMA_IRQHandler+0x6a4>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d031      	beq.n	800745e <HAL_DMA_IRQHandler+0x516>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a7c      	ldr	r2, [pc, #496]	; (80075f0 <HAL_DMA_IRQHandler+0x6a8>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d02c      	beq.n	800745e <HAL_DMA_IRQHandler+0x516>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a7a      	ldr	r2, [pc, #488]	; (80075f4 <HAL_DMA_IRQHandler+0x6ac>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d027      	beq.n	800745e <HAL_DMA_IRQHandler+0x516>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a79      	ldr	r2, [pc, #484]	; (80075f8 <HAL_DMA_IRQHandler+0x6b0>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d022      	beq.n	800745e <HAL_DMA_IRQHandler+0x516>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a77      	ldr	r2, [pc, #476]	; (80075fc <HAL_DMA_IRQHandler+0x6b4>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d01d      	beq.n	800745e <HAL_DMA_IRQHandler+0x516>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a76      	ldr	r2, [pc, #472]	; (8007600 <HAL_DMA_IRQHandler+0x6b8>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d018      	beq.n	800745e <HAL_DMA_IRQHandler+0x516>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a74      	ldr	r2, [pc, #464]	; (8007604 <HAL_DMA_IRQHandler+0x6bc>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d013      	beq.n	800745e <HAL_DMA_IRQHandler+0x516>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a73      	ldr	r2, [pc, #460]	; (8007608 <HAL_DMA_IRQHandler+0x6c0>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d00e      	beq.n	800745e <HAL_DMA_IRQHandler+0x516>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a71      	ldr	r2, [pc, #452]	; (800760c <HAL_DMA_IRQHandler+0x6c4>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d009      	beq.n	800745e <HAL_DMA_IRQHandler+0x516>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a70      	ldr	r2, [pc, #448]	; (8007610 <HAL_DMA_IRQHandler+0x6c8>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d004      	beq.n	800745e <HAL_DMA_IRQHandler+0x516>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a6e      	ldr	r2, [pc, #440]	; (8007614 <HAL_DMA_IRQHandler+0x6cc>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d10a      	bne.n	8007474 <HAL_DMA_IRQHandler+0x52c>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0308 	and.w	r3, r3, #8
 8007468:	2b00      	cmp	r3, #0
 800746a:	bf14      	ite	ne
 800746c:	2301      	movne	r3, #1
 800746e:	2300      	moveq	r3, #0
 8007470:	b2db      	uxtb	r3, r3
 8007472:	e009      	b.n	8007488 <HAL_DMA_IRQHandler+0x540>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0304 	and.w	r3, r3, #4
 800747e:	2b00      	cmp	r3, #0
 8007480:	bf14      	ite	ne
 8007482:	2301      	movne	r3, #1
 8007484:	2300      	moveq	r3, #0
 8007486:	b2db      	uxtb	r3, r3
 8007488:	2b00      	cmp	r3, #0
 800748a:	d03e      	beq.n	800750a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007490:	f003 031f 	and.w	r3, r3, #31
 8007494:	2210      	movs	r2, #16
 8007496:	409a      	lsls	r2, r3
 8007498:	6a3b      	ldr	r3, [r7, #32]
 800749a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d018      	beq.n	80074dc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d108      	bne.n	80074ca <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d024      	beq.n	800750a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	4798      	blx	r3
 80074c8:	e01f      	b.n	800750a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d01b      	beq.n	800750a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	4798      	blx	r3
 80074da:	e016      	b.n	800750a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d107      	bne.n	80074fa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f022 0208 	bic.w	r2, r2, #8
 80074f8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d003      	beq.n	800750a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800750e:	f003 031f 	and.w	r3, r3, #31
 8007512:	2220      	movs	r2, #32
 8007514:	409a      	lsls	r2, r3
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	4013      	ands	r3, r2
 800751a:	2b00      	cmp	r3, #0
 800751c:	f000 8110 	beq.w	8007740 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a2c      	ldr	r2, [pc, #176]	; (80075d8 <HAL_DMA_IRQHandler+0x690>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d04a      	beq.n	80075c0 <HAL_DMA_IRQHandler+0x678>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a2b      	ldr	r2, [pc, #172]	; (80075dc <HAL_DMA_IRQHandler+0x694>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d045      	beq.n	80075c0 <HAL_DMA_IRQHandler+0x678>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a29      	ldr	r2, [pc, #164]	; (80075e0 <HAL_DMA_IRQHandler+0x698>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d040      	beq.n	80075c0 <HAL_DMA_IRQHandler+0x678>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a28      	ldr	r2, [pc, #160]	; (80075e4 <HAL_DMA_IRQHandler+0x69c>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d03b      	beq.n	80075c0 <HAL_DMA_IRQHandler+0x678>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a26      	ldr	r2, [pc, #152]	; (80075e8 <HAL_DMA_IRQHandler+0x6a0>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d036      	beq.n	80075c0 <HAL_DMA_IRQHandler+0x678>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a25      	ldr	r2, [pc, #148]	; (80075ec <HAL_DMA_IRQHandler+0x6a4>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d031      	beq.n	80075c0 <HAL_DMA_IRQHandler+0x678>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a23      	ldr	r2, [pc, #140]	; (80075f0 <HAL_DMA_IRQHandler+0x6a8>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d02c      	beq.n	80075c0 <HAL_DMA_IRQHandler+0x678>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a22      	ldr	r2, [pc, #136]	; (80075f4 <HAL_DMA_IRQHandler+0x6ac>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d027      	beq.n	80075c0 <HAL_DMA_IRQHandler+0x678>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a20      	ldr	r2, [pc, #128]	; (80075f8 <HAL_DMA_IRQHandler+0x6b0>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d022      	beq.n	80075c0 <HAL_DMA_IRQHandler+0x678>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a1f      	ldr	r2, [pc, #124]	; (80075fc <HAL_DMA_IRQHandler+0x6b4>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d01d      	beq.n	80075c0 <HAL_DMA_IRQHandler+0x678>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a1d      	ldr	r2, [pc, #116]	; (8007600 <HAL_DMA_IRQHandler+0x6b8>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d018      	beq.n	80075c0 <HAL_DMA_IRQHandler+0x678>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a1c      	ldr	r2, [pc, #112]	; (8007604 <HAL_DMA_IRQHandler+0x6bc>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d013      	beq.n	80075c0 <HAL_DMA_IRQHandler+0x678>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a1a      	ldr	r2, [pc, #104]	; (8007608 <HAL_DMA_IRQHandler+0x6c0>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d00e      	beq.n	80075c0 <HAL_DMA_IRQHandler+0x678>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a19      	ldr	r2, [pc, #100]	; (800760c <HAL_DMA_IRQHandler+0x6c4>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d009      	beq.n	80075c0 <HAL_DMA_IRQHandler+0x678>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a17      	ldr	r2, [pc, #92]	; (8007610 <HAL_DMA_IRQHandler+0x6c8>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d004      	beq.n	80075c0 <HAL_DMA_IRQHandler+0x678>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a16      	ldr	r2, [pc, #88]	; (8007614 <HAL_DMA_IRQHandler+0x6cc>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d12b      	bne.n	8007618 <HAL_DMA_IRQHandler+0x6d0>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 0310 	and.w	r3, r3, #16
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	bf14      	ite	ne
 80075ce:	2301      	movne	r3, #1
 80075d0:	2300      	moveq	r3, #0
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	e02a      	b.n	800762c <HAL_DMA_IRQHandler+0x6e4>
 80075d6:	bf00      	nop
 80075d8:	40020010 	.word	0x40020010
 80075dc:	40020028 	.word	0x40020028
 80075e0:	40020040 	.word	0x40020040
 80075e4:	40020058 	.word	0x40020058
 80075e8:	40020070 	.word	0x40020070
 80075ec:	40020088 	.word	0x40020088
 80075f0:	400200a0 	.word	0x400200a0
 80075f4:	400200b8 	.word	0x400200b8
 80075f8:	40020410 	.word	0x40020410
 80075fc:	40020428 	.word	0x40020428
 8007600:	40020440 	.word	0x40020440
 8007604:	40020458 	.word	0x40020458
 8007608:	40020470 	.word	0x40020470
 800760c:	40020488 	.word	0x40020488
 8007610:	400204a0 	.word	0x400204a0
 8007614:	400204b8 	.word	0x400204b8
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0302 	and.w	r3, r3, #2
 8007622:	2b00      	cmp	r3, #0
 8007624:	bf14      	ite	ne
 8007626:	2301      	movne	r3, #1
 8007628:	2300      	moveq	r3, #0
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b00      	cmp	r3, #0
 800762e:	f000 8087 	beq.w	8007740 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007636:	f003 031f 	and.w	r3, r3, #31
 800763a:	2220      	movs	r2, #32
 800763c:	409a      	lsls	r2, r3
 800763e:	6a3b      	ldr	r3, [r7, #32]
 8007640:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b04      	cmp	r3, #4
 800764c:	d139      	bne.n	80076c2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f022 0216 	bic.w	r2, r2, #22
 800765c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	695a      	ldr	r2, [r3, #20]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800766c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007672:	2b00      	cmp	r3, #0
 8007674:	d103      	bne.n	800767e <HAL_DMA_IRQHandler+0x736>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800767a:	2b00      	cmp	r3, #0
 800767c:	d007      	beq.n	800768e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f022 0208 	bic.w	r2, r2, #8
 800768c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007692:	f003 031f 	and.w	r3, r3, #31
 8007696:	223f      	movs	r2, #63	; 0x3f
 8007698:	409a      	lsls	r2, r3
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f000 834a 	beq.w	8007d4c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	4798      	blx	r3
          }
          return;
 80076c0:	e344      	b.n	8007d4c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d018      	beq.n	8007702 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d108      	bne.n	80076f0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d02c      	beq.n	8007740 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	4798      	blx	r3
 80076ee:	e027      	b.n	8007740 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d023      	beq.n	8007740 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	4798      	blx	r3
 8007700:	e01e      	b.n	8007740 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10f      	bne.n	8007730 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f022 0210 	bic.w	r2, r2, #16
 800771e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007734:	2b00      	cmp	r3, #0
 8007736:	d003      	beq.n	8007740 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007744:	2b00      	cmp	r3, #0
 8007746:	f000 8306 	beq.w	8007d56 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800774e:	f003 0301 	and.w	r3, r3, #1
 8007752:	2b00      	cmp	r3, #0
 8007754:	f000 8088 	beq.w	8007868 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2204      	movs	r2, #4
 800775c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a7a      	ldr	r2, [pc, #488]	; (8007950 <HAL_DMA_IRQHandler+0xa08>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d04a      	beq.n	8007800 <HAL_DMA_IRQHandler+0x8b8>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a79      	ldr	r2, [pc, #484]	; (8007954 <HAL_DMA_IRQHandler+0xa0c>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d045      	beq.n	8007800 <HAL_DMA_IRQHandler+0x8b8>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a77      	ldr	r2, [pc, #476]	; (8007958 <HAL_DMA_IRQHandler+0xa10>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d040      	beq.n	8007800 <HAL_DMA_IRQHandler+0x8b8>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a76      	ldr	r2, [pc, #472]	; (800795c <HAL_DMA_IRQHandler+0xa14>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d03b      	beq.n	8007800 <HAL_DMA_IRQHandler+0x8b8>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a74      	ldr	r2, [pc, #464]	; (8007960 <HAL_DMA_IRQHandler+0xa18>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d036      	beq.n	8007800 <HAL_DMA_IRQHandler+0x8b8>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a73      	ldr	r2, [pc, #460]	; (8007964 <HAL_DMA_IRQHandler+0xa1c>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d031      	beq.n	8007800 <HAL_DMA_IRQHandler+0x8b8>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a71      	ldr	r2, [pc, #452]	; (8007968 <HAL_DMA_IRQHandler+0xa20>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d02c      	beq.n	8007800 <HAL_DMA_IRQHandler+0x8b8>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a70      	ldr	r2, [pc, #448]	; (800796c <HAL_DMA_IRQHandler+0xa24>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d027      	beq.n	8007800 <HAL_DMA_IRQHandler+0x8b8>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a6e      	ldr	r2, [pc, #440]	; (8007970 <HAL_DMA_IRQHandler+0xa28>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d022      	beq.n	8007800 <HAL_DMA_IRQHandler+0x8b8>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a6d      	ldr	r2, [pc, #436]	; (8007974 <HAL_DMA_IRQHandler+0xa2c>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d01d      	beq.n	8007800 <HAL_DMA_IRQHandler+0x8b8>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a6b      	ldr	r2, [pc, #428]	; (8007978 <HAL_DMA_IRQHandler+0xa30>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d018      	beq.n	8007800 <HAL_DMA_IRQHandler+0x8b8>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a6a      	ldr	r2, [pc, #424]	; (800797c <HAL_DMA_IRQHandler+0xa34>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d013      	beq.n	8007800 <HAL_DMA_IRQHandler+0x8b8>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a68      	ldr	r2, [pc, #416]	; (8007980 <HAL_DMA_IRQHandler+0xa38>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d00e      	beq.n	8007800 <HAL_DMA_IRQHandler+0x8b8>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a67      	ldr	r2, [pc, #412]	; (8007984 <HAL_DMA_IRQHandler+0xa3c>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d009      	beq.n	8007800 <HAL_DMA_IRQHandler+0x8b8>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a65      	ldr	r2, [pc, #404]	; (8007988 <HAL_DMA_IRQHandler+0xa40>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d004      	beq.n	8007800 <HAL_DMA_IRQHandler+0x8b8>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a64      	ldr	r2, [pc, #400]	; (800798c <HAL_DMA_IRQHandler+0xa44>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d108      	bne.n	8007812 <HAL_DMA_IRQHandler+0x8ca>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 0201 	bic.w	r2, r2, #1
 800780e:	601a      	str	r2, [r3, #0]
 8007810:	e007      	b.n	8007822 <HAL_DMA_IRQHandler+0x8da>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f022 0201 	bic.w	r2, r2, #1
 8007820:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	3301      	adds	r3, #1
 8007826:	60fb      	str	r3, [r7, #12]
 8007828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800782a:	429a      	cmp	r2, r3
 800782c:	d307      	bcc.n	800783e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0301 	and.w	r3, r3, #1
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1f2      	bne.n	8007822 <HAL_DMA_IRQHandler+0x8da>
 800783c:	e000      	b.n	8007840 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800783e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	2b00      	cmp	r3, #0
 800784c:	d004      	beq.n	8007858 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2203      	movs	r2, #3
 8007852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007856:	e003      	b.n	8007860 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800786c:	2b00      	cmp	r3, #0
 800786e:	f000 8272 	beq.w	8007d56 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	4798      	blx	r3
 800787a:	e26c      	b.n	8007d56 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a43      	ldr	r2, [pc, #268]	; (8007990 <HAL_DMA_IRQHandler+0xa48>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d022      	beq.n	80078cc <HAL_DMA_IRQHandler+0x984>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a42      	ldr	r2, [pc, #264]	; (8007994 <HAL_DMA_IRQHandler+0xa4c>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d01d      	beq.n	80078cc <HAL_DMA_IRQHandler+0x984>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a40      	ldr	r2, [pc, #256]	; (8007998 <HAL_DMA_IRQHandler+0xa50>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d018      	beq.n	80078cc <HAL_DMA_IRQHandler+0x984>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a3f      	ldr	r2, [pc, #252]	; (800799c <HAL_DMA_IRQHandler+0xa54>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d013      	beq.n	80078cc <HAL_DMA_IRQHandler+0x984>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a3d      	ldr	r2, [pc, #244]	; (80079a0 <HAL_DMA_IRQHandler+0xa58>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d00e      	beq.n	80078cc <HAL_DMA_IRQHandler+0x984>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a3c      	ldr	r2, [pc, #240]	; (80079a4 <HAL_DMA_IRQHandler+0xa5c>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d009      	beq.n	80078cc <HAL_DMA_IRQHandler+0x984>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a3a      	ldr	r2, [pc, #232]	; (80079a8 <HAL_DMA_IRQHandler+0xa60>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d004      	beq.n	80078cc <HAL_DMA_IRQHandler+0x984>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a39      	ldr	r2, [pc, #228]	; (80079ac <HAL_DMA_IRQHandler+0xa64>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d101      	bne.n	80078d0 <HAL_DMA_IRQHandler+0x988>
 80078cc:	2301      	movs	r3, #1
 80078ce:	e000      	b.n	80078d2 <HAL_DMA_IRQHandler+0x98a>
 80078d0:	2300      	movs	r3, #0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f000 823f 	beq.w	8007d56 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078e4:	f003 031f 	and.w	r3, r3, #31
 80078e8:	2204      	movs	r2, #4
 80078ea:	409a      	lsls	r2, r3
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	4013      	ands	r3, r2
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f000 80cd 	beq.w	8007a90 <HAL_DMA_IRQHandler+0xb48>
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	f003 0304 	and.w	r3, r3, #4
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 80c7 	beq.w	8007a90 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007906:	f003 031f 	and.w	r3, r3, #31
 800790a:	2204      	movs	r2, #4
 800790c:	409a      	lsls	r2, r3
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d049      	beq.n	80079b0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007922:	2b00      	cmp	r3, #0
 8007924:	d109      	bne.n	800793a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800792a:	2b00      	cmp	r3, #0
 800792c:	f000 8210 	beq.w	8007d50 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007938:	e20a      	b.n	8007d50 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793e:	2b00      	cmp	r3, #0
 8007940:	f000 8206 	beq.w	8007d50 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800794c:	e200      	b.n	8007d50 <HAL_DMA_IRQHandler+0xe08>
 800794e:	bf00      	nop
 8007950:	40020010 	.word	0x40020010
 8007954:	40020028 	.word	0x40020028
 8007958:	40020040 	.word	0x40020040
 800795c:	40020058 	.word	0x40020058
 8007960:	40020070 	.word	0x40020070
 8007964:	40020088 	.word	0x40020088
 8007968:	400200a0 	.word	0x400200a0
 800796c:	400200b8 	.word	0x400200b8
 8007970:	40020410 	.word	0x40020410
 8007974:	40020428 	.word	0x40020428
 8007978:	40020440 	.word	0x40020440
 800797c:	40020458 	.word	0x40020458
 8007980:	40020470 	.word	0x40020470
 8007984:	40020488 	.word	0x40020488
 8007988:	400204a0 	.word	0x400204a0
 800798c:	400204b8 	.word	0x400204b8
 8007990:	58025408 	.word	0x58025408
 8007994:	5802541c 	.word	0x5802541c
 8007998:	58025430 	.word	0x58025430
 800799c:	58025444 	.word	0x58025444
 80079a0:	58025458 	.word	0x58025458
 80079a4:	5802546c 	.word	0x5802546c
 80079a8:	58025480 	.word	0x58025480
 80079ac:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	f003 0320 	and.w	r3, r3, #32
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d160      	bne.n	8007a7c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a7f      	ldr	r2, [pc, #508]	; (8007bbc <HAL_DMA_IRQHandler+0xc74>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d04a      	beq.n	8007a5a <HAL_DMA_IRQHandler+0xb12>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a7d      	ldr	r2, [pc, #500]	; (8007bc0 <HAL_DMA_IRQHandler+0xc78>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d045      	beq.n	8007a5a <HAL_DMA_IRQHandler+0xb12>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a7c      	ldr	r2, [pc, #496]	; (8007bc4 <HAL_DMA_IRQHandler+0xc7c>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d040      	beq.n	8007a5a <HAL_DMA_IRQHandler+0xb12>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a7a      	ldr	r2, [pc, #488]	; (8007bc8 <HAL_DMA_IRQHandler+0xc80>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d03b      	beq.n	8007a5a <HAL_DMA_IRQHandler+0xb12>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a79      	ldr	r2, [pc, #484]	; (8007bcc <HAL_DMA_IRQHandler+0xc84>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d036      	beq.n	8007a5a <HAL_DMA_IRQHandler+0xb12>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a77      	ldr	r2, [pc, #476]	; (8007bd0 <HAL_DMA_IRQHandler+0xc88>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d031      	beq.n	8007a5a <HAL_DMA_IRQHandler+0xb12>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a76      	ldr	r2, [pc, #472]	; (8007bd4 <HAL_DMA_IRQHandler+0xc8c>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d02c      	beq.n	8007a5a <HAL_DMA_IRQHandler+0xb12>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a74      	ldr	r2, [pc, #464]	; (8007bd8 <HAL_DMA_IRQHandler+0xc90>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d027      	beq.n	8007a5a <HAL_DMA_IRQHandler+0xb12>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a73      	ldr	r2, [pc, #460]	; (8007bdc <HAL_DMA_IRQHandler+0xc94>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d022      	beq.n	8007a5a <HAL_DMA_IRQHandler+0xb12>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a71      	ldr	r2, [pc, #452]	; (8007be0 <HAL_DMA_IRQHandler+0xc98>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d01d      	beq.n	8007a5a <HAL_DMA_IRQHandler+0xb12>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a70      	ldr	r2, [pc, #448]	; (8007be4 <HAL_DMA_IRQHandler+0xc9c>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d018      	beq.n	8007a5a <HAL_DMA_IRQHandler+0xb12>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a6e      	ldr	r2, [pc, #440]	; (8007be8 <HAL_DMA_IRQHandler+0xca0>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d013      	beq.n	8007a5a <HAL_DMA_IRQHandler+0xb12>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a6d      	ldr	r2, [pc, #436]	; (8007bec <HAL_DMA_IRQHandler+0xca4>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d00e      	beq.n	8007a5a <HAL_DMA_IRQHandler+0xb12>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a6b      	ldr	r2, [pc, #428]	; (8007bf0 <HAL_DMA_IRQHandler+0xca8>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d009      	beq.n	8007a5a <HAL_DMA_IRQHandler+0xb12>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a6a      	ldr	r2, [pc, #424]	; (8007bf4 <HAL_DMA_IRQHandler+0xcac>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d004      	beq.n	8007a5a <HAL_DMA_IRQHandler+0xb12>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a68      	ldr	r2, [pc, #416]	; (8007bf8 <HAL_DMA_IRQHandler+0xcb0>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d108      	bne.n	8007a6c <HAL_DMA_IRQHandler+0xb24>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f022 0208 	bic.w	r2, r2, #8
 8007a68:	601a      	str	r2, [r3, #0]
 8007a6a:	e007      	b.n	8007a7c <HAL_DMA_IRQHandler+0xb34>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f022 0204 	bic.w	r2, r2, #4
 8007a7a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f000 8165 	beq.w	8007d50 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a8e:	e15f      	b.n	8007d50 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a94:	f003 031f 	and.w	r3, r3, #31
 8007a98:	2202      	movs	r2, #2
 8007a9a:	409a      	lsls	r2, r3
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 80c5 	beq.w	8007c30 <HAL_DMA_IRQHandler+0xce8>
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	f003 0302 	and.w	r3, r3, #2
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 80bf 	beq.w	8007c30 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ab6:	f003 031f 	and.w	r3, r3, #31
 8007aba:	2202      	movs	r2, #2
 8007abc:	409a      	lsls	r2, r3
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d018      	beq.n	8007afe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d109      	bne.n	8007aea <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f000 813a 	beq.w	8007d54 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ae8:	e134      	b.n	8007d54 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f000 8130 	beq.w	8007d54 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007afc:	e12a      	b.n	8007d54 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	f003 0320 	and.w	r3, r3, #32
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f040 8089 	bne.w	8007c1c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a2b      	ldr	r2, [pc, #172]	; (8007bbc <HAL_DMA_IRQHandler+0xc74>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d04a      	beq.n	8007baa <HAL_DMA_IRQHandler+0xc62>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a29      	ldr	r2, [pc, #164]	; (8007bc0 <HAL_DMA_IRQHandler+0xc78>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d045      	beq.n	8007baa <HAL_DMA_IRQHandler+0xc62>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a28      	ldr	r2, [pc, #160]	; (8007bc4 <HAL_DMA_IRQHandler+0xc7c>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d040      	beq.n	8007baa <HAL_DMA_IRQHandler+0xc62>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a26      	ldr	r2, [pc, #152]	; (8007bc8 <HAL_DMA_IRQHandler+0xc80>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d03b      	beq.n	8007baa <HAL_DMA_IRQHandler+0xc62>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a25      	ldr	r2, [pc, #148]	; (8007bcc <HAL_DMA_IRQHandler+0xc84>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d036      	beq.n	8007baa <HAL_DMA_IRQHandler+0xc62>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a23      	ldr	r2, [pc, #140]	; (8007bd0 <HAL_DMA_IRQHandler+0xc88>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d031      	beq.n	8007baa <HAL_DMA_IRQHandler+0xc62>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a22      	ldr	r2, [pc, #136]	; (8007bd4 <HAL_DMA_IRQHandler+0xc8c>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d02c      	beq.n	8007baa <HAL_DMA_IRQHandler+0xc62>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a20      	ldr	r2, [pc, #128]	; (8007bd8 <HAL_DMA_IRQHandler+0xc90>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d027      	beq.n	8007baa <HAL_DMA_IRQHandler+0xc62>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a1f      	ldr	r2, [pc, #124]	; (8007bdc <HAL_DMA_IRQHandler+0xc94>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d022      	beq.n	8007baa <HAL_DMA_IRQHandler+0xc62>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a1d      	ldr	r2, [pc, #116]	; (8007be0 <HAL_DMA_IRQHandler+0xc98>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d01d      	beq.n	8007baa <HAL_DMA_IRQHandler+0xc62>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a1c      	ldr	r2, [pc, #112]	; (8007be4 <HAL_DMA_IRQHandler+0xc9c>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d018      	beq.n	8007baa <HAL_DMA_IRQHandler+0xc62>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a1a      	ldr	r2, [pc, #104]	; (8007be8 <HAL_DMA_IRQHandler+0xca0>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d013      	beq.n	8007baa <HAL_DMA_IRQHandler+0xc62>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a19      	ldr	r2, [pc, #100]	; (8007bec <HAL_DMA_IRQHandler+0xca4>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d00e      	beq.n	8007baa <HAL_DMA_IRQHandler+0xc62>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a17      	ldr	r2, [pc, #92]	; (8007bf0 <HAL_DMA_IRQHandler+0xca8>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d009      	beq.n	8007baa <HAL_DMA_IRQHandler+0xc62>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a16      	ldr	r2, [pc, #88]	; (8007bf4 <HAL_DMA_IRQHandler+0xcac>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d004      	beq.n	8007baa <HAL_DMA_IRQHandler+0xc62>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a14      	ldr	r2, [pc, #80]	; (8007bf8 <HAL_DMA_IRQHandler+0xcb0>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d128      	bne.n	8007bfc <HAL_DMA_IRQHandler+0xcb4>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f022 0214 	bic.w	r2, r2, #20
 8007bb8:	601a      	str	r2, [r3, #0]
 8007bba:	e027      	b.n	8007c0c <HAL_DMA_IRQHandler+0xcc4>
 8007bbc:	40020010 	.word	0x40020010
 8007bc0:	40020028 	.word	0x40020028
 8007bc4:	40020040 	.word	0x40020040
 8007bc8:	40020058 	.word	0x40020058
 8007bcc:	40020070 	.word	0x40020070
 8007bd0:	40020088 	.word	0x40020088
 8007bd4:	400200a0 	.word	0x400200a0
 8007bd8:	400200b8 	.word	0x400200b8
 8007bdc:	40020410 	.word	0x40020410
 8007be0:	40020428 	.word	0x40020428
 8007be4:	40020440 	.word	0x40020440
 8007be8:	40020458 	.word	0x40020458
 8007bec:	40020470 	.word	0x40020470
 8007bf0:	40020488 	.word	0x40020488
 8007bf4:	400204a0 	.word	0x400204a0
 8007bf8:	400204b8 	.word	0x400204b8
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f022 020a 	bic.w	r2, r2, #10
 8007c0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f000 8097 	beq.w	8007d54 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c2e:	e091      	b.n	8007d54 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c34:	f003 031f 	and.w	r3, r3, #31
 8007c38:	2208      	movs	r2, #8
 8007c3a:	409a      	lsls	r2, r3
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	4013      	ands	r3, r2
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 8088 	beq.w	8007d56 <HAL_DMA_IRQHandler+0xe0e>
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	f003 0308 	and.w	r3, r3, #8
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 8082 	beq.w	8007d56 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a41      	ldr	r2, [pc, #260]	; (8007d5c <HAL_DMA_IRQHandler+0xe14>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d04a      	beq.n	8007cf2 <HAL_DMA_IRQHandler+0xdaa>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a3f      	ldr	r2, [pc, #252]	; (8007d60 <HAL_DMA_IRQHandler+0xe18>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d045      	beq.n	8007cf2 <HAL_DMA_IRQHandler+0xdaa>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a3e      	ldr	r2, [pc, #248]	; (8007d64 <HAL_DMA_IRQHandler+0xe1c>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d040      	beq.n	8007cf2 <HAL_DMA_IRQHandler+0xdaa>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a3c      	ldr	r2, [pc, #240]	; (8007d68 <HAL_DMA_IRQHandler+0xe20>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d03b      	beq.n	8007cf2 <HAL_DMA_IRQHandler+0xdaa>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a3b      	ldr	r2, [pc, #236]	; (8007d6c <HAL_DMA_IRQHandler+0xe24>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d036      	beq.n	8007cf2 <HAL_DMA_IRQHandler+0xdaa>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a39      	ldr	r2, [pc, #228]	; (8007d70 <HAL_DMA_IRQHandler+0xe28>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d031      	beq.n	8007cf2 <HAL_DMA_IRQHandler+0xdaa>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a38      	ldr	r2, [pc, #224]	; (8007d74 <HAL_DMA_IRQHandler+0xe2c>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d02c      	beq.n	8007cf2 <HAL_DMA_IRQHandler+0xdaa>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a36      	ldr	r2, [pc, #216]	; (8007d78 <HAL_DMA_IRQHandler+0xe30>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d027      	beq.n	8007cf2 <HAL_DMA_IRQHandler+0xdaa>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a35      	ldr	r2, [pc, #212]	; (8007d7c <HAL_DMA_IRQHandler+0xe34>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d022      	beq.n	8007cf2 <HAL_DMA_IRQHandler+0xdaa>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a33      	ldr	r2, [pc, #204]	; (8007d80 <HAL_DMA_IRQHandler+0xe38>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d01d      	beq.n	8007cf2 <HAL_DMA_IRQHandler+0xdaa>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a32      	ldr	r2, [pc, #200]	; (8007d84 <HAL_DMA_IRQHandler+0xe3c>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d018      	beq.n	8007cf2 <HAL_DMA_IRQHandler+0xdaa>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a30      	ldr	r2, [pc, #192]	; (8007d88 <HAL_DMA_IRQHandler+0xe40>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d013      	beq.n	8007cf2 <HAL_DMA_IRQHandler+0xdaa>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a2f      	ldr	r2, [pc, #188]	; (8007d8c <HAL_DMA_IRQHandler+0xe44>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d00e      	beq.n	8007cf2 <HAL_DMA_IRQHandler+0xdaa>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a2d      	ldr	r2, [pc, #180]	; (8007d90 <HAL_DMA_IRQHandler+0xe48>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d009      	beq.n	8007cf2 <HAL_DMA_IRQHandler+0xdaa>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a2c      	ldr	r2, [pc, #176]	; (8007d94 <HAL_DMA_IRQHandler+0xe4c>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d004      	beq.n	8007cf2 <HAL_DMA_IRQHandler+0xdaa>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a2a      	ldr	r2, [pc, #168]	; (8007d98 <HAL_DMA_IRQHandler+0xe50>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d108      	bne.n	8007d04 <HAL_DMA_IRQHandler+0xdbc>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f022 021c 	bic.w	r2, r2, #28
 8007d00:	601a      	str	r2, [r3, #0]
 8007d02:	e007      	b.n	8007d14 <HAL_DMA_IRQHandler+0xdcc>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f022 020e 	bic.w	r2, r2, #14
 8007d12:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d18:	f003 031f 	and.w	r3, r3, #31
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	409a      	lsls	r2, r3
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d009      	beq.n	8007d56 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	4798      	blx	r3
 8007d4a:	e004      	b.n	8007d56 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007d4c:	bf00      	nop
 8007d4e:	e002      	b.n	8007d56 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d50:	bf00      	nop
 8007d52:	e000      	b.n	8007d56 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d54:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007d56:	3728      	adds	r7, #40	; 0x28
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	40020010 	.word	0x40020010
 8007d60:	40020028 	.word	0x40020028
 8007d64:	40020040 	.word	0x40020040
 8007d68:	40020058 	.word	0x40020058
 8007d6c:	40020070 	.word	0x40020070
 8007d70:	40020088 	.word	0x40020088
 8007d74:	400200a0 	.word	0x400200a0
 8007d78:	400200b8 	.word	0x400200b8
 8007d7c:	40020410 	.word	0x40020410
 8007d80:	40020428 	.word	0x40020428
 8007d84:	40020440 	.word	0x40020440
 8007d88:	40020458 	.word	0x40020458
 8007d8c:	40020470 	.word	0x40020470
 8007d90:	40020488 	.word	0x40020488
 8007d94:	400204a0 	.word	0x400204a0
 8007d98:	400204b8 	.word	0x400204b8

08007d9c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b087      	sub	sp, #28
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
 8007da8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dae:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007db4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a7f      	ldr	r2, [pc, #508]	; (8007fb8 <DMA_SetConfig+0x21c>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d072      	beq.n	8007ea6 <DMA_SetConfig+0x10a>
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a7d      	ldr	r2, [pc, #500]	; (8007fbc <DMA_SetConfig+0x220>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d06d      	beq.n	8007ea6 <DMA_SetConfig+0x10a>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a7c      	ldr	r2, [pc, #496]	; (8007fc0 <DMA_SetConfig+0x224>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d068      	beq.n	8007ea6 <DMA_SetConfig+0x10a>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a7a      	ldr	r2, [pc, #488]	; (8007fc4 <DMA_SetConfig+0x228>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d063      	beq.n	8007ea6 <DMA_SetConfig+0x10a>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a79      	ldr	r2, [pc, #484]	; (8007fc8 <DMA_SetConfig+0x22c>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d05e      	beq.n	8007ea6 <DMA_SetConfig+0x10a>
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a77      	ldr	r2, [pc, #476]	; (8007fcc <DMA_SetConfig+0x230>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d059      	beq.n	8007ea6 <DMA_SetConfig+0x10a>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a76      	ldr	r2, [pc, #472]	; (8007fd0 <DMA_SetConfig+0x234>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d054      	beq.n	8007ea6 <DMA_SetConfig+0x10a>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a74      	ldr	r2, [pc, #464]	; (8007fd4 <DMA_SetConfig+0x238>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d04f      	beq.n	8007ea6 <DMA_SetConfig+0x10a>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a73      	ldr	r2, [pc, #460]	; (8007fd8 <DMA_SetConfig+0x23c>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d04a      	beq.n	8007ea6 <DMA_SetConfig+0x10a>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a71      	ldr	r2, [pc, #452]	; (8007fdc <DMA_SetConfig+0x240>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d045      	beq.n	8007ea6 <DMA_SetConfig+0x10a>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a70      	ldr	r2, [pc, #448]	; (8007fe0 <DMA_SetConfig+0x244>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d040      	beq.n	8007ea6 <DMA_SetConfig+0x10a>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a6e      	ldr	r2, [pc, #440]	; (8007fe4 <DMA_SetConfig+0x248>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d03b      	beq.n	8007ea6 <DMA_SetConfig+0x10a>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a6d      	ldr	r2, [pc, #436]	; (8007fe8 <DMA_SetConfig+0x24c>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d036      	beq.n	8007ea6 <DMA_SetConfig+0x10a>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a6b      	ldr	r2, [pc, #428]	; (8007fec <DMA_SetConfig+0x250>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d031      	beq.n	8007ea6 <DMA_SetConfig+0x10a>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a6a      	ldr	r2, [pc, #424]	; (8007ff0 <DMA_SetConfig+0x254>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d02c      	beq.n	8007ea6 <DMA_SetConfig+0x10a>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a68      	ldr	r2, [pc, #416]	; (8007ff4 <DMA_SetConfig+0x258>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d027      	beq.n	8007ea6 <DMA_SetConfig+0x10a>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a67      	ldr	r2, [pc, #412]	; (8007ff8 <DMA_SetConfig+0x25c>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d022      	beq.n	8007ea6 <DMA_SetConfig+0x10a>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a65      	ldr	r2, [pc, #404]	; (8007ffc <DMA_SetConfig+0x260>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d01d      	beq.n	8007ea6 <DMA_SetConfig+0x10a>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a64      	ldr	r2, [pc, #400]	; (8008000 <DMA_SetConfig+0x264>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d018      	beq.n	8007ea6 <DMA_SetConfig+0x10a>
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a62      	ldr	r2, [pc, #392]	; (8008004 <DMA_SetConfig+0x268>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d013      	beq.n	8007ea6 <DMA_SetConfig+0x10a>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a61      	ldr	r2, [pc, #388]	; (8008008 <DMA_SetConfig+0x26c>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d00e      	beq.n	8007ea6 <DMA_SetConfig+0x10a>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a5f      	ldr	r2, [pc, #380]	; (800800c <DMA_SetConfig+0x270>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d009      	beq.n	8007ea6 <DMA_SetConfig+0x10a>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a5e      	ldr	r2, [pc, #376]	; (8008010 <DMA_SetConfig+0x274>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d004      	beq.n	8007ea6 <DMA_SetConfig+0x10a>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a5c      	ldr	r2, [pc, #368]	; (8008014 <DMA_SetConfig+0x278>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d101      	bne.n	8007eaa <DMA_SetConfig+0x10e>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e000      	b.n	8007eac <DMA_SetConfig+0x110>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00d      	beq.n	8007ecc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007eb8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d004      	beq.n	8007ecc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007eca:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a39      	ldr	r2, [pc, #228]	; (8007fb8 <DMA_SetConfig+0x21c>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d04a      	beq.n	8007f6c <DMA_SetConfig+0x1d0>
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a38      	ldr	r2, [pc, #224]	; (8007fbc <DMA_SetConfig+0x220>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d045      	beq.n	8007f6c <DMA_SetConfig+0x1d0>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a36      	ldr	r2, [pc, #216]	; (8007fc0 <DMA_SetConfig+0x224>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d040      	beq.n	8007f6c <DMA_SetConfig+0x1d0>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a35      	ldr	r2, [pc, #212]	; (8007fc4 <DMA_SetConfig+0x228>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d03b      	beq.n	8007f6c <DMA_SetConfig+0x1d0>
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a33      	ldr	r2, [pc, #204]	; (8007fc8 <DMA_SetConfig+0x22c>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d036      	beq.n	8007f6c <DMA_SetConfig+0x1d0>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a32      	ldr	r2, [pc, #200]	; (8007fcc <DMA_SetConfig+0x230>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d031      	beq.n	8007f6c <DMA_SetConfig+0x1d0>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a30      	ldr	r2, [pc, #192]	; (8007fd0 <DMA_SetConfig+0x234>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d02c      	beq.n	8007f6c <DMA_SetConfig+0x1d0>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a2f      	ldr	r2, [pc, #188]	; (8007fd4 <DMA_SetConfig+0x238>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d027      	beq.n	8007f6c <DMA_SetConfig+0x1d0>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a2d      	ldr	r2, [pc, #180]	; (8007fd8 <DMA_SetConfig+0x23c>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d022      	beq.n	8007f6c <DMA_SetConfig+0x1d0>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a2c      	ldr	r2, [pc, #176]	; (8007fdc <DMA_SetConfig+0x240>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d01d      	beq.n	8007f6c <DMA_SetConfig+0x1d0>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a2a      	ldr	r2, [pc, #168]	; (8007fe0 <DMA_SetConfig+0x244>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d018      	beq.n	8007f6c <DMA_SetConfig+0x1d0>
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a29      	ldr	r2, [pc, #164]	; (8007fe4 <DMA_SetConfig+0x248>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d013      	beq.n	8007f6c <DMA_SetConfig+0x1d0>
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a27      	ldr	r2, [pc, #156]	; (8007fe8 <DMA_SetConfig+0x24c>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d00e      	beq.n	8007f6c <DMA_SetConfig+0x1d0>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a26      	ldr	r2, [pc, #152]	; (8007fec <DMA_SetConfig+0x250>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d009      	beq.n	8007f6c <DMA_SetConfig+0x1d0>
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a24      	ldr	r2, [pc, #144]	; (8007ff0 <DMA_SetConfig+0x254>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d004      	beq.n	8007f6c <DMA_SetConfig+0x1d0>
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a23      	ldr	r2, [pc, #140]	; (8007ff4 <DMA_SetConfig+0x258>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d101      	bne.n	8007f70 <DMA_SetConfig+0x1d4>
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e000      	b.n	8007f72 <DMA_SetConfig+0x1d6>
 8007f70:	2300      	movs	r3, #0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d059      	beq.n	800802a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f7a:	f003 031f 	and.w	r3, r3, #31
 8007f7e:	223f      	movs	r2, #63	; 0x3f
 8007f80:	409a      	lsls	r2, r3
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007f94:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	683a      	ldr	r2, [r7, #0]
 8007f9c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	2b40      	cmp	r3, #64	; 0x40
 8007fa4:	d138      	bne.n	8008018 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007fb6:	e086      	b.n	80080c6 <DMA_SetConfig+0x32a>
 8007fb8:	40020010 	.word	0x40020010
 8007fbc:	40020028 	.word	0x40020028
 8007fc0:	40020040 	.word	0x40020040
 8007fc4:	40020058 	.word	0x40020058
 8007fc8:	40020070 	.word	0x40020070
 8007fcc:	40020088 	.word	0x40020088
 8007fd0:	400200a0 	.word	0x400200a0
 8007fd4:	400200b8 	.word	0x400200b8
 8007fd8:	40020410 	.word	0x40020410
 8007fdc:	40020428 	.word	0x40020428
 8007fe0:	40020440 	.word	0x40020440
 8007fe4:	40020458 	.word	0x40020458
 8007fe8:	40020470 	.word	0x40020470
 8007fec:	40020488 	.word	0x40020488
 8007ff0:	400204a0 	.word	0x400204a0
 8007ff4:	400204b8 	.word	0x400204b8
 8007ff8:	58025408 	.word	0x58025408
 8007ffc:	5802541c 	.word	0x5802541c
 8008000:	58025430 	.word	0x58025430
 8008004:	58025444 	.word	0x58025444
 8008008:	58025458 	.word	0x58025458
 800800c:	5802546c 	.word	0x5802546c
 8008010:	58025480 	.word	0x58025480
 8008014:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	60da      	str	r2, [r3, #12]
}
 8008028:	e04d      	b.n	80080c6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a29      	ldr	r2, [pc, #164]	; (80080d4 <DMA_SetConfig+0x338>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d022      	beq.n	800807a <DMA_SetConfig+0x2de>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a27      	ldr	r2, [pc, #156]	; (80080d8 <DMA_SetConfig+0x33c>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d01d      	beq.n	800807a <DMA_SetConfig+0x2de>
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a26      	ldr	r2, [pc, #152]	; (80080dc <DMA_SetConfig+0x340>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d018      	beq.n	800807a <DMA_SetConfig+0x2de>
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a24      	ldr	r2, [pc, #144]	; (80080e0 <DMA_SetConfig+0x344>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d013      	beq.n	800807a <DMA_SetConfig+0x2de>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a23      	ldr	r2, [pc, #140]	; (80080e4 <DMA_SetConfig+0x348>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d00e      	beq.n	800807a <DMA_SetConfig+0x2de>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a21      	ldr	r2, [pc, #132]	; (80080e8 <DMA_SetConfig+0x34c>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d009      	beq.n	800807a <DMA_SetConfig+0x2de>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a20      	ldr	r2, [pc, #128]	; (80080ec <DMA_SetConfig+0x350>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d004      	beq.n	800807a <DMA_SetConfig+0x2de>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a1e      	ldr	r2, [pc, #120]	; (80080f0 <DMA_SetConfig+0x354>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d101      	bne.n	800807e <DMA_SetConfig+0x2e2>
 800807a:	2301      	movs	r3, #1
 800807c:	e000      	b.n	8008080 <DMA_SetConfig+0x2e4>
 800807e:	2300      	movs	r3, #0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d020      	beq.n	80080c6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008088:	f003 031f 	and.w	r3, r3, #31
 800808c:	2201      	movs	r2, #1
 800808e:	409a      	lsls	r2, r3
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	683a      	ldr	r2, [r7, #0]
 800809a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	2b40      	cmp	r3, #64	; 0x40
 80080a2:	d108      	bne.n	80080b6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	60da      	str	r2, [r3, #12]
}
 80080b4:	e007      	b.n	80080c6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	60da      	str	r2, [r3, #12]
}
 80080c6:	bf00      	nop
 80080c8:	371c      	adds	r7, #28
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	58025408 	.word	0x58025408
 80080d8:	5802541c 	.word	0x5802541c
 80080dc:	58025430 	.word	0x58025430
 80080e0:	58025444 	.word	0x58025444
 80080e4:	58025458 	.word	0x58025458
 80080e8:	5802546c 	.word	0x5802546c
 80080ec:	58025480 	.word	0x58025480
 80080f0:	58025494 	.word	0x58025494

080080f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a42      	ldr	r2, [pc, #264]	; (800820c <DMA_CalcBaseAndBitshift+0x118>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d04a      	beq.n	800819c <DMA_CalcBaseAndBitshift+0xa8>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a41      	ldr	r2, [pc, #260]	; (8008210 <DMA_CalcBaseAndBitshift+0x11c>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d045      	beq.n	800819c <DMA_CalcBaseAndBitshift+0xa8>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a3f      	ldr	r2, [pc, #252]	; (8008214 <DMA_CalcBaseAndBitshift+0x120>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d040      	beq.n	800819c <DMA_CalcBaseAndBitshift+0xa8>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a3e      	ldr	r2, [pc, #248]	; (8008218 <DMA_CalcBaseAndBitshift+0x124>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d03b      	beq.n	800819c <DMA_CalcBaseAndBitshift+0xa8>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a3c      	ldr	r2, [pc, #240]	; (800821c <DMA_CalcBaseAndBitshift+0x128>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d036      	beq.n	800819c <DMA_CalcBaseAndBitshift+0xa8>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a3b      	ldr	r2, [pc, #236]	; (8008220 <DMA_CalcBaseAndBitshift+0x12c>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d031      	beq.n	800819c <DMA_CalcBaseAndBitshift+0xa8>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a39      	ldr	r2, [pc, #228]	; (8008224 <DMA_CalcBaseAndBitshift+0x130>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d02c      	beq.n	800819c <DMA_CalcBaseAndBitshift+0xa8>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a38      	ldr	r2, [pc, #224]	; (8008228 <DMA_CalcBaseAndBitshift+0x134>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d027      	beq.n	800819c <DMA_CalcBaseAndBitshift+0xa8>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a36      	ldr	r2, [pc, #216]	; (800822c <DMA_CalcBaseAndBitshift+0x138>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d022      	beq.n	800819c <DMA_CalcBaseAndBitshift+0xa8>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a35      	ldr	r2, [pc, #212]	; (8008230 <DMA_CalcBaseAndBitshift+0x13c>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d01d      	beq.n	800819c <DMA_CalcBaseAndBitshift+0xa8>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a33      	ldr	r2, [pc, #204]	; (8008234 <DMA_CalcBaseAndBitshift+0x140>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d018      	beq.n	800819c <DMA_CalcBaseAndBitshift+0xa8>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a32      	ldr	r2, [pc, #200]	; (8008238 <DMA_CalcBaseAndBitshift+0x144>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d013      	beq.n	800819c <DMA_CalcBaseAndBitshift+0xa8>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a30      	ldr	r2, [pc, #192]	; (800823c <DMA_CalcBaseAndBitshift+0x148>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d00e      	beq.n	800819c <DMA_CalcBaseAndBitshift+0xa8>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a2f      	ldr	r2, [pc, #188]	; (8008240 <DMA_CalcBaseAndBitshift+0x14c>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d009      	beq.n	800819c <DMA_CalcBaseAndBitshift+0xa8>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a2d      	ldr	r2, [pc, #180]	; (8008244 <DMA_CalcBaseAndBitshift+0x150>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d004      	beq.n	800819c <DMA_CalcBaseAndBitshift+0xa8>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a2c      	ldr	r2, [pc, #176]	; (8008248 <DMA_CalcBaseAndBitshift+0x154>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d101      	bne.n	80081a0 <DMA_CalcBaseAndBitshift+0xac>
 800819c:	2301      	movs	r3, #1
 800819e:	e000      	b.n	80081a2 <DMA_CalcBaseAndBitshift+0xae>
 80081a0:	2300      	movs	r3, #0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d024      	beq.n	80081f0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	3b10      	subs	r3, #16
 80081ae:	4a27      	ldr	r2, [pc, #156]	; (800824c <DMA_CalcBaseAndBitshift+0x158>)
 80081b0:	fba2 2303 	umull	r2, r3, r2, r3
 80081b4:	091b      	lsrs	r3, r3, #4
 80081b6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f003 0307 	and.w	r3, r3, #7
 80081be:	4a24      	ldr	r2, [pc, #144]	; (8008250 <DMA_CalcBaseAndBitshift+0x15c>)
 80081c0:	5cd3      	ldrb	r3, [r2, r3]
 80081c2:	461a      	mov	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2b03      	cmp	r3, #3
 80081cc:	d908      	bls.n	80081e0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	461a      	mov	r2, r3
 80081d4:	4b1f      	ldr	r3, [pc, #124]	; (8008254 <DMA_CalcBaseAndBitshift+0x160>)
 80081d6:	4013      	ands	r3, r2
 80081d8:	1d1a      	adds	r2, r3, #4
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	659a      	str	r2, [r3, #88]	; 0x58
 80081de:	e00d      	b.n	80081fc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	461a      	mov	r2, r3
 80081e6:	4b1b      	ldr	r3, [pc, #108]	; (8008254 <DMA_CalcBaseAndBitshift+0x160>)
 80081e8:	4013      	ands	r3, r2
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	6593      	str	r3, [r2, #88]	; 0x58
 80081ee:	e005      	b.n	80081fc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008200:	4618      	mov	r0, r3
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr
 800820c:	40020010 	.word	0x40020010
 8008210:	40020028 	.word	0x40020028
 8008214:	40020040 	.word	0x40020040
 8008218:	40020058 	.word	0x40020058
 800821c:	40020070 	.word	0x40020070
 8008220:	40020088 	.word	0x40020088
 8008224:	400200a0 	.word	0x400200a0
 8008228:	400200b8 	.word	0x400200b8
 800822c:	40020410 	.word	0x40020410
 8008230:	40020428 	.word	0x40020428
 8008234:	40020440 	.word	0x40020440
 8008238:	40020458 	.word	0x40020458
 800823c:	40020470 	.word	0x40020470
 8008240:	40020488 	.word	0x40020488
 8008244:	400204a0 	.word	0x400204a0
 8008248:	400204b8 	.word	0x400204b8
 800824c:	aaaaaaab 	.word	0xaaaaaaab
 8008250:	08020050 	.word	0x08020050
 8008254:	fffffc00 	.word	0xfffffc00

08008258 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008258:	b480      	push	{r7}
 800825a:	b085      	sub	sp, #20
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008260:	2300      	movs	r3, #0
 8008262:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d120      	bne.n	80082ae <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008270:	2b03      	cmp	r3, #3
 8008272:	d858      	bhi.n	8008326 <DMA_CheckFifoParam+0xce>
 8008274:	a201      	add	r2, pc, #4	; (adr r2, 800827c <DMA_CheckFifoParam+0x24>)
 8008276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827a:	bf00      	nop
 800827c:	0800828d 	.word	0x0800828d
 8008280:	0800829f 	.word	0x0800829f
 8008284:	0800828d 	.word	0x0800828d
 8008288:	08008327 	.word	0x08008327
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008290:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008294:	2b00      	cmp	r3, #0
 8008296:	d048      	beq.n	800832a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800829c:	e045      	b.n	800832a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80082a6:	d142      	bne.n	800832e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80082ac:	e03f      	b.n	800832e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082b6:	d123      	bne.n	8008300 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082bc:	2b03      	cmp	r3, #3
 80082be:	d838      	bhi.n	8008332 <DMA_CheckFifoParam+0xda>
 80082c0:	a201      	add	r2, pc, #4	; (adr r2, 80082c8 <DMA_CheckFifoParam+0x70>)
 80082c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c6:	bf00      	nop
 80082c8:	080082d9 	.word	0x080082d9
 80082cc:	080082df 	.word	0x080082df
 80082d0:	080082d9 	.word	0x080082d9
 80082d4:	080082f1 	.word	0x080082f1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	73fb      	strb	r3, [r7, #15]
        break;
 80082dc:	e030      	b.n	8008340 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d025      	beq.n	8008336 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80082ee:	e022      	b.n	8008336 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80082f8:	d11f      	bne.n	800833a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80082fe:	e01c      	b.n	800833a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008304:	2b02      	cmp	r3, #2
 8008306:	d902      	bls.n	800830e <DMA_CheckFifoParam+0xb6>
 8008308:	2b03      	cmp	r3, #3
 800830a:	d003      	beq.n	8008314 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800830c:	e018      	b.n	8008340 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	73fb      	strb	r3, [r7, #15]
        break;
 8008312:	e015      	b.n	8008340 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008318:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00e      	beq.n	800833e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	73fb      	strb	r3, [r7, #15]
    break;
 8008324:	e00b      	b.n	800833e <DMA_CheckFifoParam+0xe6>
        break;
 8008326:	bf00      	nop
 8008328:	e00a      	b.n	8008340 <DMA_CheckFifoParam+0xe8>
        break;
 800832a:	bf00      	nop
 800832c:	e008      	b.n	8008340 <DMA_CheckFifoParam+0xe8>
        break;
 800832e:	bf00      	nop
 8008330:	e006      	b.n	8008340 <DMA_CheckFifoParam+0xe8>
        break;
 8008332:	bf00      	nop
 8008334:	e004      	b.n	8008340 <DMA_CheckFifoParam+0xe8>
        break;
 8008336:	bf00      	nop
 8008338:	e002      	b.n	8008340 <DMA_CheckFifoParam+0xe8>
        break;
 800833a:	bf00      	nop
 800833c:	e000      	b.n	8008340 <DMA_CheckFifoParam+0xe8>
    break;
 800833e:	bf00      	nop
    }
  }

  return status;
 8008340:	7bfb      	ldrb	r3, [r7, #15]
}
 8008342:	4618      	mov	r0, r3
 8008344:	3714      	adds	r7, #20
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop

08008350 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a38      	ldr	r2, [pc, #224]	; (8008444 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d022      	beq.n	80083ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a36      	ldr	r2, [pc, #216]	; (8008448 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d01d      	beq.n	80083ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a35      	ldr	r2, [pc, #212]	; (800844c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d018      	beq.n	80083ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a33      	ldr	r2, [pc, #204]	; (8008450 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d013      	beq.n	80083ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a32      	ldr	r2, [pc, #200]	; (8008454 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d00e      	beq.n	80083ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a30      	ldr	r2, [pc, #192]	; (8008458 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d009      	beq.n	80083ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a2f      	ldr	r2, [pc, #188]	; (800845c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d004      	beq.n	80083ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a2d      	ldr	r2, [pc, #180]	; (8008460 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d101      	bne.n	80083b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80083ae:	2301      	movs	r3, #1
 80083b0:	e000      	b.n	80083b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80083b2:	2300      	movs	r3, #0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d01a      	beq.n	80083ee <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	3b08      	subs	r3, #8
 80083c0:	4a28      	ldr	r2, [pc, #160]	; (8008464 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80083c2:	fba2 2303 	umull	r2, r3, r2, r3
 80083c6:	091b      	lsrs	r3, r3, #4
 80083c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80083ca:	68fa      	ldr	r2, [r7, #12]
 80083cc:	4b26      	ldr	r3, [pc, #152]	; (8008468 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80083ce:	4413      	add	r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	461a      	mov	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a24      	ldr	r2, [pc, #144]	; (800846c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80083dc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f003 031f 	and.w	r3, r3, #31
 80083e4:	2201      	movs	r2, #1
 80083e6:	409a      	lsls	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80083ec:	e024      	b.n	8008438 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	3b10      	subs	r3, #16
 80083f6:	4a1e      	ldr	r2, [pc, #120]	; (8008470 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80083f8:	fba2 2303 	umull	r2, r3, r2, r3
 80083fc:	091b      	lsrs	r3, r3, #4
 80083fe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	4a1c      	ldr	r2, [pc, #112]	; (8008474 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d806      	bhi.n	8008416 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	4a1b      	ldr	r2, [pc, #108]	; (8008478 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d902      	bls.n	8008416 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	3308      	adds	r3, #8
 8008414:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	4b18      	ldr	r3, [pc, #96]	; (800847c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800841a:	4413      	add	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	461a      	mov	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a16      	ldr	r2, [pc, #88]	; (8008480 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008428:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f003 031f 	and.w	r3, r3, #31
 8008430:	2201      	movs	r2, #1
 8008432:	409a      	lsls	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008438:	bf00      	nop
 800843a:	3714      	adds	r7, #20
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr
 8008444:	58025408 	.word	0x58025408
 8008448:	5802541c 	.word	0x5802541c
 800844c:	58025430 	.word	0x58025430
 8008450:	58025444 	.word	0x58025444
 8008454:	58025458 	.word	0x58025458
 8008458:	5802546c 	.word	0x5802546c
 800845c:	58025480 	.word	0x58025480
 8008460:	58025494 	.word	0x58025494
 8008464:	cccccccd 	.word	0xcccccccd
 8008468:	16009600 	.word	0x16009600
 800846c:	58025880 	.word	0x58025880
 8008470:	aaaaaaab 	.word	0xaaaaaaab
 8008474:	400204b8 	.word	0x400204b8
 8008478:	4002040f 	.word	0x4002040f
 800847c:	10008200 	.word	0x10008200
 8008480:	40020880 	.word	0x40020880

08008484 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	b2db      	uxtb	r3, r3
 8008492:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d04a      	beq.n	8008530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2b08      	cmp	r3, #8
 800849e:	d847      	bhi.n	8008530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a25      	ldr	r2, [pc, #148]	; (800853c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d022      	beq.n	80084f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a24      	ldr	r2, [pc, #144]	; (8008540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d01d      	beq.n	80084f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a22      	ldr	r2, [pc, #136]	; (8008544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d018      	beq.n	80084f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a21      	ldr	r2, [pc, #132]	; (8008548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d013      	beq.n	80084f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a1f      	ldr	r2, [pc, #124]	; (800854c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d00e      	beq.n	80084f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a1e      	ldr	r2, [pc, #120]	; (8008550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d009      	beq.n	80084f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a1c      	ldr	r2, [pc, #112]	; (8008554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d004      	beq.n	80084f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a1b      	ldr	r2, [pc, #108]	; (8008558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d101      	bne.n	80084f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80084f0:	2301      	movs	r3, #1
 80084f2:	e000      	b.n	80084f6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80084f4:	2300      	movs	r3, #0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00a      	beq.n	8008510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	4b17      	ldr	r3, [pc, #92]	; (800855c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80084fe:	4413      	add	r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	461a      	mov	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a15      	ldr	r2, [pc, #84]	; (8008560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800850c:	671a      	str	r2, [r3, #112]	; 0x70
 800850e:	e009      	b.n	8008524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	4b14      	ldr	r3, [pc, #80]	; (8008564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008514:	4413      	add	r3, r2
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	461a      	mov	r2, r3
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a11      	ldr	r2, [pc, #68]	; (8008568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008522:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	3b01      	subs	r3, #1
 8008528:	2201      	movs	r2, #1
 800852a:	409a      	lsls	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008530:	bf00      	nop
 8008532:	3714      	adds	r7, #20
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr
 800853c:	58025408 	.word	0x58025408
 8008540:	5802541c 	.word	0x5802541c
 8008544:	58025430 	.word	0x58025430
 8008548:	58025444 	.word	0x58025444
 800854c:	58025458 	.word	0x58025458
 8008550:	5802546c 	.word	0x5802546c
 8008554:	58025480 	.word	0x58025480
 8008558:	58025494 	.word	0x58025494
 800855c:	1600963f 	.word	0x1600963f
 8008560:	58025940 	.word	0x58025940
 8008564:	1000823f 	.word	0x1000823f
 8008568:	40020940 	.word	0x40020940

0800856c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b098      	sub	sp, #96	; 0x60
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8008574:	4a84      	ldr	r2, [pc, #528]	; (8008788 <HAL_FDCAN_Init+0x21c>)
 8008576:	f107 030c 	add.w	r3, r7, #12
 800857a:	4611      	mov	r1, r2
 800857c:	224c      	movs	r2, #76	; 0x4c
 800857e:	4618      	mov	r0, r3
 8008580:	f013 fcd7 	bl	801bf32 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d101      	bne.n	800858e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e1c6      	b.n	800891c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a7e      	ldr	r2, [pc, #504]	; (800878c <HAL_FDCAN_Init+0x220>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d106      	bne.n	80085a6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80085a0:	461a      	mov	r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d106      	bne.n	80085c0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f7fa fdb0 	bl	8003120 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	699a      	ldr	r2, [r3, #24]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f022 0210 	bic.w	r2, r2, #16
 80085ce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80085d0:	f7fb fde6 	bl	80041a0 <HAL_GetTick>
 80085d4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80085d6:	e014      	b.n	8008602 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80085d8:	f7fb fde2 	bl	80041a0 <HAL_GetTick>
 80085dc:	4602      	mov	r2, r0
 80085de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	2b0a      	cmp	r3, #10
 80085e4:	d90d      	bls.n	8008602 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085ec:	f043 0201 	orr.w	r2, r3, #1
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2203      	movs	r2, #3
 80085fa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	e18c      	b.n	800891c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	699b      	ldr	r3, [r3, #24]
 8008608:	f003 0308 	and.w	r3, r3, #8
 800860c:	2b08      	cmp	r3, #8
 800860e:	d0e3      	beq.n	80085d8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	699a      	ldr	r2, [r3, #24]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f042 0201 	orr.w	r2, r2, #1
 800861e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008620:	f7fb fdbe 	bl	80041a0 <HAL_GetTick>
 8008624:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008626:	e014      	b.n	8008652 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008628:	f7fb fdba 	bl	80041a0 <HAL_GetTick>
 800862c:	4602      	mov	r2, r0
 800862e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	2b0a      	cmp	r3, #10
 8008634:	d90d      	bls.n	8008652 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800863c:	f043 0201 	orr.w	r2, r3, #1
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2203      	movs	r2, #3
 800864a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	e164      	b.n	800891c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	699b      	ldr	r3, [r3, #24]
 8008658:	f003 0301 	and.w	r3, r3, #1
 800865c:	2b00      	cmp	r3, #0
 800865e:	d0e3      	beq.n	8008628 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	699a      	ldr	r2, [r3, #24]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f042 0202 	orr.w	r2, r2, #2
 800866e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	7c1b      	ldrb	r3, [r3, #16]
 8008674:	2b01      	cmp	r3, #1
 8008676:	d108      	bne.n	800868a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	699a      	ldr	r2, [r3, #24]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008686:	619a      	str	r2, [r3, #24]
 8008688:	e007      	b.n	800869a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	699a      	ldr	r2, [r3, #24]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008698:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	7c5b      	ldrb	r3, [r3, #17]
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d108      	bne.n	80086b4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	699a      	ldr	r2, [r3, #24]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086b0:	619a      	str	r2, [r3, #24]
 80086b2:	e007      	b.n	80086c4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	699a      	ldr	r2, [r3, #24]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80086c2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	7c9b      	ldrb	r3, [r3, #18]
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d108      	bne.n	80086de <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	699a      	ldr	r2, [r3, #24]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80086da:	619a      	str	r2, [r3, #24]
 80086dc:	e007      	b.n	80086ee <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	699a      	ldr	r2, [r3, #24]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80086ec:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	689a      	ldr	r2, [r3, #8]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	430a      	orrs	r2, r1
 8008702:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	699a      	ldr	r2, [r3, #24]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8008712:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	691a      	ldr	r2, [r3, #16]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f022 0210 	bic.w	r2, r2, #16
 8008722:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d108      	bne.n	800873e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	699a      	ldr	r2, [r3, #24]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f042 0204 	orr.w	r2, r2, #4
 800873a:	619a      	str	r2, [r3, #24]
 800873c:	e030      	b.n	80087a0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d02c      	beq.n	80087a0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	2b02      	cmp	r3, #2
 800874c:	d020      	beq.n	8008790 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	699a      	ldr	r2, [r3, #24]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800875c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	691a      	ldr	r2, [r3, #16]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f042 0210 	orr.w	r2, r2, #16
 800876c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	2b03      	cmp	r3, #3
 8008774:	d114      	bne.n	80087a0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	699a      	ldr	r2, [r3, #24]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f042 0220 	orr.w	r2, r2, #32
 8008784:	619a      	str	r2, [r3, #24]
 8008786:	e00b      	b.n	80087a0 <HAL_FDCAN_Init+0x234>
 8008788:	0801fef4 	.word	0x0801fef4
 800878c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	699a      	ldr	r2, [r3, #24]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f042 0220 	orr.w	r2, r2, #32
 800879e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	3b01      	subs	r3, #1
 80087a6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	69db      	ldr	r3, [r3, #28]
 80087ac:	3b01      	subs	r3, #1
 80087ae:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80087b0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a1b      	ldr	r3, [r3, #32]
 80087b6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80087b8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	3b01      	subs	r3, #1
 80087c2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80087c8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80087ca:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087d4:	d115      	bne.n	8008802 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087da:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e0:	3b01      	subs	r3, #1
 80087e2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80087e4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ea:	3b01      	subs	r3, #1
 80087ec:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80087ee:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f6:	3b01      	subs	r3, #1
 80087f8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80087fe:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008800:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00a      	beq.n	8008820 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	430a      	orrs	r2, r1
 800881c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008828:	4413      	add	r3, r2
 800882a:	2b00      	cmp	r3, #0
 800882c:	d011      	beq.n	8008852 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008836:	f023 0107 	bic.w	r1, r3, #7
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	3360      	adds	r3, #96	; 0x60
 8008842:	443b      	add	r3, r7
 8008844:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	430a      	orrs	r2, r1
 800884e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008856:	2b00      	cmp	r3, #0
 8008858:	d011      	beq.n	800887e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008862:	f023 0107 	bic.w	r1, r3, #7
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	3360      	adds	r3, #96	; 0x60
 800886e:	443b      	add	r3, r7
 8008870:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	430a      	orrs	r2, r1
 800887a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008882:	2b00      	cmp	r3, #0
 8008884:	d012      	beq.n	80088ac <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800888e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	3360      	adds	r3, #96	; 0x60
 800889a:	443b      	add	r3, r7
 800889c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80088a0:	011a      	lsls	r2, r3, #4
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	430a      	orrs	r2, r1
 80088a8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d012      	beq.n	80088da <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80088bc:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	3360      	adds	r3, #96	; 0x60
 80088c8:	443b      	add	r3, r7
 80088ca:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80088ce:	021a      	lsls	r2, r3, #8
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	430a      	orrs	r2, r1
 80088d6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a11      	ldr	r2, [pc, #68]	; (8008924 <HAL_FDCAN_Init+0x3b8>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d107      	bne.n	80088f4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	689a      	ldr	r2, [r3, #8]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	f022 0203 	bic.w	r2, r2, #3
 80088f2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f80b 	bl	8008928 <FDCAN_CalcultateRamBlockAddresses>
 8008912:	4603      	mov	r3, r0
 8008914:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8008918:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800891c:	4618      	mov	r0, r3
 800891e:	3760      	adds	r7, #96	; 0x60
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	4000a000 	.word	0x4000a000

08008928 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008928:	b480      	push	{r7}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008934:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800893e:	4ba7      	ldr	r3, [pc, #668]	; (8008bdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008940:	4013      	ands	r3, r2
 8008942:	68ba      	ldr	r2, [r7, #8]
 8008944:	0091      	lsls	r1, r2, #2
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	6812      	ldr	r2, [r2, #0]
 800894a:	430b      	orrs	r3, r1
 800894c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008958:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008960:	041a      	lsls	r2, r3, #16
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	430a      	orrs	r2, r1
 8008968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008970:	68ba      	ldr	r2, [r7, #8]
 8008972:	4413      	add	r3, r2
 8008974:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800897e:	4b97      	ldr	r3, [pc, #604]	; (8008bdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008980:	4013      	ands	r3, r2
 8008982:	68ba      	ldr	r2, [r7, #8]
 8008984:	0091      	lsls	r1, r2, #2
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	6812      	ldr	r2, [r2, #0]
 800898a:	430b      	orrs	r3, r1
 800898c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008998:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089a0:	041a      	lsls	r2, r3, #16
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	430a      	orrs	r2, r1
 80089a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089b0:	005b      	lsls	r3, r3, #1
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	4413      	add	r3, r2
 80089b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80089c0:	4b86      	ldr	r3, [pc, #536]	; (8008bdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80089c2:	4013      	ands	r3, r2
 80089c4:	68ba      	ldr	r2, [r7, #8]
 80089c6:	0091      	lsls	r1, r2, #2
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	6812      	ldr	r2, [r2, #0]
 80089cc:	430b      	orrs	r3, r1
 80089ce:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80089da:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e2:	041a      	lsls	r2, r3, #16
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	430a      	orrs	r2, r1
 80089ea:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80089f6:	fb02 f303 	mul.w	r3, r2, r3
 80089fa:	68ba      	ldr	r2, [r7, #8]
 80089fc:	4413      	add	r3, r2
 80089fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008a08:	4b74      	ldr	r3, [pc, #464]	; (8008bdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	0091      	lsls	r1, r2, #2
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	6812      	ldr	r2, [r2, #0]
 8008a14:	430b      	orrs	r3, r1
 8008a16:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a22:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a2a:	041a      	lsls	r2, r3, #16
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	430a      	orrs	r2, r1
 8008a32:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008a3e:	fb02 f303 	mul.w	r3, r2, r3
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	4413      	add	r3, r2
 8008a46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8008a50:	4b62      	ldr	r3, [pc, #392]	; (8008bdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008a52:	4013      	ands	r3, r2
 8008a54:	68ba      	ldr	r2, [r7, #8]
 8008a56:	0091      	lsls	r1, r2, #2
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	6812      	ldr	r2, [r2, #0]
 8008a5c:	430b      	orrs	r3, r1
 8008a5e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008a6a:	fb02 f303 	mul.w	r3, r2, r3
 8008a6e:	68ba      	ldr	r2, [r7, #8]
 8008a70:	4413      	add	r3, r2
 8008a72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8008a7c:	4b57      	ldr	r3, [pc, #348]	; (8008bdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008a7e:	4013      	ands	r3, r2
 8008a80:	68ba      	ldr	r2, [r7, #8]
 8008a82:	0091      	lsls	r1, r2, #2
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	6812      	ldr	r2, [r2, #0]
 8008a88:	430b      	orrs	r3, r1
 8008a8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a96:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a9e:	041a      	lsls	r2, r3, #16
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	430a      	orrs	r2, r1
 8008aa6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aae:	005b      	lsls	r3, r3, #1
 8008ab0:	68ba      	ldr	r2, [r7, #8]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8008abe:	4b47      	ldr	r3, [pc, #284]	; (8008bdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	68ba      	ldr	r2, [r7, #8]
 8008ac4:	0091      	lsls	r1, r2, #2
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	6812      	ldr	r2, [r2, #0]
 8008aca:	430b      	orrs	r3, r1
 8008acc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008ad8:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ae0:	041a      	lsls	r2, r3, #16
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	430a      	orrs	r2, r1
 8008ae8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008af4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008afc:	061a      	lsls	r2, r3, #24
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	430a      	orrs	r2, r1
 8008b04:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b0c:	4b34      	ldr	r3, [pc, #208]	; (8008be0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8008b0e:	4413      	add	r3, r2
 8008b10:	009a      	lsls	r2, r3, #2
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	441a      	add	r2, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b2e:	00db      	lsls	r3, r3, #3
 8008b30:	441a      	add	r2, r3
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3e:	6879      	ldr	r1, [r7, #4]
 8008b40:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8008b42:	fb01 f303 	mul.w	r3, r1, r3
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	441a      	add	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b56:	6879      	ldr	r1, [r7, #4]
 8008b58:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8008b5a:	fb01 f303 	mul.w	r3, r1, r3
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	441a      	add	r2, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b6e:	6879      	ldr	r1, [r7, #4]
 8008b70:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8008b72:	fb01 f303 	mul.w	r3, r1, r3
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	441a      	add	r2, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b8a:	00db      	lsls	r3, r3, #3
 8008b8c:	441a      	add	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b9e:	6879      	ldr	r1, [r7, #4]
 8008ba0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008ba2:	fb01 f303 	mul.w	r3, r1, r3
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	441a      	add	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bba:	6879      	ldr	r1, [r7, #4]
 8008bbc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008bbe:	fb01 f303 	mul.w	r3, r1, r3
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	441a      	add	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bd2:	4a04      	ldr	r2, [pc, #16]	; (8008be4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d915      	bls.n	8008c04 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008bd8:	e006      	b.n	8008be8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8008bda:	bf00      	nop
 8008bdc:	ffff0003 	.word	0xffff0003
 8008be0:	10002b00 	.word	0x10002b00
 8008be4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008bee:	f043 0220 	orr.w	r2, r3, #32
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2203      	movs	r2, #3
 8008bfc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	e010      	b.n	8008c26 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c08:	60fb      	str	r3, [r7, #12]
 8008c0a:	e005      	b.n	8008c18 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	3304      	adds	r3, #4
 8008c16:	60fb      	str	r3, [r7, #12]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c1e:	68fa      	ldr	r2, [r7, #12]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d3f3      	bcc.n	8008c0c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3714      	adds	r7, #20
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop

08008c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b089      	sub	sp, #36	; 0x24
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008c42:	4b86      	ldr	r3, [pc, #536]	; (8008e5c <HAL_GPIO_Init+0x228>)
 8008c44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008c46:	e18c      	b.n	8008f62 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	2101      	movs	r1, #1
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	fa01 f303 	lsl.w	r3, r1, r3
 8008c54:	4013      	ands	r3, r2
 8008c56:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	f000 817e 	beq.w	8008f5c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	f003 0303 	and.w	r3, r3, #3
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d005      	beq.n	8008c78 <HAL_GPIO_Init+0x44>
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	f003 0303 	and.w	r3, r3, #3
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	d130      	bne.n	8008cda <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	005b      	lsls	r3, r3, #1
 8008c82:	2203      	movs	r2, #3
 8008c84:	fa02 f303 	lsl.w	r3, r2, r3
 8008c88:	43db      	mvns	r3, r3
 8008c8a:	69ba      	ldr	r2, [r7, #24]
 8008c8c:	4013      	ands	r3, r2
 8008c8e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	68da      	ldr	r2, [r3, #12]
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	005b      	lsls	r3, r3, #1
 8008c98:	fa02 f303 	lsl.w	r3, r2, r3
 8008c9c:	69ba      	ldr	r2, [r7, #24]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	69ba      	ldr	r2, [r7, #24]
 8008ca6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008cae:	2201      	movs	r2, #1
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb6:	43db      	mvns	r3, r3
 8008cb8:	69ba      	ldr	r2, [r7, #24]
 8008cba:	4013      	ands	r3, r2
 8008cbc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	091b      	lsrs	r3, r3, #4
 8008cc4:	f003 0201 	and.w	r2, r3, #1
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	fa02 f303 	lsl.w	r3, r2, r3
 8008cce:	69ba      	ldr	r2, [r7, #24]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	69ba      	ldr	r2, [r7, #24]
 8008cd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	f003 0303 	and.w	r3, r3, #3
 8008ce2:	2b03      	cmp	r3, #3
 8008ce4:	d017      	beq.n	8008d16 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	005b      	lsls	r3, r3, #1
 8008cf0:	2203      	movs	r2, #3
 8008cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf6:	43db      	mvns	r3, r3
 8008cf8:	69ba      	ldr	r2, [r7, #24]
 8008cfa:	4013      	ands	r3, r2
 8008cfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	689a      	ldr	r2, [r3, #8]
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	005b      	lsls	r3, r3, #1
 8008d06:	fa02 f303 	lsl.w	r3, r2, r3
 8008d0a:	69ba      	ldr	r2, [r7, #24]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	69ba      	ldr	r2, [r7, #24]
 8008d14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	f003 0303 	and.w	r3, r3, #3
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d123      	bne.n	8008d6a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	08da      	lsrs	r2, r3, #3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	3208      	adds	r2, #8
 8008d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	f003 0307 	and.w	r3, r3, #7
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	220f      	movs	r2, #15
 8008d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d3e:	43db      	mvns	r3, r3
 8008d40:	69ba      	ldr	r2, [r7, #24]
 8008d42:	4013      	ands	r3, r2
 8008d44:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	691a      	ldr	r2, [r3, #16]
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	f003 0307 	and.w	r3, r3, #7
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	fa02 f303 	lsl.w	r3, r2, r3
 8008d56:	69ba      	ldr	r2, [r7, #24]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	08da      	lsrs	r2, r3, #3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	3208      	adds	r2, #8
 8008d64:	69b9      	ldr	r1, [r7, #24]
 8008d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	005b      	lsls	r3, r3, #1
 8008d74:	2203      	movs	r2, #3
 8008d76:	fa02 f303 	lsl.w	r3, r2, r3
 8008d7a:	43db      	mvns	r3, r3
 8008d7c:	69ba      	ldr	r2, [r7, #24]
 8008d7e:	4013      	ands	r3, r2
 8008d80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	f003 0203 	and.w	r2, r3, #3
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	005b      	lsls	r3, r3, #1
 8008d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d92:	69ba      	ldr	r2, [r7, #24]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	69ba      	ldr	r2, [r7, #24]
 8008d9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f000 80d8 	beq.w	8008f5c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008dac:	4b2c      	ldr	r3, [pc, #176]	; (8008e60 <HAL_GPIO_Init+0x22c>)
 8008dae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008db2:	4a2b      	ldr	r2, [pc, #172]	; (8008e60 <HAL_GPIO_Init+0x22c>)
 8008db4:	f043 0302 	orr.w	r3, r3, #2
 8008db8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008dbc:	4b28      	ldr	r3, [pc, #160]	; (8008e60 <HAL_GPIO_Init+0x22c>)
 8008dbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008dc2:	f003 0302 	and.w	r3, r3, #2
 8008dc6:	60fb      	str	r3, [r7, #12]
 8008dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008dca:	4a26      	ldr	r2, [pc, #152]	; (8008e64 <HAL_GPIO_Init+0x230>)
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	089b      	lsrs	r3, r3, #2
 8008dd0:	3302      	adds	r3, #2
 8008dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	f003 0303 	and.w	r3, r3, #3
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	220f      	movs	r2, #15
 8008de2:	fa02 f303 	lsl.w	r3, r2, r3
 8008de6:	43db      	mvns	r3, r3
 8008de8:	69ba      	ldr	r2, [r7, #24]
 8008dea:	4013      	ands	r3, r2
 8008dec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a1d      	ldr	r2, [pc, #116]	; (8008e68 <HAL_GPIO_Init+0x234>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d04a      	beq.n	8008e8c <HAL_GPIO_Init+0x258>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a1c      	ldr	r2, [pc, #112]	; (8008e6c <HAL_GPIO_Init+0x238>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d02b      	beq.n	8008e56 <HAL_GPIO_Init+0x222>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4a1b      	ldr	r2, [pc, #108]	; (8008e70 <HAL_GPIO_Init+0x23c>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d025      	beq.n	8008e52 <HAL_GPIO_Init+0x21e>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4a1a      	ldr	r2, [pc, #104]	; (8008e74 <HAL_GPIO_Init+0x240>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d01f      	beq.n	8008e4e <HAL_GPIO_Init+0x21a>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4a19      	ldr	r2, [pc, #100]	; (8008e78 <HAL_GPIO_Init+0x244>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d019      	beq.n	8008e4a <HAL_GPIO_Init+0x216>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a18      	ldr	r2, [pc, #96]	; (8008e7c <HAL_GPIO_Init+0x248>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d013      	beq.n	8008e46 <HAL_GPIO_Init+0x212>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4a17      	ldr	r2, [pc, #92]	; (8008e80 <HAL_GPIO_Init+0x24c>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d00d      	beq.n	8008e42 <HAL_GPIO_Init+0x20e>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4a16      	ldr	r2, [pc, #88]	; (8008e84 <HAL_GPIO_Init+0x250>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d007      	beq.n	8008e3e <HAL_GPIO_Init+0x20a>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4a15      	ldr	r2, [pc, #84]	; (8008e88 <HAL_GPIO_Init+0x254>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d101      	bne.n	8008e3a <HAL_GPIO_Init+0x206>
 8008e36:	2309      	movs	r3, #9
 8008e38:	e029      	b.n	8008e8e <HAL_GPIO_Init+0x25a>
 8008e3a:	230a      	movs	r3, #10
 8008e3c:	e027      	b.n	8008e8e <HAL_GPIO_Init+0x25a>
 8008e3e:	2307      	movs	r3, #7
 8008e40:	e025      	b.n	8008e8e <HAL_GPIO_Init+0x25a>
 8008e42:	2306      	movs	r3, #6
 8008e44:	e023      	b.n	8008e8e <HAL_GPIO_Init+0x25a>
 8008e46:	2305      	movs	r3, #5
 8008e48:	e021      	b.n	8008e8e <HAL_GPIO_Init+0x25a>
 8008e4a:	2304      	movs	r3, #4
 8008e4c:	e01f      	b.n	8008e8e <HAL_GPIO_Init+0x25a>
 8008e4e:	2303      	movs	r3, #3
 8008e50:	e01d      	b.n	8008e8e <HAL_GPIO_Init+0x25a>
 8008e52:	2302      	movs	r3, #2
 8008e54:	e01b      	b.n	8008e8e <HAL_GPIO_Init+0x25a>
 8008e56:	2301      	movs	r3, #1
 8008e58:	e019      	b.n	8008e8e <HAL_GPIO_Init+0x25a>
 8008e5a:	bf00      	nop
 8008e5c:	58000080 	.word	0x58000080
 8008e60:	58024400 	.word	0x58024400
 8008e64:	58000400 	.word	0x58000400
 8008e68:	58020000 	.word	0x58020000
 8008e6c:	58020400 	.word	0x58020400
 8008e70:	58020800 	.word	0x58020800
 8008e74:	58020c00 	.word	0x58020c00
 8008e78:	58021000 	.word	0x58021000
 8008e7c:	58021400 	.word	0x58021400
 8008e80:	58021800 	.word	0x58021800
 8008e84:	58021c00 	.word	0x58021c00
 8008e88:	58022400 	.word	0x58022400
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	69fa      	ldr	r2, [r7, #28]
 8008e90:	f002 0203 	and.w	r2, r2, #3
 8008e94:	0092      	lsls	r2, r2, #2
 8008e96:	4093      	lsls	r3, r2
 8008e98:	69ba      	ldr	r2, [r7, #24]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008e9e:	4938      	ldr	r1, [pc, #224]	; (8008f80 <HAL_GPIO_Init+0x34c>)
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	089b      	lsrs	r3, r3, #2
 8008ea4:	3302      	adds	r3, #2
 8008ea6:	69ba      	ldr	r2, [r7, #24]
 8008ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	43db      	mvns	r3, r3
 8008eb8:	69ba      	ldr	r2, [r7, #24]
 8008eba:	4013      	ands	r3, r2
 8008ebc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d003      	beq.n	8008ed2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008eca:	69ba      	ldr	r2, [r7, #24]
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008ed2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	43db      	mvns	r3, r3
 8008ee6:	69ba      	ldr	r2, [r7, #24]
 8008ee8:	4013      	ands	r3, r2
 8008eea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d003      	beq.n	8008f00 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008ef8:	69ba      	ldr	r2, [r7, #24]
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008f00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f04:	69bb      	ldr	r3, [r7, #24]
 8008f06:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	43db      	mvns	r3, r3
 8008f12:	69ba      	ldr	r2, [r7, #24]
 8008f14:	4013      	ands	r3, r2
 8008f16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d003      	beq.n	8008f2c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008f24:	69ba      	ldr	r2, [r7, #24]
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	69ba      	ldr	r2, [r7, #24]
 8008f30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	43db      	mvns	r3, r3
 8008f3c:	69ba      	ldr	r2, [r7, #24]
 8008f3e:	4013      	ands	r3, r2
 8008f40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d003      	beq.n	8008f56 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008f4e:	69ba      	ldr	r2, [r7, #24]
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	69ba      	ldr	r2, [r7, #24]
 8008f5a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	fa22 f303 	lsr.w	r3, r2, r3
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f47f ae6b 	bne.w	8008c48 <HAL_GPIO_Init+0x14>
  }
}
 8008f72:	bf00      	nop
 8008f74:	bf00      	nop
 8008f76:	3724      	adds	r7, #36	; 0x24
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr
 8008f80:	58000400 	.word	0x58000400

08008f84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	691a      	ldr	r2, [r3, #16]
 8008f94:	887b      	ldrh	r3, [r7, #2]
 8008f96:	4013      	ands	r3, r2
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d002      	beq.n	8008fa2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	73fb      	strb	r3, [r7, #15]
 8008fa0:	e001      	b.n	8008fa6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3714      	adds	r7, #20
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	807b      	strh	r3, [r7, #2]
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008fc4:	787b      	ldrb	r3, [r7, #1]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d003      	beq.n	8008fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008fca:	887a      	ldrh	r2, [r7, #2]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008fd0:	e003      	b.n	8008fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008fd2:	887b      	ldrh	r3, [r7, #2]
 8008fd4:	041a      	lsls	r2, r3, #16
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	619a      	str	r2, [r3, #24]
}
 8008fda:	bf00      	nop
 8008fdc:	370c      	adds	r7, #12
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
	...

08008fe8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d101      	bne.n	8008ffa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e07f      	b.n	80090fa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009000:	b2db      	uxtb	r3, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	d106      	bne.n	8009014 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f7fa f8ee 	bl	80031f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2224      	movs	r2, #36	; 0x24
 8009018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f022 0201 	bic.w	r2, r2, #1
 800902a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009038:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	689a      	ldr	r2, [r3, #8]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009048:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	2b01      	cmp	r3, #1
 8009050:	d107      	bne.n	8009062 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	689a      	ldr	r2, [r3, #8]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800905e:	609a      	str	r2, [r3, #8]
 8009060:	e006      	b.n	8009070 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	689a      	ldr	r2, [r3, #8]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800906e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	2b02      	cmp	r3, #2
 8009076:	d104      	bne.n	8009082 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009080:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	6859      	ldr	r1, [r3, #4]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	4b1d      	ldr	r3, [pc, #116]	; (8009104 <HAL_I2C_Init+0x11c>)
 800908e:	430b      	orrs	r3, r1
 8009090:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	68da      	ldr	r2, [r3, #12]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80090a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	691a      	ldr	r2, [r3, #16]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	695b      	ldr	r3, [r3, #20]
 80090aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	699b      	ldr	r3, [r3, #24]
 80090b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	430a      	orrs	r2, r1
 80090ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	69d9      	ldr	r1, [r3, #28]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6a1a      	ldr	r2, [r3, #32]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	430a      	orrs	r2, r1
 80090ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f042 0201 	orr.w	r2, r2, #1
 80090da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2220      	movs	r2, #32
 80090e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80090f8:	2300      	movs	r3, #0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	02008000 	.word	0x02008000

08009108 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	699b      	ldr	r3, [r3, #24]
 8009116:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009124:	2b00      	cmp	r3, #0
 8009126:	d005      	beq.n	8009134 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800912c:	68ba      	ldr	r2, [r7, #8]
 800912e:	68f9      	ldr	r1, [r7, #12]
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	4798      	blx	r3
  }
}
 8009134:	bf00      	nop
 8009136:	3710      	adds	r7, #16
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800914c:	b2db      	uxtb	r3, r3
 800914e:	2b20      	cmp	r3, #32
 8009150:	d138      	bne.n	80091c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009158:	2b01      	cmp	r3, #1
 800915a:	d101      	bne.n	8009160 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800915c:	2302      	movs	r3, #2
 800915e:	e032      	b.n	80091c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2201      	movs	r2, #1
 8009164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2224      	movs	r2, #36	; 0x24
 800916c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f022 0201 	bic.w	r2, r2, #1
 800917e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800918e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	6819      	ldr	r1, [r3, #0]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	683a      	ldr	r2, [r7, #0]
 800919c:	430a      	orrs	r2, r1
 800919e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f042 0201 	orr.w	r2, r2, #1
 80091ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2220      	movs	r2, #32
 80091b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80091c0:	2300      	movs	r3, #0
 80091c2:	e000      	b.n	80091c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80091c4:	2302      	movs	r3, #2
  }
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	370c      	adds	r7, #12
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr

080091d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80091d2:	b480      	push	{r7}
 80091d4:	b085      	sub	sp, #20
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
 80091da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2b20      	cmp	r3, #32
 80091e6:	d139      	bne.n	800925c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d101      	bne.n	80091f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80091f2:	2302      	movs	r3, #2
 80091f4:	e033      	b.n	800925e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2201      	movs	r2, #1
 80091fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2224      	movs	r2, #36	; 0x24
 8009202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f022 0201 	bic.w	r2, r2, #1
 8009214:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009224:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	021b      	lsls	r3, r3, #8
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	4313      	orrs	r3, r2
 800922e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f042 0201 	orr.w	r2, r2, #1
 8009246:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2220      	movs	r2, #32
 800924c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009258:	2300      	movs	r3, #0
 800925a:	e000      	b.n	800925e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800925c:	2302      	movs	r3, #2
  }
}
 800925e:	4618      	mov	r0, r3
 8009260:	3714      	adds	r7, #20
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr

0800926a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800926a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800926c:	b08f      	sub	sp, #60	; 0x3c
 800926e:	af0a      	add	r7, sp, #40	; 0x28
 8009270:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d101      	bne.n	800927c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	e116      	b.n	80094aa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8009288:	b2db      	uxtb	r3, r3
 800928a:	2b00      	cmp	r3, #0
 800928c:	d106      	bne.n	800929c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f011 fb26 	bl	801a8e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2203      	movs	r2, #3
 80092a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d102      	bne.n	80092b6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4618      	mov	r0, r3
 80092bc:	f00a fcf7 	bl	8013cae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	603b      	str	r3, [r7, #0]
 80092c6:	687e      	ldr	r6, [r7, #4]
 80092c8:	466d      	mov	r5, sp
 80092ca:	f106 0410 	add.w	r4, r6, #16
 80092ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80092d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80092d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80092d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80092d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80092da:	e885 0003 	stmia.w	r5, {r0, r1}
 80092de:	1d33      	adds	r3, r6, #4
 80092e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80092e2:	6838      	ldr	r0, [r7, #0]
 80092e4:	f00a fbc2 	bl	8013a6c <USB_CoreInit>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d005      	beq.n	80092fa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2202      	movs	r2, #2
 80092f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80092f6:	2301      	movs	r3, #1
 80092f8:	e0d7      	b.n	80094aa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2100      	movs	r1, #0
 8009300:	4618      	mov	r0, r3
 8009302:	f00a fce5 	bl	8013cd0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009306:	2300      	movs	r3, #0
 8009308:	73fb      	strb	r3, [r7, #15]
 800930a:	e04a      	b.n	80093a2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800930c:	7bfa      	ldrb	r2, [r7, #15]
 800930e:	6879      	ldr	r1, [r7, #4]
 8009310:	4613      	mov	r3, r2
 8009312:	00db      	lsls	r3, r3, #3
 8009314:	4413      	add	r3, r2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	440b      	add	r3, r1
 800931a:	333d      	adds	r3, #61	; 0x3d
 800931c:	2201      	movs	r2, #1
 800931e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009320:	7bfa      	ldrb	r2, [r7, #15]
 8009322:	6879      	ldr	r1, [r7, #4]
 8009324:	4613      	mov	r3, r2
 8009326:	00db      	lsls	r3, r3, #3
 8009328:	4413      	add	r3, r2
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	440b      	add	r3, r1
 800932e:	333c      	adds	r3, #60	; 0x3c
 8009330:	7bfa      	ldrb	r2, [r7, #15]
 8009332:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009334:	7bfa      	ldrb	r2, [r7, #15]
 8009336:	7bfb      	ldrb	r3, [r7, #15]
 8009338:	b298      	uxth	r0, r3
 800933a:	6879      	ldr	r1, [r7, #4]
 800933c:	4613      	mov	r3, r2
 800933e:	00db      	lsls	r3, r3, #3
 8009340:	4413      	add	r3, r2
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	440b      	add	r3, r1
 8009346:	3356      	adds	r3, #86	; 0x56
 8009348:	4602      	mov	r2, r0
 800934a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800934c:	7bfa      	ldrb	r2, [r7, #15]
 800934e:	6879      	ldr	r1, [r7, #4]
 8009350:	4613      	mov	r3, r2
 8009352:	00db      	lsls	r3, r3, #3
 8009354:	4413      	add	r3, r2
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	440b      	add	r3, r1
 800935a:	3340      	adds	r3, #64	; 0x40
 800935c:	2200      	movs	r2, #0
 800935e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009360:	7bfa      	ldrb	r2, [r7, #15]
 8009362:	6879      	ldr	r1, [r7, #4]
 8009364:	4613      	mov	r3, r2
 8009366:	00db      	lsls	r3, r3, #3
 8009368:	4413      	add	r3, r2
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	440b      	add	r3, r1
 800936e:	3344      	adds	r3, #68	; 0x44
 8009370:	2200      	movs	r2, #0
 8009372:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009374:	7bfa      	ldrb	r2, [r7, #15]
 8009376:	6879      	ldr	r1, [r7, #4]
 8009378:	4613      	mov	r3, r2
 800937a:	00db      	lsls	r3, r3, #3
 800937c:	4413      	add	r3, r2
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	440b      	add	r3, r1
 8009382:	3348      	adds	r3, #72	; 0x48
 8009384:	2200      	movs	r2, #0
 8009386:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009388:	7bfa      	ldrb	r2, [r7, #15]
 800938a:	6879      	ldr	r1, [r7, #4]
 800938c:	4613      	mov	r3, r2
 800938e:	00db      	lsls	r3, r3, #3
 8009390:	4413      	add	r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	440b      	add	r3, r1
 8009396:	334c      	adds	r3, #76	; 0x4c
 8009398:	2200      	movs	r2, #0
 800939a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800939c:	7bfb      	ldrb	r3, [r7, #15]
 800939e:	3301      	adds	r3, #1
 80093a0:	73fb      	strb	r3, [r7, #15]
 80093a2:	7bfa      	ldrb	r2, [r7, #15]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d3af      	bcc.n	800930c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093ac:	2300      	movs	r3, #0
 80093ae:	73fb      	strb	r3, [r7, #15]
 80093b0:	e044      	b.n	800943c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80093b2:	7bfa      	ldrb	r2, [r7, #15]
 80093b4:	6879      	ldr	r1, [r7, #4]
 80093b6:	4613      	mov	r3, r2
 80093b8:	00db      	lsls	r3, r3, #3
 80093ba:	4413      	add	r3, r2
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	440b      	add	r3, r1
 80093c0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80093c4:	2200      	movs	r2, #0
 80093c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80093c8:	7bfa      	ldrb	r2, [r7, #15]
 80093ca:	6879      	ldr	r1, [r7, #4]
 80093cc:	4613      	mov	r3, r2
 80093ce:	00db      	lsls	r3, r3, #3
 80093d0:	4413      	add	r3, r2
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	440b      	add	r3, r1
 80093d6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80093da:	7bfa      	ldrb	r2, [r7, #15]
 80093dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80093de:	7bfa      	ldrb	r2, [r7, #15]
 80093e0:	6879      	ldr	r1, [r7, #4]
 80093e2:	4613      	mov	r3, r2
 80093e4:	00db      	lsls	r3, r3, #3
 80093e6:	4413      	add	r3, r2
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	440b      	add	r3, r1
 80093ec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80093f0:	2200      	movs	r2, #0
 80093f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80093f4:	7bfa      	ldrb	r2, [r7, #15]
 80093f6:	6879      	ldr	r1, [r7, #4]
 80093f8:	4613      	mov	r3, r2
 80093fa:	00db      	lsls	r3, r3, #3
 80093fc:	4413      	add	r3, r2
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	440b      	add	r3, r1
 8009402:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8009406:	2200      	movs	r2, #0
 8009408:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800940a:	7bfa      	ldrb	r2, [r7, #15]
 800940c:	6879      	ldr	r1, [r7, #4]
 800940e:	4613      	mov	r3, r2
 8009410:	00db      	lsls	r3, r3, #3
 8009412:	4413      	add	r3, r2
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	440b      	add	r3, r1
 8009418:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800941c:	2200      	movs	r2, #0
 800941e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009420:	7bfa      	ldrb	r2, [r7, #15]
 8009422:	6879      	ldr	r1, [r7, #4]
 8009424:	4613      	mov	r3, r2
 8009426:	00db      	lsls	r3, r3, #3
 8009428:	4413      	add	r3, r2
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	440b      	add	r3, r1
 800942e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009432:	2200      	movs	r2, #0
 8009434:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009436:	7bfb      	ldrb	r3, [r7, #15]
 8009438:	3301      	adds	r3, #1
 800943a:	73fb      	strb	r3, [r7, #15]
 800943c:	7bfa      	ldrb	r2, [r7, #15]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	429a      	cmp	r2, r3
 8009444:	d3b5      	bcc.n	80093b2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	603b      	str	r3, [r7, #0]
 800944c:	687e      	ldr	r6, [r7, #4]
 800944e:	466d      	mov	r5, sp
 8009450:	f106 0410 	add.w	r4, r6, #16
 8009454:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009456:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800945a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800945c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009460:	e885 0003 	stmia.w	r5, {r0, r1}
 8009464:	1d33      	adds	r3, r6, #4
 8009466:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009468:	6838      	ldr	r0, [r7, #0]
 800946a:	f00a fc7d 	bl	8013d68 <USB_DevInit>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d005      	beq.n	8009480 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2202      	movs	r2, #2
 8009478:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800947c:	2301      	movs	r3, #1
 800947e:	e014      	b.n	80094aa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009494:	2b01      	cmp	r3, #1
 8009496:	d102      	bne.n	800949e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f001 f96f 	bl	800a77c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4618      	mov	r0, r3
 80094a4:	f00b fcbf 	bl	8014e26 <USB_DevDisconnect>

  return HAL_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3714      	adds	r7, #20
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080094b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b084      	sub	sp, #16
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d101      	bne.n	80094ce <HAL_PCD_Start+0x1c>
 80094ca:	2302      	movs	r3, #2
 80094cc:	e022      	b.n	8009514 <HAL_PCD_Start+0x62>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2201      	movs	r2, #1
 80094d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d109      	bne.n	80094f6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d105      	bne.n	80094f6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4618      	mov	r0, r3
 80094fc:	f00a fbc6 	bl	8013c8c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4618      	mov	r0, r3
 8009506:	f00b fc6d 	bl	8014de4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009512:	2300      	movs	r3, #0
}
 8009514:	4618      	mov	r0, r3
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800951c:	b590      	push	{r4, r7, lr}
 800951e:	b08d      	sub	sp, #52	; 0x34
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800952a:	6a3b      	ldr	r3, [r7, #32]
 800952c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4618      	mov	r0, r3
 8009534:	f00b fd2b 	bl	8014f8e <USB_GetMode>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	f040 84b7 	bne.w	8009eae <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4618      	mov	r0, r3
 8009546:	f00b fc8f 	bl	8014e68 <USB_ReadInterrupts>
 800954a:	4603      	mov	r3, r0
 800954c:	2b00      	cmp	r3, #0
 800954e:	f000 84ad 	beq.w	8009eac <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	0a1b      	lsrs	r3, r3, #8
 800955c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4618      	mov	r0, r3
 800956c:	f00b fc7c 	bl	8014e68 <USB_ReadInterrupts>
 8009570:	4603      	mov	r3, r0
 8009572:	f003 0302 	and.w	r3, r3, #2
 8009576:	2b02      	cmp	r3, #2
 8009578:	d107      	bne.n	800958a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	695a      	ldr	r2, [r3, #20]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f002 0202 	and.w	r2, r2, #2
 8009588:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4618      	mov	r0, r3
 8009590:	f00b fc6a 	bl	8014e68 <USB_ReadInterrupts>
 8009594:	4603      	mov	r3, r0
 8009596:	f003 0310 	and.w	r3, r3, #16
 800959a:	2b10      	cmp	r3, #16
 800959c:	d161      	bne.n	8009662 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	699a      	ldr	r2, [r3, #24]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f022 0210 	bic.w	r2, r2, #16
 80095ac:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80095ae:	6a3b      	ldr	r3, [r7, #32]
 80095b0:	6a1b      	ldr	r3, [r3, #32]
 80095b2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	f003 020f 	and.w	r2, r3, #15
 80095ba:	4613      	mov	r3, r2
 80095bc:	00db      	lsls	r3, r3, #3
 80095be:	4413      	add	r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	4413      	add	r3, r2
 80095ca:	3304      	adds	r3, #4
 80095cc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	0c5b      	lsrs	r3, r3, #17
 80095d2:	f003 030f 	and.w	r3, r3, #15
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	d124      	bne.n	8009624 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80095da:	69ba      	ldr	r2, [r7, #24]
 80095dc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80095e0:	4013      	ands	r3, r2
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d035      	beq.n	8009652 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	091b      	lsrs	r3, r3, #4
 80095ee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80095f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	461a      	mov	r2, r3
 80095f8:	6a38      	ldr	r0, [r7, #32]
 80095fa:	f00b faa1 	bl	8014b40 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	68da      	ldr	r2, [r3, #12]
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	091b      	lsrs	r3, r3, #4
 8009606:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800960a:	441a      	add	r2, r3
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	695a      	ldr	r2, [r3, #20]
 8009614:	69bb      	ldr	r3, [r7, #24]
 8009616:	091b      	lsrs	r3, r3, #4
 8009618:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800961c:	441a      	add	r2, r3
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	615a      	str	r2, [r3, #20]
 8009622:	e016      	b.n	8009652 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	0c5b      	lsrs	r3, r3, #17
 8009628:	f003 030f 	and.w	r3, r3, #15
 800962c:	2b06      	cmp	r3, #6
 800962e:	d110      	bne.n	8009652 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009636:	2208      	movs	r2, #8
 8009638:	4619      	mov	r1, r3
 800963a:	6a38      	ldr	r0, [r7, #32]
 800963c:	f00b fa80 	bl	8014b40 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	695a      	ldr	r2, [r3, #20]
 8009644:	69bb      	ldr	r3, [r7, #24]
 8009646:	091b      	lsrs	r3, r3, #4
 8009648:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800964c:	441a      	add	r2, r3
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	699a      	ldr	r2, [r3, #24]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f042 0210 	orr.w	r2, r2, #16
 8009660:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4618      	mov	r0, r3
 8009668:	f00b fbfe 	bl	8014e68 <USB_ReadInterrupts>
 800966c:	4603      	mov	r3, r0
 800966e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009672:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009676:	f040 80a7 	bne.w	80097c8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800967a:	2300      	movs	r3, #0
 800967c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4618      	mov	r0, r3
 8009684:	f00b fc03 	bl	8014e8e <USB_ReadDevAllOutEpInterrupt>
 8009688:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800968a:	e099      	b.n	80097c0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800968c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968e:	f003 0301 	and.w	r3, r3, #1
 8009692:	2b00      	cmp	r3, #0
 8009694:	f000 808e 	beq.w	80097b4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800969e:	b2d2      	uxtb	r2, r2
 80096a0:	4611      	mov	r1, r2
 80096a2:	4618      	mov	r0, r3
 80096a4:	f00b fc27 	bl	8014ef6 <USB_ReadDevOutEPInterrupt>
 80096a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	f003 0301 	and.w	r3, r3, #1
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d00c      	beq.n	80096ce <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80096b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b6:	015a      	lsls	r2, r3, #5
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	4413      	add	r3, r2
 80096bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096c0:	461a      	mov	r2, r3
 80096c2:	2301      	movs	r3, #1
 80096c4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80096c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 fed1 	bl	800a470 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	f003 0308 	and.w	r3, r3, #8
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d00c      	beq.n	80096f2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80096d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096da:	015a      	lsls	r2, r3, #5
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	4413      	add	r3, r2
 80096e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096e4:	461a      	mov	r2, r3
 80096e6:	2308      	movs	r3, #8
 80096e8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80096ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 ffa7 	bl	800a640 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	f003 0310 	and.w	r3, r3, #16
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d008      	beq.n	800970e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80096fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fe:	015a      	lsls	r2, r3, #5
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	4413      	add	r3, r2
 8009704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009708:	461a      	mov	r2, r3
 800970a:	2310      	movs	r3, #16
 800970c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	f003 0302 	and.w	r3, r3, #2
 8009714:	2b00      	cmp	r3, #0
 8009716:	d030      	beq.n	800977a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009718:	6a3b      	ldr	r3, [r7, #32]
 800971a:	695b      	ldr	r3, [r3, #20]
 800971c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009720:	2b80      	cmp	r3, #128	; 0x80
 8009722:	d109      	bne.n	8009738 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	69fa      	ldr	r2, [r7, #28]
 800972e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009732:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009736:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8009738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800973a:	4613      	mov	r3, r2
 800973c:	00db      	lsls	r3, r3, #3
 800973e:	4413      	add	r3, r2
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	4413      	add	r3, r2
 800974a:	3304      	adds	r3, #4
 800974c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	78db      	ldrb	r3, [r3, #3]
 8009752:	2b01      	cmp	r3, #1
 8009754:	d108      	bne.n	8009768 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	2200      	movs	r2, #0
 800975a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800975c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975e:	b2db      	uxtb	r3, r3
 8009760:	4619      	mov	r1, r3
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f011 f9b8 	bl	801aad8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976a:	015a      	lsls	r2, r3, #5
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	4413      	add	r3, r2
 8009770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009774:	461a      	mov	r2, r3
 8009776:	2302      	movs	r3, #2
 8009778:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	f003 0320 	and.w	r3, r3, #32
 8009780:	2b00      	cmp	r3, #0
 8009782:	d008      	beq.n	8009796 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009786:	015a      	lsls	r2, r3, #5
 8009788:	69fb      	ldr	r3, [r7, #28]
 800978a:	4413      	add	r3, r2
 800978c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009790:	461a      	mov	r2, r3
 8009792:	2320      	movs	r3, #32
 8009794:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800979c:	2b00      	cmp	r3, #0
 800979e:	d009      	beq.n	80097b4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80097a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a2:	015a      	lsls	r2, r3, #5
 80097a4:	69fb      	ldr	r3, [r7, #28]
 80097a6:	4413      	add	r3, r2
 80097a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ac:	461a      	mov	r2, r3
 80097ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80097b2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80097b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b6:	3301      	adds	r3, #1
 80097b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80097ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097bc:	085b      	lsrs	r3, r3, #1
 80097be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80097c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	f47f af62 	bne.w	800968c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4618      	mov	r0, r3
 80097ce:	f00b fb4b 	bl	8014e68 <USB_ReadInterrupts>
 80097d2:	4603      	mov	r3, r0
 80097d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80097d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80097dc:	f040 80db 	bne.w	8009996 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4618      	mov	r0, r3
 80097e6:	f00b fb6c 	bl	8014ec2 <USB_ReadDevAllInEpInterrupt>
 80097ea:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80097ec:	2300      	movs	r3, #0
 80097ee:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80097f0:	e0cd      	b.n	800998e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80097f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f4:	f003 0301 	and.w	r3, r3, #1
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f000 80c2 	beq.w	8009982 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009804:	b2d2      	uxtb	r2, r2
 8009806:	4611      	mov	r1, r2
 8009808:	4618      	mov	r0, r3
 800980a:	f00b fb92 	bl	8014f32 <USB_ReadDevInEPInterrupt>
 800980e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	f003 0301 	and.w	r3, r3, #1
 8009816:	2b00      	cmp	r3, #0
 8009818:	d057      	beq.n	80098ca <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800981a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981c:	f003 030f 	and.w	r3, r3, #15
 8009820:	2201      	movs	r2, #1
 8009822:	fa02 f303 	lsl.w	r3, r2, r3
 8009826:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009828:	69fb      	ldr	r3, [r7, #28]
 800982a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800982e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	43db      	mvns	r3, r3
 8009834:	69f9      	ldr	r1, [r7, #28]
 8009836:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800983a:	4013      	ands	r3, r2
 800983c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800983e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009840:	015a      	lsls	r2, r3, #5
 8009842:	69fb      	ldr	r3, [r7, #28]
 8009844:	4413      	add	r3, r2
 8009846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800984a:	461a      	mov	r2, r3
 800984c:	2301      	movs	r3, #1
 800984e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	2b01      	cmp	r3, #1
 8009856:	d132      	bne.n	80098be <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009858:	6879      	ldr	r1, [r7, #4]
 800985a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800985c:	4613      	mov	r3, r2
 800985e:	00db      	lsls	r3, r3, #3
 8009860:	4413      	add	r3, r2
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	440b      	add	r3, r1
 8009866:	3348      	adds	r3, #72	; 0x48
 8009868:	6819      	ldr	r1, [r3, #0]
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800986e:	4613      	mov	r3, r2
 8009870:	00db      	lsls	r3, r3, #3
 8009872:	4413      	add	r3, r2
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	4403      	add	r3, r0
 8009878:	3344      	adds	r3, #68	; 0x44
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4419      	add	r1, r3
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009882:	4613      	mov	r3, r2
 8009884:	00db      	lsls	r3, r3, #3
 8009886:	4413      	add	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	4403      	add	r3, r0
 800988c:	3348      	adds	r3, #72	; 0x48
 800988e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009892:	2b00      	cmp	r3, #0
 8009894:	d113      	bne.n	80098be <HAL_PCD_IRQHandler+0x3a2>
 8009896:	6879      	ldr	r1, [r7, #4]
 8009898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800989a:	4613      	mov	r3, r2
 800989c:	00db      	lsls	r3, r3, #3
 800989e:	4413      	add	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	440b      	add	r3, r1
 80098a4:	334c      	adds	r3, #76	; 0x4c
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d108      	bne.n	80098be <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6818      	ldr	r0, [r3, #0]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80098b6:	461a      	mov	r2, r3
 80098b8:	2101      	movs	r1, #1
 80098ba:	f00b fb9b 	bl	8014ff4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80098be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	4619      	mov	r1, r3
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f011 f882 	bl	801a9ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	f003 0308 	and.w	r3, r3, #8
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d008      	beq.n	80098e6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80098d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d6:	015a      	lsls	r2, r3, #5
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	4413      	add	r3, r2
 80098dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e0:	461a      	mov	r2, r3
 80098e2:	2308      	movs	r3, #8
 80098e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	f003 0310 	and.w	r3, r3, #16
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d008      	beq.n	8009902 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80098f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f2:	015a      	lsls	r2, r3, #5
 80098f4:	69fb      	ldr	r3, [r7, #28]
 80098f6:	4413      	add	r3, r2
 80098f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098fc:	461a      	mov	r2, r3
 80098fe:	2310      	movs	r3, #16
 8009900:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009908:	2b00      	cmp	r3, #0
 800990a:	d008      	beq.n	800991e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800990c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990e:	015a      	lsls	r2, r3, #5
 8009910:	69fb      	ldr	r3, [r7, #28]
 8009912:	4413      	add	r3, r2
 8009914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009918:	461a      	mov	r2, r3
 800991a:	2340      	movs	r3, #64	; 0x40
 800991c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	f003 0302 	and.w	r3, r3, #2
 8009924:	2b00      	cmp	r3, #0
 8009926:	d023      	beq.n	8009970 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009928:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800992a:	6a38      	ldr	r0, [r7, #32]
 800992c:	f00a fb7a 	bl	8014024 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8009930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009932:	4613      	mov	r3, r2
 8009934:	00db      	lsls	r3, r3, #3
 8009936:	4413      	add	r3, r2
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	3338      	adds	r3, #56	; 0x38
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	4413      	add	r3, r2
 8009940:	3304      	adds	r3, #4
 8009942:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	78db      	ldrb	r3, [r3, #3]
 8009948:	2b01      	cmp	r3, #1
 800994a:	d108      	bne.n	800995e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	2200      	movs	r2, #0
 8009950:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009954:	b2db      	uxtb	r3, r3
 8009956:	4619      	mov	r1, r3
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f011 f8cf 	bl	801aafc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800995e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009960:	015a      	lsls	r2, r3, #5
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	4413      	add	r3, r2
 8009966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800996a:	461a      	mov	r2, r3
 800996c:	2302      	movs	r3, #2
 800996e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009976:	2b00      	cmp	r3, #0
 8009978:	d003      	beq.n	8009982 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800997a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 fcea 	bl	800a356 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009984:	3301      	adds	r3, #1
 8009986:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998a:	085b      	lsrs	r3, r3, #1
 800998c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800998e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009990:	2b00      	cmp	r3, #0
 8009992:	f47f af2e 	bne.w	80097f2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4618      	mov	r0, r3
 800999c:	f00b fa64 	bl	8014e68 <USB_ReadInterrupts>
 80099a0:	4603      	mov	r3, r0
 80099a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099aa:	d122      	bne.n	80099f2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	69fa      	ldr	r2, [r7, #28]
 80099b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099ba:	f023 0301 	bic.w	r3, r3, #1
 80099be:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d108      	bne.n	80099dc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80099d2:	2100      	movs	r1, #0
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 fef5 	bl	800a7c4 <HAL_PCDEx_LPM_Callback>
 80099da:	e002      	b.n	80099e2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f011 f86d 	bl	801aabc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	695a      	ldr	r2, [r3, #20]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80099f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4618      	mov	r0, r3
 80099f8:	f00b fa36 	bl	8014e68 <USB_ReadInterrupts>
 80099fc:	4603      	mov	r3, r0
 80099fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a06:	d112      	bne.n	8009a2e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	f003 0301 	and.w	r3, r3, #1
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d102      	bne.n	8009a1e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f011 f829 	bl	801aa70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	695a      	ldr	r2, [r3, #20]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009a2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4618      	mov	r0, r3
 8009a34:	f00b fa18 	bl	8014e68 <USB_ReadInterrupts>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a42:	d121      	bne.n	8009a88 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	695a      	ldr	r2, [r3, #20]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8009a52:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d111      	bne.n	8009a82 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2201      	movs	r2, #1
 8009a62:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a6c:	089b      	lsrs	r3, r3, #2
 8009a6e:	f003 020f 	and.w	r2, r3, #15
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009a78:	2101      	movs	r1, #1
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 fea2 	bl	800a7c4 <HAL_PCDEx_LPM_Callback>
 8009a80:	e002      	b.n	8009a88 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f010 fff4 	bl	801aa70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f00b f9eb 	bl	8014e68 <USB_ReadInterrupts>
 8009a92:	4603      	mov	r3, r0
 8009a94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a9c:	f040 80b7 	bne.w	8009c0e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	69fa      	ldr	r2, [r7, #28]
 8009aaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009aae:	f023 0301 	bic.w	r3, r3, #1
 8009ab2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2110      	movs	r1, #16
 8009aba:	4618      	mov	r0, r3
 8009abc:	f00a fab2 	bl	8014024 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ac4:	e046      	b.n	8009b54 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac8:	015a      	lsls	r2, r3, #5
 8009aca:	69fb      	ldr	r3, [r7, #28]
 8009acc:	4413      	add	r3, r2
 8009ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009ad8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009adc:	015a      	lsls	r2, r3, #5
 8009ade:	69fb      	ldr	r3, [r7, #28]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009aea:	0151      	lsls	r1, r2, #5
 8009aec:	69fa      	ldr	r2, [r7, #28]
 8009aee:	440a      	add	r2, r1
 8009af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009af4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009af8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009afc:	015a      	lsls	r2, r3, #5
 8009afe:	69fb      	ldr	r3, [r7, #28]
 8009b00:	4413      	add	r3, r2
 8009b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b06:	461a      	mov	r2, r3
 8009b08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009b0c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b10:	015a      	lsls	r2, r3, #5
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	4413      	add	r3, r2
 8009b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b1e:	0151      	lsls	r1, r2, #5
 8009b20:	69fa      	ldr	r2, [r7, #28]
 8009b22:	440a      	add	r2, r1
 8009b24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b2c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b30:	015a      	lsls	r2, r3, #5
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	4413      	add	r3, r2
 8009b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b3e:	0151      	lsls	r1, r2, #5
 8009b40:	69fa      	ldr	r2, [r7, #28]
 8009b42:	440a      	add	r2, r1
 8009b44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009b4c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b50:	3301      	adds	r3, #1
 8009b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d3b3      	bcc.n	8009ac6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b64:	69db      	ldr	r3, [r3, #28]
 8009b66:	69fa      	ldr	r2, [r7, #28]
 8009b68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b6c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009b70:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d016      	beq.n	8009ba8 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009b7a:	69fb      	ldr	r3, [r7, #28]
 8009b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b84:	69fa      	ldr	r2, [r7, #28]
 8009b86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b8a:	f043 030b 	orr.w	r3, r3, #11
 8009b8e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b9a:	69fa      	ldr	r2, [r7, #28]
 8009b9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ba0:	f043 030b 	orr.w	r3, r3, #11
 8009ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8009ba6:	e015      	b.n	8009bd4 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009ba8:	69fb      	ldr	r3, [r7, #28]
 8009baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bae:	695a      	ldr	r2, [r3, #20]
 8009bb0:	69fb      	ldr	r3, [r7, #28]
 8009bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bb6:	4619      	mov	r1, r3
 8009bb8:	f242 032b 	movw	r3, #8235	; 0x202b
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bc6:	691b      	ldr	r3, [r3, #16]
 8009bc8:	69fa      	ldr	r2, [r7, #28]
 8009bca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009bce:	f043 030b 	orr.w	r3, r3, #11
 8009bd2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009bd4:	69fb      	ldr	r3, [r7, #28]
 8009bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	69fa      	ldr	r2, [r7, #28]
 8009bde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009be2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009be6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6818      	ldr	r0, [r3, #0]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	f00b f9fb 	bl	8014ff4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	695a      	ldr	r2, [r3, #20]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009c0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4618      	mov	r0, r3
 8009c14:	f00b f928 	bl	8014e68 <USB_ReadInterrupts>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c22:	d124      	bne.n	8009c6e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f00b f9bf 	bl	8014fac <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4618      	mov	r0, r3
 8009c34:	f00a fa73 	bl	801411e <USB_GetDevSpeed>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681c      	ldr	r4, [r3, #0]
 8009c44:	f001 fd88 	bl	800b758 <HAL_RCC_GetHCLKFreq>
 8009c48:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	461a      	mov	r2, r3
 8009c52:	4620      	mov	r0, r4
 8009c54:	f009 ff78 	bl	8013b48 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f010 fee0 	bl	801aa1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	695a      	ldr	r2, [r3, #20]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009c6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4618      	mov	r0, r3
 8009c74:	f00b f8f8 	bl	8014e68 <USB_ReadInterrupts>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	f003 0308 	and.w	r3, r3, #8
 8009c7e:	2b08      	cmp	r3, #8
 8009c80:	d10a      	bne.n	8009c98 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f010 febd 	bl	801aa02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	695a      	ldr	r2, [r3, #20]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f002 0208 	and.w	r2, r2, #8
 8009c96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f00b f8e3 	bl	8014e68 <USB_ReadInterrupts>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ca8:	2b80      	cmp	r3, #128	; 0x80
 8009caa:	d122      	bne.n	8009cf2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009cac:	6a3b      	ldr	r3, [r7, #32]
 8009cae:	699b      	ldr	r3, [r3, #24]
 8009cb0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009cb4:	6a3b      	ldr	r3, [r7, #32]
 8009cb6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009cb8:	2301      	movs	r3, #1
 8009cba:	627b      	str	r3, [r7, #36]	; 0x24
 8009cbc:	e014      	b.n	8009ce8 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009cbe:	6879      	ldr	r1, [r7, #4]
 8009cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cc2:	4613      	mov	r3, r2
 8009cc4:	00db      	lsls	r3, r3, #3
 8009cc6:	4413      	add	r3, r2
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	440b      	add	r3, r1
 8009ccc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d105      	bne.n	8009ce2 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	4619      	mov	r1, r3
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 fb09 	bl	800a2f4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d3e5      	bcc.n	8009cbe <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f00b f8b6 	bl	8014e68 <USB_ReadInterrupts>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d06:	d13b      	bne.n	8009d80 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009d08:	2301      	movs	r3, #1
 8009d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8009d0c:	e02b      	b.n	8009d66 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d10:	015a      	lsls	r2, r3, #5
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	4413      	add	r3, r2
 8009d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009d1e:	6879      	ldr	r1, [r7, #4]
 8009d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d22:	4613      	mov	r3, r2
 8009d24:	00db      	lsls	r3, r3, #3
 8009d26:	4413      	add	r3, r2
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	440b      	add	r3, r1
 8009d2c:	3340      	adds	r3, #64	; 0x40
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d115      	bne.n	8009d60 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009d34:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	da12      	bge.n	8009d60 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009d3a:	6879      	ldr	r1, [r7, #4]
 8009d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d3e:	4613      	mov	r3, r2
 8009d40:	00db      	lsls	r3, r3, #3
 8009d42:	4413      	add	r3, r2
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	440b      	add	r3, r1
 8009d48:	333f      	adds	r3, #63	; 0x3f
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	4619      	mov	r1, r3
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 faca 	bl	800a2f4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d62:	3301      	adds	r3, #1
 8009d64:	627b      	str	r3, [r7, #36]	; 0x24
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d3ce      	bcc.n	8009d0e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	695a      	ldr	r2, [r3, #20]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009d7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4618      	mov	r0, r3
 8009d86:	f00b f86f 	bl	8014e68 <USB_ReadInterrupts>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d94:	d155      	bne.n	8009e42 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009d96:	2301      	movs	r3, #1
 8009d98:	627b      	str	r3, [r7, #36]	; 0x24
 8009d9a:	e045      	b.n	8009e28 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9e:	015a      	lsls	r2, r3, #5
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	4413      	add	r3, r2
 8009da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009dac:	6879      	ldr	r1, [r7, #4]
 8009dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009db0:	4613      	mov	r3, r2
 8009db2:	00db      	lsls	r3, r3, #3
 8009db4:	4413      	add	r3, r2
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	440b      	add	r3, r1
 8009dba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d12e      	bne.n	8009e22 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009dc4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	da2b      	bge.n	8009e22 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8009dd6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d121      	bne.n	8009e22 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009dde:	6879      	ldr	r1, [r7, #4]
 8009de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009de2:	4613      	mov	r3, r2
 8009de4:	00db      	lsls	r3, r3, #3
 8009de6:	4413      	add	r3, r2
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	440b      	add	r3, r1
 8009dec:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009df0:	2201      	movs	r2, #1
 8009df2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009df4:	6a3b      	ldr	r3, [r7, #32]
 8009df6:	699b      	ldr	r3, [r3, #24]
 8009df8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009dfc:	6a3b      	ldr	r3, [r7, #32]
 8009dfe:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009e00:	6a3b      	ldr	r3, [r7, #32]
 8009e02:	695b      	ldr	r3, [r3, #20]
 8009e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d10a      	bne.n	8009e22 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009e0c:	69fb      	ldr	r3, [r7, #28]
 8009e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	69fa      	ldr	r2, [r7, #28]
 8009e16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e1e:	6053      	str	r3, [r2, #4]
            break;
 8009e20:	e007      	b.n	8009e32 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e24:	3301      	adds	r3, #1
 8009e26:	627b      	str	r3, [r7, #36]	; 0x24
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d3b4      	bcc.n	8009d9c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	695a      	ldr	r2, [r3, #20]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009e40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4618      	mov	r0, r3
 8009e48:	f00b f80e 	bl	8014e68 <USB_ReadInterrupts>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e56:	d10a      	bne.n	8009e6e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f010 fe61 	bl	801ab20 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	695a      	ldr	r2, [r3, #20]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009e6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4618      	mov	r0, r3
 8009e74:	f00a fff8 	bl	8014e68 <USB_ReadInterrupts>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	f003 0304 	and.w	r3, r3, #4
 8009e7e:	2b04      	cmp	r3, #4
 8009e80:	d115      	bne.n	8009eae <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009e8a:	69bb      	ldr	r3, [r7, #24]
 8009e8c:	f003 0304 	and.w	r3, r3, #4
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d002      	beq.n	8009e9a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f010 fe51 	bl	801ab3c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	6859      	ldr	r1, [r3, #4]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	69ba      	ldr	r2, [r7, #24]
 8009ea6:	430a      	orrs	r2, r1
 8009ea8:	605a      	str	r2, [r3, #4]
 8009eaa:	e000      	b.n	8009eae <HAL_PCD_IRQHandler+0x992>
      return;
 8009eac:	bf00      	nop
    }
  }
}
 8009eae:	3734      	adds	r7, #52	; 0x34
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd90      	pop	{r4, r7, pc}

08009eb4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d101      	bne.n	8009ece <HAL_PCD_SetAddress+0x1a>
 8009eca:	2302      	movs	r3, #2
 8009ecc:	e013      	b.n	8009ef6 <HAL_PCD_SetAddress+0x42>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	78fa      	ldrb	r2, [r7, #3]
 8009eda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	78fa      	ldrb	r2, [r7, #3]
 8009ee4:	4611      	mov	r1, r2
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f00a ff56 	bl	8014d98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009ef4:	2300      	movs	r3, #0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3708      	adds	r7, #8
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b084      	sub	sp, #16
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
 8009f06:	4608      	mov	r0, r1
 8009f08:	4611      	mov	r1, r2
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	70fb      	strb	r3, [r7, #3]
 8009f10:	460b      	mov	r3, r1
 8009f12:	803b      	strh	r3, [r7, #0]
 8009f14:	4613      	mov	r3, r2
 8009f16:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009f1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	da0f      	bge.n	8009f44 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f24:	78fb      	ldrb	r3, [r7, #3]
 8009f26:	f003 020f 	and.w	r2, r3, #15
 8009f2a:	4613      	mov	r3, r2
 8009f2c:	00db      	lsls	r3, r3, #3
 8009f2e:	4413      	add	r3, r2
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	3338      	adds	r3, #56	; 0x38
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	4413      	add	r3, r2
 8009f38:	3304      	adds	r3, #4
 8009f3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	705a      	strb	r2, [r3, #1]
 8009f42:	e00f      	b.n	8009f64 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009f44:	78fb      	ldrb	r3, [r7, #3]
 8009f46:	f003 020f 	and.w	r2, r3, #15
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	00db      	lsls	r3, r3, #3
 8009f4e:	4413      	add	r3, r2
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	4413      	add	r3, r2
 8009f5a:	3304      	adds	r3, #4
 8009f5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2200      	movs	r2, #0
 8009f62:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009f64:	78fb      	ldrb	r3, [r7, #3]
 8009f66:	f003 030f 	and.w	r3, r3, #15
 8009f6a:	b2da      	uxtb	r2, r3
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009f70:	883a      	ldrh	r2, [r7, #0]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	78ba      	ldrb	r2, [r7, #2]
 8009f7a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	785b      	ldrb	r3, [r3, #1]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d004      	beq.n	8009f8e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	b29a      	uxth	r2, r3
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009f8e:	78bb      	ldrb	r3, [r7, #2]
 8009f90:	2b02      	cmp	r3, #2
 8009f92:	d102      	bne.n	8009f9a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2200      	movs	r2, #0
 8009f98:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d101      	bne.n	8009fa8 <HAL_PCD_EP_Open+0xaa>
 8009fa4:	2302      	movs	r3, #2
 8009fa6:	e00e      	b.n	8009fc6 <HAL_PCD_EP_Open+0xc8>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2201      	movs	r2, #1
 8009fac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	68f9      	ldr	r1, [r7, #12]
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f00a f8d6 	bl	8014168 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8009fc4:	7afb      	ldrb	r3, [r7, #11]
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b084      	sub	sp, #16
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009fda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	da0f      	bge.n	800a002 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009fe2:	78fb      	ldrb	r3, [r7, #3]
 8009fe4:	f003 020f 	and.w	r2, r3, #15
 8009fe8:	4613      	mov	r3, r2
 8009fea:	00db      	lsls	r3, r3, #3
 8009fec:	4413      	add	r3, r2
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	3338      	adds	r3, #56	; 0x38
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	4413      	add	r3, r2
 8009ff6:	3304      	adds	r3, #4
 8009ff8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	705a      	strb	r2, [r3, #1]
 800a000:	e00f      	b.n	800a022 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a002:	78fb      	ldrb	r3, [r7, #3]
 800a004:	f003 020f 	and.w	r2, r3, #15
 800a008:	4613      	mov	r3, r2
 800a00a:	00db      	lsls	r3, r3, #3
 800a00c:	4413      	add	r3, r2
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	4413      	add	r3, r2
 800a018:	3304      	adds	r3, #4
 800a01a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2200      	movs	r2, #0
 800a020:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a022:	78fb      	ldrb	r3, [r7, #3]
 800a024:	f003 030f 	and.w	r3, r3, #15
 800a028:	b2da      	uxtb	r2, r3
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a034:	2b01      	cmp	r3, #1
 800a036:	d101      	bne.n	800a03c <HAL_PCD_EP_Close+0x6e>
 800a038:	2302      	movs	r3, #2
 800a03a:	e00e      	b.n	800a05a <HAL_PCD_EP_Close+0x8c>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2201      	movs	r2, #1
 800a040:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	68f9      	ldr	r1, [r7, #12]
 800a04a:	4618      	mov	r0, r3
 800a04c:	f00a f914 	bl	8014278 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3710      	adds	r7, #16
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b086      	sub	sp, #24
 800a066:	af00      	add	r7, sp, #0
 800a068:	60f8      	str	r0, [r7, #12]
 800a06a:	607a      	str	r2, [r7, #4]
 800a06c:	603b      	str	r3, [r7, #0]
 800a06e:	460b      	mov	r3, r1
 800a070:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a072:	7afb      	ldrb	r3, [r7, #11]
 800a074:	f003 020f 	and.w	r2, r3, #15
 800a078:	4613      	mov	r3, r2
 800a07a:	00db      	lsls	r3, r3, #3
 800a07c:	4413      	add	r3, r2
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a084:	68fa      	ldr	r2, [r7, #12]
 800a086:	4413      	add	r3, r2
 800a088:	3304      	adds	r3, #4
 800a08a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	683a      	ldr	r2, [r7, #0]
 800a096:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	2200      	movs	r2, #0
 800a09c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a0a4:	7afb      	ldrb	r3, [r7, #11]
 800a0a6:	f003 030f 	and.w	r3, r3, #15
 800a0aa:	b2da      	uxtb	r2, r3
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d102      	bne.n	800a0be <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	6818      	ldr	r0, [r3, #0]
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	6979      	ldr	r1, [r7, #20]
 800a0cc:	f00a f9b0 	bl	8014430 <USB_EPStartXfer>

  return HAL_OK;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3718      	adds	r7, #24
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a0da:	b480      	push	{r7}
 800a0dc:	b083      	sub	sp, #12
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a0e6:	78fb      	ldrb	r3, [r7, #3]
 800a0e8:	f003 020f 	and.w	r2, r3, #15
 800a0ec:	6879      	ldr	r1, [r7, #4]
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	00db      	lsls	r3, r3, #3
 800a0f2:	4413      	add	r3, r2
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	440b      	add	r3, r1
 800a0f8:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800a0fc:	681b      	ldr	r3, [r3, #0]
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	370c      	adds	r7, #12
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr

0800a10a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b086      	sub	sp, #24
 800a10e:	af00      	add	r7, sp, #0
 800a110:	60f8      	str	r0, [r7, #12]
 800a112:	607a      	str	r2, [r7, #4]
 800a114:	603b      	str	r3, [r7, #0]
 800a116:	460b      	mov	r3, r1
 800a118:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a11a:	7afb      	ldrb	r3, [r7, #11]
 800a11c:	f003 020f 	and.w	r2, r3, #15
 800a120:	4613      	mov	r3, r2
 800a122:	00db      	lsls	r3, r3, #3
 800a124:	4413      	add	r3, r2
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	3338      	adds	r3, #56	; 0x38
 800a12a:	68fa      	ldr	r2, [r7, #12]
 800a12c:	4413      	add	r3, r2
 800a12e:	3304      	adds	r3, #4
 800a130:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	683a      	ldr	r2, [r7, #0]
 800a13c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	2200      	movs	r2, #0
 800a142:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	2201      	movs	r2, #1
 800a148:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a14a:	7afb      	ldrb	r3, [r7, #11]
 800a14c:	f003 030f 	and.w	r3, r3, #15
 800a150:	b2da      	uxtb	r2, r3
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d102      	bne.n	800a164 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6818      	ldr	r0, [r3, #0]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	68db      	ldr	r3, [r3, #12]
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	461a      	mov	r2, r3
 800a170:	6979      	ldr	r1, [r7, #20]
 800a172:	f00a f95d 	bl	8014430 <USB_EPStartXfer>

  return HAL_OK;
 800a176:	2300      	movs	r3, #0
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3718      	adds	r7, #24
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	460b      	mov	r3, r1
 800a18a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a18c:	78fb      	ldrb	r3, [r7, #3]
 800a18e:	f003 020f 	and.w	r2, r3, #15
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	429a      	cmp	r2, r3
 800a198:	d901      	bls.n	800a19e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	e050      	b.n	800a240 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a19e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	da0f      	bge.n	800a1c6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a1a6:	78fb      	ldrb	r3, [r7, #3]
 800a1a8:	f003 020f 	and.w	r2, r3, #15
 800a1ac:	4613      	mov	r3, r2
 800a1ae:	00db      	lsls	r3, r3, #3
 800a1b0:	4413      	add	r3, r2
 800a1b2:	009b      	lsls	r3, r3, #2
 800a1b4:	3338      	adds	r3, #56	; 0x38
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	3304      	adds	r3, #4
 800a1bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	705a      	strb	r2, [r3, #1]
 800a1c4:	e00d      	b.n	800a1e2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a1c6:	78fa      	ldrb	r2, [r7, #3]
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	00db      	lsls	r3, r3, #3
 800a1cc:	4413      	add	r3, r2
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	4413      	add	r3, r2
 800a1d8:	3304      	adds	r3, #4
 800a1da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a1e8:	78fb      	ldrb	r3, [r7, #3]
 800a1ea:	f003 030f 	and.w	r3, r3, #15
 800a1ee:	b2da      	uxtb	r2, r3
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d101      	bne.n	800a202 <HAL_PCD_EP_SetStall+0x82>
 800a1fe:	2302      	movs	r3, #2
 800a200:	e01e      	b.n	800a240 <HAL_PCD_EP_SetStall+0xc0>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2201      	movs	r2, #1
 800a206:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	68f9      	ldr	r1, [r7, #12]
 800a210:	4618      	mov	r0, r3
 800a212:	f00a fced 	bl	8014bf0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a216:	78fb      	ldrb	r3, [r7, #3]
 800a218:	f003 030f 	and.w	r3, r3, #15
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d10a      	bne.n	800a236 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6818      	ldr	r0, [r3, #0]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	b2d9      	uxtb	r1, r3
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a230:	461a      	mov	r2, r3
 800a232:	f00a fedf 	bl	8014ff4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2200      	movs	r2, #0
 800a23a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a23e:	2300      	movs	r3, #0
}
 800a240:	4618      	mov	r0, r3
 800a242:	3710      	adds	r7, #16
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	460b      	mov	r3, r1
 800a252:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a254:	78fb      	ldrb	r3, [r7, #3]
 800a256:	f003 020f 	and.w	r2, r3, #15
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d901      	bls.n	800a266 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a262:	2301      	movs	r3, #1
 800a264:	e042      	b.n	800a2ec <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a266:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	da0f      	bge.n	800a28e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a26e:	78fb      	ldrb	r3, [r7, #3]
 800a270:	f003 020f 	and.w	r2, r3, #15
 800a274:	4613      	mov	r3, r2
 800a276:	00db      	lsls	r3, r3, #3
 800a278:	4413      	add	r3, r2
 800a27a:	009b      	lsls	r3, r3, #2
 800a27c:	3338      	adds	r3, #56	; 0x38
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	4413      	add	r3, r2
 800a282:	3304      	adds	r3, #4
 800a284:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2201      	movs	r2, #1
 800a28a:	705a      	strb	r2, [r3, #1]
 800a28c:	e00f      	b.n	800a2ae <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a28e:	78fb      	ldrb	r3, [r7, #3]
 800a290:	f003 020f 	and.w	r2, r3, #15
 800a294:	4613      	mov	r3, r2
 800a296:	00db      	lsls	r3, r3, #3
 800a298:	4413      	add	r3, r2
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	4413      	add	r3, r2
 800a2a4:	3304      	adds	r3, #4
 800a2a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a2b4:	78fb      	ldrb	r3, [r7, #3]
 800a2b6:	f003 030f 	and.w	r3, r3, #15
 800a2ba:	b2da      	uxtb	r2, r3
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d101      	bne.n	800a2ce <HAL_PCD_EP_ClrStall+0x86>
 800a2ca:	2302      	movs	r3, #2
 800a2cc:	e00e      	b.n	800a2ec <HAL_PCD_EP_ClrStall+0xa4>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	68f9      	ldr	r1, [r7, #12]
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f00a fcf5 	bl	8014ccc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a2ea:	2300      	movs	r3, #0
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a300:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a304:	2b00      	cmp	r3, #0
 800a306:	da0c      	bge.n	800a322 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a308:	78fb      	ldrb	r3, [r7, #3]
 800a30a:	f003 020f 	and.w	r2, r3, #15
 800a30e:	4613      	mov	r3, r2
 800a310:	00db      	lsls	r3, r3, #3
 800a312:	4413      	add	r3, r2
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	3338      	adds	r3, #56	; 0x38
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	4413      	add	r3, r2
 800a31c:	3304      	adds	r3, #4
 800a31e:	60fb      	str	r3, [r7, #12]
 800a320:	e00c      	b.n	800a33c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a322:	78fb      	ldrb	r3, [r7, #3]
 800a324:	f003 020f 	and.w	r2, r3, #15
 800a328:	4613      	mov	r3, r2
 800a32a:	00db      	lsls	r3, r3, #3
 800a32c:	4413      	add	r3, r2
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	4413      	add	r3, r2
 800a338:	3304      	adds	r3, #4
 800a33a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	68f9      	ldr	r1, [r7, #12]
 800a342:	4618      	mov	r0, r3
 800a344:	f00a fb14 	bl	8014970 <USB_EPStopXfer>
 800a348:	4603      	mov	r3, r0
 800a34a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a34c:	7afb      	ldrb	r3, [r7, #11]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b08a      	sub	sp, #40	; 0x28
 800a35a:	af02      	add	r7, sp, #8
 800a35c:	6078      	str	r0, [r7, #4]
 800a35e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a36a:	683a      	ldr	r2, [r7, #0]
 800a36c:	4613      	mov	r3, r2
 800a36e:	00db      	lsls	r3, r3, #3
 800a370:	4413      	add	r3, r2
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	3338      	adds	r3, #56	; 0x38
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	4413      	add	r3, r2
 800a37a:	3304      	adds	r3, #4
 800a37c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	695a      	ldr	r2, [r3, #20]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	691b      	ldr	r3, [r3, #16]
 800a386:	429a      	cmp	r2, r3
 800a388:	d901      	bls.n	800a38e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a38a:	2301      	movs	r3, #1
 800a38c:	e06c      	b.n	800a468 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	691a      	ldr	r2, [r3, #16]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	695b      	ldr	r3, [r3, #20]
 800a396:	1ad3      	subs	r3, r2, r3
 800a398:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	689b      	ldr	r3, [r3, #8]
 800a39e:	69fa      	ldr	r2, [r7, #28]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d902      	bls.n	800a3aa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a3aa:	69fb      	ldr	r3, [r7, #28]
 800a3ac:	3303      	adds	r3, #3
 800a3ae:	089b      	lsrs	r3, r3, #2
 800a3b0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a3b2:	e02b      	b.n	800a40c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	691a      	ldr	r2, [r3, #16]
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	695b      	ldr	r3, [r3, #20]
 800a3bc:	1ad3      	subs	r3, r2, r3
 800a3be:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	69fa      	ldr	r2, [r7, #28]
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d902      	bls.n	800a3d0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a3d0:	69fb      	ldr	r3, [r7, #28]
 800a3d2:	3303      	adds	r3, #3
 800a3d4:	089b      	lsrs	r3, r3, #2
 800a3d6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	68d9      	ldr	r1, [r3, #12]
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	b2da      	uxtb	r2, r3
 800a3e0:	69fb      	ldr	r3, [r7, #28]
 800a3e2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	9300      	str	r3, [sp, #0]
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	6978      	ldr	r0, [r7, #20]
 800a3f0:	f00a fb68 	bl	8014ac4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	68da      	ldr	r2, [r3, #12]
 800a3f8:	69fb      	ldr	r3, [r7, #28]
 800a3fa:	441a      	add	r2, r3
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	695a      	ldr	r2, [r3, #20]
 800a404:	69fb      	ldr	r3, [r7, #28]
 800a406:	441a      	add	r2, r3
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	015a      	lsls	r2, r3, #5
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	4413      	add	r3, r2
 800a414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a418:	699b      	ldr	r3, [r3, #24]
 800a41a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a41c:	69ba      	ldr	r2, [r7, #24]
 800a41e:	429a      	cmp	r2, r3
 800a420:	d809      	bhi.n	800a436 <PCD_WriteEmptyTxFifo+0xe0>
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	695a      	ldr	r2, [r3, #20]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d203      	bcs.n	800a436 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	691b      	ldr	r3, [r3, #16]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d1be      	bne.n	800a3b4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	691a      	ldr	r2, [r3, #16]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	695b      	ldr	r3, [r3, #20]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d811      	bhi.n	800a466 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	f003 030f 	and.w	r3, r3, #15
 800a448:	2201      	movs	r2, #1
 800a44a:	fa02 f303 	lsl.w	r3, r2, r3
 800a44e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a456:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	43db      	mvns	r3, r3
 800a45c:	6939      	ldr	r1, [r7, #16]
 800a45e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a462:	4013      	ands	r3, r2
 800a464:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a466:	2300      	movs	r3, #0
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3720      	adds	r7, #32
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b088      	sub	sp, #32
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	333c      	adds	r3, #60	; 0x3c
 800a488:	3304      	adds	r3, #4
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	015a      	lsls	r2, r3, #5
 800a492:	69bb      	ldr	r3, [r7, #24]
 800a494:	4413      	add	r3, r2
 800a496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	68db      	ldr	r3, [r3, #12]
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d17b      	bne.n	800a59e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	f003 0308 	and.w	r3, r3, #8
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d015      	beq.n	800a4dc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	4a61      	ldr	r2, [pc, #388]	; (800a638 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	f240 80b9 	bls.w	800a62c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	f000 80b3 	beq.w	800a62c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	015a      	lsls	r2, r3, #5
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4d8:	6093      	str	r3, [r2, #8]
 800a4da:	e0a7      	b.n	800a62c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	f003 0320 	and.w	r3, r3, #32
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d009      	beq.n	800a4fa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	015a      	lsls	r2, r3, #5
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	4413      	add	r3, r2
 800a4ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	2320      	movs	r3, #32
 800a4f6:	6093      	str	r3, [r2, #8]
 800a4f8:	e098      	b.n	800a62c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a500:	2b00      	cmp	r3, #0
 800a502:	f040 8093 	bne.w	800a62c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	4a4b      	ldr	r2, [pc, #300]	; (800a638 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d90f      	bls.n	800a52e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a514:	2b00      	cmp	r3, #0
 800a516:	d00a      	beq.n	800a52e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	015a      	lsls	r2, r3, #5
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	4413      	add	r3, r2
 800a520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a524:	461a      	mov	r2, r3
 800a526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a52a:	6093      	str	r3, [r2, #8]
 800a52c:	e07e      	b.n	800a62c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800a52e:	683a      	ldr	r2, [r7, #0]
 800a530:	4613      	mov	r3, r2
 800a532:	00db      	lsls	r3, r3, #3
 800a534:	4413      	add	r3, r2
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	4413      	add	r3, r2
 800a540:	3304      	adds	r3, #4
 800a542:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6a1a      	ldr	r2, [r3, #32]
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	0159      	lsls	r1, r3, #5
 800a54c:	69bb      	ldr	r3, [r7, #24]
 800a54e:	440b      	add	r3, r1
 800a550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a554:	691b      	ldr	r3, [r3, #16]
 800a556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a55a:	1ad2      	subs	r2, r2, r3
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d114      	bne.n	800a590 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	691b      	ldr	r3, [r3, #16]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d109      	bne.n	800a582 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6818      	ldr	r0, [r3, #0]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a578:	461a      	mov	r2, r3
 800a57a:	2101      	movs	r1, #1
 800a57c:	f00a fd3a 	bl	8014ff4 <USB_EP0_OutStart>
 800a580:	e006      	b.n	800a590 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	68da      	ldr	r2, [r3, #12]
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	695b      	ldr	r3, [r3, #20]
 800a58a:	441a      	add	r2, r3
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	b2db      	uxtb	r3, r3
 800a594:	4619      	mov	r1, r3
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f010 f9fe 	bl	801a998 <HAL_PCD_DataOutStageCallback>
 800a59c:	e046      	b.n	800a62c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	4a26      	ldr	r2, [pc, #152]	; (800a63c <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d124      	bne.n	800a5f0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d00a      	beq.n	800a5c6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	015a      	lsls	r2, r3, #5
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	4413      	add	r3, r2
 800a5b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5bc:	461a      	mov	r2, r3
 800a5be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5c2:	6093      	str	r3, [r2, #8]
 800a5c4:	e032      	b.n	800a62c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	f003 0320 	and.w	r3, r3, #32
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d008      	beq.n	800a5e2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	015a      	lsls	r2, r3, #5
 800a5d4:	69bb      	ldr	r3, [r7, #24]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5dc:	461a      	mov	r2, r3
 800a5de:	2320      	movs	r3, #32
 800a5e0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f010 f9d5 	bl	801a998 <HAL_PCD_DataOutStageCallback>
 800a5ee:	e01d      	b.n	800a62c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d114      	bne.n	800a620 <PCD_EP_OutXfrComplete_int+0x1b0>
 800a5f6:	6879      	ldr	r1, [r7, #4]
 800a5f8:	683a      	ldr	r2, [r7, #0]
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	00db      	lsls	r3, r3, #3
 800a5fe:	4413      	add	r3, r2
 800a600:	009b      	lsls	r3, r3, #2
 800a602:	440b      	add	r3, r1
 800a604:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d108      	bne.n	800a620 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6818      	ldr	r0, [r3, #0]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a618:	461a      	mov	r2, r3
 800a61a:	2100      	movs	r1, #0
 800a61c:	f00a fcea 	bl	8014ff4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	b2db      	uxtb	r3, r3
 800a624:	4619      	mov	r1, r3
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f010 f9b6 	bl	801a998 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a62c:	2300      	movs	r3, #0
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3720      	adds	r7, #32
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	4f54300a 	.word	0x4f54300a
 800a63c:	4f54310a 	.word	0x4f54310a

0800a640 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b086      	sub	sp, #24
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	333c      	adds	r3, #60	; 0x3c
 800a658:	3304      	adds	r3, #4
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	015a      	lsls	r2, r3, #5
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	4413      	add	r3, r2
 800a666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	4a15      	ldr	r2, [pc, #84]	; (800a6c8 <PCD_EP_OutSetupPacket_int+0x88>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d90e      	bls.n	800a694 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d009      	beq.n	800a694 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	015a      	lsls	r2, r3, #5
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	4413      	add	r3, r2
 800a688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a68c:	461a      	mov	r2, r3
 800a68e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a692:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f010 f96d 	bl	801a974 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	4a0a      	ldr	r2, [pc, #40]	; (800a6c8 <PCD_EP_OutSetupPacket_int+0x88>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d90c      	bls.n	800a6bc <PCD_EP_OutSetupPacket_int+0x7c>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d108      	bne.n	800a6bc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6818      	ldr	r0, [r3, #0]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	2101      	movs	r1, #1
 800a6b8:	f00a fc9c 	bl	8014ff4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a6bc:	2300      	movs	r3, #0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3718      	adds	r7, #24
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	4f54300a 	.word	0x4f54300a

0800a6cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	70fb      	strb	r3, [r7, #3]
 800a6d8:	4613      	mov	r3, r2
 800a6da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a6e4:	78fb      	ldrb	r3, [r7, #3]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d107      	bne.n	800a6fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a6ea:	883b      	ldrh	r3, [r7, #0]
 800a6ec:	0419      	lsls	r1, r3, #16
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	68ba      	ldr	r2, [r7, #8]
 800a6f4:	430a      	orrs	r2, r1
 800a6f6:	629a      	str	r2, [r3, #40]	; 0x28
 800a6f8:	e028      	b.n	800a74c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a700:	0c1b      	lsrs	r3, r3, #16
 800a702:	68ba      	ldr	r2, [r7, #8]
 800a704:	4413      	add	r3, r2
 800a706:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a708:	2300      	movs	r3, #0
 800a70a:	73fb      	strb	r3, [r7, #15]
 800a70c:	e00d      	b.n	800a72a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	7bfb      	ldrb	r3, [r7, #15]
 800a714:	3340      	adds	r3, #64	; 0x40
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	4413      	add	r3, r2
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	0c1b      	lsrs	r3, r3, #16
 800a71e:	68ba      	ldr	r2, [r7, #8]
 800a720:	4413      	add	r3, r2
 800a722:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a724:	7bfb      	ldrb	r3, [r7, #15]
 800a726:	3301      	adds	r3, #1
 800a728:	73fb      	strb	r3, [r7, #15]
 800a72a:	7bfa      	ldrb	r2, [r7, #15]
 800a72c:	78fb      	ldrb	r3, [r7, #3]
 800a72e:	3b01      	subs	r3, #1
 800a730:	429a      	cmp	r2, r3
 800a732:	d3ec      	bcc.n	800a70e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a734:	883b      	ldrh	r3, [r7, #0]
 800a736:	0418      	lsls	r0, r3, #16
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6819      	ldr	r1, [r3, #0]
 800a73c:	78fb      	ldrb	r3, [r7, #3]
 800a73e:	3b01      	subs	r3, #1
 800a740:	68ba      	ldr	r2, [r7, #8]
 800a742:	4302      	orrs	r2, r0
 800a744:	3340      	adds	r3, #64	; 0x40
 800a746:	009b      	lsls	r3, r3, #2
 800a748:	440b      	add	r3, r1
 800a74a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3714      	adds	r7, #20
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr

0800a75a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a75a:	b480      	push	{r7}
 800a75c:	b083      	sub	sp, #12
 800a75e:	af00      	add	r7, sp, #0
 800a760:	6078      	str	r0, [r7, #4]
 800a762:	460b      	mov	r3, r1
 800a764:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	887a      	ldrh	r2, [r7, #2]
 800a76c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a76e:	2300      	movs	r3, #0
}
 800a770:	4618      	mov	r0, r3
 800a772:	370c      	adds	r7, #12
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr

0800a77c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b085      	sub	sp, #20
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2201      	movs	r2, #1
 800a78e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	699b      	ldr	r3, [r3, #24]
 800a79e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7aa:	4b05      	ldr	r3, [pc, #20]	; (800a7c0 <HAL_PCDEx_ActivateLPM+0x44>)
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	68fa      	ldr	r2, [r7, #12]
 800a7b0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a7b2:	2300      	movs	r3, #0
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3714      	adds	r7, #20
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr
 800a7c0:	10000003 	.word	0x10000003

0800a7c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a7d0:	bf00      	nop
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a7e4:	4b19      	ldr	r3, [pc, #100]	; (800a84c <HAL_PWREx_ConfigSupply+0x70>)
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	f003 0304 	and.w	r3, r3, #4
 800a7ec:	2b04      	cmp	r3, #4
 800a7ee:	d00a      	beq.n	800a806 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a7f0:	4b16      	ldr	r3, [pc, #88]	; (800a84c <HAL_PWREx_ConfigSupply+0x70>)
 800a7f2:	68db      	ldr	r3, [r3, #12]
 800a7f4:	f003 0307 	and.w	r3, r3, #7
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d001      	beq.n	800a802 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a7fe:	2301      	movs	r3, #1
 800a800:	e01f      	b.n	800a842 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a802:	2300      	movs	r3, #0
 800a804:	e01d      	b.n	800a842 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a806:	4b11      	ldr	r3, [pc, #68]	; (800a84c <HAL_PWREx_ConfigSupply+0x70>)
 800a808:	68db      	ldr	r3, [r3, #12]
 800a80a:	f023 0207 	bic.w	r2, r3, #7
 800a80e:	490f      	ldr	r1, [pc, #60]	; (800a84c <HAL_PWREx_ConfigSupply+0x70>)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	4313      	orrs	r3, r2
 800a814:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a816:	f7f9 fcc3 	bl	80041a0 <HAL_GetTick>
 800a81a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a81c:	e009      	b.n	800a832 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a81e:	f7f9 fcbf 	bl	80041a0 <HAL_GetTick>
 800a822:	4602      	mov	r2, r0
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	1ad3      	subs	r3, r2, r3
 800a828:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a82c:	d901      	bls.n	800a832 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a82e:	2301      	movs	r3, #1
 800a830:	e007      	b.n	800a842 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a832:	4b06      	ldr	r3, [pc, #24]	; (800a84c <HAL_PWREx_ConfigSupply+0x70>)
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a83a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a83e:	d1ee      	bne.n	800a81e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a840:	2300      	movs	r3, #0
}
 800a842:	4618      	mov	r0, r3
 800a844:	3710      	adds	r7, #16
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
 800a84a:	bf00      	nop
 800a84c:	58024800 	.word	0x58024800

0800a850 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800a850:	b480      	push	{r7}
 800a852:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a854:	4b05      	ldr	r3, [pc, #20]	; (800a86c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	4a04      	ldr	r2, [pc, #16]	; (800a86c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a85a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a85e:	60d3      	str	r3, [r2, #12]
}
 800a860:	bf00      	nop
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr
 800a86a:	bf00      	nop
 800a86c:	58024800 	.word	0x58024800

0800a870 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b08c      	sub	sp, #48	; 0x30
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d101      	bne.n	800a882 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a87e:	2301      	movs	r3, #1
 800a880:	e3c8      	b.n	800b014 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f003 0301 	and.w	r3, r3, #1
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	f000 8087 	beq.w	800a99e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a890:	4b88      	ldr	r3, [pc, #544]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800a892:	691b      	ldr	r3, [r3, #16]
 800a894:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a898:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a89a:	4b86      	ldr	r3, [pc, #536]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800a89c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a89e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a2:	2b10      	cmp	r3, #16
 800a8a4:	d007      	beq.n	800a8b6 <HAL_RCC_OscConfig+0x46>
 800a8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a8:	2b18      	cmp	r3, #24
 800a8aa:	d110      	bne.n	800a8ce <HAL_RCC_OscConfig+0x5e>
 800a8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ae:	f003 0303 	and.w	r3, r3, #3
 800a8b2:	2b02      	cmp	r3, #2
 800a8b4:	d10b      	bne.n	800a8ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8b6:	4b7f      	ldr	r3, [pc, #508]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d06c      	beq.n	800a99c <HAL_RCC_OscConfig+0x12c>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d168      	bne.n	800a99c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e3a2      	b.n	800b014 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8d6:	d106      	bne.n	800a8e6 <HAL_RCC_OscConfig+0x76>
 800a8d8:	4b76      	ldr	r3, [pc, #472]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a75      	ldr	r2, [pc, #468]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800a8de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8e2:	6013      	str	r3, [r2, #0]
 800a8e4:	e02e      	b.n	800a944 <HAL_RCC_OscConfig+0xd4>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d10c      	bne.n	800a908 <HAL_RCC_OscConfig+0x98>
 800a8ee:	4b71      	ldr	r3, [pc, #452]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4a70      	ldr	r2, [pc, #448]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800a8f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8f8:	6013      	str	r3, [r2, #0]
 800a8fa:	4b6e      	ldr	r3, [pc, #440]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4a6d      	ldr	r2, [pc, #436]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800a900:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a904:	6013      	str	r3, [r2, #0]
 800a906:	e01d      	b.n	800a944 <HAL_RCC_OscConfig+0xd4>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a910:	d10c      	bne.n	800a92c <HAL_RCC_OscConfig+0xbc>
 800a912:	4b68      	ldr	r3, [pc, #416]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4a67      	ldr	r2, [pc, #412]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800a918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a91c:	6013      	str	r3, [r2, #0]
 800a91e:	4b65      	ldr	r3, [pc, #404]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a64      	ldr	r2, [pc, #400]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800a924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a928:	6013      	str	r3, [r2, #0]
 800a92a:	e00b      	b.n	800a944 <HAL_RCC_OscConfig+0xd4>
 800a92c:	4b61      	ldr	r3, [pc, #388]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a60      	ldr	r2, [pc, #384]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800a932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a936:	6013      	str	r3, [r2, #0]
 800a938:	4b5e      	ldr	r3, [pc, #376]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a5d      	ldr	r2, [pc, #372]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800a93e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d013      	beq.n	800a974 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a94c:	f7f9 fc28 	bl	80041a0 <HAL_GetTick>
 800a950:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a952:	e008      	b.n	800a966 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a954:	f7f9 fc24 	bl	80041a0 <HAL_GetTick>
 800a958:	4602      	mov	r2, r0
 800a95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95c:	1ad3      	subs	r3, r2, r3
 800a95e:	2b64      	cmp	r3, #100	; 0x64
 800a960:	d901      	bls.n	800a966 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a962:	2303      	movs	r3, #3
 800a964:	e356      	b.n	800b014 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a966:	4b53      	ldr	r3, [pc, #332]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d0f0      	beq.n	800a954 <HAL_RCC_OscConfig+0xe4>
 800a972:	e014      	b.n	800a99e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a974:	f7f9 fc14 	bl	80041a0 <HAL_GetTick>
 800a978:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a97a:	e008      	b.n	800a98e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a97c:	f7f9 fc10 	bl	80041a0 <HAL_GetTick>
 800a980:	4602      	mov	r2, r0
 800a982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a984:	1ad3      	subs	r3, r2, r3
 800a986:	2b64      	cmp	r3, #100	; 0x64
 800a988:	d901      	bls.n	800a98e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a98a:	2303      	movs	r3, #3
 800a98c:	e342      	b.n	800b014 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a98e:	4b49      	ldr	r3, [pc, #292]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a996:	2b00      	cmp	r3, #0
 800a998:	d1f0      	bne.n	800a97c <HAL_RCC_OscConfig+0x10c>
 800a99a:	e000      	b.n	800a99e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a99c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f003 0302 	and.w	r3, r3, #2
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	f000 808c 	beq.w	800aac4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a9ac:	4b41      	ldr	r3, [pc, #260]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800a9ae:	691b      	ldr	r3, [r3, #16]
 800a9b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a9b4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a9b6:	4b3f      	ldr	r3, [pc, #252]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800a9b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a9bc:	6a3b      	ldr	r3, [r7, #32]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d007      	beq.n	800a9d2 <HAL_RCC_OscConfig+0x162>
 800a9c2:	6a3b      	ldr	r3, [r7, #32]
 800a9c4:	2b18      	cmp	r3, #24
 800a9c6:	d137      	bne.n	800aa38 <HAL_RCC_OscConfig+0x1c8>
 800a9c8:	69fb      	ldr	r3, [r7, #28]
 800a9ca:	f003 0303 	and.w	r3, r3, #3
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d132      	bne.n	800aa38 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a9d2:	4b38      	ldr	r3, [pc, #224]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f003 0304 	and.w	r3, r3, #4
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d005      	beq.n	800a9ea <HAL_RCC_OscConfig+0x17a>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	68db      	ldr	r3, [r3, #12]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d101      	bne.n	800a9ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e314      	b.n	800b014 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a9ea:	4b32      	ldr	r3, [pc, #200]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f023 0219 	bic.w	r2, r3, #25
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	68db      	ldr	r3, [r3, #12]
 800a9f6:	492f      	ldr	r1, [pc, #188]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9fc:	f7f9 fbd0 	bl	80041a0 <HAL_GetTick>
 800aa00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa02:	e008      	b.n	800aa16 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa04:	f7f9 fbcc 	bl	80041a0 <HAL_GetTick>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0c:	1ad3      	subs	r3, r2, r3
 800aa0e:	2b02      	cmp	r3, #2
 800aa10:	d901      	bls.n	800aa16 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800aa12:	2303      	movs	r3, #3
 800aa14:	e2fe      	b.n	800b014 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa16:	4b27      	ldr	r3, [pc, #156]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f003 0304 	and.w	r3, r3, #4
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d0f0      	beq.n	800aa04 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa22:	4b24      	ldr	r3, [pc, #144]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	691b      	ldr	r3, [r3, #16]
 800aa2e:	061b      	lsls	r3, r3, #24
 800aa30:	4920      	ldr	r1, [pc, #128]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800aa32:	4313      	orrs	r3, r2
 800aa34:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aa36:	e045      	b.n	800aac4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	68db      	ldr	r3, [r3, #12]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d026      	beq.n	800aa8e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aa40:	4b1c      	ldr	r3, [pc, #112]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f023 0219 	bic.w	r2, r3, #25
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	68db      	ldr	r3, [r3, #12]
 800aa4c:	4919      	ldr	r1, [pc, #100]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa52:	f7f9 fba5 	bl	80041a0 <HAL_GetTick>
 800aa56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa58:	e008      	b.n	800aa6c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa5a:	f7f9 fba1 	bl	80041a0 <HAL_GetTick>
 800aa5e:	4602      	mov	r2, r0
 800aa60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa62:	1ad3      	subs	r3, r2, r3
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	d901      	bls.n	800aa6c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800aa68:	2303      	movs	r3, #3
 800aa6a:	e2d3      	b.n	800b014 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa6c:	4b11      	ldr	r3, [pc, #68]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f003 0304 	and.w	r3, r3, #4
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d0f0      	beq.n	800aa5a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa78:	4b0e      	ldr	r3, [pc, #56]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	691b      	ldr	r3, [r3, #16]
 800aa84:	061b      	lsls	r3, r3, #24
 800aa86:	490b      	ldr	r1, [pc, #44]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	604b      	str	r3, [r1, #4]
 800aa8c:	e01a      	b.n	800aac4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa8e:	4b09      	ldr	r3, [pc, #36]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	4a08      	ldr	r2, [pc, #32]	; (800aab4 <HAL_RCC_OscConfig+0x244>)
 800aa94:	f023 0301 	bic.w	r3, r3, #1
 800aa98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa9a:	f7f9 fb81 	bl	80041a0 <HAL_GetTick>
 800aa9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aaa0:	e00a      	b.n	800aab8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aaa2:	f7f9 fb7d 	bl	80041a0 <HAL_GetTick>
 800aaa6:	4602      	mov	r2, r0
 800aaa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaaa:	1ad3      	subs	r3, r2, r3
 800aaac:	2b02      	cmp	r3, #2
 800aaae:	d903      	bls.n	800aab8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800aab0:	2303      	movs	r3, #3
 800aab2:	e2af      	b.n	800b014 <HAL_RCC_OscConfig+0x7a4>
 800aab4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aab8:	4b96      	ldr	r3, [pc, #600]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f003 0304 	and.w	r3, r3, #4
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d1ee      	bne.n	800aaa2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f003 0310 	and.w	r3, r3, #16
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d06a      	beq.n	800aba6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aad0:	4b90      	ldr	r3, [pc, #576]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800aad2:	691b      	ldr	r3, [r3, #16]
 800aad4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aad8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aada:	4b8e      	ldr	r3, [pc, #568]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800aadc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aade:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800aae0:	69bb      	ldr	r3, [r7, #24]
 800aae2:	2b08      	cmp	r3, #8
 800aae4:	d007      	beq.n	800aaf6 <HAL_RCC_OscConfig+0x286>
 800aae6:	69bb      	ldr	r3, [r7, #24]
 800aae8:	2b18      	cmp	r3, #24
 800aaea:	d11b      	bne.n	800ab24 <HAL_RCC_OscConfig+0x2b4>
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	f003 0303 	and.w	r3, r3, #3
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d116      	bne.n	800ab24 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aaf6:	4b87      	ldr	r3, [pc, #540]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d005      	beq.n	800ab0e <HAL_RCC_OscConfig+0x29e>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	69db      	ldr	r3, [r3, #28]
 800ab06:	2b80      	cmp	r3, #128	; 0x80
 800ab08:	d001      	beq.n	800ab0e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e282      	b.n	800b014 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ab0e:	4b81      	ldr	r3, [pc, #516]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800ab10:	68db      	ldr	r3, [r3, #12]
 800ab12:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6a1b      	ldr	r3, [r3, #32]
 800ab1a:	061b      	lsls	r3, r3, #24
 800ab1c:	497d      	ldr	r1, [pc, #500]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800ab1e:	4313      	orrs	r3, r2
 800ab20:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ab22:	e040      	b.n	800aba6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	69db      	ldr	r3, [r3, #28]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d023      	beq.n	800ab74 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800ab2c:	4b79      	ldr	r3, [pc, #484]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4a78      	ldr	r2, [pc, #480]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800ab32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab38:	f7f9 fb32 	bl	80041a0 <HAL_GetTick>
 800ab3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ab3e:	e008      	b.n	800ab52 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ab40:	f7f9 fb2e 	bl	80041a0 <HAL_GetTick>
 800ab44:	4602      	mov	r2, r0
 800ab46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab48:	1ad3      	subs	r3, r2, r3
 800ab4a:	2b02      	cmp	r3, #2
 800ab4c:	d901      	bls.n	800ab52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800ab4e:	2303      	movs	r3, #3
 800ab50:	e260      	b.n	800b014 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ab52:	4b70      	ldr	r3, [pc, #448]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d0f0      	beq.n	800ab40 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ab5e:	4b6d      	ldr	r3, [pc, #436]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6a1b      	ldr	r3, [r3, #32]
 800ab6a:	061b      	lsls	r3, r3, #24
 800ab6c:	4969      	ldr	r1, [pc, #420]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	60cb      	str	r3, [r1, #12]
 800ab72:	e018      	b.n	800aba6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ab74:	4b67      	ldr	r3, [pc, #412]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a66      	ldr	r2, [pc, #408]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800ab7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab80:	f7f9 fb0e 	bl	80041a0 <HAL_GetTick>
 800ab84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ab86:	e008      	b.n	800ab9a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ab88:	f7f9 fb0a 	bl	80041a0 <HAL_GetTick>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab90:	1ad3      	subs	r3, r2, r3
 800ab92:	2b02      	cmp	r3, #2
 800ab94:	d901      	bls.n	800ab9a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800ab96:	2303      	movs	r3, #3
 800ab98:	e23c      	b.n	800b014 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ab9a:	4b5e      	ldr	r3, [pc, #376]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1f0      	bne.n	800ab88 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f003 0308 	and.w	r3, r3, #8
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d036      	beq.n	800ac20 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	695b      	ldr	r3, [r3, #20]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d019      	beq.n	800abee <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800abba:	4b56      	ldr	r3, [pc, #344]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800abbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abbe:	4a55      	ldr	r2, [pc, #340]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800abc0:	f043 0301 	orr.w	r3, r3, #1
 800abc4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abc6:	f7f9 faeb 	bl	80041a0 <HAL_GetTick>
 800abca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800abcc:	e008      	b.n	800abe0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800abce:	f7f9 fae7 	bl	80041a0 <HAL_GetTick>
 800abd2:	4602      	mov	r2, r0
 800abd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd6:	1ad3      	subs	r3, r2, r3
 800abd8:	2b02      	cmp	r3, #2
 800abda:	d901      	bls.n	800abe0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800abdc:	2303      	movs	r3, #3
 800abde:	e219      	b.n	800b014 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800abe0:	4b4c      	ldr	r3, [pc, #304]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800abe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abe4:	f003 0302 	and.w	r3, r3, #2
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d0f0      	beq.n	800abce <HAL_RCC_OscConfig+0x35e>
 800abec:	e018      	b.n	800ac20 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800abee:	4b49      	ldr	r3, [pc, #292]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800abf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abf2:	4a48      	ldr	r2, [pc, #288]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800abf4:	f023 0301 	bic.w	r3, r3, #1
 800abf8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abfa:	f7f9 fad1 	bl	80041a0 <HAL_GetTick>
 800abfe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ac00:	e008      	b.n	800ac14 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ac02:	f7f9 facd 	bl	80041a0 <HAL_GetTick>
 800ac06:	4602      	mov	r2, r0
 800ac08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0a:	1ad3      	subs	r3, r2, r3
 800ac0c:	2b02      	cmp	r3, #2
 800ac0e:	d901      	bls.n	800ac14 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800ac10:	2303      	movs	r3, #3
 800ac12:	e1ff      	b.n	800b014 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ac14:	4b3f      	ldr	r3, [pc, #252]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800ac16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac18:	f003 0302 	and.w	r3, r3, #2
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d1f0      	bne.n	800ac02 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f003 0320 	and.w	r3, r3, #32
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d036      	beq.n	800ac9a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	699b      	ldr	r3, [r3, #24]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d019      	beq.n	800ac68 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ac34:	4b37      	ldr	r3, [pc, #220]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	4a36      	ldr	r2, [pc, #216]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800ac3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ac3e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ac40:	f7f9 faae 	bl	80041a0 <HAL_GetTick>
 800ac44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ac46:	e008      	b.n	800ac5a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ac48:	f7f9 faaa 	bl	80041a0 <HAL_GetTick>
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac50:	1ad3      	subs	r3, r2, r3
 800ac52:	2b02      	cmp	r3, #2
 800ac54:	d901      	bls.n	800ac5a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800ac56:	2303      	movs	r3, #3
 800ac58:	e1dc      	b.n	800b014 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ac5a:	4b2e      	ldr	r3, [pc, #184]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d0f0      	beq.n	800ac48 <HAL_RCC_OscConfig+0x3d8>
 800ac66:	e018      	b.n	800ac9a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ac68:	4b2a      	ldr	r3, [pc, #168]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a29      	ldr	r2, [pc, #164]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800ac6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac72:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ac74:	f7f9 fa94 	bl	80041a0 <HAL_GetTick>
 800ac78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ac7a:	e008      	b.n	800ac8e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ac7c:	f7f9 fa90 	bl	80041a0 <HAL_GetTick>
 800ac80:	4602      	mov	r2, r0
 800ac82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac84:	1ad3      	subs	r3, r2, r3
 800ac86:	2b02      	cmp	r3, #2
 800ac88:	d901      	bls.n	800ac8e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800ac8a:	2303      	movs	r3, #3
 800ac8c:	e1c2      	b.n	800b014 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ac8e:	4b21      	ldr	r3, [pc, #132]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d1f0      	bne.n	800ac7c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f003 0304 	and.w	r3, r3, #4
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	f000 8086 	beq.w	800adb4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800aca8:	4b1b      	ldr	r3, [pc, #108]	; (800ad18 <HAL_RCC_OscConfig+0x4a8>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a1a      	ldr	r2, [pc, #104]	; (800ad18 <HAL_RCC_OscConfig+0x4a8>)
 800acae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800acb4:	f7f9 fa74 	bl	80041a0 <HAL_GetTick>
 800acb8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800acba:	e008      	b.n	800acce <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800acbc:	f7f9 fa70 	bl	80041a0 <HAL_GetTick>
 800acc0:	4602      	mov	r2, r0
 800acc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc4:	1ad3      	subs	r3, r2, r3
 800acc6:	2b64      	cmp	r3, #100	; 0x64
 800acc8:	d901      	bls.n	800acce <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800acca:	2303      	movs	r3, #3
 800accc:	e1a2      	b.n	800b014 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800acce:	4b12      	ldr	r3, [pc, #72]	; (800ad18 <HAL_RCC_OscConfig+0x4a8>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d0f0      	beq.n	800acbc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	689b      	ldr	r3, [r3, #8]
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d106      	bne.n	800acf0 <HAL_RCC_OscConfig+0x480>
 800ace2:	4b0c      	ldr	r3, [pc, #48]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800ace4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ace6:	4a0b      	ldr	r2, [pc, #44]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800ace8:	f043 0301 	orr.w	r3, r3, #1
 800acec:	6713      	str	r3, [r2, #112]	; 0x70
 800acee:	e032      	b.n	800ad56 <HAL_RCC_OscConfig+0x4e6>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	689b      	ldr	r3, [r3, #8]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d111      	bne.n	800ad1c <HAL_RCC_OscConfig+0x4ac>
 800acf8:	4b06      	ldr	r3, [pc, #24]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800acfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acfc:	4a05      	ldr	r2, [pc, #20]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800acfe:	f023 0301 	bic.w	r3, r3, #1
 800ad02:	6713      	str	r3, [r2, #112]	; 0x70
 800ad04:	4b03      	ldr	r3, [pc, #12]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800ad06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad08:	4a02      	ldr	r2, [pc, #8]	; (800ad14 <HAL_RCC_OscConfig+0x4a4>)
 800ad0a:	f023 0304 	bic.w	r3, r3, #4
 800ad0e:	6713      	str	r3, [r2, #112]	; 0x70
 800ad10:	e021      	b.n	800ad56 <HAL_RCC_OscConfig+0x4e6>
 800ad12:	bf00      	nop
 800ad14:	58024400 	.word	0x58024400
 800ad18:	58024800 	.word	0x58024800
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	2b05      	cmp	r3, #5
 800ad22:	d10c      	bne.n	800ad3e <HAL_RCC_OscConfig+0x4ce>
 800ad24:	4b83      	ldr	r3, [pc, #524]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800ad26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad28:	4a82      	ldr	r2, [pc, #520]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800ad2a:	f043 0304 	orr.w	r3, r3, #4
 800ad2e:	6713      	str	r3, [r2, #112]	; 0x70
 800ad30:	4b80      	ldr	r3, [pc, #512]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800ad32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad34:	4a7f      	ldr	r2, [pc, #508]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800ad36:	f043 0301 	orr.w	r3, r3, #1
 800ad3a:	6713      	str	r3, [r2, #112]	; 0x70
 800ad3c:	e00b      	b.n	800ad56 <HAL_RCC_OscConfig+0x4e6>
 800ad3e:	4b7d      	ldr	r3, [pc, #500]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800ad40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad42:	4a7c      	ldr	r2, [pc, #496]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800ad44:	f023 0301 	bic.w	r3, r3, #1
 800ad48:	6713      	str	r3, [r2, #112]	; 0x70
 800ad4a:	4b7a      	ldr	r3, [pc, #488]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800ad4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad4e:	4a79      	ldr	r2, [pc, #484]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800ad50:	f023 0304 	bic.w	r3, r3, #4
 800ad54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	689b      	ldr	r3, [r3, #8]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d015      	beq.n	800ad8a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad5e:	f7f9 fa1f 	bl	80041a0 <HAL_GetTick>
 800ad62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad64:	e00a      	b.n	800ad7c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad66:	f7f9 fa1b 	bl	80041a0 <HAL_GetTick>
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6e:	1ad3      	subs	r3, r2, r3
 800ad70:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d901      	bls.n	800ad7c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800ad78:	2303      	movs	r3, #3
 800ad7a:	e14b      	b.n	800b014 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad7c:	4b6d      	ldr	r3, [pc, #436]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800ad7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad80:	f003 0302 	and.w	r3, r3, #2
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d0ee      	beq.n	800ad66 <HAL_RCC_OscConfig+0x4f6>
 800ad88:	e014      	b.n	800adb4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad8a:	f7f9 fa09 	bl	80041a0 <HAL_GetTick>
 800ad8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ad90:	e00a      	b.n	800ada8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad92:	f7f9 fa05 	bl	80041a0 <HAL_GetTick>
 800ad96:	4602      	mov	r2, r0
 800ad98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9a:	1ad3      	subs	r3, r2, r3
 800ad9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d901      	bls.n	800ada8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800ada4:	2303      	movs	r3, #3
 800ada6:	e135      	b.n	800b014 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ada8:	4b62      	ldr	r3, [pc, #392]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800adaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adac:	f003 0302 	and.w	r3, r3, #2
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d1ee      	bne.n	800ad92 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f000 812a 	beq.w	800b012 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800adbe:	4b5d      	ldr	r3, [pc, #372]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800adc0:	691b      	ldr	r3, [r3, #16]
 800adc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800adc6:	2b18      	cmp	r3, #24
 800adc8:	f000 80ba 	beq.w	800af40 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add0:	2b02      	cmp	r3, #2
 800add2:	f040 8095 	bne.w	800af00 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800add6:	4b57      	ldr	r3, [pc, #348]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a56      	ldr	r2, [pc, #344]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800addc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ade0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ade2:	f7f9 f9dd 	bl	80041a0 <HAL_GetTick>
 800ade6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ade8:	e008      	b.n	800adfc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800adea:	f7f9 f9d9 	bl	80041a0 <HAL_GetTick>
 800adee:	4602      	mov	r2, r0
 800adf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf2:	1ad3      	subs	r3, r2, r3
 800adf4:	2b02      	cmp	r3, #2
 800adf6:	d901      	bls.n	800adfc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800adf8:	2303      	movs	r3, #3
 800adfa:	e10b      	b.n	800b014 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800adfc:	4b4d      	ldr	r3, [pc, #308]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d1f0      	bne.n	800adea <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ae08:	4b4a      	ldr	r3, [pc, #296]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800ae0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae0c:	4b4a      	ldr	r3, [pc, #296]	; (800af38 <HAL_RCC_OscConfig+0x6c8>)
 800ae0e:	4013      	ands	r3, r2
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ae18:	0112      	lsls	r2, r2, #4
 800ae1a:	430a      	orrs	r2, r1
 800ae1c:	4945      	ldr	r1, [pc, #276]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	628b      	str	r3, [r1, #40]	; 0x28
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae26:	3b01      	subs	r3, #1
 800ae28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae30:	3b01      	subs	r3, #1
 800ae32:	025b      	lsls	r3, r3, #9
 800ae34:	b29b      	uxth	r3, r3
 800ae36:	431a      	orrs	r2, r3
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae3c:	3b01      	subs	r3, #1
 800ae3e:	041b      	lsls	r3, r3, #16
 800ae40:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ae44:	431a      	orrs	r2, r3
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae4a:	3b01      	subs	r3, #1
 800ae4c:	061b      	lsls	r3, r3, #24
 800ae4e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ae52:	4938      	ldr	r1, [pc, #224]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800ae54:	4313      	orrs	r3, r2
 800ae56:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800ae58:	4b36      	ldr	r3, [pc, #216]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800ae5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae5c:	4a35      	ldr	r2, [pc, #212]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800ae5e:	f023 0301 	bic.w	r3, r3, #1
 800ae62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ae64:	4b33      	ldr	r3, [pc, #204]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800ae66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae68:	4b34      	ldr	r3, [pc, #208]	; (800af3c <HAL_RCC_OscConfig+0x6cc>)
 800ae6a:	4013      	ands	r3, r2
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ae70:	00d2      	lsls	r2, r2, #3
 800ae72:	4930      	ldr	r1, [pc, #192]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800ae74:	4313      	orrs	r3, r2
 800ae76:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ae78:	4b2e      	ldr	r3, [pc, #184]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800ae7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae7c:	f023 020c 	bic.w	r2, r3, #12
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae84:	492b      	ldr	r1, [pc, #172]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800ae86:	4313      	orrs	r3, r2
 800ae88:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ae8a:	4b2a      	ldr	r3, [pc, #168]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800ae8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae8e:	f023 0202 	bic.w	r2, r3, #2
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae96:	4927      	ldr	r1, [pc, #156]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ae9c:	4b25      	ldr	r3, [pc, #148]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800ae9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea0:	4a24      	ldr	r2, [pc, #144]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800aea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aea6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aea8:	4b22      	ldr	r3, [pc, #136]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800aeaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeac:	4a21      	ldr	r2, [pc, #132]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800aeae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aeb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800aeb4:	4b1f      	ldr	r3, [pc, #124]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800aeb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeb8:	4a1e      	ldr	r2, [pc, #120]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800aeba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aebe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800aec0:	4b1c      	ldr	r3, [pc, #112]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800aec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec4:	4a1b      	ldr	r2, [pc, #108]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800aec6:	f043 0301 	orr.w	r3, r3, #1
 800aeca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aecc:	4b19      	ldr	r3, [pc, #100]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4a18      	ldr	r2, [pc, #96]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800aed2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aed8:	f7f9 f962 	bl	80041a0 <HAL_GetTick>
 800aedc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aede:	e008      	b.n	800aef2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aee0:	f7f9 f95e 	bl	80041a0 <HAL_GetTick>
 800aee4:	4602      	mov	r2, r0
 800aee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee8:	1ad3      	subs	r3, r2, r3
 800aeea:	2b02      	cmp	r3, #2
 800aeec:	d901      	bls.n	800aef2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800aeee:	2303      	movs	r3, #3
 800aef0:	e090      	b.n	800b014 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aef2:	4b10      	ldr	r3, [pc, #64]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d0f0      	beq.n	800aee0 <HAL_RCC_OscConfig+0x670>
 800aefe:	e088      	b.n	800b012 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af00:	4b0c      	ldr	r3, [pc, #48]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4a0b      	ldr	r2, [pc, #44]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800af06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800af0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af0c:	f7f9 f948 	bl	80041a0 <HAL_GetTick>
 800af10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800af12:	e008      	b.n	800af26 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af14:	f7f9 f944 	bl	80041a0 <HAL_GetTick>
 800af18:	4602      	mov	r2, r0
 800af1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1c:	1ad3      	subs	r3, r2, r3
 800af1e:	2b02      	cmp	r3, #2
 800af20:	d901      	bls.n	800af26 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800af22:	2303      	movs	r3, #3
 800af24:	e076      	b.n	800b014 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800af26:	4b03      	ldr	r3, [pc, #12]	; (800af34 <HAL_RCC_OscConfig+0x6c4>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d1f0      	bne.n	800af14 <HAL_RCC_OscConfig+0x6a4>
 800af32:	e06e      	b.n	800b012 <HAL_RCC_OscConfig+0x7a2>
 800af34:	58024400 	.word	0x58024400
 800af38:	fffffc0c 	.word	0xfffffc0c
 800af3c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800af40:	4b36      	ldr	r3, [pc, #216]	; (800b01c <HAL_RCC_OscConfig+0x7ac>)
 800af42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af44:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800af46:	4b35      	ldr	r3, [pc, #212]	; (800b01c <HAL_RCC_OscConfig+0x7ac>)
 800af48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af4a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af50:	2b01      	cmp	r3, #1
 800af52:	d031      	beq.n	800afb8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	f003 0203 	and.w	r2, r3, #3
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800af5e:	429a      	cmp	r2, r3
 800af60:	d12a      	bne.n	800afb8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	091b      	lsrs	r3, r3, #4
 800af66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af6e:	429a      	cmp	r2, r3
 800af70:	d122      	bne.n	800afb8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af7c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800af7e:	429a      	cmp	r2, r3
 800af80:	d11a      	bne.n	800afb8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	0a5b      	lsrs	r3, r3, #9
 800af86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af8e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800af90:	429a      	cmp	r2, r3
 800af92:	d111      	bne.n	800afb8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	0c1b      	lsrs	r3, r3, #16
 800af98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afa0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d108      	bne.n	800afb8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	0e1b      	lsrs	r3, r3, #24
 800afaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afb2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d001      	beq.n	800afbc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800afb8:	2301      	movs	r3, #1
 800afba:	e02b      	b.n	800b014 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800afbc:	4b17      	ldr	r3, [pc, #92]	; (800b01c <HAL_RCC_OscConfig+0x7ac>)
 800afbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afc0:	08db      	lsrs	r3, r3, #3
 800afc2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800afc6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afcc:	693a      	ldr	r2, [r7, #16]
 800afce:	429a      	cmp	r2, r3
 800afd0:	d01f      	beq.n	800b012 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800afd2:	4b12      	ldr	r3, [pc, #72]	; (800b01c <HAL_RCC_OscConfig+0x7ac>)
 800afd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd6:	4a11      	ldr	r2, [pc, #68]	; (800b01c <HAL_RCC_OscConfig+0x7ac>)
 800afd8:	f023 0301 	bic.w	r3, r3, #1
 800afdc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800afde:	f7f9 f8df 	bl	80041a0 <HAL_GetTick>
 800afe2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800afe4:	bf00      	nop
 800afe6:	f7f9 f8db 	bl	80041a0 <HAL_GetTick>
 800afea:	4602      	mov	r2, r0
 800afec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afee:	4293      	cmp	r3, r2
 800aff0:	d0f9      	beq.n	800afe6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800aff2:	4b0a      	ldr	r3, [pc, #40]	; (800b01c <HAL_RCC_OscConfig+0x7ac>)
 800aff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aff6:	4b0a      	ldr	r3, [pc, #40]	; (800b020 <HAL_RCC_OscConfig+0x7b0>)
 800aff8:	4013      	ands	r3, r2
 800affa:	687a      	ldr	r2, [r7, #4]
 800affc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800affe:	00d2      	lsls	r2, r2, #3
 800b000:	4906      	ldr	r1, [pc, #24]	; (800b01c <HAL_RCC_OscConfig+0x7ac>)
 800b002:	4313      	orrs	r3, r2
 800b004:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b006:	4b05      	ldr	r3, [pc, #20]	; (800b01c <HAL_RCC_OscConfig+0x7ac>)
 800b008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b00a:	4a04      	ldr	r2, [pc, #16]	; (800b01c <HAL_RCC_OscConfig+0x7ac>)
 800b00c:	f043 0301 	orr.w	r3, r3, #1
 800b010:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b012:	2300      	movs	r3, #0
}
 800b014:	4618      	mov	r0, r3
 800b016:	3730      	adds	r7, #48	; 0x30
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	58024400 	.word	0x58024400
 800b020:	ffff0007 	.word	0xffff0007

0800b024 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b086      	sub	sp, #24
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d101      	bne.n	800b038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b034:	2301      	movs	r3, #1
 800b036:	e19c      	b.n	800b372 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b038:	4b8a      	ldr	r3, [pc, #552]	; (800b264 <HAL_RCC_ClockConfig+0x240>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f003 030f 	and.w	r3, r3, #15
 800b040:	683a      	ldr	r2, [r7, #0]
 800b042:	429a      	cmp	r2, r3
 800b044:	d910      	bls.n	800b068 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b046:	4b87      	ldr	r3, [pc, #540]	; (800b264 <HAL_RCC_ClockConfig+0x240>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f023 020f 	bic.w	r2, r3, #15
 800b04e:	4985      	ldr	r1, [pc, #532]	; (800b264 <HAL_RCC_ClockConfig+0x240>)
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	4313      	orrs	r3, r2
 800b054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b056:	4b83      	ldr	r3, [pc, #524]	; (800b264 <HAL_RCC_ClockConfig+0x240>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f003 030f 	and.w	r3, r3, #15
 800b05e:	683a      	ldr	r2, [r7, #0]
 800b060:	429a      	cmp	r2, r3
 800b062:	d001      	beq.n	800b068 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b064:	2301      	movs	r3, #1
 800b066:	e184      	b.n	800b372 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f003 0304 	and.w	r3, r3, #4
 800b070:	2b00      	cmp	r3, #0
 800b072:	d010      	beq.n	800b096 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	691a      	ldr	r2, [r3, #16]
 800b078:	4b7b      	ldr	r3, [pc, #492]	; (800b268 <HAL_RCC_ClockConfig+0x244>)
 800b07a:	699b      	ldr	r3, [r3, #24]
 800b07c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b080:	429a      	cmp	r2, r3
 800b082:	d908      	bls.n	800b096 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b084:	4b78      	ldr	r3, [pc, #480]	; (800b268 <HAL_RCC_ClockConfig+0x244>)
 800b086:	699b      	ldr	r3, [r3, #24]
 800b088:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	691b      	ldr	r3, [r3, #16]
 800b090:	4975      	ldr	r1, [pc, #468]	; (800b268 <HAL_RCC_ClockConfig+0x244>)
 800b092:	4313      	orrs	r3, r2
 800b094:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f003 0308 	and.w	r3, r3, #8
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d010      	beq.n	800b0c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	695a      	ldr	r2, [r3, #20]
 800b0a6:	4b70      	ldr	r3, [pc, #448]	; (800b268 <HAL_RCC_ClockConfig+0x244>)
 800b0a8:	69db      	ldr	r3, [r3, #28]
 800b0aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d908      	bls.n	800b0c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b0b2:	4b6d      	ldr	r3, [pc, #436]	; (800b268 <HAL_RCC_ClockConfig+0x244>)
 800b0b4:	69db      	ldr	r3, [r3, #28]
 800b0b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	695b      	ldr	r3, [r3, #20]
 800b0be:	496a      	ldr	r1, [pc, #424]	; (800b268 <HAL_RCC_ClockConfig+0x244>)
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f003 0310 	and.w	r3, r3, #16
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d010      	beq.n	800b0f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	699a      	ldr	r2, [r3, #24]
 800b0d4:	4b64      	ldr	r3, [pc, #400]	; (800b268 <HAL_RCC_ClockConfig+0x244>)
 800b0d6:	69db      	ldr	r3, [r3, #28]
 800b0d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d908      	bls.n	800b0f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b0e0:	4b61      	ldr	r3, [pc, #388]	; (800b268 <HAL_RCC_ClockConfig+0x244>)
 800b0e2:	69db      	ldr	r3, [r3, #28]
 800b0e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	699b      	ldr	r3, [r3, #24]
 800b0ec:	495e      	ldr	r1, [pc, #376]	; (800b268 <HAL_RCC_ClockConfig+0x244>)
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f003 0320 	and.w	r3, r3, #32
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d010      	beq.n	800b120 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	69da      	ldr	r2, [r3, #28]
 800b102:	4b59      	ldr	r3, [pc, #356]	; (800b268 <HAL_RCC_ClockConfig+0x244>)
 800b104:	6a1b      	ldr	r3, [r3, #32]
 800b106:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d908      	bls.n	800b120 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b10e:	4b56      	ldr	r3, [pc, #344]	; (800b268 <HAL_RCC_ClockConfig+0x244>)
 800b110:	6a1b      	ldr	r3, [r3, #32]
 800b112:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	69db      	ldr	r3, [r3, #28]
 800b11a:	4953      	ldr	r1, [pc, #332]	; (800b268 <HAL_RCC_ClockConfig+0x244>)
 800b11c:	4313      	orrs	r3, r2
 800b11e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f003 0302 	and.w	r3, r3, #2
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d010      	beq.n	800b14e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	68da      	ldr	r2, [r3, #12]
 800b130:	4b4d      	ldr	r3, [pc, #308]	; (800b268 <HAL_RCC_ClockConfig+0x244>)
 800b132:	699b      	ldr	r3, [r3, #24]
 800b134:	f003 030f 	and.w	r3, r3, #15
 800b138:	429a      	cmp	r2, r3
 800b13a:	d908      	bls.n	800b14e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b13c:	4b4a      	ldr	r3, [pc, #296]	; (800b268 <HAL_RCC_ClockConfig+0x244>)
 800b13e:	699b      	ldr	r3, [r3, #24]
 800b140:	f023 020f 	bic.w	r2, r3, #15
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	68db      	ldr	r3, [r3, #12]
 800b148:	4947      	ldr	r1, [pc, #284]	; (800b268 <HAL_RCC_ClockConfig+0x244>)
 800b14a:	4313      	orrs	r3, r2
 800b14c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f003 0301 	and.w	r3, r3, #1
 800b156:	2b00      	cmp	r3, #0
 800b158:	d055      	beq.n	800b206 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b15a:	4b43      	ldr	r3, [pc, #268]	; (800b268 <HAL_RCC_ClockConfig+0x244>)
 800b15c:	699b      	ldr	r3, [r3, #24]
 800b15e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	4940      	ldr	r1, [pc, #256]	; (800b268 <HAL_RCC_ClockConfig+0x244>)
 800b168:	4313      	orrs	r3, r2
 800b16a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	2b02      	cmp	r3, #2
 800b172:	d107      	bne.n	800b184 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b174:	4b3c      	ldr	r3, [pc, #240]	; (800b268 <HAL_RCC_ClockConfig+0x244>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d121      	bne.n	800b1c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b180:	2301      	movs	r3, #1
 800b182:	e0f6      	b.n	800b372 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	2b03      	cmp	r3, #3
 800b18a:	d107      	bne.n	800b19c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b18c:	4b36      	ldr	r3, [pc, #216]	; (800b268 <HAL_RCC_ClockConfig+0x244>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b194:	2b00      	cmp	r3, #0
 800b196:	d115      	bne.n	800b1c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b198:	2301      	movs	r3, #1
 800b19a:	e0ea      	b.n	800b372 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d107      	bne.n	800b1b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b1a4:	4b30      	ldr	r3, [pc, #192]	; (800b268 <HAL_RCC_ClockConfig+0x244>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d109      	bne.n	800b1c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e0de      	b.n	800b372 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b1b4:	4b2c      	ldr	r3, [pc, #176]	; (800b268 <HAL_RCC_ClockConfig+0x244>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f003 0304 	and.w	r3, r3, #4
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d101      	bne.n	800b1c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	e0d6      	b.n	800b372 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b1c4:	4b28      	ldr	r3, [pc, #160]	; (800b268 <HAL_RCC_ClockConfig+0x244>)
 800b1c6:	691b      	ldr	r3, [r3, #16]
 800b1c8:	f023 0207 	bic.w	r2, r3, #7
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	4925      	ldr	r1, [pc, #148]	; (800b268 <HAL_RCC_ClockConfig+0x244>)
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1d6:	f7f8 ffe3 	bl	80041a0 <HAL_GetTick>
 800b1da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b1dc:	e00a      	b.n	800b1f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b1de:	f7f8 ffdf 	bl	80041a0 <HAL_GetTick>
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	1ad3      	subs	r3, r2, r3
 800b1e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d901      	bls.n	800b1f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b1f0:	2303      	movs	r3, #3
 800b1f2:	e0be      	b.n	800b372 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b1f4:	4b1c      	ldr	r3, [pc, #112]	; (800b268 <HAL_RCC_ClockConfig+0x244>)
 800b1f6:	691b      	ldr	r3, [r3, #16]
 800b1f8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	00db      	lsls	r3, r3, #3
 800b202:	429a      	cmp	r2, r3
 800b204:	d1eb      	bne.n	800b1de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f003 0302 	and.w	r3, r3, #2
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d010      	beq.n	800b234 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	68da      	ldr	r2, [r3, #12]
 800b216:	4b14      	ldr	r3, [pc, #80]	; (800b268 <HAL_RCC_ClockConfig+0x244>)
 800b218:	699b      	ldr	r3, [r3, #24]
 800b21a:	f003 030f 	and.w	r3, r3, #15
 800b21e:	429a      	cmp	r2, r3
 800b220:	d208      	bcs.n	800b234 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b222:	4b11      	ldr	r3, [pc, #68]	; (800b268 <HAL_RCC_ClockConfig+0x244>)
 800b224:	699b      	ldr	r3, [r3, #24]
 800b226:	f023 020f 	bic.w	r2, r3, #15
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	68db      	ldr	r3, [r3, #12]
 800b22e:	490e      	ldr	r1, [pc, #56]	; (800b268 <HAL_RCC_ClockConfig+0x244>)
 800b230:	4313      	orrs	r3, r2
 800b232:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b234:	4b0b      	ldr	r3, [pc, #44]	; (800b264 <HAL_RCC_ClockConfig+0x240>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f003 030f 	and.w	r3, r3, #15
 800b23c:	683a      	ldr	r2, [r7, #0]
 800b23e:	429a      	cmp	r2, r3
 800b240:	d214      	bcs.n	800b26c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b242:	4b08      	ldr	r3, [pc, #32]	; (800b264 <HAL_RCC_ClockConfig+0x240>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f023 020f 	bic.w	r2, r3, #15
 800b24a:	4906      	ldr	r1, [pc, #24]	; (800b264 <HAL_RCC_ClockConfig+0x240>)
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	4313      	orrs	r3, r2
 800b250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b252:	4b04      	ldr	r3, [pc, #16]	; (800b264 <HAL_RCC_ClockConfig+0x240>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f003 030f 	and.w	r3, r3, #15
 800b25a:	683a      	ldr	r2, [r7, #0]
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d005      	beq.n	800b26c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b260:	2301      	movs	r3, #1
 800b262:	e086      	b.n	800b372 <HAL_RCC_ClockConfig+0x34e>
 800b264:	52002000 	.word	0x52002000
 800b268:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f003 0304 	and.w	r3, r3, #4
 800b274:	2b00      	cmp	r3, #0
 800b276:	d010      	beq.n	800b29a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	691a      	ldr	r2, [r3, #16]
 800b27c:	4b3f      	ldr	r3, [pc, #252]	; (800b37c <HAL_RCC_ClockConfig+0x358>)
 800b27e:	699b      	ldr	r3, [r3, #24]
 800b280:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b284:	429a      	cmp	r2, r3
 800b286:	d208      	bcs.n	800b29a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b288:	4b3c      	ldr	r3, [pc, #240]	; (800b37c <HAL_RCC_ClockConfig+0x358>)
 800b28a:	699b      	ldr	r3, [r3, #24]
 800b28c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	691b      	ldr	r3, [r3, #16]
 800b294:	4939      	ldr	r1, [pc, #228]	; (800b37c <HAL_RCC_ClockConfig+0x358>)
 800b296:	4313      	orrs	r3, r2
 800b298:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f003 0308 	and.w	r3, r3, #8
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d010      	beq.n	800b2c8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	695a      	ldr	r2, [r3, #20]
 800b2aa:	4b34      	ldr	r3, [pc, #208]	; (800b37c <HAL_RCC_ClockConfig+0x358>)
 800b2ac:	69db      	ldr	r3, [r3, #28]
 800b2ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d208      	bcs.n	800b2c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b2b6:	4b31      	ldr	r3, [pc, #196]	; (800b37c <HAL_RCC_ClockConfig+0x358>)
 800b2b8:	69db      	ldr	r3, [r3, #28]
 800b2ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	695b      	ldr	r3, [r3, #20]
 800b2c2:	492e      	ldr	r1, [pc, #184]	; (800b37c <HAL_RCC_ClockConfig+0x358>)
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f003 0310 	and.w	r3, r3, #16
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d010      	beq.n	800b2f6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	699a      	ldr	r2, [r3, #24]
 800b2d8:	4b28      	ldr	r3, [pc, #160]	; (800b37c <HAL_RCC_ClockConfig+0x358>)
 800b2da:	69db      	ldr	r3, [r3, #28]
 800b2dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d208      	bcs.n	800b2f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b2e4:	4b25      	ldr	r3, [pc, #148]	; (800b37c <HAL_RCC_ClockConfig+0x358>)
 800b2e6:	69db      	ldr	r3, [r3, #28]
 800b2e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	699b      	ldr	r3, [r3, #24]
 800b2f0:	4922      	ldr	r1, [pc, #136]	; (800b37c <HAL_RCC_ClockConfig+0x358>)
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f003 0320 	and.w	r3, r3, #32
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d010      	beq.n	800b324 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	69da      	ldr	r2, [r3, #28]
 800b306:	4b1d      	ldr	r3, [pc, #116]	; (800b37c <HAL_RCC_ClockConfig+0x358>)
 800b308:	6a1b      	ldr	r3, [r3, #32]
 800b30a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b30e:	429a      	cmp	r2, r3
 800b310:	d208      	bcs.n	800b324 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b312:	4b1a      	ldr	r3, [pc, #104]	; (800b37c <HAL_RCC_ClockConfig+0x358>)
 800b314:	6a1b      	ldr	r3, [r3, #32]
 800b316:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	69db      	ldr	r3, [r3, #28]
 800b31e:	4917      	ldr	r1, [pc, #92]	; (800b37c <HAL_RCC_ClockConfig+0x358>)
 800b320:	4313      	orrs	r3, r2
 800b322:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b324:	f000 f89e 	bl	800b464 <HAL_RCC_GetSysClockFreq>
 800b328:	4602      	mov	r2, r0
 800b32a:	4b14      	ldr	r3, [pc, #80]	; (800b37c <HAL_RCC_ClockConfig+0x358>)
 800b32c:	699b      	ldr	r3, [r3, #24]
 800b32e:	0a1b      	lsrs	r3, r3, #8
 800b330:	f003 030f 	and.w	r3, r3, #15
 800b334:	4912      	ldr	r1, [pc, #72]	; (800b380 <HAL_RCC_ClockConfig+0x35c>)
 800b336:	5ccb      	ldrb	r3, [r1, r3]
 800b338:	f003 031f 	and.w	r3, r3, #31
 800b33c:	fa22 f303 	lsr.w	r3, r2, r3
 800b340:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b342:	4b0e      	ldr	r3, [pc, #56]	; (800b37c <HAL_RCC_ClockConfig+0x358>)
 800b344:	699b      	ldr	r3, [r3, #24]
 800b346:	f003 030f 	and.w	r3, r3, #15
 800b34a:	4a0d      	ldr	r2, [pc, #52]	; (800b380 <HAL_RCC_ClockConfig+0x35c>)
 800b34c:	5cd3      	ldrb	r3, [r2, r3]
 800b34e:	f003 031f 	and.w	r3, r3, #31
 800b352:	693a      	ldr	r2, [r7, #16]
 800b354:	fa22 f303 	lsr.w	r3, r2, r3
 800b358:	4a0a      	ldr	r2, [pc, #40]	; (800b384 <HAL_RCC_ClockConfig+0x360>)
 800b35a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b35c:	4a0a      	ldr	r2, [pc, #40]	; (800b388 <HAL_RCC_ClockConfig+0x364>)
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b362:	4b0a      	ldr	r3, [pc, #40]	; (800b38c <HAL_RCC_ClockConfig+0x368>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	4618      	mov	r0, r3
 800b368:	f7f8 fed0 	bl	800410c <HAL_InitTick>
 800b36c:	4603      	mov	r3, r0
 800b36e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b370:	7bfb      	ldrb	r3, [r7, #15]
}
 800b372:	4618      	mov	r0, r3
 800b374:	3718      	adds	r7, #24
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	58024400 	.word	0x58024400
 800b380:	08020040 	.word	0x08020040
 800b384:	24000004 	.word	0x24000004
 800b388:	24000000 	.word	0x24000000
 800b38c:	24000008 	.word	0x24000008

0800b390 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b08c      	sub	sp, #48	; 0x30
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	60b9      	str	r1, [r7, #8]
 800b39a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d12a      	bne.n	800b3f8 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b3a2:	4b2d      	ldr	r3, [pc, #180]	; (800b458 <HAL_RCC_MCOConfig+0xc8>)
 800b3a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b3a8:	4a2b      	ldr	r2, [pc, #172]	; (800b458 <HAL_RCC_MCOConfig+0xc8>)
 800b3aa:	f043 0301 	orr.w	r3, r3, #1
 800b3ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b3b2:	4b29      	ldr	r3, [pc, #164]	; (800b458 <HAL_RCC_MCOConfig+0xc8>)
 800b3b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b3b8:	f003 0301 	and.w	r3, r3, #1
 800b3bc:	61bb      	str	r3, [r7, #24]
 800b3be:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b3c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3c6:	2302      	movs	r3, #2
 800b3c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b3ca:	2303      	movs	r3, #3
 800b3cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b3d6:	f107 031c 	add.w	r3, r7, #28
 800b3da:	4619      	mov	r1, r3
 800b3dc:	481f      	ldr	r0, [pc, #124]	; (800b45c <HAL_RCC_MCOConfig+0xcc>)
 800b3de:	f7fd fc29 	bl	8008c34 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b3e2:	4b1d      	ldr	r3, [pc, #116]	; (800b458 <HAL_RCC_MCOConfig+0xc8>)
 800b3e4:	691b      	ldr	r3, [r3, #16]
 800b3e6:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800b3ea:	68b9      	ldr	r1, [r7, #8]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	430b      	orrs	r3, r1
 800b3f0:	4919      	ldr	r1, [pc, #100]	; (800b458 <HAL_RCC_MCOConfig+0xc8>)
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800b3f6:	e02a      	b.n	800b44e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800b3f8:	4b17      	ldr	r3, [pc, #92]	; (800b458 <HAL_RCC_MCOConfig+0xc8>)
 800b3fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b3fe:	4a16      	ldr	r2, [pc, #88]	; (800b458 <HAL_RCC_MCOConfig+0xc8>)
 800b400:	f043 0304 	orr.w	r3, r3, #4
 800b404:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b408:	4b13      	ldr	r3, [pc, #76]	; (800b458 <HAL_RCC_MCOConfig+0xc8>)
 800b40a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b40e:	f003 0304 	and.w	r3, r3, #4
 800b412:	617b      	str	r3, [r7, #20]
 800b414:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b416:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b41a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b41c:	2302      	movs	r3, #2
 800b41e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b420:	2303      	movs	r3, #3
 800b422:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b424:	2300      	movs	r3, #0
 800b426:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b428:	2300      	movs	r3, #0
 800b42a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b42c:	f107 031c 	add.w	r3, r7, #28
 800b430:	4619      	mov	r1, r3
 800b432:	480b      	ldr	r0, [pc, #44]	; (800b460 <HAL_RCC_MCOConfig+0xd0>)
 800b434:	f7fd fbfe 	bl	8008c34 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b438:	4b07      	ldr	r3, [pc, #28]	; (800b458 <HAL_RCC_MCOConfig+0xc8>)
 800b43a:	691b      	ldr	r3, [r3, #16]
 800b43c:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	01d9      	lsls	r1, r3, #7
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	430b      	orrs	r3, r1
 800b448:	4903      	ldr	r1, [pc, #12]	; (800b458 <HAL_RCC_MCOConfig+0xc8>)
 800b44a:	4313      	orrs	r3, r2
 800b44c:	610b      	str	r3, [r1, #16]
}
 800b44e:	bf00      	nop
 800b450:	3730      	adds	r7, #48	; 0x30
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	58024400 	.word	0x58024400
 800b45c:	58020000 	.word	0x58020000
 800b460:	58020800 	.word	0x58020800

0800b464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b464:	b480      	push	{r7}
 800b466:	b089      	sub	sp, #36	; 0x24
 800b468:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b46a:	4bb3      	ldr	r3, [pc, #716]	; (800b738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b46c:	691b      	ldr	r3, [r3, #16]
 800b46e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b472:	2b18      	cmp	r3, #24
 800b474:	f200 8155 	bhi.w	800b722 <HAL_RCC_GetSysClockFreq+0x2be>
 800b478:	a201      	add	r2, pc, #4	; (adr r2, 800b480 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b47a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b47e:	bf00      	nop
 800b480:	0800b4e5 	.word	0x0800b4e5
 800b484:	0800b723 	.word	0x0800b723
 800b488:	0800b723 	.word	0x0800b723
 800b48c:	0800b723 	.word	0x0800b723
 800b490:	0800b723 	.word	0x0800b723
 800b494:	0800b723 	.word	0x0800b723
 800b498:	0800b723 	.word	0x0800b723
 800b49c:	0800b723 	.word	0x0800b723
 800b4a0:	0800b50b 	.word	0x0800b50b
 800b4a4:	0800b723 	.word	0x0800b723
 800b4a8:	0800b723 	.word	0x0800b723
 800b4ac:	0800b723 	.word	0x0800b723
 800b4b0:	0800b723 	.word	0x0800b723
 800b4b4:	0800b723 	.word	0x0800b723
 800b4b8:	0800b723 	.word	0x0800b723
 800b4bc:	0800b723 	.word	0x0800b723
 800b4c0:	0800b511 	.word	0x0800b511
 800b4c4:	0800b723 	.word	0x0800b723
 800b4c8:	0800b723 	.word	0x0800b723
 800b4cc:	0800b723 	.word	0x0800b723
 800b4d0:	0800b723 	.word	0x0800b723
 800b4d4:	0800b723 	.word	0x0800b723
 800b4d8:	0800b723 	.word	0x0800b723
 800b4dc:	0800b723 	.word	0x0800b723
 800b4e0:	0800b517 	.word	0x0800b517
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4e4:	4b94      	ldr	r3, [pc, #592]	; (800b738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f003 0320 	and.w	r3, r3, #32
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d009      	beq.n	800b504 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4f0:	4b91      	ldr	r3, [pc, #580]	; (800b738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	08db      	lsrs	r3, r3, #3
 800b4f6:	f003 0303 	and.w	r3, r3, #3
 800b4fa:	4a90      	ldr	r2, [pc, #576]	; (800b73c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b4fc:	fa22 f303 	lsr.w	r3, r2, r3
 800b500:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b502:	e111      	b.n	800b728 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b504:	4b8d      	ldr	r3, [pc, #564]	; (800b73c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b506:	61bb      	str	r3, [r7, #24]
      break;
 800b508:	e10e      	b.n	800b728 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b50a:	4b8d      	ldr	r3, [pc, #564]	; (800b740 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b50c:	61bb      	str	r3, [r7, #24]
      break;
 800b50e:	e10b      	b.n	800b728 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b510:	4b8c      	ldr	r3, [pc, #560]	; (800b744 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b512:	61bb      	str	r3, [r7, #24]
      break;
 800b514:	e108      	b.n	800b728 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b516:	4b88      	ldr	r3, [pc, #544]	; (800b738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b51a:	f003 0303 	and.w	r3, r3, #3
 800b51e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b520:	4b85      	ldr	r3, [pc, #532]	; (800b738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b524:	091b      	lsrs	r3, r3, #4
 800b526:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b52a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b52c:	4b82      	ldr	r3, [pc, #520]	; (800b738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b530:	f003 0301 	and.w	r3, r3, #1
 800b534:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b536:	4b80      	ldr	r3, [pc, #512]	; (800b738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b53a:	08db      	lsrs	r3, r3, #3
 800b53c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b540:	68fa      	ldr	r2, [r7, #12]
 800b542:	fb02 f303 	mul.w	r3, r2, r3
 800b546:	ee07 3a90 	vmov	s15, r3
 800b54a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b54e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	2b00      	cmp	r3, #0
 800b556:	f000 80e1 	beq.w	800b71c <HAL_RCC_GetSysClockFreq+0x2b8>
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	2b02      	cmp	r3, #2
 800b55e:	f000 8083 	beq.w	800b668 <HAL_RCC_GetSysClockFreq+0x204>
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	2b02      	cmp	r3, #2
 800b566:	f200 80a1 	bhi.w	800b6ac <HAL_RCC_GetSysClockFreq+0x248>
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d003      	beq.n	800b578 <HAL_RCC_GetSysClockFreq+0x114>
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	2b01      	cmp	r3, #1
 800b574:	d056      	beq.n	800b624 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b576:	e099      	b.n	800b6ac <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b578:	4b6f      	ldr	r3, [pc, #444]	; (800b738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f003 0320 	and.w	r3, r3, #32
 800b580:	2b00      	cmp	r3, #0
 800b582:	d02d      	beq.n	800b5e0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b584:	4b6c      	ldr	r3, [pc, #432]	; (800b738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	08db      	lsrs	r3, r3, #3
 800b58a:	f003 0303 	and.w	r3, r3, #3
 800b58e:	4a6b      	ldr	r2, [pc, #428]	; (800b73c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b590:	fa22 f303 	lsr.w	r3, r2, r3
 800b594:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	ee07 3a90 	vmov	s15, r3
 800b59c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	ee07 3a90 	vmov	s15, r3
 800b5a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5ae:	4b62      	ldr	r3, [pc, #392]	; (800b738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5b6:	ee07 3a90 	vmov	s15, r3
 800b5ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5be:	ed97 6a02 	vldr	s12, [r7, #8]
 800b5c2:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b748 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b5c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5da:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b5de:	e087      	b.n	800b6f0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	ee07 3a90 	vmov	s15, r3
 800b5e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ea:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b74c <HAL_RCC_GetSysClockFreq+0x2e8>
 800b5ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5f2:	4b51      	ldr	r3, [pc, #324]	; (800b738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5fa:	ee07 3a90 	vmov	s15, r3
 800b5fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b602:	ed97 6a02 	vldr	s12, [r7, #8]
 800b606:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b748 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b60a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b60e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b61a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b61e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b622:	e065      	b.n	800b6f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	ee07 3a90 	vmov	s15, r3
 800b62a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b62e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b750 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b636:	4b40      	ldr	r3, [pc, #256]	; (800b738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b63a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b63e:	ee07 3a90 	vmov	s15, r3
 800b642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b646:	ed97 6a02 	vldr	s12, [r7, #8]
 800b64a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b748 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b64e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b65a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b65e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b662:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b666:	e043      	b.n	800b6f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	ee07 3a90 	vmov	s15, r3
 800b66e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b672:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b754 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b67a:	4b2f      	ldr	r3, [pc, #188]	; (800b738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b67e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b682:	ee07 3a90 	vmov	s15, r3
 800b686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b68a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b68e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b748 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b69a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b69e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b6aa:	e021      	b.n	800b6f0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	ee07 3a90 	vmov	s15, r3
 800b6b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6b6:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b750 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b6ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6be:	4b1e      	ldr	r3, [pc, #120]	; (800b738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6c6:	ee07 3a90 	vmov	s15, r3
 800b6ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6ce:	ed97 6a02 	vldr	s12, [r7, #8]
 800b6d2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b748 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b6d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b6ee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b6f0:	4b11      	ldr	r3, [pc, #68]	; (800b738 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6f4:	0a5b      	lsrs	r3, r3, #9
 800b6f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	ee07 3a90 	vmov	s15, r3
 800b704:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b708:	edd7 6a07 	vldr	s13, [r7, #28]
 800b70c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b714:	ee17 3a90 	vmov	r3, s15
 800b718:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b71a:	e005      	b.n	800b728 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b71c:	2300      	movs	r3, #0
 800b71e:	61bb      	str	r3, [r7, #24]
      break;
 800b720:	e002      	b.n	800b728 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b722:	4b07      	ldr	r3, [pc, #28]	; (800b740 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b724:	61bb      	str	r3, [r7, #24]
      break;
 800b726:	bf00      	nop
  }

  return sysclockfreq;
 800b728:	69bb      	ldr	r3, [r7, #24]
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3724      	adds	r7, #36	; 0x24
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr
 800b736:	bf00      	nop
 800b738:	58024400 	.word	0x58024400
 800b73c:	03d09000 	.word	0x03d09000
 800b740:	003d0900 	.word	0x003d0900
 800b744:	02faf080 	.word	0x02faf080
 800b748:	46000000 	.word	0x46000000
 800b74c:	4c742400 	.word	0x4c742400
 800b750:	4a742400 	.word	0x4a742400
 800b754:	4c3ebc20 	.word	0x4c3ebc20

0800b758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b75e:	f7ff fe81 	bl	800b464 <HAL_RCC_GetSysClockFreq>
 800b762:	4602      	mov	r2, r0
 800b764:	4b10      	ldr	r3, [pc, #64]	; (800b7a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800b766:	699b      	ldr	r3, [r3, #24]
 800b768:	0a1b      	lsrs	r3, r3, #8
 800b76a:	f003 030f 	and.w	r3, r3, #15
 800b76e:	490f      	ldr	r1, [pc, #60]	; (800b7ac <HAL_RCC_GetHCLKFreq+0x54>)
 800b770:	5ccb      	ldrb	r3, [r1, r3]
 800b772:	f003 031f 	and.w	r3, r3, #31
 800b776:	fa22 f303 	lsr.w	r3, r2, r3
 800b77a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b77c:	4b0a      	ldr	r3, [pc, #40]	; (800b7a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800b77e:	699b      	ldr	r3, [r3, #24]
 800b780:	f003 030f 	and.w	r3, r3, #15
 800b784:	4a09      	ldr	r2, [pc, #36]	; (800b7ac <HAL_RCC_GetHCLKFreq+0x54>)
 800b786:	5cd3      	ldrb	r3, [r2, r3]
 800b788:	f003 031f 	and.w	r3, r3, #31
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	fa22 f303 	lsr.w	r3, r2, r3
 800b792:	4a07      	ldr	r2, [pc, #28]	; (800b7b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800b794:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b796:	4a07      	ldr	r2, [pc, #28]	; (800b7b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b79c:	4b04      	ldr	r3, [pc, #16]	; (800b7b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800b79e:	681b      	ldr	r3, [r3, #0]
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3708      	adds	r7, #8
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}
 800b7a8:	58024400 	.word	0x58024400
 800b7ac:	08020040 	.word	0x08020040
 800b7b0:	24000004 	.word	0x24000004
 800b7b4:	24000000 	.word	0x24000000

0800b7b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b7bc:	f7ff ffcc 	bl	800b758 <HAL_RCC_GetHCLKFreq>
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	4b06      	ldr	r3, [pc, #24]	; (800b7dc <HAL_RCC_GetPCLK1Freq+0x24>)
 800b7c4:	69db      	ldr	r3, [r3, #28]
 800b7c6:	091b      	lsrs	r3, r3, #4
 800b7c8:	f003 0307 	and.w	r3, r3, #7
 800b7cc:	4904      	ldr	r1, [pc, #16]	; (800b7e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b7ce:	5ccb      	ldrb	r3, [r1, r3]
 800b7d0:	f003 031f 	and.w	r3, r3, #31
 800b7d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	bd80      	pop	{r7, pc}
 800b7dc:	58024400 	.word	0x58024400
 800b7e0:	08020040 	.word	0x08020040

0800b7e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b7e8:	f7ff ffb6 	bl	800b758 <HAL_RCC_GetHCLKFreq>
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	4b06      	ldr	r3, [pc, #24]	; (800b808 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b7f0:	69db      	ldr	r3, [r3, #28]
 800b7f2:	0a1b      	lsrs	r3, r3, #8
 800b7f4:	f003 0307 	and.w	r3, r3, #7
 800b7f8:	4904      	ldr	r1, [pc, #16]	; (800b80c <HAL_RCC_GetPCLK2Freq+0x28>)
 800b7fa:	5ccb      	ldrb	r3, [r1, r3]
 800b7fc:	f003 031f 	and.w	r3, r3, #31
 800b800:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b804:	4618      	mov	r0, r3
 800b806:	bd80      	pop	{r7, pc}
 800b808:	58024400 	.word	0x58024400
 800b80c:	08020040 	.word	0x08020040

0800b810 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b814:	b0c6      	sub	sp, #280	; 0x118
 800b816:	af00      	add	r7, sp, #0
 800b818:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b81c:	2300      	movs	r3, #0
 800b81e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b822:	2300      	movs	r3, #0
 800b824:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b830:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b834:	2500      	movs	r5, #0
 800b836:	ea54 0305 	orrs.w	r3, r4, r5
 800b83a:	d049      	beq.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b83c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b840:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b842:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b846:	d02f      	beq.n	800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b848:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b84c:	d828      	bhi.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b84e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b852:	d01a      	beq.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b854:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b858:	d822      	bhi.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d003      	beq.n	800b866 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b85e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b862:	d007      	beq.n	800b874 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b864:	e01c      	b.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b866:	4bab      	ldr	r3, [pc, #684]	; (800bb14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b86a:	4aaa      	ldr	r2, [pc, #680]	; (800bb14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b86c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b870:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b872:	e01a      	b.n	800b8aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b878:	3308      	adds	r3, #8
 800b87a:	2102      	movs	r1, #2
 800b87c:	4618      	mov	r0, r3
 800b87e:	f002 fa49 	bl	800dd14 <RCCEx_PLL2_Config>
 800b882:	4603      	mov	r3, r0
 800b884:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b888:	e00f      	b.n	800b8aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b88a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b88e:	3328      	adds	r3, #40	; 0x28
 800b890:	2102      	movs	r1, #2
 800b892:	4618      	mov	r0, r3
 800b894:	f002 faf0 	bl	800de78 <RCCEx_PLL3_Config>
 800b898:	4603      	mov	r3, r0
 800b89a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b89e:	e004      	b.n	800b8aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b8a6:	e000      	b.n	800b8aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b8a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d10a      	bne.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b8b2:	4b98      	ldr	r3, [pc, #608]	; (800bb14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b8b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8b6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b8ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8c0:	4a94      	ldr	r2, [pc, #592]	; (800bb14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b8c2:	430b      	orrs	r3, r1
 800b8c4:	6513      	str	r3, [r2, #80]	; 0x50
 800b8c6:	e003      	b.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b8d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b8dc:	f04f 0900 	mov.w	r9, #0
 800b8e0:	ea58 0309 	orrs.w	r3, r8, r9
 800b8e4:	d047      	beq.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b8e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8ec:	2b04      	cmp	r3, #4
 800b8ee:	d82a      	bhi.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b8f0:	a201      	add	r2, pc, #4	; (adr r2, 800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b8f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8f6:	bf00      	nop
 800b8f8:	0800b90d 	.word	0x0800b90d
 800b8fc:	0800b91b 	.word	0x0800b91b
 800b900:	0800b931 	.word	0x0800b931
 800b904:	0800b94f 	.word	0x0800b94f
 800b908:	0800b94f 	.word	0x0800b94f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b90c:	4b81      	ldr	r3, [pc, #516]	; (800bb14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b90e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b910:	4a80      	ldr	r2, [pc, #512]	; (800bb14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b916:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b918:	e01a      	b.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b91a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b91e:	3308      	adds	r3, #8
 800b920:	2100      	movs	r1, #0
 800b922:	4618      	mov	r0, r3
 800b924:	f002 f9f6 	bl	800dd14 <RCCEx_PLL2_Config>
 800b928:	4603      	mov	r3, r0
 800b92a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b92e:	e00f      	b.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b934:	3328      	adds	r3, #40	; 0x28
 800b936:	2100      	movs	r1, #0
 800b938:	4618      	mov	r0, r3
 800b93a:	f002 fa9d 	bl	800de78 <RCCEx_PLL3_Config>
 800b93e:	4603      	mov	r3, r0
 800b940:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b944:	e004      	b.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b946:	2301      	movs	r3, #1
 800b948:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b94c:	e000      	b.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b94e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b950:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b954:	2b00      	cmp	r3, #0
 800b956:	d10a      	bne.n	800b96e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b958:	4b6e      	ldr	r3, [pc, #440]	; (800bb14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b95a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b95c:	f023 0107 	bic.w	r1, r3, #7
 800b960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b966:	4a6b      	ldr	r2, [pc, #428]	; (800bb14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b968:	430b      	orrs	r3, r1
 800b96a:	6513      	str	r3, [r2, #80]	; 0x50
 800b96c:	e003      	b.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b96e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b972:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800b982:	f04f 0b00 	mov.w	fp, #0
 800b986:	ea5a 030b 	orrs.w	r3, sl, fp
 800b98a:	d05b      	beq.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b98c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b990:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b994:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b998:	d03b      	beq.n	800ba12 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800b99a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b99e:	d834      	bhi.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b9a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b9a4:	d037      	beq.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b9a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b9aa:	d82e      	bhi.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b9ac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b9b0:	d033      	beq.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800b9b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b9b6:	d828      	bhi.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b9b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b9bc:	d01a      	beq.n	800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800b9be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b9c2:	d822      	bhi.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d003      	beq.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800b9c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9cc:	d007      	beq.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800b9ce:	e01c      	b.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9d0:	4b50      	ldr	r3, [pc, #320]	; (800bb14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d4:	4a4f      	ldr	r2, [pc, #316]	; (800bb14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b9d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b9dc:	e01e      	b.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9e2:	3308      	adds	r3, #8
 800b9e4:	2100      	movs	r1, #0
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f002 f994 	bl	800dd14 <RCCEx_PLL2_Config>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b9f2:	e013      	b.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b9f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9f8:	3328      	adds	r3, #40	; 0x28
 800b9fa:	2100      	movs	r1, #0
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f002 fa3b 	bl	800de78 <RCCEx_PLL3_Config>
 800ba02:	4603      	mov	r3, r0
 800ba04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba08:	e008      	b.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ba10:	e004      	b.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ba12:	bf00      	nop
 800ba14:	e002      	b.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ba16:	bf00      	nop
 800ba18:	e000      	b.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ba1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d10b      	bne.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ba24:	4b3b      	ldr	r3, [pc, #236]	; (800bb14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba28:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ba2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ba34:	4a37      	ldr	r2, [pc, #220]	; (800bb14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba36:	430b      	orrs	r3, r1
 800ba38:	6593      	str	r3, [r2, #88]	; 0x58
 800ba3a:	e003      	b.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba40:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ba44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ba50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ba54:	2300      	movs	r3, #0
 800ba56:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ba5a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800ba5e:	460b      	mov	r3, r1
 800ba60:	4313      	orrs	r3, r2
 800ba62:	d05d      	beq.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ba64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba68:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ba6c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800ba70:	d03b      	beq.n	800baea <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800ba72:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800ba76:	d834      	bhi.n	800bae2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ba78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba7c:	d037      	beq.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800ba7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba82:	d82e      	bhi.n	800bae2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ba84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ba88:	d033      	beq.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800ba8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ba8e:	d828      	bhi.n	800bae2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ba90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba94:	d01a      	beq.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800ba96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba9a:	d822      	bhi.n	800bae2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d003      	beq.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800baa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800baa4:	d007      	beq.n	800bab6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800baa6:	e01c      	b.n	800bae2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800baa8:	4b1a      	ldr	r3, [pc, #104]	; (800bb14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800baaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baac:	4a19      	ldr	r2, [pc, #100]	; (800bb14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800baae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bab2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bab4:	e01e      	b.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baba:	3308      	adds	r3, #8
 800babc:	2100      	movs	r1, #0
 800babe:	4618      	mov	r0, r3
 800bac0:	f002 f928 	bl	800dd14 <RCCEx_PLL2_Config>
 800bac4:	4603      	mov	r3, r0
 800bac6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800baca:	e013      	b.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bacc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bad0:	3328      	adds	r3, #40	; 0x28
 800bad2:	2100      	movs	r1, #0
 800bad4:	4618      	mov	r0, r3
 800bad6:	f002 f9cf 	bl	800de78 <RCCEx_PLL3_Config>
 800bada:	4603      	mov	r3, r0
 800badc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bae0:	e008      	b.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bae2:	2301      	movs	r3, #1
 800bae4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bae8:	e004      	b.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800baea:	bf00      	nop
 800baec:	e002      	b.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800baee:	bf00      	nop
 800baf0:	e000      	b.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800baf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800baf4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d10d      	bne.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bafc:	4b05      	ldr	r3, [pc, #20]	; (800bb14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bafe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb00:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800bb04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb08:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bb0c:	4a01      	ldr	r2, [pc, #4]	; (800bb14 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb0e:	430b      	orrs	r3, r1
 800bb10:	6593      	str	r3, [r2, #88]	; 0x58
 800bb12:	e005      	b.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800bb14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb1c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800bb20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb28:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800bb2c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bb30:	2300      	movs	r3, #0
 800bb32:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bb36:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800bb3a:	460b      	mov	r3, r1
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	d03a      	beq.n	800bbb6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800bb40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb46:	2b30      	cmp	r3, #48	; 0x30
 800bb48:	d01f      	beq.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800bb4a:	2b30      	cmp	r3, #48	; 0x30
 800bb4c:	d819      	bhi.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bb4e:	2b20      	cmp	r3, #32
 800bb50:	d00c      	beq.n	800bb6c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800bb52:	2b20      	cmp	r3, #32
 800bb54:	d815      	bhi.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d019      	beq.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800bb5a:	2b10      	cmp	r3, #16
 800bb5c:	d111      	bne.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb5e:	4baa      	ldr	r3, [pc, #680]	; (800be08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb62:	4aa9      	ldr	r2, [pc, #676]	; (800be08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bb6a:	e011      	b.n	800bb90 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bb6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb70:	3308      	adds	r3, #8
 800bb72:	2102      	movs	r1, #2
 800bb74:	4618      	mov	r0, r3
 800bb76:	f002 f8cd 	bl	800dd14 <RCCEx_PLL2_Config>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bb80:	e006      	b.n	800bb90 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bb82:	2301      	movs	r3, #1
 800bb84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bb88:	e002      	b.n	800bb90 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bb8a:	bf00      	nop
 800bb8c:	e000      	b.n	800bb90 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bb8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d10a      	bne.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800bb98:	4b9b      	ldr	r3, [pc, #620]	; (800be08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb9c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800bba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bba6:	4a98      	ldr	r2, [pc, #608]	; (800be08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bba8:	430b      	orrs	r3, r1
 800bbaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bbac:	e003      	b.n	800bbb6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbb2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bbb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800bbc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bbcc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	d051      	beq.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800bbd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbe0:	d035      	beq.n	800bc4e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800bbe2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbe6:	d82e      	bhi.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bbe8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bbec:	d031      	beq.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800bbee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bbf2:	d828      	bhi.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bbf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbf8:	d01a      	beq.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800bbfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbfe:	d822      	bhi.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d003      	beq.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800bc04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc08:	d007      	beq.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800bc0a:	e01c      	b.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc0c:	4b7e      	ldr	r3, [pc, #504]	; (800be08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc10:	4a7d      	ldr	r2, [pc, #500]	; (800be08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bc18:	e01c      	b.n	800bc54 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc1e:	3308      	adds	r3, #8
 800bc20:	2100      	movs	r1, #0
 800bc22:	4618      	mov	r0, r3
 800bc24:	f002 f876 	bl	800dd14 <RCCEx_PLL2_Config>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bc2e:	e011      	b.n	800bc54 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bc30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc34:	3328      	adds	r3, #40	; 0x28
 800bc36:	2100      	movs	r1, #0
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f002 f91d 	bl	800de78 <RCCEx_PLL3_Config>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bc44:	e006      	b.n	800bc54 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc46:	2301      	movs	r3, #1
 800bc48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bc4c:	e002      	b.n	800bc54 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bc4e:	bf00      	nop
 800bc50:	e000      	b.n	800bc54 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bc52:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d10a      	bne.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bc5c:	4b6a      	ldr	r3, [pc, #424]	; (800be08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc60:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800bc64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc6a:	4a67      	ldr	r2, [pc, #412]	; (800be08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc6c:	430b      	orrs	r3, r1
 800bc6e:	6513      	str	r3, [r2, #80]	; 0x50
 800bc70:	e003      	b.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc72:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc76:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bc7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc82:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800bc86:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bc90:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800bc94:	460b      	mov	r3, r1
 800bc96:	4313      	orrs	r3, r2
 800bc98:	d053      	beq.n	800bd42 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bc9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bca4:	d033      	beq.n	800bd0e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800bca6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bcaa:	d82c      	bhi.n	800bd06 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bcac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bcb0:	d02f      	beq.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800bcb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bcb6:	d826      	bhi.n	800bd06 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bcb8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bcbc:	d02b      	beq.n	800bd16 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800bcbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bcc2:	d820      	bhi.n	800bd06 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bcc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcc8:	d012      	beq.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800bcca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcce:	d81a      	bhi.n	800bd06 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d022      	beq.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800bcd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bcd8:	d115      	bne.n	800bd06 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bcda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcde:	3308      	adds	r3, #8
 800bce0:	2101      	movs	r1, #1
 800bce2:	4618      	mov	r0, r3
 800bce4:	f002 f816 	bl	800dd14 <RCCEx_PLL2_Config>
 800bce8:	4603      	mov	r3, r0
 800bcea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bcee:	e015      	b.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bcf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcf4:	3328      	adds	r3, #40	; 0x28
 800bcf6:	2101      	movs	r1, #1
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f002 f8bd 	bl	800de78 <RCCEx_PLL3_Config>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bd04:	e00a      	b.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd06:	2301      	movs	r3, #1
 800bd08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bd0c:	e006      	b.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bd0e:	bf00      	nop
 800bd10:	e004      	b.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bd12:	bf00      	nop
 800bd14:	e002      	b.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bd16:	bf00      	nop
 800bd18:	e000      	b.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bd1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d10a      	bne.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bd24:	4b38      	ldr	r3, [pc, #224]	; (800be08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd28:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800bd2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd32:	4a35      	ldr	r2, [pc, #212]	; (800be08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd34:	430b      	orrs	r3, r1
 800bd36:	6513      	str	r3, [r2, #80]	; 0x50
 800bd38:	e003      	b.n	800bd42 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd3a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd3e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bd42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800bd4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bd52:	2300      	movs	r3, #0
 800bd54:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bd58:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bd5c:	460b      	mov	r3, r1
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	d058      	beq.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bd62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bd6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bd6e:	d033      	beq.n	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800bd70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bd74:	d82c      	bhi.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bd76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd7a:	d02f      	beq.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800bd7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd80:	d826      	bhi.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bd82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bd86:	d02b      	beq.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800bd88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bd8c:	d820      	bhi.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bd8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd92:	d012      	beq.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800bd94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd98:	d81a      	bhi.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d022      	beq.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bd9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bda2:	d115      	bne.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bda4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bda8:	3308      	adds	r3, #8
 800bdaa:	2101      	movs	r1, #1
 800bdac:	4618      	mov	r0, r3
 800bdae:	f001 ffb1 	bl	800dd14 <RCCEx_PLL2_Config>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bdb8:	e015      	b.n	800bde6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bdba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdbe:	3328      	adds	r3, #40	; 0x28
 800bdc0:	2101      	movs	r1, #1
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f002 f858 	bl	800de78 <RCCEx_PLL3_Config>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bdce:	e00a      	b.n	800bde6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bdd6:	e006      	b.n	800bde6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bdd8:	bf00      	nop
 800bdda:	e004      	b.n	800bde6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bddc:	bf00      	nop
 800bdde:	e002      	b.n	800bde6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bde0:	bf00      	nop
 800bde2:	e000      	b.n	800bde6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bde4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bde6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d10e      	bne.n	800be0c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bdee:	4b06      	ldr	r3, [pc, #24]	; (800be08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bdf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdf2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bdf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdfa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bdfe:	4a02      	ldr	r2, [pc, #8]	; (800be08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be00:	430b      	orrs	r3, r1
 800be02:	6593      	str	r3, [r2, #88]	; 0x58
 800be04:	e006      	b.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800be06:	bf00      	nop
 800be08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be10:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800be14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be1c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800be20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800be24:	2300      	movs	r3, #0
 800be26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800be2a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800be2e:	460b      	mov	r3, r1
 800be30:	4313      	orrs	r3, r2
 800be32:	d037      	beq.n	800bea4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800be34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be3e:	d00e      	beq.n	800be5e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800be40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be44:	d816      	bhi.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800be46:	2b00      	cmp	r3, #0
 800be48:	d018      	beq.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800be4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be4e:	d111      	bne.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be50:	4bc4      	ldr	r3, [pc, #784]	; (800c164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be54:	4ac3      	ldr	r2, [pc, #780]	; (800c164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800be5c:	e00f      	b.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be62:	3308      	adds	r3, #8
 800be64:	2101      	movs	r1, #1
 800be66:	4618      	mov	r0, r3
 800be68:	f001 ff54 	bl	800dd14 <RCCEx_PLL2_Config>
 800be6c:	4603      	mov	r3, r0
 800be6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800be72:	e004      	b.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be74:	2301      	movs	r3, #1
 800be76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800be7a:	e000      	b.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800be7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be7e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be82:	2b00      	cmp	r3, #0
 800be84:	d10a      	bne.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800be86:	4bb7      	ldr	r3, [pc, #732]	; (800c164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be8a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800be8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be94:	4ab3      	ldr	r2, [pc, #716]	; (800c164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be96:	430b      	orrs	r3, r1
 800be98:	6513      	str	r3, [r2, #80]	; 0x50
 800be9a:	e003      	b.n	800bea4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bea0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beac:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800beb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800beb4:	2300      	movs	r3, #0
 800beb6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800beba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800bebe:	460b      	mov	r3, r1
 800bec0:	4313      	orrs	r3, r2
 800bec2:	d039      	beq.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800beca:	2b03      	cmp	r3, #3
 800becc:	d81c      	bhi.n	800bf08 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bece:	a201      	add	r2, pc, #4	; (adr r2, 800bed4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bed4:	0800bf11 	.word	0x0800bf11
 800bed8:	0800bee5 	.word	0x0800bee5
 800bedc:	0800bef3 	.word	0x0800bef3
 800bee0:	0800bf11 	.word	0x0800bf11
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bee4:	4b9f      	ldr	r3, [pc, #636]	; (800c164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bee8:	4a9e      	ldr	r2, [pc, #632]	; (800c164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800beea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800beee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bef0:	e00f      	b.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bef6:	3308      	adds	r3, #8
 800bef8:	2102      	movs	r1, #2
 800befa:	4618      	mov	r0, r3
 800befc:	f001 ff0a 	bl	800dd14 <RCCEx_PLL2_Config>
 800bf00:	4603      	mov	r3, r0
 800bf02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bf06:	e004      	b.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bf0e:	e000      	b.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800bf10:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf12:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d10a      	bne.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bf1a:	4b92      	ldr	r3, [pc, #584]	; (800c164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf1e:	f023 0103 	bic.w	r1, r3, #3
 800bf22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf28:	4a8e      	ldr	r2, [pc, #568]	; (800c164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf2a:	430b      	orrs	r3, r1
 800bf2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bf2e:	e003      	b.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf34:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bf38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf40:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800bf44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bf48:	2300      	movs	r3, #0
 800bf4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bf4e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bf52:	460b      	mov	r3, r1
 800bf54:	4313      	orrs	r3, r2
 800bf56:	f000 8099 	beq.w	800c08c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bf5a:	4b83      	ldr	r3, [pc, #524]	; (800c168 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4a82      	ldr	r2, [pc, #520]	; (800c168 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bf60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bf66:	f7f8 f91b 	bl	80041a0 <HAL_GetTick>
 800bf6a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bf6e:	e00b      	b.n	800bf88 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bf70:	f7f8 f916 	bl	80041a0 <HAL_GetTick>
 800bf74:	4602      	mov	r2, r0
 800bf76:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bf7a:	1ad3      	subs	r3, r2, r3
 800bf7c:	2b64      	cmp	r3, #100	; 0x64
 800bf7e:	d903      	bls.n	800bf88 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800bf80:	2303      	movs	r3, #3
 800bf82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bf86:	e005      	b.n	800bf94 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bf88:	4b77      	ldr	r3, [pc, #476]	; (800c168 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d0ed      	beq.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800bf94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d173      	bne.n	800c084 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bf9c:	4b71      	ldr	r3, [pc, #452]	; (800c164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bfa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfa4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bfa8:	4053      	eors	r3, r2
 800bfaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d015      	beq.n	800bfde <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bfb2:	4b6c      	ldr	r3, [pc, #432]	; (800c164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bfba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bfbe:	4b69      	ldr	r3, [pc, #420]	; (800c164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfc2:	4a68      	ldr	r2, [pc, #416]	; (800c164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bfc8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bfca:	4b66      	ldr	r3, [pc, #408]	; (800c164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfce:	4a65      	ldr	r2, [pc, #404]	; (800c164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bfd4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bfd6:	4a63      	ldr	r2, [pc, #396]	; (800c164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfdc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bfde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfe2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bfe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfea:	d118      	bne.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfec:	f7f8 f8d8 	bl	80041a0 <HAL_GetTick>
 800bff0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bff4:	e00d      	b.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bff6:	f7f8 f8d3 	bl	80041a0 <HAL_GetTick>
 800bffa:	4602      	mov	r2, r0
 800bffc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c000:	1ad2      	subs	r2, r2, r3
 800c002:	f241 3388 	movw	r3, #5000	; 0x1388
 800c006:	429a      	cmp	r2, r3
 800c008:	d903      	bls.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800c00a:	2303      	movs	r3, #3
 800c00c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800c010:	e005      	b.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c012:	4b54      	ldr	r3, [pc, #336]	; (800c164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c016:	f003 0302 	and.w	r3, r3, #2
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d0eb      	beq.n	800bff6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800c01e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c022:	2b00      	cmp	r3, #0
 800c024:	d129      	bne.n	800c07a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c02a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c02e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c032:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c036:	d10e      	bne.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800c038:	4b4a      	ldr	r3, [pc, #296]	; (800c164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c03a:	691b      	ldr	r3, [r3, #16]
 800c03c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800c040:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c044:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c048:	091a      	lsrs	r2, r3, #4
 800c04a:	4b48      	ldr	r3, [pc, #288]	; (800c16c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800c04c:	4013      	ands	r3, r2
 800c04e:	4a45      	ldr	r2, [pc, #276]	; (800c164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c050:	430b      	orrs	r3, r1
 800c052:	6113      	str	r3, [r2, #16]
 800c054:	e005      	b.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800c056:	4b43      	ldr	r3, [pc, #268]	; (800c164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c058:	691b      	ldr	r3, [r3, #16]
 800c05a:	4a42      	ldr	r2, [pc, #264]	; (800c164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c05c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c060:	6113      	str	r3, [r2, #16]
 800c062:	4b40      	ldr	r3, [pc, #256]	; (800c164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c064:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c06a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c06e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c072:	4a3c      	ldr	r2, [pc, #240]	; (800c164 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c074:	430b      	orrs	r3, r1
 800c076:	6713      	str	r3, [r2, #112]	; 0x70
 800c078:	e008      	b.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c07a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c07e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800c082:	e003      	b.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c084:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c088:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c08c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c094:	f002 0301 	and.w	r3, r2, #1
 800c098:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c09c:	2300      	movs	r3, #0
 800c09e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c0a2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	f000 808f 	beq.w	800c1cc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c0ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0b4:	2b28      	cmp	r3, #40	; 0x28
 800c0b6:	d871      	bhi.n	800c19c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c0b8:	a201      	add	r2, pc, #4	; (adr r2, 800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0be:	bf00      	nop
 800c0c0:	0800c1a5 	.word	0x0800c1a5
 800c0c4:	0800c19d 	.word	0x0800c19d
 800c0c8:	0800c19d 	.word	0x0800c19d
 800c0cc:	0800c19d 	.word	0x0800c19d
 800c0d0:	0800c19d 	.word	0x0800c19d
 800c0d4:	0800c19d 	.word	0x0800c19d
 800c0d8:	0800c19d 	.word	0x0800c19d
 800c0dc:	0800c19d 	.word	0x0800c19d
 800c0e0:	0800c171 	.word	0x0800c171
 800c0e4:	0800c19d 	.word	0x0800c19d
 800c0e8:	0800c19d 	.word	0x0800c19d
 800c0ec:	0800c19d 	.word	0x0800c19d
 800c0f0:	0800c19d 	.word	0x0800c19d
 800c0f4:	0800c19d 	.word	0x0800c19d
 800c0f8:	0800c19d 	.word	0x0800c19d
 800c0fc:	0800c19d 	.word	0x0800c19d
 800c100:	0800c187 	.word	0x0800c187
 800c104:	0800c19d 	.word	0x0800c19d
 800c108:	0800c19d 	.word	0x0800c19d
 800c10c:	0800c19d 	.word	0x0800c19d
 800c110:	0800c19d 	.word	0x0800c19d
 800c114:	0800c19d 	.word	0x0800c19d
 800c118:	0800c19d 	.word	0x0800c19d
 800c11c:	0800c19d 	.word	0x0800c19d
 800c120:	0800c1a5 	.word	0x0800c1a5
 800c124:	0800c19d 	.word	0x0800c19d
 800c128:	0800c19d 	.word	0x0800c19d
 800c12c:	0800c19d 	.word	0x0800c19d
 800c130:	0800c19d 	.word	0x0800c19d
 800c134:	0800c19d 	.word	0x0800c19d
 800c138:	0800c19d 	.word	0x0800c19d
 800c13c:	0800c19d 	.word	0x0800c19d
 800c140:	0800c1a5 	.word	0x0800c1a5
 800c144:	0800c19d 	.word	0x0800c19d
 800c148:	0800c19d 	.word	0x0800c19d
 800c14c:	0800c19d 	.word	0x0800c19d
 800c150:	0800c19d 	.word	0x0800c19d
 800c154:	0800c19d 	.word	0x0800c19d
 800c158:	0800c19d 	.word	0x0800c19d
 800c15c:	0800c19d 	.word	0x0800c19d
 800c160:	0800c1a5 	.word	0x0800c1a5
 800c164:	58024400 	.word	0x58024400
 800c168:	58024800 	.word	0x58024800
 800c16c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c174:	3308      	adds	r3, #8
 800c176:	2101      	movs	r1, #1
 800c178:	4618      	mov	r0, r3
 800c17a:	f001 fdcb 	bl	800dd14 <RCCEx_PLL2_Config>
 800c17e:	4603      	mov	r3, r0
 800c180:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c184:	e00f      	b.n	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c18a:	3328      	adds	r3, #40	; 0x28
 800c18c:	2101      	movs	r1, #1
 800c18e:	4618      	mov	r0, r3
 800c190:	f001 fe72 	bl	800de78 <RCCEx_PLL3_Config>
 800c194:	4603      	mov	r3, r0
 800c196:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c19a:	e004      	b.n	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c19c:	2301      	movs	r3, #1
 800c19e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c1a2:	e000      	b.n	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c1a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d10a      	bne.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c1ae:	4bbf      	ldr	r3, [pc, #764]	; (800c4ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c1b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1b2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800c1b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1bc:	4abb      	ldr	r2, [pc, #748]	; (800c4ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c1be:	430b      	orrs	r3, r1
 800c1c0:	6553      	str	r3, [r2, #84]	; 0x54
 800c1c2:	e003      	b.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c1c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c1cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d4:	f002 0302 	and.w	r3, r2, #2
 800c1d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c1dc:	2300      	movs	r3, #0
 800c1de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c1e2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800c1e6:	460b      	mov	r3, r1
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	d041      	beq.n	800c270 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c1ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1f2:	2b05      	cmp	r3, #5
 800c1f4:	d824      	bhi.n	800c240 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800c1f6:	a201      	add	r2, pc, #4	; (adr r2, 800c1fc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800c1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1fc:	0800c249 	.word	0x0800c249
 800c200:	0800c215 	.word	0x0800c215
 800c204:	0800c22b 	.word	0x0800c22b
 800c208:	0800c249 	.word	0x0800c249
 800c20c:	0800c249 	.word	0x0800c249
 800c210:	0800c249 	.word	0x0800c249
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c218:	3308      	adds	r3, #8
 800c21a:	2101      	movs	r1, #1
 800c21c:	4618      	mov	r0, r3
 800c21e:	f001 fd79 	bl	800dd14 <RCCEx_PLL2_Config>
 800c222:	4603      	mov	r3, r0
 800c224:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c228:	e00f      	b.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c22a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c22e:	3328      	adds	r3, #40	; 0x28
 800c230:	2101      	movs	r1, #1
 800c232:	4618      	mov	r0, r3
 800c234:	f001 fe20 	bl	800de78 <RCCEx_PLL3_Config>
 800c238:	4603      	mov	r3, r0
 800c23a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c23e:	e004      	b.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c240:	2301      	movs	r3, #1
 800c242:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c246:	e000      	b.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800c248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c24a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d10a      	bne.n	800c268 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c252:	4b96      	ldr	r3, [pc, #600]	; (800c4ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c256:	f023 0107 	bic.w	r1, r3, #7
 800c25a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c25e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c260:	4a92      	ldr	r2, [pc, #584]	; (800c4ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c262:	430b      	orrs	r3, r1
 800c264:	6553      	str	r3, [r2, #84]	; 0x54
 800c266:	e003      	b.n	800c270 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c268:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c26c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c278:	f002 0304 	and.w	r3, r2, #4
 800c27c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c280:	2300      	movs	r3, #0
 800c282:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c286:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c28a:	460b      	mov	r3, r1
 800c28c:	4313      	orrs	r3, r2
 800c28e:	d044      	beq.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c298:	2b05      	cmp	r3, #5
 800c29a:	d825      	bhi.n	800c2e8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800c29c:	a201      	add	r2, pc, #4	; (adr r2, 800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800c29e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2a2:	bf00      	nop
 800c2a4:	0800c2f1 	.word	0x0800c2f1
 800c2a8:	0800c2bd 	.word	0x0800c2bd
 800c2ac:	0800c2d3 	.word	0x0800c2d3
 800c2b0:	0800c2f1 	.word	0x0800c2f1
 800c2b4:	0800c2f1 	.word	0x0800c2f1
 800c2b8:	0800c2f1 	.word	0x0800c2f1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c2bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2c0:	3308      	adds	r3, #8
 800c2c2:	2101      	movs	r1, #1
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f001 fd25 	bl	800dd14 <RCCEx_PLL2_Config>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c2d0:	e00f      	b.n	800c2f2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c2d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2d6:	3328      	adds	r3, #40	; 0x28
 800c2d8:	2101      	movs	r1, #1
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f001 fdcc 	bl	800de78 <RCCEx_PLL3_Config>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c2e6:	e004      	b.n	800c2f2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c2ee:	e000      	b.n	800c2f2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800c2f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c2f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d10b      	bne.n	800c312 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c2fa:	4b6c      	ldr	r3, [pc, #432]	; (800c4ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c2fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2fe:	f023 0107 	bic.w	r1, r3, #7
 800c302:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c30a:	4a68      	ldr	r2, [pc, #416]	; (800c4ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c30c:	430b      	orrs	r3, r1
 800c30e:	6593      	str	r3, [r2, #88]	; 0x58
 800c310:	e003      	b.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c312:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c316:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c31a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c322:	f002 0320 	and.w	r3, r2, #32
 800c326:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c32a:	2300      	movs	r3, #0
 800c32c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c330:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c334:	460b      	mov	r3, r1
 800c336:	4313      	orrs	r3, r2
 800c338:	d055      	beq.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c33a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c33e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c342:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c346:	d033      	beq.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800c348:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c34c:	d82c      	bhi.n	800c3a8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c34e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c352:	d02f      	beq.n	800c3b4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c358:	d826      	bhi.n	800c3a8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c35a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c35e:	d02b      	beq.n	800c3b8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c360:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c364:	d820      	bhi.n	800c3a8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c366:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c36a:	d012      	beq.n	800c392 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800c36c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c370:	d81a      	bhi.n	800c3a8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c372:	2b00      	cmp	r3, #0
 800c374:	d022      	beq.n	800c3bc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c376:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c37a:	d115      	bne.n	800c3a8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c37c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c380:	3308      	adds	r3, #8
 800c382:	2100      	movs	r1, #0
 800c384:	4618      	mov	r0, r3
 800c386:	f001 fcc5 	bl	800dd14 <RCCEx_PLL2_Config>
 800c38a:	4603      	mov	r3, r0
 800c38c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c390:	e015      	b.n	800c3be <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c396:	3328      	adds	r3, #40	; 0x28
 800c398:	2102      	movs	r1, #2
 800c39a:	4618      	mov	r0, r3
 800c39c:	f001 fd6c 	bl	800de78 <RCCEx_PLL3_Config>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c3a6:	e00a      	b.n	800c3be <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c3ae:	e006      	b.n	800c3be <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c3b0:	bf00      	nop
 800c3b2:	e004      	b.n	800c3be <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c3b4:	bf00      	nop
 800c3b6:	e002      	b.n	800c3be <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c3b8:	bf00      	nop
 800c3ba:	e000      	b.n	800c3be <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c3bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d10b      	bne.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c3c6:	4b39      	ldr	r3, [pc, #228]	; (800c4ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c3c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3ca:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c3ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3d6:	4a35      	ldr	r2, [pc, #212]	; (800c4ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c3d8:	430b      	orrs	r3, r1
 800c3da:	6553      	str	r3, [r2, #84]	; 0x54
 800c3dc:	e003      	b.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c3e2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c3e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ee:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c3f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c3fc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c400:	460b      	mov	r3, r1
 800c402:	4313      	orrs	r3, r2
 800c404:	d058      	beq.n	800c4b8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c406:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c40a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c40e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c412:	d033      	beq.n	800c47c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800c414:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c418:	d82c      	bhi.n	800c474 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c41a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c41e:	d02f      	beq.n	800c480 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c424:	d826      	bhi.n	800c474 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c426:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c42a:	d02b      	beq.n	800c484 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c42c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c430:	d820      	bhi.n	800c474 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c436:	d012      	beq.n	800c45e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800c438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c43c:	d81a      	bhi.n	800c474 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d022      	beq.n	800c488 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c446:	d115      	bne.n	800c474 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c44c:	3308      	adds	r3, #8
 800c44e:	2100      	movs	r1, #0
 800c450:	4618      	mov	r0, r3
 800c452:	f001 fc5f 	bl	800dd14 <RCCEx_PLL2_Config>
 800c456:	4603      	mov	r3, r0
 800c458:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c45c:	e015      	b.n	800c48a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c45e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c462:	3328      	adds	r3, #40	; 0x28
 800c464:	2102      	movs	r1, #2
 800c466:	4618      	mov	r0, r3
 800c468:	f001 fd06 	bl	800de78 <RCCEx_PLL3_Config>
 800c46c:	4603      	mov	r3, r0
 800c46e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c472:	e00a      	b.n	800c48a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c474:	2301      	movs	r3, #1
 800c476:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c47a:	e006      	b.n	800c48a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c47c:	bf00      	nop
 800c47e:	e004      	b.n	800c48a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c480:	bf00      	nop
 800c482:	e002      	b.n	800c48a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c484:	bf00      	nop
 800c486:	e000      	b.n	800c48a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c488:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c48a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d10e      	bne.n	800c4b0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c492:	4b06      	ldr	r3, [pc, #24]	; (800c4ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c496:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c49a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c49e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c4a2:	4a02      	ldr	r2, [pc, #8]	; (800c4ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c4a4:	430b      	orrs	r3, r1
 800c4a6:	6593      	str	r3, [r2, #88]	; 0x58
 800c4a8:	e006      	b.n	800c4b8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800c4aa:	bf00      	nop
 800c4ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c4b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c4b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c4c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c4ce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c4d2:	460b      	mov	r3, r1
 800c4d4:	4313      	orrs	r3, r2
 800c4d6:	d055      	beq.n	800c584 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c4d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c4e0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c4e4:	d033      	beq.n	800c54e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800c4e6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c4ea:	d82c      	bhi.n	800c546 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c4ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c4f0:	d02f      	beq.n	800c552 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c4f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c4f6:	d826      	bhi.n	800c546 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c4f8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c4fc:	d02b      	beq.n	800c556 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c4fe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c502:	d820      	bhi.n	800c546 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c504:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c508:	d012      	beq.n	800c530 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800c50a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c50e:	d81a      	bhi.n	800c546 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c510:	2b00      	cmp	r3, #0
 800c512:	d022      	beq.n	800c55a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c518:	d115      	bne.n	800c546 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c51a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c51e:	3308      	adds	r3, #8
 800c520:	2100      	movs	r1, #0
 800c522:	4618      	mov	r0, r3
 800c524:	f001 fbf6 	bl	800dd14 <RCCEx_PLL2_Config>
 800c528:	4603      	mov	r3, r0
 800c52a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c52e:	e015      	b.n	800c55c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c534:	3328      	adds	r3, #40	; 0x28
 800c536:	2102      	movs	r1, #2
 800c538:	4618      	mov	r0, r3
 800c53a:	f001 fc9d 	bl	800de78 <RCCEx_PLL3_Config>
 800c53e:	4603      	mov	r3, r0
 800c540:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c544:	e00a      	b.n	800c55c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c546:	2301      	movs	r3, #1
 800c548:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c54c:	e006      	b.n	800c55c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c54e:	bf00      	nop
 800c550:	e004      	b.n	800c55c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c552:	bf00      	nop
 800c554:	e002      	b.n	800c55c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c556:	bf00      	nop
 800c558:	e000      	b.n	800c55c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c55a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c55c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c560:	2b00      	cmp	r3, #0
 800c562:	d10b      	bne.n	800c57c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c564:	4ba0      	ldr	r3, [pc, #640]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c568:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c56c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c570:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c574:	4a9c      	ldr	r2, [pc, #624]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c576:	430b      	orrs	r3, r1
 800c578:	6593      	str	r3, [r2, #88]	; 0x58
 800c57a:	e003      	b.n	800c584 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c57c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c580:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c58c:	f002 0308 	and.w	r3, r2, #8
 800c590:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c594:	2300      	movs	r3, #0
 800c596:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c59a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c59e:	460b      	mov	r3, r1
 800c5a0:	4313      	orrs	r3, r2
 800c5a2:	d01e      	beq.n	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c5a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5b0:	d10c      	bne.n	800c5cc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c5b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5b6:	3328      	adds	r3, #40	; 0x28
 800c5b8:	2102      	movs	r1, #2
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f001 fc5c 	bl	800de78 <RCCEx_PLL3_Config>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d002      	beq.n	800c5cc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c5cc:	4b86      	ldr	r3, [pc, #536]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c5ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c5d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5dc:	4a82      	ldr	r2, [pc, #520]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c5de:	430b      	orrs	r3, r1
 800c5e0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c5e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ea:	f002 0310 	and.w	r3, r2, #16
 800c5ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c5f8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	4313      	orrs	r3, r2
 800c600:	d01e      	beq.n	800c640 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c60a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c60e:	d10c      	bne.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c614:	3328      	adds	r3, #40	; 0x28
 800c616:	2102      	movs	r1, #2
 800c618:	4618      	mov	r0, r3
 800c61a:	f001 fc2d 	bl	800de78 <RCCEx_PLL3_Config>
 800c61e:	4603      	mov	r3, r0
 800c620:	2b00      	cmp	r3, #0
 800c622:	d002      	beq.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c624:	2301      	movs	r3, #1
 800c626:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c62a:	4b6f      	ldr	r3, [pc, #444]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c62c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c62e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c632:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c63a:	4a6b      	ldr	r2, [pc, #428]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c63c:	430b      	orrs	r3, r1
 800c63e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c648:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c64c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c64e:	2300      	movs	r3, #0
 800c650:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c652:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c656:	460b      	mov	r3, r1
 800c658:	4313      	orrs	r3, r2
 800c65a:	d03e      	beq.n	800c6da <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c65c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c660:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c664:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c668:	d022      	beq.n	800c6b0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c66a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c66e:	d81b      	bhi.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c670:	2b00      	cmp	r3, #0
 800c672:	d003      	beq.n	800c67c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c678:	d00b      	beq.n	800c692 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c67a:	e015      	b.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c67c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c680:	3308      	adds	r3, #8
 800c682:	2100      	movs	r1, #0
 800c684:	4618      	mov	r0, r3
 800c686:	f001 fb45 	bl	800dd14 <RCCEx_PLL2_Config>
 800c68a:	4603      	mov	r3, r0
 800c68c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c690:	e00f      	b.n	800c6b2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c696:	3328      	adds	r3, #40	; 0x28
 800c698:	2102      	movs	r1, #2
 800c69a:	4618      	mov	r0, r3
 800c69c:	f001 fbec 	bl	800de78 <RCCEx_PLL3_Config>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c6a6:	e004      	b.n	800c6b2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c6ae:	e000      	b.n	800c6b2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c6b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d10b      	bne.n	800c6d2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c6ba:	4b4b      	ldr	r3, [pc, #300]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c6bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6be:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c6c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c6ca:	4a47      	ldr	r2, [pc, #284]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c6cc:	430b      	orrs	r3, r1
 800c6ce:	6593      	str	r3, [r2, #88]	; 0x58
 800c6d0:	e003      	b.n	800c6da <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c6d6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c6da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c6e6:	673b      	str	r3, [r7, #112]	; 0x70
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	677b      	str	r3, [r7, #116]	; 0x74
 800c6ec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c6f0:	460b      	mov	r3, r1
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	d03b      	beq.n	800c76e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c6f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c702:	d01f      	beq.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c704:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c708:	d818      	bhi.n	800c73c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800c70a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c70e:	d003      	beq.n	800c718 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800c710:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c714:	d007      	beq.n	800c726 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800c716:	e011      	b.n	800c73c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c718:	4b33      	ldr	r3, [pc, #204]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c71c:	4a32      	ldr	r2, [pc, #200]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c71e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c722:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c724:	e00f      	b.n	800c746 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c72a:	3328      	adds	r3, #40	; 0x28
 800c72c:	2101      	movs	r1, #1
 800c72e:	4618      	mov	r0, r3
 800c730:	f001 fba2 	bl	800de78 <RCCEx_PLL3_Config>
 800c734:	4603      	mov	r3, r0
 800c736:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800c73a:	e004      	b.n	800c746 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c73c:	2301      	movs	r3, #1
 800c73e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c742:	e000      	b.n	800c746 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800c744:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c746:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d10b      	bne.n	800c766 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c74e:	4b26      	ldr	r3, [pc, #152]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c752:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c756:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c75a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c75e:	4a22      	ldr	r2, [pc, #136]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c760:	430b      	orrs	r3, r1
 800c762:	6553      	str	r3, [r2, #84]	; 0x54
 800c764:	e003      	b.n	800c76e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c766:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c76a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c76e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c776:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c77a:	66bb      	str	r3, [r7, #104]	; 0x68
 800c77c:	2300      	movs	r3, #0
 800c77e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c780:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c784:	460b      	mov	r3, r1
 800c786:	4313      	orrs	r3, r2
 800c788:	d034      	beq.n	800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c78a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c78e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c790:	2b00      	cmp	r3, #0
 800c792:	d003      	beq.n	800c79c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800c794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c798:	d007      	beq.n	800c7aa <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800c79a:	e011      	b.n	800c7c0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c79c:	4b12      	ldr	r3, [pc, #72]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7a0:	4a11      	ldr	r2, [pc, #68]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c7a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c7a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c7a8:	e00e      	b.n	800c7c8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c7aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7ae:	3308      	adds	r3, #8
 800c7b0:	2102      	movs	r1, #2
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f001 faae 	bl	800dd14 <RCCEx_PLL2_Config>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c7be:	e003      	b.n	800c7c8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c7c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d10d      	bne.n	800c7ec <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c7d0:	4b05      	ldr	r3, [pc, #20]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c7d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c7d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7de:	4a02      	ldr	r2, [pc, #8]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c7e0:	430b      	orrs	r3, r1
 800c7e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c7e4:	e006      	b.n	800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800c7e6:	bf00      	nop
 800c7e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c7f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c7f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c800:	663b      	str	r3, [r7, #96]	; 0x60
 800c802:	2300      	movs	r3, #0
 800c804:	667b      	str	r3, [r7, #100]	; 0x64
 800c806:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c80a:	460b      	mov	r3, r1
 800c80c:	4313      	orrs	r3, r2
 800c80e:	d00c      	beq.n	800c82a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c814:	3328      	adds	r3, #40	; 0x28
 800c816:	2102      	movs	r1, #2
 800c818:	4618      	mov	r0, r3
 800c81a:	f001 fb2d 	bl	800de78 <RCCEx_PLL3_Config>
 800c81e:	4603      	mov	r3, r0
 800c820:	2b00      	cmp	r3, #0
 800c822:	d002      	beq.n	800c82a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800c824:	2301      	movs	r3, #1
 800c826:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c82a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c832:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c836:	65bb      	str	r3, [r7, #88]	; 0x58
 800c838:	2300      	movs	r3, #0
 800c83a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c83c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c840:	460b      	mov	r3, r1
 800c842:	4313      	orrs	r3, r2
 800c844:	d036      	beq.n	800c8b4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c84a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c84c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c850:	d018      	beq.n	800c884 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800c852:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c856:	d811      	bhi.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c85c:	d014      	beq.n	800c888 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800c85e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c862:	d80b      	bhi.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c864:	2b00      	cmp	r3, #0
 800c866:	d011      	beq.n	800c88c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800c868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c86c:	d106      	bne.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c86e:	4bb7      	ldr	r3, [pc, #732]	; (800cb4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c872:	4ab6      	ldr	r2, [pc, #728]	; (800cb4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c878:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c87a:	e008      	b.n	800c88e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c87c:	2301      	movs	r3, #1
 800c87e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c882:	e004      	b.n	800c88e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c884:	bf00      	nop
 800c886:	e002      	b.n	800c88e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c888:	bf00      	nop
 800c88a:	e000      	b.n	800c88e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c88c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c88e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c892:	2b00      	cmp	r3, #0
 800c894:	d10a      	bne.n	800c8ac <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c896:	4bad      	ldr	r3, [pc, #692]	; (800cb4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c89a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c89e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8a4:	4aa9      	ldr	r2, [pc, #676]	; (800cb4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c8a6:	430b      	orrs	r3, r1
 800c8a8:	6553      	str	r3, [r2, #84]	; 0x54
 800c8aa:	e003      	b.n	800c8b4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c8b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c8b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8bc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c8c0:	653b      	str	r3, [r7, #80]	; 0x50
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	657b      	str	r3, [r7, #84]	; 0x54
 800c8c6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c8ca:	460b      	mov	r3, r1
 800c8cc:	4313      	orrs	r3, r2
 800c8ce:	d009      	beq.n	800c8e4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c8d0:	4b9e      	ldr	r3, [pc, #632]	; (800cb4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c8d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8d4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c8d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8de:	4a9b      	ldr	r2, [pc, #620]	; (800cb4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c8e0:	430b      	orrs	r3, r1
 800c8e2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c8e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ec:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c8f0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c8f6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	d009      	beq.n	800c914 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c900:	4b92      	ldr	r3, [pc, #584]	; (800cb4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c904:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c90c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c90e:	4a8f      	ldr	r2, [pc, #572]	; (800cb4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c910:	430b      	orrs	r3, r1
 800c912:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c91c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c920:	643b      	str	r3, [r7, #64]	; 0x40
 800c922:	2300      	movs	r3, #0
 800c924:	647b      	str	r3, [r7, #68]	; 0x44
 800c926:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c92a:	460b      	mov	r3, r1
 800c92c:	4313      	orrs	r3, r2
 800c92e:	d00e      	beq.n	800c94e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c930:	4b86      	ldr	r3, [pc, #536]	; (800cb4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c932:	691b      	ldr	r3, [r3, #16]
 800c934:	4a85      	ldr	r2, [pc, #532]	; (800cb4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c936:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c93a:	6113      	str	r3, [r2, #16]
 800c93c:	4b83      	ldr	r3, [pc, #524]	; (800cb4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c93e:	6919      	ldr	r1, [r3, #16]
 800c940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c944:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c948:	4a80      	ldr	r2, [pc, #512]	; (800cb4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c94a:	430b      	orrs	r3, r1
 800c94c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c94e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c956:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c95a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c95c:	2300      	movs	r3, #0
 800c95e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c960:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c964:	460b      	mov	r3, r1
 800c966:	4313      	orrs	r3, r2
 800c968:	d009      	beq.n	800c97e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c96a:	4b78      	ldr	r3, [pc, #480]	; (800cb4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c96c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c96e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c978:	4a74      	ldr	r2, [pc, #464]	; (800cb4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c97a:	430b      	orrs	r3, r1
 800c97c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c97e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c986:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c98a:	633b      	str	r3, [r7, #48]	; 0x30
 800c98c:	2300      	movs	r3, #0
 800c98e:	637b      	str	r3, [r7, #52]	; 0x34
 800c990:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c994:	460b      	mov	r3, r1
 800c996:	4313      	orrs	r3, r2
 800c998:	d00a      	beq.n	800c9b0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c99a:	4b6c      	ldr	r3, [pc, #432]	; (800cb4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c99c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c99e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c9a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9aa:	4a68      	ldr	r2, [pc, #416]	; (800cb4c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9ac:	430b      	orrs	r3, r1
 800c9ae:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c9b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b8:	2100      	movs	r1, #0
 800c9ba:	62b9      	str	r1, [r7, #40]	; 0x28
 800c9bc:	f003 0301 	and.w	r3, r3, #1
 800c9c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9c2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c9c6:	460b      	mov	r3, r1
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	d011      	beq.n	800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c9cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9d0:	3308      	adds	r3, #8
 800c9d2:	2100      	movs	r1, #0
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f001 f99d 	bl	800dd14 <RCCEx_PLL2_Config>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c9e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d003      	beq.n	800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c9ec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c9f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f8:	2100      	movs	r1, #0
 800c9fa:	6239      	str	r1, [r7, #32]
 800c9fc:	f003 0302 	and.w	r3, r3, #2
 800ca00:	627b      	str	r3, [r7, #36]	; 0x24
 800ca02:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ca06:	460b      	mov	r3, r1
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	d011      	beq.n	800ca30 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ca0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca10:	3308      	adds	r3, #8
 800ca12:	2101      	movs	r1, #1
 800ca14:	4618      	mov	r0, r3
 800ca16:	f001 f97d 	bl	800dd14 <RCCEx_PLL2_Config>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ca20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d003      	beq.n	800ca30 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ca2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ca30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca38:	2100      	movs	r1, #0
 800ca3a:	61b9      	str	r1, [r7, #24]
 800ca3c:	f003 0304 	and.w	r3, r3, #4
 800ca40:	61fb      	str	r3, [r7, #28]
 800ca42:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ca46:	460b      	mov	r3, r1
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	d011      	beq.n	800ca70 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ca4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca50:	3308      	adds	r3, #8
 800ca52:	2102      	movs	r1, #2
 800ca54:	4618      	mov	r0, r3
 800ca56:	f001 f95d 	bl	800dd14 <RCCEx_PLL2_Config>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ca60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d003      	beq.n	800ca70 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ca6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ca70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca78:	2100      	movs	r1, #0
 800ca7a:	6139      	str	r1, [r7, #16]
 800ca7c:	f003 0308 	and.w	r3, r3, #8
 800ca80:	617b      	str	r3, [r7, #20]
 800ca82:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ca86:	460b      	mov	r3, r1
 800ca88:	4313      	orrs	r3, r2
 800ca8a:	d011      	beq.n	800cab0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ca8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca90:	3328      	adds	r3, #40	; 0x28
 800ca92:	2100      	movs	r1, #0
 800ca94:	4618      	mov	r0, r3
 800ca96:	f001 f9ef 	bl	800de78 <RCCEx_PLL3_Config>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800caa0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d003      	beq.n	800cab0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800caa8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800caac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800cab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab8:	2100      	movs	r1, #0
 800caba:	60b9      	str	r1, [r7, #8]
 800cabc:	f003 0310 	and.w	r3, r3, #16
 800cac0:	60fb      	str	r3, [r7, #12]
 800cac2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800cac6:	460b      	mov	r3, r1
 800cac8:	4313      	orrs	r3, r2
 800caca:	d011      	beq.n	800caf0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cacc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cad0:	3328      	adds	r3, #40	; 0x28
 800cad2:	2101      	movs	r1, #1
 800cad4:	4618      	mov	r0, r3
 800cad6:	f001 f9cf 	bl	800de78 <RCCEx_PLL3_Config>
 800cada:	4603      	mov	r3, r0
 800cadc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800cae0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d003      	beq.n	800caf0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cae8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800caec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800caf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800caf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf8:	2100      	movs	r1, #0
 800cafa:	6039      	str	r1, [r7, #0]
 800cafc:	f003 0320 	and.w	r3, r3, #32
 800cb00:	607b      	str	r3, [r7, #4]
 800cb02:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cb06:	460b      	mov	r3, r1
 800cb08:	4313      	orrs	r3, r2
 800cb0a:	d011      	beq.n	800cb30 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cb0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb10:	3328      	adds	r3, #40	; 0x28
 800cb12:	2102      	movs	r1, #2
 800cb14:	4618      	mov	r0, r3
 800cb16:	f001 f9af 	bl	800de78 <RCCEx_PLL3_Config>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800cb20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d003      	beq.n	800cb30 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cb2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800cb30:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d101      	bne.n	800cb3c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	e000      	b.n	800cb3e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800cb3c:	2301      	movs	r3, #1
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800cb44:	46bd      	mov	sp, r7
 800cb46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cb4a:	bf00      	nop
 800cb4c:	58024400 	.word	0x58024400

0800cb50 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b090      	sub	sp, #64	; 0x40
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800cb5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb5e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800cb62:	430b      	orrs	r3, r1
 800cb64:	f040 8094 	bne.w	800cc90 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800cb68:	4b9b      	ldr	r3, [pc, #620]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb6c:	f003 0307 	and.w	r3, r3, #7
 800cb70:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb74:	2b04      	cmp	r3, #4
 800cb76:	f200 8087 	bhi.w	800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800cb7a:	a201      	add	r2, pc, #4	; (adr r2, 800cb80 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800cb7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb80:	0800cb95 	.word	0x0800cb95
 800cb84:	0800cbbd 	.word	0x0800cbbd
 800cb88:	0800cbe5 	.word	0x0800cbe5
 800cb8c:	0800cc81 	.word	0x0800cc81
 800cb90:	0800cc0d 	.word	0x0800cc0d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cb94:	4b90      	ldr	r3, [pc, #576]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cba0:	d108      	bne.n	800cbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cba6:	4618      	mov	r0, r3
 800cba8:	f000 ff62 	bl	800da70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbb0:	f000 bc93 	b.w	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbb8:	f000 bc8f 	b.w	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbbc:	4b86      	ldr	r3, [pc, #536]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cbc8:	d108      	bne.n	800cbdc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbca:	f107 0318 	add.w	r3, r7, #24
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f000 fca6 	bl	800d520 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cbd4:	69bb      	ldr	r3, [r7, #24]
 800cbd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbd8:	f000 bc7f 	b.w	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbe0:	f000 bc7b 	b.w	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cbe4:	4b7c      	ldr	r3, [pc, #496]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cbec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbf0:	d108      	bne.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbf2:	f107 030c 	add.w	r3, r7, #12
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f000 fde6 	bl	800d7c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc00:	f000 bc6b 	b.w	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc04:	2300      	movs	r3, #0
 800cc06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc08:	f000 bc67 	b.w	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc0c:	4b72      	ldr	r3, [pc, #456]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cc14:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc16:	4b70      	ldr	r3, [pc, #448]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f003 0304 	and.w	r3, r3, #4
 800cc1e:	2b04      	cmp	r3, #4
 800cc20:	d10c      	bne.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800cc22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d109      	bne.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc28:	4b6b      	ldr	r3, [pc, #428]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	08db      	lsrs	r3, r3, #3
 800cc2e:	f003 0303 	and.w	r3, r3, #3
 800cc32:	4a6a      	ldr	r2, [pc, #424]	; (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800cc34:	fa22 f303 	lsr.w	r3, r2, r3
 800cc38:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc3a:	e01f      	b.n	800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cc3c:	4b66      	ldr	r3, [pc, #408]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc48:	d106      	bne.n	800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800cc4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc50:	d102      	bne.n	800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cc52:	4b63      	ldr	r3, [pc, #396]	; (800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800cc54:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc56:	e011      	b.n	800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cc58:	4b5f      	ldr	r3, [pc, #380]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc64:	d106      	bne.n	800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800cc66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc6c:	d102      	bne.n	800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cc6e:	4b5d      	ldr	r3, [pc, #372]	; (800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cc70:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc72:	e003      	b.n	800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cc74:	2300      	movs	r3, #0
 800cc76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cc78:	f000 bc2f 	b.w	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cc7c:	f000 bc2d 	b.w	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cc80:	4b59      	ldr	r3, [pc, #356]	; (800cde8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cc82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc84:	f000 bc29 	b.w	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc8c:	f000 bc25 	b.w	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800cc90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc94:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800cc98:	430b      	orrs	r3, r1
 800cc9a:	f040 80a7 	bne.w	800cdec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800cc9e:	4b4e      	ldr	r3, [pc, #312]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cca2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800cca6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccaa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ccae:	d054      	beq.n	800cd5a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800ccb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ccb6:	f200 808b 	bhi.w	800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ccba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccbc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ccc0:	f000 8083 	beq.w	800cdca <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800ccc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ccca:	f200 8081 	bhi.w	800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ccce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ccd4:	d02f      	beq.n	800cd36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ccd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ccdc:	d878      	bhi.n	800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ccde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d004      	beq.n	800ccee <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800cce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ccea:	d012      	beq.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800ccec:	e070      	b.n	800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ccee:	4b3a      	ldr	r3, [pc, #232]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ccfa:	d107      	bne.n	800cd0c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ccfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd00:	4618      	mov	r0, r3
 800cd02:	f000 feb5 	bl	800da70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cd06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd0a:	e3e6      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd10:	e3e3      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd12:	4b31      	ldr	r3, [pc, #196]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd1e:	d107      	bne.n	800cd30 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd20:	f107 0318 	add.w	r3, r7, #24
 800cd24:	4618      	mov	r0, r3
 800cd26:	f000 fbfb 	bl	800d520 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cd2a:	69bb      	ldr	r3, [r7, #24]
 800cd2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd2e:	e3d4      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd30:	2300      	movs	r3, #0
 800cd32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd34:	e3d1      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd36:	4b28      	ldr	r3, [pc, #160]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd42:	d107      	bne.n	800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd44:	f107 030c 	add.w	r3, r7, #12
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f000 fd3d 	bl	800d7c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd52:	e3c2      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd54:	2300      	movs	r3, #0
 800cd56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd58:	e3bf      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cd5a:	4b1f      	ldr	r3, [pc, #124]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cd62:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cd64:	4b1c      	ldr	r3, [pc, #112]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f003 0304 	and.w	r3, r3, #4
 800cd6c:	2b04      	cmp	r3, #4
 800cd6e:	d10c      	bne.n	800cd8a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800cd70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d109      	bne.n	800cd8a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd76:	4b18      	ldr	r3, [pc, #96]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	08db      	lsrs	r3, r3, #3
 800cd7c:	f003 0303 	and.w	r3, r3, #3
 800cd80:	4a16      	ldr	r2, [pc, #88]	; (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800cd82:	fa22 f303 	lsr.w	r3, r2, r3
 800cd86:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd88:	e01e      	b.n	800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cd8a:	4b13      	ldr	r3, [pc, #76]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd96:	d106      	bne.n	800cda6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800cd98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd9e:	d102      	bne.n	800cda6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cda0:	4b0f      	ldr	r3, [pc, #60]	; (800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800cda2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cda4:	e010      	b.n	800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cda6:	4b0c      	ldr	r3, [pc, #48]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cdb2:	d106      	bne.n	800cdc2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800cdb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cdba:	d102      	bne.n	800cdc2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cdbc:	4b09      	ldr	r3, [pc, #36]	; (800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cdbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdc0:	e002      	b.n	800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cdc6:	e388      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cdc8:	e387      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cdca:	4b07      	ldr	r3, [pc, #28]	; (800cde8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cdcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdce:	e384      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdd4:	e381      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cdd6:	bf00      	nop
 800cdd8:	58024400 	.word	0x58024400
 800cddc:	03d09000 	.word	0x03d09000
 800cde0:	003d0900 	.word	0x003d0900
 800cde4:	02faf080 	.word	0x02faf080
 800cde8:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800cdec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdf0:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800cdf4:	430b      	orrs	r3, r1
 800cdf6:	f040 809c 	bne.w	800cf32 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800cdfa:	4b9e      	ldr	r3, [pc, #632]	; (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cdfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdfe:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ce02:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ce04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ce0a:	d054      	beq.n	800ceb6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800ce0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ce12:	f200 808b 	bhi.w	800cf2c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ce16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce18:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ce1c:	f000 8083 	beq.w	800cf26 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800ce20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce22:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ce26:	f200 8081 	bhi.w	800cf2c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ce2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce30:	d02f      	beq.n	800ce92 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800ce32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce38:	d878      	bhi.n	800cf2c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ce3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d004      	beq.n	800ce4a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800ce40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ce46:	d012      	beq.n	800ce6e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800ce48:	e070      	b.n	800cf2c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ce4a:	4b8a      	ldr	r3, [pc, #552]	; (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce56:	d107      	bne.n	800ce68 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f000 fe07 	bl	800da70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce66:	e338      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce6c:	e335      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce6e:	4b81      	ldr	r3, [pc, #516]	; (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce7a:	d107      	bne.n	800ce8c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce7c:	f107 0318 	add.w	r3, r7, #24
 800ce80:	4618      	mov	r0, r3
 800ce82:	f000 fb4d 	bl	800d520 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ce86:	69bb      	ldr	r3, [r7, #24]
 800ce88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce8a:	e326      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce90:	e323      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce92:	4b78      	ldr	r3, [pc, #480]	; (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce9e:	d107      	bne.n	800ceb0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cea0:	f107 030c 	add.w	r3, r7, #12
 800cea4:	4618      	mov	r0, r3
 800cea6:	f000 fc8f 	bl	800d7c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ceae:	e314      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceb4:	e311      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ceb6:	4b6f      	ldr	r3, [pc, #444]	; (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ceb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ceba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cebe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cec0:	4b6c      	ldr	r3, [pc, #432]	; (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	f003 0304 	and.w	r3, r3, #4
 800cec8:	2b04      	cmp	r3, #4
 800ceca:	d10c      	bne.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800cecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d109      	bne.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ced2:	4b68      	ldr	r3, [pc, #416]	; (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	08db      	lsrs	r3, r3, #3
 800ced8:	f003 0303 	and.w	r3, r3, #3
 800cedc:	4a66      	ldr	r2, [pc, #408]	; (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800cede:	fa22 f303 	lsr.w	r3, r2, r3
 800cee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cee4:	e01e      	b.n	800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cee6:	4b63      	ldr	r3, [pc, #396]	; (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ceee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cef2:	d106      	bne.n	800cf02 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800cef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cef6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cefa:	d102      	bne.n	800cf02 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cefc:	4b5f      	ldr	r3, [pc, #380]	; (800d07c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800cefe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf00:	e010      	b.n	800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cf02:	4b5c      	ldr	r3, [pc, #368]	; (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf0e:	d106      	bne.n	800cf1e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800cf10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf16:	d102      	bne.n	800cf1e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cf18:	4b59      	ldr	r3, [pc, #356]	; (800d080 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cf1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf1c:	e002      	b.n	800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cf22:	e2da      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cf24:	e2d9      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cf26:	4b57      	ldr	r3, [pc, #348]	; (800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cf28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf2a:	e2d6      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf30:	e2d3      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800cf32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf36:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800cf3a:	430b      	orrs	r3, r1
 800cf3c:	f040 80a7 	bne.w	800d08e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800cf40:	4b4c      	ldr	r3, [pc, #304]	; (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf44:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800cf48:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cf4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cf50:	d055      	beq.n	800cffe <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800cf52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cf58:	f200 8096 	bhi.w	800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cf5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cf62:	f000 8084 	beq.w	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800cf66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cf6c:	f200 808c 	bhi.w	800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cf70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf76:	d030      	beq.n	800cfda <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800cf78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf7e:	f200 8083 	bhi.w	800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cf82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d004      	beq.n	800cf92 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800cf88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf8e:	d012      	beq.n	800cfb6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800cf90:	e07a      	b.n	800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cf92:	4b38      	ldr	r3, [pc, #224]	; (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf9e:	d107      	bne.n	800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cfa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f000 fd63 	bl	800da70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfae:	e294      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfb4:	e291      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cfb6:	4b2f      	ldr	r3, [pc, #188]	; (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cfbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cfc2:	d107      	bne.n	800cfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfc4:	f107 0318 	add.w	r3, r7, #24
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f000 faa9 	bl	800d520 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cfce:	69bb      	ldr	r3, [r7, #24]
 800cfd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfd2:	e282      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfd8:	e27f      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cfda:	4b26      	ldr	r3, [pc, #152]	; (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cfe2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cfe6:	d107      	bne.n	800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cfe8:	f107 030c 	add.w	r3, r7, #12
 800cfec:	4618      	mov	r0, r3
 800cfee:	f000 fbeb 	bl	800d7c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cff6:	e270      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cff8:	2300      	movs	r3, #0
 800cffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cffc:	e26d      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cffe:	4b1d      	ldr	r3, [pc, #116]	; (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d002:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d006:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d008:	4b1a      	ldr	r3, [pc, #104]	; (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f003 0304 	and.w	r3, r3, #4
 800d010:	2b04      	cmp	r3, #4
 800d012:	d10c      	bne.n	800d02e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800d014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d016:	2b00      	cmp	r3, #0
 800d018:	d109      	bne.n	800d02e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d01a:	4b16      	ldr	r3, [pc, #88]	; (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	08db      	lsrs	r3, r3, #3
 800d020:	f003 0303 	and.w	r3, r3, #3
 800d024:	4a14      	ldr	r2, [pc, #80]	; (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800d026:	fa22 f303 	lsr.w	r3, r2, r3
 800d02a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d02c:	e01e      	b.n	800d06c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d02e:	4b11      	ldr	r3, [pc, #68]	; (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d03a:	d106      	bne.n	800d04a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800d03c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d03e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d042:	d102      	bne.n	800d04a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d044:	4b0d      	ldr	r3, [pc, #52]	; (800d07c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d046:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d048:	e010      	b.n	800d06c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d04a:	4b0a      	ldr	r3, [pc, #40]	; (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d052:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d056:	d106      	bne.n	800d066 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800d058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d05a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d05e:	d102      	bne.n	800d066 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d060:	4b07      	ldr	r3, [pc, #28]	; (800d080 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d062:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d064:	e002      	b.n	800d06c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d066:	2300      	movs	r3, #0
 800d068:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d06a:	e236      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d06c:	e235      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d06e:	4b05      	ldr	r3, [pc, #20]	; (800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d070:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d072:	e232      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d074:	58024400 	.word	0x58024400
 800d078:	03d09000 	.word	0x03d09000
 800d07c:	003d0900 	.word	0x003d0900
 800d080:	02faf080 	.word	0x02faf080
 800d084:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800d088:	2300      	movs	r3, #0
 800d08a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d08c:	e225      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800d08e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d092:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800d096:	430b      	orrs	r3, r1
 800d098:	f040 8085 	bne.w	800d1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800d09c:	4b9c      	ldr	r3, [pc, #624]	; (800d310 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d09e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0a0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800d0a4:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800d0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d0ac:	d06b      	beq.n	800d186 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800d0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d0b4:	d874      	bhi.n	800d1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d0bc:	d056      	beq.n	800d16c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800d0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d0c4:	d86c      	bhi.n	800d1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d0cc:	d03b      	beq.n	800d146 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800d0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d0d4:	d864      	bhi.n	800d1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d0dc:	d021      	beq.n	800d122 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800d0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d0e4:	d85c      	bhi.n	800d1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d004      	beq.n	800d0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800d0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0f2:	d004      	beq.n	800d0fe <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800d0f4:	e054      	b.n	800d1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800d0f6:	f7fe fb5f 	bl	800b7b8 <HAL_RCC_GetPCLK1Freq>
 800d0fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d0fc:	e1ed      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d0fe:	4b84      	ldr	r3, [pc, #528]	; (800d310 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d106:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d10a:	d107      	bne.n	800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d10c:	f107 0318 	add.w	r3, r7, #24
 800d110:	4618      	mov	r0, r3
 800d112:	f000 fa05 	bl	800d520 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d116:	69fb      	ldr	r3, [r7, #28]
 800d118:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d11a:	e1de      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d11c:	2300      	movs	r3, #0
 800d11e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d120:	e1db      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d122:	4b7b      	ldr	r3, [pc, #492]	; (800d310 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d12a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d12e:	d107      	bne.n	800d140 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d130:	f107 030c 	add.w	r3, r7, #12
 800d134:	4618      	mov	r0, r3
 800d136:	f000 fb47 	bl	800d7c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d13e:	e1cc      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d140:	2300      	movs	r3, #0
 800d142:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d144:	e1c9      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d146:	4b72      	ldr	r3, [pc, #456]	; (800d310 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f003 0304 	and.w	r3, r3, #4
 800d14e:	2b04      	cmp	r3, #4
 800d150:	d109      	bne.n	800d166 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d152:	4b6f      	ldr	r3, [pc, #444]	; (800d310 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	08db      	lsrs	r3, r3, #3
 800d158:	f003 0303 	and.w	r3, r3, #3
 800d15c:	4a6d      	ldr	r2, [pc, #436]	; (800d314 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d15e:	fa22 f303 	lsr.w	r3, r2, r3
 800d162:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d164:	e1b9      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d166:	2300      	movs	r3, #0
 800d168:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d16a:	e1b6      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d16c:	4b68      	ldr	r3, [pc, #416]	; (800d310 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d178:	d102      	bne.n	800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800d17a:	4b67      	ldr	r3, [pc, #412]	; (800d318 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d17c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d17e:	e1ac      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d180:	2300      	movs	r3, #0
 800d182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d184:	e1a9      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d186:	4b62      	ldr	r3, [pc, #392]	; (800d310 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d18e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d192:	d102      	bne.n	800d19a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800d194:	4b61      	ldr	r3, [pc, #388]	; (800d31c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d196:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d198:	e19f      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d19a:	2300      	movs	r3, #0
 800d19c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d19e:	e19c      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1a4:	e199      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d1a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1aa:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800d1ae:	430b      	orrs	r3, r1
 800d1b0:	d173      	bne.n	800d29a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800d1b2:	4b57      	ldr	r3, [pc, #348]	; (800d310 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d1b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d1ba:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d1c2:	d02f      	beq.n	800d224 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800d1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d1ca:	d863      	bhi.n	800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800d1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d004      	beq.n	800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800d1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1d8:	d012      	beq.n	800d200 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800d1da:	e05b      	b.n	800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d1dc:	4b4c      	ldr	r3, [pc, #304]	; (800d310 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d1e8:	d107      	bne.n	800d1fa <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1ea:	f107 0318 	add.w	r3, r7, #24
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f000 f996 	bl	800d520 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d1f4:	69bb      	ldr	r3, [r7, #24]
 800d1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1f8:	e16f      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1fe:	e16c      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d200:	4b43      	ldr	r3, [pc, #268]	; (800d310 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d208:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d20c:	d107      	bne.n	800d21e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d20e:	f107 030c 	add.w	r3, r7, #12
 800d212:	4618      	mov	r0, r3
 800d214:	f000 fad8 	bl	800d7c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d21c:	e15d      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d21e:	2300      	movs	r3, #0
 800d220:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d222:	e15a      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d224:	4b3a      	ldr	r3, [pc, #232]	; (800d310 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d228:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d22c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d22e:	4b38      	ldr	r3, [pc, #224]	; (800d310 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f003 0304 	and.w	r3, r3, #4
 800d236:	2b04      	cmp	r3, #4
 800d238:	d10c      	bne.n	800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800d23a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d109      	bne.n	800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d240:	4b33      	ldr	r3, [pc, #204]	; (800d310 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	08db      	lsrs	r3, r3, #3
 800d246:	f003 0303 	and.w	r3, r3, #3
 800d24a:	4a32      	ldr	r2, [pc, #200]	; (800d314 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d24c:	fa22 f303 	lsr.w	r3, r2, r3
 800d250:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d252:	e01e      	b.n	800d292 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d254:	4b2e      	ldr	r3, [pc, #184]	; (800d310 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d25c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d260:	d106      	bne.n	800d270 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800d262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d264:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d268:	d102      	bne.n	800d270 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d26a:	4b2b      	ldr	r3, [pc, #172]	; (800d318 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d26c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d26e:	e010      	b.n	800d292 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d270:	4b27      	ldr	r3, [pc, #156]	; (800d310 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d278:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d27c:	d106      	bne.n	800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800d27e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d280:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d284:	d102      	bne.n	800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d286:	4b25      	ldr	r3, [pc, #148]	; (800d31c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d288:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d28a:	e002      	b.n	800d292 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d28c:	2300      	movs	r3, #0
 800d28e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d290:	e123      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d292:	e122      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d294:	2300      	movs	r3, #0
 800d296:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d298:	e11f      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d29a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d29e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800d2a2:	430b      	orrs	r3, r1
 800d2a4:	d13c      	bne.n	800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d2a6:	4b1a      	ldr	r3, [pc, #104]	; (800d310 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d2a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d2ae:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d004      	beq.n	800d2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800d2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2bc:	d012      	beq.n	800d2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800d2be:	e023      	b.n	800d308 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d2c0:	4b13      	ldr	r3, [pc, #76]	; (800d310 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d2cc:	d107      	bne.n	800d2de <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d2ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f000 fbcc 	bl	800da70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2dc:	e0fd      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2e2:	e0fa      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d2e4:	4b0a      	ldr	r3, [pc, #40]	; (800d310 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d2f0:	d107      	bne.n	800d302 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2f2:	f107 0318 	add.w	r3, r7, #24
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f000 f912 	bl	800d520 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d2fc:	6a3b      	ldr	r3, [r7, #32]
 800d2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d300:	e0eb      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d302:	2300      	movs	r3, #0
 800d304:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d306:	e0e8      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d308:	2300      	movs	r3, #0
 800d30a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d30c:	e0e5      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d30e:	bf00      	nop
 800d310:	58024400 	.word	0x58024400
 800d314:	03d09000 	.word	0x03d09000
 800d318:	003d0900 	.word	0x003d0900
 800d31c:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d320:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d324:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800d328:	430b      	orrs	r3, r1
 800d32a:	f040 8085 	bne.w	800d438 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d32e:	4b6d      	ldr	r3, [pc, #436]	; (800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d332:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800d336:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d33a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d33e:	d06b      	beq.n	800d418 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800d340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d342:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d346:	d874      	bhi.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d34a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d34e:	d056      	beq.n	800d3fe <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800d350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d356:	d86c      	bhi.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d35a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d35e:	d03b      	beq.n	800d3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800d360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d362:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d366:	d864      	bhi.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d36a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d36e:	d021      	beq.n	800d3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800d370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d372:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d376:	d85c      	bhi.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d004      	beq.n	800d388 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800d37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d380:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d384:	d004      	beq.n	800d390 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800d386:	e054      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d388:	f000 f8b4 	bl	800d4f4 <HAL_RCCEx_GetD3PCLK1Freq>
 800d38c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d38e:	e0a4      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d390:	4b54      	ldr	r3, [pc, #336]	; (800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d398:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d39c:	d107      	bne.n	800d3ae <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d39e:	f107 0318 	add.w	r3, r7, #24
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f000 f8bc 	bl	800d520 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d3a8:	69fb      	ldr	r3, [r7, #28]
 800d3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3ac:	e095      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3b2:	e092      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d3b4:	4b4b      	ldr	r3, [pc, #300]	; (800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d3bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d3c0:	d107      	bne.n	800d3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d3c2:	f107 030c 	add.w	r3, r7, #12
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f000 f9fe 	bl	800d7c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3d0:	e083      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3d6:	e080      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d3d8:	4b42      	ldr	r3, [pc, #264]	; (800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f003 0304 	and.w	r3, r3, #4
 800d3e0:	2b04      	cmp	r3, #4
 800d3e2:	d109      	bne.n	800d3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d3e4:	4b3f      	ldr	r3, [pc, #252]	; (800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	08db      	lsrs	r3, r3, #3
 800d3ea:	f003 0303 	and.w	r3, r3, #3
 800d3ee:	4a3e      	ldr	r2, [pc, #248]	; (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800d3f0:	fa22 f303 	lsr.w	r3, r2, r3
 800d3f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3f6:	e070      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3fc:	e06d      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d3fe:	4b39      	ldr	r3, [pc, #228]	; (800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d40a:	d102      	bne.n	800d412 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800d40c:	4b37      	ldr	r3, [pc, #220]	; (800d4ec <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d40e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d410:	e063      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d412:	2300      	movs	r3, #0
 800d414:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d416:	e060      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d418:	4b32      	ldr	r3, [pc, #200]	; (800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d420:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d424:	d102      	bne.n	800d42c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800d426:	4b32      	ldr	r3, [pc, #200]	; (800d4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d428:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d42a:	e056      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d42c:	2300      	movs	r3, #0
 800d42e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d430:	e053      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d432:	2300      	movs	r3, #0
 800d434:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d436:	e050      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d43c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800d440:	430b      	orrs	r3, r1
 800d442:	d148      	bne.n	800d4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d444:	4b27      	ldr	r3, [pc, #156]	; (800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d448:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d44c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d454:	d02a      	beq.n	800d4ac <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800d456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d45c:	d838      	bhi.n	800d4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800d45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d460:	2b00      	cmp	r3, #0
 800d462:	d004      	beq.n	800d46e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800d464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d466:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d46a:	d00d      	beq.n	800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800d46c:	e030      	b.n	800d4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d46e:	4b1d      	ldr	r3, [pc, #116]	; (800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d476:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d47a:	d102      	bne.n	800d482 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800d47c:	4b1c      	ldr	r3, [pc, #112]	; (800d4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d47e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d480:	e02b      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d482:	2300      	movs	r3, #0
 800d484:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d486:	e028      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d488:	4b16      	ldr	r3, [pc, #88]	; (800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d490:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d494:	d107      	bne.n	800d4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d49a:	4618      	mov	r0, r3
 800d49c:	f000 fae8 	bl	800da70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d4a4:	e019      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d4aa:	e016      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d4ac:	4b0d      	ldr	r3, [pc, #52]	; (800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d4b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d4b8:	d107      	bne.n	800d4ca <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d4ba:	f107 0318 	add.w	r3, r7, #24
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f000 f82e 	bl	800d520 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d4c4:	69fb      	ldr	r3, [r7, #28]
 800d4c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d4c8:	e007      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d4ce:	e004      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d4d4:	e001      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800d4da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3740      	adds	r7, #64	; 0x40
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}
 800d4e4:	58024400 	.word	0x58024400
 800d4e8:	03d09000 	.word	0x03d09000
 800d4ec:	003d0900 	.word	0x003d0900
 800d4f0:	02faf080 	.word	0x02faf080

0800d4f4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d4f8:	f7fe f92e 	bl	800b758 <HAL_RCC_GetHCLKFreq>
 800d4fc:	4602      	mov	r2, r0
 800d4fe:	4b06      	ldr	r3, [pc, #24]	; (800d518 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d500:	6a1b      	ldr	r3, [r3, #32]
 800d502:	091b      	lsrs	r3, r3, #4
 800d504:	f003 0307 	and.w	r3, r3, #7
 800d508:	4904      	ldr	r1, [pc, #16]	; (800d51c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d50a:	5ccb      	ldrb	r3, [r1, r3]
 800d50c:	f003 031f 	and.w	r3, r3, #31
 800d510:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d514:	4618      	mov	r0, r3
 800d516:	bd80      	pop	{r7, pc}
 800d518:	58024400 	.word	0x58024400
 800d51c:	08020040 	.word	0x08020040

0800d520 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d520:	b480      	push	{r7}
 800d522:	b089      	sub	sp, #36	; 0x24
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d528:	4ba1      	ldr	r3, [pc, #644]	; (800d7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d52a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d52c:	f003 0303 	and.w	r3, r3, #3
 800d530:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d532:	4b9f      	ldr	r3, [pc, #636]	; (800d7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d536:	0b1b      	lsrs	r3, r3, #12
 800d538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d53c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d53e:	4b9c      	ldr	r3, [pc, #624]	; (800d7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d542:	091b      	lsrs	r3, r3, #4
 800d544:	f003 0301 	and.w	r3, r3, #1
 800d548:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d54a:	4b99      	ldr	r3, [pc, #612]	; (800d7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d54c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d54e:	08db      	lsrs	r3, r3, #3
 800d550:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d554:	693a      	ldr	r2, [r7, #16]
 800d556:	fb02 f303 	mul.w	r3, r2, r3
 800d55a:	ee07 3a90 	vmov	s15, r3
 800d55e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d562:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	f000 8111 	beq.w	800d790 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d56e:	69bb      	ldr	r3, [r7, #24]
 800d570:	2b02      	cmp	r3, #2
 800d572:	f000 8083 	beq.w	800d67c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d576:	69bb      	ldr	r3, [r7, #24]
 800d578:	2b02      	cmp	r3, #2
 800d57a:	f200 80a1 	bhi.w	800d6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d57e:	69bb      	ldr	r3, [r7, #24]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d003      	beq.n	800d58c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d584:	69bb      	ldr	r3, [r7, #24]
 800d586:	2b01      	cmp	r3, #1
 800d588:	d056      	beq.n	800d638 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d58a:	e099      	b.n	800d6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d58c:	4b88      	ldr	r3, [pc, #544]	; (800d7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	f003 0320 	and.w	r3, r3, #32
 800d594:	2b00      	cmp	r3, #0
 800d596:	d02d      	beq.n	800d5f4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d598:	4b85      	ldr	r3, [pc, #532]	; (800d7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	08db      	lsrs	r3, r3, #3
 800d59e:	f003 0303 	and.w	r3, r3, #3
 800d5a2:	4a84      	ldr	r2, [pc, #528]	; (800d7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d5a4:	fa22 f303 	lsr.w	r3, r2, r3
 800d5a8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	ee07 3a90 	vmov	s15, r3
 800d5b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	ee07 3a90 	vmov	s15, r3
 800d5ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5c2:	4b7b      	ldr	r3, [pc, #492]	; (800d7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5ca:	ee07 3a90 	vmov	s15, r3
 800d5ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d7b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d5da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d5f2:	e087      	b.n	800d704 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	ee07 3a90 	vmov	s15, r3
 800d5fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d7bc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d606:	4b6a      	ldr	r3, [pc, #424]	; (800d7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d60a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d60e:	ee07 3a90 	vmov	s15, r3
 800d612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d616:	ed97 6a03 	vldr	s12, [r7, #12]
 800d61a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d7b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d61e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d626:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d62a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d62e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d632:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d636:	e065      	b.n	800d704 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d638:	697b      	ldr	r3, [r7, #20]
 800d63a:	ee07 3a90 	vmov	s15, r3
 800d63e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d642:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d7c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d64a:	4b59      	ldr	r3, [pc, #356]	; (800d7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d64c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d64e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d652:	ee07 3a90 	vmov	s15, r3
 800d656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d65a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d65e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d7b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d66a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d66e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d672:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d676:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d67a:	e043      	b.n	800d704 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d67c:	697b      	ldr	r3, [r7, #20]
 800d67e:	ee07 3a90 	vmov	s15, r3
 800d682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d686:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d7c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d68a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d68e:	4b48      	ldr	r3, [pc, #288]	; (800d7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d696:	ee07 3a90 	vmov	s15, r3
 800d69a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d69e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d7b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d6a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6be:	e021      	b.n	800d704 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	ee07 3a90 	vmov	s15, r3
 800d6c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d7c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d6ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6d2:	4b37      	ldr	r3, [pc, #220]	; (800d7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6da:	ee07 3a90 	vmov	s15, r3
 800d6de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d7b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d6ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d702:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d704:	4b2a      	ldr	r3, [pc, #168]	; (800d7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d708:	0a5b      	lsrs	r3, r3, #9
 800d70a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d70e:	ee07 3a90 	vmov	s15, r3
 800d712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d716:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d71a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d71e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d722:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d72a:	ee17 2a90 	vmov	r2, s15
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d732:	4b1f      	ldr	r3, [pc, #124]	; (800d7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d736:	0c1b      	lsrs	r3, r3, #16
 800d738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d73c:	ee07 3a90 	vmov	s15, r3
 800d740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d744:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d748:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d74c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d750:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d758:	ee17 2a90 	vmov	r2, s15
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d760:	4b13      	ldr	r3, [pc, #76]	; (800d7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d764:	0e1b      	lsrs	r3, r3, #24
 800d766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d76a:	ee07 3a90 	vmov	s15, r3
 800d76e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d772:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d776:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d77a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d77e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d786:	ee17 2a90 	vmov	r2, s15
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d78e:	e008      	b.n	800d7a2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2200      	movs	r2, #0
 800d794:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2200      	movs	r2, #0
 800d79a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	609a      	str	r2, [r3, #8]
}
 800d7a2:	bf00      	nop
 800d7a4:	3724      	adds	r7, #36	; 0x24
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ac:	4770      	bx	lr
 800d7ae:	bf00      	nop
 800d7b0:	58024400 	.word	0x58024400
 800d7b4:	03d09000 	.word	0x03d09000
 800d7b8:	46000000 	.word	0x46000000
 800d7bc:	4c742400 	.word	0x4c742400
 800d7c0:	4a742400 	.word	0x4a742400
 800d7c4:	4c3ebc20 	.word	0x4c3ebc20

0800d7c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b089      	sub	sp, #36	; 0x24
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d7d0:	4ba1      	ldr	r3, [pc, #644]	; (800da58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7d4:	f003 0303 	and.w	r3, r3, #3
 800d7d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d7da:	4b9f      	ldr	r3, [pc, #636]	; (800da58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7de:	0d1b      	lsrs	r3, r3, #20
 800d7e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d7e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d7e6:	4b9c      	ldr	r3, [pc, #624]	; (800da58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ea:	0a1b      	lsrs	r3, r3, #8
 800d7ec:	f003 0301 	and.w	r3, r3, #1
 800d7f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d7f2:	4b99      	ldr	r3, [pc, #612]	; (800da58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7f6:	08db      	lsrs	r3, r3, #3
 800d7f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d7fc:	693a      	ldr	r2, [r7, #16]
 800d7fe:	fb02 f303 	mul.w	r3, r2, r3
 800d802:	ee07 3a90 	vmov	s15, r3
 800d806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d80a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	2b00      	cmp	r3, #0
 800d812:	f000 8111 	beq.w	800da38 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d816:	69bb      	ldr	r3, [r7, #24]
 800d818:	2b02      	cmp	r3, #2
 800d81a:	f000 8083 	beq.w	800d924 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d81e:	69bb      	ldr	r3, [r7, #24]
 800d820:	2b02      	cmp	r3, #2
 800d822:	f200 80a1 	bhi.w	800d968 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d826:	69bb      	ldr	r3, [r7, #24]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d003      	beq.n	800d834 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d82c:	69bb      	ldr	r3, [r7, #24]
 800d82e:	2b01      	cmp	r3, #1
 800d830:	d056      	beq.n	800d8e0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d832:	e099      	b.n	800d968 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d834:	4b88      	ldr	r3, [pc, #544]	; (800da58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f003 0320 	and.w	r3, r3, #32
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d02d      	beq.n	800d89c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d840:	4b85      	ldr	r3, [pc, #532]	; (800da58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	08db      	lsrs	r3, r3, #3
 800d846:	f003 0303 	and.w	r3, r3, #3
 800d84a:	4a84      	ldr	r2, [pc, #528]	; (800da5c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d84c:	fa22 f303 	lsr.w	r3, r2, r3
 800d850:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	ee07 3a90 	vmov	s15, r3
 800d858:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	ee07 3a90 	vmov	s15, r3
 800d862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d86a:	4b7b      	ldr	r3, [pc, #492]	; (800da58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d86c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d86e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d872:	ee07 3a90 	vmov	s15, r3
 800d876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d87a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d87e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800da60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d88a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d88e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d892:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d896:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d89a:	e087      	b.n	800d9ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	ee07 3a90 	vmov	s15, r3
 800d8a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800da64 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d8aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8ae:	4b6a      	ldr	r3, [pc, #424]	; (800da58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8b6:	ee07 3a90 	vmov	s15, r3
 800d8ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8be:	ed97 6a03 	vldr	s12, [r7, #12]
 800d8c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800da60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d8c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d8d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d8de:	e065      	b.n	800d9ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	ee07 3a90 	vmov	s15, r3
 800d8e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800da68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d8ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8f2:	4b59      	ldr	r3, [pc, #356]	; (800da58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8fa:	ee07 3a90 	vmov	s15, r3
 800d8fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d902:	ed97 6a03 	vldr	s12, [r7, #12]
 800d906:	eddf 5a56 	vldr	s11, [pc, #344]	; 800da60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d90a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d90e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d912:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d91a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d91e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d922:	e043      	b.n	800d9ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d924:	697b      	ldr	r3, [r7, #20]
 800d926:	ee07 3a90 	vmov	s15, r3
 800d92a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d92e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800da6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d936:	4b48      	ldr	r3, [pc, #288]	; (800da58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d93a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d93e:	ee07 3a90 	vmov	s15, r3
 800d942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d946:	ed97 6a03 	vldr	s12, [r7, #12]
 800d94a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800da60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d94e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d95a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d95e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d962:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d966:	e021      	b.n	800d9ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	ee07 3a90 	vmov	s15, r3
 800d96e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d972:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800da68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d97a:	4b37      	ldr	r3, [pc, #220]	; (800da58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d97c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d97e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d982:	ee07 3a90 	vmov	s15, r3
 800d986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d98a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d98e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800da60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d99a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d99e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d9aa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d9ac:	4b2a      	ldr	r3, [pc, #168]	; (800da58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d9ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9b0:	0a5b      	lsrs	r3, r3, #9
 800d9b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9b6:	ee07 3a90 	vmov	s15, r3
 800d9ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d9c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d9c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d9ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d9ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d9d2:	ee17 2a90 	vmov	r2, s15
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d9da:	4b1f      	ldr	r3, [pc, #124]	; (800da58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d9dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9de:	0c1b      	lsrs	r3, r3, #16
 800d9e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9e4:	ee07 3a90 	vmov	s15, r3
 800d9e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d9f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d9f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800d9f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d9fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da00:	ee17 2a90 	vmov	r2, s15
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800da08:	4b13      	ldr	r3, [pc, #76]	; (800da58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da0c:	0e1b      	lsrs	r3, r3, #24
 800da0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da12:	ee07 3a90 	vmov	s15, r3
 800da16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800da1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da22:	edd7 6a07 	vldr	s13, [r7, #28]
 800da26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da2e:	ee17 2a90 	vmov	r2, s15
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800da36:	e008      	b.n	800da4a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2200      	movs	r2, #0
 800da3c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2200      	movs	r2, #0
 800da42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2200      	movs	r2, #0
 800da48:	609a      	str	r2, [r3, #8]
}
 800da4a:	bf00      	nop
 800da4c:	3724      	adds	r7, #36	; 0x24
 800da4e:	46bd      	mov	sp, r7
 800da50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da54:	4770      	bx	lr
 800da56:	bf00      	nop
 800da58:	58024400 	.word	0x58024400
 800da5c:	03d09000 	.word	0x03d09000
 800da60:	46000000 	.word	0x46000000
 800da64:	4c742400 	.word	0x4c742400
 800da68:	4a742400 	.word	0x4a742400
 800da6c:	4c3ebc20 	.word	0x4c3ebc20

0800da70 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800da70:	b480      	push	{r7}
 800da72:	b089      	sub	sp, #36	; 0x24
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800da78:	4ba0      	ldr	r3, [pc, #640]	; (800dcfc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da7c:	f003 0303 	and.w	r3, r3, #3
 800da80:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800da82:	4b9e      	ldr	r3, [pc, #632]	; (800dcfc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da86:	091b      	lsrs	r3, r3, #4
 800da88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da8c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800da8e:	4b9b      	ldr	r3, [pc, #620]	; (800dcfc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da92:	f003 0301 	and.w	r3, r3, #1
 800da96:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800da98:	4b98      	ldr	r3, [pc, #608]	; (800dcfc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da9c:	08db      	lsrs	r3, r3, #3
 800da9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800daa2:	693a      	ldr	r2, [r7, #16]
 800daa4:	fb02 f303 	mul.w	r3, r2, r3
 800daa8:	ee07 3a90 	vmov	s15, r3
 800daac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dab0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	f000 8111 	beq.w	800dcde <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800dabc:	69bb      	ldr	r3, [r7, #24]
 800dabe:	2b02      	cmp	r3, #2
 800dac0:	f000 8083 	beq.w	800dbca <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800dac4:	69bb      	ldr	r3, [r7, #24]
 800dac6:	2b02      	cmp	r3, #2
 800dac8:	f200 80a1 	bhi.w	800dc0e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800dacc:	69bb      	ldr	r3, [r7, #24]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d003      	beq.n	800dada <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800dad2:	69bb      	ldr	r3, [r7, #24]
 800dad4:	2b01      	cmp	r3, #1
 800dad6:	d056      	beq.n	800db86 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800dad8:	e099      	b.n	800dc0e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dada:	4b88      	ldr	r3, [pc, #544]	; (800dcfc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	f003 0320 	and.w	r3, r3, #32
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d02d      	beq.n	800db42 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dae6:	4b85      	ldr	r3, [pc, #532]	; (800dcfc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	08db      	lsrs	r3, r3, #3
 800daec:	f003 0303 	and.w	r3, r3, #3
 800daf0:	4a83      	ldr	r2, [pc, #524]	; (800dd00 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800daf2:	fa22 f303 	lsr.w	r3, r2, r3
 800daf6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800daf8:	68bb      	ldr	r3, [r7, #8]
 800dafa:	ee07 3a90 	vmov	s15, r3
 800dafe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	ee07 3a90 	vmov	s15, r3
 800db08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db10:	4b7a      	ldr	r3, [pc, #488]	; (800dcfc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db18:	ee07 3a90 	vmov	s15, r3
 800db1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db20:	ed97 6a03 	vldr	s12, [r7, #12]
 800db24:	eddf 5a77 	vldr	s11, [pc, #476]	; 800dd04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800db28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800db34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db38:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db3c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800db40:	e087      	b.n	800dc52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	ee07 3a90 	vmov	s15, r3
 800db48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db4c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800dd08 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800db50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db54:	4b69      	ldr	r3, [pc, #420]	; (800dcfc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db5c:	ee07 3a90 	vmov	s15, r3
 800db60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db64:	ed97 6a03 	vldr	s12, [r7, #12]
 800db68:	eddf 5a66 	vldr	s11, [pc, #408]	; 800dd04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800db6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800db78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db84:	e065      	b.n	800dc52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	ee07 3a90 	vmov	s15, r3
 800db8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db90:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800dd0c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800db94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db98:	4b58      	ldr	r3, [pc, #352]	; (800dcfc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dba0:	ee07 3a90 	vmov	s15, r3
 800dba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dba8:	ed97 6a03 	vldr	s12, [r7, #12]
 800dbac:	eddf 5a55 	vldr	s11, [pc, #340]	; 800dd04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dbb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dbb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dbb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dbbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dbc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dbc8:	e043      	b.n	800dc52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	ee07 3a90 	vmov	s15, r3
 800dbd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbd4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800dd10 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800dbd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dbdc:	4b47      	ldr	r3, [pc, #284]	; (800dcfc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dbde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbe4:	ee07 3a90 	vmov	s15, r3
 800dbe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dbec:	ed97 6a03 	vldr	s12, [r7, #12]
 800dbf0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800dd04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dbf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dbf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dbfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dc0c:	e021      	b.n	800dc52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	ee07 3a90 	vmov	s15, r3
 800dc14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc18:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800dd08 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800dc1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc20:	4b36      	ldr	r3, [pc, #216]	; (800dcfc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc28:	ee07 3a90 	vmov	s15, r3
 800dc2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc30:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc34:	eddf 5a33 	vldr	s11, [pc, #204]	; 800dd04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dc38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dc50:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800dc52:	4b2a      	ldr	r3, [pc, #168]	; (800dcfc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc56:	0a5b      	lsrs	r3, r3, #9
 800dc58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc5c:	ee07 3a90 	vmov	s15, r3
 800dc60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dc68:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dc6c:	edd7 6a07 	vldr	s13, [r7, #28]
 800dc70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dc74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc78:	ee17 2a90 	vmov	r2, s15
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800dc80:	4b1e      	ldr	r3, [pc, #120]	; (800dcfc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc84:	0c1b      	lsrs	r3, r3, #16
 800dc86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc8a:	ee07 3a90 	vmov	s15, r3
 800dc8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dc96:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dc9a:	edd7 6a07 	vldr	s13, [r7, #28]
 800dc9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dca6:	ee17 2a90 	vmov	r2, s15
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800dcae:	4b13      	ldr	r3, [pc, #76]	; (800dcfc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dcb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcb2:	0e1b      	lsrs	r3, r3, #24
 800dcb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcb8:	ee07 3a90 	vmov	s15, r3
 800dcbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dcc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dcc8:	edd7 6a07 	vldr	s13, [r7, #28]
 800dccc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dcd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dcd4:	ee17 2a90 	vmov	r2, s15
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800dcdc:	e008      	b.n	800dcf0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2200      	movs	r2, #0
 800dce2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2200      	movs	r2, #0
 800dce8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2200      	movs	r2, #0
 800dcee:	609a      	str	r2, [r3, #8]
}
 800dcf0:	bf00      	nop
 800dcf2:	3724      	adds	r7, #36	; 0x24
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfa:	4770      	bx	lr
 800dcfc:	58024400 	.word	0x58024400
 800dd00:	03d09000 	.word	0x03d09000
 800dd04:	46000000 	.word	0x46000000
 800dd08:	4c742400 	.word	0x4c742400
 800dd0c:	4a742400 	.word	0x4a742400
 800dd10:	4c3ebc20 	.word	0x4c3ebc20

0800dd14 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b084      	sub	sp, #16
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dd22:	4b53      	ldr	r3, [pc, #332]	; (800de70 <RCCEx_PLL2_Config+0x15c>)
 800dd24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd26:	f003 0303 	and.w	r3, r3, #3
 800dd2a:	2b03      	cmp	r3, #3
 800dd2c:	d101      	bne.n	800dd32 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800dd2e:	2301      	movs	r3, #1
 800dd30:	e099      	b.n	800de66 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800dd32:	4b4f      	ldr	r3, [pc, #316]	; (800de70 <RCCEx_PLL2_Config+0x15c>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	4a4e      	ldr	r2, [pc, #312]	; (800de70 <RCCEx_PLL2_Config+0x15c>)
 800dd38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800dd3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd3e:	f7f6 fa2f 	bl	80041a0 <HAL_GetTick>
 800dd42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dd44:	e008      	b.n	800dd58 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dd46:	f7f6 fa2b 	bl	80041a0 <HAL_GetTick>
 800dd4a:	4602      	mov	r2, r0
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	1ad3      	subs	r3, r2, r3
 800dd50:	2b02      	cmp	r3, #2
 800dd52:	d901      	bls.n	800dd58 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dd54:	2303      	movs	r3, #3
 800dd56:	e086      	b.n	800de66 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dd58:	4b45      	ldr	r3, [pc, #276]	; (800de70 <RCCEx_PLL2_Config+0x15c>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d1f0      	bne.n	800dd46 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800dd64:	4b42      	ldr	r3, [pc, #264]	; (800de70 <RCCEx_PLL2_Config+0x15c>)
 800dd66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd68:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	031b      	lsls	r3, r3, #12
 800dd72:	493f      	ldr	r1, [pc, #252]	; (800de70 <RCCEx_PLL2_Config+0x15c>)
 800dd74:	4313      	orrs	r3, r2
 800dd76:	628b      	str	r3, [r1, #40]	; 0x28
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	685b      	ldr	r3, [r3, #4]
 800dd7c:	3b01      	subs	r3, #1
 800dd7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	689b      	ldr	r3, [r3, #8]
 800dd86:	3b01      	subs	r3, #1
 800dd88:	025b      	lsls	r3, r3, #9
 800dd8a:	b29b      	uxth	r3, r3
 800dd8c:	431a      	orrs	r2, r3
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	68db      	ldr	r3, [r3, #12]
 800dd92:	3b01      	subs	r3, #1
 800dd94:	041b      	lsls	r3, r3, #16
 800dd96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dd9a:	431a      	orrs	r2, r3
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	691b      	ldr	r3, [r3, #16]
 800dda0:	3b01      	subs	r3, #1
 800dda2:	061b      	lsls	r3, r3, #24
 800dda4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dda8:	4931      	ldr	r1, [pc, #196]	; (800de70 <RCCEx_PLL2_Config+0x15c>)
 800ddaa:	4313      	orrs	r3, r2
 800ddac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ddae:	4b30      	ldr	r3, [pc, #192]	; (800de70 <RCCEx_PLL2_Config+0x15c>)
 800ddb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddb2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	695b      	ldr	r3, [r3, #20]
 800ddba:	492d      	ldr	r1, [pc, #180]	; (800de70 <RCCEx_PLL2_Config+0x15c>)
 800ddbc:	4313      	orrs	r3, r2
 800ddbe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ddc0:	4b2b      	ldr	r3, [pc, #172]	; (800de70 <RCCEx_PLL2_Config+0x15c>)
 800ddc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddc4:	f023 0220 	bic.w	r2, r3, #32
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	699b      	ldr	r3, [r3, #24]
 800ddcc:	4928      	ldr	r1, [pc, #160]	; (800de70 <RCCEx_PLL2_Config+0x15c>)
 800ddce:	4313      	orrs	r3, r2
 800ddd0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ddd2:	4b27      	ldr	r3, [pc, #156]	; (800de70 <RCCEx_PLL2_Config+0x15c>)
 800ddd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddd6:	4a26      	ldr	r2, [pc, #152]	; (800de70 <RCCEx_PLL2_Config+0x15c>)
 800ddd8:	f023 0310 	bic.w	r3, r3, #16
 800dddc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ddde:	4b24      	ldr	r3, [pc, #144]	; (800de70 <RCCEx_PLL2_Config+0x15c>)
 800dde0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dde2:	4b24      	ldr	r3, [pc, #144]	; (800de74 <RCCEx_PLL2_Config+0x160>)
 800dde4:	4013      	ands	r3, r2
 800dde6:	687a      	ldr	r2, [r7, #4]
 800dde8:	69d2      	ldr	r2, [r2, #28]
 800ddea:	00d2      	lsls	r2, r2, #3
 800ddec:	4920      	ldr	r1, [pc, #128]	; (800de70 <RCCEx_PLL2_Config+0x15c>)
 800ddee:	4313      	orrs	r3, r2
 800ddf0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ddf2:	4b1f      	ldr	r3, [pc, #124]	; (800de70 <RCCEx_PLL2_Config+0x15c>)
 800ddf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddf6:	4a1e      	ldr	r2, [pc, #120]	; (800de70 <RCCEx_PLL2_Config+0x15c>)
 800ddf8:	f043 0310 	orr.w	r3, r3, #16
 800ddfc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d106      	bne.n	800de12 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800de04:	4b1a      	ldr	r3, [pc, #104]	; (800de70 <RCCEx_PLL2_Config+0x15c>)
 800de06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de08:	4a19      	ldr	r2, [pc, #100]	; (800de70 <RCCEx_PLL2_Config+0x15c>)
 800de0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800de0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800de10:	e00f      	b.n	800de32 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	2b01      	cmp	r3, #1
 800de16:	d106      	bne.n	800de26 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800de18:	4b15      	ldr	r3, [pc, #84]	; (800de70 <RCCEx_PLL2_Config+0x15c>)
 800de1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de1c:	4a14      	ldr	r2, [pc, #80]	; (800de70 <RCCEx_PLL2_Config+0x15c>)
 800de1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800de22:	62d3      	str	r3, [r2, #44]	; 0x2c
 800de24:	e005      	b.n	800de32 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800de26:	4b12      	ldr	r3, [pc, #72]	; (800de70 <RCCEx_PLL2_Config+0x15c>)
 800de28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de2a:	4a11      	ldr	r2, [pc, #68]	; (800de70 <RCCEx_PLL2_Config+0x15c>)
 800de2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800de30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800de32:	4b0f      	ldr	r3, [pc, #60]	; (800de70 <RCCEx_PLL2_Config+0x15c>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	4a0e      	ldr	r2, [pc, #56]	; (800de70 <RCCEx_PLL2_Config+0x15c>)
 800de38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800de3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de3e:	f7f6 f9af 	bl	80041a0 <HAL_GetTick>
 800de42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800de44:	e008      	b.n	800de58 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800de46:	f7f6 f9ab 	bl	80041a0 <HAL_GetTick>
 800de4a:	4602      	mov	r2, r0
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	1ad3      	subs	r3, r2, r3
 800de50:	2b02      	cmp	r3, #2
 800de52:	d901      	bls.n	800de58 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800de54:	2303      	movs	r3, #3
 800de56:	e006      	b.n	800de66 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800de58:	4b05      	ldr	r3, [pc, #20]	; (800de70 <RCCEx_PLL2_Config+0x15c>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800de60:	2b00      	cmp	r3, #0
 800de62:	d0f0      	beq.n	800de46 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800de64:	7bfb      	ldrb	r3, [r7, #15]
}
 800de66:	4618      	mov	r0, r3
 800de68:	3710      	adds	r7, #16
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
 800de6e:	bf00      	nop
 800de70:	58024400 	.word	0x58024400
 800de74:	ffff0007 	.word	0xffff0007

0800de78 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b084      	sub	sp, #16
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
 800de80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800de82:	2300      	movs	r3, #0
 800de84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800de86:	4b53      	ldr	r3, [pc, #332]	; (800dfd4 <RCCEx_PLL3_Config+0x15c>)
 800de88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de8a:	f003 0303 	and.w	r3, r3, #3
 800de8e:	2b03      	cmp	r3, #3
 800de90:	d101      	bne.n	800de96 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800de92:	2301      	movs	r3, #1
 800de94:	e099      	b.n	800dfca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800de96:	4b4f      	ldr	r3, [pc, #316]	; (800dfd4 <RCCEx_PLL3_Config+0x15c>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	4a4e      	ldr	r2, [pc, #312]	; (800dfd4 <RCCEx_PLL3_Config+0x15c>)
 800de9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dea0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dea2:	f7f6 f97d 	bl	80041a0 <HAL_GetTick>
 800dea6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dea8:	e008      	b.n	800debc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800deaa:	f7f6 f979 	bl	80041a0 <HAL_GetTick>
 800deae:	4602      	mov	r2, r0
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	1ad3      	subs	r3, r2, r3
 800deb4:	2b02      	cmp	r3, #2
 800deb6:	d901      	bls.n	800debc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800deb8:	2303      	movs	r3, #3
 800deba:	e086      	b.n	800dfca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800debc:	4b45      	ldr	r3, [pc, #276]	; (800dfd4 <RCCEx_PLL3_Config+0x15c>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d1f0      	bne.n	800deaa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800dec8:	4b42      	ldr	r3, [pc, #264]	; (800dfd4 <RCCEx_PLL3_Config+0x15c>)
 800deca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800decc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	051b      	lsls	r3, r3, #20
 800ded6:	493f      	ldr	r1, [pc, #252]	; (800dfd4 <RCCEx_PLL3_Config+0x15c>)
 800ded8:	4313      	orrs	r3, r2
 800deda:	628b      	str	r3, [r1, #40]	; 0x28
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	685b      	ldr	r3, [r3, #4]
 800dee0:	3b01      	subs	r3, #1
 800dee2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	689b      	ldr	r3, [r3, #8]
 800deea:	3b01      	subs	r3, #1
 800deec:	025b      	lsls	r3, r3, #9
 800deee:	b29b      	uxth	r3, r3
 800def0:	431a      	orrs	r2, r3
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	68db      	ldr	r3, [r3, #12]
 800def6:	3b01      	subs	r3, #1
 800def8:	041b      	lsls	r3, r3, #16
 800defa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800defe:	431a      	orrs	r2, r3
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	691b      	ldr	r3, [r3, #16]
 800df04:	3b01      	subs	r3, #1
 800df06:	061b      	lsls	r3, r3, #24
 800df08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800df0c:	4931      	ldr	r1, [pc, #196]	; (800dfd4 <RCCEx_PLL3_Config+0x15c>)
 800df0e:	4313      	orrs	r3, r2
 800df10:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800df12:	4b30      	ldr	r3, [pc, #192]	; (800dfd4 <RCCEx_PLL3_Config+0x15c>)
 800df14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	695b      	ldr	r3, [r3, #20]
 800df1e:	492d      	ldr	r1, [pc, #180]	; (800dfd4 <RCCEx_PLL3_Config+0x15c>)
 800df20:	4313      	orrs	r3, r2
 800df22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800df24:	4b2b      	ldr	r3, [pc, #172]	; (800dfd4 <RCCEx_PLL3_Config+0x15c>)
 800df26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df28:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	699b      	ldr	r3, [r3, #24]
 800df30:	4928      	ldr	r1, [pc, #160]	; (800dfd4 <RCCEx_PLL3_Config+0x15c>)
 800df32:	4313      	orrs	r3, r2
 800df34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800df36:	4b27      	ldr	r3, [pc, #156]	; (800dfd4 <RCCEx_PLL3_Config+0x15c>)
 800df38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df3a:	4a26      	ldr	r2, [pc, #152]	; (800dfd4 <RCCEx_PLL3_Config+0x15c>)
 800df3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800df40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800df42:	4b24      	ldr	r3, [pc, #144]	; (800dfd4 <RCCEx_PLL3_Config+0x15c>)
 800df44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df46:	4b24      	ldr	r3, [pc, #144]	; (800dfd8 <RCCEx_PLL3_Config+0x160>)
 800df48:	4013      	ands	r3, r2
 800df4a:	687a      	ldr	r2, [r7, #4]
 800df4c:	69d2      	ldr	r2, [r2, #28]
 800df4e:	00d2      	lsls	r2, r2, #3
 800df50:	4920      	ldr	r1, [pc, #128]	; (800dfd4 <RCCEx_PLL3_Config+0x15c>)
 800df52:	4313      	orrs	r3, r2
 800df54:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800df56:	4b1f      	ldr	r3, [pc, #124]	; (800dfd4 <RCCEx_PLL3_Config+0x15c>)
 800df58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df5a:	4a1e      	ldr	r2, [pc, #120]	; (800dfd4 <RCCEx_PLL3_Config+0x15c>)
 800df5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800df60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d106      	bne.n	800df76 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800df68:	4b1a      	ldr	r3, [pc, #104]	; (800dfd4 <RCCEx_PLL3_Config+0x15c>)
 800df6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df6c:	4a19      	ldr	r2, [pc, #100]	; (800dfd4 <RCCEx_PLL3_Config+0x15c>)
 800df6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800df72:	62d3      	str	r3, [r2, #44]	; 0x2c
 800df74:	e00f      	b.n	800df96 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	2b01      	cmp	r3, #1
 800df7a:	d106      	bne.n	800df8a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800df7c:	4b15      	ldr	r3, [pc, #84]	; (800dfd4 <RCCEx_PLL3_Config+0x15c>)
 800df7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df80:	4a14      	ldr	r2, [pc, #80]	; (800dfd4 <RCCEx_PLL3_Config+0x15c>)
 800df82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800df86:	62d3      	str	r3, [r2, #44]	; 0x2c
 800df88:	e005      	b.n	800df96 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800df8a:	4b12      	ldr	r3, [pc, #72]	; (800dfd4 <RCCEx_PLL3_Config+0x15c>)
 800df8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df8e:	4a11      	ldr	r2, [pc, #68]	; (800dfd4 <RCCEx_PLL3_Config+0x15c>)
 800df90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800df94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800df96:	4b0f      	ldr	r3, [pc, #60]	; (800dfd4 <RCCEx_PLL3_Config+0x15c>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	4a0e      	ldr	r2, [pc, #56]	; (800dfd4 <RCCEx_PLL3_Config+0x15c>)
 800df9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dfa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dfa2:	f7f6 f8fd 	bl	80041a0 <HAL_GetTick>
 800dfa6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dfa8:	e008      	b.n	800dfbc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dfaa:	f7f6 f8f9 	bl	80041a0 <HAL_GetTick>
 800dfae:	4602      	mov	r2, r0
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	1ad3      	subs	r3, r2, r3
 800dfb4:	2b02      	cmp	r3, #2
 800dfb6:	d901      	bls.n	800dfbc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dfb8:	2303      	movs	r3, #3
 800dfba:	e006      	b.n	800dfca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dfbc:	4b05      	ldr	r3, [pc, #20]	; (800dfd4 <RCCEx_PLL3_Config+0x15c>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d0f0      	beq.n	800dfaa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800dfc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3710      	adds	r7, #16
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}
 800dfd2:	bf00      	nop
 800dfd4:	58024400 	.word	0x58024400
 800dfd8:	ffff0007 	.word	0xffff0007

0800dfdc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b08a      	sub	sp, #40	; 0x28
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d101      	bne.n	800dfee <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800dfea:	2301      	movs	r3, #1
 800dfec:	e075      	b.n	800e0da <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dff4:	b2db      	uxtb	r3, r3
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d105      	bne.n	800e006 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2200      	movs	r2, #0
 800dffe:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	f7f5 f965 	bl	80032d0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2204      	movs	r2, #4
 800e00a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f000 f868 	bl	800e0e4 <HAL_SD_InitCard>
 800e014:	4603      	mov	r3, r0
 800e016:	2b00      	cmp	r3, #0
 800e018:	d001      	beq.n	800e01e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800e01a:	2301      	movs	r3, #1
 800e01c:	e05d      	b.n	800e0da <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800e01e:	f107 0308 	add.w	r3, r7, #8
 800e022:	4619      	mov	r1, r3
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f000 fdaf 	bl	800eb88 <HAL_SD_GetCardStatus>
 800e02a:	4603      	mov	r3, r0
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d001      	beq.n	800e034 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800e030:	2301      	movs	r3, #1
 800e032:	e052      	b.n	800e0da <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800e034:	7e3b      	ldrb	r3, [r7, #24]
 800e036:	b2db      	uxtb	r3, r3
 800e038:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800e03a:	7e7b      	ldrb	r3, [r7, #25]
 800e03c:	b2db      	uxtb	r3, r3
 800e03e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e044:	2b01      	cmp	r3, #1
 800e046:	d10a      	bne.n	800e05e <HAL_SD_Init+0x82>
 800e048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d102      	bne.n	800e054 <HAL_SD_Init+0x78>
 800e04e:	6a3b      	ldr	r3, [r7, #32]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d004      	beq.n	800e05e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e05a:	659a      	str	r2, [r3, #88]	; 0x58
 800e05c:	e00b      	b.n	800e076 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e062:	2b01      	cmp	r3, #1
 800e064:	d104      	bne.n	800e070 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e06c:	659a      	str	r2, [r3, #88]	; 0x58
 800e06e:	e002      	b.n	800e076 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2200      	movs	r2, #0
 800e074:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	68db      	ldr	r3, [r3, #12]
 800e07a:	4619      	mov	r1, r3
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f000 fe6d 	bl	800ed5c <HAL_SD_ConfigWideBusOperation>
 800e082:	4603      	mov	r3, r0
 800e084:	2b00      	cmp	r3, #0
 800e086:	d001      	beq.n	800e08c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800e088:	2301      	movs	r3, #1
 800e08a:	e026      	b.n	800e0da <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800e08c:	f7f6 f888 	bl	80041a0 <HAL_GetTick>
 800e090:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e092:	e011      	b.n	800e0b8 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e094:	f7f6 f884 	bl	80041a0 <HAL_GetTick>
 800e098:	4602      	mov	r2, r0
 800e09a:	69fb      	ldr	r3, [r7, #28]
 800e09c:	1ad3      	subs	r3, r2, r3
 800e09e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0a2:	d109      	bne.n	800e0b8 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e0aa:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2201      	movs	r2, #1
 800e0b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800e0b4:	2303      	movs	r3, #3
 800e0b6:	e010      	b.n	800e0da <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f000 ff61 	bl	800ef80 <HAL_SD_GetCardState>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	2b04      	cmp	r3, #4
 800e0c2:	d1e7      	bne.n	800e094 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800e0d8:	2300      	movs	r3, #0
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	3728      	adds	r7, #40	; 0x28
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}
	...

0800e0e4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e0e4:	b590      	push	{r4, r7, lr}
 800e0e6:	b08d      	sub	sp, #52	; 0x34
 800e0e8:	af02      	add	r7, sp, #8
 800e0ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e0fc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e100:	f04f 0100 	mov.w	r1, #0
 800e104:	f7fe fd24 	bl	800cb50 <HAL_RCCEx_GetPeriphCLKFreq>
 800e108:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800e10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d109      	bne.n	800e124 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2201      	movs	r2, #1
 800e114:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e11e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e120:	2301      	movs	r3, #1
 800e122:	e070      	b.n	800e206 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800e124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e126:	0a1b      	lsrs	r3, r3, #8
 800e128:	4a39      	ldr	r2, [pc, #228]	; (800e210 <HAL_SD_InitCard+0x12c>)
 800e12a:	fba2 2303 	umull	r2, r3, r2, r3
 800e12e:	091b      	lsrs	r3, r3, #4
 800e130:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681c      	ldr	r4, [r3, #0]
 800e136:	466a      	mov	r2, sp
 800e138:	f107 0318 	add.w	r3, r7, #24
 800e13c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e140:	e882 0003 	stmia.w	r2, {r0, r1}
 800e144:	f107 030c 	add.w	r3, r7, #12
 800e148:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e14a:	4620      	mov	r0, r4
 800e14c:	f004 fec4 	bl	8012ed8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	4618      	mov	r0, r3
 800e156:	f004 ff07 	bl	8012f68 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800e15a:	69fb      	ldr	r3, [r7, #28]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d005      	beq.n	800e16c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800e160:	69fb      	ldr	r3, [r7, #28]
 800e162:	005b      	lsls	r3, r3, #1
 800e164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e166:	fbb2 f3f3 	udiv	r3, r2, r3
 800e16a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800e16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d007      	beq.n	800e182 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800e172:	4a28      	ldr	r2, [pc, #160]	; (800e214 <HAL_SD_InitCard+0x130>)
 800e174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e176:	fbb2 f3f3 	udiv	r3, r2, r3
 800e17a:	3301      	adds	r3, #1
 800e17c:	4618      	mov	r0, r3
 800e17e:	f7f6 f81b 	bl	80041b8 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f000 ffea 	bl	800f15c <SD_PowerON>
 800e188:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e18a:	6a3b      	ldr	r3, [r7, #32]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d00b      	beq.n	800e1a8 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2201      	movs	r2, #1
 800e194:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e19c:	6a3b      	ldr	r3, [r7, #32]
 800e19e:	431a      	orrs	r2, r3
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	e02e      	b.n	800e206 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f000 ff09 	bl	800efc0 <SD_InitCard>
 800e1ae:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e1b0:	6a3b      	ldr	r3, [r7, #32]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d00b      	beq.n	800e1ce <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2201      	movs	r2, #1
 800e1ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e1c2:	6a3b      	ldr	r3, [r7, #32]
 800e1c4:	431a      	orrs	r2, r3
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	e01b      	b.n	800e206 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f004 ff5c 	bl	8013094 <SDMMC_CmdBlockLength>
 800e1dc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e1de:	6a3b      	ldr	r3, [r7, #32]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d00f      	beq.n	800e204 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	4a0b      	ldr	r2, [pc, #44]	; (800e218 <HAL_SD_InitCard+0x134>)
 800e1ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e1f0:	6a3b      	ldr	r3, [r7, #32]
 800e1f2:	431a      	orrs	r2, r3
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e200:	2301      	movs	r3, #1
 800e202:	e000      	b.n	800e206 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800e204:	2300      	movs	r3, #0
}
 800e206:	4618      	mov	r0, r3
 800e208:	372c      	adds	r7, #44	; 0x2c
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd90      	pop	{r4, r7, pc}
 800e20e:	bf00      	nop
 800e210:	014f8b59 	.word	0x014f8b59
 800e214:	00012110 	.word	0x00012110
 800e218:	1fe00fff 	.word	0x1fe00fff

0800e21c <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b08c      	sub	sp, #48	; 0x30
 800e220:	af00      	add	r7, sp, #0
 800e222:	60f8      	str	r0, [r7, #12]
 800e224:	60b9      	str	r1, [r7, #8]
 800e226:	607a      	str	r2, [r7, #4]
 800e228:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d107      	bne.n	800e244 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e238:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e240:	2301      	movs	r3, #1
 800e242:	e08d      	b.n	800e360 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e24a:	b2db      	uxtb	r3, r3
 800e24c:	2b01      	cmp	r3, #1
 800e24e:	f040 8086 	bne.w	800e35e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	2200      	movs	r2, #0
 800e256:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e258:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	441a      	add	r2, r3
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e262:	429a      	cmp	r2, r3
 800e264:	d907      	bls.n	800e276 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e26a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e272:	2301      	movs	r3, #1
 800e274:	e074      	b.n	800e360 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	2203      	movs	r2, #3
 800e27a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	2200      	movs	r2, #0
 800e284:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	68ba      	ldr	r2, [r7, #8]
 800e28a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	025a      	lsls	r2, r3, #9
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e298:	2b01      	cmp	r3, #1
 800e29a:	d002      	beq.n	800e2a2 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800e29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e29e:	025b      	lsls	r3, r3, #9
 800e2a0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e2a2:	f04f 33ff 	mov.w	r3, #4294967295
 800e2a6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	025b      	lsls	r3, r3, #9
 800e2ac:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e2ae:	2390      	movs	r3, #144	; 0x90
 800e2b0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e2b2:	2302      	movs	r3, #2
 800e2b4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	f107 0210 	add.w	r2, r7, #16
 800e2c6:	4611      	mov	r1, r2
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f004 feb7 	bl	801303c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	68da      	ldr	r2, [r3, #12]
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e2dc:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	68ba      	ldr	r2, [r7, #8]
 800e2e4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	2201      	movs	r2, #1
 800e2ec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	2b01      	cmp	r3, #1
 800e2f2:	d90a      	bls.n	800e30a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	2282      	movs	r2, #130	; 0x82
 800e2f8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e300:	4618      	mov	r0, r3
 800e302:	f004 ff0d 	bl	8013120 <SDMMC_CmdReadMultiBlock>
 800e306:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e308:	e009      	b.n	800e31e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	2281      	movs	r2, #129	; 0x81
 800e30e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e316:	4618      	mov	r0, r3
 800e318:	f004 fedf 	bl	80130da <SDMMC_CmdReadSingleBlock>
 800e31c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800e31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e320:	2b00      	cmp	r3, #0
 800e322:	d012      	beq.n	800e34a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	4a0f      	ldr	r2, [pc, #60]	; (800e368 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800e32a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e332:	431a      	orrs	r2, r3
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	2201      	movs	r2, #1
 800e33c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	2200      	movs	r2, #0
 800e344:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800e346:	2301      	movs	r3, #1
 800e348:	e00a      	b.n	800e360 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800e358:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800e35a:	2300      	movs	r3, #0
 800e35c:	e000      	b.n	800e360 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e35e:	2302      	movs	r3, #2
  }
}
 800e360:	4618      	mov	r0, r3
 800e362:	3730      	adds	r7, #48	; 0x30
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}
 800e368:	1fe00fff 	.word	0x1fe00fff

0800e36c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b08c      	sub	sp, #48	; 0x30
 800e370:	af00      	add	r7, sp, #0
 800e372:	60f8      	str	r0, [r7, #12]
 800e374:	60b9      	str	r1, [r7, #8]
 800e376:	607a      	str	r2, [r7, #4]
 800e378:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d107      	bne.n	800e394 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e388:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e390:	2301      	movs	r3, #1
 800e392:	e08d      	b.n	800e4b0 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e39a:	b2db      	uxtb	r3, r3
 800e39c:	2b01      	cmp	r3, #1
 800e39e:	f040 8086 	bne.w	800e4ae <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e3a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	441a      	add	r2, r3
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3b2:	429a      	cmp	r2, r3
 800e3b4:	d907      	bls.n	800e3c6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	e074      	b.n	800e4b0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	2203      	movs	r2, #3
 800e3ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	68ba      	ldr	r2, [r7, #8]
 800e3da:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	025a      	lsls	r2, r3, #9
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3e8:	2b01      	cmp	r3, #1
 800e3ea:	d002      	beq.n	800e3f2 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800e3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ee:	025b      	lsls	r3, r3, #9
 800e3f0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e3f2:	f04f 33ff 	mov.w	r3, #4294967295
 800e3f6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	025b      	lsls	r3, r3, #9
 800e3fc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e3fe:	2390      	movs	r3, #144	; 0x90
 800e400:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800e402:	2300      	movs	r3, #0
 800e404:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e406:	2300      	movs	r3, #0
 800e408:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e40a:	2300      	movs	r3, #0
 800e40c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f107 0210 	add.w	r2, r7, #16
 800e416:	4611      	mov	r1, r2
 800e418:	4618      	mov	r0, r3
 800e41a:	f004 fe0f 	bl	801303c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	68da      	ldr	r2, [r3, #12]
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e42c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	68ba      	ldr	r2, [r7, #8]
 800e434:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	2201      	movs	r2, #1
 800e43c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	2b01      	cmp	r3, #1
 800e442:	d90a      	bls.n	800e45a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	22a0      	movs	r2, #160	; 0xa0
 800e448:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e450:	4618      	mov	r0, r3
 800e452:	f004 feab 	bl	80131ac <SDMMC_CmdWriteMultiBlock>
 800e456:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e458:	e009      	b.n	800e46e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	2290      	movs	r2, #144	; 0x90
 800e45e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e466:	4618      	mov	r0, r3
 800e468:	f004 fe7d 	bl	8013166 <SDMMC_CmdWriteSingleBlock>
 800e46c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800e46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e470:	2b00      	cmp	r3, #0
 800e472:	d012      	beq.n	800e49a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	4a0f      	ldr	r2, [pc, #60]	; (800e4b8 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800e47a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e482:	431a      	orrs	r2, r3
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	2201      	movs	r2, #1
 800e48c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	2200      	movs	r2, #0
 800e494:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800e496:	2301      	movs	r3, #1
 800e498:	e00a      	b.n	800e4b0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800e4a8:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	e000      	b.n	800e4b0 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e4ae:	2302      	movs	r3, #2
  }
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	3730      	adds	r7, #48	; 0x30
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}
 800e4b8:	1fe00fff 	.word	0x1fe00fff

0800e4bc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b084      	sub	sp, #16
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4c8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d008      	beq.n	800e4ea <HAL_SD_IRQHandler+0x2e>
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	f003 0308 	and.w	r3, r3, #8
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d003      	beq.n	800e4ea <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f001 f926 	bl	800f734 <SD_Read_IT>
 800e4e8:	e19a      	b.n	800e820 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	f000 80ac 	beq.w	800e652 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e502:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681a      	ldr	r2, [r3, #0]
 800e50e:	4b59      	ldr	r3, [pc, #356]	; (800e674 <HAL_SD_IRQHandler+0x1b8>)
 800e510:	400b      	ands	r3, r1
 800e512:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e522:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	68da      	ldr	r2, [r3, #12]
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e532:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	f003 0308 	and.w	r3, r3, #8
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d038      	beq.n	800e5b0 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	f003 0302 	and.w	r3, r3, #2
 800e544:	2b00      	cmp	r3, #0
 800e546:	d104      	bne.n	800e552 <HAL_SD_IRQHandler+0x96>
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	f003 0320 	and.w	r3, r3, #32
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d011      	beq.n	800e576 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	4618      	mov	r0, r3
 800e558:	f004 fe4c 	bl	80131f4 <SDMMC_CmdStopTransfer>
 800e55c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800e55e:	68bb      	ldr	r3, [r7, #8]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d008      	beq.n	800e576 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e568:	68bb      	ldr	r3, [r7, #8]
 800e56a:	431a      	orrs	r2, r3
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f000 f95b 	bl	800e82c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	4a3f      	ldr	r2, [pc, #252]	; (800e678 <HAL_SD_IRQHandler+0x1bc>)
 800e57c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2201      	movs	r2, #1
 800e582:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2200      	movs	r2, #0
 800e58a:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	f003 0301 	and.w	r3, r3, #1
 800e592:	2b00      	cmp	r3, #0
 800e594:	d104      	bne.n	800e5a0 <HAL_SD_IRQHandler+0xe4>
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	f003 0302 	and.w	r3, r3, #2
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d003      	beq.n	800e5a8 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f006 fe55 	bl	8015250 <HAL_SD_RxCpltCallback>
 800e5a6:	e13b      	b.n	800e820 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f006 fe47 	bl	801523c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e5ae:	e137      	b.n	800e820 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	f000 8132 	beq.w	800e820 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	f003 0302 	and.w	r3, r3, #2
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d104      	bne.n	800e5e8 <HAL_SD_IRQHandler+0x12c>
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	f003 0320 	and.w	r3, r3, #32
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d011      	beq.n	800e60c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	f004 fe01 	bl	80131f4 <SDMMC_CmdStopTransfer>
 800e5f2:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d008      	beq.n	800e60c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	431a      	orrs	r2, r3
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800e606:	6878      	ldr	r0, [r7, #4]
 800e608:	f000 f910 	bl	800e82c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2201      	movs	r2, #1
 800e610:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2200      	movs	r2, #0
 800e618:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	f003 0310 	and.w	r3, r3, #16
 800e620:	2b00      	cmp	r3, #0
 800e622:	d104      	bne.n	800e62e <HAL_SD_IRQHandler+0x172>
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	f003 0320 	and.w	r3, r3, #32
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d002      	beq.n	800e634 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800e62e:	6878      	ldr	r0, [r7, #4]
 800e630:	f006 fe04 	bl	801523c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	f003 0301 	and.w	r3, r3, #1
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d105      	bne.n	800e64a <HAL_SD_IRQHandler+0x18e>
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	f003 0302 	and.w	r3, r3, #2
 800e644:	2b00      	cmp	r3, #0
 800e646:	f000 80eb 	beq.w	800e820 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f006 fe00 	bl	8015250 <HAL_SD_RxCpltCallback>
}
 800e650:	e0e6      	b.n	800e820 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d00d      	beq.n	800e67c <HAL_SD_IRQHandler+0x1c0>
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	f003 0308 	and.w	r3, r3, #8
 800e666:	2b00      	cmp	r3, #0
 800e668:	d008      	beq.n	800e67c <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f001 f8a8 	bl	800f7c0 <SD_Write_IT>
 800e670:	e0d6      	b.n	800e820 <HAL_SD_IRQHandler+0x364>
 800e672:	bf00      	nop
 800e674:	ffff3ec5 	.word	0xffff3ec5
 800e678:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e682:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800e686:	2b00      	cmp	r3, #0
 800e688:	f000 809d 	beq.w	800e7c6 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e692:	f003 0302 	and.w	r3, r3, #2
 800e696:	2b00      	cmp	r3, #0
 800e698:	d005      	beq.n	800e6a6 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e69e:	f043 0202 	orr.w	r2, r3, #2
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6ac:	f003 0308 	and.w	r3, r3, #8
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d005      	beq.n	800e6c0 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6b8:	f043 0208 	orr.w	r2, r3, #8
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6c6:	f003 0320 	and.w	r3, r3, #32
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d005      	beq.n	800e6da <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6d2:	f043 0220 	orr.w	r2, r3, #32
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6e0:	f003 0310 	and.w	r3, r3, #16
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d005      	beq.n	800e6f4 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6ec:	f043 0210 	orr.w	r2, r3, #16
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	4a4b      	ldr	r2, [pc, #300]	; (800e828 <HAL_SD_IRQHandler+0x36c>)
 800e6fa:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e70a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	68da      	ldr	r2, [r3, #12]
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e71a:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e72a:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	68da      	ldr	r2, [r3, #12]
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e73a:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	4618      	mov	r0, r3
 800e742:	f004 fd57 	bl	80131f4 <SDMMC_CmdStopTransfer>
 800e746:	4602      	mov	r2, r0
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e74c:	431a      	orrs	r2, r3
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	68da      	ldr	r2, [r3, #12]
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e760:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e76a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	f003 0308 	and.w	r3, r3, #8
 800e772:	2b00      	cmp	r3, #0
 800e774:	d00a      	beq.n	800e78c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2201      	movs	r2, #1
 800e77a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2200      	movs	r2, #0
 800e782:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800e784:	6878      	ldr	r0, [r7, #4]
 800e786:	f000 f851 	bl	800e82c <HAL_SD_ErrorCallback>
}
 800e78a:	e049      	b.n	800e820 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e792:	2b00      	cmp	r3, #0
 800e794:	d044      	beq.n	800e820 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d040      	beq.n	800e820 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e7ac:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2201      	movs	r2, #1
 800e7ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f000 f834 	bl	800e82c <HAL_SD_ErrorCallback>
}
 800e7c4:	e02c      	b.n	800e820 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d025      	beq.n	800e820 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7dc:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7e4:	f003 0304 	and.w	r3, r3, #4
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d10c      	bne.n	800e806 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	f003 0320 	and.w	r3, r3, #32
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d003      	beq.n	800e7fe <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f001 f84a 	bl	800f890 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800e7fc:	e010      	b.n	800e820 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	f001 f832 	bl	800f868 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800e804:	e00c      	b.n	800e820 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	f003 0320 	and.w	r3, r3, #32
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d003      	beq.n	800e818 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f001 f833 	bl	800f87c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800e816:	e003      	b.n	800e820 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f001 f81b 	bl	800f854 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800e81e:	e7ff      	b.n	800e820 <HAL_SD_IRQHandler+0x364>
 800e820:	bf00      	nop
 800e822:	3710      	adds	r7, #16
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}
 800e828:	18000f3a 	.word	0x18000f3a

0800e82c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800e82c:	b480      	push	{r7}
 800e82e:	b083      	sub	sp, #12
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800e834:	bf00      	nop
 800e836:	370c      	adds	r7, #12
 800e838:	46bd      	mov	sp, r7
 800e83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83e:	4770      	bx	lr

0800e840 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e840:	b480      	push	{r7}
 800e842:	b083      	sub	sp, #12
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e84e:	0f9b      	lsrs	r3, r3, #30
 800e850:	b2da      	uxtb	r2, r3
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e85a:	0e9b      	lsrs	r3, r3, #26
 800e85c:	b2db      	uxtb	r3, r3
 800e85e:	f003 030f 	and.w	r3, r3, #15
 800e862:	b2da      	uxtb	r2, r3
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e86c:	0e1b      	lsrs	r3, r3, #24
 800e86e:	b2db      	uxtb	r3, r3
 800e870:	f003 0303 	and.w	r3, r3, #3
 800e874:	b2da      	uxtb	r2, r3
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e87e:	0c1b      	lsrs	r3, r3, #16
 800e880:	b2da      	uxtb	r2, r3
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e88a:	0a1b      	lsrs	r3, r3, #8
 800e88c:	b2da      	uxtb	r2, r3
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e896:	b2da      	uxtb	r2, r3
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e8a0:	0d1b      	lsrs	r3, r3, #20
 800e8a2:	b29a      	uxth	r2, r3
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e8ac:	0c1b      	lsrs	r3, r3, #16
 800e8ae:	b2db      	uxtb	r3, r3
 800e8b0:	f003 030f 	and.w	r3, r3, #15
 800e8b4:	b2da      	uxtb	r2, r3
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e8be:	0bdb      	lsrs	r3, r3, #15
 800e8c0:	b2db      	uxtb	r3, r3
 800e8c2:	f003 0301 	and.w	r3, r3, #1
 800e8c6:	b2da      	uxtb	r2, r3
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e8d0:	0b9b      	lsrs	r3, r3, #14
 800e8d2:	b2db      	uxtb	r3, r3
 800e8d4:	f003 0301 	and.w	r3, r3, #1
 800e8d8:	b2da      	uxtb	r2, r3
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e8e2:	0b5b      	lsrs	r3, r3, #13
 800e8e4:	b2db      	uxtb	r3, r3
 800e8e6:	f003 0301 	and.w	r3, r3, #1
 800e8ea:	b2da      	uxtb	r2, r3
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e8f4:	0b1b      	lsrs	r3, r3, #12
 800e8f6:	b2db      	uxtb	r3, r3
 800e8f8:	f003 0301 	and.w	r3, r3, #1
 800e8fc:	b2da      	uxtb	r2, r3
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	2200      	movs	r2, #0
 800e906:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d163      	bne.n	800e9d8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e914:	009a      	lsls	r2, r3, #2
 800e916:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e91a:	4013      	ands	r3, r2
 800e91c:	687a      	ldr	r2, [r7, #4]
 800e91e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800e920:	0f92      	lsrs	r2, r2, #30
 800e922:	431a      	orrs	r2, r3
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e92c:	0edb      	lsrs	r3, r3, #27
 800e92e:	b2db      	uxtb	r3, r3
 800e930:	f003 0307 	and.w	r3, r3, #7
 800e934:	b2da      	uxtb	r2, r3
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e93e:	0e1b      	lsrs	r3, r3, #24
 800e940:	b2db      	uxtb	r3, r3
 800e942:	f003 0307 	and.w	r3, r3, #7
 800e946:	b2da      	uxtb	r2, r3
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e950:	0d5b      	lsrs	r3, r3, #21
 800e952:	b2db      	uxtb	r3, r3
 800e954:	f003 0307 	and.w	r3, r3, #7
 800e958:	b2da      	uxtb	r2, r3
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e962:	0c9b      	lsrs	r3, r3, #18
 800e964:	b2db      	uxtb	r3, r3
 800e966:	f003 0307 	and.w	r3, r3, #7
 800e96a:	b2da      	uxtb	r2, r3
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e974:	0bdb      	lsrs	r3, r3, #15
 800e976:	b2db      	uxtb	r3, r3
 800e978:	f003 0307 	and.w	r3, r3, #7
 800e97c:	b2da      	uxtb	r2, r3
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	691b      	ldr	r3, [r3, #16]
 800e986:	1c5a      	adds	r2, r3, #1
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	7e1b      	ldrb	r3, [r3, #24]
 800e990:	b2db      	uxtb	r3, r3
 800e992:	f003 0307 	and.w	r3, r3, #7
 800e996:	3302      	adds	r3, #2
 800e998:	2201      	movs	r2, #1
 800e99a:	fa02 f303 	lsl.w	r3, r2, r3
 800e99e:	687a      	ldr	r2, [r7, #4]
 800e9a0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e9a2:	fb03 f202 	mul.w	r2, r3, r2
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	7a1b      	ldrb	r3, [r3, #8]
 800e9ae:	b2db      	uxtb	r3, r3
 800e9b0:	f003 030f 	and.w	r3, r3, #15
 800e9b4:	2201      	movs	r2, #1
 800e9b6:	409a      	lsls	r2, r3
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9c0:	687a      	ldr	r2, [r7, #4]
 800e9c2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800e9c4:	0a52      	lsrs	r2, r2, #9
 800e9c6:	fb03 f202 	mul.w	r2, r3, r2
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e9d4:	655a      	str	r2, [r3, #84]	; 0x54
 800e9d6:	e031      	b.n	800ea3c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	d11d      	bne.n	800ea1c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e9e4:	041b      	lsls	r3, r3, #16
 800e9e6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9ee:	0c1b      	lsrs	r3, r3, #16
 800e9f0:	431a      	orrs	r2, r3
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	691b      	ldr	r3, [r3, #16]
 800e9fa:	3301      	adds	r3, #1
 800e9fc:	029a      	lsls	r2, r3, #10
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ea10:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	655a      	str	r2, [r3, #84]	; 0x54
 800ea1a:	e00f      	b.n	800ea3c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	4a58      	ldr	r2, [pc, #352]	; (800eb84 <HAL_SD_GetCardCSD+0x344>)
 800ea22:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2201      	movs	r2, #1
 800ea34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800ea38:	2301      	movs	r3, #1
 800ea3a:	e09d      	b.n	800eb78 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea40:	0b9b      	lsrs	r3, r3, #14
 800ea42:	b2db      	uxtb	r3, r3
 800ea44:	f003 0301 	and.w	r3, r3, #1
 800ea48:	b2da      	uxtb	r2, r3
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea52:	09db      	lsrs	r3, r3, #7
 800ea54:	b2db      	uxtb	r3, r3
 800ea56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea5a:	b2da      	uxtb	r2, r3
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea64:	b2db      	uxtb	r3, r3
 800ea66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea6a:	b2da      	uxtb	r2, r3
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea74:	0fdb      	lsrs	r3, r3, #31
 800ea76:	b2da      	uxtb	r2, r3
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea80:	0f5b      	lsrs	r3, r3, #29
 800ea82:	b2db      	uxtb	r3, r3
 800ea84:	f003 0303 	and.w	r3, r3, #3
 800ea88:	b2da      	uxtb	r2, r3
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea92:	0e9b      	lsrs	r3, r3, #26
 800ea94:	b2db      	uxtb	r3, r3
 800ea96:	f003 0307 	and.w	r3, r3, #7
 800ea9a:	b2da      	uxtb	r2, r3
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eaa4:	0d9b      	lsrs	r3, r3, #22
 800eaa6:	b2db      	uxtb	r3, r3
 800eaa8:	f003 030f 	and.w	r3, r3, #15
 800eaac:	b2da      	uxtb	r2, r3
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eab6:	0d5b      	lsrs	r3, r3, #21
 800eab8:	b2db      	uxtb	r3, r3
 800eaba:	f003 0301 	and.w	r3, r3, #1
 800eabe:	b2da      	uxtb	r2, r3
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	2200      	movs	r2, #0
 800eaca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ead2:	0c1b      	lsrs	r3, r3, #16
 800ead4:	b2db      	uxtb	r3, r3
 800ead6:	f003 0301 	and.w	r3, r3, #1
 800eada:	b2da      	uxtb	r2, r3
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eae6:	0bdb      	lsrs	r3, r3, #15
 800eae8:	b2db      	uxtb	r3, r3
 800eaea:	f003 0301 	and.w	r3, r3, #1
 800eaee:	b2da      	uxtb	r2, r3
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eafa:	0b9b      	lsrs	r3, r3, #14
 800eafc:	b2db      	uxtb	r3, r3
 800eafe:	f003 0301 	and.w	r3, r3, #1
 800eb02:	b2da      	uxtb	r2, r3
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb0e:	0b5b      	lsrs	r3, r3, #13
 800eb10:	b2db      	uxtb	r3, r3
 800eb12:	f003 0301 	and.w	r3, r3, #1
 800eb16:	b2da      	uxtb	r2, r3
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb22:	0b1b      	lsrs	r3, r3, #12
 800eb24:	b2db      	uxtb	r3, r3
 800eb26:	f003 0301 	and.w	r3, r3, #1
 800eb2a:	b2da      	uxtb	r2, r3
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb36:	0a9b      	lsrs	r3, r3, #10
 800eb38:	b2db      	uxtb	r3, r3
 800eb3a:	f003 0303 	and.w	r3, r3, #3
 800eb3e:	b2da      	uxtb	r2, r3
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb4a:	0a1b      	lsrs	r3, r3, #8
 800eb4c:	b2db      	uxtb	r3, r3
 800eb4e:	f003 0303 	and.w	r3, r3, #3
 800eb52:	b2da      	uxtb	r2, r3
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb5e:	085b      	lsrs	r3, r3, #1
 800eb60:	b2db      	uxtb	r3, r3
 800eb62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb66:	b2da      	uxtb	r2, r3
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	2201      	movs	r2, #1
 800eb72:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800eb76:	2300      	movs	r3, #0
}
 800eb78:	4618      	mov	r0, r3
 800eb7a:	370c      	adds	r7, #12
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb82:	4770      	bx	lr
 800eb84:	1fe00fff 	.word	0x1fe00fff

0800eb88 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b094      	sub	sp, #80	; 0x50
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
 800eb90:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800eb92:	2300      	movs	r3, #0
 800eb94:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eb9e:	b2db      	uxtb	r3, r3
 800eba0:	2b03      	cmp	r3, #3
 800eba2:	d101      	bne.n	800eba8 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800eba4:	2301      	movs	r3, #1
 800eba6:	e0a7      	b.n	800ecf8 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800eba8:	f107 0308 	add.w	r3, r7, #8
 800ebac:	4619      	mov	r1, r3
 800ebae:	6878      	ldr	r0, [r7, #4]
 800ebb0:	f000 fb62 	bl	800f278 <SD_SendSDStatus>
 800ebb4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ebb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d011      	beq.n	800ebe0 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	4a4f      	ldr	r2, [pc, #316]	; (800ed00 <HAL_SD_GetCardStatus+0x178>)
 800ebc2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ebc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebca:	431a      	orrs	r2, r3
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2201      	movs	r2, #1
 800ebd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800ebd8:	2301      	movs	r3, #1
 800ebda:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ebde:	e070      	b.n	800ecc2 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	099b      	lsrs	r3, r3, #6
 800ebe4:	b2db      	uxtb	r3, r3
 800ebe6:	f003 0303 	and.w	r3, r3, #3
 800ebea:	b2da      	uxtb	r2, r3
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	095b      	lsrs	r3, r3, #5
 800ebf4:	b2db      	uxtb	r3, r3
 800ebf6:	f003 0301 	and.w	r3, r3, #1
 800ebfa:	b2da      	uxtb	r2, r3
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	0a1b      	lsrs	r3, r3, #8
 800ec04:	b29b      	uxth	r3, r3
 800ec06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ec0a:	b29a      	uxth	r2, r3
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	0e1b      	lsrs	r3, r3, #24
 800ec10:	b29b      	uxth	r3, r3
 800ec12:	4313      	orrs	r3, r2
 800ec14:	b29a      	uxth	r2, r3
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	061a      	lsls	r2, r3, #24
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	021b      	lsls	r3, r3, #8
 800ec22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ec26:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	0a1b      	lsrs	r3, r3, #8
 800ec2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ec30:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	0e1b      	lsrs	r3, r3, #24
 800ec36:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ec3c:	693b      	ldr	r3, [r7, #16]
 800ec3e:	b2da      	uxtb	r2, r3
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ec44:	693b      	ldr	r3, [r7, #16]
 800ec46:	0a1b      	lsrs	r3, r3, #8
 800ec48:	b2da      	uxtb	r2, r3
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	0d1b      	lsrs	r3, r3, #20
 800ec52:	b2db      	uxtb	r3, r3
 800ec54:	f003 030f 	and.w	r3, r3, #15
 800ec58:	b2da      	uxtb	r2, r3
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ec5e:	693b      	ldr	r3, [r7, #16]
 800ec60:	0c1b      	lsrs	r3, r3, #16
 800ec62:	b29b      	uxth	r3, r3
 800ec64:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ec68:	b29a      	uxth	r2, r3
 800ec6a:	697b      	ldr	r3, [r7, #20]
 800ec6c:	b29b      	uxth	r3, r3
 800ec6e:	b2db      	uxtb	r3, r3
 800ec70:	b29b      	uxth	r3, r3
 800ec72:	4313      	orrs	r3, r2
 800ec74:	b29a      	uxth	r2, r3
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	0a9b      	lsrs	r3, r3, #10
 800ec7e:	b2db      	uxtb	r3, r3
 800ec80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ec84:	b2da      	uxtb	r2, r3
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	0a1b      	lsrs	r3, r3, #8
 800ec8e:	b2db      	uxtb	r3, r3
 800ec90:	f003 0303 	and.w	r3, r3, #3
 800ec94:	b2da      	uxtb	r2, r3
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800ec9a:	697b      	ldr	r3, [r7, #20]
 800ec9c:	091b      	lsrs	r3, r3, #4
 800ec9e:	b2db      	uxtb	r3, r3
 800eca0:	f003 030f 	and.w	r3, r3, #15
 800eca4:	b2da      	uxtb	r2, r3
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	b2db      	uxtb	r3, r3
 800ecae:	f003 030f 	and.w	r3, r3, #15
 800ecb2:	b2da      	uxtb	r2, r3
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800ecb8:	69bb      	ldr	r3, [r7, #24]
 800ecba:	0e1b      	lsrs	r3, r3, #24
 800ecbc:	b2da      	uxtb	r2, r3
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ecca:	4618      	mov	r0, r3
 800eccc:	f004 f9e2 	bl	8013094 <SDMMC_CmdBlockLength>
 800ecd0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ecd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d00d      	beq.n	800ecf4 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	4a08      	ldr	r2, [pc, #32]	; (800ed00 <HAL_SD_GetCardStatus+0x178>)
 800ecde:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ece4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2201      	movs	r2, #1
 800ecea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800ecee:	2301      	movs	r3, #1
 800ecf0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800ecf4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3750      	adds	r7, #80	; 0x50
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}
 800ed00:	1fe00fff 	.word	0x1fe00fff

0800ed04 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ed04:	b480      	push	{r7}
 800ed06:	b083      	sub	sp, #12
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
 800ed0c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed4a:	683b      	ldr	r3, [r7, #0]
 800ed4c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ed4e:	2300      	movs	r3, #0
}
 800ed50:	4618      	mov	r0, r3
 800ed52:	370c      	adds	r7, #12
 800ed54:	46bd      	mov	sp, r7
 800ed56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5a:	4770      	bx	lr

0800ed5c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ed5c:	b590      	push	{r4, r7, lr}
 800ed5e:	b08d      	sub	sp, #52	; 0x34
 800ed60:	af02      	add	r7, sp, #8
 800ed62:	6078      	str	r0, [r7, #4]
 800ed64:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800ed66:	2300      	movs	r3, #0
 800ed68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2203      	movs	r2, #3
 800ed70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed78:	2b03      	cmp	r3, #3
 800ed7a:	d02e      	beq.n	800edda <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed82:	d106      	bne.n	800ed92 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed88:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	635a      	str	r2, [r3, #52]	; 0x34
 800ed90:	e029      	b.n	800ede6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ed98:	d10a      	bne.n	800edb0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f000 fb64 	bl	800f468 <SD_WideBus_Enable>
 800eda0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eda6:	6a3b      	ldr	r3, [r7, #32]
 800eda8:	431a      	orrs	r2, r3
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	635a      	str	r2, [r3, #52]	; 0x34
 800edae:	e01a      	b.n	800ede6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d10a      	bne.n	800edcc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800edb6:	6878      	ldr	r0, [r7, #4]
 800edb8:	f000 fba1 	bl	800f4fe <SD_WideBus_Disable>
 800edbc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800edc2:	6a3b      	ldr	r3, [r7, #32]
 800edc4:	431a      	orrs	r2, r3
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	635a      	str	r2, [r3, #52]	; 0x34
 800edca:	e00c      	b.n	800ede6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edd0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	635a      	str	r2, [r3, #52]	; 0x34
 800edd8:	e005      	b.n	800ede6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edde:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edea:	2b00      	cmp	r3, #0
 800edec:	d007      	beq.n	800edfe <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	4a5f      	ldr	r2, [pc, #380]	; (800ef70 <HAL_SD_ConfigWideBusOperation+0x214>)
 800edf4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800edf6:	2301      	movs	r3, #1
 800edf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800edfc:	e096      	b.n	800ef2c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800edfe:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ee02:	f04f 0100 	mov.w	r1, #0
 800ee06:	f7fd fea3 	bl	800cb50 <HAL_RCCEx_GetPeriphCLKFreq>
 800ee0a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800ee0c:	69fb      	ldr	r3, [r7, #28]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	f000 8083 	beq.w	800ef1a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	685b      	ldr	r3, [r3, #4]
 800ee18:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	689b      	ldr	r3, [r3, #8]
 800ee1e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	691b      	ldr	r3, [r3, #16]
 800ee28:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	695a      	ldr	r2, [r3, #20]
 800ee2e:	69fb      	ldr	r3, [r7, #28]
 800ee30:	4950      	ldr	r1, [pc, #320]	; (800ef74 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ee32:	fba1 1303 	umull	r1, r3, r1, r3
 800ee36:	0e1b      	lsrs	r3, r3, #24
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	d303      	bcc.n	800ee44 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	695b      	ldr	r3, [r3, #20]
 800ee40:	61bb      	str	r3, [r7, #24]
 800ee42:	e05a      	b.n	800eefa <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee4c:	d103      	bne.n	800ee56 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	695b      	ldr	r3, [r3, #20]
 800ee52:	61bb      	str	r3, [r7, #24]
 800ee54:	e051      	b.n	800eefa <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee5e:	d126      	bne.n	800eeae <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	695b      	ldr	r3, [r3, #20]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d10e      	bne.n	800ee86 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800ee68:	69fb      	ldr	r3, [r7, #28]
 800ee6a:	4a43      	ldr	r2, [pc, #268]	; (800ef78 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ee6c:	4293      	cmp	r3, r2
 800ee6e:	d906      	bls.n	800ee7e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ee70:	69fb      	ldr	r3, [r7, #28]
 800ee72:	4a40      	ldr	r2, [pc, #256]	; (800ef74 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ee74:	fba2 2303 	umull	r2, r3, r2, r3
 800ee78:	0e5b      	lsrs	r3, r3, #25
 800ee7a:	61bb      	str	r3, [r7, #24]
 800ee7c:	e03d      	b.n	800eefa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	695b      	ldr	r3, [r3, #20]
 800ee82:	61bb      	str	r3, [r7, #24]
 800ee84:	e039      	b.n	800eefa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	695b      	ldr	r3, [r3, #20]
 800ee8a:	005b      	lsls	r3, r3, #1
 800ee8c:	69fa      	ldr	r2, [r7, #28]
 800ee8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee92:	4a39      	ldr	r2, [pc, #228]	; (800ef78 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ee94:	4293      	cmp	r3, r2
 800ee96:	d906      	bls.n	800eea6 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ee98:	69fb      	ldr	r3, [r7, #28]
 800ee9a:	4a36      	ldr	r2, [pc, #216]	; (800ef74 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ee9c:	fba2 2303 	umull	r2, r3, r2, r3
 800eea0:	0e5b      	lsrs	r3, r3, #25
 800eea2:	61bb      	str	r3, [r7, #24]
 800eea4:	e029      	b.n	800eefa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	695b      	ldr	r3, [r3, #20]
 800eeaa:	61bb      	str	r3, [r7, #24]
 800eeac:	e025      	b.n	800eefa <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	695b      	ldr	r3, [r3, #20]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d10e      	bne.n	800eed4 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800eeb6:	69fb      	ldr	r3, [r7, #28]
 800eeb8:	4a30      	ldr	r2, [pc, #192]	; (800ef7c <HAL_SD_ConfigWideBusOperation+0x220>)
 800eeba:	4293      	cmp	r3, r2
 800eebc:	d906      	bls.n	800eecc <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800eebe:	69fb      	ldr	r3, [r7, #28]
 800eec0:	4a2c      	ldr	r2, [pc, #176]	; (800ef74 <HAL_SD_ConfigWideBusOperation+0x218>)
 800eec2:	fba2 2303 	umull	r2, r3, r2, r3
 800eec6:	0e1b      	lsrs	r3, r3, #24
 800eec8:	61bb      	str	r3, [r7, #24]
 800eeca:	e016      	b.n	800eefa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	695b      	ldr	r3, [r3, #20]
 800eed0:	61bb      	str	r3, [r7, #24]
 800eed2:	e012      	b.n	800eefa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	695b      	ldr	r3, [r3, #20]
 800eed8:	005b      	lsls	r3, r3, #1
 800eeda:	69fa      	ldr	r2, [r7, #28]
 800eedc:	fbb2 f3f3 	udiv	r3, r2, r3
 800eee0:	4a26      	ldr	r2, [pc, #152]	; (800ef7c <HAL_SD_ConfigWideBusOperation+0x220>)
 800eee2:	4293      	cmp	r3, r2
 800eee4:	d906      	bls.n	800eef4 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800eee6:	69fb      	ldr	r3, [r7, #28]
 800eee8:	4a22      	ldr	r2, [pc, #136]	; (800ef74 <HAL_SD_ConfigWideBusOperation+0x218>)
 800eeea:	fba2 2303 	umull	r2, r3, r2, r3
 800eeee:	0e1b      	lsrs	r3, r3, #24
 800eef0:	61bb      	str	r3, [r7, #24]
 800eef2:	e002      	b.n	800eefa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	695b      	ldr	r3, [r3, #20]
 800eef8:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681c      	ldr	r4, [r3, #0]
 800eefe:	466a      	mov	r2, sp
 800ef00:	f107 0314 	add.w	r3, r7, #20
 800ef04:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ef08:	e882 0003 	stmia.w	r2, {r0, r1}
 800ef0c:	f107 0308 	add.w	r3, r7, #8
 800ef10:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ef12:	4620      	mov	r0, r4
 800ef14:	f003 ffe0 	bl	8012ed8 <SDMMC_Init>
 800ef18:	e008      	b.n	800ef2c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef1e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800ef26:	2301      	movs	r3, #1
 800ef28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ef34:	4618      	mov	r0, r3
 800ef36:	f004 f8ad 	bl	8013094 <SDMMC_CmdBlockLength>
 800ef3a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ef3c:	6a3b      	ldr	r3, [r7, #32]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d00c      	beq.n	800ef5c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	4a0a      	ldr	r2, [pc, #40]	; (800ef70 <HAL_SD_ConfigWideBusOperation+0x214>)
 800ef48:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef4e:	6a3b      	ldr	r3, [r7, #32]
 800ef50:	431a      	orrs	r2, r3
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ef56:	2301      	movs	r3, #1
 800ef58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2201      	movs	r2, #1
 800ef60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800ef64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ef68:	4618      	mov	r0, r3
 800ef6a:	372c      	adds	r7, #44	; 0x2c
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd90      	pop	{r4, r7, pc}
 800ef70:	1fe00fff 	.word	0x1fe00fff
 800ef74:	55e63b89 	.word	0x55e63b89
 800ef78:	02faf080 	.word	0x02faf080
 800ef7c:	017d7840 	.word	0x017d7840

0800ef80 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b086      	sub	sp, #24
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ef8c:	f107 030c 	add.w	r3, r7, #12
 800ef90:	4619      	mov	r1, r3
 800ef92:	6878      	ldr	r0, [r7, #4]
 800ef94:	f000 fa40 	bl	800f418 <SD_SendStatus>
 800ef98:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ef9a:	697b      	ldr	r3, [r7, #20]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d005      	beq.n	800efac <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800efa4:	697b      	ldr	r3, [r7, #20]
 800efa6:	431a      	orrs	r2, r3
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	0a5b      	lsrs	r3, r3, #9
 800efb0:	f003 030f 	and.w	r3, r3, #15
 800efb4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800efb6:	693b      	ldr	r3, [r7, #16]
}
 800efb8:	4618      	mov	r0, r3
 800efba:	3718      	adds	r7, #24
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}

0800efc0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b090      	sub	sp, #64	; 0x40
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800efc8:	2300      	movs	r3, #0
 800efca:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800efcc:	f7f5 f8e8 	bl	80041a0 <HAL_GetTick>
 800efd0:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	4618      	mov	r0, r3
 800efd8:	f003 ffd7 	bl	8012f8a <SDMMC_GetPowerState>
 800efdc:	4603      	mov	r3, r0
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d102      	bne.n	800efe8 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800efe2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800efe6:	e0b5      	b.n	800f154 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efec:	2b03      	cmp	r3, #3
 800efee:	d02e      	beq.n	800f04e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	4618      	mov	r0, r3
 800eff6:	f004 fa22 	bl	801343e <SDMMC_CmdSendCID>
 800effa:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800effc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800effe:	2b00      	cmp	r3, #0
 800f000:	d001      	beq.n	800f006 <SD_InitCard+0x46>
    {
      return errorstate;
 800f002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f004:	e0a6      	b.n	800f154 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	2100      	movs	r1, #0
 800f00c:	4618      	mov	r0, r3
 800f00e:	f004 f802 	bl	8013016 <SDMMC_GetResponse>
 800f012:	4602      	mov	r2, r0
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	2104      	movs	r1, #4
 800f01e:	4618      	mov	r0, r3
 800f020:	f003 fff9 	bl	8013016 <SDMMC_GetResponse>
 800f024:	4602      	mov	r2, r0
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	2108      	movs	r1, #8
 800f030:	4618      	mov	r0, r3
 800f032:	f003 fff0 	bl	8013016 <SDMMC_GetResponse>
 800f036:	4602      	mov	r2, r0
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	210c      	movs	r1, #12
 800f042:	4618      	mov	r0, r3
 800f044:	f003 ffe7 	bl	8013016 <SDMMC_GetResponse>
 800f048:	4602      	mov	r2, r0
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f052:	2b03      	cmp	r3, #3
 800f054:	d01d      	beq.n	800f092 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800f056:	e019      	b.n	800f08c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	f107 020a 	add.w	r2, r7, #10
 800f060:	4611      	mov	r1, r2
 800f062:	4618      	mov	r0, r3
 800f064:	f004 fa2a 	bl	80134bc <SDMMC_CmdSetRelAdd>
 800f068:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800f06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d001      	beq.n	800f074 <SD_InitCard+0xb4>
      {
        return errorstate;
 800f070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f072:	e06f      	b.n	800f154 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800f074:	f7f5 f894 	bl	80041a0 <HAL_GetTick>
 800f078:	4602      	mov	r2, r0
 800f07a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f07c:	1ad3      	subs	r3, r2, r3
 800f07e:	f241 3287 	movw	r2, #4999	; 0x1387
 800f082:	4293      	cmp	r3, r2
 800f084:	d902      	bls.n	800f08c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800f086:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f08a:	e063      	b.n	800f154 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800f08c:	897b      	ldrh	r3, [r7, #10]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d0e2      	beq.n	800f058 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f096:	2b03      	cmp	r3, #3
 800f098:	d036      	beq.n	800f108 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800f09a:	897b      	ldrh	r3, [r7, #10]
 800f09c:	461a      	mov	r2, r3
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681a      	ldr	r2, [r3, #0]
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0aa:	041b      	lsls	r3, r3, #16
 800f0ac:	4619      	mov	r1, r3
 800f0ae:	4610      	mov	r0, r2
 800f0b0:	f004 f9e4 	bl	801347c <SDMMC_CmdSendCSD>
 800f0b4:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800f0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d001      	beq.n	800f0c0 <SD_InitCard+0x100>
    {
      return errorstate;
 800f0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0be:	e049      	b.n	800f154 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	2100      	movs	r1, #0
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f003 ffa5 	bl	8013016 <SDMMC_GetResponse>
 800f0cc:	4602      	mov	r2, r0
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	2104      	movs	r1, #4
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f003 ff9c 	bl	8013016 <SDMMC_GetResponse>
 800f0de:	4602      	mov	r2, r0
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	2108      	movs	r1, #8
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f003 ff93 	bl	8013016 <SDMMC_GetResponse>
 800f0f0:	4602      	mov	r2, r0
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	210c      	movs	r1, #12
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f003 ff8a 	bl	8013016 <SDMMC_GetResponse>
 800f102:	4602      	mov	r2, r0
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	2104      	movs	r1, #4
 800f10e:	4618      	mov	r0, r3
 800f110:	f003 ff81 	bl	8013016 <SDMMC_GetResponse>
 800f114:	4603      	mov	r3, r0
 800f116:	0d1a      	lsrs	r2, r3, #20
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800f11c:	f107 030c 	add.w	r3, r7, #12
 800f120:	4619      	mov	r1, r3
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f7ff fb8c 	bl	800e840 <HAL_SD_GetCardCSD>
 800f128:	4603      	mov	r3, r0
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d002      	beq.n	800f134 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f12e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f132:	e00f      	b.n	800f154 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681a      	ldr	r2, [r3, #0]
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f13c:	041b      	lsls	r3, r3, #16
 800f13e:	4619      	mov	r1, r3
 800f140:	4610      	mov	r0, r2
 800f142:	f004 f893 	bl	801326c <SDMMC_CmdSelDesel>
 800f146:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800f148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d001      	beq.n	800f152 <SD_InitCard+0x192>
  {
    return errorstate;
 800f14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f150:	e000      	b.n	800f154 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800f152:	2300      	movs	r3, #0
}
 800f154:	4618      	mov	r0, r3
 800f156:	3740      	adds	r7, #64	; 0x40
 800f158:	46bd      	mov	sp, r7
 800f15a:	bd80      	pop	{r7, pc}

0800f15c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b086      	sub	sp, #24
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f164:	2300      	movs	r3, #0
 800f166:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800f168:	2300      	movs	r3, #0
 800f16a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800f16c:	2300      	movs	r3, #0
 800f16e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	4618      	mov	r0, r3
 800f176:	f004 f89c 	bl	80132b2 <SDMMC_CmdGoIdleState>
 800f17a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d001      	beq.n	800f186 <SD_PowerON+0x2a>
  {
    return errorstate;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	e072      	b.n	800f26c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	4618      	mov	r0, r3
 800f18c:	f004 f8af 	bl	80132ee <SDMMC_CmdOperCond>
 800f190:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f198:	d10d      	bne.n	800f1b6 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	2200      	movs	r2, #0
 800f19e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	f004 f884 	bl	80132b2 <SDMMC_CmdGoIdleState>
 800f1aa:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d004      	beq.n	800f1bc <SD_PowerON+0x60>
    {
      return errorstate;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	e05a      	b.n	800f26c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	2201      	movs	r2, #1
 800f1ba:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1c0:	2b01      	cmp	r3, #1
 800f1c2:	d137      	bne.n	800f234 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	2100      	movs	r1, #0
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f004 f8af 	bl	801332e <SDMMC_CmdAppCommand>
 800f1d0:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d02d      	beq.n	800f234 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f1d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f1dc:	e046      	b.n	800f26c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	2100      	movs	r1, #0
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f004 f8a2 	bl	801332e <SDMMC_CmdAppCommand>
 800f1ea:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d001      	beq.n	800f1f6 <SD_PowerON+0x9a>
    {
      return errorstate;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	e03a      	b.n	800f26c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	491e      	ldr	r1, [pc, #120]	; (800f274 <SD_PowerON+0x118>)
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f004 f8b9 	bl	8013374 <SDMMC_CmdAppOperCommand>
 800f202:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d002      	beq.n	800f210 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f20a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f20e:	e02d      	b.n	800f26c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	2100      	movs	r1, #0
 800f216:	4618      	mov	r0, r3
 800f218:	f003 fefd 	bl	8013016 <SDMMC_GetResponse>
 800f21c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	0fdb      	lsrs	r3, r3, #31
 800f222:	2b01      	cmp	r3, #1
 800f224:	d101      	bne.n	800f22a <SD_PowerON+0xce>
 800f226:	2301      	movs	r3, #1
 800f228:	e000      	b.n	800f22c <SD_PowerON+0xd0>
 800f22a:	2300      	movs	r3, #0
 800f22c:	613b      	str	r3, [r7, #16]

    count++;
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	3301      	adds	r3, #1
 800f232:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f23a:	4293      	cmp	r3, r2
 800f23c:	d802      	bhi.n	800f244 <SD_PowerON+0xe8>
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d0cc      	beq.n	800f1de <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f24a:	4293      	cmp	r3, r2
 800f24c:	d902      	bls.n	800f254 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f24e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f252:	e00b      	b.n	800f26c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2200      	movs	r2, #0
 800f258:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800f25a:	697b      	ldr	r3, [r7, #20]
 800f25c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f260:	2b00      	cmp	r3, #0
 800f262:	d002      	beq.n	800f26a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2201      	movs	r2, #1
 800f268:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800f26a:	2300      	movs	r3, #0
}
 800f26c:	4618      	mov	r0, r3
 800f26e:	3718      	adds	r7, #24
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}
 800f274:	c1100000 	.word	0xc1100000

0800f278 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b08c      	sub	sp, #48	; 0x30
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
 800f280:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f282:	f7f4 ff8d 	bl	80041a0 <HAL_GetTick>
 800f286:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	2100      	movs	r1, #0
 800f292:	4618      	mov	r0, r3
 800f294:	f003 febf 	bl	8013016 <SDMMC_GetResponse>
 800f298:	4603      	mov	r3, r0
 800f29a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f29e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f2a2:	d102      	bne.n	800f2aa <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f2a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f2a8:	e0b0      	b.n	800f40c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	2140      	movs	r1, #64	; 0x40
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f003 feef 	bl	8013094 <SDMMC_CmdBlockLength>
 800f2b6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f2b8:	6a3b      	ldr	r3, [r7, #32]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d005      	beq.n	800f2ca <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f2c6:	6a3b      	ldr	r3, [r7, #32]
 800f2c8:	e0a0      	b.n	800f40c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681a      	ldr	r2, [r3, #0]
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2d2:	041b      	lsls	r3, r3, #16
 800f2d4:	4619      	mov	r1, r3
 800f2d6:	4610      	mov	r0, r2
 800f2d8:	f004 f829 	bl	801332e <SDMMC_CmdAppCommand>
 800f2dc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f2de:	6a3b      	ldr	r3, [r7, #32]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d005      	beq.n	800f2f0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f2ec:	6a3b      	ldr	r3, [r7, #32]
 800f2ee:	e08d      	b.n	800f40c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f2f0:	f04f 33ff 	mov.w	r3, #4294967295
 800f2f4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800f2f6:	2340      	movs	r3, #64	; 0x40
 800f2f8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800f2fa:	2360      	movs	r3, #96	; 0x60
 800f2fc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f2fe:	2302      	movs	r3, #2
 800f300:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f302:	2300      	movs	r3, #0
 800f304:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f306:	2301      	movs	r3, #1
 800f308:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	f107 0208 	add.w	r2, r7, #8
 800f312:	4611      	mov	r1, r2
 800f314:	4618      	mov	r0, r3
 800f316:	f003 fe91 	bl	801303c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	4618      	mov	r0, r3
 800f320:	f004 f911 	bl	8013546 <SDMMC_CmdStatusRegister>
 800f324:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f326:	6a3b      	ldr	r3, [r7, #32]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d02b      	beq.n	800f384 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f334:	6a3b      	ldr	r3, [r7, #32]
 800f336:	e069      	b.n	800f40c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f33e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f342:	2b00      	cmp	r3, #0
 800f344:	d013      	beq.n	800f36e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800f346:	2300      	movs	r3, #0
 800f348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f34a:	e00d      	b.n	800f368 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	4618      	mov	r0, r3
 800f352:	f003 fdeb 	bl	8012f2c <SDMMC_ReadFIFO>
 800f356:	4602      	mov	r2, r0
 800f358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f35a:	601a      	str	r2, [r3, #0]
        pData++;
 800f35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f35e:	3304      	adds	r3, #4
 800f360:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800f362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f364:	3301      	adds	r3, #1
 800f366:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f36a:	2b07      	cmp	r3, #7
 800f36c:	d9ee      	bls.n	800f34c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f36e:	f7f4 ff17 	bl	80041a0 <HAL_GetTick>
 800f372:	4602      	mov	r2, r0
 800f374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f376:	1ad3      	subs	r3, r2, r3
 800f378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f37c:	d102      	bne.n	800f384 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f37e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f382:	e043      	b.n	800f40c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f38a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d0d2      	beq.n	800f338 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f398:	f003 0308 	and.w	r3, r3, #8
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d001      	beq.n	800f3a4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f3a0:	2308      	movs	r3, #8
 800f3a2:	e033      	b.n	800f40c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3aa:	f003 0302 	and.w	r3, r3, #2
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d001      	beq.n	800f3b6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f3b2:	2302      	movs	r3, #2
 800f3b4:	e02a      	b.n	800f40c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3bc:	f003 0320 	and.w	r3, r3, #32
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d017      	beq.n	800f3f4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800f3c4:	2320      	movs	r3, #32
 800f3c6:	e021      	b.n	800f40c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f003 fdad 	bl	8012f2c <SDMMC_ReadFIFO>
 800f3d2:	4602      	mov	r2, r0
 800f3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3d6:	601a      	str	r2, [r3, #0]
    pData++;
 800f3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3da:	3304      	adds	r3, #4
 800f3dc:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f3de:	f7f4 fedf 	bl	80041a0 <HAL_GetTick>
 800f3e2:	4602      	mov	r2, r0
 800f3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e6:	1ad3      	subs	r3, r2, r3
 800f3e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3ec:	d102      	bne.n	800f3f4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f3ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f3f2:	e00b      	b.n	800f40c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d1e2      	bne.n	800f3c8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	4a03      	ldr	r2, [pc, #12]	; (800f414 <SD_SendSDStatus+0x19c>)
 800f408:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800f40a:	2300      	movs	r3, #0
}
 800f40c:	4618      	mov	r0, r3
 800f40e:	3730      	adds	r7, #48	; 0x30
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}
 800f414:	18000f3a 	.word	0x18000f3a

0800f418 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b084      	sub	sp, #16
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
 800f420:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d102      	bne.n	800f42e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800f428:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f42c:	e018      	b.n	800f460 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681a      	ldr	r2, [r3, #0]
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f436:	041b      	lsls	r3, r3, #16
 800f438:	4619      	mov	r1, r3
 800f43a:	4610      	mov	r0, r2
 800f43c:	f004 f860 	bl	8013500 <SDMMC_CmdSendStatus>
 800f440:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d001      	beq.n	800f44c <SD_SendStatus+0x34>
  {
    return errorstate;
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	e009      	b.n	800f460 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	2100      	movs	r1, #0
 800f452:	4618      	mov	r0, r3
 800f454:	f003 fddf 	bl	8013016 <SDMMC_GetResponse>
 800f458:	4602      	mov	r2, r0
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800f45e:	2300      	movs	r3, #0
}
 800f460:	4618      	mov	r0, r3
 800f462:	3710      	adds	r7, #16
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}

0800f468 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b086      	sub	sp, #24
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f470:	2300      	movs	r3, #0
 800f472:	60fb      	str	r3, [r7, #12]
 800f474:	2300      	movs	r3, #0
 800f476:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	2100      	movs	r1, #0
 800f47e:	4618      	mov	r0, r3
 800f480:	f003 fdc9 	bl	8013016 <SDMMC_GetResponse>
 800f484:	4603      	mov	r3, r0
 800f486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f48a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f48e:	d102      	bne.n	800f496 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f490:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f494:	e02f      	b.n	800f4f6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f496:	f107 030c 	add.w	r3, r7, #12
 800f49a:	4619      	mov	r1, r3
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f000 f879 	bl	800f594 <SD_FindSCR>
 800f4a2:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f4a4:	697b      	ldr	r3, [r7, #20]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d001      	beq.n	800f4ae <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f4aa:	697b      	ldr	r3, [r7, #20]
 800f4ac:	e023      	b.n	800f4f6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f4ae:	693b      	ldr	r3, [r7, #16]
 800f4b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d01c      	beq.n	800f4f2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681a      	ldr	r2, [r3, #0]
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4c0:	041b      	lsls	r3, r3, #16
 800f4c2:	4619      	mov	r1, r3
 800f4c4:	4610      	mov	r0, r2
 800f4c6:	f003 ff32 	bl	801332e <SDMMC_CmdAppCommand>
 800f4ca:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f4cc:	697b      	ldr	r3, [r7, #20]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d001      	beq.n	800f4d6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f4d2:	697b      	ldr	r3, [r7, #20]
 800f4d4:	e00f      	b.n	800f4f6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	2102      	movs	r1, #2
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f003 ff69 	bl	80133b4 <SDMMC_CmdBusWidth>
 800f4e2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f4e4:	697b      	ldr	r3, [r7, #20]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d001      	beq.n	800f4ee <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f4ea:	697b      	ldr	r3, [r7, #20]
 800f4ec:	e003      	b.n	800f4f6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	e001      	b.n	800f4f6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f4f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	3718      	adds	r7, #24
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}

0800f4fe <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f4fe:	b580      	push	{r7, lr}
 800f500:	b086      	sub	sp, #24
 800f502:	af00      	add	r7, sp, #0
 800f504:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f506:	2300      	movs	r3, #0
 800f508:	60fb      	str	r3, [r7, #12]
 800f50a:	2300      	movs	r3, #0
 800f50c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	2100      	movs	r1, #0
 800f514:	4618      	mov	r0, r3
 800f516:	f003 fd7e 	bl	8013016 <SDMMC_GetResponse>
 800f51a:	4603      	mov	r3, r0
 800f51c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f520:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f524:	d102      	bne.n	800f52c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f526:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f52a:	e02f      	b.n	800f58c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f52c:	f107 030c 	add.w	r3, r7, #12
 800f530:	4619      	mov	r1, r3
 800f532:	6878      	ldr	r0, [r7, #4]
 800f534:	f000 f82e 	bl	800f594 <SD_FindSCR>
 800f538:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d001      	beq.n	800f544 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	e023      	b.n	800f58c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f544:	693b      	ldr	r3, [r7, #16]
 800f546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d01c      	beq.n	800f588 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681a      	ldr	r2, [r3, #0]
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f556:	041b      	lsls	r3, r3, #16
 800f558:	4619      	mov	r1, r3
 800f55a:	4610      	mov	r0, r2
 800f55c:	f003 fee7 	bl	801332e <SDMMC_CmdAppCommand>
 800f560:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d001      	beq.n	800f56c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f568:	697b      	ldr	r3, [r7, #20]
 800f56a:	e00f      	b.n	800f58c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	2100      	movs	r1, #0
 800f572:	4618      	mov	r0, r3
 800f574:	f003 ff1e 	bl	80133b4 <SDMMC_CmdBusWidth>
 800f578:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f57a:	697b      	ldr	r3, [r7, #20]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d001      	beq.n	800f584 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f580:	697b      	ldr	r3, [r7, #20]
 800f582:	e003      	b.n	800f58c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f584:	2300      	movs	r3, #0
 800f586:	e001      	b.n	800f58c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f588:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	3718      	adds	r7, #24
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}

0800f594 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b08e      	sub	sp, #56	; 0x38
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f59e:	f7f4 fdff 	bl	80041a0 <HAL_GetTick>
 800f5a2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	60bb      	str	r3, [r7, #8]
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	2108      	movs	r1, #8
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f003 fd6a 	bl	8013094 <SDMMC_CmdBlockLength>
 800f5c0:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d001      	beq.n	800f5cc <SD_FindSCR+0x38>
  {
    return errorstate;
 800f5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ca:	e0ad      	b.n	800f728 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681a      	ldr	r2, [r3, #0]
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5d4:	041b      	lsls	r3, r3, #16
 800f5d6:	4619      	mov	r1, r3
 800f5d8:	4610      	mov	r0, r2
 800f5da:	f003 fea8 	bl	801332e <SDMMC_CmdAppCommand>
 800f5de:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d001      	beq.n	800f5ea <SD_FindSCR+0x56>
  {
    return errorstate;
 800f5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5e8:	e09e      	b.n	800f728 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f5ea:	f04f 33ff 	mov.w	r3, #4294967295
 800f5ee:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f5f0:	2308      	movs	r3, #8
 800f5f2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800f5f4:	2330      	movs	r3, #48	; 0x30
 800f5f6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f5f8:	2302      	movs	r3, #2
 800f5fa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f600:	2301      	movs	r3, #1
 800f602:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	f107 0210 	add.w	r2, r7, #16
 800f60c:	4611      	mov	r1, r2
 800f60e:	4618      	mov	r0, r3
 800f610:	f003 fd14 	bl	801303c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	4618      	mov	r0, r3
 800f61a:	f003 feee 	bl	80133fa <SDMMC_CmdSendSCR>
 800f61e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f622:	2b00      	cmp	r3, #0
 800f624:	d027      	beq.n	800f676 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800f626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f628:	e07e      	b.n	800f728 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f630:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f634:	2b00      	cmp	r3, #0
 800f636:	d113      	bne.n	800f660 <SD_FindSCR+0xcc>
 800f638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d110      	bne.n	800f660 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	4618      	mov	r0, r3
 800f644:	f003 fc72 	bl	8012f2c <SDMMC_ReadFIFO>
 800f648:	4603      	mov	r3, r0
 800f64a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	4618      	mov	r0, r3
 800f652:	f003 fc6b 	bl	8012f2c <SDMMC_ReadFIFO>
 800f656:	4603      	mov	r3, r0
 800f658:	60fb      	str	r3, [r7, #12]
      index++;
 800f65a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f65c:	3301      	adds	r3, #1
 800f65e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f660:	f7f4 fd9e 	bl	80041a0 <HAL_GetTick>
 800f664:	4602      	mov	r2, r0
 800f666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f668:	1ad3      	subs	r3, r2, r3
 800f66a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f66e:	d102      	bne.n	800f676 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f670:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f674:	e058      	b.n	800f728 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f67c:	f240 532a 	movw	r3, #1322	; 0x52a
 800f680:	4013      	ands	r3, r2
 800f682:	2b00      	cmp	r3, #0
 800f684:	d0d1      	beq.n	800f62a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f68c:	f003 0308 	and.w	r3, r3, #8
 800f690:	2b00      	cmp	r3, #0
 800f692:	d005      	beq.n	800f6a0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	2208      	movs	r2, #8
 800f69a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f69c:	2308      	movs	r3, #8
 800f69e:	e043      	b.n	800f728 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6a6:	f003 0302 	and.w	r3, r3, #2
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d005      	beq.n	800f6ba <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	2202      	movs	r2, #2
 800f6b4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f6b6:	2302      	movs	r3, #2
 800f6b8:	e036      	b.n	800f728 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6c0:	f003 0320 	and.w	r3, r3, #32
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d005      	beq.n	800f6d4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	2220      	movs	r2, #32
 800f6ce:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800f6d0:	2320      	movs	r3, #32
 800f6d2:	e029      	b.n	800f728 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	4a15      	ldr	r2, [pc, #84]	; (800f730 <SD_FindSCR+0x19c>)
 800f6da:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	061a      	lsls	r2, r3, #24
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	021b      	lsls	r3, r3, #8
 800f6e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f6e8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	0a1b      	lsrs	r3, r3, #8
 800f6ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f6f2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	0e1b      	lsrs	r3, r3, #24
 800f6f8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6fc:	601a      	str	r2, [r3, #0]
    scr++;
 800f6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f700:	3304      	adds	r3, #4
 800f702:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f704:	68bb      	ldr	r3, [r7, #8]
 800f706:	061a      	lsls	r2, r3, #24
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	021b      	lsls	r3, r3, #8
 800f70c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f710:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	0a1b      	lsrs	r3, r3, #8
 800f716:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f71a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	0e1b      	lsrs	r3, r3, #24
 800f720:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f724:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800f726:	2300      	movs	r3, #0
}
 800f728:	4618      	mov	r0, r3
 800f72a:	3738      	adds	r7, #56	; 0x38
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd80      	pop	{r7, pc}
 800f730:	18000f3a 	.word	0x18000f3a

0800f734 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b086      	sub	sp, #24
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f740:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f746:	2b1f      	cmp	r3, #31
 800f748:	d936      	bls.n	800f7b8 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800f74a:	2300      	movs	r3, #0
 800f74c:	617b      	str	r3, [r7, #20]
 800f74e:	e027      	b.n	800f7a0 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	4618      	mov	r0, r3
 800f756:	f003 fbe9 	bl	8012f2c <SDMMC_ReadFIFO>
 800f75a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	b2da      	uxtb	r2, r3
 800f760:	693b      	ldr	r3, [r7, #16]
 800f762:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f764:	693b      	ldr	r3, [r7, #16]
 800f766:	3301      	adds	r3, #1
 800f768:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	0a1b      	lsrs	r3, r3, #8
 800f76e:	b2da      	uxtb	r2, r3
 800f770:	693b      	ldr	r3, [r7, #16]
 800f772:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f774:	693b      	ldr	r3, [r7, #16]
 800f776:	3301      	adds	r3, #1
 800f778:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	0c1b      	lsrs	r3, r3, #16
 800f77e:	b2da      	uxtb	r2, r3
 800f780:	693b      	ldr	r3, [r7, #16]
 800f782:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f784:	693b      	ldr	r3, [r7, #16]
 800f786:	3301      	adds	r3, #1
 800f788:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	0e1b      	lsrs	r3, r3, #24
 800f78e:	b2da      	uxtb	r2, r3
 800f790:	693b      	ldr	r3, [r7, #16]
 800f792:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f794:	693b      	ldr	r3, [r7, #16]
 800f796:	3301      	adds	r3, #1
 800f798:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800f79a:	697b      	ldr	r3, [r7, #20]
 800f79c:	3301      	adds	r3, #1
 800f79e:	617b      	str	r3, [r7, #20]
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	2b07      	cmp	r3, #7
 800f7a4:	d9d4      	bls.n	800f750 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	693a      	ldr	r2, [r7, #16]
 800f7aa:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7b0:	f1a3 0220 	sub.w	r2, r3, #32
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800f7b8:	bf00      	nop
 800f7ba:	3718      	adds	r7, #24
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}

0800f7c0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b086      	sub	sp, #24
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	69db      	ldr	r3, [r3, #28]
 800f7cc:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	6a1b      	ldr	r3, [r3, #32]
 800f7d2:	2b1f      	cmp	r3, #31
 800f7d4:	d93a      	bls.n	800f84c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	617b      	str	r3, [r7, #20]
 800f7da:	e02b      	b.n	800f834 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800f7dc:	693b      	ldr	r3, [r7, #16]
 800f7de:	781b      	ldrb	r3, [r3, #0]
 800f7e0:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f7e2:	693b      	ldr	r3, [r7, #16]
 800f7e4:	3301      	adds	r3, #1
 800f7e6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	021a      	lsls	r2, r3, #8
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	4313      	orrs	r3, r2
 800f7f2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f7f4:	693b      	ldr	r3, [r7, #16]
 800f7f6:	3301      	adds	r3, #1
 800f7f8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800f7fa:	693b      	ldr	r3, [r7, #16]
 800f7fc:	781b      	ldrb	r3, [r3, #0]
 800f7fe:	041a      	lsls	r2, r3, #16
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	4313      	orrs	r3, r2
 800f804:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f806:	693b      	ldr	r3, [r7, #16]
 800f808:	3301      	adds	r3, #1
 800f80a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800f80c:	693b      	ldr	r3, [r7, #16]
 800f80e:	781b      	ldrb	r3, [r3, #0]
 800f810:	061a      	lsls	r2, r3, #24
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	4313      	orrs	r3, r2
 800f816:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	3301      	adds	r3, #1
 800f81c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	f107 020c 	add.w	r2, r7, #12
 800f826:	4611      	mov	r1, r2
 800f828:	4618      	mov	r0, r3
 800f82a:	f003 fb8c 	bl	8012f46 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	3301      	adds	r3, #1
 800f832:	617b      	str	r3, [r7, #20]
 800f834:	697b      	ldr	r3, [r7, #20]
 800f836:	2b07      	cmp	r3, #7
 800f838:	d9d0      	bls.n	800f7dc <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	693a      	ldr	r2, [r7, #16]
 800f83e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	6a1b      	ldr	r3, [r3, #32]
 800f844:	f1a3 0220 	sub.w	r2, r3, #32
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	621a      	str	r2, [r3, #32]
  }
}
 800f84c:	bf00      	nop
 800f84e:	3718      	adds	r7, #24
 800f850:	46bd      	mov	sp, r7
 800f852:	bd80      	pop	{r7, pc}

0800f854 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800f854:	b480      	push	{r7}
 800f856:	b083      	sub	sp, #12
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800f85c:	bf00      	nop
 800f85e:	370c      	adds	r7, #12
 800f860:	46bd      	mov	sp, r7
 800f862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f866:	4770      	bx	lr

0800f868 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800f868:	b480      	push	{r7}
 800f86a:	b083      	sub	sp, #12
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800f870:	bf00      	nop
 800f872:	370c      	adds	r7, #12
 800f874:	46bd      	mov	sp, r7
 800f876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87a:	4770      	bx	lr

0800f87c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800f87c:	b480      	push	{r7}
 800f87e:	b083      	sub	sp, #12
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800f884:	bf00      	nop
 800f886:	370c      	adds	r7, #12
 800f888:	46bd      	mov	sp, r7
 800f88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88e:	4770      	bx	lr

0800f890 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800f890:	b480      	push	{r7}
 800f892:	b083      	sub	sp, #12
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800f898:	bf00      	nop
 800f89a:	370c      	adds	r7, #12
 800f89c:	46bd      	mov	sp, r7
 800f89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a2:	4770      	bx	lr

0800f8a4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b084      	sub	sp, #16
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d101      	bne.n	800f8b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f8b2:	2301      	movs	r3, #1
 800f8b4:	e10f      	b.n	800fad6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	4a87      	ldr	r2, [pc, #540]	; (800fae0 <HAL_SPI_Init+0x23c>)
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	d00f      	beq.n	800f8e6 <HAL_SPI_Init+0x42>
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	4a86      	ldr	r2, [pc, #536]	; (800fae4 <HAL_SPI_Init+0x240>)
 800f8cc:	4293      	cmp	r3, r2
 800f8ce:	d00a      	beq.n	800f8e6 <HAL_SPI_Init+0x42>
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	4a84      	ldr	r2, [pc, #528]	; (800fae8 <HAL_SPI_Init+0x244>)
 800f8d6:	4293      	cmp	r3, r2
 800f8d8:	d005      	beq.n	800f8e6 <HAL_SPI_Init+0x42>
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	68db      	ldr	r3, [r3, #12]
 800f8de:	2b0f      	cmp	r3, #15
 800f8e0:	d901      	bls.n	800f8e6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800f8e2:	2301      	movs	r3, #1
 800f8e4:	e0f7      	b.n	800fad6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800f8e6:	6878      	ldr	r0, [r7, #4]
 800f8e8:	f000 fd5a 	bl	80103a0 <SPI_GetPacketSize>
 800f8ec:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	4a7b      	ldr	r2, [pc, #492]	; (800fae0 <HAL_SPI_Init+0x23c>)
 800f8f4:	4293      	cmp	r3, r2
 800f8f6:	d00c      	beq.n	800f912 <HAL_SPI_Init+0x6e>
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	4a79      	ldr	r2, [pc, #484]	; (800fae4 <HAL_SPI_Init+0x240>)
 800f8fe:	4293      	cmp	r3, r2
 800f900:	d007      	beq.n	800f912 <HAL_SPI_Init+0x6e>
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	4a78      	ldr	r2, [pc, #480]	; (800fae8 <HAL_SPI_Init+0x244>)
 800f908:	4293      	cmp	r3, r2
 800f90a:	d002      	beq.n	800f912 <HAL_SPI_Init+0x6e>
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	2b08      	cmp	r3, #8
 800f910:	d811      	bhi.n	800f936 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f916:	4a72      	ldr	r2, [pc, #456]	; (800fae0 <HAL_SPI_Init+0x23c>)
 800f918:	4293      	cmp	r3, r2
 800f91a:	d009      	beq.n	800f930 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	4a70      	ldr	r2, [pc, #448]	; (800fae4 <HAL_SPI_Init+0x240>)
 800f922:	4293      	cmp	r3, r2
 800f924:	d004      	beq.n	800f930 <HAL_SPI_Init+0x8c>
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	4a6f      	ldr	r2, [pc, #444]	; (800fae8 <HAL_SPI_Init+0x244>)
 800f92c:	4293      	cmp	r3, r2
 800f92e:	d104      	bne.n	800f93a <HAL_SPI_Init+0x96>
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	2b10      	cmp	r3, #16
 800f934:	d901      	bls.n	800f93a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800f936:	2301      	movs	r3, #1
 800f938:	e0cd      	b.n	800fad6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f940:	b2db      	uxtb	r3, r3
 800f942:	2b00      	cmp	r3, #0
 800f944:	d106      	bne.n	800f954 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	2200      	movs	r2, #0
 800f94a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f94e:	6878      	ldr	r0, [r7, #4]
 800f950:	f7f3 fd96 	bl	8003480 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	2202      	movs	r2, #2
 800f958:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	681a      	ldr	r2, [r3, #0]
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	f022 0201 	bic.w	r2, r2, #1
 800f96a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	689b      	ldr	r3, [r3, #8]
 800f972:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800f976:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	699b      	ldr	r3, [r3, #24]
 800f97c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f980:	d119      	bne.n	800f9b6 <HAL_SPI_Init+0x112>
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	685b      	ldr	r3, [r3, #4]
 800f986:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f98a:	d103      	bne.n	800f994 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f990:	2b00      	cmp	r3, #0
 800f992:	d008      	beq.n	800f9a6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d10c      	bne.n	800f9b6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f9a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f9a4:	d107      	bne.n	800f9b6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	681a      	ldr	r2, [r3, #0]
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f9b4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	685b      	ldr	r3, [r3, #4]
 800f9ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d00f      	beq.n	800f9e2 <HAL_SPI_Init+0x13e>
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	68db      	ldr	r3, [r3, #12]
 800f9c6:	2b06      	cmp	r3, #6
 800f9c8:	d90b      	bls.n	800f9e2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	430a      	orrs	r2, r1
 800f9de:	601a      	str	r2, [r3, #0]
 800f9e0:	e007      	b.n	800f9f2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	681a      	ldr	r2, [r3, #0]
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f9f0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	69da      	ldr	r2, [r3, #28]
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9fa:	431a      	orrs	r2, r3
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	431a      	orrs	r2, r3
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa04:	ea42 0103 	orr.w	r1, r2, r3
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	68da      	ldr	r2, [r3, #12]
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	430a      	orrs	r2, r1
 800fa12:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa1c:	431a      	orrs	r2, r3
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa22:	431a      	orrs	r2, r3
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	699b      	ldr	r3, [r3, #24]
 800fa28:	431a      	orrs	r2, r3
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	691b      	ldr	r3, [r3, #16]
 800fa2e:	431a      	orrs	r2, r3
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	695b      	ldr	r3, [r3, #20]
 800fa34:	431a      	orrs	r2, r3
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6a1b      	ldr	r3, [r3, #32]
 800fa3a:	431a      	orrs	r2, r3
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	685b      	ldr	r3, [r3, #4]
 800fa40:	431a      	orrs	r2, r3
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa46:	431a      	orrs	r2, r3
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	689b      	ldr	r3, [r3, #8]
 800fa4c:	431a      	orrs	r2, r3
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fa52:	ea42 0103 	orr.w	r1, r2, r3
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	430a      	orrs	r2, r1
 800fa60:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	685b      	ldr	r3, [r3, #4]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d113      	bne.n	800fa92 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	689b      	ldr	r3, [r3, #8]
 800fa70:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fa7c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	689b      	ldr	r3, [r3, #8]
 800fa84:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fa90:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	f022 0201 	bic.w	r2, r2, #1
 800faa0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	685b      	ldr	r3, [r3, #4]
 800faa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d00a      	beq.n	800fac4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	68db      	ldr	r3, [r3, #12]
 800fab4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	430a      	orrs	r2, r1
 800fac2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2200      	movs	r2, #0
 800fac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2201      	movs	r2, #1
 800fad0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800fad4:	2300      	movs	r3, #0
}
 800fad6:	4618      	mov	r0, r3
 800fad8:	3710      	adds	r7, #16
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}
 800fade:	bf00      	nop
 800fae0:	40013000 	.word	0x40013000
 800fae4:	40003800 	.word	0x40003800
 800fae8:	40003c00 	.word	0x40003c00

0800faec <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b08a      	sub	sp, #40	; 0x28
 800faf0:	af02      	add	r7, sp, #8
 800faf2:	60f8      	str	r0, [r7, #12]
 800faf4:	60b9      	str	r1, [r7, #8]
 800faf6:	603b      	str	r3, [r7, #0]
 800faf8:	4613      	mov	r3, r2
 800fafa:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	3320      	adds	r3, #32
 800fb02:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fb04:	2300      	movs	r3, #0
 800fb06:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fb0e:	2b01      	cmp	r3, #1
 800fb10:	d101      	bne.n	800fb16 <HAL_SPI_Transmit+0x2a>
 800fb12:	2302      	movs	r3, #2
 800fb14:	e1e1      	b.n	800feda <HAL_SPI_Transmit+0x3ee>
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	2201      	movs	r2, #1
 800fb1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fb1e:	f7f4 fb3f 	bl	80041a0 <HAL_GetTick>
 800fb22:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fb2a:	b2db      	uxtb	r3, r3
 800fb2c:	2b01      	cmp	r3, #1
 800fb2e:	d007      	beq.n	800fb40 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800fb30:	2302      	movs	r3, #2
 800fb32:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	2200      	movs	r2, #0
 800fb38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fb3c:	7efb      	ldrb	r3, [r7, #27]
 800fb3e:	e1cc      	b.n	800feda <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800fb40:	68bb      	ldr	r3, [r7, #8]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d002      	beq.n	800fb4c <HAL_SPI_Transmit+0x60>
 800fb46:	88fb      	ldrh	r3, [r7, #6]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d107      	bne.n	800fb5c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800fb4c:	2301      	movs	r3, #1
 800fb4e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	2200      	movs	r2, #0
 800fb54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fb58:	7efb      	ldrb	r3, [r7, #27]
 800fb5a:	e1be      	b.n	800feda <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	2203      	movs	r2, #3
 800fb60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	2200      	movs	r2, #0
 800fb68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	68ba      	ldr	r2, [r7, #8]
 800fb70:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	88fa      	ldrh	r2, [r7, #6]
 800fb76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	88fa      	ldrh	r2, [r7, #6]
 800fb7e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	2200      	movs	r2, #0
 800fb86:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	2200      	movs	r2, #0
 800fb94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	2200      	movs	r2, #0
 800fba2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	689b      	ldr	r3, [r3, #8]
 800fba8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800fbac:	d108      	bne.n	800fbc0 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	681a      	ldr	r2, [r3, #0]
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fbbc:	601a      	str	r2, [r3, #0]
 800fbbe:	e009      	b.n	800fbd4 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	68db      	ldr	r3, [r3, #12]
 800fbc6:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fbd2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	685a      	ldr	r2, [r3, #4]
 800fbda:	4b96      	ldr	r3, [pc, #600]	; (800fe34 <HAL_SPI_Transmit+0x348>)
 800fbdc:	4013      	ands	r3, r2
 800fbde:	88f9      	ldrh	r1, [r7, #6]
 800fbe0:	68fa      	ldr	r2, [r7, #12]
 800fbe2:	6812      	ldr	r2, [r2, #0]
 800fbe4:	430b      	orrs	r3, r1
 800fbe6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	681a      	ldr	r2, [r3, #0]
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	f042 0201 	orr.w	r2, r2, #1
 800fbf6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	685b      	ldr	r3, [r3, #4]
 800fbfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fc00:	d107      	bne.n	800fc12 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	681a      	ldr	r2, [r3, #0]
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fc10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	68db      	ldr	r3, [r3, #12]
 800fc16:	2b0f      	cmp	r3, #15
 800fc18:	d947      	bls.n	800fcaa <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800fc1a:	e03f      	b.n	800fc9c <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	695b      	ldr	r3, [r3, #20]
 800fc22:	f003 0302 	and.w	r3, r3, #2
 800fc26:	2b02      	cmp	r3, #2
 800fc28:	d114      	bne.n	800fc54 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	6812      	ldr	r2, [r2, #0]
 800fc34:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc3a:	1d1a      	adds	r2, r3, #4
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc46:	b29b      	uxth	r3, r3
 800fc48:	3b01      	subs	r3, #1
 800fc4a:	b29a      	uxth	r2, r3
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fc52:	e023      	b.n	800fc9c <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fc54:	f7f4 faa4 	bl	80041a0 <HAL_GetTick>
 800fc58:	4602      	mov	r2, r0
 800fc5a:	697b      	ldr	r3, [r7, #20]
 800fc5c:	1ad3      	subs	r3, r2, r3
 800fc5e:	683a      	ldr	r2, [r7, #0]
 800fc60:	429a      	cmp	r2, r3
 800fc62:	d803      	bhi.n	800fc6c <HAL_SPI_Transmit+0x180>
 800fc64:	683b      	ldr	r3, [r7, #0]
 800fc66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc6a:	d102      	bne.n	800fc72 <HAL_SPI_Transmit+0x186>
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d114      	bne.n	800fc9c <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fc72:	68f8      	ldr	r0, [r7, #12]
 800fc74:	f000 fac6 	bl	8010204 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	2201      	movs	r2, #1
 800fc94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fc98:	2303      	movs	r3, #3
 800fc9a:	e11e      	b.n	800feda <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fca2:	b29b      	uxth	r3, r3
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d1b9      	bne.n	800fc1c <HAL_SPI_Transmit+0x130>
 800fca8:	e0f1      	b.n	800fe8e <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	68db      	ldr	r3, [r3, #12]
 800fcae:	2b07      	cmp	r3, #7
 800fcb0:	f240 80e6 	bls.w	800fe80 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800fcb4:	e05d      	b.n	800fd72 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	695b      	ldr	r3, [r3, #20]
 800fcbc:	f003 0302 	and.w	r3, r3, #2
 800fcc0:	2b02      	cmp	r3, #2
 800fcc2:	d132      	bne.n	800fd2a <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fcca:	b29b      	uxth	r3, r3
 800fccc:	2b01      	cmp	r3, #1
 800fcce:	d918      	bls.n	800fd02 <HAL_SPI_Transmit+0x216>
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d014      	beq.n	800fd02 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	6812      	ldr	r2, [r2, #0]
 800fce2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fce8:	1d1a      	adds	r2, r3, #4
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fcf4:	b29b      	uxth	r3, r3
 800fcf6:	3b02      	subs	r3, #2
 800fcf8:	b29a      	uxth	r2, r3
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fd00:	e037      	b.n	800fd72 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd06:	881a      	ldrh	r2, [r3, #0]
 800fd08:	69fb      	ldr	r3, [r7, #28]
 800fd0a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd10:	1c9a      	adds	r2, r3, #2
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fd1c:	b29b      	uxth	r3, r3
 800fd1e:	3b01      	subs	r3, #1
 800fd20:	b29a      	uxth	r2, r3
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fd28:	e023      	b.n	800fd72 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fd2a:	f7f4 fa39 	bl	80041a0 <HAL_GetTick>
 800fd2e:	4602      	mov	r2, r0
 800fd30:	697b      	ldr	r3, [r7, #20]
 800fd32:	1ad3      	subs	r3, r2, r3
 800fd34:	683a      	ldr	r2, [r7, #0]
 800fd36:	429a      	cmp	r2, r3
 800fd38:	d803      	bhi.n	800fd42 <HAL_SPI_Transmit+0x256>
 800fd3a:	683b      	ldr	r3, [r7, #0]
 800fd3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd40:	d102      	bne.n	800fd48 <HAL_SPI_Transmit+0x25c>
 800fd42:	683b      	ldr	r3, [r7, #0]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d114      	bne.n	800fd72 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fd48:	68f8      	ldr	r0, [r7, #12]
 800fd4a:	f000 fa5b 	bl	8010204 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	2200      	movs	r2, #0
 800fd52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	2201      	movs	r2, #1
 800fd6a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fd6e:	2303      	movs	r3, #3
 800fd70:	e0b3      	b.n	800feda <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fd78:	b29b      	uxth	r3, r3
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d19b      	bne.n	800fcb6 <HAL_SPI_Transmit+0x1ca>
 800fd7e:	e086      	b.n	800fe8e <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	695b      	ldr	r3, [r3, #20]
 800fd86:	f003 0302 	and.w	r3, r3, #2
 800fd8a:	2b02      	cmp	r3, #2
 800fd8c:	d154      	bne.n	800fe38 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fd94:	b29b      	uxth	r3, r3
 800fd96:	2b03      	cmp	r3, #3
 800fd98:	d918      	bls.n	800fdcc <HAL_SPI_Transmit+0x2e0>
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd9e:	2b40      	cmp	r3, #64	; 0x40
 800fda0:	d914      	bls.n	800fdcc <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	6812      	ldr	r2, [r2, #0]
 800fdac:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fdb2:	1d1a      	adds	r2, r3, #4
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fdbe:	b29b      	uxth	r3, r3
 800fdc0:	3b04      	subs	r3, #4
 800fdc2:	b29a      	uxth	r2, r3
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fdca:	e059      	b.n	800fe80 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fdd2:	b29b      	uxth	r3, r3
 800fdd4:	2b01      	cmp	r3, #1
 800fdd6:	d917      	bls.n	800fe08 <HAL_SPI_Transmit+0x31c>
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d013      	beq.n	800fe08 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fde4:	881a      	ldrh	r2, [r3, #0]
 800fde6:	69fb      	ldr	r3, [r7, #28]
 800fde8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fdee:	1c9a      	adds	r2, r3, #2
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fdfa:	b29b      	uxth	r3, r3
 800fdfc:	3b02      	subs	r3, #2
 800fdfe:	b29a      	uxth	r2, r3
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fe06:	e03b      	b.n	800fe80 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	3320      	adds	r3, #32
 800fe12:	7812      	ldrb	r2, [r2, #0]
 800fe14:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe1a:	1c5a      	adds	r2, r3, #1
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fe26:	b29b      	uxth	r3, r3
 800fe28:	3b01      	subs	r3, #1
 800fe2a:	b29a      	uxth	r2, r3
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fe32:	e025      	b.n	800fe80 <HAL_SPI_Transmit+0x394>
 800fe34:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fe38:	f7f4 f9b2 	bl	80041a0 <HAL_GetTick>
 800fe3c:	4602      	mov	r2, r0
 800fe3e:	697b      	ldr	r3, [r7, #20]
 800fe40:	1ad3      	subs	r3, r2, r3
 800fe42:	683a      	ldr	r2, [r7, #0]
 800fe44:	429a      	cmp	r2, r3
 800fe46:	d803      	bhi.n	800fe50 <HAL_SPI_Transmit+0x364>
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe4e:	d102      	bne.n	800fe56 <HAL_SPI_Transmit+0x36a>
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d114      	bne.n	800fe80 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fe56:	68f8      	ldr	r0, [r7, #12]
 800fe58:	f000 f9d4 	bl	8010204 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	2200      	movs	r2, #0
 800fe60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	2201      	movs	r2, #1
 800fe78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fe7c:	2303      	movs	r3, #3
 800fe7e:	e02c      	b.n	800feda <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fe86:	b29b      	uxth	r3, r3
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	f47f af79 	bne.w	800fd80 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800fe8e:	697b      	ldr	r3, [r7, #20]
 800fe90:	9300      	str	r3, [sp, #0]
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	2200      	movs	r2, #0
 800fe96:	2108      	movs	r1, #8
 800fe98:	68f8      	ldr	r0, [r7, #12]
 800fe9a:	f000 fa53 	bl	8010344 <SPI_WaitOnFlagUntilTimeout>
 800fe9e:	4603      	mov	r3, r0
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d007      	beq.n	800feb4 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800feaa:	f043 0220 	orr.w	r2, r3, #32
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800feb4:	68f8      	ldr	r0, [r7, #12]
 800feb6:	f000 f9a5 	bl	8010204 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	2200      	movs	r2, #0
 800febe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	2201      	movs	r2, #1
 800fec6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d001      	beq.n	800fed8 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800fed4:	2301      	movs	r3, #1
 800fed6:	e000      	b.n	800feda <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800fed8:	7efb      	ldrb	r3, [r7, #27]
}
 800feda:	4618      	mov	r0, r3
 800fedc:	3720      	adds	r7, #32
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}
 800fee2:	bf00      	nop

0800fee4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b088      	sub	sp, #32
 800fee8:	af00      	add	r7, sp, #0
 800feea:	60f8      	str	r0, [r7, #12]
 800feec:	60b9      	str	r1, [r7, #8]
 800feee:	603b      	str	r3, [r7, #0]
 800fef0:	4613      	mov	r3, r2
 800fef2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fef4:	2300      	movs	r3, #0
 800fef6:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	3330      	adds	r3, #48	; 0x30
 800fefe:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ff06:	2b01      	cmp	r3, #1
 800ff08:	d101      	bne.n	800ff0e <HAL_SPI_Receive+0x2a>
 800ff0a:	2302      	movs	r3, #2
 800ff0c:	e173      	b.n	80101f6 <HAL_SPI_Receive+0x312>
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	2201      	movs	r2, #1
 800ff12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ff16:	f7f4 f943 	bl	80041a0 <HAL_GetTick>
 800ff1a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ff22:	b2db      	uxtb	r3, r3
 800ff24:	2b01      	cmp	r3, #1
 800ff26:	d007      	beq.n	800ff38 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800ff28:	2302      	movs	r3, #2
 800ff2a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	2200      	movs	r2, #0
 800ff30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ff34:	7ffb      	ldrb	r3, [r7, #31]
 800ff36:	e15e      	b.n	80101f6 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ff38:	68bb      	ldr	r3, [r7, #8]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d002      	beq.n	800ff44 <HAL_SPI_Receive+0x60>
 800ff3e:	88fb      	ldrh	r3, [r7, #6]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d107      	bne.n	800ff54 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800ff44:	2301      	movs	r3, #1
 800ff46:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ff50:	7ffb      	ldrb	r3, [r7, #31]
 800ff52:	e150      	b.n	80101f6 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	2204      	movs	r2, #4
 800ff58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	2200      	movs	r2, #0
 800ff60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	68ba      	ldr	r2, [r7, #8]
 800ff68:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	88fa      	ldrh	r2, [r7, #6]
 800ff6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	88fa      	ldrh	r2, [r7, #6]
 800ff76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	2200      	movs	r2, #0
 800ff84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	2200      	movs	r2, #0
 800ff94:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	2200      	movs	r2, #0
 800ff9a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	689b      	ldr	r3, [r3, #8]
 800ffa0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ffa4:	d108      	bne.n	800ffb8 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	681a      	ldr	r2, [r3, #0]
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ffb4:	601a      	str	r2, [r3, #0]
 800ffb6:	e009      	b.n	800ffcc <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	68db      	ldr	r3, [r3, #12]
 800ffbe:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ffca:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	685a      	ldr	r2, [r3, #4]
 800ffd2:	4b8b      	ldr	r3, [pc, #556]	; (8010200 <HAL_SPI_Receive+0x31c>)
 800ffd4:	4013      	ands	r3, r2
 800ffd6:	88f9      	ldrh	r1, [r7, #6]
 800ffd8:	68fa      	ldr	r2, [r7, #12]
 800ffda:	6812      	ldr	r2, [r2, #0]
 800ffdc:	430b      	orrs	r3, r1
 800ffde:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	681a      	ldr	r2, [r3, #0]
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	f042 0201 	orr.w	r2, r2, #1
 800ffee:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	685b      	ldr	r3, [r3, #4]
 800fff4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fff8:	d107      	bne.n	801000a <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	681a      	ldr	r2, [r3, #0]
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010008:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	68db      	ldr	r3, [r3, #12]
 801000e:	2b0f      	cmp	r3, #15
 8010010:	d948      	bls.n	80100a4 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8010012:	e040      	b.n	8010096 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	695a      	ldr	r2, [r3, #20]
 801001a:	f248 0308 	movw	r3, #32776	; 0x8008
 801001e:	4013      	ands	r3, r2
 8010020:	2b00      	cmp	r3, #0
 8010022:	d014      	beq.n	801004e <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	681a      	ldr	r2, [r3, #0]
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801002c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801002e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010034:	1d1a      	adds	r2, r3, #4
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010040:	b29b      	uxth	r3, r3
 8010042:	3b01      	subs	r3, #1
 8010044:	b29a      	uxth	r2, r3
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801004c:	e023      	b.n	8010096 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801004e:	f7f4 f8a7 	bl	80041a0 <HAL_GetTick>
 8010052:	4602      	mov	r2, r0
 8010054:	697b      	ldr	r3, [r7, #20]
 8010056:	1ad3      	subs	r3, r2, r3
 8010058:	683a      	ldr	r2, [r7, #0]
 801005a:	429a      	cmp	r2, r3
 801005c:	d803      	bhi.n	8010066 <HAL_SPI_Receive+0x182>
 801005e:	683b      	ldr	r3, [r7, #0]
 8010060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010064:	d102      	bne.n	801006c <HAL_SPI_Receive+0x188>
 8010066:	683b      	ldr	r3, [r7, #0]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d114      	bne.n	8010096 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801006c:	68f8      	ldr	r0, [r7, #12]
 801006e:	f000 f8c9 	bl	8010204 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	2200      	movs	r2, #0
 8010076:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010080:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	2201      	movs	r2, #1
 801008e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010092:	2303      	movs	r3, #3
 8010094:	e0af      	b.n	80101f6 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801009c:	b29b      	uxth	r3, r3
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d1b8      	bne.n	8010014 <HAL_SPI_Receive+0x130>
 80100a2:	e095      	b.n	80101d0 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	68db      	ldr	r3, [r3, #12]
 80100a8:	2b07      	cmp	r3, #7
 80100aa:	f240 808b 	bls.w	80101c4 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80100ae:	e03f      	b.n	8010130 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	695b      	ldr	r3, [r3, #20]
 80100b6:	f003 0301 	and.w	r3, r3, #1
 80100ba:	2b01      	cmp	r3, #1
 80100bc:	d114      	bne.n	80100e8 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80100c2:	69ba      	ldr	r2, [r7, #24]
 80100c4:	8812      	ldrh	r2, [r2, #0]
 80100c6:	b292      	uxth	r2, r2
 80100c8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80100ce:	1c9a      	adds	r2, r3, #2
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80100da:	b29b      	uxth	r3, r3
 80100dc:	3b01      	subs	r3, #1
 80100de:	b29a      	uxth	r2, r3
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80100e6:	e023      	b.n	8010130 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80100e8:	f7f4 f85a 	bl	80041a0 <HAL_GetTick>
 80100ec:	4602      	mov	r2, r0
 80100ee:	697b      	ldr	r3, [r7, #20]
 80100f0:	1ad3      	subs	r3, r2, r3
 80100f2:	683a      	ldr	r2, [r7, #0]
 80100f4:	429a      	cmp	r2, r3
 80100f6:	d803      	bhi.n	8010100 <HAL_SPI_Receive+0x21c>
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100fe:	d102      	bne.n	8010106 <HAL_SPI_Receive+0x222>
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d114      	bne.n	8010130 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010106:	68f8      	ldr	r0, [r7, #12]
 8010108:	f000 f87c 	bl	8010204 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	2200      	movs	r2, #0
 8010110:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801011a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	2201      	movs	r2, #1
 8010128:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 801012c:	2303      	movs	r3, #3
 801012e:	e062      	b.n	80101f6 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010136:	b29b      	uxth	r3, r3
 8010138:	2b00      	cmp	r3, #0
 801013a:	d1b9      	bne.n	80100b0 <HAL_SPI_Receive+0x1cc>
 801013c:	e048      	b.n	80101d0 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	695b      	ldr	r3, [r3, #20]
 8010144:	f003 0301 	and.w	r3, r3, #1
 8010148:	2b01      	cmp	r3, #1
 801014a:	d117      	bne.n	801017c <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010158:	7812      	ldrb	r2, [r2, #0]
 801015a:	b2d2      	uxtb	r2, r2
 801015c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010162:	1c5a      	adds	r2, r3, #1
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801016e:	b29b      	uxth	r3, r3
 8010170:	3b01      	subs	r3, #1
 8010172:	b29a      	uxth	r2, r3
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801017a:	e023      	b.n	80101c4 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801017c:	f7f4 f810 	bl	80041a0 <HAL_GetTick>
 8010180:	4602      	mov	r2, r0
 8010182:	697b      	ldr	r3, [r7, #20]
 8010184:	1ad3      	subs	r3, r2, r3
 8010186:	683a      	ldr	r2, [r7, #0]
 8010188:	429a      	cmp	r2, r3
 801018a:	d803      	bhi.n	8010194 <HAL_SPI_Receive+0x2b0>
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010192:	d102      	bne.n	801019a <HAL_SPI_Receive+0x2b6>
 8010194:	683b      	ldr	r3, [r7, #0]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d114      	bne.n	80101c4 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801019a:	68f8      	ldr	r0, [r7, #12]
 801019c:	f000 f832 	bl	8010204 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	2200      	movs	r2, #0
 80101a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80101ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	2201      	movs	r2, #1
 80101bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80101c0:	2303      	movs	r3, #3
 80101c2:	e018      	b.n	80101f6 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80101ca:	b29b      	uxth	r3, r3
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d1b6      	bne.n	801013e <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80101d0:	68f8      	ldr	r0, [r7, #12]
 80101d2:	f000 f817 	bl	8010204 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	2200      	movs	r2, #0
 80101da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	2201      	movs	r2, #1
 80101e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d001      	beq.n	80101f4 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 80101f0:	2301      	movs	r3, #1
 80101f2:	e000      	b.n	80101f6 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 80101f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	3720      	adds	r7, #32
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}
 80101fe:	bf00      	nop
 8010200:	ffff0000 	.word	0xffff0000

08010204 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8010204:	b480      	push	{r7}
 8010206:	b085      	sub	sp, #20
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	695b      	ldr	r3, [r3, #20]
 8010212:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	699a      	ldr	r2, [r3, #24]
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	f042 0208 	orr.w	r2, r2, #8
 8010222:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	699a      	ldr	r2, [r3, #24]
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	f042 0210 	orr.w	r2, r2, #16
 8010232:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	681a      	ldr	r2, [r3, #0]
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	f022 0201 	bic.w	r2, r2, #1
 8010242:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	6919      	ldr	r1, [r3, #16]
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	681a      	ldr	r2, [r3, #0]
 801024e:	4b3c      	ldr	r3, [pc, #240]	; (8010340 <SPI_CloseTransfer+0x13c>)
 8010250:	400b      	ands	r3, r1
 8010252:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	689a      	ldr	r2, [r3, #8]
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8010262:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801026a:	b2db      	uxtb	r3, r3
 801026c:	2b04      	cmp	r3, #4
 801026e:	d014      	beq.n	801029a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	f003 0320 	and.w	r3, r3, #32
 8010276:	2b00      	cmp	r3, #0
 8010278:	d00f      	beq.n	801029a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010280:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	699a      	ldr	r2, [r3, #24]
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	f042 0220 	orr.w	r2, r2, #32
 8010298:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80102a0:	b2db      	uxtb	r3, r3
 80102a2:	2b03      	cmp	r3, #3
 80102a4:	d014      	beq.n	80102d0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d00f      	beq.n	80102d0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80102b6:	f043 0204 	orr.w	r2, r3, #4
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	699a      	ldr	r2, [r3, #24]
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80102ce:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d00f      	beq.n	80102fa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80102e0:	f043 0201 	orr.w	r2, r3, #1
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	699a      	ldr	r2, [r3, #24]
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80102f8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010300:	2b00      	cmp	r3, #0
 8010302:	d00f      	beq.n	8010324 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801030a:	f043 0208 	orr.w	r2, r3, #8
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	699a      	ldr	r2, [r3, #24]
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010322:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	2200      	movs	r2, #0
 8010328:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	2200      	movs	r2, #0
 8010330:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8010334:	bf00      	nop
 8010336:	3714      	adds	r7, #20
 8010338:	46bd      	mov	sp, r7
 801033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033e:	4770      	bx	lr
 8010340:	fffffc90 	.word	0xfffffc90

08010344 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b084      	sub	sp, #16
 8010348:	af00      	add	r7, sp, #0
 801034a:	60f8      	str	r0, [r7, #12]
 801034c:	60b9      	str	r1, [r7, #8]
 801034e:	603b      	str	r3, [r7, #0]
 8010350:	4613      	mov	r3, r2
 8010352:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010354:	e010      	b.n	8010378 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010356:	f7f3 ff23 	bl	80041a0 <HAL_GetTick>
 801035a:	4602      	mov	r2, r0
 801035c:	69bb      	ldr	r3, [r7, #24]
 801035e:	1ad3      	subs	r3, r2, r3
 8010360:	683a      	ldr	r2, [r7, #0]
 8010362:	429a      	cmp	r2, r3
 8010364:	d803      	bhi.n	801036e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	f1b3 3fff 	cmp.w	r3, #4294967295
 801036c:	d102      	bne.n	8010374 <SPI_WaitOnFlagUntilTimeout+0x30>
 801036e:	683b      	ldr	r3, [r7, #0]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d101      	bne.n	8010378 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8010374:	2303      	movs	r3, #3
 8010376:	e00f      	b.n	8010398 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	695a      	ldr	r2, [r3, #20]
 801037e:	68bb      	ldr	r3, [r7, #8]
 8010380:	4013      	ands	r3, r2
 8010382:	68ba      	ldr	r2, [r7, #8]
 8010384:	429a      	cmp	r2, r3
 8010386:	bf0c      	ite	eq
 8010388:	2301      	moveq	r3, #1
 801038a:	2300      	movne	r3, #0
 801038c:	b2db      	uxtb	r3, r3
 801038e:	461a      	mov	r2, r3
 8010390:	79fb      	ldrb	r3, [r7, #7]
 8010392:	429a      	cmp	r2, r3
 8010394:	d0df      	beq.n	8010356 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8010396:	2300      	movs	r3, #0
}
 8010398:	4618      	mov	r0, r3
 801039a:	3710      	adds	r7, #16
 801039c:	46bd      	mov	sp, r7
 801039e:	bd80      	pop	{r7, pc}

080103a0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80103a0:	b480      	push	{r7}
 80103a2:	b085      	sub	sp, #20
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80103ac:	095b      	lsrs	r3, r3, #5
 80103ae:	3301      	adds	r3, #1
 80103b0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	68db      	ldr	r3, [r3, #12]
 80103b6:	3301      	adds	r3, #1
 80103b8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80103ba:	68bb      	ldr	r3, [r7, #8]
 80103bc:	3307      	adds	r3, #7
 80103be:	08db      	lsrs	r3, r3, #3
 80103c0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	68fa      	ldr	r2, [r7, #12]
 80103c6:	fb02 f303 	mul.w	r3, r2, r3
}
 80103ca:	4618      	mov	r0, r3
 80103cc:	3714      	adds	r7, #20
 80103ce:	46bd      	mov	sp, r7
 80103d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d4:	4770      	bx	lr

080103d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80103d6:	b580      	push	{r7, lr}
 80103d8:	b082      	sub	sp, #8
 80103da:	af00      	add	r7, sp, #0
 80103dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d101      	bne.n	80103e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80103e4:	2301      	movs	r3, #1
 80103e6:	e049      	b.n	801047c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80103ee:	b2db      	uxtb	r3, r3
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d106      	bne.n	8010402 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	2200      	movs	r2, #0
 80103f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80103fc:	6878      	ldr	r0, [r7, #4]
 80103fe:	f7f3 fa91 	bl	8003924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	2202      	movs	r2, #2
 8010406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	681a      	ldr	r2, [r3, #0]
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	3304      	adds	r3, #4
 8010412:	4619      	mov	r1, r3
 8010414:	4610      	mov	r0, r2
 8010416:	f000 ff29 	bl	801126c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	2201      	movs	r2, #1
 801041e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2201      	movs	r2, #1
 8010426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	2201      	movs	r2, #1
 801042e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	2201      	movs	r2, #1
 8010436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2201      	movs	r2, #1
 801043e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	2201      	movs	r2, #1
 8010446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	2201      	movs	r2, #1
 801044e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	2201      	movs	r2, #1
 8010456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	2201      	movs	r2, #1
 801045e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	2201      	movs	r2, #1
 8010466:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	2201      	movs	r2, #1
 801046e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	2201      	movs	r2, #1
 8010476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801047a:	2300      	movs	r3, #0
}
 801047c:	4618      	mov	r0, r3
 801047e:	3708      	adds	r7, #8
 8010480:	46bd      	mov	sp, r7
 8010482:	bd80      	pop	{r7, pc}

08010484 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b082      	sub	sp, #8
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d101      	bne.n	8010496 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010492:	2301      	movs	r3, #1
 8010494:	e049      	b.n	801052a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801049c:	b2db      	uxtb	r3, r3
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d106      	bne.n	80104b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	2200      	movs	r2, #0
 80104a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80104aa:	6878      	ldr	r0, [r7, #4]
 80104ac:	f7f3 f8a4 	bl	80035f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	2202      	movs	r2, #2
 80104b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681a      	ldr	r2, [r3, #0]
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	3304      	adds	r3, #4
 80104c0:	4619      	mov	r1, r3
 80104c2:	4610      	mov	r0, r2
 80104c4:	f000 fed2 	bl	801126c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	2201      	movs	r2, #1
 80104cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	2201      	movs	r2, #1
 80104d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2201      	movs	r2, #1
 80104dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	2201      	movs	r2, #1
 80104e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2201      	movs	r2, #1
 80104ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2201      	movs	r2, #1
 80104f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2201      	movs	r2, #1
 80104fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2201      	movs	r2, #1
 8010504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2201      	movs	r2, #1
 801050c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	2201      	movs	r2, #1
 8010514:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2201      	movs	r2, #1
 801051c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	2201      	movs	r2, #1
 8010524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010528:	2300      	movs	r3, #0
}
 801052a:	4618      	mov	r0, r3
 801052c:	3708      	adds	r7, #8
 801052e:	46bd      	mov	sp, r7
 8010530:	bd80      	pop	{r7, pc}
	...

08010534 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b084      	sub	sp, #16
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
 801053c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801053e:	683b      	ldr	r3, [r7, #0]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d109      	bne.n	8010558 <HAL_TIM_PWM_Start+0x24>
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801054a:	b2db      	uxtb	r3, r3
 801054c:	2b01      	cmp	r3, #1
 801054e:	bf14      	ite	ne
 8010550:	2301      	movne	r3, #1
 8010552:	2300      	moveq	r3, #0
 8010554:	b2db      	uxtb	r3, r3
 8010556:	e03c      	b.n	80105d2 <HAL_TIM_PWM_Start+0x9e>
 8010558:	683b      	ldr	r3, [r7, #0]
 801055a:	2b04      	cmp	r3, #4
 801055c:	d109      	bne.n	8010572 <HAL_TIM_PWM_Start+0x3e>
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010564:	b2db      	uxtb	r3, r3
 8010566:	2b01      	cmp	r3, #1
 8010568:	bf14      	ite	ne
 801056a:	2301      	movne	r3, #1
 801056c:	2300      	moveq	r3, #0
 801056e:	b2db      	uxtb	r3, r3
 8010570:	e02f      	b.n	80105d2 <HAL_TIM_PWM_Start+0x9e>
 8010572:	683b      	ldr	r3, [r7, #0]
 8010574:	2b08      	cmp	r3, #8
 8010576:	d109      	bne.n	801058c <HAL_TIM_PWM_Start+0x58>
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801057e:	b2db      	uxtb	r3, r3
 8010580:	2b01      	cmp	r3, #1
 8010582:	bf14      	ite	ne
 8010584:	2301      	movne	r3, #1
 8010586:	2300      	moveq	r3, #0
 8010588:	b2db      	uxtb	r3, r3
 801058a:	e022      	b.n	80105d2 <HAL_TIM_PWM_Start+0x9e>
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	2b0c      	cmp	r3, #12
 8010590:	d109      	bne.n	80105a6 <HAL_TIM_PWM_Start+0x72>
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010598:	b2db      	uxtb	r3, r3
 801059a:	2b01      	cmp	r3, #1
 801059c:	bf14      	ite	ne
 801059e:	2301      	movne	r3, #1
 80105a0:	2300      	moveq	r3, #0
 80105a2:	b2db      	uxtb	r3, r3
 80105a4:	e015      	b.n	80105d2 <HAL_TIM_PWM_Start+0x9e>
 80105a6:	683b      	ldr	r3, [r7, #0]
 80105a8:	2b10      	cmp	r3, #16
 80105aa:	d109      	bne.n	80105c0 <HAL_TIM_PWM_Start+0x8c>
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80105b2:	b2db      	uxtb	r3, r3
 80105b4:	2b01      	cmp	r3, #1
 80105b6:	bf14      	ite	ne
 80105b8:	2301      	movne	r3, #1
 80105ba:	2300      	moveq	r3, #0
 80105bc:	b2db      	uxtb	r3, r3
 80105be:	e008      	b.n	80105d2 <HAL_TIM_PWM_Start+0x9e>
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80105c6:	b2db      	uxtb	r3, r3
 80105c8:	2b01      	cmp	r3, #1
 80105ca:	bf14      	ite	ne
 80105cc:	2301      	movne	r3, #1
 80105ce:	2300      	moveq	r3, #0
 80105d0:	b2db      	uxtb	r3, r3
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d001      	beq.n	80105da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80105d6:	2301      	movs	r3, #1
 80105d8:	e0ab      	b.n	8010732 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d104      	bne.n	80105ea <HAL_TIM_PWM_Start+0xb6>
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2202      	movs	r2, #2
 80105e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80105e8:	e023      	b.n	8010632 <HAL_TIM_PWM_Start+0xfe>
 80105ea:	683b      	ldr	r3, [r7, #0]
 80105ec:	2b04      	cmp	r3, #4
 80105ee:	d104      	bne.n	80105fa <HAL_TIM_PWM_Start+0xc6>
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	2202      	movs	r2, #2
 80105f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80105f8:	e01b      	b.n	8010632 <HAL_TIM_PWM_Start+0xfe>
 80105fa:	683b      	ldr	r3, [r7, #0]
 80105fc:	2b08      	cmp	r3, #8
 80105fe:	d104      	bne.n	801060a <HAL_TIM_PWM_Start+0xd6>
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2202      	movs	r2, #2
 8010604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010608:	e013      	b.n	8010632 <HAL_TIM_PWM_Start+0xfe>
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	2b0c      	cmp	r3, #12
 801060e:	d104      	bne.n	801061a <HAL_TIM_PWM_Start+0xe6>
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	2202      	movs	r2, #2
 8010614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010618:	e00b      	b.n	8010632 <HAL_TIM_PWM_Start+0xfe>
 801061a:	683b      	ldr	r3, [r7, #0]
 801061c:	2b10      	cmp	r3, #16
 801061e:	d104      	bne.n	801062a <HAL_TIM_PWM_Start+0xf6>
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2202      	movs	r2, #2
 8010624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010628:	e003      	b.n	8010632 <HAL_TIM_PWM_Start+0xfe>
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	2202      	movs	r2, #2
 801062e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	2201      	movs	r2, #1
 8010638:	6839      	ldr	r1, [r7, #0]
 801063a:	4618      	mov	r0, r3
 801063c:	f001 f992 	bl	8011964 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	4a3d      	ldr	r2, [pc, #244]	; (801073c <HAL_TIM_PWM_Start+0x208>)
 8010646:	4293      	cmp	r3, r2
 8010648:	d013      	beq.n	8010672 <HAL_TIM_PWM_Start+0x13e>
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	4a3c      	ldr	r2, [pc, #240]	; (8010740 <HAL_TIM_PWM_Start+0x20c>)
 8010650:	4293      	cmp	r3, r2
 8010652:	d00e      	beq.n	8010672 <HAL_TIM_PWM_Start+0x13e>
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	4a3a      	ldr	r2, [pc, #232]	; (8010744 <HAL_TIM_PWM_Start+0x210>)
 801065a:	4293      	cmp	r3, r2
 801065c:	d009      	beq.n	8010672 <HAL_TIM_PWM_Start+0x13e>
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	4a39      	ldr	r2, [pc, #228]	; (8010748 <HAL_TIM_PWM_Start+0x214>)
 8010664:	4293      	cmp	r3, r2
 8010666:	d004      	beq.n	8010672 <HAL_TIM_PWM_Start+0x13e>
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	4a37      	ldr	r2, [pc, #220]	; (801074c <HAL_TIM_PWM_Start+0x218>)
 801066e:	4293      	cmp	r3, r2
 8010670:	d101      	bne.n	8010676 <HAL_TIM_PWM_Start+0x142>
 8010672:	2301      	movs	r3, #1
 8010674:	e000      	b.n	8010678 <HAL_TIM_PWM_Start+0x144>
 8010676:	2300      	movs	r3, #0
 8010678:	2b00      	cmp	r3, #0
 801067a:	d007      	beq.n	801068c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801068a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	4a2a      	ldr	r2, [pc, #168]	; (801073c <HAL_TIM_PWM_Start+0x208>)
 8010692:	4293      	cmp	r3, r2
 8010694:	d02c      	beq.n	80106f0 <HAL_TIM_PWM_Start+0x1bc>
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801069e:	d027      	beq.n	80106f0 <HAL_TIM_PWM_Start+0x1bc>
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	4a2a      	ldr	r2, [pc, #168]	; (8010750 <HAL_TIM_PWM_Start+0x21c>)
 80106a6:	4293      	cmp	r3, r2
 80106a8:	d022      	beq.n	80106f0 <HAL_TIM_PWM_Start+0x1bc>
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	4a29      	ldr	r2, [pc, #164]	; (8010754 <HAL_TIM_PWM_Start+0x220>)
 80106b0:	4293      	cmp	r3, r2
 80106b2:	d01d      	beq.n	80106f0 <HAL_TIM_PWM_Start+0x1bc>
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	4a27      	ldr	r2, [pc, #156]	; (8010758 <HAL_TIM_PWM_Start+0x224>)
 80106ba:	4293      	cmp	r3, r2
 80106bc:	d018      	beq.n	80106f0 <HAL_TIM_PWM_Start+0x1bc>
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	4a1f      	ldr	r2, [pc, #124]	; (8010740 <HAL_TIM_PWM_Start+0x20c>)
 80106c4:	4293      	cmp	r3, r2
 80106c6:	d013      	beq.n	80106f0 <HAL_TIM_PWM_Start+0x1bc>
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	4a23      	ldr	r2, [pc, #140]	; (801075c <HAL_TIM_PWM_Start+0x228>)
 80106ce:	4293      	cmp	r3, r2
 80106d0:	d00e      	beq.n	80106f0 <HAL_TIM_PWM_Start+0x1bc>
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	4a1b      	ldr	r2, [pc, #108]	; (8010744 <HAL_TIM_PWM_Start+0x210>)
 80106d8:	4293      	cmp	r3, r2
 80106da:	d009      	beq.n	80106f0 <HAL_TIM_PWM_Start+0x1bc>
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	4a1f      	ldr	r2, [pc, #124]	; (8010760 <HAL_TIM_PWM_Start+0x22c>)
 80106e2:	4293      	cmp	r3, r2
 80106e4:	d004      	beq.n	80106f0 <HAL_TIM_PWM_Start+0x1bc>
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	4a1e      	ldr	r2, [pc, #120]	; (8010764 <HAL_TIM_PWM_Start+0x230>)
 80106ec:	4293      	cmp	r3, r2
 80106ee:	d115      	bne.n	801071c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	689a      	ldr	r2, [r3, #8]
 80106f6:	4b1c      	ldr	r3, [pc, #112]	; (8010768 <HAL_TIM_PWM_Start+0x234>)
 80106f8:	4013      	ands	r3, r2
 80106fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	2b06      	cmp	r3, #6
 8010700:	d015      	beq.n	801072e <HAL_TIM_PWM_Start+0x1fa>
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010708:	d011      	beq.n	801072e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	681a      	ldr	r2, [r3, #0]
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	f042 0201 	orr.w	r2, r2, #1
 8010718:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801071a:	e008      	b.n	801072e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	681a      	ldr	r2, [r3, #0]
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	f042 0201 	orr.w	r2, r2, #1
 801072a:	601a      	str	r2, [r3, #0]
 801072c:	e000      	b.n	8010730 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801072e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010730:	2300      	movs	r3, #0
}
 8010732:	4618      	mov	r0, r3
 8010734:	3710      	adds	r7, #16
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}
 801073a:	bf00      	nop
 801073c:	40010000 	.word	0x40010000
 8010740:	40010400 	.word	0x40010400
 8010744:	40014000 	.word	0x40014000
 8010748:	40014400 	.word	0x40014400
 801074c:	40014800 	.word	0x40014800
 8010750:	40000400 	.word	0x40000400
 8010754:	40000800 	.word	0x40000800
 8010758:	40000c00 	.word	0x40000c00
 801075c:	40001800 	.word	0x40001800
 8010760:	4000e000 	.word	0x4000e000
 8010764:	4000e400 	.word	0x4000e400
 8010768:	00010007 	.word	0x00010007

0801076c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b086      	sub	sp, #24
 8010770:	af00      	add	r7, sp, #0
 8010772:	60f8      	str	r0, [r7, #12]
 8010774:	60b9      	str	r1, [r7, #8]
 8010776:	607a      	str	r2, [r7, #4]
 8010778:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 801077a:	2300      	movs	r3, #0
 801077c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 801077e:	68bb      	ldr	r3, [r7, #8]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d109      	bne.n	8010798 <HAL_TIM_PWM_Start_DMA+0x2c>
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801078a:	b2db      	uxtb	r3, r3
 801078c:	2b02      	cmp	r3, #2
 801078e:	bf0c      	ite	eq
 8010790:	2301      	moveq	r3, #1
 8010792:	2300      	movne	r3, #0
 8010794:	b2db      	uxtb	r3, r3
 8010796:	e03c      	b.n	8010812 <HAL_TIM_PWM_Start_DMA+0xa6>
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	2b04      	cmp	r3, #4
 801079c:	d109      	bne.n	80107b2 <HAL_TIM_PWM_Start_DMA+0x46>
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80107a4:	b2db      	uxtb	r3, r3
 80107a6:	2b02      	cmp	r3, #2
 80107a8:	bf0c      	ite	eq
 80107aa:	2301      	moveq	r3, #1
 80107ac:	2300      	movne	r3, #0
 80107ae:	b2db      	uxtb	r3, r3
 80107b0:	e02f      	b.n	8010812 <HAL_TIM_PWM_Start_DMA+0xa6>
 80107b2:	68bb      	ldr	r3, [r7, #8]
 80107b4:	2b08      	cmp	r3, #8
 80107b6:	d109      	bne.n	80107cc <HAL_TIM_PWM_Start_DMA+0x60>
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80107be:	b2db      	uxtb	r3, r3
 80107c0:	2b02      	cmp	r3, #2
 80107c2:	bf0c      	ite	eq
 80107c4:	2301      	moveq	r3, #1
 80107c6:	2300      	movne	r3, #0
 80107c8:	b2db      	uxtb	r3, r3
 80107ca:	e022      	b.n	8010812 <HAL_TIM_PWM_Start_DMA+0xa6>
 80107cc:	68bb      	ldr	r3, [r7, #8]
 80107ce:	2b0c      	cmp	r3, #12
 80107d0:	d109      	bne.n	80107e6 <HAL_TIM_PWM_Start_DMA+0x7a>
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80107d8:	b2db      	uxtb	r3, r3
 80107da:	2b02      	cmp	r3, #2
 80107dc:	bf0c      	ite	eq
 80107de:	2301      	moveq	r3, #1
 80107e0:	2300      	movne	r3, #0
 80107e2:	b2db      	uxtb	r3, r3
 80107e4:	e015      	b.n	8010812 <HAL_TIM_PWM_Start_DMA+0xa6>
 80107e6:	68bb      	ldr	r3, [r7, #8]
 80107e8:	2b10      	cmp	r3, #16
 80107ea:	d109      	bne.n	8010800 <HAL_TIM_PWM_Start_DMA+0x94>
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80107f2:	b2db      	uxtb	r3, r3
 80107f4:	2b02      	cmp	r3, #2
 80107f6:	bf0c      	ite	eq
 80107f8:	2301      	moveq	r3, #1
 80107fa:	2300      	movne	r3, #0
 80107fc:	b2db      	uxtb	r3, r3
 80107fe:	e008      	b.n	8010812 <HAL_TIM_PWM_Start_DMA+0xa6>
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010806:	b2db      	uxtb	r3, r3
 8010808:	2b02      	cmp	r3, #2
 801080a:	bf0c      	ite	eq
 801080c:	2301      	moveq	r3, #1
 801080e:	2300      	movne	r3, #0
 8010810:	b2db      	uxtb	r3, r3
 8010812:	2b00      	cmp	r3, #0
 8010814:	d001      	beq.n	801081a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8010816:	2302      	movs	r3, #2
 8010818:	e1ba      	b.n	8010b90 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 801081a:	68bb      	ldr	r3, [r7, #8]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d109      	bne.n	8010834 <HAL_TIM_PWM_Start_DMA+0xc8>
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010826:	b2db      	uxtb	r3, r3
 8010828:	2b01      	cmp	r3, #1
 801082a:	bf0c      	ite	eq
 801082c:	2301      	moveq	r3, #1
 801082e:	2300      	movne	r3, #0
 8010830:	b2db      	uxtb	r3, r3
 8010832:	e03c      	b.n	80108ae <HAL_TIM_PWM_Start_DMA+0x142>
 8010834:	68bb      	ldr	r3, [r7, #8]
 8010836:	2b04      	cmp	r3, #4
 8010838:	d109      	bne.n	801084e <HAL_TIM_PWM_Start_DMA+0xe2>
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010840:	b2db      	uxtb	r3, r3
 8010842:	2b01      	cmp	r3, #1
 8010844:	bf0c      	ite	eq
 8010846:	2301      	moveq	r3, #1
 8010848:	2300      	movne	r3, #0
 801084a:	b2db      	uxtb	r3, r3
 801084c:	e02f      	b.n	80108ae <HAL_TIM_PWM_Start_DMA+0x142>
 801084e:	68bb      	ldr	r3, [r7, #8]
 8010850:	2b08      	cmp	r3, #8
 8010852:	d109      	bne.n	8010868 <HAL_TIM_PWM_Start_DMA+0xfc>
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801085a:	b2db      	uxtb	r3, r3
 801085c:	2b01      	cmp	r3, #1
 801085e:	bf0c      	ite	eq
 8010860:	2301      	moveq	r3, #1
 8010862:	2300      	movne	r3, #0
 8010864:	b2db      	uxtb	r3, r3
 8010866:	e022      	b.n	80108ae <HAL_TIM_PWM_Start_DMA+0x142>
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	2b0c      	cmp	r3, #12
 801086c:	d109      	bne.n	8010882 <HAL_TIM_PWM_Start_DMA+0x116>
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010874:	b2db      	uxtb	r3, r3
 8010876:	2b01      	cmp	r3, #1
 8010878:	bf0c      	ite	eq
 801087a:	2301      	moveq	r3, #1
 801087c:	2300      	movne	r3, #0
 801087e:	b2db      	uxtb	r3, r3
 8010880:	e015      	b.n	80108ae <HAL_TIM_PWM_Start_DMA+0x142>
 8010882:	68bb      	ldr	r3, [r7, #8]
 8010884:	2b10      	cmp	r3, #16
 8010886:	d109      	bne.n	801089c <HAL_TIM_PWM_Start_DMA+0x130>
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801088e:	b2db      	uxtb	r3, r3
 8010890:	2b01      	cmp	r3, #1
 8010892:	bf0c      	ite	eq
 8010894:	2301      	moveq	r3, #1
 8010896:	2300      	movne	r3, #0
 8010898:	b2db      	uxtb	r3, r3
 801089a:	e008      	b.n	80108ae <HAL_TIM_PWM_Start_DMA+0x142>
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80108a2:	b2db      	uxtb	r3, r3
 80108a4:	2b01      	cmp	r3, #1
 80108a6:	bf0c      	ite	eq
 80108a8:	2301      	moveq	r3, #1
 80108aa:	2300      	movne	r3, #0
 80108ac:	b2db      	uxtb	r3, r3
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d034      	beq.n	801091c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d002      	beq.n	80108be <HAL_TIM_PWM_Start_DMA+0x152>
 80108b8:	887b      	ldrh	r3, [r7, #2]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d101      	bne.n	80108c2 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80108be:	2301      	movs	r3, #1
 80108c0:	e166      	b.n	8010b90 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80108c2:	68bb      	ldr	r3, [r7, #8]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d104      	bne.n	80108d2 <HAL_TIM_PWM_Start_DMA+0x166>
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	2202      	movs	r2, #2
 80108cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80108d0:	e026      	b.n	8010920 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80108d2:	68bb      	ldr	r3, [r7, #8]
 80108d4:	2b04      	cmp	r3, #4
 80108d6:	d104      	bne.n	80108e2 <HAL_TIM_PWM_Start_DMA+0x176>
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	2202      	movs	r2, #2
 80108dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80108e0:	e01e      	b.n	8010920 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80108e2:	68bb      	ldr	r3, [r7, #8]
 80108e4:	2b08      	cmp	r3, #8
 80108e6:	d104      	bne.n	80108f2 <HAL_TIM_PWM_Start_DMA+0x186>
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	2202      	movs	r2, #2
 80108ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80108f0:	e016      	b.n	8010920 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	2b0c      	cmp	r3, #12
 80108f6:	d104      	bne.n	8010902 <HAL_TIM_PWM_Start_DMA+0x196>
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	2202      	movs	r2, #2
 80108fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010900:	e00e      	b.n	8010920 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010902:	68bb      	ldr	r3, [r7, #8]
 8010904:	2b10      	cmp	r3, #16
 8010906:	d104      	bne.n	8010912 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	2202      	movs	r2, #2
 801090c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010910:	e006      	b.n	8010920 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	2202      	movs	r2, #2
 8010916:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801091a:	e001      	b.n	8010920 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 801091c:	2301      	movs	r3, #1
 801091e:	e137      	b.n	8010b90 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 8010920:	68bb      	ldr	r3, [r7, #8]
 8010922:	2b0c      	cmp	r3, #12
 8010924:	f200 80ae 	bhi.w	8010a84 <HAL_TIM_PWM_Start_DMA+0x318>
 8010928:	a201      	add	r2, pc, #4	; (adr r2, 8010930 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 801092a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801092e:	bf00      	nop
 8010930:	08010965 	.word	0x08010965
 8010934:	08010a85 	.word	0x08010a85
 8010938:	08010a85 	.word	0x08010a85
 801093c:	08010a85 	.word	0x08010a85
 8010940:	080109ad 	.word	0x080109ad
 8010944:	08010a85 	.word	0x08010a85
 8010948:	08010a85 	.word	0x08010a85
 801094c:	08010a85 	.word	0x08010a85
 8010950:	080109f5 	.word	0x080109f5
 8010954:	08010a85 	.word	0x08010a85
 8010958:	08010a85 	.word	0x08010a85
 801095c:	08010a85 	.word	0x08010a85
 8010960:	08010a3d 	.word	0x08010a3d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010968:	4a8b      	ldr	r2, [pc, #556]	; (8010b98 <HAL_TIM_PWM_Start_DMA+0x42c>)
 801096a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010970:	4a8a      	ldr	r2, [pc, #552]	; (8010b9c <HAL_TIM_PWM_Start_DMA+0x430>)
 8010972:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010978:	4a89      	ldr	r2, [pc, #548]	; (8010ba0 <HAL_TIM_PWM_Start_DMA+0x434>)
 801097a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010980:	6879      	ldr	r1, [r7, #4]
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	3334      	adds	r3, #52	; 0x34
 8010988:	461a      	mov	r2, r3
 801098a:	887b      	ldrh	r3, [r7, #2]
 801098c:	f7f6 f872 	bl	8006a74 <HAL_DMA_Start_IT>
 8010990:	4603      	mov	r3, r0
 8010992:	2b00      	cmp	r3, #0
 8010994:	d001      	beq.n	801099a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010996:	2301      	movs	r3, #1
 8010998:	e0fa      	b.n	8010b90 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	68da      	ldr	r2, [r3, #12]
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80109a8:	60da      	str	r2, [r3, #12]
      break;
 80109aa:	e06e      	b.n	8010a8a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109b0:	4a79      	ldr	r2, [pc, #484]	; (8010b98 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80109b2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109b8:	4a78      	ldr	r2, [pc, #480]	; (8010b9c <HAL_TIM_PWM_Start_DMA+0x430>)
 80109ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109c0:	4a77      	ldr	r2, [pc, #476]	; (8010ba0 <HAL_TIM_PWM_Start_DMA+0x434>)
 80109c2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80109c8:	6879      	ldr	r1, [r7, #4]
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	3338      	adds	r3, #56	; 0x38
 80109d0:	461a      	mov	r2, r3
 80109d2:	887b      	ldrh	r3, [r7, #2]
 80109d4:	f7f6 f84e 	bl	8006a74 <HAL_DMA_Start_IT>
 80109d8:	4603      	mov	r3, r0
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d001      	beq.n	80109e2 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80109de:	2301      	movs	r3, #1
 80109e0:	e0d6      	b.n	8010b90 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	68da      	ldr	r2, [r3, #12]
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80109f0:	60da      	str	r2, [r3, #12]
      break;
 80109f2:	e04a      	b.n	8010a8a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109f8:	4a67      	ldr	r2, [pc, #412]	; (8010b98 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80109fa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a00:	4a66      	ldr	r2, [pc, #408]	; (8010b9c <HAL_TIM_PWM_Start_DMA+0x430>)
 8010a02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a08:	4a65      	ldr	r2, [pc, #404]	; (8010ba0 <HAL_TIM_PWM_Start_DMA+0x434>)
 8010a0a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010a10:	6879      	ldr	r1, [r7, #4]
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	333c      	adds	r3, #60	; 0x3c
 8010a18:	461a      	mov	r2, r3
 8010a1a:	887b      	ldrh	r3, [r7, #2]
 8010a1c:	f7f6 f82a 	bl	8006a74 <HAL_DMA_Start_IT>
 8010a20:	4603      	mov	r3, r0
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d001      	beq.n	8010a2a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010a26:	2301      	movs	r3, #1
 8010a28:	e0b2      	b.n	8010b90 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	68da      	ldr	r2, [r3, #12]
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010a38:	60da      	str	r2, [r3, #12]
      break;
 8010a3a:	e026      	b.n	8010a8a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a40:	4a55      	ldr	r2, [pc, #340]	; (8010b98 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010a42:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a48:	4a54      	ldr	r2, [pc, #336]	; (8010b9c <HAL_TIM_PWM_Start_DMA+0x430>)
 8010a4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a50:	4a53      	ldr	r2, [pc, #332]	; (8010ba0 <HAL_TIM_PWM_Start_DMA+0x434>)
 8010a52:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010a58:	6879      	ldr	r1, [r7, #4]
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	3340      	adds	r3, #64	; 0x40
 8010a60:	461a      	mov	r2, r3
 8010a62:	887b      	ldrh	r3, [r7, #2]
 8010a64:	f7f6 f806 	bl	8006a74 <HAL_DMA_Start_IT>
 8010a68:	4603      	mov	r3, r0
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d001      	beq.n	8010a72 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010a6e:	2301      	movs	r3, #1
 8010a70:	e08e      	b.n	8010b90 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	68da      	ldr	r2, [r3, #12]
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010a80:	60da      	str	r2, [r3, #12]
      break;
 8010a82:	e002      	b.n	8010a8a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8010a84:	2301      	movs	r3, #1
 8010a86:	75fb      	strb	r3, [r7, #23]
      break;
 8010a88:	bf00      	nop
  }

  if (status == HAL_OK)
 8010a8a:	7dfb      	ldrb	r3, [r7, #23]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d17e      	bne.n	8010b8e <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	2201      	movs	r2, #1
 8010a96:	68b9      	ldr	r1, [r7, #8]
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f000 ff63 	bl	8011964 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	4a40      	ldr	r2, [pc, #256]	; (8010ba4 <HAL_TIM_PWM_Start_DMA+0x438>)
 8010aa4:	4293      	cmp	r3, r2
 8010aa6:	d013      	beq.n	8010ad0 <HAL_TIM_PWM_Start_DMA+0x364>
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	4a3e      	ldr	r2, [pc, #248]	; (8010ba8 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8010aae:	4293      	cmp	r3, r2
 8010ab0:	d00e      	beq.n	8010ad0 <HAL_TIM_PWM_Start_DMA+0x364>
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	4a3d      	ldr	r2, [pc, #244]	; (8010bac <HAL_TIM_PWM_Start_DMA+0x440>)
 8010ab8:	4293      	cmp	r3, r2
 8010aba:	d009      	beq.n	8010ad0 <HAL_TIM_PWM_Start_DMA+0x364>
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	4a3b      	ldr	r2, [pc, #236]	; (8010bb0 <HAL_TIM_PWM_Start_DMA+0x444>)
 8010ac2:	4293      	cmp	r3, r2
 8010ac4:	d004      	beq.n	8010ad0 <HAL_TIM_PWM_Start_DMA+0x364>
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	4a3a      	ldr	r2, [pc, #232]	; (8010bb4 <HAL_TIM_PWM_Start_DMA+0x448>)
 8010acc:	4293      	cmp	r3, r2
 8010ace:	d101      	bne.n	8010ad4 <HAL_TIM_PWM_Start_DMA+0x368>
 8010ad0:	2301      	movs	r3, #1
 8010ad2:	e000      	b.n	8010ad6 <HAL_TIM_PWM_Start_DMA+0x36a>
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d007      	beq.n	8010aea <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010ae8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	4a2d      	ldr	r2, [pc, #180]	; (8010ba4 <HAL_TIM_PWM_Start_DMA+0x438>)
 8010af0:	4293      	cmp	r3, r2
 8010af2:	d02c      	beq.n	8010b4e <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010afc:	d027      	beq.n	8010b4e <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	4a2d      	ldr	r2, [pc, #180]	; (8010bb8 <HAL_TIM_PWM_Start_DMA+0x44c>)
 8010b04:	4293      	cmp	r3, r2
 8010b06:	d022      	beq.n	8010b4e <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	4a2b      	ldr	r2, [pc, #172]	; (8010bbc <HAL_TIM_PWM_Start_DMA+0x450>)
 8010b0e:	4293      	cmp	r3, r2
 8010b10:	d01d      	beq.n	8010b4e <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	4a2a      	ldr	r2, [pc, #168]	; (8010bc0 <HAL_TIM_PWM_Start_DMA+0x454>)
 8010b18:	4293      	cmp	r3, r2
 8010b1a:	d018      	beq.n	8010b4e <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	4a21      	ldr	r2, [pc, #132]	; (8010ba8 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8010b22:	4293      	cmp	r3, r2
 8010b24:	d013      	beq.n	8010b4e <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	4a26      	ldr	r2, [pc, #152]	; (8010bc4 <HAL_TIM_PWM_Start_DMA+0x458>)
 8010b2c:	4293      	cmp	r3, r2
 8010b2e:	d00e      	beq.n	8010b4e <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	4a1d      	ldr	r2, [pc, #116]	; (8010bac <HAL_TIM_PWM_Start_DMA+0x440>)
 8010b36:	4293      	cmp	r3, r2
 8010b38:	d009      	beq.n	8010b4e <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	4a22      	ldr	r2, [pc, #136]	; (8010bc8 <HAL_TIM_PWM_Start_DMA+0x45c>)
 8010b40:	4293      	cmp	r3, r2
 8010b42:	d004      	beq.n	8010b4e <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	4a20      	ldr	r2, [pc, #128]	; (8010bcc <HAL_TIM_PWM_Start_DMA+0x460>)
 8010b4a:	4293      	cmp	r3, r2
 8010b4c:	d115      	bne.n	8010b7a <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	689a      	ldr	r2, [r3, #8]
 8010b54:	4b1e      	ldr	r3, [pc, #120]	; (8010bd0 <HAL_TIM_PWM_Start_DMA+0x464>)
 8010b56:	4013      	ands	r3, r2
 8010b58:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010b5a:	693b      	ldr	r3, [r7, #16]
 8010b5c:	2b06      	cmp	r3, #6
 8010b5e:	d015      	beq.n	8010b8c <HAL_TIM_PWM_Start_DMA+0x420>
 8010b60:	693b      	ldr	r3, [r7, #16]
 8010b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b66:	d011      	beq.n	8010b8c <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	681a      	ldr	r2, [r3, #0]
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	f042 0201 	orr.w	r2, r2, #1
 8010b76:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010b78:	e008      	b.n	8010b8c <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	681a      	ldr	r2, [r3, #0]
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	f042 0201 	orr.w	r2, r2, #1
 8010b88:	601a      	str	r2, [r3, #0]
 8010b8a:	e000      	b.n	8010b8e <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010b8c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8010b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b90:	4618      	mov	r0, r3
 8010b92:	3718      	adds	r7, #24
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd80      	pop	{r7, pc}
 8010b98:	0801115b 	.word	0x0801115b
 8010b9c:	08011203 	.word	0x08011203
 8010ba0:	080110c9 	.word	0x080110c9
 8010ba4:	40010000 	.word	0x40010000
 8010ba8:	40010400 	.word	0x40010400
 8010bac:	40014000 	.word	0x40014000
 8010bb0:	40014400 	.word	0x40014400
 8010bb4:	40014800 	.word	0x40014800
 8010bb8:	40000400 	.word	0x40000400
 8010bbc:	40000800 	.word	0x40000800
 8010bc0:	40000c00 	.word	0x40000c00
 8010bc4:	40001800 	.word	0x40001800
 8010bc8:	4000e000 	.word	0x4000e000
 8010bcc:	4000e400 	.word	0x4000e400
 8010bd0:	00010007 	.word	0x00010007

08010bd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b082      	sub	sp, #8
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	691b      	ldr	r3, [r3, #16]
 8010be2:	f003 0302 	and.w	r3, r3, #2
 8010be6:	2b02      	cmp	r3, #2
 8010be8:	d122      	bne.n	8010c30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	68db      	ldr	r3, [r3, #12]
 8010bf0:	f003 0302 	and.w	r3, r3, #2
 8010bf4:	2b02      	cmp	r3, #2
 8010bf6:	d11b      	bne.n	8010c30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	f06f 0202 	mvn.w	r2, #2
 8010c00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	2201      	movs	r2, #1
 8010c06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	699b      	ldr	r3, [r3, #24]
 8010c0e:	f003 0303 	and.w	r3, r3, #3
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d003      	beq.n	8010c1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010c16:	6878      	ldr	r0, [r7, #4]
 8010c18:	f000 fa24 	bl	8011064 <HAL_TIM_IC_CaptureCallback>
 8010c1c:	e005      	b.n	8010c2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010c1e:	6878      	ldr	r0, [r7, #4]
 8010c20:	f000 fa16 	bl	8011050 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010c24:	6878      	ldr	r0, [r7, #4]
 8010c26:	f000 fa27 	bl	8011078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	691b      	ldr	r3, [r3, #16]
 8010c36:	f003 0304 	and.w	r3, r3, #4
 8010c3a:	2b04      	cmp	r3, #4
 8010c3c:	d122      	bne.n	8010c84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	68db      	ldr	r3, [r3, #12]
 8010c44:	f003 0304 	and.w	r3, r3, #4
 8010c48:	2b04      	cmp	r3, #4
 8010c4a:	d11b      	bne.n	8010c84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	f06f 0204 	mvn.w	r2, #4
 8010c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	2202      	movs	r2, #2
 8010c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	699b      	ldr	r3, [r3, #24]
 8010c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d003      	beq.n	8010c72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010c6a:	6878      	ldr	r0, [r7, #4]
 8010c6c:	f000 f9fa 	bl	8011064 <HAL_TIM_IC_CaptureCallback>
 8010c70:	e005      	b.n	8010c7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010c72:	6878      	ldr	r0, [r7, #4]
 8010c74:	f000 f9ec 	bl	8011050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010c78:	6878      	ldr	r0, [r7, #4]
 8010c7a:	f000 f9fd 	bl	8011078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	2200      	movs	r2, #0
 8010c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	691b      	ldr	r3, [r3, #16]
 8010c8a:	f003 0308 	and.w	r3, r3, #8
 8010c8e:	2b08      	cmp	r3, #8
 8010c90:	d122      	bne.n	8010cd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	68db      	ldr	r3, [r3, #12]
 8010c98:	f003 0308 	and.w	r3, r3, #8
 8010c9c:	2b08      	cmp	r3, #8
 8010c9e:	d11b      	bne.n	8010cd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	f06f 0208 	mvn.w	r2, #8
 8010ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	2204      	movs	r2, #4
 8010cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	69db      	ldr	r3, [r3, #28]
 8010cb6:	f003 0303 	and.w	r3, r3, #3
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d003      	beq.n	8010cc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	f000 f9d0 	bl	8011064 <HAL_TIM_IC_CaptureCallback>
 8010cc4:	e005      	b.n	8010cd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010cc6:	6878      	ldr	r0, [r7, #4]
 8010cc8:	f000 f9c2 	bl	8011050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010ccc:	6878      	ldr	r0, [r7, #4]
 8010cce:	f000 f9d3 	bl	8011078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	691b      	ldr	r3, [r3, #16]
 8010cde:	f003 0310 	and.w	r3, r3, #16
 8010ce2:	2b10      	cmp	r3, #16
 8010ce4:	d122      	bne.n	8010d2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	68db      	ldr	r3, [r3, #12]
 8010cec:	f003 0310 	and.w	r3, r3, #16
 8010cf0:	2b10      	cmp	r3, #16
 8010cf2:	d11b      	bne.n	8010d2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	f06f 0210 	mvn.w	r2, #16
 8010cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	2208      	movs	r2, #8
 8010d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	69db      	ldr	r3, [r3, #28]
 8010d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d003      	beq.n	8010d1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010d12:	6878      	ldr	r0, [r7, #4]
 8010d14:	f000 f9a6 	bl	8011064 <HAL_TIM_IC_CaptureCallback>
 8010d18:	e005      	b.n	8010d26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010d1a:	6878      	ldr	r0, [r7, #4]
 8010d1c:	f000 f998 	bl	8011050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010d20:	6878      	ldr	r0, [r7, #4]
 8010d22:	f000 f9a9 	bl	8011078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	2200      	movs	r2, #0
 8010d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	691b      	ldr	r3, [r3, #16]
 8010d32:	f003 0301 	and.w	r3, r3, #1
 8010d36:	2b01      	cmp	r3, #1
 8010d38:	d10e      	bne.n	8010d58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	68db      	ldr	r3, [r3, #12]
 8010d40:	f003 0301 	and.w	r3, r3, #1
 8010d44:	2b01      	cmp	r3, #1
 8010d46:	d107      	bne.n	8010d58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	f06f 0201 	mvn.w	r2, #1
 8010d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010d52:	6878      	ldr	r0, [r7, #4]
 8010d54:	f000 f972 	bl	801103c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	691b      	ldr	r3, [r3, #16]
 8010d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d62:	2b80      	cmp	r3, #128	; 0x80
 8010d64:	d10e      	bne.n	8010d84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	68db      	ldr	r3, [r3, #12]
 8010d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d70:	2b80      	cmp	r3, #128	; 0x80
 8010d72:	d107      	bne.n	8010d84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010d7e:	6878      	ldr	r0, [r7, #4]
 8010d80:	f000 febc 	bl	8011afc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	691b      	ldr	r3, [r3, #16]
 8010d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010d92:	d10e      	bne.n	8010db2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	68db      	ldr	r3, [r3, #12]
 8010d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d9e:	2b80      	cmp	r3, #128	; 0x80
 8010da0:	d107      	bne.n	8010db2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010dac:	6878      	ldr	r0, [r7, #4]
 8010dae:	f000 feaf 	bl	8011b10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	691b      	ldr	r3, [r3, #16]
 8010db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010dbc:	2b40      	cmp	r3, #64	; 0x40
 8010dbe:	d10e      	bne.n	8010dde <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	68db      	ldr	r3, [r3, #12]
 8010dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010dca:	2b40      	cmp	r3, #64	; 0x40
 8010dcc:	d107      	bne.n	8010dde <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010dd8:	6878      	ldr	r0, [r7, #4]
 8010dda:	f000 f961 	bl	80110a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	691b      	ldr	r3, [r3, #16]
 8010de4:	f003 0320 	and.w	r3, r3, #32
 8010de8:	2b20      	cmp	r3, #32
 8010dea:	d10e      	bne.n	8010e0a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	68db      	ldr	r3, [r3, #12]
 8010df2:	f003 0320 	and.w	r3, r3, #32
 8010df6:	2b20      	cmp	r3, #32
 8010df8:	d107      	bne.n	8010e0a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	f06f 0220 	mvn.w	r2, #32
 8010e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010e04:	6878      	ldr	r0, [r7, #4]
 8010e06:	f000 fe6f 	bl	8011ae8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010e0a:	bf00      	nop
 8010e0c:	3708      	adds	r7, #8
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	bd80      	pop	{r7, pc}
	...

08010e14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b086      	sub	sp, #24
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	60f8      	str	r0, [r7, #12]
 8010e1c:	60b9      	str	r1, [r7, #8]
 8010e1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010e20:	2300      	movs	r3, #0
 8010e22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010e2a:	2b01      	cmp	r3, #1
 8010e2c:	d101      	bne.n	8010e32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8010e2e:	2302      	movs	r3, #2
 8010e30:	e0ff      	b.n	8011032 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	2201      	movs	r2, #1
 8010e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	2b14      	cmp	r3, #20
 8010e3e:	f200 80f0 	bhi.w	8011022 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8010e42:	a201      	add	r2, pc, #4	; (adr r2, 8010e48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e48:	08010e9d 	.word	0x08010e9d
 8010e4c:	08011023 	.word	0x08011023
 8010e50:	08011023 	.word	0x08011023
 8010e54:	08011023 	.word	0x08011023
 8010e58:	08010edd 	.word	0x08010edd
 8010e5c:	08011023 	.word	0x08011023
 8010e60:	08011023 	.word	0x08011023
 8010e64:	08011023 	.word	0x08011023
 8010e68:	08010f1f 	.word	0x08010f1f
 8010e6c:	08011023 	.word	0x08011023
 8010e70:	08011023 	.word	0x08011023
 8010e74:	08011023 	.word	0x08011023
 8010e78:	08010f5f 	.word	0x08010f5f
 8010e7c:	08011023 	.word	0x08011023
 8010e80:	08011023 	.word	0x08011023
 8010e84:	08011023 	.word	0x08011023
 8010e88:	08010fa1 	.word	0x08010fa1
 8010e8c:	08011023 	.word	0x08011023
 8010e90:	08011023 	.word	0x08011023
 8010e94:	08011023 	.word	0x08011023
 8010e98:	08010fe1 	.word	0x08010fe1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	68b9      	ldr	r1, [r7, #8]
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f000 fa88 	bl	80113b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	699a      	ldr	r2, [r3, #24]
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	f042 0208 	orr.w	r2, r2, #8
 8010eb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	699a      	ldr	r2, [r3, #24]
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	f022 0204 	bic.w	r2, r2, #4
 8010ec6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	6999      	ldr	r1, [r3, #24]
 8010ece:	68bb      	ldr	r3, [r7, #8]
 8010ed0:	691a      	ldr	r2, [r3, #16]
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	430a      	orrs	r2, r1
 8010ed8:	619a      	str	r2, [r3, #24]
      break;
 8010eda:	e0a5      	b.n	8011028 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	68b9      	ldr	r1, [r7, #8]
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	f000 faf8 	bl	80114d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	699a      	ldr	r2, [r3, #24]
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010ef6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	699a      	ldr	r2, [r3, #24]
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010f06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	6999      	ldr	r1, [r3, #24]
 8010f0e:	68bb      	ldr	r3, [r7, #8]
 8010f10:	691b      	ldr	r3, [r3, #16]
 8010f12:	021a      	lsls	r2, r3, #8
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	430a      	orrs	r2, r1
 8010f1a:	619a      	str	r2, [r3, #24]
      break;
 8010f1c:	e084      	b.n	8011028 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	68b9      	ldr	r1, [r7, #8]
 8010f24:	4618      	mov	r0, r3
 8010f26:	f000 fb61 	bl	80115ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	69da      	ldr	r2, [r3, #28]
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	f042 0208 	orr.w	r2, r2, #8
 8010f38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	69da      	ldr	r2, [r3, #28]
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	f022 0204 	bic.w	r2, r2, #4
 8010f48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	69d9      	ldr	r1, [r3, #28]
 8010f50:	68bb      	ldr	r3, [r7, #8]
 8010f52:	691a      	ldr	r2, [r3, #16]
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	430a      	orrs	r2, r1
 8010f5a:	61da      	str	r2, [r3, #28]
      break;
 8010f5c:	e064      	b.n	8011028 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	68b9      	ldr	r1, [r7, #8]
 8010f64:	4618      	mov	r0, r3
 8010f66:	f000 fbc9 	bl	80116fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	69da      	ldr	r2, [r3, #28]
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010f78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	69da      	ldr	r2, [r3, #28]
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010f88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	69d9      	ldr	r1, [r3, #28]
 8010f90:	68bb      	ldr	r3, [r7, #8]
 8010f92:	691b      	ldr	r3, [r3, #16]
 8010f94:	021a      	lsls	r2, r3, #8
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	430a      	orrs	r2, r1
 8010f9c:	61da      	str	r2, [r3, #28]
      break;
 8010f9e:	e043      	b.n	8011028 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	68b9      	ldr	r1, [r7, #8]
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f000 fc12 	bl	80117d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	f042 0208 	orr.w	r2, r2, #8
 8010fba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	f022 0204 	bic.w	r2, r2, #4
 8010fca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010fd2:	68bb      	ldr	r3, [r7, #8]
 8010fd4:	691a      	ldr	r2, [r3, #16]
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	430a      	orrs	r2, r1
 8010fdc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010fde:	e023      	b.n	8011028 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	68b9      	ldr	r1, [r7, #8]
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	f000 fc56 	bl	8011898 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010ffa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801100a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011012:	68bb      	ldr	r3, [r7, #8]
 8011014:	691b      	ldr	r3, [r3, #16]
 8011016:	021a      	lsls	r2, r3, #8
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	430a      	orrs	r2, r1
 801101e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8011020:	e002      	b.n	8011028 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8011022:	2301      	movs	r3, #1
 8011024:	75fb      	strb	r3, [r7, #23]
      break;
 8011026:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	2200      	movs	r2, #0
 801102c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011030:	7dfb      	ldrb	r3, [r7, #23]
}
 8011032:	4618      	mov	r0, r3
 8011034:	3718      	adds	r7, #24
 8011036:	46bd      	mov	sp, r7
 8011038:	bd80      	pop	{r7, pc}
 801103a:	bf00      	nop

0801103c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801103c:	b480      	push	{r7}
 801103e:	b083      	sub	sp, #12
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8011044:	bf00      	nop
 8011046:	370c      	adds	r7, #12
 8011048:	46bd      	mov	sp, r7
 801104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104e:	4770      	bx	lr

08011050 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011050:	b480      	push	{r7}
 8011052:	b083      	sub	sp, #12
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011058:	bf00      	nop
 801105a:	370c      	adds	r7, #12
 801105c:	46bd      	mov	sp, r7
 801105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011062:	4770      	bx	lr

08011064 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011064:	b480      	push	{r7}
 8011066:	b083      	sub	sp, #12
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801106c:	bf00      	nop
 801106e:	370c      	adds	r7, #12
 8011070:	46bd      	mov	sp, r7
 8011072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011076:	4770      	bx	lr

08011078 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8011078:	b480      	push	{r7}
 801107a:	b083      	sub	sp, #12
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011080:	bf00      	nop
 8011082:	370c      	adds	r7, #12
 8011084:	46bd      	mov	sp, r7
 8011086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108a:	4770      	bx	lr

0801108c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 801108c:	b480      	push	{r7}
 801108e:	b083      	sub	sp, #12
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8011094:	bf00      	nop
 8011096:	370c      	adds	r7, #12
 8011098:	46bd      	mov	sp, r7
 801109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109e:	4770      	bx	lr

080110a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80110a0:	b480      	push	{r7}
 80110a2:	b083      	sub	sp, #12
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80110a8:	bf00      	nop
 80110aa:	370c      	adds	r7, #12
 80110ac:	46bd      	mov	sp, r7
 80110ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b2:	4770      	bx	lr

080110b4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80110b4:	b480      	push	{r7}
 80110b6:	b083      	sub	sp, #12
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80110bc:	bf00      	nop
 80110be:	370c      	adds	r7, #12
 80110c0:	46bd      	mov	sp, r7
 80110c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c6:	4770      	bx	lr

080110c8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b084      	sub	sp, #16
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110d4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110da:	687a      	ldr	r2, [r7, #4]
 80110dc:	429a      	cmp	r2, r3
 80110de:	d107      	bne.n	80110f0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	2201      	movs	r2, #1
 80110e4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	2201      	movs	r2, #1
 80110ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80110ee:	e02a      	b.n	8011146 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110f4:	687a      	ldr	r2, [r7, #4]
 80110f6:	429a      	cmp	r2, r3
 80110f8:	d107      	bne.n	801110a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	2202      	movs	r2, #2
 80110fe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	2201      	movs	r2, #1
 8011104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011108:	e01d      	b.n	8011146 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801110e:	687a      	ldr	r2, [r7, #4]
 8011110:	429a      	cmp	r2, r3
 8011112:	d107      	bne.n	8011124 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	2204      	movs	r2, #4
 8011118:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	2201      	movs	r2, #1
 801111e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011122:	e010      	b.n	8011146 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011128:	687a      	ldr	r2, [r7, #4]
 801112a:	429a      	cmp	r2, r3
 801112c:	d107      	bne.n	801113e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	2208      	movs	r2, #8
 8011132:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	2201      	movs	r2, #1
 8011138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801113c:	e003      	b.n	8011146 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	2201      	movs	r2, #1
 8011142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8011146:	68f8      	ldr	r0, [r7, #12]
 8011148:	f7ff ffb4 	bl	80110b4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	2200      	movs	r2, #0
 8011150:	771a      	strb	r2, [r3, #28]
}
 8011152:	bf00      	nop
 8011154:	3710      	adds	r7, #16
 8011156:	46bd      	mov	sp, r7
 8011158:	bd80      	pop	{r7, pc}

0801115a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 801115a:	b580      	push	{r7, lr}
 801115c:	b084      	sub	sp, #16
 801115e:	af00      	add	r7, sp, #0
 8011160:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011166:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801116c:	687a      	ldr	r2, [r7, #4]
 801116e:	429a      	cmp	r2, r3
 8011170:	d10b      	bne.n	801118a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	2201      	movs	r2, #1
 8011176:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	69db      	ldr	r3, [r3, #28]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d136      	bne.n	80111ee <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	2201      	movs	r2, #1
 8011184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011188:	e031      	b.n	80111ee <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801118e:	687a      	ldr	r2, [r7, #4]
 8011190:	429a      	cmp	r2, r3
 8011192:	d10b      	bne.n	80111ac <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	2202      	movs	r2, #2
 8011198:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	69db      	ldr	r3, [r3, #28]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d125      	bne.n	80111ee <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	2201      	movs	r2, #1
 80111a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80111aa:	e020      	b.n	80111ee <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111b0:	687a      	ldr	r2, [r7, #4]
 80111b2:	429a      	cmp	r2, r3
 80111b4:	d10b      	bne.n	80111ce <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	2204      	movs	r2, #4
 80111ba:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	69db      	ldr	r3, [r3, #28]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d114      	bne.n	80111ee <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	2201      	movs	r2, #1
 80111c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80111cc:	e00f      	b.n	80111ee <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111d2:	687a      	ldr	r2, [r7, #4]
 80111d4:	429a      	cmp	r2, r3
 80111d6:	d10a      	bne.n	80111ee <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	2208      	movs	r2, #8
 80111dc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	69db      	ldr	r3, [r3, #28]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d103      	bne.n	80111ee <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	2201      	movs	r2, #1
 80111ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80111ee:	68f8      	ldr	r0, [r7, #12]
 80111f0:	f7ff ff42 	bl	8011078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	2200      	movs	r2, #0
 80111f8:	771a      	strb	r2, [r3, #28]
}
 80111fa:	bf00      	nop
 80111fc:	3710      	adds	r7, #16
 80111fe:	46bd      	mov	sp, r7
 8011200:	bd80      	pop	{r7, pc}

08011202 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011202:	b580      	push	{r7, lr}
 8011204:	b084      	sub	sp, #16
 8011206:	af00      	add	r7, sp, #0
 8011208:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801120e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011214:	687a      	ldr	r2, [r7, #4]
 8011216:	429a      	cmp	r2, r3
 8011218:	d103      	bne.n	8011222 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	2201      	movs	r2, #1
 801121e:	771a      	strb	r2, [r3, #28]
 8011220:	e019      	b.n	8011256 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011226:	687a      	ldr	r2, [r7, #4]
 8011228:	429a      	cmp	r2, r3
 801122a:	d103      	bne.n	8011234 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	2202      	movs	r2, #2
 8011230:	771a      	strb	r2, [r3, #28]
 8011232:	e010      	b.n	8011256 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011238:	687a      	ldr	r2, [r7, #4]
 801123a:	429a      	cmp	r2, r3
 801123c:	d103      	bne.n	8011246 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	2204      	movs	r2, #4
 8011242:	771a      	strb	r2, [r3, #28]
 8011244:	e007      	b.n	8011256 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801124a:	687a      	ldr	r2, [r7, #4]
 801124c:	429a      	cmp	r2, r3
 801124e:	d102      	bne.n	8011256 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	2208      	movs	r2, #8
 8011254:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8011256:	68f8      	ldr	r0, [r7, #12]
 8011258:	f7ff ff18 	bl	801108c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	2200      	movs	r2, #0
 8011260:	771a      	strb	r2, [r3, #28]
}
 8011262:	bf00      	nop
 8011264:	3710      	adds	r7, #16
 8011266:	46bd      	mov	sp, r7
 8011268:	bd80      	pop	{r7, pc}
	...

0801126c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801126c:	b480      	push	{r7}
 801126e:	b085      	sub	sp, #20
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
 8011274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	4a44      	ldr	r2, [pc, #272]	; (8011390 <TIM_Base_SetConfig+0x124>)
 8011280:	4293      	cmp	r3, r2
 8011282:	d013      	beq.n	80112ac <TIM_Base_SetConfig+0x40>
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801128a:	d00f      	beq.n	80112ac <TIM_Base_SetConfig+0x40>
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	4a41      	ldr	r2, [pc, #260]	; (8011394 <TIM_Base_SetConfig+0x128>)
 8011290:	4293      	cmp	r3, r2
 8011292:	d00b      	beq.n	80112ac <TIM_Base_SetConfig+0x40>
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	4a40      	ldr	r2, [pc, #256]	; (8011398 <TIM_Base_SetConfig+0x12c>)
 8011298:	4293      	cmp	r3, r2
 801129a:	d007      	beq.n	80112ac <TIM_Base_SetConfig+0x40>
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	4a3f      	ldr	r2, [pc, #252]	; (801139c <TIM_Base_SetConfig+0x130>)
 80112a0:	4293      	cmp	r3, r2
 80112a2:	d003      	beq.n	80112ac <TIM_Base_SetConfig+0x40>
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	4a3e      	ldr	r2, [pc, #248]	; (80113a0 <TIM_Base_SetConfig+0x134>)
 80112a8:	4293      	cmp	r3, r2
 80112aa:	d108      	bne.n	80112be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80112b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	685b      	ldr	r3, [r3, #4]
 80112b8:	68fa      	ldr	r2, [r7, #12]
 80112ba:	4313      	orrs	r3, r2
 80112bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	4a33      	ldr	r2, [pc, #204]	; (8011390 <TIM_Base_SetConfig+0x124>)
 80112c2:	4293      	cmp	r3, r2
 80112c4:	d027      	beq.n	8011316 <TIM_Base_SetConfig+0xaa>
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80112cc:	d023      	beq.n	8011316 <TIM_Base_SetConfig+0xaa>
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	4a30      	ldr	r2, [pc, #192]	; (8011394 <TIM_Base_SetConfig+0x128>)
 80112d2:	4293      	cmp	r3, r2
 80112d4:	d01f      	beq.n	8011316 <TIM_Base_SetConfig+0xaa>
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	4a2f      	ldr	r2, [pc, #188]	; (8011398 <TIM_Base_SetConfig+0x12c>)
 80112da:	4293      	cmp	r3, r2
 80112dc:	d01b      	beq.n	8011316 <TIM_Base_SetConfig+0xaa>
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	4a2e      	ldr	r2, [pc, #184]	; (801139c <TIM_Base_SetConfig+0x130>)
 80112e2:	4293      	cmp	r3, r2
 80112e4:	d017      	beq.n	8011316 <TIM_Base_SetConfig+0xaa>
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	4a2d      	ldr	r2, [pc, #180]	; (80113a0 <TIM_Base_SetConfig+0x134>)
 80112ea:	4293      	cmp	r3, r2
 80112ec:	d013      	beq.n	8011316 <TIM_Base_SetConfig+0xaa>
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	4a2c      	ldr	r2, [pc, #176]	; (80113a4 <TIM_Base_SetConfig+0x138>)
 80112f2:	4293      	cmp	r3, r2
 80112f4:	d00f      	beq.n	8011316 <TIM_Base_SetConfig+0xaa>
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	4a2b      	ldr	r2, [pc, #172]	; (80113a8 <TIM_Base_SetConfig+0x13c>)
 80112fa:	4293      	cmp	r3, r2
 80112fc:	d00b      	beq.n	8011316 <TIM_Base_SetConfig+0xaa>
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	4a2a      	ldr	r2, [pc, #168]	; (80113ac <TIM_Base_SetConfig+0x140>)
 8011302:	4293      	cmp	r3, r2
 8011304:	d007      	beq.n	8011316 <TIM_Base_SetConfig+0xaa>
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	4a29      	ldr	r2, [pc, #164]	; (80113b0 <TIM_Base_SetConfig+0x144>)
 801130a:	4293      	cmp	r3, r2
 801130c:	d003      	beq.n	8011316 <TIM_Base_SetConfig+0xaa>
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	4a28      	ldr	r2, [pc, #160]	; (80113b4 <TIM_Base_SetConfig+0x148>)
 8011312:	4293      	cmp	r3, r2
 8011314:	d108      	bne.n	8011328 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801131c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801131e:	683b      	ldr	r3, [r7, #0]
 8011320:	68db      	ldr	r3, [r3, #12]
 8011322:	68fa      	ldr	r2, [r7, #12]
 8011324:	4313      	orrs	r3, r2
 8011326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801132e:	683b      	ldr	r3, [r7, #0]
 8011330:	695b      	ldr	r3, [r3, #20]
 8011332:	4313      	orrs	r3, r2
 8011334:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	68fa      	ldr	r2, [r7, #12]
 801133a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801133c:	683b      	ldr	r3, [r7, #0]
 801133e:	689a      	ldr	r2, [r3, #8]
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	681a      	ldr	r2, [r3, #0]
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	4a10      	ldr	r2, [pc, #64]	; (8011390 <TIM_Base_SetConfig+0x124>)
 8011350:	4293      	cmp	r3, r2
 8011352:	d00f      	beq.n	8011374 <TIM_Base_SetConfig+0x108>
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	4a12      	ldr	r2, [pc, #72]	; (80113a0 <TIM_Base_SetConfig+0x134>)
 8011358:	4293      	cmp	r3, r2
 801135a:	d00b      	beq.n	8011374 <TIM_Base_SetConfig+0x108>
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	4a11      	ldr	r2, [pc, #68]	; (80113a4 <TIM_Base_SetConfig+0x138>)
 8011360:	4293      	cmp	r3, r2
 8011362:	d007      	beq.n	8011374 <TIM_Base_SetConfig+0x108>
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	4a10      	ldr	r2, [pc, #64]	; (80113a8 <TIM_Base_SetConfig+0x13c>)
 8011368:	4293      	cmp	r3, r2
 801136a:	d003      	beq.n	8011374 <TIM_Base_SetConfig+0x108>
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	4a0f      	ldr	r2, [pc, #60]	; (80113ac <TIM_Base_SetConfig+0x140>)
 8011370:	4293      	cmp	r3, r2
 8011372:	d103      	bne.n	801137c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011374:	683b      	ldr	r3, [r7, #0]
 8011376:	691a      	ldr	r2, [r3, #16]
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	2201      	movs	r2, #1
 8011380:	615a      	str	r2, [r3, #20]
}
 8011382:	bf00      	nop
 8011384:	3714      	adds	r7, #20
 8011386:	46bd      	mov	sp, r7
 8011388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138c:	4770      	bx	lr
 801138e:	bf00      	nop
 8011390:	40010000 	.word	0x40010000
 8011394:	40000400 	.word	0x40000400
 8011398:	40000800 	.word	0x40000800
 801139c:	40000c00 	.word	0x40000c00
 80113a0:	40010400 	.word	0x40010400
 80113a4:	40014000 	.word	0x40014000
 80113a8:	40014400 	.word	0x40014400
 80113ac:	40014800 	.word	0x40014800
 80113b0:	4000e000 	.word	0x4000e000
 80113b4:	4000e400 	.word	0x4000e400

080113b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80113b8:	b480      	push	{r7}
 80113ba:	b087      	sub	sp, #28
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
 80113c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	6a1b      	ldr	r3, [r3, #32]
 80113c6:	f023 0201 	bic.w	r2, r3, #1
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	6a1b      	ldr	r3, [r3, #32]
 80113d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	685b      	ldr	r3, [r3, #4]
 80113d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	699b      	ldr	r3, [r3, #24]
 80113de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80113e0:	68fa      	ldr	r2, [r7, #12]
 80113e2:	4b37      	ldr	r3, [pc, #220]	; (80114c0 <TIM_OC1_SetConfig+0x108>)
 80113e4:	4013      	ands	r3, r2
 80113e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	f023 0303 	bic.w	r3, r3, #3
 80113ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80113f0:	683b      	ldr	r3, [r7, #0]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	68fa      	ldr	r2, [r7, #12]
 80113f6:	4313      	orrs	r3, r2
 80113f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80113fa:	697b      	ldr	r3, [r7, #20]
 80113fc:	f023 0302 	bic.w	r3, r3, #2
 8011400:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011402:	683b      	ldr	r3, [r7, #0]
 8011404:	689b      	ldr	r3, [r3, #8]
 8011406:	697a      	ldr	r2, [r7, #20]
 8011408:	4313      	orrs	r3, r2
 801140a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	4a2d      	ldr	r2, [pc, #180]	; (80114c4 <TIM_OC1_SetConfig+0x10c>)
 8011410:	4293      	cmp	r3, r2
 8011412:	d00f      	beq.n	8011434 <TIM_OC1_SetConfig+0x7c>
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	4a2c      	ldr	r2, [pc, #176]	; (80114c8 <TIM_OC1_SetConfig+0x110>)
 8011418:	4293      	cmp	r3, r2
 801141a:	d00b      	beq.n	8011434 <TIM_OC1_SetConfig+0x7c>
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	4a2b      	ldr	r2, [pc, #172]	; (80114cc <TIM_OC1_SetConfig+0x114>)
 8011420:	4293      	cmp	r3, r2
 8011422:	d007      	beq.n	8011434 <TIM_OC1_SetConfig+0x7c>
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	4a2a      	ldr	r2, [pc, #168]	; (80114d0 <TIM_OC1_SetConfig+0x118>)
 8011428:	4293      	cmp	r3, r2
 801142a:	d003      	beq.n	8011434 <TIM_OC1_SetConfig+0x7c>
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	4a29      	ldr	r2, [pc, #164]	; (80114d4 <TIM_OC1_SetConfig+0x11c>)
 8011430:	4293      	cmp	r3, r2
 8011432:	d10c      	bne.n	801144e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011434:	697b      	ldr	r3, [r7, #20]
 8011436:	f023 0308 	bic.w	r3, r3, #8
 801143a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801143c:	683b      	ldr	r3, [r7, #0]
 801143e:	68db      	ldr	r3, [r3, #12]
 8011440:	697a      	ldr	r2, [r7, #20]
 8011442:	4313      	orrs	r3, r2
 8011444:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011446:	697b      	ldr	r3, [r7, #20]
 8011448:	f023 0304 	bic.w	r3, r3, #4
 801144c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	4a1c      	ldr	r2, [pc, #112]	; (80114c4 <TIM_OC1_SetConfig+0x10c>)
 8011452:	4293      	cmp	r3, r2
 8011454:	d00f      	beq.n	8011476 <TIM_OC1_SetConfig+0xbe>
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	4a1b      	ldr	r2, [pc, #108]	; (80114c8 <TIM_OC1_SetConfig+0x110>)
 801145a:	4293      	cmp	r3, r2
 801145c:	d00b      	beq.n	8011476 <TIM_OC1_SetConfig+0xbe>
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	4a1a      	ldr	r2, [pc, #104]	; (80114cc <TIM_OC1_SetConfig+0x114>)
 8011462:	4293      	cmp	r3, r2
 8011464:	d007      	beq.n	8011476 <TIM_OC1_SetConfig+0xbe>
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	4a19      	ldr	r2, [pc, #100]	; (80114d0 <TIM_OC1_SetConfig+0x118>)
 801146a:	4293      	cmp	r3, r2
 801146c:	d003      	beq.n	8011476 <TIM_OC1_SetConfig+0xbe>
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	4a18      	ldr	r2, [pc, #96]	; (80114d4 <TIM_OC1_SetConfig+0x11c>)
 8011472:	4293      	cmp	r3, r2
 8011474:	d111      	bne.n	801149a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011476:	693b      	ldr	r3, [r7, #16]
 8011478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801147c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801147e:	693b      	ldr	r3, [r7, #16]
 8011480:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011484:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011486:	683b      	ldr	r3, [r7, #0]
 8011488:	695b      	ldr	r3, [r3, #20]
 801148a:	693a      	ldr	r2, [r7, #16]
 801148c:	4313      	orrs	r3, r2
 801148e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011490:	683b      	ldr	r3, [r7, #0]
 8011492:	699b      	ldr	r3, [r3, #24]
 8011494:	693a      	ldr	r2, [r7, #16]
 8011496:	4313      	orrs	r3, r2
 8011498:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	693a      	ldr	r2, [r7, #16]
 801149e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	68fa      	ldr	r2, [r7, #12]
 80114a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	685a      	ldr	r2, [r3, #4]
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	697a      	ldr	r2, [r7, #20]
 80114b2:	621a      	str	r2, [r3, #32]
}
 80114b4:	bf00      	nop
 80114b6:	371c      	adds	r7, #28
 80114b8:	46bd      	mov	sp, r7
 80114ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114be:	4770      	bx	lr
 80114c0:	fffeff8f 	.word	0xfffeff8f
 80114c4:	40010000 	.word	0x40010000
 80114c8:	40010400 	.word	0x40010400
 80114cc:	40014000 	.word	0x40014000
 80114d0:	40014400 	.word	0x40014400
 80114d4:	40014800 	.word	0x40014800

080114d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80114d8:	b480      	push	{r7}
 80114da:	b087      	sub	sp, #28
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
 80114e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	6a1b      	ldr	r3, [r3, #32]
 80114e6:	f023 0210 	bic.w	r2, r3, #16
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	6a1b      	ldr	r3, [r3, #32]
 80114f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	685b      	ldr	r3, [r3, #4]
 80114f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	699b      	ldr	r3, [r3, #24]
 80114fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011500:	68fa      	ldr	r2, [r7, #12]
 8011502:	4b34      	ldr	r3, [pc, #208]	; (80115d4 <TIM_OC2_SetConfig+0xfc>)
 8011504:	4013      	ands	r3, r2
 8011506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801150e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011510:	683b      	ldr	r3, [r7, #0]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	021b      	lsls	r3, r3, #8
 8011516:	68fa      	ldr	r2, [r7, #12]
 8011518:	4313      	orrs	r3, r2
 801151a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801151c:	697b      	ldr	r3, [r7, #20]
 801151e:	f023 0320 	bic.w	r3, r3, #32
 8011522:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011524:	683b      	ldr	r3, [r7, #0]
 8011526:	689b      	ldr	r3, [r3, #8]
 8011528:	011b      	lsls	r3, r3, #4
 801152a:	697a      	ldr	r2, [r7, #20]
 801152c:	4313      	orrs	r3, r2
 801152e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	4a29      	ldr	r2, [pc, #164]	; (80115d8 <TIM_OC2_SetConfig+0x100>)
 8011534:	4293      	cmp	r3, r2
 8011536:	d003      	beq.n	8011540 <TIM_OC2_SetConfig+0x68>
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	4a28      	ldr	r2, [pc, #160]	; (80115dc <TIM_OC2_SetConfig+0x104>)
 801153c:	4293      	cmp	r3, r2
 801153e:	d10d      	bne.n	801155c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011540:	697b      	ldr	r3, [r7, #20]
 8011542:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011548:	683b      	ldr	r3, [r7, #0]
 801154a:	68db      	ldr	r3, [r3, #12]
 801154c:	011b      	lsls	r3, r3, #4
 801154e:	697a      	ldr	r2, [r7, #20]
 8011550:	4313      	orrs	r3, r2
 8011552:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011554:	697b      	ldr	r3, [r7, #20]
 8011556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801155a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	4a1e      	ldr	r2, [pc, #120]	; (80115d8 <TIM_OC2_SetConfig+0x100>)
 8011560:	4293      	cmp	r3, r2
 8011562:	d00f      	beq.n	8011584 <TIM_OC2_SetConfig+0xac>
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	4a1d      	ldr	r2, [pc, #116]	; (80115dc <TIM_OC2_SetConfig+0x104>)
 8011568:	4293      	cmp	r3, r2
 801156a:	d00b      	beq.n	8011584 <TIM_OC2_SetConfig+0xac>
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	4a1c      	ldr	r2, [pc, #112]	; (80115e0 <TIM_OC2_SetConfig+0x108>)
 8011570:	4293      	cmp	r3, r2
 8011572:	d007      	beq.n	8011584 <TIM_OC2_SetConfig+0xac>
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	4a1b      	ldr	r2, [pc, #108]	; (80115e4 <TIM_OC2_SetConfig+0x10c>)
 8011578:	4293      	cmp	r3, r2
 801157a:	d003      	beq.n	8011584 <TIM_OC2_SetConfig+0xac>
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	4a1a      	ldr	r2, [pc, #104]	; (80115e8 <TIM_OC2_SetConfig+0x110>)
 8011580:	4293      	cmp	r3, r2
 8011582:	d113      	bne.n	80115ac <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011584:	693b      	ldr	r3, [r7, #16]
 8011586:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801158a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801158c:	693b      	ldr	r3, [r7, #16]
 801158e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011592:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011594:	683b      	ldr	r3, [r7, #0]
 8011596:	695b      	ldr	r3, [r3, #20]
 8011598:	009b      	lsls	r3, r3, #2
 801159a:	693a      	ldr	r2, [r7, #16]
 801159c:	4313      	orrs	r3, r2
 801159e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80115a0:	683b      	ldr	r3, [r7, #0]
 80115a2:	699b      	ldr	r3, [r3, #24]
 80115a4:	009b      	lsls	r3, r3, #2
 80115a6:	693a      	ldr	r2, [r7, #16]
 80115a8:	4313      	orrs	r3, r2
 80115aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	693a      	ldr	r2, [r7, #16]
 80115b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	68fa      	ldr	r2, [r7, #12]
 80115b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	685a      	ldr	r2, [r3, #4]
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	697a      	ldr	r2, [r7, #20]
 80115c4:	621a      	str	r2, [r3, #32]
}
 80115c6:	bf00      	nop
 80115c8:	371c      	adds	r7, #28
 80115ca:	46bd      	mov	sp, r7
 80115cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d0:	4770      	bx	lr
 80115d2:	bf00      	nop
 80115d4:	feff8fff 	.word	0xfeff8fff
 80115d8:	40010000 	.word	0x40010000
 80115dc:	40010400 	.word	0x40010400
 80115e0:	40014000 	.word	0x40014000
 80115e4:	40014400 	.word	0x40014400
 80115e8:	40014800 	.word	0x40014800

080115ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80115ec:	b480      	push	{r7}
 80115ee:	b087      	sub	sp, #28
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
 80115f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	6a1b      	ldr	r3, [r3, #32]
 80115fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	6a1b      	ldr	r3, [r3, #32]
 8011606:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	685b      	ldr	r3, [r3, #4]
 801160c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	69db      	ldr	r3, [r3, #28]
 8011612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011614:	68fa      	ldr	r2, [r7, #12]
 8011616:	4b33      	ldr	r3, [pc, #204]	; (80116e4 <TIM_OC3_SetConfig+0xf8>)
 8011618:	4013      	ands	r3, r2
 801161a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	f023 0303 	bic.w	r3, r3, #3
 8011622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011624:	683b      	ldr	r3, [r7, #0]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	68fa      	ldr	r2, [r7, #12]
 801162a:	4313      	orrs	r3, r2
 801162c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801162e:	697b      	ldr	r3, [r7, #20]
 8011630:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011636:	683b      	ldr	r3, [r7, #0]
 8011638:	689b      	ldr	r3, [r3, #8]
 801163a:	021b      	lsls	r3, r3, #8
 801163c:	697a      	ldr	r2, [r7, #20]
 801163e:	4313      	orrs	r3, r2
 8011640:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	4a28      	ldr	r2, [pc, #160]	; (80116e8 <TIM_OC3_SetConfig+0xfc>)
 8011646:	4293      	cmp	r3, r2
 8011648:	d003      	beq.n	8011652 <TIM_OC3_SetConfig+0x66>
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	4a27      	ldr	r2, [pc, #156]	; (80116ec <TIM_OC3_SetConfig+0x100>)
 801164e:	4293      	cmp	r3, r2
 8011650:	d10d      	bne.n	801166e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011652:	697b      	ldr	r3, [r7, #20]
 8011654:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011658:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801165a:	683b      	ldr	r3, [r7, #0]
 801165c:	68db      	ldr	r3, [r3, #12]
 801165e:	021b      	lsls	r3, r3, #8
 8011660:	697a      	ldr	r2, [r7, #20]
 8011662:	4313      	orrs	r3, r2
 8011664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011666:	697b      	ldr	r3, [r7, #20]
 8011668:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801166c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	4a1d      	ldr	r2, [pc, #116]	; (80116e8 <TIM_OC3_SetConfig+0xfc>)
 8011672:	4293      	cmp	r3, r2
 8011674:	d00f      	beq.n	8011696 <TIM_OC3_SetConfig+0xaa>
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	4a1c      	ldr	r2, [pc, #112]	; (80116ec <TIM_OC3_SetConfig+0x100>)
 801167a:	4293      	cmp	r3, r2
 801167c:	d00b      	beq.n	8011696 <TIM_OC3_SetConfig+0xaa>
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	4a1b      	ldr	r2, [pc, #108]	; (80116f0 <TIM_OC3_SetConfig+0x104>)
 8011682:	4293      	cmp	r3, r2
 8011684:	d007      	beq.n	8011696 <TIM_OC3_SetConfig+0xaa>
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	4a1a      	ldr	r2, [pc, #104]	; (80116f4 <TIM_OC3_SetConfig+0x108>)
 801168a:	4293      	cmp	r3, r2
 801168c:	d003      	beq.n	8011696 <TIM_OC3_SetConfig+0xaa>
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	4a19      	ldr	r2, [pc, #100]	; (80116f8 <TIM_OC3_SetConfig+0x10c>)
 8011692:	4293      	cmp	r3, r2
 8011694:	d113      	bne.n	80116be <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011696:	693b      	ldr	r3, [r7, #16]
 8011698:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801169c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801169e:	693b      	ldr	r3, [r7, #16]
 80116a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80116a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80116a6:	683b      	ldr	r3, [r7, #0]
 80116a8:	695b      	ldr	r3, [r3, #20]
 80116aa:	011b      	lsls	r3, r3, #4
 80116ac:	693a      	ldr	r2, [r7, #16]
 80116ae:	4313      	orrs	r3, r2
 80116b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	699b      	ldr	r3, [r3, #24]
 80116b6:	011b      	lsls	r3, r3, #4
 80116b8:	693a      	ldr	r2, [r7, #16]
 80116ba:	4313      	orrs	r3, r2
 80116bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	693a      	ldr	r2, [r7, #16]
 80116c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	68fa      	ldr	r2, [r7, #12]
 80116c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80116ca:	683b      	ldr	r3, [r7, #0]
 80116cc:	685a      	ldr	r2, [r3, #4]
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	697a      	ldr	r2, [r7, #20]
 80116d6:	621a      	str	r2, [r3, #32]
}
 80116d8:	bf00      	nop
 80116da:	371c      	adds	r7, #28
 80116dc:	46bd      	mov	sp, r7
 80116de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e2:	4770      	bx	lr
 80116e4:	fffeff8f 	.word	0xfffeff8f
 80116e8:	40010000 	.word	0x40010000
 80116ec:	40010400 	.word	0x40010400
 80116f0:	40014000 	.word	0x40014000
 80116f4:	40014400 	.word	0x40014400
 80116f8:	40014800 	.word	0x40014800

080116fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80116fc:	b480      	push	{r7}
 80116fe:	b087      	sub	sp, #28
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
 8011704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	6a1b      	ldr	r3, [r3, #32]
 801170a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	6a1b      	ldr	r3, [r3, #32]
 8011716:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	685b      	ldr	r3, [r3, #4]
 801171c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	69db      	ldr	r3, [r3, #28]
 8011722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011724:	68fa      	ldr	r2, [r7, #12]
 8011726:	4b24      	ldr	r3, [pc, #144]	; (80117b8 <TIM_OC4_SetConfig+0xbc>)
 8011728:	4013      	ands	r3, r2
 801172a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011732:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011734:	683b      	ldr	r3, [r7, #0]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	021b      	lsls	r3, r3, #8
 801173a:	68fa      	ldr	r2, [r7, #12]
 801173c:	4313      	orrs	r3, r2
 801173e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011740:	693b      	ldr	r3, [r7, #16]
 8011742:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011746:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	689b      	ldr	r3, [r3, #8]
 801174c:	031b      	lsls	r3, r3, #12
 801174e:	693a      	ldr	r2, [r7, #16]
 8011750:	4313      	orrs	r3, r2
 8011752:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	4a19      	ldr	r2, [pc, #100]	; (80117bc <TIM_OC4_SetConfig+0xc0>)
 8011758:	4293      	cmp	r3, r2
 801175a:	d00f      	beq.n	801177c <TIM_OC4_SetConfig+0x80>
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	4a18      	ldr	r2, [pc, #96]	; (80117c0 <TIM_OC4_SetConfig+0xc4>)
 8011760:	4293      	cmp	r3, r2
 8011762:	d00b      	beq.n	801177c <TIM_OC4_SetConfig+0x80>
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	4a17      	ldr	r2, [pc, #92]	; (80117c4 <TIM_OC4_SetConfig+0xc8>)
 8011768:	4293      	cmp	r3, r2
 801176a:	d007      	beq.n	801177c <TIM_OC4_SetConfig+0x80>
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	4a16      	ldr	r2, [pc, #88]	; (80117c8 <TIM_OC4_SetConfig+0xcc>)
 8011770:	4293      	cmp	r3, r2
 8011772:	d003      	beq.n	801177c <TIM_OC4_SetConfig+0x80>
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	4a15      	ldr	r2, [pc, #84]	; (80117cc <TIM_OC4_SetConfig+0xd0>)
 8011778:	4293      	cmp	r3, r2
 801177a:	d109      	bne.n	8011790 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801177c:	697b      	ldr	r3, [r7, #20]
 801177e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011782:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011784:	683b      	ldr	r3, [r7, #0]
 8011786:	695b      	ldr	r3, [r3, #20]
 8011788:	019b      	lsls	r3, r3, #6
 801178a:	697a      	ldr	r2, [r7, #20]
 801178c:	4313      	orrs	r3, r2
 801178e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	697a      	ldr	r2, [r7, #20]
 8011794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	68fa      	ldr	r2, [r7, #12]
 801179a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801179c:	683b      	ldr	r3, [r7, #0]
 801179e:	685a      	ldr	r2, [r3, #4]
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	693a      	ldr	r2, [r7, #16]
 80117a8:	621a      	str	r2, [r3, #32]
}
 80117aa:	bf00      	nop
 80117ac:	371c      	adds	r7, #28
 80117ae:	46bd      	mov	sp, r7
 80117b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b4:	4770      	bx	lr
 80117b6:	bf00      	nop
 80117b8:	feff8fff 	.word	0xfeff8fff
 80117bc:	40010000 	.word	0x40010000
 80117c0:	40010400 	.word	0x40010400
 80117c4:	40014000 	.word	0x40014000
 80117c8:	40014400 	.word	0x40014400
 80117cc:	40014800 	.word	0x40014800

080117d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80117d0:	b480      	push	{r7}
 80117d2:	b087      	sub	sp, #28
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]
 80117d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	6a1b      	ldr	r3, [r3, #32]
 80117de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	6a1b      	ldr	r3, [r3, #32]
 80117ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	685b      	ldr	r3, [r3, #4]
 80117f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80117f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80117f8:	68fa      	ldr	r2, [r7, #12]
 80117fa:	4b21      	ldr	r3, [pc, #132]	; (8011880 <TIM_OC5_SetConfig+0xb0>)
 80117fc:	4013      	ands	r3, r2
 80117fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011800:	683b      	ldr	r3, [r7, #0]
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	68fa      	ldr	r2, [r7, #12]
 8011806:	4313      	orrs	r3, r2
 8011808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801180a:	693b      	ldr	r3, [r7, #16]
 801180c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011810:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011812:	683b      	ldr	r3, [r7, #0]
 8011814:	689b      	ldr	r3, [r3, #8]
 8011816:	041b      	lsls	r3, r3, #16
 8011818:	693a      	ldr	r2, [r7, #16]
 801181a:	4313      	orrs	r3, r2
 801181c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	4a18      	ldr	r2, [pc, #96]	; (8011884 <TIM_OC5_SetConfig+0xb4>)
 8011822:	4293      	cmp	r3, r2
 8011824:	d00f      	beq.n	8011846 <TIM_OC5_SetConfig+0x76>
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	4a17      	ldr	r2, [pc, #92]	; (8011888 <TIM_OC5_SetConfig+0xb8>)
 801182a:	4293      	cmp	r3, r2
 801182c:	d00b      	beq.n	8011846 <TIM_OC5_SetConfig+0x76>
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	4a16      	ldr	r2, [pc, #88]	; (801188c <TIM_OC5_SetConfig+0xbc>)
 8011832:	4293      	cmp	r3, r2
 8011834:	d007      	beq.n	8011846 <TIM_OC5_SetConfig+0x76>
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	4a15      	ldr	r2, [pc, #84]	; (8011890 <TIM_OC5_SetConfig+0xc0>)
 801183a:	4293      	cmp	r3, r2
 801183c:	d003      	beq.n	8011846 <TIM_OC5_SetConfig+0x76>
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	4a14      	ldr	r2, [pc, #80]	; (8011894 <TIM_OC5_SetConfig+0xc4>)
 8011842:	4293      	cmp	r3, r2
 8011844:	d109      	bne.n	801185a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011846:	697b      	ldr	r3, [r7, #20]
 8011848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801184c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801184e:	683b      	ldr	r3, [r7, #0]
 8011850:	695b      	ldr	r3, [r3, #20]
 8011852:	021b      	lsls	r3, r3, #8
 8011854:	697a      	ldr	r2, [r7, #20]
 8011856:	4313      	orrs	r3, r2
 8011858:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	697a      	ldr	r2, [r7, #20]
 801185e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	68fa      	ldr	r2, [r7, #12]
 8011864:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011866:	683b      	ldr	r3, [r7, #0]
 8011868:	685a      	ldr	r2, [r3, #4]
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	693a      	ldr	r2, [r7, #16]
 8011872:	621a      	str	r2, [r3, #32]
}
 8011874:	bf00      	nop
 8011876:	371c      	adds	r7, #28
 8011878:	46bd      	mov	sp, r7
 801187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187e:	4770      	bx	lr
 8011880:	fffeff8f 	.word	0xfffeff8f
 8011884:	40010000 	.word	0x40010000
 8011888:	40010400 	.word	0x40010400
 801188c:	40014000 	.word	0x40014000
 8011890:	40014400 	.word	0x40014400
 8011894:	40014800 	.word	0x40014800

08011898 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011898:	b480      	push	{r7}
 801189a:	b087      	sub	sp, #28
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
 80118a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	6a1b      	ldr	r3, [r3, #32]
 80118a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	6a1b      	ldr	r3, [r3, #32]
 80118b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	685b      	ldr	r3, [r3, #4]
 80118b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80118be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80118c0:	68fa      	ldr	r2, [r7, #12]
 80118c2:	4b22      	ldr	r3, [pc, #136]	; (801194c <TIM_OC6_SetConfig+0xb4>)
 80118c4:	4013      	ands	r3, r2
 80118c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80118c8:	683b      	ldr	r3, [r7, #0]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	021b      	lsls	r3, r3, #8
 80118ce:	68fa      	ldr	r2, [r7, #12]
 80118d0:	4313      	orrs	r3, r2
 80118d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80118d4:	693b      	ldr	r3, [r7, #16]
 80118d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80118da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	689b      	ldr	r3, [r3, #8]
 80118e0:	051b      	lsls	r3, r3, #20
 80118e2:	693a      	ldr	r2, [r7, #16]
 80118e4:	4313      	orrs	r3, r2
 80118e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	4a19      	ldr	r2, [pc, #100]	; (8011950 <TIM_OC6_SetConfig+0xb8>)
 80118ec:	4293      	cmp	r3, r2
 80118ee:	d00f      	beq.n	8011910 <TIM_OC6_SetConfig+0x78>
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	4a18      	ldr	r2, [pc, #96]	; (8011954 <TIM_OC6_SetConfig+0xbc>)
 80118f4:	4293      	cmp	r3, r2
 80118f6:	d00b      	beq.n	8011910 <TIM_OC6_SetConfig+0x78>
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	4a17      	ldr	r2, [pc, #92]	; (8011958 <TIM_OC6_SetConfig+0xc0>)
 80118fc:	4293      	cmp	r3, r2
 80118fe:	d007      	beq.n	8011910 <TIM_OC6_SetConfig+0x78>
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	4a16      	ldr	r2, [pc, #88]	; (801195c <TIM_OC6_SetConfig+0xc4>)
 8011904:	4293      	cmp	r3, r2
 8011906:	d003      	beq.n	8011910 <TIM_OC6_SetConfig+0x78>
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	4a15      	ldr	r2, [pc, #84]	; (8011960 <TIM_OC6_SetConfig+0xc8>)
 801190c:	4293      	cmp	r3, r2
 801190e:	d109      	bne.n	8011924 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011910:	697b      	ldr	r3, [r7, #20]
 8011912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011916:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011918:	683b      	ldr	r3, [r7, #0]
 801191a:	695b      	ldr	r3, [r3, #20]
 801191c:	029b      	lsls	r3, r3, #10
 801191e:	697a      	ldr	r2, [r7, #20]
 8011920:	4313      	orrs	r3, r2
 8011922:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	697a      	ldr	r2, [r7, #20]
 8011928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	68fa      	ldr	r2, [r7, #12]
 801192e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011930:	683b      	ldr	r3, [r7, #0]
 8011932:	685a      	ldr	r2, [r3, #4]
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	693a      	ldr	r2, [r7, #16]
 801193c:	621a      	str	r2, [r3, #32]
}
 801193e:	bf00      	nop
 8011940:	371c      	adds	r7, #28
 8011942:	46bd      	mov	sp, r7
 8011944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011948:	4770      	bx	lr
 801194a:	bf00      	nop
 801194c:	feff8fff 	.word	0xfeff8fff
 8011950:	40010000 	.word	0x40010000
 8011954:	40010400 	.word	0x40010400
 8011958:	40014000 	.word	0x40014000
 801195c:	40014400 	.word	0x40014400
 8011960:	40014800 	.word	0x40014800

08011964 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011964:	b480      	push	{r7}
 8011966:	b087      	sub	sp, #28
 8011968:	af00      	add	r7, sp, #0
 801196a:	60f8      	str	r0, [r7, #12]
 801196c:	60b9      	str	r1, [r7, #8]
 801196e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011970:	68bb      	ldr	r3, [r7, #8]
 8011972:	f003 031f 	and.w	r3, r3, #31
 8011976:	2201      	movs	r2, #1
 8011978:	fa02 f303 	lsl.w	r3, r2, r3
 801197c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	6a1a      	ldr	r2, [r3, #32]
 8011982:	697b      	ldr	r3, [r7, #20]
 8011984:	43db      	mvns	r3, r3
 8011986:	401a      	ands	r2, r3
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	6a1a      	ldr	r2, [r3, #32]
 8011990:	68bb      	ldr	r3, [r7, #8]
 8011992:	f003 031f 	and.w	r3, r3, #31
 8011996:	6879      	ldr	r1, [r7, #4]
 8011998:	fa01 f303 	lsl.w	r3, r1, r3
 801199c:	431a      	orrs	r2, r3
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	621a      	str	r2, [r3, #32]
}
 80119a2:	bf00      	nop
 80119a4:	371c      	adds	r7, #28
 80119a6:	46bd      	mov	sp, r7
 80119a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ac:	4770      	bx	lr
	...

080119b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80119b0:	b480      	push	{r7}
 80119b2:	b085      	sub	sp, #20
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
 80119b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80119c0:	2b01      	cmp	r3, #1
 80119c2:	d101      	bne.n	80119c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80119c4:	2302      	movs	r3, #2
 80119c6:	e077      	b.n	8011ab8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	2201      	movs	r2, #1
 80119cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2202      	movs	r2, #2
 80119d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	685b      	ldr	r3, [r3, #4]
 80119de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	689b      	ldr	r3, [r3, #8]
 80119e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	4a35      	ldr	r2, [pc, #212]	; (8011ac4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80119ee:	4293      	cmp	r3, r2
 80119f0:	d004      	beq.n	80119fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	4a34      	ldr	r2, [pc, #208]	; (8011ac8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80119f8:	4293      	cmp	r3, r2
 80119fa:	d108      	bne.n	8011a0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011a02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011a04:	683b      	ldr	r3, [r7, #0]
 8011a06:	685b      	ldr	r3, [r3, #4]
 8011a08:	68fa      	ldr	r2, [r7, #12]
 8011a0a:	4313      	orrs	r3, r2
 8011a0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011a14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011a16:	683b      	ldr	r3, [r7, #0]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	68fa      	ldr	r2, [r7, #12]
 8011a1c:	4313      	orrs	r3, r2
 8011a1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	68fa      	ldr	r2, [r7, #12]
 8011a26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	4a25      	ldr	r2, [pc, #148]	; (8011ac4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011a2e:	4293      	cmp	r3, r2
 8011a30:	d02c      	beq.n	8011a8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011a3a:	d027      	beq.n	8011a8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	4a22      	ldr	r2, [pc, #136]	; (8011acc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8011a42:	4293      	cmp	r3, r2
 8011a44:	d022      	beq.n	8011a8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	4a21      	ldr	r2, [pc, #132]	; (8011ad0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8011a4c:	4293      	cmp	r3, r2
 8011a4e:	d01d      	beq.n	8011a8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	4a1f      	ldr	r2, [pc, #124]	; (8011ad4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8011a56:	4293      	cmp	r3, r2
 8011a58:	d018      	beq.n	8011a8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	4a1a      	ldr	r2, [pc, #104]	; (8011ac8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011a60:	4293      	cmp	r3, r2
 8011a62:	d013      	beq.n	8011a8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	4a1b      	ldr	r2, [pc, #108]	; (8011ad8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8011a6a:	4293      	cmp	r3, r2
 8011a6c:	d00e      	beq.n	8011a8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	4a1a      	ldr	r2, [pc, #104]	; (8011adc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8011a74:	4293      	cmp	r3, r2
 8011a76:	d009      	beq.n	8011a8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	4a18      	ldr	r2, [pc, #96]	; (8011ae0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8011a7e:	4293      	cmp	r3, r2
 8011a80:	d004      	beq.n	8011a8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	4a17      	ldr	r2, [pc, #92]	; (8011ae4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8011a88:	4293      	cmp	r3, r2
 8011a8a:	d10c      	bne.n	8011aa6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011a8c:	68bb      	ldr	r3, [r7, #8]
 8011a8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011a92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011a94:	683b      	ldr	r3, [r7, #0]
 8011a96:	689b      	ldr	r3, [r3, #8]
 8011a98:	68ba      	ldr	r2, [r7, #8]
 8011a9a:	4313      	orrs	r3, r2
 8011a9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	68ba      	ldr	r2, [r7, #8]
 8011aa4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	2201      	movs	r2, #1
 8011aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011ab6:	2300      	movs	r3, #0
}
 8011ab8:	4618      	mov	r0, r3
 8011aba:	3714      	adds	r7, #20
 8011abc:	46bd      	mov	sp, r7
 8011abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac2:	4770      	bx	lr
 8011ac4:	40010000 	.word	0x40010000
 8011ac8:	40010400 	.word	0x40010400
 8011acc:	40000400 	.word	0x40000400
 8011ad0:	40000800 	.word	0x40000800
 8011ad4:	40000c00 	.word	0x40000c00
 8011ad8:	40001800 	.word	0x40001800
 8011adc:	40014000 	.word	0x40014000
 8011ae0:	4000e000 	.word	0x4000e000
 8011ae4:	4000e400 	.word	0x4000e400

08011ae8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011ae8:	b480      	push	{r7}
 8011aea:	b083      	sub	sp, #12
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011af0:	bf00      	nop
 8011af2:	370c      	adds	r7, #12
 8011af4:	46bd      	mov	sp, r7
 8011af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afa:	4770      	bx	lr

08011afc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011afc:	b480      	push	{r7}
 8011afe:	b083      	sub	sp, #12
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011b04:	bf00      	nop
 8011b06:	370c      	adds	r7, #12
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0e:	4770      	bx	lr

08011b10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011b10:	b480      	push	{r7}
 8011b12:	b083      	sub	sp, #12
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011b18:	bf00      	nop
 8011b1a:	370c      	adds	r7, #12
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b22:	4770      	bx	lr

08011b24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b082      	sub	sp, #8
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d101      	bne.n	8011b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011b32:	2301      	movs	r3, #1
 8011b34:	e042      	b.n	8011bbc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d106      	bne.n	8011b4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	2200      	movs	r2, #0
 8011b44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011b48:	6878      	ldr	r0, [r7, #4]
 8011b4a:	f7f1 ffe9 	bl	8003b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	2224      	movs	r2, #36	; 0x24
 8011b52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	681a      	ldr	r2, [r3, #0]
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	f022 0201 	bic.w	r2, r2, #1
 8011b64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011b66:	6878      	ldr	r0, [r7, #4]
 8011b68:	f000 f82c 	bl	8011bc4 <UART_SetConfig>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	2b01      	cmp	r3, #1
 8011b70:	d101      	bne.n	8011b76 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8011b72:	2301      	movs	r3, #1
 8011b74:	e022      	b.n	8011bbc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d002      	beq.n	8011b84 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8011b7e:	6878      	ldr	r0, [r7, #4]
 8011b80:	f000 fe8c 	bl	801289c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	685a      	ldr	r2, [r3, #4]
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011b92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	689a      	ldr	r2, [r3, #8]
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011ba2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	681a      	ldr	r2, [r3, #0]
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	f042 0201 	orr.w	r2, r2, #1
 8011bb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011bb4:	6878      	ldr	r0, [r7, #4]
 8011bb6:	f000 ff13 	bl	80129e0 <UART_CheckIdleState>
 8011bba:	4603      	mov	r3, r0
}
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	3708      	adds	r7, #8
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	bd80      	pop	{r7, pc}

08011bc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011bc8:	b092      	sub	sp, #72	; 0x48
 8011bca:	af00      	add	r7, sp, #0
 8011bcc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011bce:	2300      	movs	r3, #0
 8011bd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011bd4:	697b      	ldr	r3, [r7, #20]
 8011bd6:	689a      	ldr	r2, [r3, #8]
 8011bd8:	697b      	ldr	r3, [r7, #20]
 8011bda:	691b      	ldr	r3, [r3, #16]
 8011bdc:	431a      	orrs	r2, r3
 8011bde:	697b      	ldr	r3, [r7, #20]
 8011be0:	695b      	ldr	r3, [r3, #20]
 8011be2:	431a      	orrs	r2, r3
 8011be4:	697b      	ldr	r3, [r7, #20]
 8011be6:	69db      	ldr	r3, [r3, #28]
 8011be8:	4313      	orrs	r3, r2
 8011bea:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011bec:	697b      	ldr	r3, [r7, #20]
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	681a      	ldr	r2, [r3, #0]
 8011bf2:	4bbe      	ldr	r3, [pc, #760]	; (8011eec <UART_SetConfig+0x328>)
 8011bf4:	4013      	ands	r3, r2
 8011bf6:	697a      	ldr	r2, [r7, #20]
 8011bf8:	6812      	ldr	r2, [r2, #0]
 8011bfa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011bfc:	430b      	orrs	r3, r1
 8011bfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011c00:	697b      	ldr	r3, [r7, #20]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	685b      	ldr	r3, [r3, #4]
 8011c06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011c0a:	697b      	ldr	r3, [r7, #20]
 8011c0c:	68da      	ldr	r2, [r3, #12]
 8011c0e:	697b      	ldr	r3, [r7, #20]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	430a      	orrs	r2, r1
 8011c14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011c16:	697b      	ldr	r3, [r7, #20]
 8011c18:	699b      	ldr	r3, [r3, #24]
 8011c1a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011c1c:	697b      	ldr	r3, [r7, #20]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	4ab3      	ldr	r2, [pc, #716]	; (8011ef0 <UART_SetConfig+0x32c>)
 8011c22:	4293      	cmp	r3, r2
 8011c24:	d004      	beq.n	8011c30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011c26:	697b      	ldr	r3, [r7, #20]
 8011c28:	6a1b      	ldr	r3, [r3, #32]
 8011c2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011c2c:	4313      	orrs	r3, r2
 8011c2e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011c30:	697b      	ldr	r3, [r7, #20]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	689a      	ldr	r2, [r3, #8]
 8011c36:	4baf      	ldr	r3, [pc, #700]	; (8011ef4 <UART_SetConfig+0x330>)
 8011c38:	4013      	ands	r3, r2
 8011c3a:	697a      	ldr	r2, [r7, #20]
 8011c3c:	6812      	ldr	r2, [r2, #0]
 8011c3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011c40:	430b      	orrs	r3, r1
 8011c42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011c44:	697b      	ldr	r3, [r7, #20]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c4a:	f023 010f 	bic.w	r1, r3, #15
 8011c4e:	697b      	ldr	r3, [r7, #20]
 8011c50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011c52:	697b      	ldr	r3, [r7, #20]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	430a      	orrs	r2, r1
 8011c58:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011c5a:	697b      	ldr	r3, [r7, #20]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	4aa6      	ldr	r2, [pc, #664]	; (8011ef8 <UART_SetConfig+0x334>)
 8011c60:	4293      	cmp	r3, r2
 8011c62:	d177      	bne.n	8011d54 <UART_SetConfig+0x190>
 8011c64:	4ba5      	ldr	r3, [pc, #660]	; (8011efc <UART_SetConfig+0x338>)
 8011c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011c6c:	2b28      	cmp	r3, #40	; 0x28
 8011c6e:	d86d      	bhi.n	8011d4c <UART_SetConfig+0x188>
 8011c70:	a201      	add	r2, pc, #4	; (adr r2, 8011c78 <UART_SetConfig+0xb4>)
 8011c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c76:	bf00      	nop
 8011c78:	08011d1d 	.word	0x08011d1d
 8011c7c:	08011d4d 	.word	0x08011d4d
 8011c80:	08011d4d 	.word	0x08011d4d
 8011c84:	08011d4d 	.word	0x08011d4d
 8011c88:	08011d4d 	.word	0x08011d4d
 8011c8c:	08011d4d 	.word	0x08011d4d
 8011c90:	08011d4d 	.word	0x08011d4d
 8011c94:	08011d4d 	.word	0x08011d4d
 8011c98:	08011d25 	.word	0x08011d25
 8011c9c:	08011d4d 	.word	0x08011d4d
 8011ca0:	08011d4d 	.word	0x08011d4d
 8011ca4:	08011d4d 	.word	0x08011d4d
 8011ca8:	08011d4d 	.word	0x08011d4d
 8011cac:	08011d4d 	.word	0x08011d4d
 8011cb0:	08011d4d 	.word	0x08011d4d
 8011cb4:	08011d4d 	.word	0x08011d4d
 8011cb8:	08011d2d 	.word	0x08011d2d
 8011cbc:	08011d4d 	.word	0x08011d4d
 8011cc0:	08011d4d 	.word	0x08011d4d
 8011cc4:	08011d4d 	.word	0x08011d4d
 8011cc8:	08011d4d 	.word	0x08011d4d
 8011ccc:	08011d4d 	.word	0x08011d4d
 8011cd0:	08011d4d 	.word	0x08011d4d
 8011cd4:	08011d4d 	.word	0x08011d4d
 8011cd8:	08011d35 	.word	0x08011d35
 8011cdc:	08011d4d 	.word	0x08011d4d
 8011ce0:	08011d4d 	.word	0x08011d4d
 8011ce4:	08011d4d 	.word	0x08011d4d
 8011ce8:	08011d4d 	.word	0x08011d4d
 8011cec:	08011d4d 	.word	0x08011d4d
 8011cf0:	08011d4d 	.word	0x08011d4d
 8011cf4:	08011d4d 	.word	0x08011d4d
 8011cf8:	08011d3d 	.word	0x08011d3d
 8011cfc:	08011d4d 	.word	0x08011d4d
 8011d00:	08011d4d 	.word	0x08011d4d
 8011d04:	08011d4d 	.word	0x08011d4d
 8011d08:	08011d4d 	.word	0x08011d4d
 8011d0c:	08011d4d 	.word	0x08011d4d
 8011d10:	08011d4d 	.word	0x08011d4d
 8011d14:	08011d4d 	.word	0x08011d4d
 8011d18:	08011d45 	.word	0x08011d45
 8011d1c:	2301      	movs	r3, #1
 8011d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d22:	e326      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011d24:	2304      	movs	r3, #4
 8011d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d2a:	e322      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011d2c:	2308      	movs	r3, #8
 8011d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d32:	e31e      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011d34:	2310      	movs	r3, #16
 8011d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d3a:	e31a      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011d3c:	2320      	movs	r3, #32
 8011d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d42:	e316      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011d44:	2340      	movs	r3, #64	; 0x40
 8011d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d4a:	e312      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011d4c:	2380      	movs	r3, #128	; 0x80
 8011d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d52:	e30e      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011d54:	697b      	ldr	r3, [r7, #20]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	4a69      	ldr	r2, [pc, #420]	; (8011f00 <UART_SetConfig+0x33c>)
 8011d5a:	4293      	cmp	r3, r2
 8011d5c:	d130      	bne.n	8011dc0 <UART_SetConfig+0x1fc>
 8011d5e:	4b67      	ldr	r3, [pc, #412]	; (8011efc <UART_SetConfig+0x338>)
 8011d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d62:	f003 0307 	and.w	r3, r3, #7
 8011d66:	2b05      	cmp	r3, #5
 8011d68:	d826      	bhi.n	8011db8 <UART_SetConfig+0x1f4>
 8011d6a:	a201      	add	r2, pc, #4	; (adr r2, 8011d70 <UART_SetConfig+0x1ac>)
 8011d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d70:	08011d89 	.word	0x08011d89
 8011d74:	08011d91 	.word	0x08011d91
 8011d78:	08011d99 	.word	0x08011d99
 8011d7c:	08011da1 	.word	0x08011da1
 8011d80:	08011da9 	.word	0x08011da9
 8011d84:	08011db1 	.word	0x08011db1
 8011d88:	2300      	movs	r3, #0
 8011d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d8e:	e2f0      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011d90:	2304      	movs	r3, #4
 8011d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d96:	e2ec      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011d98:	2308      	movs	r3, #8
 8011d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d9e:	e2e8      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011da0:	2310      	movs	r3, #16
 8011da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011da6:	e2e4      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011da8:	2320      	movs	r3, #32
 8011daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dae:	e2e0      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011db0:	2340      	movs	r3, #64	; 0x40
 8011db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011db6:	e2dc      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011db8:	2380      	movs	r3, #128	; 0x80
 8011dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dbe:	e2d8      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011dc0:	697b      	ldr	r3, [r7, #20]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	4a4f      	ldr	r2, [pc, #316]	; (8011f04 <UART_SetConfig+0x340>)
 8011dc6:	4293      	cmp	r3, r2
 8011dc8:	d130      	bne.n	8011e2c <UART_SetConfig+0x268>
 8011dca:	4b4c      	ldr	r3, [pc, #304]	; (8011efc <UART_SetConfig+0x338>)
 8011dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011dce:	f003 0307 	and.w	r3, r3, #7
 8011dd2:	2b05      	cmp	r3, #5
 8011dd4:	d826      	bhi.n	8011e24 <UART_SetConfig+0x260>
 8011dd6:	a201      	add	r2, pc, #4	; (adr r2, 8011ddc <UART_SetConfig+0x218>)
 8011dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ddc:	08011df5 	.word	0x08011df5
 8011de0:	08011dfd 	.word	0x08011dfd
 8011de4:	08011e05 	.word	0x08011e05
 8011de8:	08011e0d 	.word	0x08011e0d
 8011dec:	08011e15 	.word	0x08011e15
 8011df0:	08011e1d 	.word	0x08011e1d
 8011df4:	2300      	movs	r3, #0
 8011df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dfa:	e2ba      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011dfc:	2304      	movs	r3, #4
 8011dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e02:	e2b6      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011e04:	2308      	movs	r3, #8
 8011e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e0a:	e2b2      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011e0c:	2310      	movs	r3, #16
 8011e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e12:	e2ae      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011e14:	2320      	movs	r3, #32
 8011e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e1a:	e2aa      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011e1c:	2340      	movs	r3, #64	; 0x40
 8011e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e22:	e2a6      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011e24:	2380      	movs	r3, #128	; 0x80
 8011e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e2a:	e2a2      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011e2c:	697b      	ldr	r3, [r7, #20]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	4a35      	ldr	r2, [pc, #212]	; (8011f08 <UART_SetConfig+0x344>)
 8011e32:	4293      	cmp	r3, r2
 8011e34:	d130      	bne.n	8011e98 <UART_SetConfig+0x2d4>
 8011e36:	4b31      	ldr	r3, [pc, #196]	; (8011efc <UART_SetConfig+0x338>)
 8011e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011e3a:	f003 0307 	and.w	r3, r3, #7
 8011e3e:	2b05      	cmp	r3, #5
 8011e40:	d826      	bhi.n	8011e90 <UART_SetConfig+0x2cc>
 8011e42:	a201      	add	r2, pc, #4	; (adr r2, 8011e48 <UART_SetConfig+0x284>)
 8011e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e48:	08011e61 	.word	0x08011e61
 8011e4c:	08011e69 	.word	0x08011e69
 8011e50:	08011e71 	.word	0x08011e71
 8011e54:	08011e79 	.word	0x08011e79
 8011e58:	08011e81 	.word	0x08011e81
 8011e5c:	08011e89 	.word	0x08011e89
 8011e60:	2300      	movs	r3, #0
 8011e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e66:	e284      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011e68:	2304      	movs	r3, #4
 8011e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e6e:	e280      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011e70:	2308      	movs	r3, #8
 8011e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e76:	e27c      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011e78:	2310      	movs	r3, #16
 8011e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e7e:	e278      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011e80:	2320      	movs	r3, #32
 8011e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e86:	e274      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011e88:	2340      	movs	r3, #64	; 0x40
 8011e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e8e:	e270      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011e90:	2380      	movs	r3, #128	; 0x80
 8011e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e96:	e26c      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011e98:	697b      	ldr	r3, [r7, #20]
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	4a1b      	ldr	r2, [pc, #108]	; (8011f0c <UART_SetConfig+0x348>)
 8011e9e:	4293      	cmp	r3, r2
 8011ea0:	d142      	bne.n	8011f28 <UART_SetConfig+0x364>
 8011ea2:	4b16      	ldr	r3, [pc, #88]	; (8011efc <UART_SetConfig+0x338>)
 8011ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ea6:	f003 0307 	and.w	r3, r3, #7
 8011eaa:	2b05      	cmp	r3, #5
 8011eac:	d838      	bhi.n	8011f20 <UART_SetConfig+0x35c>
 8011eae:	a201      	add	r2, pc, #4	; (adr r2, 8011eb4 <UART_SetConfig+0x2f0>)
 8011eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011eb4:	08011ecd 	.word	0x08011ecd
 8011eb8:	08011ed5 	.word	0x08011ed5
 8011ebc:	08011edd 	.word	0x08011edd
 8011ec0:	08011ee5 	.word	0x08011ee5
 8011ec4:	08011f11 	.word	0x08011f11
 8011ec8:	08011f19 	.word	0x08011f19
 8011ecc:	2300      	movs	r3, #0
 8011ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ed2:	e24e      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011ed4:	2304      	movs	r3, #4
 8011ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011eda:	e24a      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011edc:	2308      	movs	r3, #8
 8011ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ee2:	e246      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011ee4:	2310      	movs	r3, #16
 8011ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011eea:	e242      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011eec:	cfff69f3 	.word	0xcfff69f3
 8011ef0:	58000c00 	.word	0x58000c00
 8011ef4:	11fff4ff 	.word	0x11fff4ff
 8011ef8:	40011000 	.word	0x40011000
 8011efc:	58024400 	.word	0x58024400
 8011f00:	40004400 	.word	0x40004400
 8011f04:	40004800 	.word	0x40004800
 8011f08:	40004c00 	.word	0x40004c00
 8011f0c:	40005000 	.word	0x40005000
 8011f10:	2320      	movs	r3, #32
 8011f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f16:	e22c      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011f18:	2340      	movs	r3, #64	; 0x40
 8011f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f1e:	e228      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011f20:	2380      	movs	r3, #128	; 0x80
 8011f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f26:	e224      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011f28:	697b      	ldr	r3, [r7, #20]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	4ab1      	ldr	r2, [pc, #708]	; (80121f4 <UART_SetConfig+0x630>)
 8011f2e:	4293      	cmp	r3, r2
 8011f30:	d176      	bne.n	8012020 <UART_SetConfig+0x45c>
 8011f32:	4bb1      	ldr	r3, [pc, #708]	; (80121f8 <UART_SetConfig+0x634>)
 8011f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011f36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011f3a:	2b28      	cmp	r3, #40	; 0x28
 8011f3c:	d86c      	bhi.n	8012018 <UART_SetConfig+0x454>
 8011f3e:	a201      	add	r2, pc, #4	; (adr r2, 8011f44 <UART_SetConfig+0x380>)
 8011f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f44:	08011fe9 	.word	0x08011fe9
 8011f48:	08012019 	.word	0x08012019
 8011f4c:	08012019 	.word	0x08012019
 8011f50:	08012019 	.word	0x08012019
 8011f54:	08012019 	.word	0x08012019
 8011f58:	08012019 	.word	0x08012019
 8011f5c:	08012019 	.word	0x08012019
 8011f60:	08012019 	.word	0x08012019
 8011f64:	08011ff1 	.word	0x08011ff1
 8011f68:	08012019 	.word	0x08012019
 8011f6c:	08012019 	.word	0x08012019
 8011f70:	08012019 	.word	0x08012019
 8011f74:	08012019 	.word	0x08012019
 8011f78:	08012019 	.word	0x08012019
 8011f7c:	08012019 	.word	0x08012019
 8011f80:	08012019 	.word	0x08012019
 8011f84:	08011ff9 	.word	0x08011ff9
 8011f88:	08012019 	.word	0x08012019
 8011f8c:	08012019 	.word	0x08012019
 8011f90:	08012019 	.word	0x08012019
 8011f94:	08012019 	.word	0x08012019
 8011f98:	08012019 	.word	0x08012019
 8011f9c:	08012019 	.word	0x08012019
 8011fa0:	08012019 	.word	0x08012019
 8011fa4:	08012001 	.word	0x08012001
 8011fa8:	08012019 	.word	0x08012019
 8011fac:	08012019 	.word	0x08012019
 8011fb0:	08012019 	.word	0x08012019
 8011fb4:	08012019 	.word	0x08012019
 8011fb8:	08012019 	.word	0x08012019
 8011fbc:	08012019 	.word	0x08012019
 8011fc0:	08012019 	.word	0x08012019
 8011fc4:	08012009 	.word	0x08012009
 8011fc8:	08012019 	.word	0x08012019
 8011fcc:	08012019 	.word	0x08012019
 8011fd0:	08012019 	.word	0x08012019
 8011fd4:	08012019 	.word	0x08012019
 8011fd8:	08012019 	.word	0x08012019
 8011fdc:	08012019 	.word	0x08012019
 8011fe0:	08012019 	.word	0x08012019
 8011fe4:	08012011 	.word	0x08012011
 8011fe8:	2301      	movs	r3, #1
 8011fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fee:	e1c0      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011ff0:	2304      	movs	r3, #4
 8011ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ff6:	e1bc      	b.n	8012372 <UART_SetConfig+0x7ae>
 8011ff8:	2308      	movs	r3, #8
 8011ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ffe:	e1b8      	b.n	8012372 <UART_SetConfig+0x7ae>
 8012000:	2310      	movs	r3, #16
 8012002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012006:	e1b4      	b.n	8012372 <UART_SetConfig+0x7ae>
 8012008:	2320      	movs	r3, #32
 801200a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801200e:	e1b0      	b.n	8012372 <UART_SetConfig+0x7ae>
 8012010:	2340      	movs	r3, #64	; 0x40
 8012012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012016:	e1ac      	b.n	8012372 <UART_SetConfig+0x7ae>
 8012018:	2380      	movs	r3, #128	; 0x80
 801201a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801201e:	e1a8      	b.n	8012372 <UART_SetConfig+0x7ae>
 8012020:	697b      	ldr	r3, [r7, #20]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	4a75      	ldr	r2, [pc, #468]	; (80121fc <UART_SetConfig+0x638>)
 8012026:	4293      	cmp	r3, r2
 8012028:	d130      	bne.n	801208c <UART_SetConfig+0x4c8>
 801202a:	4b73      	ldr	r3, [pc, #460]	; (80121f8 <UART_SetConfig+0x634>)
 801202c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801202e:	f003 0307 	and.w	r3, r3, #7
 8012032:	2b05      	cmp	r3, #5
 8012034:	d826      	bhi.n	8012084 <UART_SetConfig+0x4c0>
 8012036:	a201      	add	r2, pc, #4	; (adr r2, 801203c <UART_SetConfig+0x478>)
 8012038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801203c:	08012055 	.word	0x08012055
 8012040:	0801205d 	.word	0x0801205d
 8012044:	08012065 	.word	0x08012065
 8012048:	0801206d 	.word	0x0801206d
 801204c:	08012075 	.word	0x08012075
 8012050:	0801207d 	.word	0x0801207d
 8012054:	2300      	movs	r3, #0
 8012056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801205a:	e18a      	b.n	8012372 <UART_SetConfig+0x7ae>
 801205c:	2304      	movs	r3, #4
 801205e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012062:	e186      	b.n	8012372 <UART_SetConfig+0x7ae>
 8012064:	2308      	movs	r3, #8
 8012066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801206a:	e182      	b.n	8012372 <UART_SetConfig+0x7ae>
 801206c:	2310      	movs	r3, #16
 801206e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012072:	e17e      	b.n	8012372 <UART_SetConfig+0x7ae>
 8012074:	2320      	movs	r3, #32
 8012076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801207a:	e17a      	b.n	8012372 <UART_SetConfig+0x7ae>
 801207c:	2340      	movs	r3, #64	; 0x40
 801207e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012082:	e176      	b.n	8012372 <UART_SetConfig+0x7ae>
 8012084:	2380      	movs	r3, #128	; 0x80
 8012086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801208a:	e172      	b.n	8012372 <UART_SetConfig+0x7ae>
 801208c:	697b      	ldr	r3, [r7, #20]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	4a5b      	ldr	r2, [pc, #364]	; (8012200 <UART_SetConfig+0x63c>)
 8012092:	4293      	cmp	r3, r2
 8012094:	d130      	bne.n	80120f8 <UART_SetConfig+0x534>
 8012096:	4b58      	ldr	r3, [pc, #352]	; (80121f8 <UART_SetConfig+0x634>)
 8012098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801209a:	f003 0307 	and.w	r3, r3, #7
 801209e:	2b05      	cmp	r3, #5
 80120a0:	d826      	bhi.n	80120f0 <UART_SetConfig+0x52c>
 80120a2:	a201      	add	r2, pc, #4	; (adr r2, 80120a8 <UART_SetConfig+0x4e4>)
 80120a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120a8:	080120c1 	.word	0x080120c1
 80120ac:	080120c9 	.word	0x080120c9
 80120b0:	080120d1 	.word	0x080120d1
 80120b4:	080120d9 	.word	0x080120d9
 80120b8:	080120e1 	.word	0x080120e1
 80120bc:	080120e9 	.word	0x080120e9
 80120c0:	2300      	movs	r3, #0
 80120c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80120c6:	e154      	b.n	8012372 <UART_SetConfig+0x7ae>
 80120c8:	2304      	movs	r3, #4
 80120ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80120ce:	e150      	b.n	8012372 <UART_SetConfig+0x7ae>
 80120d0:	2308      	movs	r3, #8
 80120d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80120d6:	e14c      	b.n	8012372 <UART_SetConfig+0x7ae>
 80120d8:	2310      	movs	r3, #16
 80120da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80120de:	e148      	b.n	8012372 <UART_SetConfig+0x7ae>
 80120e0:	2320      	movs	r3, #32
 80120e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80120e6:	e144      	b.n	8012372 <UART_SetConfig+0x7ae>
 80120e8:	2340      	movs	r3, #64	; 0x40
 80120ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80120ee:	e140      	b.n	8012372 <UART_SetConfig+0x7ae>
 80120f0:	2380      	movs	r3, #128	; 0x80
 80120f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80120f6:	e13c      	b.n	8012372 <UART_SetConfig+0x7ae>
 80120f8:	697b      	ldr	r3, [r7, #20]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	4a41      	ldr	r2, [pc, #260]	; (8012204 <UART_SetConfig+0x640>)
 80120fe:	4293      	cmp	r3, r2
 8012100:	f040 8082 	bne.w	8012208 <UART_SetConfig+0x644>
 8012104:	4b3c      	ldr	r3, [pc, #240]	; (80121f8 <UART_SetConfig+0x634>)
 8012106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012108:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801210c:	2b28      	cmp	r3, #40	; 0x28
 801210e:	d86d      	bhi.n	80121ec <UART_SetConfig+0x628>
 8012110:	a201      	add	r2, pc, #4	; (adr r2, 8012118 <UART_SetConfig+0x554>)
 8012112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012116:	bf00      	nop
 8012118:	080121bd 	.word	0x080121bd
 801211c:	080121ed 	.word	0x080121ed
 8012120:	080121ed 	.word	0x080121ed
 8012124:	080121ed 	.word	0x080121ed
 8012128:	080121ed 	.word	0x080121ed
 801212c:	080121ed 	.word	0x080121ed
 8012130:	080121ed 	.word	0x080121ed
 8012134:	080121ed 	.word	0x080121ed
 8012138:	080121c5 	.word	0x080121c5
 801213c:	080121ed 	.word	0x080121ed
 8012140:	080121ed 	.word	0x080121ed
 8012144:	080121ed 	.word	0x080121ed
 8012148:	080121ed 	.word	0x080121ed
 801214c:	080121ed 	.word	0x080121ed
 8012150:	080121ed 	.word	0x080121ed
 8012154:	080121ed 	.word	0x080121ed
 8012158:	080121cd 	.word	0x080121cd
 801215c:	080121ed 	.word	0x080121ed
 8012160:	080121ed 	.word	0x080121ed
 8012164:	080121ed 	.word	0x080121ed
 8012168:	080121ed 	.word	0x080121ed
 801216c:	080121ed 	.word	0x080121ed
 8012170:	080121ed 	.word	0x080121ed
 8012174:	080121ed 	.word	0x080121ed
 8012178:	080121d5 	.word	0x080121d5
 801217c:	080121ed 	.word	0x080121ed
 8012180:	080121ed 	.word	0x080121ed
 8012184:	080121ed 	.word	0x080121ed
 8012188:	080121ed 	.word	0x080121ed
 801218c:	080121ed 	.word	0x080121ed
 8012190:	080121ed 	.word	0x080121ed
 8012194:	080121ed 	.word	0x080121ed
 8012198:	080121dd 	.word	0x080121dd
 801219c:	080121ed 	.word	0x080121ed
 80121a0:	080121ed 	.word	0x080121ed
 80121a4:	080121ed 	.word	0x080121ed
 80121a8:	080121ed 	.word	0x080121ed
 80121ac:	080121ed 	.word	0x080121ed
 80121b0:	080121ed 	.word	0x080121ed
 80121b4:	080121ed 	.word	0x080121ed
 80121b8:	080121e5 	.word	0x080121e5
 80121bc:	2301      	movs	r3, #1
 80121be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121c2:	e0d6      	b.n	8012372 <UART_SetConfig+0x7ae>
 80121c4:	2304      	movs	r3, #4
 80121c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121ca:	e0d2      	b.n	8012372 <UART_SetConfig+0x7ae>
 80121cc:	2308      	movs	r3, #8
 80121ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121d2:	e0ce      	b.n	8012372 <UART_SetConfig+0x7ae>
 80121d4:	2310      	movs	r3, #16
 80121d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121da:	e0ca      	b.n	8012372 <UART_SetConfig+0x7ae>
 80121dc:	2320      	movs	r3, #32
 80121de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121e2:	e0c6      	b.n	8012372 <UART_SetConfig+0x7ae>
 80121e4:	2340      	movs	r3, #64	; 0x40
 80121e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121ea:	e0c2      	b.n	8012372 <UART_SetConfig+0x7ae>
 80121ec:	2380      	movs	r3, #128	; 0x80
 80121ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121f2:	e0be      	b.n	8012372 <UART_SetConfig+0x7ae>
 80121f4:	40011400 	.word	0x40011400
 80121f8:	58024400 	.word	0x58024400
 80121fc:	40007800 	.word	0x40007800
 8012200:	40007c00 	.word	0x40007c00
 8012204:	40011800 	.word	0x40011800
 8012208:	697b      	ldr	r3, [r7, #20]
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	4aad      	ldr	r2, [pc, #692]	; (80124c4 <UART_SetConfig+0x900>)
 801220e:	4293      	cmp	r3, r2
 8012210:	d176      	bne.n	8012300 <UART_SetConfig+0x73c>
 8012212:	4bad      	ldr	r3, [pc, #692]	; (80124c8 <UART_SetConfig+0x904>)
 8012214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012216:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801221a:	2b28      	cmp	r3, #40	; 0x28
 801221c:	d86c      	bhi.n	80122f8 <UART_SetConfig+0x734>
 801221e:	a201      	add	r2, pc, #4	; (adr r2, 8012224 <UART_SetConfig+0x660>)
 8012220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012224:	080122c9 	.word	0x080122c9
 8012228:	080122f9 	.word	0x080122f9
 801222c:	080122f9 	.word	0x080122f9
 8012230:	080122f9 	.word	0x080122f9
 8012234:	080122f9 	.word	0x080122f9
 8012238:	080122f9 	.word	0x080122f9
 801223c:	080122f9 	.word	0x080122f9
 8012240:	080122f9 	.word	0x080122f9
 8012244:	080122d1 	.word	0x080122d1
 8012248:	080122f9 	.word	0x080122f9
 801224c:	080122f9 	.word	0x080122f9
 8012250:	080122f9 	.word	0x080122f9
 8012254:	080122f9 	.word	0x080122f9
 8012258:	080122f9 	.word	0x080122f9
 801225c:	080122f9 	.word	0x080122f9
 8012260:	080122f9 	.word	0x080122f9
 8012264:	080122d9 	.word	0x080122d9
 8012268:	080122f9 	.word	0x080122f9
 801226c:	080122f9 	.word	0x080122f9
 8012270:	080122f9 	.word	0x080122f9
 8012274:	080122f9 	.word	0x080122f9
 8012278:	080122f9 	.word	0x080122f9
 801227c:	080122f9 	.word	0x080122f9
 8012280:	080122f9 	.word	0x080122f9
 8012284:	080122e1 	.word	0x080122e1
 8012288:	080122f9 	.word	0x080122f9
 801228c:	080122f9 	.word	0x080122f9
 8012290:	080122f9 	.word	0x080122f9
 8012294:	080122f9 	.word	0x080122f9
 8012298:	080122f9 	.word	0x080122f9
 801229c:	080122f9 	.word	0x080122f9
 80122a0:	080122f9 	.word	0x080122f9
 80122a4:	080122e9 	.word	0x080122e9
 80122a8:	080122f9 	.word	0x080122f9
 80122ac:	080122f9 	.word	0x080122f9
 80122b0:	080122f9 	.word	0x080122f9
 80122b4:	080122f9 	.word	0x080122f9
 80122b8:	080122f9 	.word	0x080122f9
 80122bc:	080122f9 	.word	0x080122f9
 80122c0:	080122f9 	.word	0x080122f9
 80122c4:	080122f1 	.word	0x080122f1
 80122c8:	2301      	movs	r3, #1
 80122ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122ce:	e050      	b.n	8012372 <UART_SetConfig+0x7ae>
 80122d0:	2304      	movs	r3, #4
 80122d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122d6:	e04c      	b.n	8012372 <UART_SetConfig+0x7ae>
 80122d8:	2308      	movs	r3, #8
 80122da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122de:	e048      	b.n	8012372 <UART_SetConfig+0x7ae>
 80122e0:	2310      	movs	r3, #16
 80122e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122e6:	e044      	b.n	8012372 <UART_SetConfig+0x7ae>
 80122e8:	2320      	movs	r3, #32
 80122ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122ee:	e040      	b.n	8012372 <UART_SetConfig+0x7ae>
 80122f0:	2340      	movs	r3, #64	; 0x40
 80122f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122f6:	e03c      	b.n	8012372 <UART_SetConfig+0x7ae>
 80122f8:	2380      	movs	r3, #128	; 0x80
 80122fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122fe:	e038      	b.n	8012372 <UART_SetConfig+0x7ae>
 8012300:	697b      	ldr	r3, [r7, #20]
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	4a71      	ldr	r2, [pc, #452]	; (80124cc <UART_SetConfig+0x908>)
 8012306:	4293      	cmp	r3, r2
 8012308:	d130      	bne.n	801236c <UART_SetConfig+0x7a8>
 801230a:	4b6f      	ldr	r3, [pc, #444]	; (80124c8 <UART_SetConfig+0x904>)
 801230c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801230e:	f003 0307 	and.w	r3, r3, #7
 8012312:	2b05      	cmp	r3, #5
 8012314:	d826      	bhi.n	8012364 <UART_SetConfig+0x7a0>
 8012316:	a201      	add	r2, pc, #4	; (adr r2, 801231c <UART_SetConfig+0x758>)
 8012318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801231c:	08012335 	.word	0x08012335
 8012320:	0801233d 	.word	0x0801233d
 8012324:	08012345 	.word	0x08012345
 8012328:	0801234d 	.word	0x0801234d
 801232c:	08012355 	.word	0x08012355
 8012330:	0801235d 	.word	0x0801235d
 8012334:	2302      	movs	r3, #2
 8012336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801233a:	e01a      	b.n	8012372 <UART_SetConfig+0x7ae>
 801233c:	2304      	movs	r3, #4
 801233e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012342:	e016      	b.n	8012372 <UART_SetConfig+0x7ae>
 8012344:	2308      	movs	r3, #8
 8012346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801234a:	e012      	b.n	8012372 <UART_SetConfig+0x7ae>
 801234c:	2310      	movs	r3, #16
 801234e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012352:	e00e      	b.n	8012372 <UART_SetConfig+0x7ae>
 8012354:	2320      	movs	r3, #32
 8012356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801235a:	e00a      	b.n	8012372 <UART_SetConfig+0x7ae>
 801235c:	2340      	movs	r3, #64	; 0x40
 801235e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012362:	e006      	b.n	8012372 <UART_SetConfig+0x7ae>
 8012364:	2380      	movs	r3, #128	; 0x80
 8012366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801236a:	e002      	b.n	8012372 <UART_SetConfig+0x7ae>
 801236c:	2380      	movs	r3, #128	; 0x80
 801236e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012372:	697b      	ldr	r3, [r7, #20]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	4a55      	ldr	r2, [pc, #340]	; (80124cc <UART_SetConfig+0x908>)
 8012378:	4293      	cmp	r3, r2
 801237a:	f040 80f8 	bne.w	801256e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801237e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012382:	2b20      	cmp	r3, #32
 8012384:	dc46      	bgt.n	8012414 <UART_SetConfig+0x850>
 8012386:	2b02      	cmp	r3, #2
 8012388:	db75      	blt.n	8012476 <UART_SetConfig+0x8b2>
 801238a:	3b02      	subs	r3, #2
 801238c:	2b1e      	cmp	r3, #30
 801238e:	d872      	bhi.n	8012476 <UART_SetConfig+0x8b2>
 8012390:	a201      	add	r2, pc, #4	; (adr r2, 8012398 <UART_SetConfig+0x7d4>)
 8012392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012396:	bf00      	nop
 8012398:	0801241b 	.word	0x0801241b
 801239c:	08012477 	.word	0x08012477
 80123a0:	08012423 	.word	0x08012423
 80123a4:	08012477 	.word	0x08012477
 80123a8:	08012477 	.word	0x08012477
 80123ac:	08012477 	.word	0x08012477
 80123b0:	08012433 	.word	0x08012433
 80123b4:	08012477 	.word	0x08012477
 80123b8:	08012477 	.word	0x08012477
 80123bc:	08012477 	.word	0x08012477
 80123c0:	08012477 	.word	0x08012477
 80123c4:	08012477 	.word	0x08012477
 80123c8:	08012477 	.word	0x08012477
 80123cc:	08012477 	.word	0x08012477
 80123d0:	08012443 	.word	0x08012443
 80123d4:	08012477 	.word	0x08012477
 80123d8:	08012477 	.word	0x08012477
 80123dc:	08012477 	.word	0x08012477
 80123e0:	08012477 	.word	0x08012477
 80123e4:	08012477 	.word	0x08012477
 80123e8:	08012477 	.word	0x08012477
 80123ec:	08012477 	.word	0x08012477
 80123f0:	08012477 	.word	0x08012477
 80123f4:	08012477 	.word	0x08012477
 80123f8:	08012477 	.word	0x08012477
 80123fc:	08012477 	.word	0x08012477
 8012400:	08012477 	.word	0x08012477
 8012404:	08012477 	.word	0x08012477
 8012408:	08012477 	.word	0x08012477
 801240c:	08012477 	.word	0x08012477
 8012410:	08012469 	.word	0x08012469
 8012414:	2b40      	cmp	r3, #64	; 0x40
 8012416:	d02a      	beq.n	801246e <UART_SetConfig+0x8aa>
 8012418:	e02d      	b.n	8012476 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801241a:	f7fb f86b 	bl	800d4f4 <HAL_RCCEx_GetD3PCLK1Freq>
 801241e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012420:	e02f      	b.n	8012482 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012426:	4618      	mov	r0, r3
 8012428:	f7fb f87a 	bl	800d520 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801242c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801242e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012430:	e027      	b.n	8012482 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012432:	f107 0318 	add.w	r3, r7, #24
 8012436:	4618      	mov	r0, r3
 8012438:	f7fb f9c6 	bl	800d7c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801243c:	69fb      	ldr	r3, [r7, #28]
 801243e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012440:	e01f      	b.n	8012482 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012442:	4b21      	ldr	r3, [pc, #132]	; (80124c8 <UART_SetConfig+0x904>)
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	f003 0320 	and.w	r3, r3, #32
 801244a:	2b00      	cmp	r3, #0
 801244c:	d009      	beq.n	8012462 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801244e:	4b1e      	ldr	r3, [pc, #120]	; (80124c8 <UART_SetConfig+0x904>)
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	08db      	lsrs	r3, r3, #3
 8012454:	f003 0303 	and.w	r3, r3, #3
 8012458:	4a1d      	ldr	r2, [pc, #116]	; (80124d0 <UART_SetConfig+0x90c>)
 801245a:	fa22 f303 	lsr.w	r3, r2, r3
 801245e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012460:	e00f      	b.n	8012482 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8012462:	4b1b      	ldr	r3, [pc, #108]	; (80124d0 <UART_SetConfig+0x90c>)
 8012464:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012466:	e00c      	b.n	8012482 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012468:	4b1a      	ldr	r3, [pc, #104]	; (80124d4 <UART_SetConfig+0x910>)
 801246a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801246c:	e009      	b.n	8012482 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801246e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012472:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012474:	e005      	b.n	8012482 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8012476:	2300      	movs	r3, #0
 8012478:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801247a:	2301      	movs	r3, #1
 801247c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8012480:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8012482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012484:	2b00      	cmp	r3, #0
 8012486:	f000 81ee 	beq.w	8012866 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801248a:	697b      	ldr	r3, [r7, #20]
 801248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801248e:	4a12      	ldr	r2, [pc, #72]	; (80124d8 <UART_SetConfig+0x914>)
 8012490:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012494:	461a      	mov	r2, r3
 8012496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012498:	fbb3 f3f2 	udiv	r3, r3, r2
 801249c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801249e:	697b      	ldr	r3, [r7, #20]
 80124a0:	685a      	ldr	r2, [r3, #4]
 80124a2:	4613      	mov	r3, r2
 80124a4:	005b      	lsls	r3, r3, #1
 80124a6:	4413      	add	r3, r2
 80124a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80124aa:	429a      	cmp	r2, r3
 80124ac:	d305      	bcc.n	80124ba <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80124ae:	697b      	ldr	r3, [r7, #20]
 80124b0:	685b      	ldr	r3, [r3, #4]
 80124b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80124b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80124b6:	429a      	cmp	r2, r3
 80124b8:	d910      	bls.n	80124dc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80124ba:	2301      	movs	r3, #1
 80124bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80124c0:	e1d1      	b.n	8012866 <UART_SetConfig+0xca2>
 80124c2:	bf00      	nop
 80124c4:	40011c00 	.word	0x40011c00
 80124c8:	58024400 	.word	0x58024400
 80124cc:	58000c00 	.word	0x58000c00
 80124d0:	03d09000 	.word	0x03d09000
 80124d4:	003d0900 	.word	0x003d0900
 80124d8:	08020058 	.word	0x08020058
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80124dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124de:	2200      	movs	r2, #0
 80124e0:	60bb      	str	r3, [r7, #8]
 80124e2:	60fa      	str	r2, [r7, #12]
 80124e4:	697b      	ldr	r3, [r7, #20]
 80124e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124e8:	4ac0      	ldr	r2, [pc, #768]	; (80127ec <UART_SetConfig+0xc28>)
 80124ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80124ee:	b29b      	uxth	r3, r3
 80124f0:	2200      	movs	r2, #0
 80124f2:	603b      	str	r3, [r7, #0]
 80124f4:	607a      	str	r2, [r7, #4]
 80124f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80124fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80124fe:	f7ee f92b 	bl	8000758 <__aeabi_uldivmod>
 8012502:	4602      	mov	r2, r0
 8012504:	460b      	mov	r3, r1
 8012506:	4610      	mov	r0, r2
 8012508:	4619      	mov	r1, r3
 801250a:	f04f 0200 	mov.w	r2, #0
 801250e:	f04f 0300 	mov.w	r3, #0
 8012512:	020b      	lsls	r3, r1, #8
 8012514:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012518:	0202      	lsls	r2, r0, #8
 801251a:	6979      	ldr	r1, [r7, #20]
 801251c:	6849      	ldr	r1, [r1, #4]
 801251e:	0849      	lsrs	r1, r1, #1
 8012520:	2000      	movs	r0, #0
 8012522:	460c      	mov	r4, r1
 8012524:	4605      	mov	r5, r0
 8012526:	eb12 0804 	adds.w	r8, r2, r4
 801252a:	eb43 0905 	adc.w	r9, r3, r5
 801252e:	697b      	ldr	r3, [r7, #20]
 8012530:	685b      	ldr	r3, [r3, #4]
 8012532:	2200      	movs	r2, #0
 8012534:	469a      	mov	sl, r3
 8012536:	4693      	mov	fp, r2
 8012538:	4652      	mov	r2, sl
 801253a:	465b      	mov	r3, fp
 801253c:	4640      	mov	r0, r8
 801253e:	4649      	mov	r1, r9
 8012540:	f7ee f90a 	bl	8000758 <__aeabi_uldivmod>
 8012544:	4602      	mov	r2, r0
 8012546:	460b      	mov	r3, r1
 8012548:	4613      	mov	r3, r2
 801254a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801254c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801254e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012552:	d308      	bcc.n	8012566 <UART_SetConfig+0x9a2>
 8012554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801255a:	d204      	bcs.n	8012566 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 801255c:	697b      	ldr	r3, [r7, #20]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012562:	60da      	str	r2, [r3, #12]
 8012564:	e17f      	b.n	8012866 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8012566:	2301      	movs	r3, #1
 8012568:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801256c:	e17b      	b.n	8012866 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801256e:	697b      	ldr	r3, [r7, #20]
 8012570:	69db      	ldr	r3, [r3, #28]
 8012572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012576:	f040 80bd 	bne.w	80126f4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801257a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801257e:	2b20      	cmp	r3, #32
 8012580:	dc48      	bgt.n	8012614 <UART_SetConfig+0xa50>
 8012582:	2b00      	cmp	r3, #0
 8012584:	db7b      	blt.n	801267e <UART_SetConfig+0xaba>
 8012586:	2b20      	cmp	r3, #32
 8012588:	d879      	bhi.n	801267e <UART_SetConfig+0xaba>
 801258a:	a201      	add	r2, pc, #4	; (adr r2, 8012590 <UART_SetConfig+0x9cc>)
 801258c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012590:	0801261b 	.word	0x0801261b
 8012594:	08012623 	.word	0x08012623
 8012598:	0801267f 	.word	0x0801267f
 801259c:	0801267f 	.word	0x0801267f
 80125a0:	0801262b 	.word	0x0801262b
 80125a4:	0801267f 	.word	0x0801267f
 80125a8:	0801267f 	.word	0x0801267f
 80125ac:	0801267f 	.word	0x0801267f
 80125b0:	0801263b 	.word	0x0801263b
 80125b4:	0801267f 	.word	0x0801267f
 80125b8:	0801267f 	.word	0x0801267f
 80125bc:	0801267f 	.word	0x0801267f
 80125c0:	0801267f 	.word	0x0801267f
 80125c4:	0801267f 	.word	0x0801267f
 80125c8:	0801267f 	.word	0x0801267f
 80125cc:	0801267f 	.word	0x0801267f
 80125d0:	0801264b 	.word	0x0801264b
 80125d4:	0801267f 	.word	0x0801267f
 80125d8:	0801267f 	.word	0x0801267f
 80125dc:	0801267f 	.word	0x0801267f
 80125e0:	0801267f 	.word	0x0801267f
 80125e4:	0801267f 	.word	0x0801267f
 80125e8:	0801267f 	.word	0x0801267f
 80125ec:	0801267f 	.word	0x0801267f
 80125f0:	0801267f 	.word	0x0801267f
 80125f4:	0801267f 	.word	0x0801267f
 80125f8:	0801267f 	.word	0x0801267f
 80125fc:	0801267f 	.word	0x0801267f
 8012600:	0801267f 	.word	0x0801267f
 8012604:	0801267f 	.word	0x0801267f
 8012608:	0801267f 	.word	0x0801267f
 801260c:	0801267f 	.word	0x0801267f
 8012610:	08012671 	.word	0x08012671
 8012614:	2b40      	cmp	r3, #64	; 0x40
 8012616:	d02e      	beq.n	8012676 <UART_SetConfig+0xab2>
 8012618:	e031      	b.n	801267e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801261a:	f7f9 f8cd 	bl	800b7b8 <HAL_RCC_GetPCLK1Freq>
 801261e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012620:	e033      	b.n	801268a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012622:	f7f9 f8df 	bl	800b7e4 <HAL_RCC_GetPCLK2Freq>
 8012626:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012628:	e02f      	b.n	801268a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801262a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801262e:	4618      	mov	r0, r3
 8012630:	f7fa ff76 	bl	800d520 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012636:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012638:	e027      	b.n	801268a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801263a:	f107 0318 	add.w	r3, r7, #24
 801263e:	4618      	mov	r0, r3
 8012640:	f7fb f8c2 	bl	800d7c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012644:	69fb      	ldr	r3, [r7, #28]
 8012646:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012648:	e01f      	b.n	801268a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801264a:	4b69      	ldr	r3, [pc, #420]	; (80127f0 <UART_SetConfig+0xc2c>)
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	f003 0320 	and.w	r3, r3, #32
 8012652:	2b00      	cmp	r3, #0
 8012654:	d009      	beq.n	801266a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012656:	4b66      	ldr	r3, [pc, #408]	; (80127f0 <UART_SetConfig+0xc2c>)
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	08db      	lsrs	r3, r3, #3
 801265c:	f003 0303 	and.w	r3, r3, #3
 8012660:	4a64      	ldr	r2, [pc, #400]	; (80127f4 <UART_SetConfig+0xc30>)
 8012662:	fa22 f303 	lsr.w	r3, r2, r3
 8012666:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012668:	e00f      	b.n	801268a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801266a:	4b62      	ldr	r3, [pc, #392]	; (80127f4 <UART_SetConfig+0xc30>)
 801266c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801266e:	e00c      	b.n	801268a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012670:	4b61      	ldr	r3, [pc, #388]	; (80127f8 <UART_SetConfig+0xc34>)
 8012672:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012674:	e009      	b.n	801268a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801267a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801267c:	e005      	b.n	801268a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801267e:	2300      	movs	r3, #0
 8012680:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8012682:	2301      	movs	r3, #1
 8012684:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8012688:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801268a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801268c:	2b00      	cmp	r3, #0
 801268e:	f000 80ea 	beq.w	8012866 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012692:	697b      	ldr	r3, [r7, #20]
 8012694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012696:	4a55      	ldr	r2, [pc, #340]	; (80127ec <UART_SetConfig+0xc28>)
 8012698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801269c:	461a      	mov	r2, r3
 801269e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80126a4:	005a      	lsls	r2, r3, #1
 80126a6:	697b      	ldr	r3, [r7, #20]
 80126a8:	685b      	ldr	r3, [r3, #4]
 80126aa:	085b      	lsrs	r3, r3, #1
 80126ac:	441a      	add	r2, r3
 80126ae:	697b      	ldr	r3, [r7, #20]
 80126b0:	685b      	ldr	r3, [r3, #4]
 80126b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80126b6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80126b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ba:	2b0f      	cmp	r3, #15
 80126bc:	d916      	bls.n	80126ec <UART_SetConfig+0xb28>
 80126be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80126c4:	d212      	bcs.n	80126ec <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80126c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126c8:	b29b      	uxth	r3, r3
 80126ca:	f023 030f 	bic.w	r3, r3, #15
 80126ce:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80126d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126d2:	085b      	lsrs	r3, r3, #1
 80126d4:	b29b      	uxth	r3, r3
 80126d6:	f003 0307 	and.w	r3, r3, #7
 80126da:	b29a      	uxth	r2, r3
 80126dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80126de:	4313      	orrs	r3, r2
 80126e0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80126e2:	697b      	ldr	r3, [r7, #20]
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80126e8:	60da      	str	r2, [r3, #12]
 80126ea:	e0bc      	b.n	8012866 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80126ec:	2301      	movs	r3, #1
 80126ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80126f2:	e0b8      	b.n	8012866 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80126f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80126f8:	2b20      	cmp	r3, #32
 80126fa:	dc4b      	bgt.n	8012794 <UART_SetConfig+0xbd0>
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	f2c0 8087 	blt.w	8012810 <UART_SetConfig+0xc4c>
 8012702:	2b20      	cmp	r3, #32
 8012704:	f200 8084 	bhi.w	8012810 <UART_SetConfig+0xc4c>
 8012708:	a201      	add	r2, pc, #4	; (adr r2, 8012710 <UART_SetConfig+0xb4c>)
 801270a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801270e:	bf00      	nop
 8012710:	0801279b 	.word	0x0801279b
 8012714:	080127a3 	.word	0x080127a3
 8012718:	08012811 	.word	0x08012811
 801271c:	08012811 	.word	0x08012811
 8012720:	080127ab 	.word	0x080127ab
 8012724:	08012811 	.word	0x08012811
 8012728:	08012811 	.word	0x08012811
 801272c:	08012811 	.word	0x08012811
 8012730:	080127bb 	.word	0x080127bb
 8012734:	08012811 	.word	0x08012811
 8012738:	08012811 	.word	0x08012811
 801273c:	08012811 	.word	0x08012811
 8012740:	08012811 	.word	0x08012811
 8012744:	08012811 	.word	0x08012811
 8012748:	08012811 	.word	0x08012811
 801274c:	08012811 	.word	0x08012811
 8012750:	080127cb 	.word	0x080127cb
 8012754:	08012811 	.word	0x08012811
 8012758:	08012811 	.word	0x08012811
 801275c:	08012811 	.word	0x08012811
 8012760:	08012811 	.word	0x08012811
 8012764:	08012811 	.word	0x08012811
 8012768:	08012811 	.word	0x08012811
 801276c:	08012811 	.word	0x08012811
 8012770:	08012811 	.word	0x08012811
 8012774:	08012811 	.word	0x08012811
 8012778:	08012811 	.word	0x08012811
 801277c:	08012811 	.word	0x08012811
 8012780:	08012811 	.word	0x08012811
 8012784:	08012811 	.word	0x08012811
 8012788:	08012811 	.word	0x08012811
 801278c:	08012811 	.word	0x08012811
 8012790:	08012803 	.word	0x08012803
 8012794:	2b40      	cmp	r3, #64	; 0x40
 8012796:	d037      	beq.n	8012808 <UART_SetConfig+0xc44>
 8012798:	e03a      	b.n	8012810 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801279a:	f7f9 f80d 	bl	800b7b8 <HAL_RCC_GetPCLK1Freq>
 801279e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80127a0:	e03c      	b.n	801281c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80127a2:	f7f9 f81f 	bl	800b7e4 <HAL_RCC_GetPCLK2Freq>
 80127a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80127a8:	e038      	b.n	801281c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80127aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80127ae:	4618      	mov	r0, r3
 80127b0:	f7fa feb6 	bl	800d520 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80127b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80127b8:	e030      	b.n	801281c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80127ba:	f107 0318 	add.w	r3, r7, #24
 80127be:	4618      	mov	r0, r3
 80127c0:	f7fb f802 	bl	800d7c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80127c4:	69fb      	ldr	r3, [r7, #28]
 80127c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80127c8:	e028      	b.n	801281c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80127ca:	4b09      	ldr	r3, [pc, #36]	; (80127f0 <UART_SetConfig+0xc2c>)
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	f003 0320 	and.w	r3, r3, #32
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d012      	beq.n	80127fc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80127d6:	4b06      	ldr	r3, [pc, #24]	; (80127f0 <UART_SetConfig+0xc2c>)
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	08db      	lsrs	r3, r3, #3
 80127dc:	f003 0303 	and.w	r3, r3, #3
 80127e0:	4a04      	ldr	r2, [pc, #16]	; (80127f4 <UART_SetConfig+0xc30>)
 80127e2:	fa22 f303 	lsr.w	r3, r2, r3
 80127e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80127e8:	e018      	b.n	801281c <UART_SetConfig+0xc58>
 80127ea:	bf00      	nop
 80127ec:	08020058 	.word	0x08020058
 80127f0:	58024400 	.word	0x58024400
 80127f4:	03d09000 	.word	0x03d09000
 80127f8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80127fc:	4b24      	ldr	r3, [pc, #144]	; (8012890 <UART_SetConfig+0xccc>)
 80127fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012800:	e00c      	b.n	801281c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012802:	4b24      	ldr	r3, [pc, #144]	; (8012894 <UART_SetConfig+0xcd0>)
 8012804:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012806:	e009      	b.n	801281c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012808:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801280c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801280e:	e005      	b.n	801281c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8012810:	2300      	movs	r3, #0
 8012812:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8012814:	2301      	movs	r3, #1
 8012816:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801281a:	bf00      	nop
    }

    if (pclk != 0U)
 801281c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801281e:	2b00      	cmp	r3, #0
 8012820:	d021      	beq.n	8012866 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012822:	697b      	ldr	r3, [r7, #20]
 8012824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012826:	4a1c      	ldr	r2, [pc, #112]	; (8012898 <UART_SetConfig+0xcd4>)
 8012828:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801282c:	461a      	mov	r2, r3
 801282e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012830:	fbb3 f2f2 	udiv	r2, r3, r2
 8012834:	697b      	ldr	r3, [r7, #20]
 8012836:	685b      	ldr	r3, [r3, #4]
 8012838:	085b      	lsrs	r3, r3, #1
 801283a:	441a      	add	r2, r3
 801283c:	697b      	ldr	r3, [r7, #20]
 801283e:	685b      	ldr	r3, [r3, #4]
 8012840:	fbb2 f3f3 	udiv	r3, r2, r3
 8012844:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012848:	2b0f      	cmp	r3, #15
 801284a:	d909      	bls.n	8012860 <UART_SetConfig+0xc9c>
 801284c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801284e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012852:	d205      	bcs.n	8012860 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012856:	b29a      	uxth	r2, r3
 8012858:	697b      	ldr	r3, [r7, #20]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	60da      	str	r2, [r3, #12]
 801285e:	e002      	b.n	8012866 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8012860:	2301      	movs	r3, #1
 8012862:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012866:	697b      	ldr	r3, [r7, #20]
 8012868:	2201      	movs	r2, #1
 801286a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801286e:	697b      	ldr	r3, [r7, #20]
 8012870:	2201      	movs	r2, #1
 8012872:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012876:	697b      	ldr	r3, [r7, #20]
 8012878:	2200      	movs	r2, #0
 801287a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801287c:	697b      	ldr	r3, [r7, #20]
 801287e:	2200      	movs	r2, #0
 8012880:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8012882:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8012886:	4618      	mov	r0, r3
 8012888:	3748      	adds	r7, #72	; 0x48
 801288a:	46bd      	mov	sp, r7
 801288c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012890:	03d09000 	.word	0x03d09000
 8012894:	003d0900 	.word	0x003d0900
 8012898:	08020058 	.word	0x08020058

0801289c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801289c:	b480      	push	{r7}
 801289e:	b083      	sub	sp, #12
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128a8:	f003 0301 	and.w	r3, r3, #1
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d00a      	beq.n	80128c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	685b      	ldr	r3, [r3, #4]
 80128b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	430a      	orrs	r2, r1
 80128c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128ca:	f003 0302 	and.w	r3, r3, #2
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d00a      	beq.n	80128e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	685b      	ldr	r3, [r3, #4]
 80128d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	430a      	orrs	r2, r1
 80128e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128ec:	f003 0304 	and.w	r3, r3, #4
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d00a      	beq.n	801290a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	685b      	ldr	r3, [r3, #4]
 80128fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	430a      	orrs	r2, r1
 8012908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801290e:	f003 0308 	and.w	r3, r3, #8
 8012912:	2b00      	cmp	r3, #0
 8012914:	d00a      	beq.n	801292c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	685b      	ldr	r3, [r3, #4]
 801291c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	430a      	orrs	r2, r1
 801292a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012930:	f003 0310 	and.w	r3, r3, #16
 8012934:	2b00      	cmp	r3, #0
 8012936:	d00a      	beq.n	801294e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	689b      	ldr	r3, [r3, #8]
 801293e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	430a      	orrs	r2, r1
 801294c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012952:	f003 0320 	and.w	r3, r3, #32
 8012956:	2b00      	cmp	r3, #0
 8012958:	d00a      	beq.n	8012970 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	689b      	ldr	r3, [r3, #8]
 8012960:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	430a      	orrs	r2, r1
 801296e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012978:	2b00      	cmp	r3, #0
 801297a:	d01a      	beq.n	80129b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	685b      	ldr	r3, [r3, #4]
 8012982:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	430a      	orrs	r2, r1
 8012990:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801299a:	d10a      	bne.n	80129b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	685b      	ldr	r3, [r3, #4]
 80129a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	430a      	orrs	r2, r1
 80129b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d00a      	beq.n	80129d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	685b      	ldr	r3, [r3, #4]
 80129c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	430a      	orrs	r2, r1
 80129d2:	605a      	str	r2, [r3, #4]
  }
}
 80129d4:	bf00      	nop
 80129d6:	370c      	adds	r7, #12
 80129d8:	46bd      	mov	sp, r7
 80129da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129de:	4770      	bx	lr

080129e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b098      	sub	sp, #96	; 0x60
 80129e4:	af02      	add	r7, sp, #8
 80129e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	2200      	movs	r2, #0
 80129ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80129f0:	f7f1 fbd6 	bl	80041a0 <HAL_GetTick>
 80129f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	f003 0308 	and.w	r3, r3, #8
 8012a00:	2b08      	cmp	r3, #8
 8012a02:	d12f      	bne.n	8012a64 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012a04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012a08:	9300      	str	r3, [sp, #0]
 8012a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012a12:	6878      	ldr	r0, [r7, #4]
 8012a14:	f000 f88e 	bl	8012b34 <UART_WaitOnFlagUntilTimeout>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d022      	beq.n	8012a64 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a26:	e853 3f00 	ldrex	r3, [r3]
 8012a2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012a32:	653b      	str	r3, [r7, #80]	; 0x50
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	461a      	mov	r2, r3
 8012a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a3c:	647b      	str	r3, [r7, #68]	; 0x44
 8012a3e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012a42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012a44:	e841 2300 	strex	r3, r2, [r1]
 8012a48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d1e6      	bne.n	8012a1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	2220      	movs	r2, #32
 8012a54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012a60:	2303      	movs	r3, #3
 8012a62:	e063      	b.n	8012b2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	f003 0304 	and.w	r3, r3, #4
 8012a6e:	2b04      	cmp	r3, #4
 8012a70:	d149      	bne.n	8012b06 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012a72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012a76:	9300      	str	r3, [sp, #0]
 8012a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a7a:	2200      	movs	r2, #0
 8012a7c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012a80:	6878      	ldr	r0, [r7, #4]
 8012a82:	f000 f857 	bl	8012b34 <UART_WaitOnFlagUntilTimeout>
 8012a86:	4603      	mov	r3, r0
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d03c      	beq.n	8012b06 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a94:	e853 3f00 	ldrex	r3, [r3]
 8012a98:	623b      	str	r3, [r7, #32]
   return(result);
 8012a9a:	6a3b      	ldr	r3, [r7, #32]
 8012a9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	461a      	mov	r2, r3
 8012aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012aaa:	633b      	str	r3, [r7, #48]	; 0x30
 8012aac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012aae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ab2:	e841 2300 	strex	r3, r2, [r1]
 8012ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d1e6      	bne.n	8012a8c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	3308      	adds	r3, #8
 8012ac4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ac6:	693b      	ldr	r3, [r7, #16]
 8012ac8:	e853 3f00 	ldrex	r3, [r3]
 8012acc:	60fb      	str	r3, [r7, #12]
   return(result);
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	f023 0301 	bic.w	r3, r3, #1
 8012ad4:	64bb      	str	r3, [r7, #72]	; 0x48
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	3308      	adds	r3, #8
 8012adc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012ade:	61fa      	str	r2, [r7, #28]
 8012ae0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ae2:	69b9      	ldr	r1, [r7, #24]
 8012ae4:	69fa      	ldr	r2, [r7, #28]
 8012ae6:	e841 2300 	strex	r3, r2, [r1]
 8012aea:	617b      	str	r3, [r7, #20]
   return(result);
 8012aec:	697b      	ldr	r3, [r7, #20]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d1e5      	bne.n	8012abe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	2220      	movs	r2, #32
 8012af6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	2200      	movs	r2, #0
 8012afe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012b02:	2303      	movs	r3, #3
 8012b04:	e012      	b.n	8012b2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	2220      	movs	r2, #32
 8012b0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	2220      	movs	r2, #32
 8012b12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	2200      	movs	r2, #0
 8012b1a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	2200      	movs	r2, #0
 8012b20:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	2200      	movs	r2, #0
 8012b26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012b2a:	2300      	movs	r3, #0
}
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	3758      	adds	r7, #88	; 0x58
 8012b30:	46bd      	mov	sp, r7
 8012b32:	bd80      	pop	{r7, pc}

08012b34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	b084      	sub	sp, #16
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	60f8      	str	r0, [r7, #12]
 8012b3c:	60b9      	str	r1, [r7, #8]
 8012b3e:	603b      	str	r3, [r7, #0]
 8012b40:	4613      	mov	r3, r2
 8012b42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012b44:	e049      	b.n	8012bda <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012b46:	69bb      	ldr	r3, [r7, #24]
 8012b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b4c:	d045      	beq.n	8012bda <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012b4e:	f7f1 fb27 	bl	80041a0 <HAL_GetTick>
 8012b52:	4602      	mov	r2, r0
 8012b54:	683b      	ldr	r3, [r7, #0]
 8012b56:	1ad3      	subs	r3, r2, r3
 8012b58:	69ba      	ldr	r2, [r7, #24]
 8012b5a:	429a      	cmp	r2, r3
 8012b5c:	d302      	bcc.n	8012b64 <UART_WaitOnFlagUntilTimeout+0x30>
 8012b5e:	69bb      	ldr	r3, [r7, #24]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d101      	bne.n	8012b68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012b64:	2303      	movs	r3, #3
 8012b66:	e048      	b.n	8012bfa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	f003 0304 	and.w	r3, r3, #4
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d031      	beq.n	8012bda <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	69db      	ldr	r3, [r3, #28]
 8012b7c:	f003 0308 	and.w	r3, r3, #8
 8012b80:	2b08      	cmp	r3, #8
 8012b82:	d110      	bne.n	8012ba6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	2208      	movs	r2, #8
 8012b8a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8012b8c:	68f8      	ldr	r0, [r7, #12]
 8012b8e:	f000 f839 	bl	8012c04 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	2208      	movs	r2, #8
 8012b96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	2200      	movs	r2, #0
 8012b9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8012ba2:	2301      	movs	r3, #1
 8012ba4:	e029      	b.n	8012bfa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	69db      	ldr	r3, [r3, #28]
 8012bac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012bb4:	d111      	bne.n	8012bda <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012bbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012bc0:	68f8      	ldr	r0, [r7, #12]
 8012bc2:	f000 f81f 	bl	8012c04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	2220      	movs	r2, #32
 8012bca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8012bd6:	2303      	movs	r3, #3
 8012bd8:	e00f      	b.n	8012bfa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	69da      	ldr	r2, [r3, #28]
 8012be0:	68bb      	ldr	r3, [r7, #8]
 8012be2:	4013      	ands	r3, r2
 8012be4:	68ba      	ldr	r2, [r7, #8]
 8012be6:	429a      	cmp	r2, r3
 8012be8:	bf0c      	ite	eq
 8012bea:	2301      	moveq	r3, #1
 8012bec:	2300      	movne	r3, #0
 8012bee:	b2db      	uxtb	r3, r3
 8012bf0:	461a      	mov	r2, r3
 8012bf2:	79fb      	ldrb	r3, [r7, #7]
 8012bf4:	429a      	cmp	r2, r3
 8012bf6:	d0a6      	beq.n	8012b46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012bf8:	2300      	movs	r3, #0
}
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	3710      	adds	r7, #16
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	bd80      	pop	{r7, pc}
	...

08012c04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012c04:	b480      	push	{r7}
 8012c06:	b095      	sub	sp, #84	; 0x54
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c14:	e853 3f00 	ldrex	r3, [r3]
 8012c18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012c20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	461a      	mov	r2, r3
 8012c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c2a:	643b      	str	r3, [r7, #64]	; 0x40
 8012c2c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012c30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012c32:	e841 2300 	strex	r3, r2, [r1]
 8012c36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d1e6      	bne.n	8012c0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	3308      	adds	r3, #8
 8012c44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c46:	6a3b      	ldr	r3, [r7, #32]
 8012c48:	e853 3f00 	ldrex	r3, [r3]
 8012c4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8012c4e:	69fa      	ldr	r2, [r7, #28]
 8012c50:	4b1e      	ldr	r3, [pc, #120]	; (8012ccc <UART_EndRxTransfer+0xc8>)
 8012c52:	4013      	ands	r3, r2
 8012c54:	64bb      	str	r3, [r7, #72]	; 0x48
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	3308      	adds	r3, #8
 8012c5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012c5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012c60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012c66:	e841 2300 	strex	r3, r2, [r1]
 8012c6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d1e5      	bne.n	8012c3e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c76:	2b01      	cmp	r3, #1
 8012c78:	d118      	bne.n	8012cac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	e853 3f00 	ldrex	r3, [r3]
 8012c86:	60bb      	str	r3, [r7, #8]
   return(result);
 8012c88:	68bb      	ldr	r3, [r7, #8]
 8012c8a:	f023 0310 	bic.w	r3, r3, #16
 8012c8e:	647b      	str	r3, [r7, #68]	; 0x44
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	461a      	mov	r2, r3
 8012c96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c98:	61bb      	str	r3, [r7, #24]
 8012c9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c9c:	6979      	ldr	r1, [r7, #20]
 8012c9e:	69ba      	ldr	r2, [r7, #24]
 8012ca0:	e841 2300 	strex	r3, r2, [r1]
 8012ca4:	613b      	str	r3, [r7, #16]
   return(result);
 8012ca6:	693b      	ldr	r3, [r7, #16]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d1e6      	bne.n	8012c7a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	2220      	movs	r2, #32
 8012cb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	2200      	movs	r2, #0
 8012cb8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	2200      	movs	r2, #0
 8012cbe:	675a      	str	r2, [r3, #116]	; 0x74
}
 8012cc0:	bf00      	nop
 8012cc2:	3754      	adds	r7, #84	; 0x54
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cca:	4770      	bx	lr
 8012ccc:	effffffe 	.word	0xeffffffe

08012cd0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012cd0:	b480      	push	{r7}
 8012cd2:	b085      	sub	sp, #20
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012cde:	2b01      	cmp	r3, #1
 8012ce0:	d101      	bne.n	8012ce6 <HAL_UARTEx_DisableFifoMode+0x16>
 8012ce2:	2302      	movs	r3, #2
 8012ce4:	e027      	b.n	8012d36 <HAL_UARTEx_DisableFifoMode+0x66>
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	2201      	movs	r2, #1
 8012cea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	2224      	movs	r2, #36	; 0x24
 8012cf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	681a      	ldr	r2, [r3, #0]
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	f022 0201 	bic.w	r2, r2, #1
 8012d0c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012d14:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	2200      	movs	r2, #0
 8012d1a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	68fa      	ldr	r2, [r7, #12]
 8012d22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	2220      	movs	r2, #32
 8012d28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	2200      	movs	r2, #0
 8012d30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012d34:	2300      	movs	r3, #0
}
 8012d36:	4618      	mov	r0, r3
 8012d38:	3714      	adds	r7, #20
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d40:	4770      	bx	lr

08012d42 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012d42:	b580      	push	{r7, lr}
 8012d44:	b084      	sub	sp, #16
 8012d46:	af00      	add	r7, sp, #0
 8012d48:	6078      	str	r0, [r7, #4]
 8012d4a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012d52:	2b01      	cmp	r3, #1
 8012d54:	d101      	bne.n	8012d5a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012d56:	2302      	movs	r3, #2
 8012d58:	e02d      	b.n	8012db6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	2201      	movs	r2, #1
 8012d5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	2224      	movs	r2, #36	; 0x24
 8012d66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	681a      	ldr	r2, [r3, #0]
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	f022 0201 	bic.w	r2, r2, #1
 8012d80:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	689b      	ldr	r3, [r3, #8]
 8012d88:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	683a      	ldr	r2, [r7, #0]
 8012d92:	430a      	orrs	r2, r1
 8012d94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012d96:	6878      	ldr	r0, [r7, #4]
 8012d98:	f000 f850 	bl	8012e3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	68fa      	ldr	r2, [r7, #12]
 8012da2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	2220      	movs	r2, #32
 8012da8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	2200      	movs	r2, #0
 8012db0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012db4:	2300      	movs	r3, #0
}
 8012db6:	4618      	mov	r0, r3
 8012db8:	3710      	adds	r7, #16
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	bd80      	pop	{r7, pc}

08012dbe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012dbe:	b580      	push	{r7, lr}
 8012dc0:	b084      	sub	sp, #16
 8012dc2:	af00      	add	r7, sp, #0
 8012dc4:	6078      	str	r0, [r7, #4]
 8012dc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012dce:	2b01      	cmp	r3, #1
 8012dd0:	d101      	bne.n	8012dd6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012dd2:	2302      	movs	r3, #2
 8012dd4:	e02d      	b.n	8012e32 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	2201      	movs	r2, #1
 8012dda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	2224      	movs	r2, #36	; 0x24
 8012de2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	681a      	ldr	r2, [r3, #0]
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	f022 0201 	bic.w	r2, r2, #1
 8012dfc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	689b      	ldr	r3, [r3, #8]
 8012e04:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	683a      	ldr	r2, [r7, #0]
 8012e0e:	430a      	orrs	r2, r1
 8012e10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012e12:	6878      	ldr	r0, [r7, #4]
 8012e14:	f000 f812 	bl	8012e3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	68fa      	ldr	r2, [r7, #12]
 8012e1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	2220      	movs	r2, #32
 8012e24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	2200      	movs	r2, #0
 8012e2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012e30:	2300      	movs	r3, #0
}
 8012e32:	4618      	mov	r0, r3
 8012e34:	3710      	adds	r7, #16
 8012e36:	46bd      	mov	sp, r7
 8012e38:	bd80      	pop	{r7, pc}
	...

08012e3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012e3c:	b480      	push	{r7}
 8012e3e:	b085      	sub	sp, #20
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d108      	bne.n	8012e5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	2201      	movs	r2, #1
 8012e50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	2201      	movs	r2, #1
 8012e58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012e5c:	e031      	b.n	8012ec2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012e5e:	2310      	movs	r3, #16
 8012e60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012e62:	2310      	movs	r3, #16
 8012e64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	689b      	ldr	r3, [r3, #8]
 8012e6c:	0e5b      	lsrs	r3, r3, #25
 8012e6e:	b2db      	uxtb	r3, r3
 8012e70:	f003 0307 	and.w	r3, r3, #7
 8012e74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	689b      	ldr	r3, [r3, #8]
 8012e7c:	0f5b      	lsrs	r3, r3, #29
 8012e7e:	b2db      	uxtb	r3, r3
 8012e80:	f003 0307 	and.w	r3, r3, #7
 8012e84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012e86:	7bbb      	ldrb	r3, [r7, #14]
 8012e88:	7b3a      	ldrb	r2, [r7, #12]
 8012e8a:	4911      	ldr	r1, [pc, #68]	; (8012ed0 <UARTEx_SetNbDataToProcess+0x94>)
 8012e8c:	5c8a      	ldrb	r2, [r1, r2]
 8012e8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012e92:	7b3a      	ldrb	r2, [r7, #12]
 8012e94:	490f      	ldr	r1, [pc, #60]	; (8012ed4 <UARTEx_SetNbDataToProcess+0x98>)
 8012e96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012e98:	fb93 f3f2 	sdiv	r3, r3, r2
 8012e9c:	b29a      	uxth	r2, r3
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012ea4:	7bfb      	ldrb	r3, [r7, #15]
 8012ea6:	7b7a      	ldrb	r2, [r7, #13]
 8012ea8:	4909      	ldr	r1, [pc, #36]	; (8012ed0 <UARTEx_SetNbDataToProcess+0x94>)
 8012eaa:	5c8a      	ldrb	r2, [r1, r2]
 8012eac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012eb0:	7b7a      	ldrb	r2, [r7, #13]
 8012eb2:	4908      	ldr	r1, [pc, #32]	; (8012ed4 <UARTEx_SetNbDataToProcess+0x98>)
 8012eb4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012eb6:	fb93 f3f2 	sdiv	r3, r3, r2
 8012eba:	b29a      	uxth	r2, r3
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012ec2:	bf00      	nop
 8012ec4:	3714      	adds	r7, #20
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ecc:	4770      	bx	lr
 8012ece:	bf00      	nop
 8012ed0:	08020070 	.word	0x08020070
 8012ed4:	08020078 	.word	0x08020078

08012ed8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012ed8:	b084      	sub	sp, #16
 8012eda:	b480      	push	{r7}
 8012edc:	b085      	sub	sp, #20
 8012ede:	af00      	add	r7, sp, #0
 8012ee0:	6078      	str	r0, [r7, #4]
 8012ee2:	f107 001c 	add.w	r0, r7, #28
 8012ee6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012eea:	2300      	movs	r3, #0
 8012eec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8012eee:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8012ef0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8012ef2:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8012ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8012ef6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8012ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8012efa:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8012efe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8012f00:	68fa      	ldr	r2, [r7, #12]
 8012f02:	4313      	orrs	r3, r2
 8012f04:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	685a      	ldr	r2, [r3, #4]
 8012f0a:	4b07      	ldr	r3, [pc, #28]	; (8012f28 <SDMMC_Init+0x50>)
 8012f0c:	4013      	ands	r3, r2
 8012f0e:	68fa      	ldr	r2, [r7, #12]
 8012f10:	431a      	orrs	r2, r3
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8012f16:	2300      	movs	r3, #0
}
 8012f18:	4618      	mov	r0, r3
 8012f1a:	3714      	adds	r7, #20
 8012f1c:	46bd      	mov	sp, r7
 8012f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f22:	b004      	add	sp, #16
 8012f24:	4770      	bx	lr
 8012f26:	bf00      	nop
 8012f28:	ffc02c00 	.word	0xffc02c00

08012f2c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8012f2c:	b480      	push	{r7}
 8012f2e:	b083      	sub	sp, #12
 8012f30:	af00      	add	r7, sp, #0
 8012f32:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	370c      	adds	r7, #12
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f44:	4770      	bx	lr

08012f46 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8012f46:	b480      	push	{r7}
 8012f48:	b083      	sub	sp, #12
 8012f4a:	af00      	add	r7, sp, #0
 8012f4c:	6078      	str	r0, [r7, #4]
 8012f4e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8012f50:	683b      	ldr	r3, [r7, #0]
 8012f52:	681a      	ldr	r2, [r3, #0]
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8012f5a:	2300      	movs	r3, #0
}
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	370c      	adds	r7, #12
 8012f60:	46bd      	mov	sp, r7
 8012f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f66:	4770      	bx	lr

08012f68 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8012f68:	b480      	push	{r7}
 8012f6a:	b083      	sub	sp, #12
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	f043 0203 	orr.w	r2, r3, #3
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8012f7c:	2300      	movs	r3, #0
}
 8012f7e:	4618      	mov	r0, r3
 8012f80:	370c      	adds	r7, #12
 8012f82:	46bd      	mov	sp, r7
 8012f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f88:	4770      	bx	lr

08012f8a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8012f8a:	b480      	push	{r7}
 8012f8c:	b083      	sub	sp, #12
 8012f8e:	af00      	add	r7, sp, #0
 8012f90:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	f003 0303 	and.w	r3, r3, #3
}
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	370c      	adds	r7, #12
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa4:	4770      	bx	lr
	...

08012fa8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012fa8:	b480      	push	{r7}
 8012faa:	b085      	sub	sp, #20
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
 8012fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012fb6:	683b      	ldr	r3, [r7, #0]
 8012fb8:	681a      	ldr	r2, [r3, #0]
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012fbe:	683b      	ldr	r3, [r7, #0]
 8012fc0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8012fc2:	683b      	ldr	r3, [r7, #0]
 8012fc4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012fc6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8012fc8:	683b      	ldr	r3, [r7, #0]
 8012fca:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8012fcc:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8012fd2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012fd4:	68fa      	ldr	r2, [r7, #12]
 8012fd6:	4313      	orrs	r3, r2
 8012fd8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	68da      	ldr	r2, [r3, #12]
 8012fde:	4b06      	ldr	r3, [pc, #24]	; (8012ff8 <SDMMC_SendCommand+0x50>)
 8012fe0:	4013      	ands	r3, r2
 8012fe2:	68fa      	ldr	r2, [r7, #12]
 8012fe4:	431a      	orrs	r2, r3
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012fea:	2300      	movs	r3, #0
}
 8012fec:	4618      	mov	r0, r3
 8012fee:	3714      	adds	r7, #20
 8012ff0:	46bd      	mov	sp, r7
 8012ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff6:	4770      	bx	lr
 8012ff8:	fffee0c0 	.word	0xfffee0c0

08012ffc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012ffc:	b480      	push	{r7}
 8012ffe:	b083      	sub	sp, #12
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	691b      	ldr	r3, [r3, #16]
 8013008:	b2db      	uxtb	r3, r3
}
 801300a:	4618      	mov	r0, r3
 801300c:	370c      	adds	r7, #12
 801300e:	46bd      	mov	sp, r7
 8013010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013014:	4770      	bx	lr

08013016 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8013016:	b480      	push	{r7}
 8013018:	b085      	sub	sp, #20
 801301a:	af00      	add	r7, sp, #0
 801301c:	6078      	str	r0, [r7, #4]
 801301e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	3314      	adds	r3, #20
 8013024:	461a      	mov	r2, r3
 8013026:	683b      	ldr	r3, [r7, #0]
 8013028:	4413      	add	r3, r2
 801302a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	681b      	ldr	r3, [r3, #0]
}
 8013030:	4618      	mov	r0, r3
 8013032:	3714      	adds	r7, #20
 8013034:	46bd      	mov	sp, r7
 8013036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303a:	4770      	bx	lr

0801303c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 801303c:	b480      	push	{r7}
 801303e:	b085      	sub	sp, #20
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
 8013044:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8013046:	2300      	movs	r3, #0
 8013048:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801304a:	683b      	ldr	r3, [r7, #0]
 801304c:	681a      	ldr	r2, [r3, #0]
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8013052:	683b      	ldr	r3, [r7, #0]
 8013054:	685a      	ldr	r2, [r3, #4]
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801305a:	683b      	ldr	r3, [r7, #0]
 801305c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 801305e:	683b      	ldr	r3, [r7, #0]
 8013060:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8013062:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8013064:	683b      	ldr	r3, [r7, #0]
 8013066:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8013068:	431a      	orrs	r2, r3
                       Data->DPSM);
 801306a:	683b      	ldr	r3, [r7, #0]
 801306c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 801306e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8013070:	68fa      	ldr	r2, [r7, #12]
 8013072:	4313      	orrs	r3, r2
 8013074:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801307a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	431a      	orrs	r2, r3
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8013086:	2300      	movs	r3, #0

}
 8013088:	4618      	mov	r0, r3
 801308a:	3714      	adds	r7, #20
 801308c:	46bd      	mov	sp, r7
 801308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013092:	4770      	bx	lr

08013094 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b088      	sub	sp, #32
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
 801309c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801309e:	683b      	ldr	r3, [r7, #0]
 80130a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80130a2:	2310      	movs	r3, #16
 80130a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80130a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80130aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80130ac:	2300      	movs	r3, #0
 80130ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80130b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80130b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80130b6:	f107 0308 	add.w	r3, r7, #8
 80130ba:	4619      	mov	r1, r3
 80130bc:	6878      	ldr	r0, [r7, #4]
 80130be:	f7ff ff73 	bl	8012fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80130c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80130c6:	2110      	movs	r1, #16
 80130c8:	6878      	ldr	r0, [r7, #4]
 80130ca:	f000 fa5f 	bl	801358c <SDMMC_GetCmdResp1>
 80130ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80130d0:	69fb      	ldr	r3, [r7, #28]
}
 80130d2:	4618      	mov	r0, r3
 80130d4:	3720      	adds	r7, #32
 80130d6:	46bd      	mov	sp, r7
 80130d8:	bd80      	pop	{r7, pc}

080130da <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80130da:	b580      	push	{r7, lr}
 80130dc:	b088      	sub	sp, #32
 80130de:	af00      	add	r7, sp, #0
 80130e0:	6078      	str	r0, [r7, #4]
 80130e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80130e4:	683b      	ldr	r3, [r7, #0]
 80130e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80130e8:	2311      	movs	r3, #17
 80130ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80130ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80130f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80130f2:	2300      	movs	r3, #0
 80130f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80130f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80130fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80130fc:	f107 0308 	add.w	r3, r7, #8
 8013100:	4619      	mov	r1, r3
 8013102:	6878      	ldr	r0, [r7, #4]
 8013104:	f7ff ff50 	bl	8012fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8013108:	f241 3288 	movw	r2, #5000	; 0x1388
 801310c:	2111      	movs	r1, #17
 801310e:	6878      	ldr	r0, [r7, #4]
 8013110:	f000 fa3c 	bl	801358c <SDMMC_GetCmdResp1>
 8013114:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013116:	69fb      	ldr	r3, [r7, #28]
}
 8013118:	4618      	mov	r0, r3
 801311a:	3720      	adds	r7, #32
 801311c:	46bd      	mov	sp, r7
 801311e:	bd80      	pop	{r7, pc}

08013120 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8013120:	b580      	push	{r7, lr}
 8013122:	b088      	sub	sp, #32
 8013124:	af00      	add	r7, sp, #0
 8013126:	6078      	str	r0, [r7, #4]
 8013128:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801312a:	683b      	ldr	r3, [r7, #0]
 801312c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801312e:	2312      	movs	r3, #18
 8013130:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013132:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013136:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013138:	2300      	movs	r3, #0
 801313a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801313c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013140:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013142:	f107 0308 	add.w	r3, r7, #8
 8013146:	4619      	mov	r1, r3
 8013148:	6878      	ldr	r0, [r7, #4]
 801314a:	f7ff ff2d 	bl	8012fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801314e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013152:	2112      	movs	r1, #18
 8013154:	6878      	ldr	r0, [r7, #4]
 8013156:	f000 fa19 	bl	801358c <SDMMC_GetCmdResp1>
 801315a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801315c:	69fb      	ldr	r3, [r7, #28]
}
 801315e:	4618      	mov	r0, r3
 8013160:	3720      	adds	r7, #32
 8013162:	46bd      	mov	sp, r7
 8013164:	bd80      	pop	{r7, pc}

08013166 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8013166:	b580      	push	{r7, lr}
 8013168:	b088      	sub	sp, #32
 801316a:	af00      	add	r7, sp, #0
 801316c:	6078      	str	r0, [r7, #4]
 801316e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8013170:	683b      	ldr	r3, [r7, #0]
 8013172:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8013174:	2318      	movs	r3, #24
 8013176:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013178:	f44f 7380 	mov.w	r3, #256	; 0x100
 801317c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801317e:	2300      	movs	r3, #0
 8013180:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013186:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013188:	f107 0308 	add.w	r3, r7, #8
 801318c:	4619      	mov	r1, r3
 801318e:	6878      	ldr	r0, [r7, #4]
 8013190:	f7ff ff0a 	bl	8012fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8013194:	f241 3288 	movw	r2, #5000	; 0x1388
 8013198:	2118      	movs	r1, #24
 801319a:	6878      	ldr	r0, [r7, #4]
 801319c:	f000 f9f6 	bl	801358c <SDMMC_GetCmdResp1>
 80131a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80131a2:	69fb      	ldr	r3, [r7, #28]
}
 80131a4:	4618      	mov	r0, r3
 80131a6:	3720      	adds	r7, #32
 80131a8:	46bd      	mov	sp, r7
 80131aa:	bd80      	pop	{r7, pc}

080131ac <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80131ac:	b580      	push	{r7, lr}
 80131ae:	b088      	sub	sp, #32
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	6078      	str	r0, [r7, #4]
 80131b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80131b6:	683b      	ldr	r3, [r7, #0]
 80131b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80131ba:	2319      	movs	r3, #25
 80131bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80131be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80131c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80131c4:	2300      	movs	r3, #0
 80131c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80131c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80131cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80131ce:	f107 0308 	add.w	r3, r7, #8
 80131d2:	4619      	mov	r1, r3
 80131d4:	6878      	ldr	r0, [r7, #4]
 80131d6:	f7ff fee7 	bl	8012fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80131da:	f241 3288 	movw	r2, #5000	; 0x1388
 80131de:	2119      	movs	r1, #25
 80131e0:	6878      	ldr	r0, [r7, #4]
 80131e2:	f000 f9d3 	bl	801358c <SDMMC_GetCmdResp1>
 80131e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80131e8:	69fb      	ldr	r3, [r7, #28]
}
 80131ea:	4618      	mov	r0, r3
 80131ec:	3720      	adds	r7, #32
 80131ee:	46bd      	mov	sp, r7
 80131f0:	bd80      	pop	{r7, pc}
	...

080131f4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80131f4:	b580      	push	{r7, lr}
 80131f6:	b088      	sub	sp, #32
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80131fc:	2300      	movs	r3, #0
 80131fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8013200:	230c      	movs	r3, #12
 8013202:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013204:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013208:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801320a:	2300      	movs	r3, #0
 801320c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801320e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013212:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	68db      	ldr	r3, [r3, #12]
 8013218:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	68db      	ldr	r3, [r3, #12]
 8013224:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801322c:	f107 0308 	add.w	r3, r7, #8
 8013230:	4619      	mov	r1, r3
 8013232:	6878      	ldr	r0, [r7, #4]
 8013234:	f7ff feb8 	bl	8012fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8013238:	4a0b      	ldr	r2, [pc, #44]	; (8013268 <SDMMC_CmdStopTransfer+0x74>)
 801323a:	210c      	movs	r1, #12
 801323c:	6878      	ldr	r0, [r7, #4]
 801323e:	f000 f9a5 	bl	801358c <SDMMC_GetCmdResp1>
 8013242:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	68db      	ldr	r3, [r3, #12]
 8013248:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8013250:	69fb      	ldr	r3, [r7, #28]
 8013252:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8013256:	d101      	bne.n	801325c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8013258:	2300      	movs	r3, #0
 801325a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 801325c:	69fb      	ldr	r3, [r7, #28]
}
 801325e:	4618      	mov	r0, r3
 8013260:	3720      	adds	r7, #32
 8013262:	46bd      	mov	sp, r7
 8013264:	bd80      	pop	{r7, pc}
 8013266:	bf00      	nop
 8013268:	05f5e100 	.word	0x05f5e100

0801326c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 801326c:	b580      	push	{r7, lr}
 801326e:	b088      	sub	sp, #32
 8013270:	af00      	add	r7, sp, #0
 8013272:	6078      	str	r0, [r7, #4]
 8013274:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8013276:	683b      	ldr	r3, [r7, #0]
 8013278:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 801327a:	2307      	movs	r3, #7
 801327c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801327e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013282:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013284:	2300      	movs	r3, #0
 8013286:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801328c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801328e:	f107 0308 	add.w	r3, r7, #8
 8013292:	4619      	mov	r1, r3
 8013294:	6878      	ldr	r0, [r7, #4]
 8013296:	f7ff fe87 	bl	8012fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801329a:	f241 3288 	movw	r2, #5000	; 0x1388
 801329e:	2107      	movs	r1, #7
 80132a0:	6878      	ldr	r0, [r7, #4]
 80132a2:	f000 f973 	bl	801358c <SDMMC_GetCmdResp1>
 80132a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80132a8:	69fb      	ldr	r3, [r7, #28]
}
 80132aa:	4618      	mov	r0, r3
 80132ac:	3720      	adds	r7, #32
 80132ae:	46bd      	mov	sp, r7
 80132b0:	bd80      	pop	{r7, pc}

080132b2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80132b2:	b580      	push	{r7, lr}
 80132b4:	b088      	sub	sp, #32
 80132b6:	af00      	add	r7, sp, #0
 80132b8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80132ba:	2300      	movs	r3, #0
 80132bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80132be:	2300      	movs	r3, #0
 80132c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80132c2:	2300      	movs	r3, #0
 80132c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80132c6:	2300      	movs	r3, #0
 80132c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80132ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80132ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80132d0:	f107 0308 	add.w	r3, r7, #8
 80132d4:	4619      	mov	r1, r3
 80132d6:	6878      	ldr	r0, [r7, #4]
 80132d8:	f7ff fe66 	bl	8012fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80132dc:	6878      	ldr	r0, [r7, #4]
 80132de:	f000 fb97 	bl	8013a10 <SDMMC_GetCmdError>
 80132e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80132e4:	69fb      	ldr	r3, [r7, #28]
}
 80132e6:	4618      	mov	r0, r3
 80132e8:	3720      	adds	r7, #32
 80132ea:	46bd      	mov	sp, r7
 80132ec:	bd80      	pop	{r7, pc}

080132ee <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80132ee:	b580      	push	{r7, lr}
 80132f0:	b088      	sub	sp, #32
 80132f2:	af00      	add	r7, sp, #0
 80132f4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80132f6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80132fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80132fc:	2308      	movs	r3, #8
 80132fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013300:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013304:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013306:	2300      	movs	r3, #0
 8013308:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801330a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801330e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013310:	f107 0308 	add.w	r3, r7, #8
 8013314:	4619      	mov	r1, r3
 8013316:	6878      	ldr	r0, [r7, #4]
 8013318:	f7ff fe46 	bl	8012fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801331c:	6878      	ldr	r0, [r7, #4]
 801331e:	f000 fb29 	bl	8013974 <SDMMC_GetCmdResp7>
 8013322:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013324:	69fb      	ldr	r3, [r7, #28]
}
 8013326:	4618      	mov	r0, r3
 8013328:	3720      	adds	r7, #32
 801332a:	46bd      	mov	sp, r7
 801332c:	bd80      	pop	{r7, pc}

0801332e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801332e:	b580      	push	{r7, lr}
 8013330:	b088      	sub	sp, #32
 8013332:	af00      	add	r7, sp, #0
 8013334:	6078      	str	r0, [r7, #4]
 8013336:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8013338:	683b      	ldr	r3, [r7, #0]
 801333a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801333c:	2337      	movs	r3, #55	; 0x37
 801333e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013340:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013344:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013346:	2300      	movs	r3, #0
 8013348:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801334a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801334e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013350:	f107 0308 	add.w	r3, r7, #8
 8013354:	4619      	mov	r1, r3
 8013356:	6878      	ldr	r0, [r7, #4]
 8013358:	f7ff fe26 	bl	8012fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801335c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013360:	2137      	movs	r1, #55	; 0x37
 8013362:	6878      	ldr	r0, [r7, #4]
 8013364:	f000 f912 	bl	801358c <SDMMC_GetCmdResp1>
 8013368:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801336a:	69fb      	ldr	r3, [r7, #28]
}
 801336c:	4618      	mov	r0, r3
 801336e:	3720      	adds	r7, #32
 8013370:	46bd      	mov	sp, r7
 8013372:	bd80      	pop	{r7, pc}

08013374 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013374:	b580      	push	{r7, lr}
 8013376:	b088      	sub	sp, #32
 8013378:	af00      	add	r7, sp, #0
 801337a:	6078      	str	r0, [r7, #4]
 801337c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801337e:	683b      	ldr	r3, [r7, #0]
 8013380:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8013382:	2329      	movs	r3, #41	; 0x29
 8013384:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013386:	f44f 7380 	mov.w	r3, #256	; 0x100
 801338a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801338c:	2300      	movs	r3, #0
 801338e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013394:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013396:	f107 0308 	add.w	r3, r7, #8
 801339a:	4619      	mov	r1, r3
 801339c:	6878      	ldr	r0, [r7, #4]
 801339e:	f7ff fe03 	bl	8012fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80133a2:	6878      	ldr	r0, [r7, #4]
 80133a4:	f000 fa2e 	bl	8013804 <SDMMC_GetCmdResp3>
 80133a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80133aa:	69fb      	ldr	r3, [r7, #28]
}
 80133ac:	4618      	mov	r0, r3
 80133ae:	3720      	adds	r7, #32
 80133b0:	46bd      	mov	sp, r7
 80133b2:	bd80      	pop	{r7, pc}

080133b4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80133b4:	b580      	push	{r7, lr}
 80133b6:	b088      	sub	sp, #32
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
 80133bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80133be:	683b      	ldr	r3, [r7, #0]
 80133c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80133c2:	2306      	movs	r3, #6
 80133c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80133c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80133ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80133cc:	2300      	movs	r3, #0
 80133ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80133d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80133d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80133d6:	f107 0308 	add.w	r3, r7, #8
 80133da:	4619      	mov	r1, r3
 80133dc:	6878      	ldr	r0, [r7, #4]
 80133de:	f7ff fde3 	bl	8012fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80133e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80133e6:	2106      	movs	r1, #6
 80133e8:	6878      	ldr	r0, [r7, #4]
 80133ea:	f000 f8cf 	bl	801358c <SDMMC_GetCmdResp1>
 80133ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80133f0:	69fb      	ldr	r3, [r7, #28]
}
 80133f2:	4618      	mov	r0, r3
 80133f4:	3720      	adds	r7, #32
 80133f6:	46bd      	mov	sp, r7
 80133f8:	bd80      	pop	{r7, pc}

080133fa <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80133fa:	b580      	push	{r7, lr}
 80133fc:	b088      	sub	sp, #32
 80133fe:	af00      	add	r7, sp, #0
 8013400:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8013402:	2300      	movs	r3, #0
 8013404:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8013406:	2333      	movs	r3, #51	; 0x33
 8013408:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801340a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801340e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013410:	2300      	movs	r3, #0
 8013412:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013418:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801341a:	f107 0308 	add.w	r3, r7, #8
 801341e:	4619      	mov	r1, r3
 8013420:	6878      	ldr	r0, [r7, #4]
 8013422:	f7ff fdc1 	bl	8012fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8013426:	f241 3288 	movw	r2, #5000	; 0x1388
 801342a:	2133      	movs	r1, #51	; 0x33
 801342c:	6878      	ldr	r0, [r7, #4]
 801342e:	f000 f8ad 	bl	801358c <SDMMC_GetCmdResp1>
 8013432:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013434:	69fb      	ldr	r3, [r7, #28]
}
 8013436:	4618      	mov	r0, r3
 8013438:	3720      	adds	r7, #32
 801343a:	46bd      	mov	sp, r7
 801343c:	bd80      	pop	{r7, pc}

0801343e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801343e:	b580      	push	{r7, lr}
 8013440:	b088      	sub	sp, #32
 8013442:	af00      	add	r7, sp, #0
 8013444:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8013446:	2300      	movs	r3, #0
 8013448:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801344a:	2302      	movs	r3, #2
 801344c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801344e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8013452:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013454:	2300      	movs	r3, #0
 8013456:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801345c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801345e:	f107 0308 	add.w	r3, r7, #8
 8013462:	4619      	mov	r1, r3
 8013464:	6878      	ldr	r0, [r7, #4]
 8013466:	f7ff fd9f 	bl	8012fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801346a:	6878      	ldr	r0, [r7, #4]
 801346c:	f000 f980 	bl	8013770 <SDMMC_GetCmdResp2>
 8013470:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013472:	69fb      	ldr	r3, [r7, #28]
}
 8013474:	4618      	mov	r0, r3
 8013476:	3720      	adds	r7, #32
 8013478:	46bd      	mov	sp, r7
 801347a:	bd80      	pop	{r7, pc}

0801347c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801347c:	b580      	push	{r7, lr}
 801347e:	b088      	sub	sp, #32
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
 8013484:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8013486:	683b      	ldr	r3, [r7, #0]
 8013488:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801348a:	2309      	movs	r3, #9
 801348c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801348e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8013492:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013494:	2300      	movs	r3, #0
 8013496:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801349c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801349e:	f107 0308 	add.w	r3, r7, #8
 80134a2:	4619      	mov	r1, r3
 80134a4:	6878      	ldr	r0, [r7, #4]
 80134a6:	f7ff fd7f 	bl	8012fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80134aa:	6878      	ldr	r0, [r7, #4]
 80134ac:	f000 f960 	bl	8013770 <SDMMC_GetCmdResp2>
 80134b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80134b2:	69fb      	ldr	r3, [r7, #28]
}
 80134b4:	4618      	mov	r0, r3
 80134b6:	3720      	adds	r7, #32
 80134b8:	46bd      	mov	sp, r7
 80134ba:	bd80      	pop	{r7, pc}

080134bc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	b088      	sub	sp, #32
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	6078      	str	r0, [r7, #4]
 80134c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80134c6:	2300      	movs	r3, #0
 80134c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80134ca:	2303      	movs	r3, #3
 80134cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80134ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80134d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80134d4:	2300      	movs	r3, #0
 80134d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80134d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80134dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80134de:	f107 0308 	add.w	r3, r7, #8
 80134e2:	4619      	mov	r1, r3
 80134e4:	6878      	ldr	r0, [r7, #4]
 80134e6:	f7ff fd5f 	bl	8012fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80134ea:	683a      	ldr	r2, [r7, #0]
 80134ec:	2103      	movs	r1, #3
 80134ee:	6878      	ldr	r0, [r7, #4]
 80134f0:	f000 f9c8 	bl	8013884 <SDMMC_GetCmdResp6>
 80134f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80134f6:	69fb      	ldr	r3, [r7, #28]
}
 80134f8:	4618      	mov	r0, r3
 80134fa:	3720      	adds	r7, #32
 80134fc:	46bd      	mov	sp, r7
 80134fe:	bd80      	pop	{r7, pc}

08013500 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013500:	b580      	push	{r7, lr}
 8013502:	b088      	sub	sp, #32
 8013504:	af00      	add	r7, sp, #0
 8013506:	6078      	str	r0, [r7, #4]
 8013508:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801350a:	683b      	ldr	r3, [r7, #0]
 801350c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801350e:	230d      	movs	r3, #13
 8013510:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013512:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013516:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013518:	2300      	movs	r3, #0
 801351a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801351c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013520:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013522:	f107 0308 	add.w	r3, r7, #8
 8013526:	4619      	mov	r1, r3
 8013528:	6878      	ldr	r0, [r7, #4]
 801352a:	f7ff fd3d 	bl	8012fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801352e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013532:	210d      	movs	r1, #13
 8013534:	6878      	ldr	r0, [r7, #4]
 8013536:	f000 f829 	bl	801358c <SDMMC_GetCmdResp1>
 801353a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801353c:	69fb      	ldr	r3, [r7, #28]
}
 801353e:	4618      	mov	r0, r3
 8013540:	3720      	adds	r7, #32
 8013542:	46bd      	mov	sp, r7
 8013544:	bd80      	pop	{r7, pc}

08013546 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8013546:	b580      	push	{r7, lr}
 8013548:	b088      	sub	sp, #32
 801354a:	af00      	add	r7, sp, #0
 801354c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801354e:	2300      	movs	r3, #0
 8013550:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8013552:	230d      	movs	r3, #13
 8013554:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013556:	f44f 7380 	mov.w	r3, #256	; 0x100
 801355a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801355c:	2300      	movs	r3, #0
 801355e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013560:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013564:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013566:	f107 0308 	add.w	r3, r7, #8
 801356a:	4619      	mov	r1, r3
 801356c:	6878      	ldr	r0, [r7, #4]
 801356e:	f7ff fd1b 	bl	8012fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8013572:	f241 3288 	movw	r2, #5000	; 0x1388
 8013576:	210d      	movs	r1, #13
 8013578:	6878      	ldr	r0, [r7, #4]
 801357a:	f000 f807 	bl	801358c <SDMMC_GetCmdResp1>
 801357e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013580:	69fb      	ldr	r3, [r7, #28]
}
 8013582:	4618      	mov	r0, r3
 8013584:	3720      	adds	r7, #32
 8013586:	46bd      	mov	sp, r7
 8013588:	bd80      	pop	{r7, pc}
	...

0801358c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 801358c:	b580      	push	{r7, lr}
 801358e:	b088      	sub	sp, #32
 8013590:	af00      	add	r7, sp, #0
 8013592:	60f8      	str	r0, [r7, #12]
 8013594:	460b      	mov	r3, r1
 8013596:	607a      	str	r2, [r7, #4]
 8013598:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801359a:	4b70      	ldr	r3, [pc, #448]	; (801375c <SDMMC_GetCmdResp1+0x1d0>)
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	4a70      	ldr	r2, [pc, #448]	; (8013760 <SDMMC_GetCmdResp1+0x1d4>)
 80135a0:	fba2 2303 	umull	r2, r3, r2, r3
 80135a4:	0a5a      	lsrs	r2, r3, #9
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	fb02 f303 	mul.w	r3, r2, r3
 80135ac:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80135ae:	69fb      	ldr	r3, [r7, #28]
 80135b0:	1e5a      	subs	r2, r3, #1
 80135b2:	61fa      	str	r2, [r7, #28]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d102      	bne.n	80135be <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80135b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80135bc:	e0c9      	b.n	8013752 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80135c2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80135c4:	69ba      	ldr	r2, [r7, #24]
 80135c6:	4b67      	ldr	r3, [pc, #412]	; (8013764 <SDMMC_GetCmdResp1+0x1d8>)
 80135c8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d0ef      	beq.n	80135ae <SDMMC_GetCmdResp1+0x22>
 80135ce:	69bb      	ldr	r3, [r7, #24]
 80135d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d1ea      	bne.n	80135ae <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80135dc:	f003 0304 	and.w	r3, r3, #4
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d004      	beq.n	80135ee <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	2204      	movs	r2, #4
 80135e8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80135ea:	2304      	movs	r3, #4
 80135ec:	e0b1      	b.n	8013752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80135f2:	f003 0301 	and.w	r3, r3, #1
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d004      	beq.n	8013604 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	2201      	movs	r2, #1
 80135fe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013600:	2301      	movs	r3, #1
 8013602:	e0a6      	b.n	8013752 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	4a58      	ldr	r2, [pc, #352]	; (8013768 <SDMMC_GetCmdResp1+0x1dc>)
 8013608:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801360a:	68f8      	ldr	r0, [r7, #12]
 801360c:	f7ff fcf6 	bl	8012ffc <SDMMC_GetCommandResponse>
 8013610:	4603      	mov	r3, r0
 8013612:	461a      	mov	r2, r3
 8013614:	7afb      	ldrb	r3, [r7, #11]
 8013616:	4293      	cmp	r3, r2
 8013618:	d001      	beq.n	801361e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801361a:	2301      	movs	r3, #1
 801361c:	e099      	b.n	8013752 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801361e:	2100      	movs	r1, #0
 8013620:	68f8      	ldr	r0, [r7, #12]
 8013622:	f7ff fcf8 	bl	8013016 <SDMMC_GetResponse>
 8013626:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8013628:	697a      	ldr	r2, [r7, #20]
 801362a:	4b50      	ldr	r3, [pc, #320]	; (801376c <SDMMC_GetCmdResp1+0x1e0>)
 801362c:	4013      	ands	r3, r2
 801362e:	2b00      	cmp	r3, #0
 8013630:	d101      	bne.n	8013636 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8013632:	2300      	movs	r3, #0
 8013634:	e08d      	b.n	8013752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8013636:	697b      	ldr	r3, [r7, #20]
 8013638:	2b00      	cmp	r3, #0
 801363a:	da02      	bge.n	8013642 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801363c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8013640:	e087      	b.n	8013752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8013642:	697b      	ldr	r3, [r7, #20]
 8013644:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013648:	2b00      	cmp	r3, #0
 801364a:	d001      	beq.n	8013650 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801364c:	2340      	movs	r3, #64	; 0x40
 801364e:	e080      	b.n	8013752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013650:	697b      	ldr	r3, [r7, #20]
 8013652:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013656:	2b00      	cmp	r3, #0
 8013658:	d001      	beq.n	801365e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801365a:	2380      	movs	r3, #128	; 0x80
 801365c:	e079      	b.n	8013752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801365e:	697b      	ldr	r3, [r7, #20]
 8013660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013664:	2b00      	cmp	r3, #0
 8013666:	d002      	beq.n	801366e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8013668:	f44f 7380 	mov.w	r3, #256	; 0x100
 801366c:	e071      	b.n	8013752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801366e:	697b      	ldr	r3, [r7, #20]
 8013670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013674:	2b00      	cmp	r3, #0
 8013676:	d002      	beq.n	801367e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8013678:	f44f 7300 	mov.w	r3, #512	; 0x200
 801367c:	e069      	b.n	8013752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801367e:	697b      	ldr	r3, [r7, #20]
 8013680:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013684:	2b00      	cmp	r3, #0
 8013686:	d002      	beq.n	801368e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013688:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801368c:	e061      	b.n	8013752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801368e:	697b      	ldr	r3, [r7, #20]
 8013690:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013694:	2b00      	cmp	r3, #0
 8013696:	d002      	beq.n	801369e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013698:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801369c:	e059      	b.n	8013752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801369e:	697b      	ldr	r3, [r7, #20]
 80136a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d002      	beq.n	80136ae <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80136a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80136ac:	e051      	b.n	8013752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80136ae:	697b      	ldr	r3, [r7, #20]
 80136b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d002      	beq.n	80136be <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80136b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80136bc:	e049      	b.n	8013752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80136be:	697b      	ldr	r3, [r7, #20]
 80136c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d002      	beq.n	80136ce <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80136c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80136cc:	e041      	b.n	8013752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80136ce:	697b      	ldr	r3, [r7, #20]
 80136d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d002      	beq.n	80136de <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80136d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80136dc:	e039      	b.n	8013752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80136de:	697b      	ldr	r3, [r7, #20]
 80136e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d002      	beq.n	80136ee <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80136e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80136ec:	e031      	b.n	8013752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80136ee:	697b      	ldr	r3, [r7, #20]
 80136f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d002      	beq.n	80136fe <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80136f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80136fc:	e029      	b.n	8013752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80136fe:	697b      	ldr	r3, [r7, #20]
 8013700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013704:	2b00      	cmp	r3, #0
 8013706:	d002      	beq.n	801370e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013708:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801370c:	e021      	b.n	8013752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801370e:	697b      	ldr	r3, [r7, #20]
 8013710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013714:	2b00      	cmp	r3, #0
 8013716:	d002      	beq.n	801371e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013718:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801371c:	e019      	b.n	8013752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801371e:	697b      	ldr	r3, [r7, #20]
 8013720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013724:	2b00      	cmp	r3, #0
 8013726:	d002      	beq.n	801372e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013728:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801372c:	e011      	b.n	8013752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801372e:	697b      	ldr	r3, [r7, #20]
 8013730:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013734:	2b00      	cmp	r3, #0
 8013736:	d002      	beq.n	801373e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8013738:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801373c:	e009      	b.n	8013752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801373e:	697b      	ldr	r3, [r7, #20]
 8013740:	f003 0308 	and.w	r3, r3, #8
 8013744:	2b00      	cmp	r3, #0
 8013746:	d002      	beq.n	801374e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8013748:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801374c:	e001      	b.n	8013752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801374e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8013752:	4618      	mov	r0, r3
 8013754:	3720      	adds	r7, #32
 8013756:	46bd      	mov	sp, r7
 8013758:	bd80      	pop	{r7, pc}
 801375a:	bf00      	nop
 801375c:	24000000 	.word	0x24000000
 8013760:	10624dd3 	.word	0x10624dd3
 8013764:	00200045 	.word	0x00200045
 8013768:	002000c5 	.word	0x002000c5
 801376c:	fdffe008 	.word	0xfdffe008

08013770 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8013770:	b480      	push	{r7}
 8013772:	b085      	sub	sp, #20
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013778:	4b1f      	ldr	r3, [pc, #124]	; (80137f8 <SDMMC_GetCmdResp2+0x88>)
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	4a1f      	ldr	r2, [pc, #124]	; (80137fc <SDMMC_GetCmdResp2+0x8c>)
 801377e:	fba2 2303 	umull	r2, r3, r2, r3
 8013782:	0a5b      	lsrs	r3, r3, #9
 8013784:	f241 3288 	movw	r2, #5000	; 0x1388
 8013788:	fb02 f303 	mul.w	r3, r2, r3
 801378c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	1e5a      	subs	r2, r3, #1
 8013792:	60fa      	str	r2, [r7, #12]
 8013794:	2b00      	cmp	r3, #0
 8013796:	d102      	bne.n	801379e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013798:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801379c:	e026      	b.n	80137ec <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137a2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80137a4:	68bb      	ldr	r3, [r7, #8]
 80137a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d0ef      	beq.n	801378e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80137ae:	68bb      	ldr	r3, [r7, #8]
 80137b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d1ea      	bne.n	801378e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137bc:	f003 0304 	and.w	r3, r3, #4
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d004      	beq.n	80137ce <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	2204      	movs	r2, #4
 80137c8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80137ca:	2304      	movs	r3, #4
 80137cc:	e00e      	b.n	80137ec <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137d2:	f003 0301 	and.w	r3, r3, #1
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d004      	beq.n	80137e4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	2201      	movs	r2, #1
 80137de:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80137e0:	2301      	movs	r3, #1
 80137e2:	e003      	b.n	80137ec <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	4a06      	ldr	r2, [pc, #24]	; (8013800 <SDMMC_GetCmdResp2+0x90>)
 80137e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80137ea:	2300      	movs	r3, #0
}
 80137ec:	4618      	mov	r0, r3
 80137ee:	3714      	adds	r7, #20
 80137f0:	46bd      	mov	sp, r7
 80137f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f6:	4770      	bx	lr
 80137f8:	24000000 	.word	0x24000000
 80137fc:	10624dd3 	.word	0x10624dd3
 8013800:	002000c5 	.word	0x002000c5

08013804 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8013804:	b480      	push	{r7}
 8013806:	b085      	sub	sp, #20
 8013808:	af00      	add	r7, sp, #0
 801380a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801380c:	4b1a      	ldr	r3, [pc, #104]	; (8013878 <SDMMC_GetCmdResp3+0x74>)
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	4a1a      	ldr	r2, [pc, #104]	; (801387c <SDMMC_GetCmdResp3+0x78>)
 8013812:	fba2 2303 	umull	r2, r3, r2, r3
 8013816:	0a5b      	lsrs	r3, r3, #9
 8013818:	f241 3288 	movw	r2, #5000	; 0x1388
 801381c:	fb02 f303 	mul.w	r3, r2, r3
 8013820:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	1e5a      	subs	r2, r3, #1
 8013826:	60fa      	str	r2, [r7, #12]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d102      	bne.n	8013832 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801382c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013830:	e01b      	b.n	801386a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013836:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013838:	68bb      	ldr	r3, [r7, #8]
 801383a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801383e:	2b00      	cmp	r3, #0
 8013840:	d0ef      	beq.n	8013822 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013842:	68bb      	ldr	r3, [r7, #8]
 8013844:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013848:	2b00      	cmp	r3, #0
 801384a:	d1ea      	bne.n	8013822 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013850:	f003 0304 	and.w	r3, r3, #4
 8013854:	2b00      	cmp	r3, #0
 8013856:	d004      	beq.n	8013862 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	2204      	movs	r2, #4
 801385c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801385e:	2304      	movs	r3, #4
 8013860:	e003      	b.n	801386a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	4a06      	ldr	r2, [pc, #24]	; (8013880 <SDMMC_GetCmdResp3+0x7c>)
 8013866:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8013868:	2300      	movs	r3, #0
}
 801386a:	4618      	mov	r0, r3
 801386c:	3714      	adds	r7, #20
 801386e:	46bd      	mov	sp, r7
 8013870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013874:	4770      	bx	lr
 8013876:	bf00      	nop
 8013878:	24000000 	.word	0x24000000
 801387c:	10624dd3 	.word	0x10624dd3
 8013880:	002000c5 	.word	0x002000c5

08013884 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8013884:	b580      	push	{r7, lr}
 8013886:	b088      	sub	sp, #32
 8013888:	af00      	add	r7, sp, #0
 801388a:	60f8      	str	r0, [r7, #12]
 801388c:	460b      	mov	r3, r1
 801388e:	607a      	str	r2, [r7, #4]
 8013890:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013892:	4b35      	ldr	r3, [pc, #212]	; (8013968 <SDMMC_GetCmdResp6+0xe4>)
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	4a35      	ldr	r2, [pc, #212]	; (801396c <SDMMC_GetCmdResp6+0xe8>)
 8013898:	fba2 2303 	umull	r2, r3, r2, r3
 801389c:	0a5b      	lsrs	r3, r3, #9
 801389e:	f241 3288 	movw	r2, #5000	; 0x1388
 80138a2:	fb02 f303 	mul.w	r3, r2, r3
 80138a6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80138a8:	69fb      	ldr	r3, [r7, #28]
 80138aa:	1e5a      	subs	r2, r3, #1
 80138ac:	61fa      	str	r2, [r7, #28]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d102      	bne.n	80138b8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80138b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80138b6:	e052      	b.n	801395e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138bc:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80138be:	69bb      	ldr	r3, [r7, #24]
 80138c0:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d0ef      	beq.n	80138a8 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80138c8:	69bb      	ldr	r3, [r7, #24]
 80138ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d1ea      	bne.n	80138a8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138d6:	f003 0304 	and.w	r3, r3, #4
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d004      	beq.n	80138e8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	2204      	movs	r2, #4
 80138e2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80138e4:	2304      	movs	r3, #4
 80138e6:	e03a      	b.n	801395e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138ec:	f003 0301 	and.w	r3, r3, #1
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d004      	beq.n	80138fe <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	2201      	movs	r2, #1
 80138f8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80138fa:	2301      	movs	r3, #1
 80138fc:	e02f      	b.n	801395e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80138fe:	68f8      	ldr	r0, [r7, #12]
 8013900:	f7ff fb7c 	bl	8012ffc <SDMMC_GetCommandResponse>
 8013904:	4603      	mov	r3, r0
 8013906:	461a      	mov	r2, r3
 8013908:	7afb      	ldrb	r3, [r7, #11]
 801390a:	4293      	cmp	r3, r2
 801390c:	d001      	beq.n	8013912 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801390e:	2301      	movs	r3, #1
 8013910:	e025      	b.n	801395e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	4a16      	ldr	r2, [pc, #88]	; (8013970 <SDMMC_GetCmdResp6+0xec>)
 8013916:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013918:	2100      	movs	r1, #0
 801391a:	68f8      	ldr	r0, [r7, #12]
 801391c:	f7ff fb7b 	bl	8013016 <SDMMC_GetResponse>
 8013920:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8013922:	697b      	ldr	r3, [r7, #20]
 8013924:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8013928:	2b00      	cmp	r3, #0
 801392a:	d106      	bne.n	801393a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 801392c:	697b      	ldr	r3, [r7, #20]
 801392e:	0c1b      	lsrs	r3, r3, #16
 8013930:	b29a      	uxth	r2, r3
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8013936:	2300      	movs	r3, #0
 8013938:	e011      	b.n	801395e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801393a:	697b      	ldr	r3, [r7, #20]
 801393c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013940:	2b00      	cmp	r3, #0
 8013942:	d002      	beq.n	801394a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013948:	e009      	b.n	801395e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801394a:	697b      	ldr	r3, [r7, #20]
 801394c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013950:	2b00      	cmp	r3, #0
 8013952:	d002      	beq.n	801395a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013958:	e001      	b.n	801395e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801395a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801395e:	4618      	mov	r0, r3
 8013960:	3720      	adds	r7, #32
 8013962:	46bd      	mov	sp, r7
 8013964:	bd80      	pop	{r7, pc}
 8013966:	bf00      	nop
 8013968:	24000000 	.word	0x24000000
 801396c:	10624dd3 	.word	0x10624dd3
 8013970:	002000c5 	.word	0x002000c5

08013974 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8013974:	b480      	push	{r7}
 8013976:	b085      	sub	sp, #20
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801397c:	4b22      	ldr	r3, [pc, #136]	; (8013a08 <SDMMC_GetCmdResp7+0x94>)
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	4a22      	ldr	r2, [pc, #136]	; (8013a0c <SDMMC_GetCmdResp7+0x98>)
 8013982:	fba2 2303 	umull	r2, r3, r2, r3
 8013986:	0a5b      	lsrs	r3, r3, #9
 8013988:	f241 3288 	movw	r2, #5000	; 0x1388
 801398c:	fb02 f303 	mul.w	r3, r2, r3
 8013990:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	1e5a      	subs	r2, r3, #1
 8013996:	60fa      	str	r2, [r7, #12]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d102      	bne.n	80139a2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801399c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80139a0:	e02c      	b.n	80139fc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139a6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80139a8:	68bb      	ldr	r3, [r7, #8]
 80139aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d0ef      	beq.n	8013992 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80139b2:	68bb      	ldr	r3, [r7, #8]
 80139b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d1ea      	bne.n	8013992 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139c0:	f003 0304 	and.w	r3, r3, #4
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d004      	beq.n	80139d2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	2204      	movs	r2, #4
 80139cc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80139ce:	2304      	movs	r3, #4
 80139d0:	e014      	b.n	80139fc <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139d6:	f003 0301 	and.w	r3, r3, #1
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d004      	beq.n	80139e8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	2201      	movs	r2, #1
 80139e2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80139e4:	2301      	movs	r3, #1
 80139e6:	e009      	b.n	80139fc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d002      	beq.n	80139fa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	2240      	movs	r2, #64	; 0x40
 80139f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80139fa:	2300      	movs	r3, #0

}
 80139fc:	4618      	mov	r0, r3
 80139fe:	3714      	adds	r7, #20
 8013a00:	46bd      	mov	sp, r7
 8013a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a06:	4770      	bx	lr
 8013a08:	24000000 	.word	0x24000000
 8013a0c:	10624dd3 	.word	0x10624dd3

08013a10 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8013a10:	b480      	push	{r7}
 8013a12:	b085      	sub	sp, #20
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013a18:	4b11      	ldr	r3, [pc, #68]	; (8013a60 <SDMMC_GetCmdError+0x50>)
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	4a11      	ldr	r2, [pc, #68]	; (8013a64 <SDMMC_GetCmdError+0x54>)
 8013a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8013a22:	0a5b      	lsrs	r3, r3, #9
 8013a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8013a28:	fb02 f303 	mul.w	r3, r2, r3
 8013a2c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	1e5a      	subs	r2, r3, #1
 8013a32:	60fa      	str	r2, [r7, #12]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d102      	bne.n	8013a3e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013a38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013a3c:	e009      	b.n	8013a52 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d0f1      	beq.n	8013a2e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	4a06      	ldr	r2, [pc, #24]	; (8013a68 <SDMMC_GetCmdError+0x58>)
 8013a4e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8013a50:	2300      	movs	r3, #0
}
 8013a52:	4618      	mov	r0, r3
 8013a54:	3714      	adds	r7, #20
 8013a56:	46bd      	mov	sp, r7
 8013a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a5c:	4770      	bx	lr
 8013a5e:	bf00      	nop
 8013a60:	24000000 	.word	0x24000000
 8013a64:	10624dd3 	.word	0x10624dd3
 8013a68:	002000c5 	.word	0x002000c5

08013a6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013a6c:	b084      	sub	sp, #16
 8013a6e:	b580      	push	{r7, lr}
 8013a70:	b084      	sub	sp, #16
 8013a72:	af00      	add	r7, sp, #0
 8013a74:	6078      	str	r0, [r7, #4]
 8013a76:	f107 001c 	add.w	r0, r7, #28
 8013a7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a80:	2b01      	cmp	r3, #1
 8013a82:	d120      	bne.n	8013ac6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	68da      	ldr	r2, [r3, #12]
 8013a94:	4b2a      	ldr	r3, [pc, #168]	; (8013b40 <USB_CoreInit+0xd4>)
 8013a96:	4013      	ands	r3, r2
 8013a98:	687a      	ldr	r2, [r7, #4]
 8013a9a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	68db      	ldr	r3, [r3, #12]
 8013aa0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8013aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013aaa:	2b01      	cmp	r3, #1
 8013aac:	d105      	bne.n	8013aba <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	68db      	ldr	r3, [r3, #12]
 8013ab2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013aba:	6878      	ldr	r0, [r7, #4]
 8013abc:	f001 faf8 	bl	80150b0 <USB_CoreReset>
 8013ac0:	4603      	mov	r3, r0
 8013ac2:	73fb      	strb	r3, [r7, #15]
 8013ac4:	e01a      	b.n	8013afc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	68db      	ldr	r3, [r3, #12]
 8013aca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013ad2:	6878      	ldr	r0, [r7, #4]
 8013ad4:	f001 faec 	bl	80150b0 <USB_CoreReset>
 8013ad8:	4603      	mov	r3, r0
 8013ada:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8013adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d106      	bne.n	8013af0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ae6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	639a      	str	r2, [r3, #56]	; 0x38
 8013aee:	e005      	b.n	8013afc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013af4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8013afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013afe:	2b01      	cmp	r3, #1
 8013b00:	d116      	bne.n	8013b30 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013b06:	b29a      	uxth	r2, r3
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013b10:	4b0c      	ldr	r3, [pc, #48]	; (8013b44 <USB_CoreInit+0xd8>)
 8013b12:	4313      	orrs	r3, r2
 8013b14:	687a      	ldr	r2, [r7, #4]
 8013b16:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	689b      	ldr	r3, [r3, #8]
 8013b1c:	f043 0206 	orr.w	r2, r3, #6
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	689b      	ldr	r3, [r3, #8]
 8013b28:	f043 0220 	orr.w	r2, r3, #32
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8013b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b32:	4618      	mov	r0, r3
 8013b34:	3710      	adds	r7, #16
 8013b36:	46bd      	mov	sp, r7
 8013b38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013b3c:	b004      	add	sp, #16
 8013b3e:	4770      	bx	lr
 8013b40:	ffbdffbf 	.word	0xffbdffbf
 8013b44:	03ee0000 	.word	0x03ee0000

08013b48 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8013b48:	b480      	push	{r7}
 8013b4a:	b087      	sub	sp, #28
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	60f8      	str	r0, [r7, #12]
 8013b50:	60b9      	str	r1, [r7, #8]
 8013b52:	4613      	mov	r3, r2
 8013b54:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8013b56:	79fb      	ldrb	r3, [r7, #7]
 8013b58:	2b02      	cmp	r3, #2
 8013b5a:	d165      	bne.n	8013c28 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8013b5c:	68bb      	ldr	r3, [r7, #8]
 8013b5e:	4a41      	ldr	r2, [pc, #260]	; (8013c64 <USB_SetTurnaroundTime+0x11c>)
 8013b60:	4293      	cmp	r3, r2
 8013b62:	d906      	bls.n	8013b72 <USB_SetTurnaroundTime+0x2a>
 8013b64:	68bb      	ldr	r3, [r7, #8]
 8013b66:	4a40      	ldr	r2, [pc, #256]	; (8013c68 <USB_SetTurnaroundTime+0x120>)
 8013b68:	4293      	cmp	r3, r2
 8013b6a:	d202      	bcs.n	8013b72 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8013b6c:	230f      	movs	r3, #15
 8013b6e:	617b      	str	r3, [r7, #20]
 8013b70:	e062      	b.n	8013c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8013b72:	68bb      	ldr	r3, [r7, #8]
 8013b74:	4a3c      	ldr	r2, [pc, #240]	; (8013c68 <USB_SetTurnaroundTime+0x120>)
 8013b76:	4293      	cmp	r3, r2
 8013b78:	d306      	bcc.n	8013b88 <USB_SetTurnaroundTime+0x40>
 8013b7a:	68bb      	ldr	r3, [r7, #8]
 8013b7c:	4a3b      	ldr	r2, [pc, #236]	; (8013c6c <USB_SetTurnaroundTime+0x124>)
 8013b7e:	4293      	cmp	r3, r2
 8013b80:	d202      	bcs.n	8013b88 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8013b82:	230e      	movs	r3, #14
 8013b84:	617b      	str	r3, [r7, #20]
 8013b86:	e057      	b.n	8013c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8013b88:	68bb      	ldr	r3, [r7, #8]
 8013b8a:	4a38      	ldr	r2, [pc, #224]	; (8013c6c <USB_SetTurnaroundTime+0x124>)
 8013b8c:	4293      	cmp	r3, r2
 8013b8e:	d306      	bcc.n	8013b9e <USB_SetTurnaroundTime+0x56>
 8013b90:	68bb      	ldr	r3, [r7, #8]
 8013b92:	4a37      	ldr	r2, [pc, #220]	; (8013c70 <USB_SetTurnaroundTime+0x128>)
 8013b94:	4293      	cmp	r3, r2
 8013b96:	d202      	bcs.n	8013b9e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8013b98:	230d      	movs	r3, #13
 8013b9a:	617b      	str	r3, [r7, #20]
 8013b9c:	e04c      	b.n	8013c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8013b9e:	68bb      	ldr	r3, [r7, #8]
 8013ba0:	4a33      	ldr	r2, [pc, #204]	; (8013c70 <USB_SetTurnaroundTime+0x128>)
 8013ba2:	4293      	cmp	r3, r2
 8013ba4:	d306      	bcc.n	8013bb4 <USB_SetTurnaroundTime+0x6c>
 8013ba6:	68bb      	ldr	r3, [r7, #8]
 8013ba8:	4a32      	ldr	r2, [pc, #200]	; (8013c74 <USB_SetTurnaroundTime+0x12c>)
 8013baa:	4293      	cmp	r3, r2
 8013bac:	d802      	bhi.n	8013bb4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8013bae:	230c      	movs	r3, #12
 8013bb0:	617b      	str	r3, [r7, #20]
 8013bb2:	e041      	b.n	8013c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8013bb4:	68bb      	ldr	r3, [r7, #8]
 8013bb6:	4a2f      	ldr	r2, [pc, #188]	; (8013c74 <USB_SetTurnaroundTime+0x12c>)
 8013bb8:	4293      	cmp	r3, r2
 8013bba:	d906      	bls.n	8013bca <USB_SetTurnaroundTime+0x82>
 8013bbc:	68bb      	ldr	r3, [r7, #8]
 8013bbe:	4a2e      	ldr	r2, [pc, #184]	; (8013c78 <USB_SetTurnaroundTime+0x130>)
 8013bc0:	4293      	cmp	r3, r2
 8013bc2:	d802      	bhi.n	8013bca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8013bc4:	230b      	movs	r3, #11
 8013bc6:	617b      	str	r3, [r7, #20]
 8013bc8:	e036      	b.n	8013c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8013bca:	68bb      	ldr	r3, [r7, #8]
 8013bcc:	4a2a      	ldr	r2, [pc, #168]	; (8013c78 <USB_SetTurnaroundTime+0x130>)
 8013bce:	4293      	cmp	r3, r2
 8013bd0:	d906      	bls.n	8013be0 <USB_SetTurnaroundTime+0x98>
 8013bd2:	68bb      	ldr	r3, [r7, #8]
 8013bd4:	4a29      	ldr	r2, [pc, #164]	; (8013c7c <USB_SetTurnaroundTime+0x134>)
 8013bd6:	4293      	cmp	r3, r2
 8013bd8:	d802      	bhi.n	8013be0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8013bda:	230a      	movs	r3, #10
 8013bdc:	617b      	str	r3, [r7, #20]
 8013bde:	e02b      	b.n	8013c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8013be0:	68bb      	ldr	r3, [r7, #8]
 8013be2:	4a26      	ldr	r2, [pc, #152]	; (8013c7c <USB_SetTurnaroundTime+0x134>)
 8013be4:	4293      	cmp	r3, r2
 8013be6:	d906      	bls.n	8013bf6 <USB_SetTurnaroundTime+0xae>
 8013be8:	68bb      	ldr	r3, [r7, #8]
 8013bea:	4a25      	ldr	r2, [pc, #148]	; (8013c80 <USB_SetTurnaroundTime+0x138>)
 8013bec:	4293      	cmp	r3, r2
 8013bee:	d202      	bcs.n	8013bf6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8013bf0:	2309      	movs	r3, #9
 8013bf2:	617b      	str	r3, [r7, #20]
 8013bf4:	e020      	b.n	8013c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8013bf6:	68bb      	ldr	r3, [r7, #8]
 8013bf8:	4a21      	ldr	r2, [pc, #132]	; (8013c80 <USB_SetTurnaroundTime+0x138>)
 8013bfa:	4293      	cmp	r3, r2
 8013bfc:	d306      	bcc.n	8013c0c <USB_SetTurnaroundTime+0xc4>
 8013bfe:	68bb      	ldr	r3, [r7, #8]
 8013c00:	4a20      	ldr	r2, [pc, #128]	; (8013c84 <USB_SetTurnaroundTime+0x13c>)
 8013c02:	4293      	cmp	r3, r2
 8013c04:	d802      	bhi.n	8013c0c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8013c06:	2308      	movs	r3, #8
 8013c08:	617b      	str	r3, [r7, #20]
 8013c0a:	e015      	b.n	8013c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8013c0c:	68bb      	ldr	r3, [r7, #8]
 8013c0e:	4a1d      	ldr	r2, [pc, #116]	; (8013c84 <USB_SetTurnaroundTime+0x13c>)
 8013c10:	4293      	cmp	r3, r2
 8013c12:	d906      	bls.n	8013c22 <USB_SetTurnaroundTime+0xda>
 8013c14:	68bb      	ldr	r3, [r7, #8]
 8013c16:	4a1c      	ldr	r2, [pc, #112]	; (8013c88 <USB_SetTurnaroundTime+0x140>)
 8013c18:	4293      	cmp	r3, r2
 8013c1a:	d202      	bcs.n	8013c22 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8013c1c:	2307      	movs	r3, #7
 8013c1e:	617b      	str	r3, [r7, #20]
 8013c20:	e00a      	b.n	8013c38 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8013c22:	2306      	movs	r3, #6
 8013c24:	617b      	str	r3, [r7, #20]
 8013c26:	e007      	b.n	8013c38 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8013c28:	79fb      	ldrb	r3, [r7, #7]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d102      	bne.n	8013c34 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8013c2e:	2309      	movs	r3, #9
 8013c30:	617b      	str	r3, [r7, #20]
 8013c32:	e001      	b.n	8013c38 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8013c34:	2309      	movs	r3, #9
 8013c36:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	68db      	ldr	r3, [r3, #12]
 8013c3c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	68da      	ldr	r2, [r3, #12]
 8013c48:	697b      	ldr	r3, [r7, #20]
 8013c4a:	029b      	lsls	r3, r3, #10
 8013c4c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8013c50:	431a      	orrs	r2, r3
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013c56:	2300      	movs	r3, #0
}
 8013c58:	4618      	mov	r0, r3
 8013c5a:	371c      	adds	r7, #28
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c62:	4770      	bx	lr
 8013c64:	00d8acbf 	.word	0x00d8acbf
 8013c68:	00e4e1c0 	.word	0x00e4e1c0
 8013c6c:	00f42400 	.word	0x00f42400
 8013c70:	01067380 	.word	0x01067380
 8013c74:	011a499f 	.word	0x011a499f
 8013c78:	01312cff 	.word	0x01312cff
 8013c7c:	014ca43f 	.word	0x014ca43f
 8013c80:	016e3600 	.word	0x016e3600
 8013c84:	01a6ab1f 	.word	0x01a6ab1f
 8013c88:	01e84800 	.word	0x01e84800

08013c8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013c8c:	b480      	push	{r7}
 8013c8e:	b083      	sub	sp, #12
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	689b      	ldr	r3, [r3, #8]
 8013c98:	f043 0201 	orr.w	r2, r3, #1
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013ca0:	2300      	movs	r3, #0
}
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	370c      	adds	r7, #12
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cac:	4770      	bx	lr

08013cae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013cae:	b480      	push	{r7}
 8013cb0:	b083      	sub	sp, #12
 8013cb2:	af00      	add	r7, sp, #0
 8013cb4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	689b      	ldr	r3, [r3, #8]
 8013cba:	f023 0201 	bic.w	r2, r3, #1
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013cc2:	2300      	movs	r3, #0
}
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	370c      	adds	r7, #12
 8013cc8:	46bd      	mov	sp, r7
 8013cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cce:	4770      	bx	lr

08013cd0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b084      	sub	sp, #16
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
 8013cd8:	460b      	mov	r3, r1
 8013cda:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8013cdc:	2300      	movs	r3, #0
 8013cde:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	68db      	ldr	r3, [r3, #12]
 8013ce4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8013cec:	78fb      	ldrb	r3, [r7, #3]
 8013cee:	2b01      	cmp	r3, #1
 8013cf0:	d115      	bne.n	8013d1e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	68db      	ldr	r3, [r3, #12]
 8013cf6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013cfe:	2001      	movs	r0, #1
 8013d00:	f7f0 fa5a 	bl	80041b8 <HAL_Delay>
      ms++;
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	3301      	adds	r3, #1
 8013d08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8013d0a:	6878      	ldr	r0, [r7, #4]
 8013d0c:	f001 f93f 	bl	8014f8e <USB_GetMode>
 8013d10:	4603      	mov	r3, r0
 8013d12:	2b01      	cmp	r3, #1
 8013d14:	d01e      	beq.n	8013d54 <USB_SetCurrentMode+0x84>
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	2b31      	cmp	r3, #49	; 0x31
 8013d1a:	d9f0      	bls.n	8013cfe <USB_SetCurrentMode+0x2e>
 8013d1c:	e01a      	b.n	8013d54 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8013d1e:	78fb      	ldrb	r3, [r7, #3]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d115      	bne.n	8013d50 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	68db      	ldr	r3, [r3, #12]
 8013d28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013d30:	2001      	movs	r0, #1
 8013d32:	f7f0 fa41 	bl	80041b8 <HAL_Delay>
      ms++;
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	3301      	adds	r3, #1
 8013d3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8013d3c:	6878      	ldr	r0, [r7, #4]
 8013d3e:	f001 f926 	bl	8014f8e <USB_GetMode>
 8013d42:	4603      	mov	r3, r0
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d005      	beq.n	8013d54 <USB_SetCurrentMode+0x84>
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	2b31      	cmp	r3, #49	; 0x31
 8013d4c:	d9f0      	bls.n	8013d30 <USB_SetCurrentMode+0x60>
 8013d4e:	e001      	b.n	8013d54 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8013d50:	2301      	movs	r3, #1
 8013d52:	e005      	b.n	8013d60 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	2b32      	cmp	r3, #50	; 0x32
 8013d58:	d101      	bne.n	8013d5e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8013d5a:	2301      	movs	r3, #1
 8013d5c:	e000      	b.n	8013d60 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8013d5e:	2300      	movs	r3, #0
}
 8013d60:	4618      	mov	r0, r3
 8013d62:	3710      	adds	r7, #16
 8013d64:	46bd      	mov	sp, r7
 8013d66:	bd80      	pop	{r7, pc}

08013d68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013d68:	b084      	sub	sp, #16
 8013d6a:	b580      	push	{r7, lr}
 8013d6c:	b086      	sub	sp, #24
 8013d6e:	af00      	add	r7, sp, #0
 8013d70:	6078      	str	r0, [r7, #4]
 8013d72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013d76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8013d82:	2300      	movs	r3, #0
 8013d84:	613b      	str	r3, [r7, #16]
 8013d86:	e009      	b.n	8013d9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013d88:	687a      	ldr	r2, [r7, #4]
 8013d8a:	693b      	ldr	r3, [r7, #16]
 8013d8c:	3340      	adds	r3, #64	; 0x40
 8013d8e:	009b      	lsls	r3, r3, #2
 8013d90:	4413      	add	r3, r2
 8013d92:	2200      	movs	r2, #0
 8013d94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8013d96:	693b      	ldr	r3, [r7, #16]
 8013d98:	3301      	adds	r3, #1
 8013d9a:	613b      	str	r3, [r7, #16]
 8013d9c:	693b      	ldr	r3, [r7, #16]
 8013d9e:	2b0e      	cmp	r3, #14
 8013da0:	d9f2      	bls.n	8013d88 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8013da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d11c      	bne.n	8013de2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dae:	685b      	ldr	r3, [r3, #4]
 8013db0:	68fa      	ldr	r2, [r7, #12]
 8013db2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013db6:	f043 0302 	orr.w	r3, r3, #2
 8013dba:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013dc0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	601a      	str	r2, [r3, #0]
 8013de0:	e005      	b.n	8013dee <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013de6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013df4:	461a      	mov	r2, r3
 8013df6:	2300      	movs	r3, #0
 8013df8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e00:	4619      	mov	r1, r3
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e08:	461a      	mov	r2, r3
 8013e0a:	680b      	ldr	r3, [r1, #0]
 8013e0c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e10:	2b01      	cmp	r3, #1
 8013e12:	d10c      	bne.n	8013e2e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8013e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d104      	bne.n	8013e24 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8013e1a:	2100      	movs	r1, #0
 8013e1c:	6878      	ldr	r0, [r7, #4]
 8013e1e:	f000 f965 	bl	80140ec <USB_SetDevSpeed>
 8013e22:	e008      	b.n	8013e36 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8013e24:	2101      	movs	r1, #1
 8013e26:	6878      	ldr	r0, [r7, #4]
 8013e28:	f000 f960 	bl	80140ec <USB_SetDevSpeed>
 8013e2c:	e003      	b.n	8013e36 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8013e2e:	2103      	movs	r1, #3
 8013e30:	6878      	ldr	r0, [r7, #4]
 8013e32:	f000 f95b 	bl	80140ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8013e36:	2110      	movs	r1, #16
 8013e38:	6878      	ldr	r0, [r7, #4]
 8013e3a:	f000 f8f3 	bl	8014024 <USB_FlushTxFifo>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d001      	beq.n	8013e48 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8013e44:	2301      	movs	r3, #1
 8013e46:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013e48:	6878      	ldr	r0, [r7, #4]
 8013e4a:	f000 f91f 	bl	801408c <USB_FlushRxFifo>
 8013e4e:	4603      	mov	r3, r0
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d001      	beq.n	8013e58 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8013e54:	2301      	movs	r3, #1
 8013e56:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e5e:	461a      	mov	r2, r3
 8013e60:	2300      	movs	r3, #0
 8013e62:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e6a:	461a      	mov	r2, r3
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e76:	461a      	mov	r2, r3
 8013e78:	2300      	movs	r3, #0
 8013e7a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	613b      	str	r3, [r7, #16]
 8013e80:	e043      	b.n	8013f0a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013e82:	693b      	ldr	r3, [r7, #16]
 8013e84:	015a      	lsls	r2, r3, #5
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	4413      	add	r3, r2
 8013e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013e94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013e98:	d118      	bne.n	8013ecc <USB_DevInit+0x164>
    {
      if (i == 0U)
 8013e9a:	693b      	ldr	r3, [r7, #16]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d10a      	bne.n	8013eb6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8013ea0:	693b      	ldr	r3, [r7, #16]
 8013ea2:	015a      	lsls	r2, r3, #5
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	4413      	add	r3, r2
 8013ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013eac:	461a      	mov	r2, r3
 8013eae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013eb2:	6013      	str	r3, [r2, #0]
 8013eb4:	e013      	b.n	8013ede <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013eb6:	693b      	ldr	r3, [r7, #16]
 8013eb8:	015a      	lsls	r2, r3, #5
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	4413      	add	r3, r2
 8013ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ec2:	461a      	mov	r2, r3
 8013ec4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013ec8:	6013      	str	r3, [r2, #0]
 8013eca:	e008      	b.n	8013ede <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013ecc:	693b      	ldr	r3, [r7, #16]
 8013ece:	015a      	lsls	r2, r3, #5
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	4413      	add	r3, r2
 8013ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ed8:	461a      	mov	r2, r3
 8013eda:	2300      	movs	r3, #0
 8013edc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8013ede:	693b      	ldr	r3, [r7, #16]
 8013ee0:	015a      	lsls	r2, r3, #5
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	4413      	add	r3, r2
 8013ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013eea:	461a      	mov	r2, r3
 8013eec:	2300      	movs	r3, #0
 8013eee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013ef0:	693b      	ldr	r3, [r7, #16]
 8013ef2:	015a      	lsls	r2, r3, #5
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	4413      	add	r3, r2
 8013ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013efc:	461a      	mov	r2, r3
 8013efe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013f02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013f04:	693b      	ldr	r3, [r7, #16]
 8013f06:	3301      	adds	r3, #1
 8013f08:	613b      	str	r3, [r7, #16]
 8013f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f0c:	693a      	ldr	r2, [r7, #16]
 8013f0e:	429a      	cmp	r2, r3
 8013f10:	d3b7      	bcc.n	8013e82 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013f12:	2300      	movs	r3, #0
 8013f14:	613b      	str	r3, [r7, #16]
 8013f16:	e043      	b.n	8013fa0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013f18:	693b      	ldr	r3, [r7, #16]
 8013f1a:	015a      	lsls	r2, r3, #5
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	4413      	add	r3, r2
 8013f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013f2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013f2e:	d118      	bne.n	8013f62 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8013f30:	693b      	ldr	r3, [r7, #16]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d10a      	bne.n	8013f4c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8013f36:	693b      	ldr	r3, [r7, #16]
 8013f38:	015a      	lsls	r2, r3, #5
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	4413      	add	r3, r2
 8013f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f42:	461a      	mov	r2, r3
 8013f44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013f48:	6013      	str	r3, [r2, #0]
 8013f4a:	e013      	b.n	8013f74 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013f4c:	693b      	ldr	r3, [r7, #16]
 8013f4e:	015a      	lsls	r2, r3, #5
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	4413      	add	r3, r2
 8013f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f58:	461a      	mov	r2, r3
 8013f5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013f5e:	6013      	str	r3, [r2, #0]
 8013f60:	e008      	b.n	8013f74 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013f62:	693b      	ldr	r3, [r7, #16]
 8013f64:	015a      	lsls	r2, r3, #5
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	4413      	add	r3, r2
 8013f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f6e:	461a      	mov	r2, r3
 8013f70:	2300      	movs	r3, #0
 8013f72:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013f74:	693b      	ldr	r3, [r7, #16]
 8013f76:	015a      	lsls	r2, r3, #5
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	4413      	add	r3, r2
 8013f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f80:	461a      	mov	r2, r3
 8013f82:	2300      	movs	r3, #0
 8013f84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013f86:	693b      	ldr	r3, [r7, #16]
 8013f88:	015a      	lsls	r2, r3, #5
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	4413      	add	r3, r2
 8013f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f92:	461a      	mov	r2, r3
 8013f94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013f98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013f9a:	693b      	ldr	r3, [r7, #16]
 8013f9c:	3301      	adds	r3, #1
 8013f9e:	613b      	str	r3, [r7, #16]
 8013fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fa2:	693a      	ldr	r2, [r7, #16]
 8013fa4:	429a      	cmp	r2, r3
 8013fa6:	d3b7      	bcc.n	8013f18 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013fae:	691b      	ldr	r3, [r3, #16]
 8013fb0:	68fa      	ldr	r2, [r7, #12]
 8013fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013fb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013fba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	2200      	movs	r2, #0
 8013fc0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013fc8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d105      	bne.n	8013fdc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	699b      	ldr	r3, [r3, #24]
 8013fd4:	f043 0210 	orr.w	r2, r3, #16
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	699a      	ldr	r2, [r3, #24]
 8013fe0:	4b0e      	ldr	r3, [pc, #56]	; (801401c <USB_DevInit+0x2b4>)
 8013fe2:	4313      	orrs	r3, r2
 8013fe4:	687a      	ldr	r2, [r7, #4]
 8013fe6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d005      	beq.n	8013ffa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	699b      	ldr	r3, [r3, #24]
 8013ff2:	f043 0208 	orr.w	r2, r3, #8
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ffc:	2b01      	cmp	r3, #1
 8013ffe:	d105      	bne.n	801400c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	699a      	ldr	r2, [r3, #24]
 8014004:	4b06      	ldr	r3, [pc, #24]	; (8014020 <USB_DevInit+0x2b8>)
 8014006:	4313      	orrs	r3, r2
 8014008:	687a      	ldr	r2, [r7, #4]
 801400a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801400c:	7dfb      	ldrb	r3, [r7, #23]
}
 801400e:	4618      	mov	r0, r3
 8014010:	3718      	adds	r7, #24
 8014012:	46bd      	mov	sp, r7
 8014014:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014018:	b004      	add	sp, #16
 801401a:	4770      	bx	lr
 801401c:	803c3800 	.word	0x803c3800
 8014020:	40000004 	.word	0x40000004

08014024 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8014024:	b480      	push	{r7}
 8014026:	b085      	sub	sp, #20
 8014028:	af00      	add	r7, sp, #0
 801402a:	6078      	str	r0, [r7, #4]
 801402c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801402e:	2300      	movs	r3, #0
 8014030:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	3301      	adds	r3, #1
 8014036:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	4a13      	ldr	r2, [pc, #76]	; (8014088 <USB_FlushTxFifo+0x64>)
 801403c:	4293      	cmp	r3, r2
 801403e:	d901      	bls.n	8014044 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8014040:	2303      	movs	r3, #3
 8014042:	e01b      	b.n	801407c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	691b      	ldr	r3, [r3, #16]
 8014048:	2b00      	cmp	r3, #0
 801404a:	daf2      	bge.n	8014032 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801404c:	2300      	movs	r3, #0
 801404e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014050:	683b      	ldr	r3, [r7, #0]
 8014052:	019b      	lsls	r3, r3, #6
 8014054:	f043 0220 	orr.w	r2, r3, #32
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	3301      	adds	r3, #1
 8014060:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	4a08      	ldr	r2, [pc, #32]	; (8014088 <USB_FlushTxFifo+0x64>)
 8014066:	4293      	cmp	r3, r2
 8014068:	d901      	bls.n	801406e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801406a:	2303      	movs	r3, #3
 801406c:	e006      	b.n	801407c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	691b      	ldr	r3, [r3, #16]
 8014072:	f003 0320 	and.w	r3, r3, #32
 8014076:	2b20      	cmp	r3, #32
 8014078:	d0f0      	beq.n	801405c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801407a:	2300      	movs	r3, #0
}
 801407c:	4618      	mov	r0, r3
 801407e:	3714      	adds	r7, #20
 8014080:	46bd      	mov	sp, r7
 8014082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014086:	4770      	bx	lr
 8014088:	00030d40 	.word	0x00030d40

0801408c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801408c:	b480      	push	{r7}
 801408e:	b085      	sub	sp, #20
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014094:	2300      	movs	r3, #0
 8014096:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	3301      	adds	r3, #1
 801409c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	4a11      	ldr	r2, [pc, #68]	; (80140e8 <USB_FlushRxFifo+0x5c>)
 80140a2:	4293      	cmp	r3, r2
 80140a4:	d901      	bls.n	80140aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80140a6:	2303      	movs	r3, #3
 80140a8:	e018      	b.n	80140dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	691b      	ldr	r3, [r3, #16]
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	daf2      	bge.n	8014098 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80140b2:	2300      	movs	r3, #0
 80140b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	2210      	movs	r2, #16
 80140ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	3301      	adds	r3, #1
 80140c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	4a08      	ldr	r2, [pc, #32]	; (80140e8 <USB_FlushRxFifo+0x5c>)
 80140c6:	4293      	cmp	r3, r2
 80140c8:	d901      	bls.n	80140ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80140ca:	2303      	movs	r3, #3
 80140cc:	e006      	b.n	80140dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	691b      	ldr	r3, [r3, #16]
 80140d2:	f003 0310 	and.w	r3, r3, #16
 80140d6:	2b10      	cmp	r3, #16
 80140d8:	d0f0      	beq.n	80140bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80140da:	2300      	movs	r3, #0
}
 80140dc:	4618      	mov	r0, r3
 80140de:	3714      	adds	r7, #20
 80140e0:	46bd      	mov	sp, r7
 80140e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e6:	4770      	bx	lr
 80140e8:	00030d40 	.word	0x00030d40

080140ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80140ec:	b480      	push	{r7}
 80140ee:	b085      	sub	sp, #20
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	6078      	str	r0, [r7, #4]
 80140f4:	460b      	mov	r3, r1
 80140f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014102:	681a      	ldr	r2, [r3, #0]
 8014104:	78fb      	ldrb	r3, [r7, #3]
 8014106:	68f9      	ldr	r1, [r7, #12]
 8014108:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801410c:	4313      	orrs	r3, r2
 801410e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8014110:	2300      	movs	r3, #0
}
 8014112:	4618      	mov	r0, r3
 8014114:	3714      	adds	r7, #20
 8014116:	46bd      	mov	sp, r7
 8014118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801411c:	4770      	bx	lr

0801411e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801411e:	b480      	push	{r7}
 8014120:	b087      	sub	sp, #28
 8014122:	af00      	add	r7, sp, #0
 8014124:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801412a:	693b      	ldr	r3, [r7, #16]
 801412c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014130:	689b      	ldr	r3, [r3, #8]
 8014132:	f003 0306 	and.w	r3, r3, #6
 8014136:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	2b00      	cmp	r3, #0
 801413c:	d102      	bne.n	8014144 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801413e:	2300      	movs	r3, #0
 8014140:	75fb      	strb	r3, [r7, #23]
 8014142:	e00a      	b.n	801415a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	2b02      	cmp	r3, #2
 8014148:	d002      	beq.n	8014150 <USB_GetDevSpeed+0x32>
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	2b06      	cmp	r3, #6
 801414e:	d102      	bne.n	8014156 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8014150:	2302      	movs	r3, #2
 8014152:	75fb      	strb	r3, [r7, #23]
 8014154:	e001      	b.n	801415a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8014156:	230f      	movs	r3, #15
 8014158:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801415a:	7dfb      	ldrb	r3, [r7, #23]
}
 801415c:	4618      	mov	r0, r3
 801415e:	371c      	adds	r7, #28
 8014160:	46bd      	mov	sp, r7
 8014162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014166:	4770      	bx	lr

08014168 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014168:	b480      	push	{r7}
 801416a:	b085      	sub	sp, #20
 801416c:	af00      	add	r7, sp, #0
 801416e:	6078      	str	r0, [r7, #4]
 8014170:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014176:	683b      	ldr	r3, [r7, #0]
 8014178:	781b      	ldrb	r3, [r3, #0]
 801417a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801417c:	683b      	ldr	r3, [r7, #0]
 801417e:	785b      	ldrb	r3, [r3, #1]
 8014180:	2b01      	cmp	r3, #1
 8014182:	d139      	bne.n	80141f8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801418a:	69da      	ldr	r2, [r3, #28]
 801418c:	683b      	ldr	r3, [r7, #0]
 801418e:	781b      	ldrb	r3, [r3, #0]
 8014190:	f003 030f 	and.w	r3, r3, #15
 8014194:	2101      	movs	r1, #1
 8014196:	fa01 f303 	lsl.w	r3, r1, r3
 801419a:	b29b      	uxth	r3, r3
 801419c:	68f9      	ldr	r1, [r7, #12]
 801419e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80141a2:	4313      	orrs	r3, r2
 80141a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80141a6:	68bb      	ldr	r3, [r7, #8]
 80141a8:	015a      	lsls	r2, r3, #5
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	4413      	add	r3, r2
 80141ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d153      	bne.n	8014264 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80141bc:	68bb      	ldr	r3, [r7, #8]
 80141be:	015a      	lsls	r2, r3, #5
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	4413      	add	r3, r2
 80141c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80141c8:	681a      	ldr	r2, [r3, #0]
 80141ca:	683b      	ldr	r3, [r7, #0]
 80141cc:	689b      	ldr	r3, [r3, #8]
 80141ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80141d2:	683b      	ldr	r3, [r7, #0]
 80141d4:	791b      	ldrb	r3, [r3, #4]
 80141d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80141d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80141da:	68bb      	ldr	r3, [r7, #8]
 80141dc:	059b      	lsls	r3, r3, #22
 80141de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80141e0:	431a      	orrs	r2, r3
 80141e2:	68bb      	ldr	r3, [r7, #8]
 80141e4:	0159      	lsls	r1, r3, #5
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	440b      	add	r3, r1
 80141ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80141ee:	4619      	mov	r1, r3
 80141f0:	4b20      	ldr	r3, [pc, #128]	; (8014274 <USB_ActivateEndpoint+0x10c>)
 80141f2:	4313      	orrs	r3, r2
 80141f4:	600b      	str	r3, [r1, #0]
 80141f6:	e035      	b.n	8014264 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80141fe:	69da      	ldr	r2, [r3, #28]
 8014200:	683b      	ldr	r3, [r7, #0]
 8014202:	781b      	ldrb	r3, [r3, #0]
 8014204:	f003 030f 	and.w	r3, r3, #15
 8014208:	2101      	movs	r1, #1
 801420a:	fa01 f303 	lsl.w	r3, r1, r3
 801420e:	041b      	lsls	r3, r3, #16
 8014210:	68f9      	ldr	r1, [r7, #12]
 8014212:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014216:	4313      	orrs	r3, r2
 8014218:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801421a:	68bb      	ldr	r3, [r7, #8]
 801421c:	015a      	lsls	r2, r3, #5
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	4413      	add	r3, r2
 8014222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801422c:	2b00      	cmp	r3, #0
 801422e:	d119      	bne.n	8014264 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014230:	68bb      	ldr	r3, [r7, #8]
 8014232:	015a      	lsls	r2, r3, #5
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	4413      	add	r3, r2
 8014238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801423c:	681a      	ldr	r2, [r3, #0]
 801423e:	683b      	ldr	r3, [r7, #0]
 8014240:	689b      	ldr	r3, [r3, #8]
 8014242:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8014246:	683b      	ldr	r3, [r7, #0]
 8014248:	791b      	ldrb	r3, [r3, #4]
 801424a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801424c:	430b      	orrs	r3, r1
 801424e:	431a      	orrs	r2, r3
 8014250:	68bb      	ldr	r3, [r7, #8]
 8014252:	0159      	lsls	r1, r3, #5
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	440b      	add	r3, r1
 8014258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801425c:	4619      	mov	r1, r3
 801425e:	4b05      	ldr	r3, [pc, #20]	; (8014274 <USB_ActivateEndpoint+0x10c>)
 8014260:	4313      	orrs	r3, r2
 8014262:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8014264:	2300      	movs	r3, #0
}
 8014266:	4618      	mov	r0, r3
 8014268:	3714      	adds	r7, #20
 801426a:	46bd      	mov	sp, r7
 801426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014270:	4770      	bx	lr
 8014272:	bf00      	nop
 8014274:	10008000 	.word	0x10008000

08014278 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014278:	b480      	push	{r7}
 801427a:	b085      	sub	sp, #20
 801427c:	af00      	add	r7, sp, #0
 801427e:	6078      	str	r0, [r7, #4]
 8014280:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014286:	683b      	ldr	r3, [r7, #0]
 8014288:	781b      	ldrb	r3, [r3, #0]
 801428a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801428c:	683b      	ldr	r3, [r7, #0]
 801428e:	785b      	ldrb	r3, [r3, #1]
 8014290:	2b01      	cmp	r3, #1
 8014292:	d161      	bne.n	8014358 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014294:	68bb      	ldr	r3, [r7, #8]
 8014296:	015a      	lsls	r2, r3, #5
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	4413      	add	r3, r2
 801429c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80142a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80142aa:	d11f      	bne.n	80142ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80142ac:	68bb      	ldr	r3, [r7, #8]
 80142ae:	015a      	lsls	r2, r3, #5
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	4413      	add	r3, r2
 80142b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	68ba      	ldr	r2, [r7, #8]
 80142bc:	0151      	lsls	r1, r2, #5
 80142be:	68fa      	ldr	r2, [r7, #12]
 80142c0:	440a      	add	r2, r1
 80142c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80142c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80142ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80142cc:	68bb      	ldr	r3, [r7, #8]
 80142ce:	015a      	lsls	r2, r3, #5
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	4413      	add	r3, r2
 80142d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	68ba      	ldr	r2, [r7, #8]
 80142dc:	0151      	lsls	r1, r2, #5
 80142de:	68fa      	ldr	r2, [r7, #12]
 80142e0:	440a      	add	r2, r1
 80142e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80142e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80142ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80142f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80142f4:	683b      	ldr	r3, [r7, #0]
 80142f6:	781b      	ldrb	r3, [r3, #0]
 80142f8:	f003 030f 	and.w	r3, r3, #15
 80142fc:	2101      	movs	r1, #1
 80142fe:	fa01 f303 	lsl.w	r3, r1, r3
 8014302:	b29b      	uxth	r3, r3
 8014304:	43db      	mvns	r3, r3
 8014306:	68f9      	ldr	r1, [r7, #12]
 8014308:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801430c:	4013      	ands	r3, r2
 801430e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014316:	69da      	ldr	r2, [r3, #28]
 8014318:	683b      	ldr	r3, [r7, #0]
 801431a:	781b      	ldrb	r3, [r3, #0]
 801431c:	f003 030f 	and.w	r3, r3, #15
 8014320:	2101      	movs	r1, #1
 8014322:	fa01 f303 	lsl.w	r3, r1, r3
 8014326:	b29b      	uxth	r3, r3
 8014328:	43db      	mvns	r3, r3
 801432a:	68f9      	ldr	r1, [r7, #12]
 801432c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014330:	4013      	ands	r3, r2
 8014332:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8014334:	68bb      	ldr	r3, [r7, #8]
 8014336:	015a      	lsls	r2, r3, #5
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	4413      	add	r3, r2
 801433c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014340:	681a      	ldr	r2, [r3, #0]
 8014342:	68bb      	ldr	r3, [r7, #8]
 8014344:	0159      	lsls	r1, r3, #5
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	440b      	add	r3, r1
 801434a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801434e:	4619      	mov	r1, r3
 8014350:	4b35      	ldr	r3, [pc, #212]	; (8014428 <USB_DeactivateEndpoint+0x1b0>)
 8014352:	4013      	ands	r3, r2
 8014354:	600b      	str	r3, [r1, #0]
 8014356:	e060      	b.n	801441a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014358:	68bb      	ldr	r3, [r7, #8]
 801435a:	015a      	lsls	r2, r3, #5
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	4413      	add	r3, r2
 8014360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801436a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801436e:	d11f      	bne.n	80143b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8014370:	68bb      	ldr	r3, [r7, #8]
 8014372:	015a      	lsls	r2, r3, #5
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	4413      	add	r3, r2
 8014378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801437c:	681b      	ldr	r3, [r3, #0]
 801437e:	68ba      	ldr	r2, [r7, #8]
 8014380:	0151      	lsls	r1, r2, #5
 8014382:	68fa      	ldr	r2, [r7, #12]
 8014384:	440a      	add	r2, r1
 8014386:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801438a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801438e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8014390:	68bb      	ldr	r3, [r7, #8]
 8014392:	015a      	lsls	r2, r3, #5
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	4413      	add	r3, r2
 8014398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	68ba      	ldr	r2, [r7, #8]
 80143a0:	0151      	lsls	r1, r2, #5
 80143a2:	68fa      	ldr	r2, [r7, #12]
 80143a4:	440a      	add	r2, r1
 80143a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80143aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80143ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80143b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80143b8:	683b      	ldr	r3, [r7, #0]
 80143ba:	781b      	ldrb	r3, [r3, #0]
 80143bc:	f003 030f 	and.w	r3, r3, #15
 80143c0:	2101      	movs	r1, #1
 80143c2:	fa01 f303 	lsl.w	r3, r1, r3
 80143c6:	041b      	lsls	r3, r3, #16
 80143c8:	43db      	mvns	r3, r3
 80143ca:	68f9      	ldr	r1, [r7, #12]
 80143cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80143d0:	4013      	ands	r3, r2
 80143d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80143da:	69da      	ldr	r2, [r3, #28]
 80143dc:	683b      	ldr	r3, [r7, #0]
 80143de:	781b      	ldrb	r3, [r3, #0]
 80143e0:	f003 030f 	and.w	r3, r3, #15
 80143e4:	2101      	movs	r1, #1
 80143e6:	fa01 f303 	lsl.w	r3, r1, r3
 80143ea:	041b      	lsls	r3, r3, #16
 80143ec:	43db      	mvns	r3, r3
 80143ee:	68f9      	ldr	r1, [r7, #12]
 80143f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80143f4:	4013      	ands	r3, r2
 80143f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80143f8:	68bb      	ldr	r3, [r7, #8]
 80143fa:	015a      	lsls	r2, r3, #5
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	4413      	add	r3, r2
 8014400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014404:	681a      	ldr	r2, [r3, #0]
 8014406:	68bb      	ldr	r3, [r7, #8]
 8014408:	0159      	lsls	r1, r3, #5
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	440b      	add	r3, r1
 801440e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014412:	4619      	mov	r1, r3
 8014414:	4b05      	ldr	r3, [pc, #20]	; (801442c <USB_DeactivateEndpoint+0x1b4>)
 8014416:	4013      	ands	r3, r2
 8014418:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801441a:	2300      	movs	r3, #0
}
 801441c:	4618      	mov	r0, r3
 801441e:	3714      	adds	r7, #20
 8014420:	46bd      	mov	sp, r7
 8014422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014426:	4770      	bx	lr
 8014428:	ec337800 	.word	0xec337800
 801442c:	eff37800 	.word	0xeff37800

08014430 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8014430:	b580      	push	{r7, lr}
 8014432:	b08a      	sub	sp, #40	; 0x28
 8014434:	af02      	add	r7, sp, #8
 8014436:	60f8      	str	r0, [r7, #12]
 8014438:	60b9      	str	r1, [r7, #8]
 801443a:	4613      	mov	r3, r2
 801443c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8014442:	68bb      	ldr	r3, [r7, #8]
 8014444:	781b      	ldrb	r3, [r3, #0]
 8014446:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014448:	68bb      	ldr	r3, [r7, #8]
 801444a:	785b      	ldrb	r3, [r3, #1]
 801444c:	2b01      	cmp	r3, #1
 801444e:	f040 8181 	bne.w	8014754 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8014452:	68bb      	ldr	r3, [r7, #8]
 8014454:	691b      	ldr	r3, [r3, #16]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d132      	bne.n	80144c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801445a:	69bb      	ldr	r3, [r7, #24]
 801445c:	015a      	lsls	r2, r3, #5
 801445e:	69fb      	ldr	r3, [r7, #28]
 8014460:	4413      	add	r3, r2
 8014462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014466:	691a      	ldr	r2, [r3, #16]
 8014468:	69bb      	ldr	r3, [r7, #24]
 801446a:	0159      	lsls	r1, r3, #5
 801446c:	69fb      	ldr	r3, [r7, #28]
 801446e:	440b      	add	r3, r1
 8014470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014474:	4619      	mov	r1, r3
 8014476:	4ba5      	ldr	r3, [pc, #660]	; (801470c <USB_EPStartXfer+0x2dc>)
 8014478:	4013      	ands	r3, r2
 801447a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801447c:	69bb      	ldr	r3, [r7, #24]
 801447e:	015a      	lsls	r2, r3, #5
 8014480:	69fb      	ldr	r3, [r7, #28]
 8014482:	4413      	add	r3, r2
 8014484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014488:	691b      	ldr	r3, [r3, #16]
 801448a:	69ba      	ldr	r2, [r7, #24]
 801448c:	0151      	lsls	r1, r2, #5
 801448e:	69fa      	ldr	r2, [r7, #28]
 8014490:	440a      	add	r2, r1
 8014492:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014496:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801449a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801449c:	69bb      	ldr	r3, [r7, #24]
 801449e:	015a      	lsls	r2, r3, #5
 80144a0:	69fb      	ldr	r3, [r7, #28]
 80144a2:	4413      	add	r3, r2
 80144a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144a8:	691a      	ldr	r2, [r3, #16]
 80144aa:	69bb      	ldr	r3, [r7, #24]
 80144ac:	0159      	lsls	r1, r3, #5
 80144ae:	69fb      	ldr	r3, [r7, #28]
 80144b0:	440b      	add	r3, r1
 80144b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144b6:	4619      	mov	r1, r3
 80144b8:	4b95      	ldr	r3, [pc, #596]	; (8014710 <USB_EPStartXfer+0x2e0>)
 80144ba:	4013      	ands	r3, r2
 80144bc:	610b      	str	r3, [r1, #16]
 80144be:	e092      	b.n	80145e6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80144c0:	69bb      	ldr	r3, [r7, #24]
 80144c2:	015a      	lsls	r2, r3, #5
 80144c4:	69fb      	ldr	r3, [r7, #28]
 80144c6:	4413      	add	r3, r2
 80144c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144cc:	691a      	ldr	r2, [r3, #16]
 80144ce:	69bb      	ldr	r3, [r7, #24]
 80144d0:	0159      	lsls	r1, r3, #5
 80144d2:	69fb      	ldr	r3, [r7, #28]
 80144d4:	440b      	add	r3, r1
 80144d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144da:	4619      	mov	r1, r3
 80144dc:	4b8c      	ldr	r3, [pc, #560]	; (8014710 <USB_EPStartXfer+0x2e0>)
 80144de:	4013      	ands	r3, r2
 80144e0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80144e2:	69bb      	ldr	r3, [r7, #24]
 80144e4:	015a      	lsls	r2, r3, #5
 80144e6:	69fb      	ldr	r3, [r7, #28]
 80144e8:	4413      	add	r3, r2
 80144ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144ee:	691a      	ldr	r2, [r3, #16]
 80144f0:	69bb      	ldr	r3, [r7, #24]
 80144f2:	0159      	lsls	r1, r3, #5
 80144f4:	69fb      	ldr	r3, [r7, #28]
 80144f6:	440b      	add	r3, r1
 80144f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144fc:	4619      	mov	r1, r3
 80144fe:	4b83      	ldr	r3, [pc, #524]	; (801470c <USB_EPStartXfer+0x2dc>)
 8014500:	4013      	ands	r3, r2
 8014502:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8014504:	69bb      	ldr	r3, [r7, #24]
 8014506:	2b00      	cmp	r3, #0
 8014508:	d11a      	bne.n	8014540 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801450a:	68bb      	ldr	r3, [r7, #8]
 801450c:	691a      	ldr	r2, [r3, #16]
 801450e:	68bb      	ldr	r3, [r7, #8]
 8014510:	689b      	ldr	r3, [r3, #8]
 8014512:	429a      	cmp	r2, r3
 8014514:	d903      	bls.n	801451e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8014516:	68bb      	ldr	r3, [r7, #8]
 8014518:	689a      	ldr	r2, [r3, #8]
 801451a:	68bb      	ldr	r3, [r7, #8]
 801451c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801451e:	69bb      	ldr	r3, [r7, #24]
 8014520:	015a      	lsls	r2, r3, #5
 8014522:	69fb      	ldr	r3, [r7, #28]
 8014524:	4413      	add	r3, r2
 8014526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801452a:	691b      	ldr	r3, [r3, #16]
 801452c:	69ba      	ldr	r2, [r7, #24]
 801452e:	0151      	lsls	r1, r2, #5
 8014530:	69fa      	ldr	r2, [r7, #28]
 8014532:	440a      	add	r2, r1
 8014534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014538:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801453c:	6113      	str	r3, [r2, #16]
 801453e:	e01b      	b.n	8014578 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8014540:	69bb      	ldr	r3, [r7, #24]
 8014542:	015a      	lsls	r2, r3, #5
 8014544:	69fb      	ldr	r3, [r7, #28]
 8014546:	4413      	add	r3, r2
 8014548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801454c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801454e:	68bb      	ldr	r3, [r7, #8]
 8014550:	6919      	ldr	r1, [r3, #16]
 8014552:	68bb      	ldr	r3, [r7, #8]
 8014554:	689b      	ldr	r3, [r3, #8]
 8014556:	440b      	add	r3, r1
 8014558:	1e59      	subs	r1, r3, #1
 801455a:	68bb      	ldr	r3, [r7, #8]
 801455c:	689b      	ldr	r3, [r3, #8]
 801455e:	fbb1 f3f3 	udiv	r3, r1, r3
 8014562:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8014564:	4b6b      	ldr	r3, [pc, #428]	; (8014714 <USB_EPStartXfer+0x2e4>)
 8014566:	400b      	ands	r3, r1
 8014568:	69b9      	ldr	r1, [r7, #24]
 801456a:	0148      	lsls	r0, r1, #5
 801456c:	69f9      	ldr	r1, [r7, #28]
 801456e:	4401      	add	r1, r0
 8014570:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8014574:	4313      	orrs	r3, r2
 8014576:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014578:	69bb      	ldr	r3, [r7, #24]
 801457a:	015a      	lsls	r2, r3, #5
 801457c:	69fb      	ldr	r3, [r7, #28]
 801457e:	4413      	add	r3, r2
 8014580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014584:	691a      	ldr	r2, [r3, #16]
 8014586:	68bb      	ldr	r3, [r7, #8]
 8014588:	691b      	ldr	r3, [r3, #16]
 801458a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801458e:	69b9      	ldr	r1, [r7, #24]
 8014590:	0148      	lsls	r0, r1, #5
 8014592:	69f9      	ldr	r1, [r7, #28]
 8014594:	4401      	add	r1, r0
 8014596:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801459a:	4313      	orrs	r3, r2
 801459c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801459e:	68bb      	ldr	r3, [r7, #8]
 80145a0:	791b      	ldrb	r3, [r3, #4]
 80145a2:	2b01      	cmp	r3, #1
 80145a4:	d11f      	bne.n	80145e6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80145a6:	69bb      	ldr	r3, [r7, #24]
 80145a8:	015a      	lsls	r2, r3, #5
 80145aa:	69fb      	ldr	r3, [r7, #28]
 80145ac:	4413      	add	r3, r2
 80145ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145b2:	691b      	ldr	r3, [r3, #16]
 80145b4:	69ba      	ldr	r2, [r7, #24]
 80145b6:	0151      	lsls	r1, r2, #5
 80145b8:	69fa      	ldr	r2, [r7, #28]
 80145ba:	440a      	add	r2, r1
 80145bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80145c0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80145c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80145c6:	69bb      	ldr	r3, [r7, #24]
 80145c8:	015a      	lsls	r2, r3, #5
 80145ca:	69fb      	ldr	r3, [r7, #28]
 80145cc:	4413      	add	r3, r2
 80145ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145d2:	691b      	ldr	r3, [r3, #16]
 80145d4:	69ba      	ldr	r2, [r7, #24]
 80145d6:	0151      	lsls	r1, r2, #5
 80145d8:	69fa      	ldr	r2, [r7, #28]
 80145da:	440a      	add	r2, r1
 80145dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80145e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80145e4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80145e6:	79fb      	ldrb	r3, [r7, #7]
 80145e8:	2b01      	cmp	r3, #1
 80145ea:	d14b      	bne.n	8014684 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80145ec:	68bb      	ldr	r3, [r7, #8]
 80145ee:	69db      	ldr	r3, [r3, #28]
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d009      	beq.n	8014608 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80145f4:	69bb      	ldr	r3, [r7, #24]
 80145f6:	015a      	lsls	r2, r3, #5
 80145f8:	69fb      	ldr	r3, [r7, #28]
 80145fa:	4413      	add	r3, r2
 80145fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014600:	461a      	mov	r2, r3
 8014602:	68bb      	ldr	r3, [r7, #8]
 8014604:	69db      	ldr	r3, [r3, #28]
 8014606:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8014608:	68bb      	ldr	r3, [r7, #8]
 801460a:	791b      	ldrb	r3, [r3, #4]
 801460c:	2b01      	cmp	r3, #1
 801460e:	d128      	bne.n	8014662 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014610:	69fb      	ldr	r3, [r7, #28]
 8014612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014616:	689b      	ldr	r3, [r3, #8]
 8014618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801461c:	2b00      	cmp	r3, #0
 801461e:	d110      	bne.n	8014642 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014620:	69bb      	ldr	r3, [r7, #24]
 8014622:	015a      	lsls	r2, r3, #5
 8014624:	69fb      	ldr	r3, [r7, #28]
 8014626:	4413      	add	r3, r2
 8014628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	69ba      	ldr	r2, [r7, #24]
 8014630:	0151      	lsls	r1, r2, #5
 8014632:	69fa      	ldr	r2, [r7, #28]
 8014634:	440a      	add	r2, r1
 8014636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801463a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801463e:	6013      	str	r3, [r2, #0]
 8014640:	e00f      	b.n	8014662 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014642:	69bb      	ldr	r3, [r7, #24]
 8014644:	015a      	lsls	r2, r3, #5
 8014646:	69fb      	ldr	r3, [r7, #28]
 8014648:	4413      	add	r3, r2
 801464a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	69ba      	ldr	r2, [r7, #24]
 8014652:	0151      	lsls	r1, r2, #5
 8014654:	69fa      	ldr	r2, [r7, #28]
 8014656:	440a      	add	r2, r1
 8014658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801465c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014660:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014662:	69bb      	ldr	r3, [r7, #24]
 8014664:	015a      	lsls	r2, r3, #5
 8014666:	69fb      	ldr	r3, [r7, #28]
 8014668:	4413      	add	r3, r2
 801466a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	69ba      	ldr	r2, [r7, #24]
 8014672:	0151      	lsls	r1, r2, #5
 8014674:	69fa      	ldr	r2, [r7, #28]
 8014676:	440a      	add	r2, r1
 8014678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801467c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014680:	6013      	str	r3, [r2, #0]
 8014682:	e16a      	b.n	801495a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014684:	69bb      	ldr	r3, [r7, #24]
 8014686:	015a      	lsls	r2, r3, #5
 8014688:	69fb      	ldr	r3, [r7, #28]
 801468a:	4413      	add	r3, r2
 801468c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	69ba      	ldr	r2, [r7, #24]
 8014694:	0151      	lsls	r1, r2, #5
 8014696:	69fa      	ldr	r2, [r7, #28]
 8014698:	440a      	add	r2, r1
 801469a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801469e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80146a2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80146a4:	68bb      	ldr	r3, [r7, #8]
 80146a6:	791b      	ldrb	r3, [r3, #4]
 80146a8:	2b01      	cmp	r3, #1
 80146aa:	d015      	beq.n	80146d8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80146ac:	68bb      	ldr	r3, [r7, #8]
 80146ae:	691b      	ldr	r3, [r3, #16]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	f000 8152 	beq.w	801495a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80146b6:	69fb      	ldr	r3, [r7, #28]
 80146b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80146bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80146be:	68bb      	ldr	r3, [r7, #8]
 80146c0:	781b      	ldrb	r3, [r3, #0]
 80146c2:	f003 030f 	and.w	r3, r3, #15
 80146c6:	2101      	movs	r1, #1
 80146c8:	fa01 f303 	lsl.w	r3, r1, r3
 80146cc:	69f9      	ldr	r1, [r7, #28]
 80146ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80146d2:	4313      	orrs	r3, r2
 80146d4:	634b      	str	r3, [r1, #52]	; 0x34
 80146d6:	e140      	b.n	801495a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80146d8:	69fb      	ldr	r3, [r7, #28]
 80146da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80146de:	689b      	ldr	r3, [r3, #8]
 80146e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d117      	bne.n	8014718 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80146e8:	69bb      	ldr	r3, [r7, #24]
 80146ea:	015a      	lsls	r2, r3, #5
 80146ec:	69fb      	ldr	r3, [r7, #28]
 80146ee:	4413      	add	r3, r2
 80146f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	69ba      	ldr	r2, [r7, #24]
 80146f8:	0151      	lsls	r1, r2, #5
 80146fa:	69fa      	ldr	r2, [r7, #28]
 80146fc:	440a      	add	r2, r1
 80146fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014702:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014706:	6013      	str	r3, [r2, #0]
 8014708:	e016      	b.n	8014738 <USB_EPStartXfer+0x308>
 801470a:	bf00      	nop
 801470c:	e007ffff 	.word	0xe007ffff
 8014710:	fff80000 	.word	0xfff80000
 8014714:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014718:	69bb      	ldr	r3, [r7, #24]
 801471a:	015a      	lsls	r2, r3, #5
 801471c:	69fb      	ldr	r3, [r7, #28]
 801471e:	4413      	add	r3, r2
 8014720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	69ba      	ldr	r2, [r7, #24]
 8014728:	0151      	lsls	r1, r2, #5
 801472a:	69fa      	ldr	r2, [r7, #28]
 801472c:	440a      	add	r2, r1
 801472e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014736:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8014738:	68bb      	ldr	r3, [r7, #8]
 801473a:	68d9      	ldr	r1, [r3, #12]
 801473c:	68bb      	ldr	r3, [r7, #8]
 801473e:	781a      	ldrb	r2, [r3, #0]
 8014740:	68bb      	ldr	r3, [r7, #8]
 8014742:	691b      	ldr	r3, [r3, #16]
 8014744:	b298      	uxth	r0, r3
 8014746:	79fb      	ldrb	r3, [r7, #7]
 8014748:	9300      	str	r3, [sp, #0]
 801474a:	4603      	mov	r3, r0
 801474c:	68f8      	ldr	r0, [r7, #12]
 801474e:	f000 f9b9 	bl	8014ac4 <USB_WritePacket>
 8014752:	e102      	b.n	801495a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014754:	69bb      	ldr	r3, [r7, #24]
 8014756:	015a      	lsls	r2, r3, #5
 8014758:	69fb      	ldr	r3, [r7, #28]
 801475a:	4413      	add	r3, r2
 801475c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014760:	691a      	ldr	r2, [r3, #16]
 8014762:	69bb      	ldr	r3, [r7, #24]
 8014764:	0159      	lsls	r1, r3, #5
 8014766:	69fb      	ldr	r3, [r7, #28]
 8014768:	440b      	add	r3, r1
 801476a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801476e:	4619      	mov	r1, r3
 8014770:	4b7c      	ldr	r3, [pc, #496]	; (8014964 <USB_EPStartXfer+0x534>)
 8014772:	4013      	ands	r3, r2
 8014774:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014776:	69bb      	ldr	r3, [r7, #24]
 8014778:	015a      	lsls	r2, r3, #5
 801477a:	69fb      	ldr	r3, [r7, #28]
 801477c:	4413      	add	r3, r2
 801477e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014782:	691a      	ldr	r2, [r3, #16]
 8014784:	69bb      	ldr	r3, [r7, #24]
 8014786:	0159      	lsls	r1, r3, #5
 8014788:	69fb      	ldr	r3, [r7, #28]
 801478a:	440b      	add	r3, r1
 801478c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014790:	4619      	mov	r1, r3
 8014792:	4b75      	ldr	r3, [pc, #468]	; (8014968 <USB_EPStartXfer+0x538>)
 8014794:	4013      	ands	r3, r2
 8014796:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8014798:	69bb      	ldr	r3, [r7, #24]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d12f      	bne.n	80147fe <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 801479e:	68bb      	ldr	r3, [r7, #8]
 80147a0:	691b      	ldr	r3, [r3, #16]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d003      	beq.n	80147ae <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80147a6:	68bb      	ldr	r3, [r7, #8]
 80147a8:	689a      	ldr	r2, [r3, #8]
 80147aa:	68bb      	ldr	r3, [r7, #8]
 80147ac:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80147ae:	68bb      	ldr	r3, [r7, #8]
 80147b0:	689a      	ldr	r2, [r3, #8]
 80147b2:	68bb      	ldr	r3, [r7, #8]
 80147b4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80147b6:	69bb      	ldr	r3, [r7, #24]
 80147b8:	015a      	lsls	r2, r3, #5
 80147ba:	69fb      	ldr	r3, [r7, #28]
 80147bc:	4413      	add	r3, r2
 80147be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80147c2:	691a      	ldr	r2, [r3, #16]
 80147c4:	68bb      	ldr	r3, [r7, #8]
 80147c6:	6a1b      	ldr	r3, [r3, #32]
 80147c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80147cc:	69b9      	ldr	r1, [r7, #24]
 80147ce:	0148      	lsls	r0, r1, #5
 80147d0:	69f9      	ldr	r1, [r7, #28]
 80147d2:	4401      	add	r1, r0
 80147d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80147d8:	4313      	orrs	r3, r2
 80147da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80147dc:	69bb      	ldr	r3, [r7, #24]
 80147de:	015a      	lsls	r2, r3, #5
 80147e0:	69fb      	ldr	r3, [r7, #28]
 80147e2:	4413      	add	r3, r2
 80147e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80147e8:	691b      	ldr	r3, [r3, #16]
 80147ea:	69ba      	ldr	r2, [r7, #24]
 80147ec:	0151      	lsls	r1, r2, #5
 80147ee:	69fa      	ldr	r2, [r7, #28]
 80147f0:	440a      	add	r2, r1
 80147f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80147f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80147fa:	6113      	str	r3, [r2, #16]
 80147fc:	e05f      	b.n	80148be <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80147fe:	68bb      	ldr	r3, [r7, #8]
 8014800:	691b      	ldr	r3, [r3, #16]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d123      	bne.n	801484e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014806:	69bb      	ldr	r3, [r7, #24]
 8014808:	015a      	lsls	r2, r3, #5
 801480a:	69fb      	ldr	r3, [r7, #28]
 801480c:	4413      	add	r3, r2
 801480e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014812:	691a      	ldr	r2, [r3, #16]
 8014814:	68bb      	ldr	r3, [r7, #8]
 8014816:	689b      	ldr	r3, [r3, #8]
 8014818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801481c:	69b9      	ldr	r1, [r7, #24]
 801481e:	0148      	lsls	r0, r1, #5
 8014820:	69f9      	ldr	r1, [r7, #28]
 8014822:	4401      	add	r1, r0
 8014824:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014828:	4313      	orrs	r3, r2
 801482a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801482c:	69bb      	ldr	r3, [r7, #24]
 801482e:	015a      	lsls	r2, r3, #5
 8014830:	69fb      	ldr	r3, [r7, #28]
 8014832:	4413      	add	r3, r2
 8014834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014838:	691b      	ldr	r3, [r3, #16]
 801483a:	69ba      	ldr	r2, [r7, #24]
 801483c:	0151      	lsls	r1, r2, #5
 801483e:	69fa      	ldr	r2, [r7, #28]
 8014840:	440a      	add	r2, r1
 8014842:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014846:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801484a:	6113      	str	r3, [r2, #16]
 801484c:	e037      	b.n	80148be <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801484e:	68bb      	ldr	r3, [r7, #8]
 8014850:	691a      	ldr	r2, [r3, #16]
 8014852:	68bb      	ldr	r3, [r7, #8]
 8014854:	689b      	ldr	r3, [r3, #8]
 8014856:	4413      	add	r3, r2
 8014858:	1e5a      	subs	r2, r3, #1
 801485a:	68bb      	ldr	r3, [r7, #8]
 801485c:	689b      	ldr	r3, [r3, #8]
 801485e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014862:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8014864:	68bb      	ldr	r3, [r7, #8]
 8014866:	689b      	ldr	r3, [r3, #8]
 8014868:	8afa      	ldrh	r2, [r7, #22]
 801486a:	fb03 f202 	mul.w	r2, r3, r2
 801486e:	68bb      	ldr	r3, [r7, #8]
 8014870:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014872:	69bb      	ldr	r3, [r7, #24]
 8014874:	015a      	lsls	r2, r3, #5
 8014876:	69fb      	ldr	r3, [r7, #28]
 8014878:	4413      	add	r3, r2
 801487a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801487e:	691a      	ldr	r2, [r3, #16]
 8014880:	8afb      	ldrh	r3, [r7, #22]
 8014882:	04d9      	lsls	r1, r3, #19
 8014884:	4b39      	ldr	r3, [pc, #228]	; (801496c <USB_EPStartXfer+0x53c>)
 8014886:	400b      	ands	r3, r1
 8014888:	69b9      	ldr	r1, [r7, #24]
 801488a:	0148      	lsls	r0, r1, #5
 801488c:	69f9      	ldr	r1, [r7, #28]
 801488e:	4401      	add	r1, r0
 8014890:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014894:	4313      	orrs	r3, r2
 8014896:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8014898:	69bb      	ldr	r3, [r7, #24]
 801489a:	015a      	lsls	r2, r3, #5
 801489c:	69fb      	ldr	r3, [r7, #28]
 801489e:	4413      	add	r3, r2
 80148a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80148a4:	691a      	ldr	r2, [r3, #16]
 80148a6:	68bb      	ldr	r3, [r7, #8]
 80148a8:	6a1b      	ldr	r3, [r3, #32]
 80148aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80148ae:	69b9      	ldr	r1, [r7, #24]
 80148b0:	0148      	lsls	r0, r1, #5
 80148b2:	69f9      	ldr	r1, [r7, #28]
 80148b4:	4401      	add	r1, r0
 80148b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80148ba:	4313      	orrs	r3, r2
 80148bc:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80148be:	79fb      	ldrb	r3, [r7, #7]
 80148c0:	2b01      	cmp	r3, #1
 80148c2:	d10d      	bne.n	80148e0 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80148c4:	68bb      	ldr	r3, [r7, #8]
 80148c6:	68db      	ldr	r3, [r3, #12]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d009      	beq.n	80148e0 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80148cc:	68bb      	ldr	r3, [r7, #8]
 80148ce:	68d9      	ldr	r1, [r3, #12]
 80148d0:	69bb      	ldr	r3, [r7, #24]
 80148d2:	015a      	lsls	r2, r3, #5
 80148d4:	69fb      	ldr	r3, [r7, #28]
 80148d6:	4413      	add	r3, r2
 80148d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80148dc:	460a      	mov	r2, r1
 80148de:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80148e0:	68bb      	ldr	r3, [r7, #8]
 80148e2:	791b      	ldrb	r3, [r3, #4]
 80148e4:	2b01      	cmp	r3, #1
 80148e6:	d128      	bne.n	801493a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80148e8:	69fb      	ldr	r3, [r7, #28]
 80148ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80148ee:	689b      	ldr	r3, [r3, #8]
 80148f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d110      	bne.n	801491a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80148f8:	69bb      	ldr	r3, [r7, #24]
 80148fa:	015a      	lsls	r2, r3, #5
 80148fc:	69fb      	ldr	r3, [r7, #28]
 80148fe:	4413      	add	r3, r2
 8014900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	69ba      	ldr	r2, [r7, #24]
 8014908:	0151      	lsls	r1, r2, #5
 801490a:	69fa      	ldr	r2, [r7, #28]
 801490c:	440a      	add	r2, r1
 801490e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014912:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014916:	6013      	str	r3, [r2, #0]
 8014918:	e00f      	b.n	801493a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801491a:	69bb      	ldr	r3, [r7, #24]
 801491c:	015a      	lsls	r2, r3, #5
 801491e:	69fb      	ldr	r3, [r7, #28]
 8014920:	4413      	add	r3, r2
 8014922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	69ba      	ldr	r2, [r7, #24]
 801492a:	0151      	lsls	r1, r2, #5
 801492c:	69fa      	ldr	r2, [r7, #28]
 801492e:	440a      	add	r2, r1
 8014930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014938:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801493a:	69bb      	ldr	r3, [r7, #24]
 801493c:	015a      	lsls	r2, r3, #5
 801493e:	69fb      	ldr	r3, [r7, #28]
 8014940:	4413      	add	r3, r2
 8014942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	69ba      	ldr	r2, [r7, #24]
 801494a:	0151      	lsls	r1, r2, #5
 801494c:	69fa      	ldr	r2, [r7, #28]
 801494e:	440a      	add	r2, r1
 8014950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014954:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014958:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801495a:	2300      	movs	r3, #0
}
 801495c:	4618      	mov	r0, r3
 801495e:	3720      	adds	r7, #32
 8014960:	46bd      	mov	sp, r7
 8014962:	bd80      	pop	{r7, pc}
 8014964:	fff80000 	.word	0xfff80000
 8014968:	e007ffff 	.word	0xe007ffff
 801496c:	1ff80000 	.word	0x1ff80000

08014970 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014970:	b480      	push	{r7}
 8014972:	b087      	sub	sp, #28
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
 8014978:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801497a:	2300      	movs	r3, #0
 801497c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801497e:	2300      	movs	r3, #0
 8014980:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014986:	683b      	ldr	r3, [r7, #0]
 8014988:	785b      	ldrb	r3, [r3, #1]
 801498a:	2b01      	cmp	r3, #1
 801498c:	d14a      	bne.n	8014a24 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801498e:	683b      	ldr	r3, [r7, #0]
 8014990:	781b      	ldrb	r3, [r3, #0]
 8014992:	015a      	lsls	r2, r3, #5
 8014994:	693b      	ldr	r3, [r7, #16]
 8014996:	4413      	add	r3, r2
 8014998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80149a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80149a6:	f040 8086 	bne.w	8014ab6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80149aa:	683b      	ldr	r3, [r7, #0]
 80149ac:	781b      	ldrb	r3, [r3, #0]
 80149ae:	015a      	lsls	r2, r3, #5
 80149b0:	693b      	ldr	r3, [r7, #16]
 80149b2:	4413      	add	r3, r2
 80149b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	683a      	ldr	r2, [r7, #0]
 80149bc:	7812      	ldrb	r2, [r2, #0]
 80149be:	0151      	lsls	r1, r2, #5
 80149c0:	693a      	ldr	r2, [r7, #16]
 80149c2:	440a      	add	r2, r1
 80149c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80149c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80149cc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80149ce:	683b      	ldr	r3, [r7, #0]
 80149d0:	781b      	ldrb	r3, [r3, #0]
 80149d2:	015a      	lsls	r2, r3, #5
 80149d4:	693b      	ldr	r3, [r7, #16]
 80149d6:	4413      	add	r3, r2
 80149d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	683a      	ldr	r2, [r7, #0]
 80149e0:	7812      	ldrb	r2, [r2, #0]
 80149e2:	0151      	lsls	r1, r2, #5
 80149e4:	693a      	ldr	r2, [r7, #16]
 80149e6:	440a      	add	r2, r1
 80149e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80149ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80149f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	3301      	adds	r3, #1
 80149f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80149fe:	4293      	cmp	r3, r2
 8014a00:	d902      	bls.n	8014a08 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8014a02:	2301      	movs	r3, #1
 8014a04:	75fb      	strb	r3, [r7, #23]
          break;
 8014a06:	e056      	b.n	8014ab6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8014a08:	683b      	ldr	r3, [r7, #0]
 8014a0a:	781b      	ldrb	r3, [r3, #0]
 8014a0c:	015a      	lsls	r2, r3, #5
 8014a0e:	693b      	ldr	r3, [r7, #16]
 8014a10:	4413      	add	r3, r2
 8014a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014a1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014a20:	d0e7      	beq.n	80149f2 <USB_EPStopXfer+0x82>
 8014a22:	e048      	b.n	8014ab6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014a24:	683b      	ldr	r3, [r7, #0]
 8014a26:	781b      	ldrb	r3, [r3, #0]
 8014a28:	015a      	lsls	r2, r3, #5
 8014a2a:	693b      	ldr	r3, [r7, #16]
 8014a2c:	4413      	add	r3, r2
 8014a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014a38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014a3c:	d13b      	bne.n	8014ab6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8014a3e:	683b      	ldr	r3, [r7, #0]
 8014a40:	781b      	ldrb	r3, [r3, #0]
 8014a42:	015a      	lsls	r2, r3, #5
 8014a44:	693b      	ldr	r3, [r7, #16]
 8014a46:	4413      	add	r3, r2
 8014a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	683a      	ldr	r2, [r7, #0]
 8014a50:	7812      	ldrb	r2, [r2, #0]
 8014a52:	0151      	lsls	r1, r2, #5
 8014a54:	693a      	ldr	r2, [r7, #16]
 8014a56:	440a      	add	r2, r1
 8014a58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014a5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014a60:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8014a62:	683b      	ldr	r3, [r7, #0]
 8014a64:	781b      	ldrb	r3, [r3, #0]
 8014a66:	015a      	lsls	r2, r3, #5
 8014a68:	693b      	ldr	r3, [r7, #16]
 8014a6a:	4413      	add	r3, r2
 8014a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	683a      	ldr	r2, [r7, #0]
 8014a74:	7812      	ldrb	r2, [r2, #0]
 8014a76:	0151      	lsls	r1, r2, #5
 8014a78:	693a      	ldr	r2, [r7, #16]
 8014a7a:	440a      	add	r2, r1
 8014a7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014a80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014a84:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	3301      	adds	r3, #1
 8014a8a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	f242 7210 	movw	r2, #10000	; 0x2710
 8014a92:	4293      	cmp	r3, r2
 8014a94:	d902      	bls.n	8014a9c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8014a96:	2301      	movs	r3, #1
 8014a98:	75fb      	strb	r3, [r7, #23]
          break;
 8014a9a:	e00c      	b.n	8014ab6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8014a9c:	683b      	ldr	r3, [r7, #0]
 8014a9e:	781b      	ldrb	r3, [r3, #0]
 8014aa0:	015a      	lsls	r2, r3, #5
 8014aa2:	693b      	ldr	r3, [r7, #16]
 8014aa4:	4413      	add	r3, r2
 8014aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014ab0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014ab4:	d0e7      	beq.n	8014a86 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8014ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ab8:	4618      	mov	r0, r3
 8014aba:	371c      	adds	r7, #28
 8014abc:	46bd      	mov	sp, r7
 8014abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac2:	4770      	bx	lr

08014ac4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8014ac4:	b480      	push	{r7}
 8014ac6:	b089      	sub	sp, #36	; 0x24
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	60f8      	str	r0, [r7, #12]
 8014acc:	60b9      	str	r1, [r7, #8]
 8014ace:	4611      	mov	r1, r2
 8014ad0:	461a      	mov	r2, r3
 8014ad2:	460b      	mov	r3, r1
 8014ad4:	71fb      	strb	r3, [r7, #7]
 8014ad6:	4613      	mov	r3, r2
 8014ad8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8014ade:	68bb      	ldr	r3, [r7, #8]
 8014ae0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8014ae2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d123      	bne.n	8014b32 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8014aea:	88bb      	ldrh	r3, [r7, #4]
 8014aec:	3303      	adds	r3, #3
 8014aee:	089b      	lsrs	r3, r3, #2
 8014af0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8014af2:	2300      	movs	r3, #0
 8014af4:	61bb      	str	r3, [r7, #24]
 8014af6:	e018      	b.n	8014b2a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014af8:	79fb      	ldrb	r3, [r7, #7]
 8014afa:	031a      	lsls	r2, r3, #12
 8014afc:	697b      	ldr	r3, [r7, #20]
 8014afe:	4413      	add	r3, r2
 8014b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014b04:	461a      	mov	r2, r3
 8014b06:	69fb      	ldr	r3, [r7, #28]
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8014b0c:	69fb      	ldr	r3, [r7, #28]
 8014b0e:	3301      	adds	r3, #1
 8014b10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014b12:	69fb      	ldr	r3, [r7, #28]
 8014b14:	3301      	adds	r3, #1
 8014b16:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014b18:	69fb      	ldr	r3, [r7, #28]
 8014b1a:	3301      	adds	r3, #1
 8014b1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014b1e:	69fb      	ldr	r3, [r7, #28]
 8014b20:	3301      	adds	r3, #1
 8014b22:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014b24:	69bb      	ldr	r3, [r7, #24]
 8014b26:	3301      	adds	r3, #1
 8014b28:	61bb      	str	r3, [r7, #24]
 8014b2a:	69ba      	ldr	r2, [r7, #24]
 8014b2c:	693b      	ldr	r3, [r7, #16]
 8014b2e:	429a      	cmp	r2, r3
 8014b30:	d3e2      	bcc.n	8014af8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8014b32:	2300      	movs	r3, #0
}
 8014b34:	4618      	mov	r0, r3
 8014b36:	3724      	adds	r7, #36	; 0x24
 8014b38:	46bd      	mov	sp, r7
 8014b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b3e:	4770      	bx	lr

08014b40 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8014b40:	b480      	push	{r7}
 8014b42:	b08b      	sub	sp, #44	; 0x2c
 8014b44:	af00      	add	r7, sp, #0
 8014b46:	60f8      	str	r0, [r7, #12]
 8014b48:	60b9      	str	r1, [r7, #8]
 8014b4a:	4613      	mov	r3, r2
 8014b4c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8014b52:	68bb      	ldr	r3, [r7, #8]
 8014b54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8014b56:	88fb      	ldrh	r3, [r7, #6]
 8014b58:	089b      	lsrs	r3, r3, #2
 8014b5a:	b29b      	uxth	r3, r3
 8014b5c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8014b5e:	88fb      	ldrh	r3, [r7, #6]
 8014b60:	f003 0303 	and.w	r3, r3, #3
 8014b64:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8014b66:	2300      	movs	r3, #0
 8014b68:	623b      	str	r3, [r7, #32]
 8014b6a:	e014      	b.n	8014b96 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014b6c:	69bb      	ldr	r3, [r7, #24]
 8014b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014b72:	681a      	ldr	r2, [r3, #0]
 8014b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b76:	601a      	str	r2, [r3, #0]
    pDest++;
 8014b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b7a:	3301      	adds	r3, #1
 8014b7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b80:	3301      	adds	r3, #1
 8014b82:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b86:	3301      	adds	r3, #1
 8014b88:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b8c:	3301      	adds	r3, #1
 8014b8e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8014b90:	6a3b      	ldr	r3, [r7, #32]
 8014b92:	3301      	adds	r3, #1
 8014b94:	623b      	str	r3, [r7, #32]
 8014b96:	6a3a      	ldr	r2, [r7, #32]
 8014b98:	697b      	ldr	r3, [r7, #20]
 8014b9a:	429a      	cmp	r2, r3
 8014b9c:	d3e6      	bcc.n	8014b6c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8014b9e:	8bfb      	ldrh	r3, [r7, #30]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d01e      	beq.n	8014be2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8014ba4:	2300      	movs	r3, #0
 8014ba6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014ba8:	69bb      	ldr	r3, [r7, #24]
 8014baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014bae:	461a      	mov	r2, r3
 8014bb0:	f107 0310 	add.w	r3, r7, #16
 8014bb4:	6812      	ldr	r2, [r2, #0]
 8014bb6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8014bb8:	693a      	ldr	r2, [r7, #16]
 8014bba:	6a3b      	ldr	r3, [r7, #32]
 8014bbc:	b2db      	uxtb	r3, r3
 8014bbe:	00db      	lsls	r3, r3, #3
 8014bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8014bc4:	b2da      	uxtb	r2, r3
 8014bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bc8:	701a      	strb	r2, [r3, #0]
      i++;
 8014bca:	6a3b      	ldr	r3, [r7, #32]
 8014bcc:	3301      	adds	r3, #1
 8014bce:	623b      	str	r3, [r7, #32]
      pDest++;
 8014bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bd2:	3301      	adds	r3, #1
 8014bd4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8014bd6:	8bfb      	ldrh	r3, [r7, #30]
 8014bd8:	3b01      	subs	r3, #1
 8014bda:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8014bdc:	8bfb      	ldrh	r3, [r7, #30]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d1ea      	bne.n	8014bb8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8014be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014be4:	4618      	mov	r0, r3
 8014be6:	372c      	adds	r7, #44	; 0x2c
 8014be8:	46bd      	mov	sp, r7
 8014bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bee:	4770      	bx	lr

08014bf0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014bf0:	b480      	push	{r7}
 8014bf2:	b085      	sub	sp, #20
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	6078      	str	r0, [r7, #4]
 8014bf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014bfe:	683b      	ldr	r3, [r7, #0]
 8014c00:	781b      	ldrb	r3, [r3, #0]
 8014c02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014c04:	683b      	ldr	r3, [r7, #0]
 8014c06:	785b      	ldrb	r3, [r3, #1]
 8014c08:	2b01      	cmp	r3, #1
 8014c0a:	d12c      	bne.n	8014c66 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014c0c:	68bb      	ldr	r3, [r7, #8]
 8014c0e:	015a      	lsls	r2, r3, #5
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	4413      	add	r3, r2
 8014c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	db12      	blt.n	8014c44 <USB_EPSetStall+0x54>
 8014c1e:	68bb      	ldr	r3, [r7, #8]
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d00f      	beq.n	8014c44 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8014c24:	68bb      	ldr	r3, [r7, #8]
 8014c26:	015a      	lsls	r2, r3, #5
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	4413      	add	r3, r2
 8014c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	68ba      	ldr	r2, [r7, #8]
 8014c34:	0151      	lsls	r1, r2, #5
 8014c36:	68fa      	ldr	r2, [r7, #12]
 8014c38:	440a      	add	r2, r1
 8014c3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014c3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014c42:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8014c44:	68bb      	ldr	r3, [r7, #8]
 8014c46:	015a      	lsls	r2, r3, #5
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	4413      	add	r3, r2
 8014c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	68ba      	ldr	r2, [r7, #8]
 8014c54:	0151      	lsls	r1, r2, #5
 8014c56:	68fa      	ldr	r2, [r7, #12]
 8014c58:	440a      	add	r2, r1
 8014c5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014c5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014c62:	6013      	str	r3, [r2, #0]
 8014c64:	e02b      	b.n	8014cbe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014c66:	68bb      	ldr	r3, [r7, #8]
 8014c68:	015a      	lsls	r2, r3, #5
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	4413      	add	r3, r2
 8014c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	db12      	blt.n	8014c9e <USB_EPSetStall+0xae>
 8014c78:	68bb      	ldr	r3, [r7, #8]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d00f      	beq.n	8014c9e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8014c7e:	68bb      	ldr	r3, [r7, #8]
 8014c80:	015a      	lsls	r2, r3, #5
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	4413      	add	r3, r2
 8014c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	68ba      	ldr	r2, [r7, #8]
 8014c8e:	0151      	lsls	r1, r2, #5
 8014c90:	68fa      	ldr	r2, [r7, #12]
 8014c92:	440a      	add	r2, r1
 8014c94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014c98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014c9c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8014c9e:	68bb      	ldr	r3, [r7, #8]
 8014ca0:	015a      	lsls	r2, r3, #5
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	4413      	add	r3, r2
 8014ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	68ba      	ldr	r2, [r7, #8]
 8014cae:	0151      	lsls	r1, r2, #5
 8014cb0:	68fa      	ldr	r2, [r7, #12]
 8014cb2:	440a      	add	r2, r1
 8014cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014cb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014cbc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014cbe:	2300      	movs	r3, #0
}
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	3714      	adds	r7, #20
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cca:	4770      	bx	lr

08014ccc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014ccc:	b480      	push	{r7}
 8014cce:	b085      	sub	sp, #20
 8014cd0:	af00      	add	r7, sp, #0
 8014cd2:	6078      	str	r0, [r7, #4]
 8014cd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014cda:	683b      	ldr	r3, [r7, #0]
 8014cdc:	781b      	ldrb	r3, [r3, #0]
 8014cde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014ce0:	683b      	ldr	r3, [r7, #0]
 8014ce2:	785b      	ldrb	r3, [r3, #1]
 8014ce4:	2b01      	cmp	r3, #1
 8014ce6:	d128      	bne.n	8014d3a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014ce8:	68bb      	ldr	r3, [r7, #8]
 8014cea:	015a      	lsls	r2, r3, #5
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	4413      	add	r3, r2
 8014cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	68ba      	ldr	r2, [r7, #8]
 8014cf8:	0151      	lsls	r1, r2, #5
 8014cfa:	68fa      	ldr	r2, [r7, #12]
 8014cfc:	440a      	add	r2, r1
 8014cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014d02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014d06:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014d08:	683b      	ldr	r3, [r7, #0]
 8014d0a:	791b      	ldrb	r3, [r3, #4]
 8014d0c:	2b03      	cmp	r3, #3
 8014d0e:	d003      	beq.n	8014d18 <USB_EPClearStall+0x4c>
 8014d10:	683b      	ldr	r3, [r7, #0]
 8014d12:	791b      	ldrb	r3, [r3, #4]
 8014d14:	2b02      	cmp	r3, #2
 8014d16:	d138      	bne.n	8014d8a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014d18:	68bb      	ldr	r3, [r7, #8]
 8014d1a:	015a      	lsls	r2, r3, #5
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	4413      	add	r3, r2
 8014d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	68ba      	ldr	r2, [r7, #8]
 8014d28:	0151      	lsls	r1, r2, #5
 8014d2a:	68fa      	ldr	r2, [r7, #12]
 8014d2c:	440a      	add	r2, r1
 8014d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014d36:	6013      	str	r3, [r2, #0]
 8014d38:	e027      	b.n	8014d8a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8014d3a:	68bb      	ldr	r3, [r7, #8]
 8014d3c:	015a      	lsls	r2, r3, #5
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	4413      	add	r3, r2
 8014d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	68ba      	ldr	r2, [r7, #8]
 8014d4a:	0151      	lsls	r1, r2, #5
 8014d4c:	68fa      	ldr	r2, [r7, #12]
 8014d4e:	440a      	add	r2, r1
 8014d50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014d54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014d58:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014d5a:	683b      	ldr	r3, [r7, #0]
 8014d5c:	791b      	ldrb	r3, [r3, #4]
 8014d5e:	2b03      	cmp	r3, #3
 8014d60:	d003      	beq.n	8014d6a <USB_EPClearStall+0x9e>
 8014d62:	683b      	ldr	r3, [r7, #0]
 8014d64:	791b      	ldrb	r3, [r3, #4]
 8014d66:	2b02      	cmp	r3, #2
 8014d68:	d10f      	bne.n	8014d8a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014d6a:	68bb      	ldr	r3, [r7, #8]
 8014d6c:	015a      	lsls	r2, r3, #5
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	4413      	add	r3, r2
 8014d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	68ba      	ldr	r2, [r7, #8]
 8014d7a:	0151      	lsls	r1, r2, #5
 8014d7c:	68fa      	ldr	r2, [r7, #12]
 8014d7e:	440a      	add	r2, r1
 8014d80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014d88:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8014d8a:	2300      	movs	r3, #0
}
 8014d8c:	4618      	mov	r0, r3
 8014d8e:	3714      	adds	r7, #20
 8014d90:	46bd      	mov	sp, r7
 8014d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d96:	4770      	bx	lr

08014d98 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8014d98:	b480      	push	{r7}
 8014d9a:	b085      	sub	sp, #20
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	6078      	str	r0, [r7, #4]
 8014da0:	460b      	mov	r3, r1
 8014da2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	68fa      	ldr	r2, [r7, #12]
 8014db2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014db6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8014dba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014dc2:	681a      	ldr	r2, [r3, #0]
 8014dc4:	78fb      	ldrb	r3, [r7, #3]
 8014dc6:	011b      	lsls	r3, r3, #4
 8014dc8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8014dcc:	68f9      	ldr	r1, [r7, #12]
 8014dce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014dd2:	4313      	orrs	r3, r2
 8014dd4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8014dd6:	2300      	movs	r3, #0
}
 8014dd8:	4618      	mov	r0, r3
 8014dda:	3714      	adds	r7, #20
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de2:	4770      	bx	lr

08014de4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014de4:	b480      	push	{r7}
 8014de6:	b085      	sub	sp, #20
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	68fa      	ldr	r2, [r7, #12]
 8014dfa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014dfe:	f023 0303 	bic.w	r3, r3, #3
 8014e02:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e0a:	685b      	ldr	r3, [r3, #4]
 8014e0c:	68fa      	ldr	r2, [r7, #12]
 8014e0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014e12:	f023 0302 	bic.w	r3, r3, #2
 8014e16:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014e18:	2300      	movs	r3, #0
}
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	3714      	adds	r7, #20
 8014e1e:	46bd      	mov	sp, r7
 8014e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e24:	4770      	bx	lr

08014e26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014e26:	b480      	push	{r7}
 8014e28:	b085      	sub	sp, #20
 8014e2a:	af00      	add	r7, sp, #0
 8014e2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	68fa      	ldr	r2, [r7, #12]
 8014e3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014e40:	f023 0303 	bic.w	r3, r3, #3
 8014e44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e4c:	685b      	ldr	r3, [r3, #4]
 8014e4e:	68fa      	ldr	r2, [r7, #12]
 8014e50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014e54:	f043 0302 	orr.w	r3, r3, #2
 8014e58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014e5a:	2300      	movs	r3, #0
}
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	3714      	adds	r7, #20
 8014e60:	46bd      	mov	sp, r7
 8014e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e66:	4770      	bx	lr

08014e68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8014e68:	b480      	push	{r7}
 8014e6a:	b085      	sub	sp, #20
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	695b      	ldr	r3, [r3, #20]
 8014e74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	699b      	ldr	r3, [r3, #24]
 8014e7a:	68fa      	ldr	r2, [r7, #12]
 8014e7c:	4013      	ands	r3, r2
 8014e7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014e80:	68fb      	ldr	r3, [r7, #12]
}
 8014e82:	4618      	mov	r0, r3
 8014e84:	3714      	adds	r7, #20
 8014e86:	46bd      	mov	sp, r7
 8014e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e8c:	4770      	bx	lr

08014e8e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014e8e:	b480      	push	{r7}
 8014e90:	b085      	sub	sp, #20
 8014e92:	af00      	add	r7, sp, #0
 8014e94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014e9a:	68fb      	ldr	r3, [r7, #12]
 8014e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014ea0:	699b      	ldr	r3, [r3, #24]
 8014ea2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014eaa:	69db      	ldr	r3, [r3, #28]
 8014eac:	68ba      	ldr	r2, [r7, #8]
 8014eae:	4013      	ands	r3, r2
 8014eb0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8014eb2:	68bb      	ldr	r3, [r7, #8]
 8014eb4:	0c1b      	lsrs	r3, r3, #16
}
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	3714      	adds	r7, #20
 8014eba:	46bd      	mov	sp, r7
 8014ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ec0:	4770      	bx	lr

08014ec2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014ec2:	b480      	push	{r7}
 8014ec4:	b085      	sub	sp, #20
 8014ec6:	af00      	add	r7, sp, #0
 8014ec8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014ed4:	699b      	ldr	r3, [r3, #24]
 8014ed6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014ede:	69db      	ldr	r3, [r3, #28]
 8014ee0:	68ba      	ldr	r2, [r7, #8]
 8014ee2:	4013      	ands	r3, r2
 8014ee4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014ee6:	68bb      	ldr	r3, [r7, #8]
 8014ee8:	b29b      	uxth	r3, r3
}
 8014eea:	4618      	mov	r0, r3
 8014eec:	3714      	adds	r7, #20
 8014eee:	46bd      	mov	sp, r7
 8014ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef4:	4770      	bx	lr

08014ef6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014ef6:	b480      	push	{r7}
 8014ef8:	b085      	sub	sp, #20
 8014efa:	af00      	add	r7, sp, #0
 8014efc:	6078      	str	r0, [r7, #4]
 8014efe:	460b      	mov	r3, r1
 8014f00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014f06:	78fb      	ldrb	r3, [r7, #3]
 8014f08:	015a      	lsls	r2, r3, #5
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	4413      	add	r3, r2
 8014f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014f12:	689b      	ldr	r3, [r3, #8]
 8014f14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014f1c:	695b      	ldr	r3, [r3, #20]
 8014f1e:	68ba      	ldr	r2, [r7, #8]
 8014f20:	4013      	ands	r3, r2
 8014f22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014f24:	68bb      	ldr	r3, [r7, #8]
}
 8014f26:	4618      	mov	r0, r3
 8014f28:	3714      	adds	r7, #20
 8014f2a:	46bd      	mov	sp, r7
 8014f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f30:	4770      	bx	lr

08014f32 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014f32:	b480      	push	{r7}
 8014f34:	b087      	sub	sp, #28
 8014f36:	af00      	add	r7, sp, #0
 8014f38:	6078      	str	r0, [r7, #4]
 8014f3a:	460b      	mov	r3, r1
 8014f3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8014f42:	697b      	ldr	r3, [r7, #20]
 8014f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014f48:	691b      	ldr	r3, [r3, #16]
 8014f4a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014f4c:	697b      	ldr	r3, [r7, #20]
 8014f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f54:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014f56:	78fb      	ldrb	r3, [r7, #3]
 8014f58:	f003 030f 	and.w	r3, r3, #15
 8014f5c:	68fa      	ldr	r2, [r7, #12]
 8014f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8014f62:	01db      	lsls	r3, r3, #7
 8014f64:	b2db      	uxtb	r3, r3
 8014f66:	693a      	ldr	r2, [r7, #16]
 8014f68:	4313      	orrs	r3, r2
 8014f6a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014f6c:	78fb      	ldrb	r3, [r7, #3]
 8014f6e:	015a      	lsls	r2, r3, #5
 8014f70:	697b      	ldr	r3, [r7, #20]
 8014f72:	4413      	add	r3, r2
 8014f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014f78:	689b      	ldr	r3, [r3, #8]
 8014f7a:	693a      	ldr	r2, [r7, #16]
 8014f7c:	4013      	ands	r3, r2
 8014f7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014f80:	68bb      	ldr	r3, [r7, #8]
}
 8014f82:	4618      	mov	r0, r3
 8014f84:	371c      	adds	r7, #28
 8014f86:	46bd      	mov	sp, r7
 8014f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f8c:	4770      	bx	lr

08014f8e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8014f8e:	b480      	push	{r7}
 8014f90:	b083      	sub	sp, #12
 8014f92:	af00      	add	r7, sp, #0
 8014f94:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	695b      	ldr	r3, [r3, #20]
 8014f9a:	f003 0301 	and.w	r3, r3, #1
}
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	370c      	adds	r7, #12
 8014fa2:	46bd      	mov	sp, r7
 8014fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa8:	4770      	bx	lr
	...

08014fac <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014fac:	b480      	push	{r7}
 8014fae:	b085      	sub	sp, #20
 8014fb0:	af00      	add	r7, sp, #0
 8014fb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014fbe:	681a      	ldr	r2, [r3, #0]
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014fc6:	4619      	mov	r1, r3
 8014fc8:	4b09      	ldr	r3, [pc, #36]	; (8014ff0 <USB_ActivateSetup+0x44>)
 8014fca:	4013      	ands	r3, r2
 8014fcc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014fd4:	685b      	ldr	r3, [r3, #4]
 8014fd6:	68fa      	ldr	r2, [r7, #12]
 8014fd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014fe0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014fe2:	2300      	movs	r3, #0
}
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	3714      	adds	r7, #20
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fee:	4770      	bx	lr
 8014ff0:	fffff800 	.word	0xfffff800

08014ff4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014ff4:	b480      	push	{r7}
 8014ff6:	b087      	sub	sp, #28
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	60f8      	str	r0, [r7, #12]
 8014ffc:	460b      	mov	r3, r1
 8014ffe:	607a      	str	r2, [r7, #4]
 8015000:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	333c      	adds	r3, #60	; 0x3c
 801500a:	3304      	adds	r3, #4
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8015010:	693b      	ldr	r3, [r7, #16]
 8015012:	4a26      	ldr	r2, [pc, #152]	; (80150ac <USB_EP0_OutStart+0xb8>)
 8015014:	4293      	cmp	r3, r2
 8015016:	d90a      	bls.n	801502e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015018:	697b      	ldr	r3, [r7, #20]
 801501a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015024:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015028:	d101      	bne.n	801502e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801502a:	2300      	movs	r3, #0
 801502c:	e037      	b.n	801509e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801502e:	697b      	ldr	r3, [r7, #20]
 8015030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015034:	461a      	mov	r2, r3
 8015036:	2300      	movs	r3, #0
 8015038:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801503a:	697b      	ldr	r3, [r7, #20]
 801503c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015040:	691b      	ldr	r3, [r3, #16]
 8015042:	697a      	ldr	r2, [r7, #20]
 8015044:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015048:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801504c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801504e:	697b      	ldr	r3, [r7, #20]
 8015050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015054:	691b      	ldr	r3, [r3, #16]
 8015056:	697a      	ldr	r2, [r7, #20]
 8015058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801505c:	f043 0318 	orr.w	r3, r3, #24
 8015060:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8015062:	697b      	ldr	r3, [r7, #20]
 8015064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015068:	691b      	ldr	r3, [r3, #16]
 801506a:	697a      	ldr	r2, [r7, #20]
 801506c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015070:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8015074:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8015076:	7afb      	ldrb	r3, [r7, #11]
 8015078:	2b01      	cmp	r3, #1
 801507a:	d10f      	bne.n	801509c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801507c:	697b      	ldr	r3, [r7, #20]
 801507e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015082:	461a      	mov	r2, r3
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8015088:	697b      	ldr	r3, [r7, #20]
 801508a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	697a      	ldr	r2, [r7, #20]
 8015092:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015096:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801509a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801509c:	2300      	movs	r3, #0
}
 801509e:	4618      	mov	r0, r3
 80150a0:	371c      	adds	r7, #28
 80150a2:	46bd      	mov	sp, r7
 80150a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a8:	4770      	bx	lr
 80150aa:	bf00      	nop
 80150ac:	4f54300a 	.word	0x4f54300a

080150b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80150b0:	b480      	push	{r7}
 80150b2:	b085      	sub	sp, #20
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80150b8:	2300      	movs	r3, #0
 80150ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	3301      	adds	r3, #1
 80150c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	4a13      	ldr	r2, [pc, #76]	; (8015114 <USB_CoreReset+0x64>)
 80150c6:	4293      	cmp	r3, r2
 80150c8:	d901      	bls.n	80150ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80150ca:	2303      	movs	r3, #3
 80150cc:	e01b      	b.n	8015106 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	691b      	ldr	r3, [r3, #16]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	daf2      	bge.n	80150bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80150d6:	2300      	movs	r3, #0
 80150d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	691b      	ldr	r3, [r3, #16]
 80150de:	f043 0201 	orr.w	r2, r3, #1
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	3301      	adds	r3, #1
 80150ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	4a09      	ldr	r2, [pc, #36]	; (8015114 <USB_CoreReset+0x64>)
 80150f0:	4293      	cmp	r3, r2
 80150f2:	d901      	bls.n	80150f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80150f4:	2303      	movs	r3, #3
 80150f6:	e006      	b.n	8015106 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	691b      	ldr	r3, [r3, #16]
 80150fc:	f003 0301 	and.w	r3, r3, #1
 8015100:	2b01      	cmp	r3, #1
 8015102:	d0f0      	beq.n	80150e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8015104:	2300      	movs	r3, #0
}
 8015106:	4618      	mov	r0, r3
 8015108:	3714      	adds	r7, #20
 801510a:	46bd      	mov	sp, r7
 801510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015110:	4770      	bx	lr
 8015112:	bf00      	nop
 8015114:	00030d40 	.word	0x00030d40

08015118 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8015118:	b580      	push	{r7, lr}
 801511a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801511c:	4904      	ldr	r1, [pc, #16]	; (8015130 <MX_FATFS_Init+0x18>)
 801511e:	4805      	ldr	r0, [pc, #20]	; (8015134 <MX_FATFS_Init+0x1c>)
 8015120:	f005 f904 	bl	801a32c <FATFS_LinkDriver>
 8015124:	4603      	mov	r3, r0
 8015126:	461a      	mov	r2, r3
 8015128:	4b03      	ldr	r3, [pc, #12]	; (8015138 <MX_FATFS_Init+0x20>)
 801512a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801512c:	bf00      	nop
 801512e:	bd80      	pop	{r7, pc}
 8015130:	24001698 	.word	0x24001698
 8015134:	08020080 	.word	0x08020080
 8015138:	24001694 	.word	0x24001694

0801513c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801513c:	b480      	push	{r7}
 801513e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8015140:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8015142:	4618      	mov	r0, r3
 8015144:	46bd      	mov	sp, r7
 8015146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801514a:	4770      	bx	lr

0801514c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801514c:	b580      	push	{r7, lr}
 801514e:	b082      	sub	sp, #8
 8015150:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8015152:	2300      	movs	r3, #0
 8015154:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8015156:	f000 f885 	bl	8015264 <BSP_SD_IsDetected>
 801515a:	4603      	mov	r3, r0
 801515c:	2b01      	cmp	r3, #1
 801515e:	d001      	beq.n	8015164 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8015160:	2302      	movs	r3, #2
 8015162:	e012      	b.n	801518a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8015164:	480b      	ldr	r0, [pc, #44]	; (8015194 <BSP_SD_Init+0x48>)
 8015166:	f7f8 ff39 	bl	800dfdc <HAL_SD_Init>
 801516a:	4603      	mov	r3, r0
 801516c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801516e:	79fb      	ldrb	r3, [r7, #7]
 8015170:	2b00      	cmp	r3, #0
 8015172:	d109      	bne.n	8015188 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8015174:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8015178:	4806      	ldr	r0, [pc, #24]	; (8015194 <BSP_SD_Init+0x48>)
 801517a:	f7f9 fdef 	bl	800ed5c <HAL_SD_ConfigWideBusOperation>
 801517e:	4603      	mov	r3, r0
 8015180:	2b00      	cmp	r3, #0
 8015182:	d001      	beq.n	8015188 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8015184:	2301      	movs	r3, #1
 8015186:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8015188:	79fb      	ldrb	r3, [r7, #7]
}
 801518a:	4618      	mov	r0, r3
 801518c:	3708      	adds	r7, #8
 801518e:	46bd      	mov	sp, r7
 8015190:	bd80      	pop	{r7, pc}
 8015192:	bf00      	nop
 8015194:	24000f30 	.word	0x24000f30

08015198 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8015198:	b580      	push	{r7, lr}
 801519a:	b086      	sub	sp, #24
 801519c:	af00      	add	r7, sp, #0
 801519e:	60f8      	str	r0, [r7, #12]
 80151a0:	60b9      	str	r1, [r7, #8]
 80151a2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80151a4:	2300      	movs	r3, #0
 80151a6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	68ba      	ldr	r2, [r7, #8]
 80151ac:	68f9      	ldr	r1, [r7, #12]
 80151ae:	4806      	ldr	r0, [pc, #24]	; (80151c8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80151b0:	f7f9 f834 	bl	800e21c <HAL_SD_ReadBlocks_DMA>
 80151b4:	4603      	mov	r3, r0
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d001      	beq.n	80151be <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80151ba:	2301      	movs	r3, #1
 80151bc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80151be:	7dfb      	ldrb	r3, [r7, #23]
}
 80151c0:	4618      	mov	r0, r3
 80151c2:	3718      	adds	r7, #24
 80151c4:	46bd      	mov	sp, r7
 80151c6:	bd80      	pop	{r7, pc}
 80151c8:	24000f30 	.word	0x24000f30

080151cc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80151cc:	b580      	push	{r7, lr}
 80151ce:	b086      	sub	sp, #24
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	60f8      	str	r0, [r7, #12]
 80151d4:	60b9      	str	r1, [r7, #8]
 80151d6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80151d8:	2300      	movs	r3, #0
 80151da:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	68ba      	ldr	r2, [r7, #8]
 80151e0:	68f9      	ldr	r1, [r7, #12]
 80151e2:	4806      	ldr	r0, [pc, #24]	; (80151fc <BSP_SD_WriteBlocks_DMA+0x30>)
 80151e4:	f7f9 f8c2 	bl	800e36c <HAL_SD_WriteBlocks_DMA>
 80151e8:	4603      	mov	r3, r0
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d001      	beq.n	80151f2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80151ee:	2301      	movs	r3, #1
 80151f0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80151f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80151f4:	4618      	mov	r0, r3
 80151f6:	3718      	adds	r7, #24
 80151f8:	46bd      	mov	sp, r7
 80151fa:	bd80      	pop	{r7, pc}
 80151fc:	24000f30 	.word	0x24000f30

08015200 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8015200:	b580      	push	{r7, lr}
 8015202:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8015204:	4805      	ldr	r0, [pc, #20]	; (801521c <BSP_SD_GetCardState+0x1c>)
 8015206:	f7f9 febb 	bl	800ef80 <HAL_SD_GetCardState>
 801520a:	4603      	mov	r3, r0
 801520c:	2b04      	cmp	r3, #4
 801520e:	bf14      	ite	ne
 8015210:	2301      	movne	r3, #1
 8015212:	2300      	moveq	r3, #0
 8015214:	b2db      	uxtb	r3, r3
}
 8015216:	4618      	mov	r0, r3
 8015218:	bd80      	pop	{r7, pc}
 801521a:	bf00      	nop
 801521c:	24000f30 	.word	0x24000f30

08015220 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8015220:	b580      	push	{r7, lr}
 8015222:	b082      	sub	sp, #8
 8015224:	af00      	add	r7, sp, #0
 8015226:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8015228:	6879      	ldr	r1, [r7, #4]
 801522a:	4803      	ldr	r0, [pc, #12]	; (8015238 <BSP_SD_GetCardInfo+0x18>)
 801522c:	f7f9 fd6a 	bl	800ed04 <HAL_SD_GetCardInfo>
}
 8015230:	bf00      	nop
 8015232:	3708      	adds	r7, #8
 8015234:	46bd      	mov	sp, r7
 8015236:	bd80      	pop	{r7, pc}
 8015238:	24000f30 	.word	0x24000f30

0801523c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801523c:	b580      	push	{r7, lr}
 801523e:	b082      	sub	sp, #8
 8015240:	af00      	add	r7, sp, #0
 8015242:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8015244:	f000 f984 	bl	8015550 <BSP_SD_WriteCpltCallback>
}
 8015248:	bf00      	nop
 801524a:	3708      	adds	r7, #8
 801524c:	46bd      	mov	sp, r7
 801524e:	bd80      	pop	{r7, pc}

08015250 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8015250:	b580      	push	{r7, lr}
 8015252:	b082      	sub	sp, #8
 8015254:	af00      	add	r7, sp, #0
 8015256:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8015258:	f000 f986 	bl	8015568 <BSP_SD_ReadCpltCallback>
}
 801525c:	bf00      	nop
 801525e:	3708      	adds	r7, #8
 8015260:	46bd      	mov	sp, r7
 8015262:	bd80      	pop	{r7, pc}

08015264 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8015264:	b480      	push	{r7}
 8015266:	b083      	sub	sp, #12
 8015268:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801526a:	2301      	movs	r3, #1
 801526c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 801526e:	79fb      	ldrb	r3, [r7, #7]
 8015270:	b2db      	uxtb	r3, r3
}
 8015272:	4618      	mov	r0, r3
 8015274:	370c      	adds	r7, #12
 8015276:	46bd      	mov	sp, r7
 8015278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801527c:	4770      	bx	lr

0801527e <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801527e:	b580      	push	{r7, lr}
 8015280:	b084      	sub	sp, #16
 8015282:	af00      	add	r7, sp, #0
 8015284:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8015286:	f7ee ff8b 	bl	80041a0 <HAL_GetTick>
 801528a:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801528c:	e006      	b.n	801529c <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801528e:	f7ff ffb7 	bl	8015200 <BSP_SD_GetCardState>
 8015292:	4603      	mov	r3, r0
 8015294:	2b00      	cmp	r3, #0
 8015296:	d101      	bne.n	801529c <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8015298:	2300      	movs	r3, #0
 801529a:	e009      	b.n	80152b0 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801529c:	f7ee ff80 	bl	80041a0 <HAL_GetTick>
 80152a0:	4602      	mov	r2, r0
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	1ad3      	subs	r3, r2, r3
 80152a6:	687a      	ldr	r2, [r7, #4]
 80152a8:	429a      	cmp	r2, r3
 80152aa:	d8f0      	bhi.n	801528e <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80152ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80152b0:	4618      	mov	r0, r3
 80152b2:	3710      	adds	r7, #16
 80152b4:	46bd      	mov	sp, r7
 80152b6:	bd80      	pop	{r7, pc}

080152b8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80152b8:	b580      	push	{r7, lr}
 80152ba:	b082      	sub	sp, #8
 80152bc:	af00      	add	r7, sp, #0
 80152be:	4603      	mov	r3, r0
 80152c0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80152c2:	4b0b      	ldr	r3, [pc, #44]	; (80152f0 <SD_CheckStatus+0x38>)
 80152c4:	2201      	movs	r2, #1
 80152c6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80152c8:	f7ff ff9a 	bl	8015200 <BSP_SD_GetCardState>
 80152cc:	4603      	mov	r3, r0
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d107      	bne.n	80152e2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80152d2:	4b07      	ldr	r3, [pc, #28]	; (80152f0 <SD_CheckStatus+0x38>)
 80152d4:	781b      	ldrb	r3, [r3, #0]
 80152d6:	b2db      	uxtb	r3, r3
 80152d8:	f023 0301 	bic.w	r3, r3, #1
 80152dc:	b2da      	uxtb	r2, r3
 80152de:	4b04      	ldr	r3, [pc, #16]	; (80152f0 <SD_CheckStatus+0x38>)
 80152e0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80152e2:	4b03      	ldr	r3, [pc, #12]	; (80152f0 <SD_CheckStatus+0x38>)
 80152e4:	781b      	ldrb	r3, [r3, #0]
 80152e6:	b2db      	uxtb	r3, r3
}
 80152e8:	4618      	mov	r0, r3
 80152ea:	3708      	adds	r7, #8
 80152ec:	46bd      	mov	sp, r7
 80152ee:	bd80      	pop	{r7, pc}
 80152f0:	2400000d 	.word	0x2400000d

080152f4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b082      	sub	sp, #8
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	4603      	mov	r3, r0
 80152fc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80152fe:	f7ff ff25 	bl	801514c <BSP_SD_Init>
 8015302:	4603      	mov	r3, r0
 8015304:	2b00      	cmp	r3, #0
 8015306:	d107      	bne.n	8015318 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8015308:	79fb      	ldrb	r3, [r7, #7]
 801530a:	4618      	mov	r0, r3
 801530c:	f7ff ffd4 	bl	80152b8 <SD_CheckStatus>
 8015310:	4603      	mov	r3, r0
 8015312:	461a      	mov	r2, r3
 8015314:	4b04      	ldr	r3, [pc, #16]	; (8015328 <SD_initialize+0x34>)
 8015316:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8015318:	4b03      	ldr	r3, [pc, #12]	; (8015328 <SD_initialize+0x34>)
 801531a:	781b      	ldrb	r3, [r3, #0]
 801531c:	b2db      	uxtb	r3, r3
}
 801531e:	4618      	mov	r0, r3
 8015320:	3708      	adds	r7, #8
 8015322:	46bd      	mov	sp, r7
 8015324:	bd80      	pop	{r7, pc}
 8015326:	bf00      	nop
 8015328:	2400000d 	.word	0x2400000d

0801532c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801532c:	b580      	push	{r7, lr}
 801532e:	b082      	sub	sp, #8
 8015330:	af00      	add	r7, sp, #0
 8015332:	4603      	mov	r3, r0
 8015334:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8015336:	79fb      	ldrb	r3, [r7, #7]
 8015338:	4618      	mov	r0, r3
 801533a:	f7ff ffbd 	bl	80152b8 <SD_CheckStatus>
 801533e:	4603      	mov	r3, r0
}
 8015340:	4618      	mov	r0, r3
 8015342:	3708      	adds	r7, #8
 8015344:	46bd      	mov	sp, r7
 8015346:	bd80      	pop	{r7, pc}

08015348 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8015348:	b580      	push	{r7, lr}
 801534a:	b086      	sub	sp, #24
 801534c:	af00      	add	r7, sp, #0
 801534e:	60b9      	str	r1, [r7, #8]
 8015350:	607a      	str	r2, [r7, #4]
 8015352:	603b      	str	r3, [r7, #0]
 8015354:	4603      	mov	r3, r0
 8015356:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8015358:	2301      	movs	r3, #1
 801535a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801535c:	f247 5030 	movw	r0, #30000	; 0x7530
 8015360:	f7ff ff8d 	bl	801527e <SD_CheckStatusWithTimeout>
 8015364:	4603      	mov	r3, r0
 8015366:	2b00      	cmp	r3, #0
 8015368:	da01      	bge.n	801536e <SD_read+0x26>
  {
    return res;
 801536a:	7dfb      	ldrb	r3, [r7, #23]
 801536c:	e03b      	b.n	80153e6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801536e:	683a      	ldr	r2, [r7, #0]
 8015370:	6879      	ldr	r1, [r7, #4]
 8015372:	68b8      	ldr	r0, [r7, #8]
 8015374:	f7ff ff10 	bl	8015198 <BSP_SD_ReadBlocks_DMA>
 8015378:	4603      	mov	r3, r0
 801537a:	2b00      	cmp	r3, #0
 801537c:	d132      	bne.n	80153e4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801537e:	4b1c      	ldr	r3, [pc, #112]	; (80153f0 <SD_read+0xa8>)
 8015380:	2200      	movs	r2, #0
 8015382:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8015384:	f7ee ff0c 	bl	80041a0 <HAL_GetTick>
 8015388:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801538a:	bf00      	nop
 801538c:	4b18      	ldr	r3, [pc, #96]	; (80153f0 <SD_read+0xa8>)
 801538e:	681b      	ldr	r3, [r3, #0]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d108      	bne.n	80153a6 <SD_read+0x5e>
 8015394:	f7ee ff04 	bl	80041a0 <HAL_GetTick>
 8015398:	4602      	mov	r2, r0
 801539a:	693b      	ldr	r3, [r7, #16]
 801539c:	1ad3      	subs	r3, r2, r3
 801539e:	f247 522f 	movw	r2, #29999	; 0x752f
 80153a2:	4293      	cmp	r3, r2
 80153a4:	d9f2      	bls.n	801538c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80153a6:	4b12      	ldr	r3, [pc, #72]	; (80153f0 <SD_read+0xa8>)
 80153a8:	681b      	ldr	r3, [r3, #0]
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d102      	bne.n	80153b4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80153ae:	2301      	movs	r3, #1
 80153b0:	75fb      	strb	r3, [r7, #23]
 80153b2:	e017      	b.n	80153e4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80153b4:	4b0e      	ldr	r3, [pc, #56]	; (80153f0 <SD_read+0xa8>)
 80153b6:	2200      	movs	r2, #0
 80153b8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80153ba:	f7ee fef1 	bl	80041a0 <HAL_GetTick>
 80153be:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80153c0:	e007      	b.n	80153d2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80153c2:	f7ff ff1d 	bl	8015200 <BSP_SD_GetCardState>
 80153c6:	4603      	mov	r3, r0
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d102      	bne.n	80153d2 <SD_read+0x8a>
          {
            res = RES_OK;
 80153cc:	2300      	movs	r3, #0
 80153ce:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80153d0:	e008      	b.n	80153e4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80153d2:	f7ee fee5 	bl	80041a0 <HAL_GetTick>
 80153d6:	4602      	mov	r2, r0
 80153d8:	693b      	ldr	r3, [r7, #16]
 80153da:	1ad3      	subs	r3, r2, r3
 80153dc:	f247 522f 	movw	r2, #29999	; 0x752f
 80153e0:	4293      	cmp	r3, r2
 80153e2:	d9ee      	bls.n	80153c2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80153e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80153e6:	4618      	mov	r0, r3
 80153e8:	3718      	adds	r7, #24
 80153ea:	46bd      	mov	sp, r7
 80153ec:	bd80      	pop	{r7, pc}
 80153ee:	bf00      	nop
 80153f0:	240016a0 	.word	0x240016a0

080153f4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80153f4:	b580      	push	{r7, lr}
 80153f6:	b086      	sub	sp, #24
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	60b9      	str	r1, [r7, #8]
 80153fc:	607a      	str	r2, [r7, #4]
 80153fe:	603b      	str	r3, [r7, #0]
 8015400:	4603      	mov	r3, r0
 8015402:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8015404:	2301      	movs	r3, #1
 8015406:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8015408:	4b24      	ldr	r3, [pc, #144]	; (801549c <SD_write+0xa8>)
 801540a:	2200      	movs	r2, #0
 801540c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801540e:	f247 5030 	movw	r0, #30000	; 0x7530
 8015412:	f7ff ff34 	bl	801527e <SD_CheckStatusWithTimeout>
 8015416:	4603      	mov	r3, r0
 8015418:	2b00      	cmp	r3, #0
 801541a:	da01      	bge.n	8015420 <SD_write+0x2c>
  {
    return res;
 801541c:	7dfb      	ldrb	r3, [r7, #23]
 801541e:	e038      	b.n	8015492 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8015420:	683a      	ldr	r2, [r7, #0]
 8015422:	6879      	ldr	r1, [r7, #4]
 8015424:	68b8      	ldr	r0, [r7, #8]
 8015426:	f7ff fed1 	bl	80151cc <BSP_SD_WriteBlocks_DMA>
 801542a:	4603      	mov	r3, r0
 801542c:	2b00      	cmp	r3, #0
 801542e:	d12f      	bne.n	8015490 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8015430:	f7ee feb6 	bl	80041a0 <HAL_GetTick>
 8015434:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015436:	bf00      	nop
 8015438:	4b18      	ldr	r3, [pc, #96]	; (801549c <SD_write+0xa8>)
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	2b00      	cmp	r3, #0
 801543e:	d108      	bne.n	8015452 <SD_write+0x5e>
 8015440:	f7ee feae 	bl	80041a0 <HAL_GetTick>
 8015444:	4602      	mov	r2, r0
 8015446:	693b      	ldr	r3, [r7, #16]
 8015448:	1ad3      	subs	r3, r2, r3
 801544a:	f247 522f 	movw	r2, #29999	; 0x752f
 801544e:	4293      	cmp	r3, r2
 8015450:	d9f2      	bls.n	8015438 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8015452:	4b12      	ldr	r3, [pc, #72]	; (801549c <SD_write+0xa8>)
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d102      	bne.n	8015460 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801545a:	2301      	movs	r3, #1
 801545c:	75fb      	strb	r3, [r7, #23]
 801545e:	e017      	b.n	8015490 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8015460:	4b0e      	ldr	r3, [pc, #56]	; (801549c <SD_write+0xa8>)
 8015462:	2200      	movs	r2, #0
 8015464:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8015466:	f7ee fe9b 	bl	80041a0 <HAL_GetTick>
 801546a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801546c:	e007      	b.n	801547e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801546e:	f7ff fec7 	bl	8015200 <BSP_SD_GetCardState>
 8015472:	4603      	mov	r3, r0
 8015474:	2b00      	cmp	r3, #0
 8015476:	d102      	bne.n	801547e <SD_write+0x8a>
          {
            res = RES_OK;
 8015478:	2300      	movs	r3, #0
 801547a:	75fb      	strb	r3, [r7, #23]
            break;
 801547c:	e008      	b.n	8015490 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801547e:	f7ee fe8f 	bl	80041a0 <HAL_GetTick>
 8015482:	4602      	mov	r2, r0
 8015484:	693b      	ldr	r3, [r7, #16]
 8015486:	1ad3      	subs	r3, r2, r3
 8015488:	f247 522f 	movw	r2, #29999	; 0x752f
 801548c:	4293      	cmp	r3, r2
 801548e:	d9ee      	bls.n	801546e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8015490:	7dfb      	ldrb	r3, [r7, #23]
}
 8015492:	4618      	mov	r0, r3
 8015494:	3718      	adds	r7, #24
 8015496:	46bd      	mov	sp, r7
 8015498:	bd80      	pop	{r7, pc}
 801549a:	bf00      	nop
 801549c:	2400169c 	.word	0x2400169c

080154a0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b08c      	sub	sp, #48	; 0x30
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	4603      	mov	r3, r0
 80154a8:	603a      	str	r2, [r7, #0]
 80154aa:	71fb      	strb	r3, [r7, #7]
 80154ac:	460b      	mov	r3, r1
 80154ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80154b0:	2301      	movs	r3, #1
 80154b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80154b6:	4b25      	ldr	r3, [pc, #148]	; (801554c <SD_ioctl+0xac>)
 80154b8:	781b      	ldrb	r3, [r3, #0]
 80154ba:	b2db      	uxtb	r3, r3
 80154bc:	f003 0301 	and.w	r3, r3, #1
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d001      	beq.n	80154c8 <SD_ioctl+0x28>
 80154c4:	2303      	movs	r3, #3
 80154c6:	e03c      	b.n	8015542 <SD_ioctl+0xa2>

  switch (cmd)
 80154c8:	79bb      	ldrb	r3, [r7, #6]
 80154ca:	2b03      	cmp	r3, #3
 80154cc:	d834      	bhi.n	8015538 <SD_ioctl+0x98>
 80154ce:	a201      	add	r2, pc, #4	; (adr r2, 80154d4 <SD_ioctl+0x34>)
 80154d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80154d4:	080154e5 	.word	0x080154e5
 80154d8:	080154ed 	.word	0x080154ed
 80154dc:	08015505 	.word	0x08015505
 80154e0:	0801551f 	.word	0x0801551f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80154e4:	2300      	movs	r3, #0
 80154e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80154ea:	e028      	b.n	801553e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80154ec:	f107 0308 	add.w	r3, r7, #8
 80154f0:	4618      	mov	r0, r3
 80154f2:	f7ff fe95 	bl	8015220 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80154f6:	6a3a      	ldr	r2, [r7, #32]
 80154f8:	683b      	ldr	r3, [r7, #0]
 80154fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80154fc:	2300      	movs	r3, #0
 80154fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015502:	e01c      	b.n	801553e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8015504:	f107 0308 	add.w	r3, r7, #8
 8015508:	4618      	mov	r0, r3
 801550a:	f7ff fe89 	bl	8015220 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015510:	b29a      	uxth	r2, r3
 8015512:	683b      	ldr	r3, [r7, #0]
 8015514:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8015516:	2300      	movs	r3, #0
 8015518:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801551c:	e00f      	b.n	801553e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801551e:	f107 0308 	add.w	r3, r7, #8
 8015522:	4618      	mov	r0, r3
 8015524:	f7ff fe7c 	bl	8015220 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8015528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801552a:	0a5a      	lsrs	r2, r3, #9
 801552c:	683b      	ldr	r3, [r7, #0]
 801552e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8015530:	2300      	movs	r3, #0
 8015532:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015536:	e002      	b.n	801553e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8015538:	2304      	movs	r3, #4
 801553a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801553e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015542:	4618      	mov	r0, r3
 8015544:	3730      	adds	r7, #48	; 0x30
 8015546:	46bd      	mov	sp, r7
 8015548:	bd80      	pop	{r7, pc}
 801554a:	bf00      	nop
 801554c:	2400000d 	.word	0x2400000d

08015550 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8015550:	b480      	push	{r7}
 8015552:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8015554:	4b03      	ldr	r3, [pc, #12]	; (8015564 <BSP_SD_WriteCpltCallback+0x14>)
 8015556:	2201      	movs	r2, #1
 8015558:	601a      	str	r2, [r3, #0]
}
 801555a:	bf00      	nop
 801555c:	46bd      	mov	sp, r7
 801555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015562:	4770      	bx	lr
 8015564:	2400169c 	.word	0x2400169c

08015568 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8015568:	b480      	push	{r7}
 801556a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 801556c:	4b03      	ldr	r3, [pc, #12]	; (801557c <BSP_SD_ReadCpltCallback+0x14>)
 801556e:	2201      	movs	r2, #1
 8015570:	601a      	str	r2, [r3, #0]
}
 8015572:	bf00      	nop
 8015574:	46bd      	mov	sp, r7
 8015576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801557a:	4770      	bx	lr
 801557c:	240016a0 	.word	0x240016a0

08015580 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015580:	b580      	push	{r7, lr}
 8015582:	b084      	sub	sp, #16
 8015584:	af00      	add	r7, sp, #0
 8015586:	6078      	str	r0, [r7, #4]
 8015588:	460b      	mov	r3, r1
 801558a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801558c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8015590:	f005 fc72 	bl	801ae78 <USBD_static_malloc>
 8015594:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	2b00      	cmp	r3, #0
 801559a:	d109      	bne.n	80155b0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	32b0      	adds	r2, #176	; 0xb0
 80155a6:	2100      	movs	r1, #0
 80155a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80155ac:	2302      	movs	r3, #2
 80155ae:	e0d4      	b.n	801575a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80155b0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80155b4:	2100      	movs	r1, #0
 80155b6:	68f8      	ldr	r0, [r7, #12]
 80155b8:	f006 fc33 	bl	801be22 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	32b0      	adds	r2, #176	; 0xb0
 80155c6:	68f9      	ldr	r1, [r7, #12]
 80155c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	32b0      	adds	r2, #176	; 0xb0
 80155d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	7c1b      	ldrb	r3, [r3, #16]
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d138      	bne.n	801565a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80155e8:	4b5e      	ldr	r3, [pc, #376]	; (8015764 <USBD_CDC_Init+0x1e4>)
 80155ea:	7819      	ldrb	r1, [r3, #0]
 80155ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80155f0:	2202      	movs	r2, #2
 80155f2:	6878      	ldr	r0, [r7, #4]
 80155f4:	f005 fb1d 	bl	801ac32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80155f8:	4b5a      	ldr	r3, [pc, #360]	; (8015764 <USBD_CDC_Init+0x1e4>)
 80155fa:	781b      	ldrb	r3, [r3, #0]
 80155fc:	f003 020f 	and.w	r2, r3, #15
 8015600:	6879      	ldr	r1, [r7, #4]
 8015602:	4613      	mov	r3, r2
 8015604:	009b      	lsls	r3, r3, #2
 8015606:	4413      	add	r3, r2
 8015608:	009b      	lsls	r3, r3, #2
 801560a:	440b      	add	r3, r1
 801560c:	3324      	adds	r3, #36	; 0x24
 801560e:	2201      	movs	r2, #1
 8015610:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015612:	4b55      	ldr	r3, [pc, #340]	; (8015768 <USBD_CDC_Init+0x1e8>)
 8015614:	7819      	ldrb	r1, [r3, #0]
 8015616:	f44f 7300 	mov.w	r3, #512	; 0x200
 801561a:	2202      	movs	r2, #2
 801561c:	6878      	ldr	r0, [r7, #4]
 801561e:	f005 fb08 	bl	801ac32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015622:	4b51      	ldr	r3, [pc, #324]	; (8015768 <USBD_CDC_Init+0x1e8>)
 8015624:	781b      	ldrb	r3, [r3, #0]
 8015626:	f003 020f 	and.w	r2, r3, #15
 801562a:	6879      	ldr	r1, [r7, #4]
 801562c:	4613      	mov	r3, r2
 801562e:	009b      	lsls	r3, r3, #2
 8015630:	4413      	add	r3, r2
 8015632:	009b      	lsls	r3, r3, #2
 8015634:	440b      	add	r3, r1
 8015636:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801563a:	2201      	movs	r2, #1
 801563c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801563e:	4b4b      	ldr	r3, [pc, #300]	; (801576c <USBD_CDC_Init+0x1ec>)
 8015640:	781b      	ldrb	r3, [r3, #0]
 8015642:	f003 020f 	and.w	r2, r3, #15
 8015646:	6879      	ldr	r1, [r7, #4]
 8015648:	4613      	mov	r3, r2
 801564a:	009b      	lsls	r3, r3, #2
 801564c:	4413      	add	r3, r2
 801564e:	009b      	lsls	r3, r3, #2
 8015650:	440b      	add	r3, r1
 8015652:	3326      	adds	r3, #38	; 0x26
 8015654:	2210      	movs	r2, #16
 8015656:	801a      	strh	r2, [r3, #0]
 8015658:	e035      	b.n	80156c6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801565a:	4b42      	ldr	r3, [pc, #264]	; (8015764 <USBD_CDC_Init+0x1e4>)
 801565c:	7819      	ldrb	r1, [r3, #0]
 801565e:	2340      	movs	r3, #64	; 0x40
 8015660:	2202      	movs	r2, #2
 8015662:	6878      	ldr	r0, [r7, #4]
 8015664:	f005 fae5 	bl	801ac32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015668:	4b3e      	ldr	r3, [pc, #248]	; (8015764 <USBD_CDC_Init+0x1e4>)
 801566a:	781b      	ldrb	r3, [r3, #0]
 801566c:	f003 020f 	and.w	r2, r3, #15
 8015670:	6879      	ldr	r1, [r7, #4]
 8015672:	4613      	mov	r3, r2
 8015674:	009b      	lsls	r3, r3, #2
 8015676:	4413      	add	r3, r2
 8015678:	009b      	lsls	r3, r3, #2
 801567a:	440b      	add	r3, r1
 801567c:	3324      	adds	r3, #36	; 0x24
 801567e:	2201      	movs	r2, #1
 8015680:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015682:	4b39      	ldr	r3, [pc, #228]	; (8015768 <USBD_CDC_Init+0x1e8>)
 8015684:	7819      	ldrb	r1, [r3, #0]
 8015686:	2340      	movs	r3, #64	; 0x40
 8015688:	2202      	movs	r2, #2
 801568a:	6878      	ldr	r0, [r7, #4]
 801568c:	f005 fad1 	bl	801ac32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015690:	4b35      	ldr	r3, [pc, #212]	; (8015768 <USBD_CDC_Init+0x1e8>)
 8015692:	781b      	ldrb	r3, [r3, #0]
 8015694:	f003 020f 	and.w	r2, r3, #15
 8015698:	6879      	ldr	r1, [r7, #4]
 801569a:	4613      	mov	r3, r2
 801569c:	009b      	lsls	r3, r3, #2
 801569e:	4413      	add	r3, r2
 80156a0:	009b      	lsls	r3, r3, #2
 80156a2:	440b      	add	r3, r1
 80156a4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80156a8:	2201      	movs	r2, #1
 80156aa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80156ac:	4b2f      	ldr	r3, [pc, #188]	; (801576c <USBD_CDC_Init+0x1ec>)
 80156ae:	781b      	ldrb	r3, [r3, #0]
 80156b0:	f003 020f 	and.w	r2, r3, #15
 80156b4:	6879      	ldr	r1, [r7, #4]
 80156b6:	4613      	mov	r3, r2
 80156b8:	009b      	lsls	r3, r3, #2
 80156ba:	4413      	add	r3, r2
 80156bc:	009b      	lsls	r3, r3, #2
 80156be:	440b      	add	r3, r1
 80156c0:	3326      	adds	r3, #38	; 0x26
 80156c2:	2210      	movs	r2, #16
 80156c4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80156c6:	4b29      	ldr	r3, [pc, #164]	; (801576c <USBD_CDC_Init+0x1ec>)
 80156c8:	7819      	ldrb	r1, [r3, #0]
 80156ca:	2308      	movs	r3, #8
 80156cc:	2203      	movs	r2, #3
 80156ce:	6878      	ldr	r0, [r7, #4]
 80156d0:	f005 faaf 	bl	801ac32 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80156d4:	4b25      	ldr	r3, [pc, #148]	; (801576c <USBD_CDC_Init+0x1ec>)
 80156d6:	781b      	ldrb	r3, [r3, #0]
 80156d8:	f003 020f 	and.w	r2, r3, #15
 80156dc:	6879      	ldr	r1, [r7, #4]
 80156de:	4613      	mov	r3, r2
 80156e0:	009b      	lsls	r3, r3, #2
 80156e2:	4413      	add	r3, r2
 80156e4:	009b      	lsls	r3, r3, #2
 80156e6:	440b      	add	r3, r1
 80156e8:	3324      	adds	r3, #36	; 0x24
 80156ea:	2201      	movs	r2, #1
 80156ec:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	2200      	movs	r2, #0
 80156f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80156fc:	687a      	ldr	r2, [r7, #4]
 80156fe:	33b0      	adds	r3, #176	; 0xb0
 8015700:	009b      	lsls	r3, r3, #2
 8015702:	4413      	add	r3, r2
 8015704:	685b      	ldr	r3, [r3, #4]
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	2200      	movs	r2, #0
 801570e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	2200      	movs	r2, #0
 8015716:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8015720:	2b00      	cmp	r3, #0
 8015722:	d101      	bne.n	8015728 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8015724:	2302      	movs	r3, #2
 8015726:	e018      	b.n	801575a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	7c1b      	ldrb	r3, [r3, #16]
 801572c:	2b00      	cmp	r3, #0
 801572e:	d10a      	bne.n	8015746 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015730:	4b0d      	ldr	r3, [pc, #52]	; (8015768 <USBD_CDC_Init+0x1e8>)
 8015732:	7819      	ldrb	r1, [r3, #0]
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801573a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801573e:	6878      	ldr	r0, [r7, #4]
 8015740:	f005 fb66 	bl	801ae10 <USBD_LL_PrepareReceive>
 8015744:	e008      	b.n	8015758 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015746:	4b08      	ldr	r3, [pc, #32]	; (8015768 <USBD_CDC_Init+0x1e8>)
 8015748:	7819      	ldrb	r1, [r3, #0]
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015750:	2340      	movs	r3, #64	; 0x40
 8015752:	6878      	ldr	r0, [r7, #4]
 8015754:	f005 fb5c 	bl	801ae10 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015758:	2300      	movs	r3, #0
}
 801575a:	4618      	mov	r0, r3
 801575c:	3710      	adds	r7, #16
 801575e:	46bd      	mov	sp, r7
 8015760:	bd80      	pop	{r7, pc}
 8015762:	bf00      	nop
 8015764:	24000097 	.word	0x24000097
 8015768:	24000098 	.word	0x24000098
 801576c:	24000099 	.word	0x24000099

08015770 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015770:	b580      	push	{r7, lr}
 8015772:	b082      	sub	sp, #8
 8015774:	af00      	add	r7, sp, #0
 8015776:	6078      	str	r0, [r7, #4]
 8015778:	460b      	mov	r3, r1
 801577a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801577c:	4b3a      	ldr	r3, [pc, #232]	; (8015868 <USBD_CDC_DeInit+0xf8>)
 801577e:	781b      	ldrb	r3, [r3, #0]
 8015780:	4619      	mov	r1, r3
 8015782:	6878      	ldr	r0, [r7, #4]
 8015784:	f005 fa7b 	bl	801ac7e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8015788:	4b37      	ldr	r3, [pc, #220]	; (8015868 <USBD_CDC_DeInit+0xf8>)
 801578a:	781b      	ldrb	r3, [r3, #0]
 801578c:	f003 020f 	and.w	r2, r3, #15
 8015790:	6879      	ldr	r1, [r7, #4]
 8015792:	4613      	mov	r3, r2
 8015794:	009b      	lsls	r3, r3, #2
 8015796:	4413      	add	r3, r2
 8015798:	009b      	lsls	r3, r3, #2
 801579a:	440b      	add	r3, r1
 801579c:	3324      	adds	r3, #36	; 0x24
 801579e:	2200      	movs	r2, #0
 80157a0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80157a2:	4b32      	ldr	r3, [pc, #200]	; (801586c <USBD_CDC_DeInit+0xfc>)
 80157a4:	781b      	ldrb	r3, [r3, #0]
 80157a6:	4619      	mov	r1, r3
 80157a8:	6878      	ldr	r0, [r7, #4]
 80157aa:	f005 fa68 	bl	801ac7e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80157ae:	4b2f      	ldr	r3, [pc, #188]	; (801586c <USBD_CDC_DeInit+0xfc>)
 80157b0:	781b      	ldrb	r3, [r3, #0]
 80157b2:	f003 020f 	and.w	r2, r3, #15
 80157b6:	6879      	ldr	r1, [r7, #4]
 80157b8:	4613      	mov	r3, r2
 80157ba:	009b      	lsls	r3, r3, #2
 80157bc:	4413      	add	r3, r2
 80157be:	009b      	lsls	r3, r3, #2
 80157c0:	440b      	add	r3, r1
 80157c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80157c6:	2200      	movs	r2, #0
 80157c8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80157ca:	4b29      	ldr	r3, [pc, #164]	; (8015870 <USBD_CDC_DeInit+0x100>)
 80157cc:	781b      	ldrb	r3, [r3, #0]
 80157ce:	4619      	mov	r1, r3
 80157d0:	6878      	ldr	r0, [r7, #4]
 80157d2:	f005 fa54 	bl	801ac7e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80157d6:	4b26      	ldr	r3, [pc, #152]	; (8015870 <USBD_CDC_DeInit+0x100>)
 80157d8:	781b      	ldrb	r3, [r3, #0]
 80157da:	f003 020f 	and.w	r2, r3, #15
 80157de:	6879      	ldr	r1, [r7, #4]
 80157e0:	4613      	mov	r3, r2
 80157e2:	009b      	lsls	r3, r3, #2
 80157e4:	4413      	add	r3, r2
 80157e6:	009b      	lsls	r3, r3, #2
 80157e8:	440b      	add	r3, r1
 80157ea:	3324      	adds	r3, #36	; 0x24
 80157ec:	2200      	movs	r2, #0
 80157ee:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80157f0:	4b1f      	ldr	r3, [pc, #124]	; (8015870 <USBD_CDC_DeInit+0x100>)
 80157f2:	781b      	ldrb	r3, [r3, #0]
 80157f4:	f003 020f 	and.w	r2, r3, #15
 80157f8:	6879      	ldr	r1, [r7, #4]
 80157fa:	4613      	mov	r3, r2
 80157fc:	009b      	lsls	r3, r3, #2
 80157fe:	4413      	add	r3, r2
 8015800:	009b      	lsls	r3, r3, #2
 8015802:	440b      	add	r3, r1
 8015804:	3326      	adds	r3, #38	; 0x26
 8015806:	2200      	movs	r2, #0
 8015808:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	32b0      	adds	r2, #176	; 0xb0
 8015814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015818:	2b00      	cmp	r3, #0
 801581a:	d01f      	beq.n	801585c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015822:	687a      	ldr	r2, [r7, #4]
 8015824:	33b0      	adds	r3, #176	; 0xb0
 8015826:	009b      	lsls	r3, r3, #2
 8015828:	4413      	add	r3, r2
 801582a:	685b      	ldr	r3, [r3, #4]
 801582c:	685b      	ldr	r3, [r3, #4]
 801582e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	32b0      	adds	r2, #176	; 0xb0
 801583a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801583e:	4618      	mov	r0, r3
 8015840:	f005 fb28 	bl	801ae94 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	32b0      	adds	r2, #176	; 0xb0
 801584e:	2100      	movs	r1, #0
 8015850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	2200      	movs	r2, #0
 8015858:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801585c:	2300      	movs	r3, #0
}
 801585e:	4618      	mov	r0, r3
 8015860:	3708      	adds	r7, #8
 8015862:	46bd      	mov	sp, r7
 8015864:	bd80      	pop	{r7, pc}
 8015866:	bf00      	nop
 8015868:	24000097 	.word	0x24000097
 801586c:	24000098 	.word	0x24000098
 8015870:	24000099 	.word	0x24000099

08015874 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8015874:	b580      	push	{r7, lr}
 8015876:	b086      	sub	sp, #24
 8015878:	af00      	add	r7, sp, #0
 801587a:	6078      	str	r0, [r7, #4]
 801587c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	32b0      	adds	r2, #176	; 0xb0
 8015888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801588c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801588e:	2300      	movs	r3, #0
 8015890:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8015892:	2300      	movs	r3, #0
 8015894:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8015896:	2300      	movs	r3, #0
 8015898:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801589a:	693b      	ldr	r3, [r7, #16]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d101      	bne.n	80158a4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80158a0:	2303      	movs	r3, #3
 80158a2:	e0bf      	b.n	8015a24 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80158a4:	683b      	ldr	r3, [r7, #0]
 80158a6:	781b      	ldrb	r3, [r3, #0]
 80158a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d050      	beq.n	8015952 <USBD_CDC_Setup+0xde>
 80158b0:	2b20      	cmp	r3, #32
 80158b2:	f040 80af 	bne.w	8015a14 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80158b6:	683b      	ldr	r3, [r7, #0]
 80158b8:	88db      	ldrh	r3, [r3, #6]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d03a      	beq.n	8015934 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80158be:	683b      	ldr	r3, [r7, #0]
 80158c0:	781b      	ldrb	r3, [r3, #0]
 80158c2:	b25b      	sxtb	r3, r3
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	da1b      	bge.n	8015900 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80158ce:	687a      	ldr	r2, [r7, #4]
 80158d0:	33b0      	adds	r3, #176	; 0xb0
 80158d2:	009b      	lsls	r3, r3, #2
 80158d4:	4413      	add	r3, r2
 80158d6:	685b      	ldr	r3, [r3, #4]
 80158d8:	689b      	ldr	r3, [r3, #8]
 80158da:	683a      	ldr	r2, [r7, #0]
 80158dc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80158de:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80158e0:	683a      	ldr	r2, [r7, #0]
 80158e2:	88d2      	ldrh	r2, [r2, #6]
 80158e4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80158e6:	683b      	ldr	r3, [r7, #0]
 80158e8:	88db      	ldrh	r3, [r3, #6]
 80158ea:	2b07      	cmp	r3, #7
 80158ec:	bf28      	it	cs
 80158ee:	2307      	movcs	r3, #7
 80158f0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80158f2:	693b      	ldr	r3, [r7, #16]
 80158f4:	89fa      	ldrh	r2, [r7, #14]
 80158f6:	4619      	mov	r1, r3
 80158f8:	6878      	ldr	r0, [r7, #4]
 80158fa:	f001 fd89 	bl	8017410 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80158fe:	e090      	b.n	8015a22 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8015900:	683b      	ldr	r3, [r7, #0]
 8015902:	785a      	ldrb	r2, [r3, #1]
 8015904:	693b      	ldr	r3, [r7, #16]
 8015906:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801590a:	683b      	ldr	r3, [r7, #0]
 801590c:	88db      	ldrh	r3, [r3, #6]
 801590e:	2b3f      	cmp	r3, #63	; 0x3f
 8015910:	d803      	bhi.n	801591a <USBD_CDC_Setup+0xa6>
 8015912:	683b      	ldr	r3, [r7, #0]
 8015914:	88db      	ldrh	r3, [r3, #6]
 8015916:	b2da      	uxtb	r2, r3
 8015918:	e000      	b.n	801591c <USBD_CDC_Setup+0xa8>
 801591a:	2240      	movs	r2, #64	; 0x40
 801591c:	693b      	ldr	r3, [r7, #16]
 801591e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8015922:	6939      	ldr	r1, [r7, #16]
 8015924:	693b      	ldr	r3, [r7, #16]
 8015926:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801592a:	461a      	mov	r2, r3
 801592c:	6878      	ldr	r0, [r7, #4]
 801592e:	f001 fd9b 	bl	8017468 <USBD_CtlPrepareRx>
      break;
 8015932:	e076      	b.n	8015a22 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801593a:	687a      	ldr	r2, [r7, #4]
 801593c:	33b0      	adds	r3, #176	; 0xb0
 801593e:	009b      	lsls	r3, r3, #2
 8015940:	4413      	add	r3, r2
 8015942:	685b      	ldr	r3, [r3, #4]
 8015944:	689b      	ldr	r3, [r3, #8]
 8015946:	683a      	ldr	r2, [r7, #0]
 8015948:	7850      	ldrb	r0, [r2, #1]
 801594a:	2200      	movs	r2, #0
 801594c:	6839      	ldr	r1, [r7, #0]
 801594e:	4798      	blx	r3
      break;
 8015950:	e067      	b.n	8015a22 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015952:	683b      	ldr	r3, [r7, #0]
 8015954:	785b      	ldrb	r3, [r3, #1]
 8015956:	2b0b      	cmp	r3, #11
 8015958:	d851      	bhi.n	80159fe <USBD_CDC_Setup+0x18a>
 801595a:	a201      	add	r2, pc, #4	; (adr r2, 8015960 <USBD_CDC_Setup+0xec>)
 801595c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015960:	08015991 	.word	0x08015991
 8015964:	08015a0d 	.word	0x08015a0d
 8015968:	080159ff 	.word	0x080159ff
 801596c:	080159ff 	.word	0x080159ff
 8015970:	080159ff 	.word	0x080159ff
 8015974:	080159ff 	.word	0x080159ff
 8015978:	080159ff 	.word	0x080159ff
 801597c:	080159ff 	.word	0x080159ff
 8015980:	080159ff 	.word	0x080159ff
 8015984:	080159ff 	.word	0x080159ff
 8015988:	080159bb 	.word	0x080159bb
 801598c:	080159e5 	.word	0x080159e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015996:	b2db      	uxtb	r3, r3
 8015998:	2b03      	cmp	r3, #3
 801599a:	d107      	bne.n	80159ac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801599c:	f107 030a 	add.w	r3, r7, #10
 80159a0:	2202      	movs	r2, #2
 80159a2:	4619      	mov	r1, r3
 80159a4:	6878      	ldr	r0, [r7, #4]
 80159a6:	f001 fd33 	bl	8017410 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80159aa:	e032      	b.n	8015a12 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80159ac:	6839      	ldr	r1, [r7, #0]
 80159ae:	6878      	ldr	r0, [r7, #4]
 80159b0:	f001 fcbd 	bl	801732e <USBD_CtlError>
            ret = USBD_FAIL;
 80159b4:	2303      	movs	r3, #3
 80159b6:	75fb      	strb	r3, [r7, #23]
          break;
 80159b8:	e02b      	b.n	8015a12 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159c0:	b2db      	uxtb	r3, r3
 80159c2:	2b03      	cmp	r3, #3
 80159c4:	d107      	bne.n	80159d6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80159c6:	f107 030d 	add.w	r3, r7, #13
 80159ca:	2201      	movs	r2, #1
 80159cc:	4619      	mov	r1, r3
 80159ce:	6878      	ldr	r0, [r7, #4]
 80159d0:	f001 fd1e 	bl	8017410 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80159d4:	e01d      	b.n	8015a12 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80159d6:	6839      	ldr	r1, [r7, #0]
 80159d8:	6878      	ldr	r0, [r7, #4]
 80159da:	f001 fca8 	bl	801732e <USBD_CtlError>
            ret = USBD_FAIL;
 80159de:	2303      	movs	r3, #3
 80159e0:	75fb      	strb	r3, [r7, #23]
          break;
 80159e2:	e016      	b.n	8015a12 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159ea:	b2db      	uxtb	r3, r3
 80159ec:	2b03      	cmp	r3, #3
 80159ee:	d00f      	beq.n	8015a10 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80159f0:	6839      	ldr	r1, [r7, #0]
 80159f2:	6878      	ldr	r0, [r7, #4]
 80159f4:	f001 fc9b 	bl	801732e <USBD_CtlError>
            ret = USBD_FAIL;
 80159f8:	2303      	movs	r3, #3
 80159fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80159fc:	e008      	b.n	8015a10 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80159fe:	6839      	ldr	r1, [r7, #0]
 8015a00:	6878      	ldr	r0, [r7, #4]
 8015a02:	f001 fc94 	bl	801732e <USBD_CtlError>
          ret = USBD_FAIL;
 8015a06:	2303      	movs	r3, #3
 8015a08:	75fb      	strb	r3, [r7, #23]
          break;
 8015a0a:	e002      	b.n	8015a12 <USBD_CDC_Setup+0x19e>
          break;
 8015a0c:	bf00      	nop
 8015a0e:	e008      	b.n	8015a22 <USBD_CDC_Setup+0x1ae>
          break;
 8015a10:	bf00      	nop
      }
      break;
 8015a12:	e006      	b.n	8015a22 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8015a14:	6839      	ldr	r1, [r7, #0]
 8015a16:	6878      	ldr	r0, [r7, #4]
 8015a18:	f001 fc89 	bl	801732e <USBD_CtlError>
      ret = USBD_FAIL;
 8015a1c:	2303      	movs	r3, #3
 8015a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8015a20:	bf00      	nop
  }

  return (uint8_t)ret;
 8015a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8015a24:	4618      	mov	r0, r3
 8015a26:	3718      	adds	r7, #24
 8015a28:	46bd      	mov	sp, r7
 8015a2a:	bd80      	pop	{r7, pc}

08015a2c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015a2c:	b580      	push	{r7, lr}
 8015a2e:	b084      	sub	sp, #16
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]
 8015a34:	460b      	mov	r3, r1
 8015a36:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015a3e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	32b0      	adds	r2, #176	; 0xb0
 8015a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d101      	bne.n	8015a56 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8015a52:	2303      	movs	r3, #3
 8015a54:	e065      	b.n	8015b22 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	32b0      	adds	r2, #176	; 0xb0
 8015a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a64:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015a66:	78fb      	ldrb	r3, [r7, #3]
 8015a68:	f003 020f 	and.w	r2, r3, #15
 8015a6c:	6879      	ldr	r1, [r7, #4]
 8015a6e:	4613      	mov	r3, r2
 8015a70:	009b      	lsls	r3, r3, #2
 8015a72:	4413      	add	r3, r2
 8015a74:	009b      	lsls	r3, r3, #2
 8015a76:	440b      	add	r3, r1
 8015a78:	3318      	adds	r3, #24
 8015a7a:	681b      	ldr	r3, [r3, #0]
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d02f      	beq.n	8015ae0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015a80:	78fb      	ldrb	r3, [r7, #3]
 8015a82:	f003 020f 	and.w	r2, r3, #15
 8015a86:	6879      	ldr	r1, [r7, #4]
 8015a88:	4613      	mov	r3, r2
 8015a8a:	009b      	lsls	r3, r3, #2
 8015a8c:	4413      	add	r3, r2
 8015a8e:	009b      	lsls	r3, r3, #2
 8015a90:	440b      	add	r3, r1
 8015a92:	3318      	adds	r3, #24
 8015a94:	681a      	ldr	r2, [r3, #0]
 8015a96:	78fb      	ldrb	r3, [r7, #3]
 8015a98:	f003 010f 	and.w	r1, r3, #15
 8015a9c:	68f8      	ldr	r0, [r7, #12]
 8015a9e:	460b      	mov	r3, r1
 8015aa0:	00db      	lsls	r3, r3, #3
 8015aa2:	440b      	add	r3, r1
 8015aa4:	009b      	lsls	r3, r3, #2
 8015aa6:	4403      	add	r3, r0
 8015aa8:	3344      	adds	r3, #68	; 0x44
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	fbb2 f1f3 	udiv	r1, r2, r3
 8015ab0:	fb01 f303 	mul.w	r3, r1, r3
 8015ab4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d112      	bne.n	8015ae0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015aba:	78fb      	ldrb	r3, [r7, #3]
 8015abc:	f003 020f 	and.w	r2, r3, #15
 8015ac0:	6879      	ldr	r1, [r7, #4]
 8015ac2:	4613      	mov	r3, r2
 8015ac4:	009b      	lsls	r3, r3, #2
 8015ac6:	4413      	add	r3, r2
 8015ac8:	009b      	lsls	r3, r3, #2
 8015aca:	440b      	add	r3, r1
 8015acc:	3318      	adds	r3, #24
 8015ace:	2200      	movs	r2, #0
 8015ad0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015ad2:	78f9      	ldrb	r1, [r7, #3]
 8015ad4:	2300      	movs	r3, #0
 8015ad6:	2200      	movs	r2, #0
 8015ad8:	6878      	ldr	r0, [r7, #4]
 8015ada:	f005 f978 	bl	801adce <USBD_LL_Transmit>
 8015ade:	e01f      	b.n	8015b20 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8015ae0:	68bb      	ldr	r3, [r7, #8]
 8015ae2:	2200      	movs	r2, #0
 8015ae4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015aee:	687a      	ldr	r2, [r7, #4]
 8015af0:	33b0      	adds	r3, #176	; 0xb0
 8015af2:	009b      	lsls	r3, r3, #2
 8015af4:	4413      	add	r3, r2
 8015af6:	685b      	ldr	r3, [r3, #4]
 8015af8:	691b      	ldr	r3, [r3, #16]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d010      	beq.n	8015b20 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015b04:	687a      	ldr	r2, [r7, #4]
 8015b06:	33b0      	adds	r3, #176	; 0xb0
 8015b08:	009b      	lsls	r3, r3, #2
 8015b0a:	4413      	add	r3, r2
 8015b0c:	685b      	ldr	r3, [r3, #4]
 8015b0e:	691b      	ldr	r3, [r3, #16]
 8015b10:	68ba      	ldr	r2, [r7, #8]
 8015b12:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8015b16:	68ba      	ldr	r2, [r7, #8]
 8015b18:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8015b1c:	78fa      	ldrb	r2, [r7, #3]
 8015b1e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8015b20:	2300      	movs	r3, #0
}
 8015b22:	4618      	mov	r0, r3
 8015b24:	3710      	adds	r7, #16
 8015b26:	46bd      	mov	sp, r7
 8015b28:	bd80      	pop	{r7, pc}

08015b2a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015b2a:	b580      	push	{r7, lr}
 8015b2c:	b084      	sub	sp, #16
 8015b2e:	af00      	add	r7, sp, #0
 8015b30:	6078      	str	r0, [r7, #4]
 8015b32:	460b      	mov	r3, r1
 8015b34:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	32b0      	adds	r2, #176	; 0xb0
 8015b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b44:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	32b0      	adds	r2, #176	; 0xb0
 8015b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d101      	bne.n	8015b5c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8015b58:	2303      	movs	r3, #3
 8015b5a:	e01a      	b.n	8015b92 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015b5c:	78fb      	ldrb	r3, [r7, #3]
 8015b5e:	4619      	mov	r1, r3
 8015b60:	6878      	ldr	r0, [r7, #4]
 8015b62:	f005 f976 	bl	801ae52 <USBD_LL_GetRxDataSize>
 8015b66:	4602      	mov	r2, r0
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015b74:	687a      	ldr	r2, [r7, #4]
 8015b76:	33b0      	adds	r3, #176	; 0xb0
 8015b78:	009b      	lsls	r3, r3, #2
 8015b7a:	4413      	add	r3, r2
 8015b7c:	685b      	ldr	r3, [r3, #4]
 8015b7e:	68db      	ldr	r3, [r3, #12]
 8015b80:	68fa      	ldr	r2, [r7, #12]
 8015b82:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8015b86:	68fa      	ldr	r2, [r7, #12]
 8015b88:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8015b8c:	4611      	mov	r1, r2
 8015b8e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8015b90:	2300      	movs	r3, #0
}
 8015b92:	4618      	mov	r0, r3
 8015b94:	3710      	adds	r7, #16
 8015b96:	46bd      	mov	sp, r7
 8015b98:	bd80      	pop	{r7, pc}

08015b9a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015b9a:	b580      	push	{r7, lr}
 8015b9c:	b084      	sub	sp, #16
 8015b9e:	af00      	add	r7, sp, #0
 8015ba0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	32b0      	adds	r2, #176	; 0xb0
 8015bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bb0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d101      	bne.n	8015bbc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015bb8:	2303      	movs	r3, #3
 8015bba:	e025      	b.n	8015c08 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015bc2:	687a      	ldr	r2, [r7, #4]
 8015bc4:	33b0      	adds	r3, #176	; 0xb0
 8015bc6:	009b      	lsls	r3, r3, #2
 8015bc8:	4413      	add	r3, r2
 8015bca:	685b      	ldr	r3, [r3, #4]
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d01a      	beq.n	8015c06 <USBD_CDC_EP0_RxReady+0x6c>
 8015bd0:	68fb      	ldr	r3, [r7, #12]
 8015bd2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8015bd6:	2bff      	cmp	r3, #255	; 0xff
 8015bd8:	d015      	beq.n	8015c06 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015be0:	687a      	ldr	r2, [r7, #4]
 8015be2:	33b0      	adds	r3, #176	; 0xb0
 8015be4:	009b      	lsls	r3, r3, #2
 8015be6:	4413      	add	r3, r2
 8015be8:	685b      	ldr	r3, [r3, #4]
 8015bea:	689b      	ldr	r3, [r3, #8]
 8015bec:	68fa      	ldr	r2, [r7, #12]
 8015bee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8015bf2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8015bf4:	68fa      	ldr	r2, [r7, #12]
 8015bf6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015bfa:	b292      	uxth	r2, r2
 8015bfc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	22ff      	movs	r2, #255	; 0xff
 8015c02:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8015c06:	2300      	movs	r3, #0
}
 8015c08:	4618      	mov	r0, r3
 8015c0a:	3710      	adds	r7, #16
 8015c0c:	46bd      	mov	sp, r7
 8015c0e:	bd80      	pop	{r7, pc}

08015c10 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015c10:	b580      	push	{r7, lr}
 8015c12:	b086      	sub	sp, #24
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015c18:	2182      	movs	r1, #130	; 0x82
 8015c1a:	4818      	ldr	r0, [pc, #96]	; (8015c7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015c1c:	f000 fd4f 	bl	80166be <USBD_GetEpDesc>
 8015c20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015c22:	2101      	movs	r1, #1
 8015c24:	4815      	ldr	r0, [pc, #84]	; (8015c7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015c26:	f000 fd4a 	bl	80166be <USBD_GetEpDesc>
 8015c2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015c2c:	2181      	movs	r1, #129	; 0x81
 8015c2e:	4813      	ldr	r0, [pc, #76]	; (8015c7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015c30:	f000 fd45 	bl	80166be <USBD_GetEpDesc>
 8015c34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015c36:	697b      	ldr	r3, [r7, #20]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d002      	beq.n	8015c42 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015c3c:	697b      	ldr	r3, [r7, #20]
 8015c3e:	2210      	movs	r2, #16
 8015c40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015c42:	693b      	ldr	r3, [r7, #16]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d006      	beq.n	8015c56 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015c48:	693b      	ldr	r3, [r7, #16]
 8015c4a:	2200      	movs	r2, #0
 8015c4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015c50:	711a      	strb	r2, [r3, #4]
 8015c52:	2200      	movs	r2, #0
 8015c54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015c56:	68fb      	ldr	r3, [r7, #12]
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d006      	beq.n	8015c6a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	2200      	movs	r2, #0
 8015c60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015c64:	711a      	strb	r2, [r3, #4]
 8015c66:	2200      	movs	r2, #0
 8015c68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	2243      	movs	r2, #67	; 0x43
 8015c6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015c70:	4b02      	ldr	r3, [pc, #8]	; (8015c7c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8015c72:	4618      	mov	r0, r3
 8015c74:	3718      	adds	r7, #24
 8015c76:	46bd      	mov	sp, r7
 8015c78:	bd80      	pop	{r7, pc}
 8015c7a:	bf00      	nop
 8015c7c:	24000054 	.word	0x24000054

08015c80 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015c80:	b580      	push	{r7, lr}
 8015c82:	b086      	sub	sp, #24
 8015c84:	af00      	add	r7, sp, #0
 8015c86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015c88:	2182      	movs	r1, #130	; 0x82
 8015c8a:	4818      	ldr	r0, [pc, #96]	; (8015cec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015c8c:	f000 fd17 	bl	80166be <USBD_GetEpDesc>
 8015c90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015c92:	2101      	movs	r1, #1
 8015c94:	4815      	ldr	r0, [pc, #84]	; (8015cec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015c96:	f000 fd12 	bl	80166be <USBD_GetEpDesc>
 8015c9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015c9c:	2181      	movs	r1, #129	; 0x81
 8015c9e:	4813      	ldr	r0, [pc, #76]	; (8015cec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015ca0:	f000 fd0d 	bl	80166be <USBD_GetEpDesc>
 8015ca4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015ca6:	697b      	ldr	r3, [r7, #20]
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d002      	beq.n	8015cb2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015cac:	697b      	ldr	r3, [r7, #20]
 8015cae:	2210      	movs	r2, #16
 8015cb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015cb2:	693b      	ldr	r3, [r7, #16]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d006      	beq.n	8015cc6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015cb8:	693b      	ldr	r3, [r7, #16]
 8015cba:	2200      	movs	r2, #0
 8015cbc:	711a      	strb	r2, [r3, #4]
 8015cbe:	2200      	movs	r2, #0
 8015cc0:	f042 0202 	orr.w	r2, r2, #2
 8015cc4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d006      	beq.n	8015cda <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	2200      	movs	r2, #0
 8015cd0:	711a      	strb	r2, [r3, #4]
 8015cd2:	2200      	movs	r2, #0
 8015cd4:	f042 0202 	orr.w	r2, r2, #2
 8015cd8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	2243      	movs	r2, #67	; 0x43
 8015cde:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015ce0:	4b02      	ldr	r3, [pc, #8]	; (8015cec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8015ce2:	4618      	mov	r0, r3
 8015ce4:	3718      	adds	r7, #24
 8015ce6:	46bd      	mov	sp, r7
 8015ce8:	bd80      	pop	{r7, pc}
 8015cea:	bf00      	nop
 8015cec:	24000054 	.word	0x24000054

08015cf0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015cf0:	b580      	push	{r7, lr}
 8015cf2:	b086      	sub	sp, #24
 8015cf4:	af00      	add	r7, sp, #0
 8015cf6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015cf8:	2182      	movs	r1, #130	; 0x82
 8015cfa:	4818      	ldr	r0, [pc, #96]	; (8015d5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015cfc:	f000 fcdf 	bl	80166be <USBD_GetEpDesc>
 8015d00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015d02:	2101      	movs	r1, #1
 8015d04:	4815      	ldr	r0, [pc, #84]	; (8015d5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015d06:	f000 fcda 	bl	80166be <USBD_GetEpDesc>
 8015d0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015d0c:	2181      	movs	r1, #129	; 0x81
 8015d0e:	4813      	ldr	r0, [pc, #76]	; (8015d5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015d10:	f000 fcd5 	bl	80166be <USBD_GetEpDesc>
 8015d14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015d16:	697b      	ldr	r3, [r7, #20]
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d002      	beq.n	8015d22 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015d1c:	697b      	ldr	r3, [r7, #20]
 8015d1e:	2210      	movs	r2, #16
 8015d20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015d22:	693b      	ldr	r3, [r7, #16]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d006      	beq.n	8015d36 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015d28:	693b      	ldr	r3, [r7, #16]
 8015d2a:	2200      	movs	r2, #0
 8015d2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015d30:	711a      	strb	r2, [r3, #4]
 8015d32:	2200      	movs	r2, #0
 8015d34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d006      	beq.n	8015d4a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	2200      	movs	r2, #0
 8015d40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015d44:	711a      	strb	r2, [r3, #4]
 8015d46:	2200      	movs	r2, #0
 8015d48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	2243      	movs	r2, #67	; 0x43
 8015d4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015d50:	4b02      	ldr	r3, [pc, #8]	; (8015d5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8015d52:	4618      	mov	r0, r3
 8015d54:	3718      	adds	r7, #24
 8015d56:	46bd      	mov	sp, r7
 8015d58:	bd80      	pop	{r7, pc}
 8015d5a:	bf00      	nop
 8015d5c:	24000054 	.word	0x24000054

08015d60 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015d60:	b480      	push	{r7}
 8015d62:	b083      	sub	sp, #12
 8015d64:	af00      	add	r7, sp, #0
 8015d66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	220a      	movs	r2, #10
 8015d6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015d6e:	4b03      	ldr	r3, [pc, #12]	; (8015d7c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015d70:	4618      	mov	r0, r3
 8015d72:	370c      	adds	r7, #12
 8015d74:	46bd      	mov	sp, r7
 8015d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d7a:	4770      	bx	lr
 8015d7c:	24000010 	.word	0x24000010

08015d80 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015d80:	b480      	push	{r7}
 8015d82:	b083      	sub	sp, #12
 8015d84:	af00      	add	r7, sp, #0
 8015d86:	6078      	str	r0, [r7, #4]
 8015d88:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8015d8a:	683b      	ldr	r3, [r7, #0]
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d101      	bne.n	8015d94 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015d90:	2303      	movs	r3, #3
 8015d92:	e009      	b.n	8015da8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015d9a:	687a      	ldr	r2, [r7, #4]
 8015d9c:	33b0      	adds	r3, #176	; 0xb0
 8015d9e:	009b      	lsls	r3, r3, #2
 8015da0:	4413      	add	r3, r2
 8015da2:	683a      	ldr	r2, [r7, #0]
 8015da4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8015da6:	2300      	movs	r3, #0
}
 8015da8:	4618      	mov	r0, r3
 8015daa:	370c      	adds	r7, #12
 8015dac:	46bd      	mov	sp, r7
 8015dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015db2:	4770      	bx	lr

08015db4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015db4:	b480      	push	{r7}
 8015db6:	b087      	sub	sp, #28
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	60f8      	str	r0, [r7, #12]
 8015dbc:	60b9      	str	r1, [r7, #8]
 8015dbe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015dc6:	68fb      	ldr	r3, [r7, #12]
 8015dc8:	32b0      	adds	r2, #176	; 0xb0
 8015dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015dce:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015dd0:	697b      	ldr	r3, [r7, #20]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d101      	bne.n	8015dda <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015dd6:	2303      	movs	r3, #3
 8015dd8:	e008      	b.n	8015dec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8015dda:	697b      	ldr	r3, [r7, #20]
 8015ddc:	68ba      	ldr	r2, [r7, #8]
 8015dde:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8015de2:	697b      	ldr	r3, [r7, #20]
 8015de4:	687a      	ldr	r2, [r7, #4]
 8015de6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8015dea:	2300      	movs	r3, #0
}
 8015dec:	4618      	mov	r0, r3
 8015dee:	371c      	adds	r7, #28
 8015df0:	46bd      	mov	sp, r7
 8015df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015df6:	4770      	bx	lr

08015df8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8015df8:	b480      	push	{r7}
 8015dfa:	b085      	sub	sp, #20
 8015dfc:	af00      	add	r7, sp, #0
 8015dfe:	6078      	str	r0, [r7, #4]
 8015e00:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	32b0      	adds	r2, #176	; 0xb0
 8015e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e10:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d101      	bne.n	8015e1c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8015e18:	2303      	movs	r3, #3
 8015e1a:	e004      	b.n	8015e26 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	683a      	ldr	r2, [r7, #0]
 8015e20:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8015e24:	2300      	movs	r3, #0
}
 8015e26:	4618      	mov	r0, r3
 8015e28:	3714      	adds	r7, #20
 8015e2a:	46bd      	mov	sp, r7
 8015e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e30:	4770      	bx	lr
	...

08015e34 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8015e34:	b580      	push	{r7, lr}
 8015e36:	b084      	sub	sp, #16
 8015e38:	af00      	add	r7, sp, #0
 8015e3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	32b0      	adds	r2, #176	; 0xb0
 8015e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e4a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8015e4c:	2301      	movs	r3, #1
 8015e4e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015e50:	68bb      	ldr	r3, [r7, #8]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d101      	bne.n	8015e5a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015e56:	2303      	movs	r3, #3
 8015e58:	e025      	b.n	8015ea6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8015e5a:	68bb      	ldr	r3, [r7, #8]
 8015e5c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d11f      	bne.n	8015ea4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8015e64:	68bb      	ldr	r3, [r7, #8]
 8015e66:	2201      	movs	r2, #1
 8015e68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8015e6c:	4b10      	ldr	r3, [pc, #64]	; (8015eb0 <USBD_CDC_TransmitPacket+0x7c>)
 8015e6e:	781b      	ldrb	r3, [r3, #0]
 8015e70:	f003 020f 	and.w	r2, r3, #15
 8015e74:	68bb      	ldr	r3, [r7, #8]
 8015e76:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8015e7a:	6878      	ldr	r0, [r7, #4]
 8015e7c:	4613      	mov	r3, r2
 8015e7e:	009b      	lsls	r3, r3, #2
 8015e80:	4413      	add	r3, r2
 8015e82:	009b      	lsls	r3, r3, #2
 8015e84:	4403      	add	r3, r0
 8015e86:	3318      	adds	r3, #24
 8015e88:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8015e8a:	4b09      	ldr	r3, [pc, #36]	; (8015eb0 <USBD_CDC_TransmitPacket+0x7c>)
 8015e8c:	7819      	ldrb	r1, [r3, #0]
 8015e8e:	68bb      	ldr	r3, [r7, #8]
 8015e90:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8015e94:	68bb      	ldr	r3, [r7, #8]
 8015e96:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8015e9a:	6878      	ldr	r0, [r7, #4]
 8015e9c:	f004 ff97 	bl	801adce <USBD_LL_Transmit>

    ret = USBD_OK;
 8015ea0:	2300      	movs	r3, #0
 8015ea2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8015ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ea6:	4618      	mov	r0, r3
 8015ea8:	3710      	adds	r7, #16
 8015eaa:	46bd      	mov	sp, r7
 8015eac:	bd80      	pop	{r7, pc}
 8015eae:	bf00      	nop
 8015eb0:	24000097 	.word	0x24000097

08015eb4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015eb4:	b580      	push	{r7, lr}
 8015eb6:	b084      	sub	sp, #16
 8015eb8:	af00      	add	r7, sp, #0
 8015eba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	32b0      	adds	r2, #176	; 0xb0
 8015ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015eca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	32b0      	adds	r2, #176	; 0xb0
 8015ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d101      	bne.n	8015ee2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8015ede:	2303      	movs	r3, #3
 8015ee0:	e018      	b.n	8015f14 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	7c1b      	ldrb	r3, [r3, #16]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d10a      	bne.n	8015f00 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015eea:	4b0c      	ldr	r3, [pc, #48]	; (8015f1c <USBD_CDC_ReceivePacket+0x68>)
 8015eec:	7819      	ldrb	r1, [r3, #0]
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015ef4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015ef8:	6878      	ldr	r0, [r7, #4]
 8015efa:	f004 ff89 	bl	801ae10 <USBD_LL_PrepareReceive>
 8015efe:	e008      	b.n	8015f12 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015f00:	4b06      	ldr	r3, [pc, #24]	; (8015f1c <USBD_CDC_ReceivePacket+0x68>)
 8015f02:	7819      	ldrb	r1, [r3, #0]
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015f0a:	2340      	movs	r3, #64	; 0x40
 8015f0c:	6878      	ldr	r0, [r7, #4]
 8015f0e:	f004 ff7f 	bl	801ae10 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015f12:	2300      	movs	r3, #0
}
 8015f14:	4618      	mov	r0, r3
 8015f16:	3710      	adds	r7, #16
 8015f18:	46bd      	mov	sp, r7
 8015f1a:	bd80      	pop	{r7, pc}
 8015f1c:	24000098 	.word	0x24000098

08015f20 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015f20:	b580      	push	{r7, lr}
 8015f22:	b086      	sub	sp, #24
 8015f24:	af00      	add	r7, sp, #0
 8015f26:	60f8      	str	r0, [r7, #12]
 8015f28:	60b9      	str	r1, [r7, #8]
 8015f2a:	4613      	mov	r3, r2
 8015f2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d101      	bne.n	8015f38 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015f34:	2303      	movs	r3, #3
 8015f36:	e01f      	b.n	8015f78 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	2200      	movs	r2, #0
 8015f3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	2200      	movs	r2, #0
 8015f44:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	2200      	movs	r2, #0
 8015f4c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015f50:	68bb      	ldr	r3, [r7, #8]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d003      	beq.n	8015f5e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	68ba      	ldr	r2, [r7, #8]
 8015f5a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	2201      	movs	r2, #1
 8015f62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	79fa      	ldrb	r2, [r7, #7]
 8015f6a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015f6c:	68f8      	ldr	r0, [r7, #12]
 8015f6e:	f004 fdf3 	bl	801ab58 <USBD_LL_Init>
 8015f72:	4603      	mov	r3, r0
 8015f74:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8015f78:	4618      	mov	r0, r3
 8015f7a:	3718      	adds	r7, #24
 8015f7c:	46bd      	mov	sp, r7
 8015f7e:	bd80      	pop	{r7, pc}

08015f80 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015f80:	b580      	push	{r7, lr}
 8015f82:	b084      	sub	sp, #16
 8015f84:	af00      	add	r7, sp, #0
 8015f86:	6078      	str	r0, [r7, #4]
 8015f88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015f8a:	2300      	movs	r3, #0
 8015f8c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015f8e:	683b      	ldr	r3, [r7, #0]
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d101      	bne.n	8015f98 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015f94:	2303      	movs	r3, #3
 8015f96:	e025      	b.n	8015fe4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	683a      	ldr	r2, [r7, #0]
 8015f9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	32ae      	adds	r2, #174	; 0xae
 8015faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d00f      	beq.n	8015fd4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	32ae      	adds	r2, #174	; 0xae
 8015fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fc4:	f107 020e 	add.w	r2, r7, #14
 8015fc8:	4610      	mov	r0, r2
 8015fca:	4798      	blx	r3
 8015fcc:	4602      	mov	r2, r0
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015fda:	1c5a      	adds	r2, r3, #1
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8015fe2:	2300      	movs	r3, #0
}
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	3710      	adds	r7, #16
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	bd80      	pop	{r7, pc}

08015fec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015fec:	b580      	push	{r7, lr}
 8015fee:	b082      	sub	sp, #8
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015ff4:	6878      	ldr	r0, [r7, #4]
 8015ff6:	f004 fe01 	bl	801abfc <USBD_LL_Start>
 8015ffa:	4603      	mov	r3, r0
}
 8015ffc:	4618      	mov	r0, r3
 8015ffe:	3708      	adds	r7, #8
 8016000:	46bd      	mov	sp, r7
 8016002:	bd80      	pop	{r7, pc}

08016004 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8016004:	b480      	push	{r7}
 8016006:	b083      	sub	sp, #12
 8016008:	af00      	add	r7, sp, #0
 801600a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801600c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801600e:	4618      	mov	r0, r3
 8016010:	370c      	adds	r7, #12
 8016012:	46bd      	mov	sp, r7
 8016014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016018:	4770      	bx	lr

0801601a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801601a:	b580      	push	{r7, lr}
 801601c:	b084      	sub	sp, #16
 801601e:	af00      	add	r7, sp, #0
 8016020:	6078      	str	r0, [r7, #4]
 8016022:	460b      	mov	r3, r1
 8016024:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8016026:	2300      	movs	r3, #0
 8016028:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016030:	2b00      	cmp	r3, #0
 8016032:	d009      	beq.n	8016048 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801603a:	681b      	ldr	r3, [r3, #0]
 801603c:	78fa      	ldrb	r2, [r7, #3]
 801603e:	4611      	mov	r1, r2
 8016040:	6878      	ldr	r0, [r7, #4]
 8016042:	4798      	blx	r3
 8016044:	4603      	mov	r3, r0
 8016046:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016048:	7bfb      	ldrb	r3, [r7, #15]
}
 801604a:	4618      	mov	r0, r3
 801604c:	3710      	adds	r7, #16
 801604e:	46bd      	mov	sp, r7
 8016050:	bd80      	pop	{r7, pc}

08016052 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016052:	b580      	push	{r7, lr}
 8016054:	b084      	sub	sp, #16
 8016056:	af00      	add	r7, sp, #0
 8016058:	6078      	str	r0, [r7, #4]
 801605a:	460b      	mov	r3, r1
 801605c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801605e:	2300      	movs	r3, #0
 8016060:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016068:	685b      	ldr	r3, [r3, #4]
 801606a:	78fa      	ldrb	r2, [r7, #3]
 801606c:	4611      	mov	r1, r2
 801606e:	6878      	ldr	r0, [r7, #4]
 8016070:	4798      	blx	r3
 8016072:	4603      	mov	r3, r0
 8016074:	2b00      	cmp	r3, #0
 8016076:	d001      	beq.n	801607c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8016078:	2303      	movs	r3, #3
 801607a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801607c:	7bfb      	ldrb	r3, [r7, #15]
}
 801607e:	4618      	mov	r0, r3
 8016080:	3710      	adds	r7, #16
 8016082:	46bd      	mov	sp, r7
 8016084:	bd80      	pop	{r7, pc}

08016086 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8016086:	b580      	push	{r7, lr}
 8016088:	b084      	sub	sp, #16
 801608a:	af00      	add	r7, sp, #0
 801608c:	6078      	str	r0, [r7, #4]
 801608e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016096:	6839      	ldr	r1, [r7, #0]
 8016098:	4618      	mov	r0, r3
 801609a:	f001 f90e 	bl	80172ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	2201      	movs	r2, #1
 80160a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80160ac:	461a      	mov	r2, r3
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80160ba:	f003 031f 	and.w	r3, r3, #31
 80160be:	2b02      	cmp	r3, #2
 80160c0:	d01a      	beq.n	80160f8 <USBD_LL_SetupStage+0x72>
 80160c2:	2b02      	cmp	r3, #2
 80160c4:	d822      	bhi.n	801610c <USBD_LL_SetupStage+0x86>
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d002      	beq.n	80160d0 <USBD_LL_SetupStage+0x4a>
 80160ca:	2b01      	cmp	r3, #1
 80160cc:	d00a      	beq.n	80160e4 <USBD_LL_SetupStage+0x5e>
 80160ce:	e01d      	b.n	801610c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80160d6:	4619      	mov	r1, r3
 80160d8:	6878      	ldr	r0, [r7, #4]
 80160da:	f000 fb65 	bl	80167a8 <USBD_StdDevReq>
 80160de:	4603      	mov	r3, r0
 80160e0:	73fb      	strb	r3, [r7, #15]
      break;
 80160e2:	e020      	b.n	8016126 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80160ea:	4619      	mov	r1, r3
 80160ec:	6878      	ldr	r0, [r7, #4]
 80160ee:	f000 fbcd 	bl	801688c <USBD_StdItfReq>
 80160f2:	4603      	mov	r3, r0
 80160f4:	73fb      	strb	r3, [r7, #15]
      break;
 80160f6:	e016      	b.n	8016126 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80160fe:	4619      	mov	r1, r3
 8016100:	6878      	ldr	r0, [r7, #4]
 8016102:	f000 fc2f 	bl	8016964 <USBD_StdEPReq>
 8016106:	4603      	mov	r3, r0
 8016108:	73fb      	strb	r3, [r7, #15]
      break;
 801610a:	e00c      	b.n	8016126 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8016112:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016116:	b2db      	uxtb	r3, r3
 8016118:	4619      	mov	r1, r3
 801611a:	6878      	ldr	r0, [r7, #4]
 801611c:	f004 fdce 	bl	801acbc <USBD_LL_StallEP>
 8016120:	4603      	mov	r3, r0
 8016122:	73fb      	strb	r3, [r7, #15]
      break;
 8016124:	bf00      	nop
  }

  return ret;
 8016126:	7bfb      	ldrb	r3, [r7, #15]
}
 8016128:	4618      	mov	r0, r3
 801612a:	3710      	adds	r7, #16
 801612c:	46bd      	mov	sp, r7
 801612e:	bd80      	pop	{r7, pc}

08016130 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8016130:	b580      	push	{r7, lr}
 8016132:	b086      	sub	sp, #24
 8016134:	af00      	add	r7, sp, #0
 8016136:	60f8      	str	r0, [r7, #12]
 8016138:	460b      	mov	r3, r1
 801613a:	607a      	str	r2, [r7, #4]
 801613c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801613e:	2300      	movs	r3, #0
 8016140:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8016142:	7afb      	ldrb	r3, [r7, #11]
 8016144:	2b00      	cmp	r3, #0
 8016146:	d16e      	bne.n	8016226 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801614e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016156:	2b03      	cmp	r3, #3
 8016158:	f040 8098 	bne.w	801628c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801615c:	693b      	ldr	r3, [r7, #16]
 801615e:	689a      	ldr	r2, [r3, #8]
 8016160:	693b      	ldr	r3, [r7, #16]
 8016162:	68db      	ldr	r3, [r3, #12]
 8016164:	429a      	cmp	r2, r3
 8016166:	d913      	bls.n	8016190 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8016168:	693b      	ldr	r3, [r7, #16]
 801616a:	689a      	ldr	r2, [r3, #8]
 801616c:	693b      	ldr	r3, [r7, #16]
 801616e:	68db      	ldr	r3, [r3, #12]
 8016170:	1ad2      	subs	r2, r2, r3
 8016172:	693b      	ldr	r3, [r7, #16]
 8016174:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8016176:	693b      	ldr	r3, [r7, #16]
 8016178:	68da      	ldr	r2, [r3, #12]
 801617a:	693b      	ldr	r3, [r7, #16]
 801617c:	689b      	ldr	r3, [r3, #8]
 801617e:	4293      	cmp	r3, r2
 8016180:	bf28      	it	cs
 8016182:	4613      	movcs	r3, r2
 8016184:	461a      	mov	r2, r3
 8016186:	6879      	ldr	r1, [r7, #4]
 8016188:	68f8      	ldr	r0, [r7, #12]
 801618a:	f001 f98a 	bl	80174a2 <USBD_CtlContinueRx>
 801618e:	e07d      	b.n	801628c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8016196:	f003 031f 	and.w	r3, r3, #31
 801619a:	2b02      	cmp	r3, #2
 801619c:	d014      	beq.n	80161c8 <USBD_LL_DataOutStage+0x98>
 801619e:	2b02      	cmp	r3, #2
 80161a0:	d81d      	bhi.n	80161de <USBD_LL_DataOutStage+0xae>
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d002      	beq.n	80161ac <USBD_LL_DataOutStage+0x7c>
 80161a6:	2b01      	cmp	r3, #1
 80161a8:	d003      	beq.n	80161b2 <USBD_LL_DataOutStage+0x82>
 80161aa:	e018      	b.n	80161de <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80161ac:	2300      	movs	r3, #0
 80161ae:	75bb      	strb	r3, [r7, #22]
            break;
 80161b0:	e018      	b.n	80161e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80161b8:	b2db      	uxtb	r3, r3
 80161ba:	4619      	mov	r1, r3
 80161bc:	68f8      	ldr	r0, [r7, #12]
 80161be:	f000 fa64 	bl	801668a <USBD_CoreFindIF>
 80161c2:	4603      	mov	r3, r0
 80161c4:	75bb      	strb	r3, [r7, #22]
            break;
 80161c6:	e00d      	b.n	80161e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80161ce:	b2db      	uxtb	r3, r3
 80161d0:	4619      	mov	r1, r3
 80161d2:	68f8      	ldr	r0, [r7, #12]
 80161d4:	f000 fa66 	bl	80166a4 <USBD_CoreFindEP>
 80161d8:	4603      	mov	r3, r0
 80161da:	75bb      	strb	r3, [r7, #22]
            break;
 80161dc:	e002      	b.n	80161e4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80161de:	2300      	movs	r3, #0
 80161e0:	75bb      	strb	r3, [r7, #22]
            break;
 80161e2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80161e4:	7dbb      	ldrb	r3, [r7, #22]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d119      	bne.n	801621e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161f0:	b2db      	uxtb	r3, r3
 80161f2:	2b03      	cmp	r3, #3
 80161f4:	d113      	bne.n	801621e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80161f6:	7dba      	ldrb	r2, [r7, #22]
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	32ae      	adds	r2, #174	; 0xae
 80161fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016200:	691b      	ldr	r3, [r3, #16]
 8016202:	2b00      	cmp	r3, #0
 8016204:	d00b      	beq.n	801621e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8016206:	7dba      	ldrb	r2, [r7, #22]
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801620e:	7dba      	ldrb	r2, [r7, #22]
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	32ae      	adds	r2, #174	; 0xae
 8016214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016218:	691b      	ldr	r3, [r3, #16]
 801621a:	68f8      	ldr	r0, [r7, #12]
 801621c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801621e:	68f8      	ldr	r0, [r7, #12]
 8016220:	f001 f950 	bl	80174c4 <USBD_CtlSendStatus>
 8016224:	e032      	b.n	801628c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8016226:	7afb      	ldrb	r3, [r7, #11]
 8016228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801622c:	b2db      	uxtb	r3, r3
 801622e:	4619      	mov	r1, r3
 8016230:	68f8      	ldr	r0, [r7, #12]
 8016232:	f000 fa37 	bl	80166a4 <USBD_CoreFindEP>
 8016236:	4603      	mov	r3, r0
 8016238:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801623a:	7dbb      	ldrb	r3, [r7, #22]
 801623c:	2bff      	cmp	r3, #255	; 0xff
 801623e:	d025      	beq.n	801628c <USBD_LL_DataOutStage+0x15c>
 8016240:	7dbb      	ldrb	r3, [r7, #22]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d122      	bne.n	801628c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801624c:	b2db      	uxtb	r3, r3
 801624e:	2b03      	cmp	r3, #3
 8016250:	d117      	bne.n	8016282 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8016252:	7dba      	ldrb	r2, [r7, #22]
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	32ae      	adds	r2, #174	; 0xae
 8016258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801625c:	699b      	ldr	r3, [r3, #24]
 801625e:	2b00      	cmp	r3, #0
 8016260:	d00f      	beq.n	8016282 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8016262:	7dba      	ldrb	r2, [r7, #22]
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801626a:	7dba      	ldrb	r2, [r7, #22]
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	32ae      	adds	r2, #174	; 0xae
 8016270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016274:	699b      	ldr	r3, [r3, #24]
 8016276:	7afa      	ldrb	r2, [r7, #11]
 8016278:	4611      	mov	r1, r2
 801627a:	68f8      	ldr	r0, [r7, #12]
 801627c:	4798      	blx	r3
 801627e:	4603      	mov	r3, r0
 8016280:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8016282:	7dfb      	ldrb	r3, [r7, #23]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d001      	beq.n	801628c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8016288:	7dfb      	ldrb	r3, [r7, #23]
 801628a:	e000      	b.n	801628e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801628c:	2300      	movs	r3, #0
}
 801628e:	4618      	mov	r0, r3
 8016290:	3718      	adds	r7, #24
 8016292:	46bd      	mov	sp, r7
 8016294:	bd80      	pop	{r7, pc}

08016296 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8016296:	b580      	push	{r7, lr}
 8016298:	b086      	sub	sp, #24
 801629a:	af00      	add	r7, sp, #0
 801629c:	60f8      	str	r0, [r7, #12]
 801629e:	460b      	mov	r3, r1
 80162a0:	607a      	str	r2, [r7, #4]
 80162a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80162a4:	7afb      	ldrb	r3, [r7, #11]
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d16f      	bne.n	801638a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	3314      	adds	r3, #20
 80162ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80162b6:	2b02      	cmp	r3, #2
 80162b8:	d15a      	bne.n	8016370 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80162ba:	693b      	ldr	r3, [r7, #16]
 80162bc:	689a      	ldr	r2, [r3, #8]
 80162be:	693b      	ldr	r3, [r7, #16]
 80162c0:	68db      	ldr	r3, [r3, #12]
 80162c2:	429a      	cmp	r2, r3
 80162c4:	d914      	bls.n	80162f0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80162c6:	693b      	ldr	r3, [r7, #16]
 80162c8:	689a      	ldr	r2, [r3, #8]
 80162ca:	693b      	ldr	r3, [r7, #16]
 80162cc:	68db      	ldr	r3, [r3, #12]
 80162ce:	1ad2      	subs	r2, r2, r3
 80162d0:	693b      	ldr	r3, [r7, #16]
 80162d2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80162d4:	693b      	ldr	r3, [r7, #16]
 80162d6:	689b      	ldr	r3, [r3, #8]
 80162d8:	461a      	mov	r2, r3
 80162da:	6879      	ldr	r1, [r7, #4]
 80162dc:	68f8      	ldr	r0, [r7, #12]
 80162de:	f001 f8b2 	bl	8017446 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80162e2:	2300      	movs	r3, #0
 80162e4:	2200      	movs	r2, #0
 80162e6:	2100      	movs	r1, #0
 80162e8:	68f8      	ldr	r0, [r7, #12]
 80162ea:	f004 fd91 	bl	801ae10 <USBD_LL_PrepareReceive>
 80162ee:	e03f      	b.n	8016370 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80162f0:	693b      	ldr	r3, [r7, #16]
 80162f2:	68da      	ldr	r2, [r3, #12]
 80162f4:	693b      	ldr	r3, [r7, #16]
 80162f6:	689b      	ldr	r3, [r3, #8]
 80162f8:	429a      	cmp	r2, r3
 80162fa:	d11c      	bne.n	8016336 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80162fc:	693b      	ldr	r3, [r7, #16]
 80162fe:	685a      	ldr	r2, [r3, #4]
 8016300:	693b      	ldr	r3, [r7, #16]
 8016302:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8016304:	429a      	cmp	r2, r3
 8016306:	d316      	bcc.n	8016336 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8016308:	693b      	ldr	r3, [r7, #16]
 801630a:	685a      	ldr	r2, [r3, #4]
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8016312:	429a      	cmp	r2, r3
 8016314:	d20f      	bcs.n	8016336 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8016316:	2200      	movs	r2, #0
 8016318:	2100      	movs	r1, #0
 801631a:	68f8      	ldr	r0, [r7, #12]
 801631c:	f001 f893 	bl	8017446 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	2200      	movs	r2, #0
 8016324:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016328:	2300      	movs	r3, #0
 801632a:	2200      	movs	r2, #0
 801632c:	2100      	movs	r1, #0
 801632e:	68f8      	ldr	r0, [r7, #12]
 8016330:	f004 fd6e 	bl	801ae10 <USBD_LL_PrepareReceive>
 8016334:	e01c      	b.n	8016370 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801633c:	b2db      	uxtb	r3, r3
 801633e:	2b03      	cmp	r3, #3
 8016340:	d10f      	bne.n	8016362 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8016342:	68fb      	ldr	r3, [r7, #12]
 8016344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016348:	68db      	ldr	r3, [r3, #12]
 801634a:	2b00      	cmp	r3, #0
 801634c:	d009      	beq.n	8016362 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	2200      	movs	r2, #0
 8016352:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801635c:	68db      	ldr	r3, [r3, #12]
 801635e:	68f8      	ldr	r0, [r7, #12]
 8016360:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8016362:	2180      	movs	r1, #128	; 0x80
 8016364:	68f8      	ldr	r0, [r7, #12]
 8016366:	f004 fca9 	bl	801acbc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801636a:	68f8      	ldr	r0, [r7, #12]
 801636c:	f001 f8bd 	bl	80174ea <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8016370:	68fb      	ldr	r3, [r7, #12]
 8016372:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8016376:	2b00      	cmp	r3, #0
 8016378:	d03a      	beq.n	80163f0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801637a:	68f8      	ldr	r0, [r7, #12]
 801637c:	f7ff fe42 	bl	8016004 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	2200      	movs	r2, #0
 8016384:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8016388:	e032      	b.n	80163f0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801638a:	7afb      	ldrb	r3, [r7, #11]
 801638c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016390:	b2db      	uxtb	r3, r3
 8016392:	4619      	mov	r1, r3
 8016394:	68f8      	ldr	r0, [r7, #12]
 8016396:	f000 f985 	bl	80166a4 <USBD_CoreFindEP>
 801639a:	4603      	mov	r3, r0
 801639c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801639e:	7dfb      	ldrb	r3, [r7, #23]
 80163a0:	2bff      	cmp	r3, #255	; 0xff
 80163a2:	d025      	beq.n	80163f0 <USBD_LL_DataInStage+0x15a>
 80163a4:	7dfb      	ldrb	r3, [r7, #23]
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d122      	bne.n	80163f0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80163b0:	b2db      	uxtb	r3, r3
 80163b2:	2b03      	cmp	r3, #3
 80163b4:	d11c      	bne.n	80163f0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80163b6:	7dfa      	ldrb	r2, [r7, #23]
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	32ae      	adds	r2, #174	; 0xae
 80163bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163c0:	695b      	ldr	r3, [r3, #20]
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d014      	beq.n	80163f0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80163c6:	7dfa      	ldrb	r2, [r7, #23]
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80163ce:	7dfa      	ldrb	r2, [r7, #23]
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	32ae      	adds	r2, #174	; 0xae
 80163d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163d8:	695b      	ldr	r3, [r3, #20]
 80163da:	7afa      	ldrb	r2, [r7, #11]
 80163dc:	4611      	mov	r1, r2
 80163de:	68f8      	ldr	r0, [r7, #12]
 80163e0:	4798      	blx	r3
 80163e2:	4603      	mov	r3, r0
 80163e4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80163e6:	7dbb      	ldrb	r3, [r7, #22]
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d001      	beq.n	80163f0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80163ec:	7dbb      	ldrb	r3, [r7, #22]
 80163ee:	e000      	b.n	80163f2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80163f0:	2300      	movs	r3, #0
}
 80163f2:	4618      	mov	r0, r3
 80163f4:	3718      	adds	r7, #24
 80163f6:	46bd      	mov	sp, r7
 80163f8:	bd80      	pop	{r7, pc}

080163fa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80163fa:	b580      	push	{r7, lr}
 80163fc:	b084      	sub	sp, #16
 80163fe:	af00      	add	r7, sp, #0
 8016400:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8016402:	2300      	movs	r3, #0
 8016404:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	2201      	movs	r2, #1
 801640a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	2200      	movs	r2, #0
 8016412:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	2200      	movs	r2, #0
 801641a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	2200      	movs	r2, #0
 8016420:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	2200      	movs	r2, #0
 8016428:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016432:	2b00      	cmp	r3, #0
 8016434:	d014      	beq.n	8016460 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801643c:	685b      	ldr	r3, [r3, #4]
 801643e:	2b00      	cmp	r3, #0
 8016440:	d00e      	beq.n	8016460 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016448:	685b      	ldr	r3, [r3, #4]
 801644a:	687a      	ldr	r2, [r7, #4]
 801644c:	6852      	ldr	r2, [r2, #4]
 801644e:	b2d2      	uxtb	r2, r2
 8016450:	4611      	mov	r1, r2
 8016452:	6878      	ldr	r0, [r7, #4]
 8016454:	4798      	blx	r3
 8016456:	4603      	mov	r3, r0
 8016458:	2b00      	cmp	r3, #0
 801645a:	d001      	beq.n	8016460 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801645c:	2303      	movs	r3, #3
 801645e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016460:	2340      	movs	r3, #64	; 0x40
 8016462:	2200      	movs	r2, #0
 8016464:	2100      	movs	r1, #0
 8016466:	6878      	ldr	r0, [r7, #4]
 8016468:	f004 fbe3 	bl	801ac32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	2201      	movs	r2, #1
 8016470:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	2240      	movs	r2, #64	; 0x40
 8016478:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801647c:	2340      	movs	r3, #64	; 0x40
 801647e:	2200      	movs	r2, #0
 8016480:	2180      	movs	r1, #128	; 0x80
 8016482:	6878      	ldr	r0, [r7, #4]
 8016484:	f004 fbd5 	bl	801ac32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	2201      	movs	r2, #1
 801648c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	2240      	movs	r2, #64	; 0x40
 8016492:	621a      	str	r2, [r3, #32]

  return ret;
 8016494:	7bfb      	ldrb	r3, [r7, #15]
}
 8016496:	4618      	mov	r0, r3
 8016498:	3710      	adds	r7, #16
 801649a:	46bd      	mov	sp, r7
 801649c:	bd80      	pop	{r7, pc}

0801649e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801649e:	b480      	push	{r7}
 80164a0:	b083      	sub	sp, #12
 80164a2:	af00      	add	r7, sp, #0
 80164a4:	6078      	str	r0, [r7, #4]
 80164a6:	460b      	mov	r3, r1
 80164a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	78fa      	ldrb	r2, [r7, #3]
 80164ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80164b0:	2300      	movs	r3, #0
}
 80164b2:	4618      	mov	r0, r3
 80164b4:	370c      	adds	r7, #12
 80164b6:	46bd      	mov	sp, r7
 80164b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164bc:	4770      	bx	lr

080164be <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80164be:	b480      	push	{r7}
 80164c0:	b083      	sub	sp, #12
 80164c2:	af00      	add	r7, sp, #0
 80164c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80164cc:	b2db      	uxtb	r3, r3
 80164ce:	2b04      	cmp	r3, #4
 80164d0:	d006      	beq.n	80164e0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80164d8:	b2da      	uxtb	r2, r3
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	2204      	movs	r2, #4
 80164e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80164e8:	2300      	movs	r3, #0
}
 80164ea:	4618      	mov	r0, r3
 80164ec:	370c      	adds	r7, #12
 80164ee:	46bd      	mov	sp, r7
 80164f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164f4:	4770      	bx	lr

080164f6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80164f6:	b480      	push	{r7}
 80164f8:	b083      	sub	sp, #12
 80164fa:	af00      	add	r7, sp, #0
 80164fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016504:	b2db      	uxtb	r3, r3
 8016506:	2b04      	cmp	r3, #4
 8016508:	d106      	bne.n	8016518 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8016510:	b2da      	uxtb	r2, r3
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8016518:	2300      	movs	r3, #0
}
 801651a:	4618      	mov	r0, r3
 801651c:	370c      	adds	r7, #12
 801651e:	46bd      	mov	sp, r7
 8016520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016524:	4770      	bx	lr

08016526 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8016526:	b580      	push	{r7, lr}
 8016528:	b082      	sub	sp, #8
 801652a:	af00      	add	r7, sp, #0
 801652c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016534:	b2db      	uxtb	r3, r3
 8016536:	2b03      	cmp	r3, #3
 8016538:	d110      	bne.n	801655c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016540:	2b00      	cmp	r3, #0
 8016542:	d00b      	beq.n	801655c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801654a:	69db      	ldr	r3, [r3, #28]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d005      	beq.n	801655c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016556:	69db      	ldr	r3, [r3, #28]
 8016558:	6878      	ldr	r0, [r7, #4]
 801655a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801655c:	2300      	movs	r3, #0
}
 801655e:	4618      	mov	r0, r3
 8016560:	3708      	adds	r7, #8
 8016562:	46bd      	mov	sp, r7
 8016564:	bd80      	pop	{r7, pc}

08016566 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8016566:	b580      	push	{r7, lr}
 8016568:	b082      	sub	sp, #8
 801656a:	af00      	add	r7, sp, #0
 801656c:	6078      	str	r0, [r7, #4]
 801656e:	460b      	mov	r3, r1
 8016570:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	32ae      	adds	r2, #174	; 0xae
 801657c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016580:	2b00      	cmp	r3, #0
 8016582:	d101      	bne.n	8016588 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8016584:	2303      	movs	r3, #3
 8016586:	e01c      	b.n	80165c2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801658e:	b2db      	uxtb	r3, r3
 8016590:	2b03      	cmp	r3, #3
 8016592:	d115      	bne.n	80165c0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	32ae      	adds	r2, #174	; 0xae
 801659e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165a2:	6a1b      	ldr	r3, [r3, #32]
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d00b      	beq.n	80165c0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	32ae      	adds	r2, #174	; 0xae
 80165b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165b6:	6a1b      	ldr	r3, [r3, #32]
 80165b8:	78fa      	ldrb	r2, [r7, #3]
 80165ba:	4611      	mov	r1, r2
 80165bc:	6878      	ldr	r0, [r7, #4]
 80165be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80165c0:	2300      	movs	r3, #0
}
 80165c2:	4618      	mov	r0, r3
 80165c4:	3708      	adds	r7, #8
 80165c6:	46bd      	mov	sp, r7
 80165c8:	bd80      	pop	{r7, pc}

080165ca <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80165ca:	b580      	push	{r7, lr}
 80165cc:	b082      	sub	sp, #8
 80165ce:	af00      	add	r7, sp, #0
 80165d0:	6078      	str	r0, [r7, #4]
 80165d2:	460b      	mov	r3, r1
 80165d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	32ae      	adds	r2, #174	; 0xae
 80165e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d101      	bne.n	80165ec <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80165e8:	2303      	movs	r3, #3
 80165ea:	e01c      	b.n	8016626 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80165f2:	b2db      	uxtb	r3, r3
 80165f4:	2b03      	cmp	r3, #3
 80165f6:	d115      	bne.n	8016624 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	32ae      	adds	r2, #174	; 0xae
 8016602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016608:	2b00      	cmp	r3, #0
 801660a:	d00b      	beq.n	8016624 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	32ae      	adds	r2, #174	; 0xae
 8016616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801661c:	78fa      	ldrb	r2, [r7, #3]
 801661e:	4611      	mov	r1, r2
 8016620:	6878      	ldr	r0, [r7, #4]
 8016622:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016624:	2300      	movs	r3, #0
}
 8016626:	4618      	mov	r0, r3
 8016628:	3708      	adds	r7, #8
 801662a:	46bd      	mov	sp, r7
 801662c:	bd80      	pop	{r7, pc}

0801662e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801662e:	b480      	push	{r7}
 8016630:	b083      	sub	sp, #12
 8016632:	af00      	add	r7, sp, #0
 8016634:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016636:	2300      	movs	r3, #0
}
 8016638:	4618      	mov	r0, r3
 801663a:	370c      	adds	r7, #12
 801663c:	46bd      	mov	sp, r7
 801663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016642:	4770      	bx	lr

08016644 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8016644:	b580      	push	{r7, lr}
 8016646:	b084      	sub	sp, #16
 8016648:	af00      	add	r7, sp, #0
 801664a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801664c:	2300      	movs	r3, #0
 801664e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	2201      	movs	r2, #1
 8016654:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801665e:	2b00      	cmp	r3, #0
 8016660:	d00e      	beq.n	8016680 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016668:	685b      	ldr	r3, [r3, #4]
 801666a:	687a      	ldr	r2, [r7, #4]
 801666c:	6852      	ldr	r2, [r2, #4]
 801666e:	b2d2      	uxtb	r2, r2
 8016670:	4611      	mov	r1, r2
 8016672:	6878      	ldr	r0, [r7, #4]
 8016674:	4798      	blx	r3
 8016676:	4603      	mov	r3, r0
 8016678:	2b00      	cmp	r3, #0
 801667a:	d001      	beq.n	8016680 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801667c:	2303      	movs	r3, #3
 801667e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016680:	7bfb      	ldrb	r3, [r7, #15]
}
 8016682:	4618      	mov	r0, r3
 8016684:	3710      	adds	r7, #16
 8016686:	46bd      	mov	sp, r7
 8016688:	bd80      	pop	{r7, pc}

0801668a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801668a:	b480      	push	{r7}
 801668c:	b083      	sub	sp, #12
 801668e:	af00      	add	r7, sp, #0
 8016690:	6078      	str	r0, [r7, #4]
 8016692:	460b      	mov	r3, r1
 8016694:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016696:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016698:	4618      	mov	r0, r3
 801669a:	370c      	adds	r7, #12
 801669c:	46bd      	mov	sp, r7
 801669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166a2:	4770      	bx	lr

080166a4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80166a4:	b480      	push	{r7}
 80166a6:	b083      	sub	sp, #12
 80166a8:	af00      	add	r7, sp, #0
 80166aa:	6078      	str	r0, [r7, #4]
 80166ac:	460b      	mov	r3, r1
 80166ae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80166b0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80166b2:	4618      	mov	r0, r3
 80166b4:	370c      	adds	r7, #12
 80166b6:	46bd      	mov	sp, r7
 80166b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166bc:	4770      	bx	lr

080166be <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80166be:	b580      	push	{r7, lr}
 80166c0:	b086      	sub	sp, #24
 80166c2:	af00      	add	r7, sp, #0
 80166c4:	6078      	str	r0, [r7, #4]
 80166c6:	460b      	mov	r3, r1
 80166c8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80166d2:	2300      	movs	r3, #0
 80166d4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	885b      	ldrh	r3, [r3, #2]
 80166da:	b29a      	uxth	r2, r3
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	781b      	ldrb	r3, [r3, #0]
 80166e0:	b29b      	uxth	r3, r3
 80166e2:	429a      	cmp	r2, r3
 80166e4:	d920      	bls.n	8016728 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80166e6:	68fb      	ldr	r3, [r7, #12]
 80166e8:	781b      	ldrb	r3, [r3, #0]
 80166ea:	b29b      	uxth	r3, r3
 80166ec:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80166ee:	e013      	b.n	8016718 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80166f0:	f107 030a 	add.w	r3, r7, #10
 80166f4:	4619      	mov	r1, r3
 80166f6:	6978      	ldr	r0, [r7, #20]
 80166f8:	f000 f81b 	bl	8016732 <USBD_GetNextDesc>
 80166fc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80166fe:	697b      	ldr	r3, [r7, #20]
 8016700:	785b      	ldrb	r3, [r3, #1]
 8016702:	2b05      	cmp	r3, #5
 8016704:	d108      	bne.n	8016718 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8016706:	697b      	ldr	r3, [r7, #20]
 8016708:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801670a:	693b      	ldr	r3, [r7, #16]
 801670c:	789b      	ldrb	r3, [r3, #2]
 801670e:	78fa      	ldrb	r2, [r7, #3]
 8016710:	429a      	cmp	r2, r3
 8016712:	d008      	beq.n	8016726 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8016714:	2300      	movs	r3, #0
 8016716:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	885b      	ldrh	r3, [r3, #2]
 801671c:	b29a      	uxth	r2, r3
 801671e:	897b      	ldrh	r3, [r7, #10]
 8016720:	429a      	cmp	r2, r3
 8016722:	d8e5      	bhi.n	80166f0 <USBD_GetEpDesc+0x32>
 8016724:	e000      	b.n	8016728 <USBD_GetEpDesc+0x6a>
          break;
 8016726:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8016728:	693b      	ldr	r3, [r7, #16]
}
 801672a:	4618      	mov	r0, r3
 801672c:	3718      	adds	r7, #24
 801672e:	46bd      	mov	sp, r7
 8016730:	bd80      	pop	{r7, pc}

08016732 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8016732:	b480      	push	{r7}
 8016734:	b085      	sub	sp, #20
 8016736:	af00      	add	r7, sp, #0
 8016738:	6078      	str	r0, [r7, #4]
 801673a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8016740:	683b      	ldr	r3, [r7, #0]
 8016742:	881a      	ldrh	r2, [r3, #0]
 8016744:	68fb      	ldr	r3, [r7, #12]
 8016746:	781b      	ldrb	r3, [r3, #0]
 8016748:	b29b      	uxth	r3, r3
 801674a:	4413      	add	r3, r2
 801674c:	b29a      	uxth	r2, r3
 801674e:	683b      	ldr	r3, [r7, #0]
 8016750:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	781b      	ldrb	r3, [r3, #0]
 8016756:	461a      	mov	r2, r3
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	4413      	add	r3, r2
 801675c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801675e:	68fb      	ldr	r3, [r7, #12]
}
 8016760:	4618      	mov	r0, r3
 8016762:	3714      	adds	r7, #20
 8016764:	46bd      	mov	sp, r7
 8016766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801676a:	4770      	bx	lr

0801676c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801676c:	b480      	push	{r7}
 801676e:	b087      	sub	sp, #28
 8016770:	af00      	add	r7, sp, #0
 8016772:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016778:	697b      	ldr	r3, [r7, #20]
 801677a:	781b      	ldrb	r3, [r3, #0]
 801677c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801677e:	697b      	ldr	r3, [r7, #20]
 8016780:	3301      	adds	r3, #1
 8016782:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016784:	697b      	ldr	r3, [r7, #20]
 8016786:	781b      	ldrb	r3, [r3, #0]
 8016788:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801678a:	8a3b      	ldrh	r3, [r7, #16]
 801678c:	021b      	lsls	r3, r3, #8
 801678e:	b21a      	sxth	r2, r3
 8016790:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016794:	4313      	orrs	r3, r2
 8016796:	b21b      	sxth	r3, r3
 8016798:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801679a:	89fb      	ldrh	r3, [r7, #14]
}
 801679c:	4618      	mov	r0, r3
 801679e:	371c      	adds	r7, #28
 80167a0:	46bd      	mov	sp, r7
 80167a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167a6:	4770      	bx	lr

080167a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80167a8:	b580      	push	{r7, lr}
 80167aa:	b084      	sub	sp, #16
 80167ac:	af00      	add	r7, sp, #0
 80167ae:	6078      	str	r0, [r7, #4]
 80167b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80167b2:	2300      	movs	r3, #0
 80167b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80167b6:	683b      	ldr	r3, [r7, #0]
 80167b8:	781b      	ldrb	r3, [r3, #0]
 80167ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80167be:	2b40      	cmp	r3, #64	; 0x40
 80167c0:	d005      	beq.n	80167ce <USBD_StdDevReq+0x26>
 80167c2:	2b40      	cmp	r3, #64	; 0x40
 80167c4:	d857      	bhi.n	8016876 <USBD_StdDevReq+0xce>
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d00f      	beq.n	80167ea <USBD_StdDevReq+0x42>
 80167ca:	2b20      	cmp	r3, #32
 80167cc:	d153      	bne.n	8016876 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	32ae      	adds	r2, #174	; 0xae
 80167d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80167dc:	689b      	ldr	r3, [r3, #8]
 80167de:	6839      	ldr	r1, [r7, #0]
 80167e0:	6878      	ldr	r0, [r7, #4]
 80167e2:	4798      	blx	r3
 80167e4:	4603      	mov	r3, r0
 80167e6:	73fb      	strb	r3, [r7, #15]
      break;
 80167e8:	e04a      	b.n	8016880 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80167ea:	683b      	ldr	r3, [r7, #0]
 80167ec:	785b      	ldrb	r3, [r3, #1]
 80167ee:	2b09      	cmp	r3, #9
 80167f0:	d83b      	bhi.n	801686a <USBD_StdDevReq+0xc2>
 80167f2:	a201      	add	r2, pc, #4	; (adr r2, 80167f8 <USBD_StdDevReq+0x50>)
 80167f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80167f8:	0801684d 	.word	0x0801684d
 80167fc:	08016861 	.word	0x08016861
 8016800:	0801686b 	.word	0x0801686b
 8016804:	08016857 	.word	0x08016857
 8016808:	0801686b 	.word	0x0801686b
 801680c:	0801682b 	.word	0x0801682b
 8016810:	08016821 	.word	0x08016821
 8016814:	0801686b 	.word	0x0801686b
 8016818:	08016843 	.word	0x08016843
 801681c:	08016835 	.word	0x08016835
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016820:	6839      	ldr	r1, [r7, #0]
 8016822:	6878      	ldr	r0, [r7, #4]
 8016824:	f000 fa3c 	bl	8016ca0 <USBD_GetDescriptor>
          break;
 8016828:	e024      	b.n	8016874 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801682a:	6839      	ldr	r1, [r7, #0]
 801682c:	6878      	ldr	r0, [r7, #4]
 801682e:	f000 fba1 	bl	8016f74 <USBD_SetAddress>
          break;
 8016832:	e01f      	b.n	8016874 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8016834:	6839      	ldr	r1, [r7, #0]
 8016836:	6878      	ldr	r0, [r7, #4]
 8016838:	f000 fbe0 	bl	8016ffc <USBD_SetConfig>
 801683c:	4603      	mov	r3, r0
 801683e:	73fb      	strb	r3, [r7, #15]
          break;
 8016840:	e018      	b.n	8016874 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8016842:	6839      	ldr	r1, [r7, #0]
 8016844:	6878      	ldr	r0, [r7, #4]
 8016846:	f000 fc83 	bl	8017150 <USBD_GetConfig>
          break;
 801684a:	e013      	b.n	8016874 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801684c:	6839      	ldr	r1, [r7, #0]
 801684e:	6878      	ldr	r0, [r7, #4]
 8016850:	f000 fcb4 	bl	80171bc <USBD_GetStatus>
          break;
 8016854:	e00e      	b.n	8016874 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8016856:	6839      	ldr	r1, [r7, #0]
 8016858:	6878      	ldr	r0, [r7, #4]
 801685a:	f000 fce3 	bl	8017224 <USBD_SetFeature>
          break;
 801685e:	e009      	b.n	8016874 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016860:	6839      	ldr	r1, [r7, #0]
 8016862:	6878      	ldr	r0, [r7, #4]
 8016864:	f000 fd07 	bl	8017276 <USBD_ClrFeature>
          break;
 8016868:	e004      	b.n	8016874 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801686a:	6839      	ldr	r1, [r7, #0]
 801686c:	6878      	ldr	r0, [r7, #4]
 801686e:	f000 fd5e 	bl	801732e <USBD_CtlError>
          break;
 8016872:	bf00      	nop
      }
      break;
 8016874:	e004      	b.n	8016880 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8016876:	6839      	ldr	r1, [r7, #0]
 8016878:	6878      	ldr	r0, [r7, #4]
 801687a:	f000 fd58 	bl	801732e <USBD_CtlError>
      break;
 801687e:	bf00      	nop
  }

  return ret;
 8016880:	7bfb      	ldrb	r3, [r7, #15]
}
 8016882:	4618      	mov	r0, r3
 8016884:	3710      	adds	r7, #16
 8016886:	46bd      	mov	sp, r7
 8016888:	bd80      	pop	{r7, pc}
 801688a:	bf00      	nop

0801688c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801688c:	b580      	push	{r7, lr}
 801688e:	b084      	sub	sp, #16
 8016890:	af00      	add	r7, sp, #0
 8016892:	6078      	str	r0, [r7, #4]
 8016894:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016896:	2300      	movs	r3, #0
 8016898:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801689a:	683b      	ldr	r3, [r7, #0]
 801689c:	781b      	ldrb	r3, [r3, #0]
 801689e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80168a2:	2b40      	cmp	r3, #64	; 0x40
 80168a4:	d005      	beq.n	80168b2 <USBD_StdItfReq+0x26>
 80168a6:	2b40      	cmp	r3, #64	; 0x40
 80168a8:	d852      	bhi.n	8016950 <USBD_StdItfReq+0xc4>
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d001      	beq.n	80168b2 <USBD_StdItfReq+0x26>
 80168ae:	2b20      	cmp	r3, #32
 80168b0:	d14e      	bne.n	8016950 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80168b8:	b2db      	uxtb	r3, r3
 80168ba:	3b01      	subs	r3, #1
 80168bc:	2b02      	cmp	r3, #2
 80168be:	d840      	bhi.n	8016942 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80168c0:	683b      	ldr	r3, [r7, #0]
 80168c2:	889b      	ldrh	r3, [r3, #4]
 80168c4:	b2db      	uxtb	r3, r3
 80168c6:	2b01      	cmp	r3, #1
 80168c8:	d836      	bhi.n	8016938 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80168ca:	683b      	ldr	r3, [r7, #0]
 80168cc:	889b      	ldrh	r3, [r3, #4]
 80168ce:	b2db      	uxtb	r3, r3
 80168d0:	4619      	mov	r1, r3
 80168d2:	6878      	ldr	r0, [r7, #4]
 80168d4:	f7ff fed9 	bl	801668a <USBD_CoreFindIF>
 80168d8:	4603      	mov	r3, r0
 80168da:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80168dc:	7bbb      	ldrb	r3, [r7, #14]
 80168de:	2bff      	cmp	r3, #255	; 0xff
 80168e0:	d01d      	beq.n	801691e <USBD_StdItfReq+0x92>
 80168e2:	7bbb      	ldrb	r3, [r7, #14]
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d11a      	bne.n	801691e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80168e8:	7bba      	ldrb	r2, [r7, #14]
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	32ae      	adds	r2, #174	; 0xae
 80168ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80168f2:	689b      	ldr	r3, [r3, #8]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d00f      	beq.n	8016918 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80168f8:	7bba      	ldrb	r2, [r7, #14]
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016900:	7bba      	ldrb	r2, [r7, #14]
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	32ae      	adds	r2, #174	; 0xae
 8016906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801690a:	689b      	ldr	r3, [r3, #8]
 801690c:	6839      	ldr	r1, [r7, #0]
 801690e:	6878      	ldr	r0, [r7, #4]
 8016910:	4798      	blx	r3
 8016912:	4603      	mov	r3, r0
 8016914:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016916:	e004      	b.n	8016922 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8016918:	2303      	movs	r3, #3
 801691a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801691c:	e001      	b.n	8016922 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801691e:	2303      	movs	r3, #3
 8016920:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016922:	683b      	ldr	r3, [r7, #0]
 8016924:	88db      	ldrh	r3, [r3, #6]
 8016926:	2b00      	cmp	r3, #0
 8016928:	d110      	bne.n	801694c <USBD_StdItfReq+0xc0>
 801692a:	7bfb      	ldrb	r3, [r7, #15]
 801692c:	2b00      	cmp	r3, #0
 801692e:	d10d      	bne.n	801694c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016930:	6878      	ldr	r0, [r7, #4]
 8016932:	f000 fdc7 	bl	80174c4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016936:	e009      	b.n	801694c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8016938:	6839      	ldr	r1, [r7, #0]
 801693a:	6878      	ldr	r0, [r7, #4]
 801693c:	f000 fcf7 	bl	801732e <USBD_CtlError>
          break;
 8016940:	e004      	b.n	801694c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8016942:	6839      	ldr	r1, [r7, #0]
 8016944:	6878      	ldr	r0, [r7, #4]
 8016946:	f000 fcf2 	bl	801732e <USBD_CtlError>
          break;
 801694a:	e000      	b.n	801694e <USBD_StdItfReq+0xc2>
          break;
 801694c:	bf00      	nop
      }
      break;
 801694e:	e004      	b.n	801695a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8016950:	6839      	ldr	r1, [r7, #0]
 8016952:	6878      	ldr	r0, [r7, #4]
 8016954:	f000 fceb 	bl	801732e <USBD_CtlError>
      break;
 8016958:	bf00      	nop
  }

  return ret;
 801695a:	7bfb      	ldrb	r3, [r7, #15]
}
 801695c:	4618      	mov	r0, r3
 801695e:	3710      	adds	r7, #16
 8016960:	46bd      	mov	sp, r7
 8016962:	bd80      	pop	{r7, pc}

08016964 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016964:	b580      	push	{r7, lr}
 8016966:	b084      	sub	sp, #16
 8016968:	af00      	add	r7, sp, #0
 801696a:	6078      	str	r0, [r7, #4]
 801696c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801696e:	2300      	movs	r3, #0
 8016970:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8016972:	683b      	ldr	r3, [r7, #0]
 8016974:	889b      	ldrh	r3, [r3, #4]
 8016976:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016978:	683b      	ldr	r3, [r7, #0]
 801697a:	781b      	ldrb	r3, [r3, #0]
 801697c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016980:	2b40      	cmp	r3, #64	; 0x40
 8016982:	d007      	beq.n	8016994 <USBD_StdEPReq+0x30>
 8016984:	2b40      	cmp	r3, #64	; 0x40
 8016986:	f200 817f 	bhi.w	8016c88 <USBD_StdEPReq+0x324>
 801698a:	2b00      	cmp	r3, #0
 801698c:	d02a      	beq.n	80169e4 <USBD_StdEPReq+0x80>
 801698e:	2b20      	cmp	r3, #32
 8016990:	f040 817a 	bne.w	8016c88 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016994:	7bbb      	ldrb	r3, [r7, #14]
 8016996:	4619      	mov	r1, r3
 8016998:	6878      	ldr	r0, [r7, #4]
 801699a:	f7ff fe83 	bl	80166a4 <USBD_CoreFindEP>
 801699e:	4603      	mov	r3, r0
 80169a0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80169a2:	7b7b      	ldrb	r3, [r7, #13]
 80169a4:	2bff      	cmp	r3, #255	; 0xff
 80169a6:	f000 8174 	beq.w	8016c92 <USBD_StdEPReq+0x32e>
 80169aa:	7b7b      	ldrb	r3, [r7, #13]
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	f040 8170 	bne.w	8016c92 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80169b2:	7b7a      	ldrb	r2, [r7, #13]
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80169ba:	7b7a      	ldrb	r2, [r7, #13]
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	32ae      	adds	r2, #174	; 0xae
 80169c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80169c4:	689b      	ldr	r3, [r3, #8]
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	f000 8163 	beq.w	8016c92 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80169cc:	7b7a      	ldrb	r2, [r7, #13]
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	32ae      	adds	r2, #174	; 0xae
 80169d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80169d6:	689b      	ldr	r3, [r3, #8]
 80169d8:	6839      	ldr	r1, [r7, #0]
 80169da:	6878      	ldr	r0, [r7, #4]
 80169dc:	4798      	blx	r3
 80169de:	4603      	mov	r3, r0
 80169e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80169e2:	e156      	b.n	8016c92 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80169e4:	683b      	ldr	r3, [r7, #0]
 80169e6:	785b      	ldrb	r3, [r3, #1]
 80169e8:	2b03      	cmp	r3, #3
 80169ea:	d008      	beq.n	80169fe <USBD_StdEPReq+0x9a>
 80169ec:	2b03      	cmp	r3, #3
 80169ee:	f300 8145 	bgt.w	8016c7c <USBD_StdEPReq+0x318>
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	f000 809b 	beq.w	8016b2e <USBD_StdEPReq+0x1ca>
 80169f8:	2b01      	cmp	r3, #1
 80169fa:	d03c      	beq.n	8016a76 <USBD_StdEPReq+0x112>
 80169fc:	e13e      	b.n	8016c7c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016a04:	b2db      	uxtb	r3, r3
 8016a06:	2b02      	cmp	r3, #2
 8016a08:	d002      	beq.n	8016a10 <USBD_StdEPReq+0xac>
 8016a0a:	2b03      	cmp	r3, #3
 8016a0c:	d016      	beq.n	8016a3c <USBD_StdEPReq+0xd8>
 8016a0e:	e02c      	b.n	8016a6a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016a10:	7bbb      	ldrb	r3, [r7, #14]
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d00d      	beq.n	8016a32 <USBD_StdEPReq+0xce>
 8016a16:	7bbb      	ldrb	r3, [r7, #14]
 8016a18:	2b80      	cmp	r3, #128	; 0x80
 8016a1a:	d00a      	beq.n	8016a32 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016a1c:	7bbb      	ldrb	r3, [r7, #14]
 8016a1e:	4619      	mov	r1, r3
 8016a20:	6878      	ldr	r0, [r7, #4]
 8016a22:	f004 f94b 	bl	801acbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016a26:	2180      	movs	r1, #128	; 0x80
 8016a28:	6878      	ldr	r0, [r7, #4]
 8016a2a:	f004 f947 	bl	801acbc <USBD_LL_StallEP>
 8016a2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016a30:	e020      	b.n	8016a74 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8016a32:	6839      	ldr	r1, [r7, #0]
 8016a34:	6878      	ldr	r0, [r7, #4]
 8016a36:	f000 fc7a 	bl	801732e <USBD_CtlError>
              break;
 8016a3a:	e01b      	b.n	8016a74 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016a3c:	683b      	ldr	r3, [r7, #0]
 8016a3e:	885b      	ldrh	r3, [r3, #2]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d10e      	bne.n	8016a62 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016a44:	7bbb      	ldrb	r3, [r7, #14]
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d00b      	beq.n	8016a62 <USBD_StdEPReq+0xfe>
 8016a4a:	7bbb      	ldrb	r3, [r7, #14]
 8016a4c:	2b80      	cmp	r3, #128	; 0x80
 8016a4e:	d008      	beq.n	8016a62 <USBD_StdEPReq+0xfe>
 8016a50:	683b      	ldr	r3, [r7, #0]
 8016a52:	88db      	ldrh	r3, [r3, #6]
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d104      	bne.n	8016a62 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016a58:	7bbb      	ldrb	r3, [r7, #14]
 8016a5a:	4619      	mov	r1, r3
 8016a5c:	6878      	ldr	r0, [r7, #4]
 8016a5e:	f004 f92d 	bl	801acbc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016a62:	6878      	ldr	r0, [r7, #4]
 8016a64:	f000 fd2e 	bl	80174c4 <USBD_CtlSendStatus>

              break;
 8016a68:	e004      	b.n	8016a74 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016a6a:	6839      	ldr	r1, [r7, #0]
 8016a6c:	6878      	ldr	r0, [r7, #4]
 8016a6e:	f000 fc5e 	bl	801732e <USBD_CtlError>
              break;
 8016a72:	bf00      	nop
          }
          break;
 8016a74:	e107      	b.n	8016c86 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016a7c:	b2db      	uxtb	r3, r3
 8016a7e:	2b02      	cmp	r3, #2
 8016a80:	d002      	beq.n	8016a88 <USBD_StdEPReq+0x124>
 8016a82:	2b03      	cmp	r3, #3
 8016a84:	d016      	beq.n	8016ab4 <USBD_StdEPReq+0x150>
 8016a86:	e04b      	b.n	8016b20 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016a88:	7bbb      	ldrb	r3, [r7, #14]
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d00d      	beq.n	8016aaa <USBD_StdEPReq+0x146>
 8016a8e:	7bbb      	ldrb	r3, [r7, #14]
 8016a90:	2b80      	cmp	r3, #128	; 0x80
 8016a92:	d00a      	beq.n	8016aaa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016a94:	7bbb      	ldrb	r3, [r7, #14]
 8016a96:	4619      	mov	r1, r3
 8016a98:	6878      	ldr	r0, [r7, #4]
 8016a9a:	f004 f90f 	bl	801acbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016a9e:	2180      	movs	r1, #128	; 0x80
 8016aa0:	6878      	ldr	r0, [r7, #4]
 8016aa2:	f004 f90b 	bl	801acbc <USBD_LL_StallEP>
 8016aa6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016aa8:	e040      	b.n	8016b2c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016aaa:	6839      	ldr	r1, [r7, #0]
 8016aac:	6878      	ldr	r0, [r7, #4]
 8016aae:	f000 fc3e 	bl	801732e <USBD_CtlError>
              break;
 8016ab2:	e03b      	b.n	8016b2c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016ab4:	683b      	ldr	r3, [r7, #0]
 8016ab6:	885b      	ldrh	r3, [r3, #2]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d136      	bne.n	8016b2a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016abc:	7bbb      	ldrb	r3, [r7, #14]
 8016abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d004      	beq.n	8016ad0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016ac6:	7bbb      	ldrb	r3, [r7, #14]
 8016ac8:	4619      	mov	r1, r3
 8016aca:	6878      	ldr	r0, [r7, #4]
 8016acc:	f004 f915 	bl	801acfa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016ad0:	6878      	ldr	r0, [r7, #4]
 8016ad2:	f000 fcf7 	bl	80174c4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8016ad6:	7bbb      	ldrb	r3, [r7, #14]
 8016ad8:	4619      	mov	r1, r3
 8016ada:	6878      	ldr	r0, [r7, #4]
 8016adc:	f7ff fde2 	bl	80166a4 <USBD_CoreFindEP>
 8016ae0:	4603      	mov	r3, r0
 8016ae2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016ae4:	7b7b      	ldrb	r3, [r7, #13]
 8016ae6:	2bff      	cmp	r3, #255	; 0xff
 8016ae8:	d01f      	beq.n	8016b2a <USBD_StdEPReq+0x1c6>
 8016aea:	7b7b      	ldrb	r3, [r7, #13]
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d11c      	bne.n	8016b2a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8016af0:	7b7a      	ldrb	r2, [r7, #13]
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016af8:	7b7a      	ldrb	r2, [r7, #13]
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	32ae      	adds	r2, #174	; 0xae
 8016afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b02:	689b      	ldr	r3, [r3, #8]
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d010      	beq.n	8016b2a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016b08:	7b7a      	ldrb	r2, [r7, #13]
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	32ae      	adds	r2, #174	; 0xae
 8016b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b12:	689b      	ldr	r3, [r3, #8]
 8016b14:	6839      	ldr	r1, [r7, #0]
 8016b16:	6878      	ldr	r0, [r7, #4]
 8016b18:	4798      	blx	r3
 8016b1a:	4603      	mov	r3, r0
 8016b1c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8016b1e:	e004      	b.n	8016b2a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8016b20:	6839      	ldr	r1, [r7, #0]
 8016b22:	6878      	ldr	r0, [r7, #4]
 8016b24:	f000 fc03 	bl	801732e <USBD_CtlError>
              break;
 8016b28:	e000      	b.n	8016b2c <USBD_StdEPReq+0x1c8>
              break;
 8016b2a:	bf00      	nop
          }
          break;
 8016b2c:	e0ab      	b.n	8016c86 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016b34:	b2db      	uxtb	r3, r3
 8016b36:	2b02      	cmp	r3, #2
 8016b38:	d002      	beq.n	8016b40 <USBD_StdEPReq+0x1dc>
 8016b3a:	2b03      	cmp	r3, #3
 8016b3c:	d032      	beq.n	8016ba4 <USBD_StdEPReq+0x240>
 8016b3e:	e097      	b.n	8016c70 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016b40:	7bbb      	ldrb	r3, [r7, #14]
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d007      	beq.n	8016b56 <USBD_StdEPReq+0x1f2>
 8016b46:	7bbb      	ldrb	r3, [r7, #14]
 8016b48:	2b80      	cmp	r3, #128	; 0x80
 8016b4a:	d004      	beq.n	8016b56 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016b4c:	6839      	ldr	r1, [r7, #0]
 8016b4e:	6878      	ldr	r0, [r7, #4]
 8016b50:	f000 fbed 	bl	801732e <USBD_CtlError>
                break;
 8016b54:	e091      	b.n	8016c7a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016b56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	da0b      	bge.n	8016b76 <USBD_StdEPReq+0x212>
 8016b5e:	7bbb      	ldrb	r3, [r7, #14]
 8016b60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016b64:	4613      	mov	r3, r2
 8016b66:	009b      	lsls	r3, r3, #2
 8016b68:	4413      	add	r3, r2
 8016b6a:	009b      	lsls	r3, r3, #2
 8016b6c:	3310      	adds	r3, #16
 8016b6e:	687a      	ldr	r2, [r7, #4]
 8016b70:	4413      	add	r3, r2
 8016b72:	3304      	adds	r3, #4
 8016b74:	e00b      	b.n	8016b8e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016b76:	7bbb      	ldrb	r3, [r7, #14]
 8016b78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016b7c:	4613      	mov	r3, r2
 8016b7e:	009b      	lsls	r3, r3, #2
 8016b80:	4413      	add	r3, r2
 8016b82:	009b      	lsls	r3, r3, #2
 8016b84:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016b88:	687a      	ldr	r2, [r7, #4]
 8016b8a:	4413      	add	r3, r2
 8016b8c:	3304      	adds	r3, #4
 8016b8e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016b90:	68bb      	ldr	r3, [r7, #8]
 8016b92:	2200      	movs	r2, #0
 8016b94:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016b96:	68bb      	ldr	r3, [r7, #8]
 8016b98:	2202      	movs	r2, #2
 8016b9a:	4619      	mov	r1, r3
 8016b9c:	6878      	ldr	r0, [r7, #4]
 8016b9e:	f000 fc37 	bl	8017410 <USBD_CtlSendData>
              break;
 8016ba2:	e06a      	b.n	8016c7a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016ba4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	da11      	bge.n	8016bd0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016bac:	7bbb      	ldrb	r3, [r7, #14]
 8016bae:	f003 020f 	and.w	r2, r3, #15
 8016bb2:	6879      	ldr	r1, [r7, #4]
 8016bb4:	4613      	mov	r3, r2
 8016bb6:	009b      	lsls	r3, r3, #2
 8016bb8:	4413      	add	r3, r2
 8016bba:	009b      	lsls	r3, r3, #2
 8016bbc:	440b      	add	r3, r1
 8016bbe:	3324      	adds	r3, #36	; 0x24
 8016bc0:	881b      	ldrh	r3, [r3, #0]
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d117      	bne.n	8016bf6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016bc6:	6839      	ldr	r1, [r7, #0]
 8016bc8:	6878      	ldr	r0, [r7, #4]
 8016bca:	f000 fbb0 	bl	801732e <USBD_CtlError>
                  break;
 8016bce:	e054      	b.n	8016c7a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016bd0:	7bbb      	ldrb	r3, [r7, #14]
 8016bd2:	f003 020f 	and.w	r2, r3, #15
 8016bd6:	6879      	ldr	r1, [r7, #4]
 8016bd8:	4613      	mov	r3, r2
 8016bda:	009b      	lsls	r3, r3, #2
 8016bdc:	4413      	add	r3, r2
 8016bde:	009b      	lsls	r3, r3, #2
 8016be0:	440b      	add	r3, r1
 8016be2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8016be6:	881b      	ldrh	r3, [r3, #0]
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d104      	bne.n	8016bf6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016bec:	6839      	ldr	r1, [r7, #0]
 8016bee:	6878      	ldr	r0, [r7, #4]
 8016bf0:	f000 fb9d 	bl	801732e <USBD_CtlError>
                  break;
 8016bf4:	e041      	b.n	8016c7a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016bf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	da0b      	bge.n	8016c16 <USBD_StdEPReq+0x2b2>
 8016bfe:	7bbb      	ldrb	r3, [r7, #14]
 8016c00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016c04:	4613      	mov	r3, r2
 8016c06:	009b      	lsls	r3, r3, #2
 8016c08:	4413      	add	r3, r2
 8016c0a:	009b      	lsls	r3, r3, #2
 8016c0c:	3310      	adds	r3, #16
 8016c0e:	687a      	ldr	r2, [r7, #4]
 8016c10:	4413      	add	r3, r2
 8016c12:	3304      	adds	r3, #4
 8016c14:	e00b      	b.n	8016c2e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016c16:	7bbb      	ldrb	r3, [r7, #14]
 8016c18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016c1c:	4613      	mov	r3, r2
 8016c1e:	009b      	lsls	r3, r3, #2
 8016c20:	4413      	add	r3, r2
 8016c22:	009b      	lsls	r3, r3, #2
 8016c24:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016c28:	687a      	ldr	r2, [r7, #4]
 8016c2a:	4413      	add	r3, r2
 8016c2c:	3304      	adds	r3, #4
 8016c2e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016c30:	7bbb      	ldrb	r3, [r7, #14]
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d002      	beq.n	8016c3c <USBD_StdEPReq+0x2d8>
 8016c36:	7bbb      	ldrb	r3, [r7, #14]
 8016c38:	2b80      	cmp	r3, #128	; 0x80
 8016c3a:	d103      	bne.n	8016c44 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016c3c:	68bb      	ldr	r3, [r7, #8]
 8016c3e:	2200      	movs	r2, #0
 8016c40:	601a      	str	r2, [r3, #0]
 8016c42:	e00e      	b.n	8016c62 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016c44:	7bbb      	ldrb	r3, [r7, #14]
 8016c46:	4619      	mov	r1, r3
 8016c48:	6878      	ldr	r0, [r7, #4]
 8016c4a:	f004 f875 	bl	801ad38 <USBD_LL_IsStallEP>
 8016c4e:	4603      	mov	r3, r0
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d003      	beq.n	8016c5c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016c54:	68bb      	ldr	r3, [r7, #8]
 8016c56:	2201      	movs	r2, #1
 8016c58:	601a      	str	r2, [r3, #0]
 8016c5a:	e002      	b.n	8016c62 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016c5c:	68bb      	ldr	r3, [r7, #8]
 8016c5e:	2200      	movs	r2, #0
 8016c60:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016c62:	68bb      	ldr	r3, [r7, #8]
 8016c64:	2202      	movs	r2, #2
 8016c66:	4619      	mov	r1, r3
 8016c68:	6878      	ldr	r0, [r7, #4]
 8016c6a:	f000 fbd1 	bl	8017410 <USBD_CtlSendData>
              break;
 8016c6e:	e004      	b.n	8016c7a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016c70:	6839      	ldr	r1, [r7, #0]
 8016c72:	6878      	ldr	r0, [r7, #4]
 8016c74:	f000 fb5b 	bl	801732e <USBD_CtlError>
              break;
 8016c78:	bf00      	nop
          }
          break;
 8016c7a:	e004      	b.n	8016c86 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016c7c:	6839      	ldr	r1, [r7, #0]
 8016c7e:	6878      	ldr	r0, [r7, #4]
 8016c80:	f000 fb55 	bl	801732e <USBD_CtlError>
          break;
 8016c84:	bf00      	nop
      }
      break;
 8016c86:	e005      	b.n	8016c94 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016c88:	6839      	ldr	r1, [r7, #0]
 8016c8a:	6878      	ldr	r0, [r7, #4]
 8016c8c:	f000 fb4f 	bl	801732e <USBD_CtlError>
      break;
 8016c90:	e000      	b.n	8016c94 <USBD_StdEPReq+0x330>
      break;
 8016c92:	bf00      	nop
  }

  return ret;
 8016c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c96:	4618      	mov	r0, r3
 8016c98:	3710      	adds	r7, #16
 8016c9a:	46bd      	mov	sp, r7
 8016c9c:	bd80      	pop	{r7, pc}
	...

08016ca0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016ca0:	b580      	push	{r7, lr}
 8016ca2:	b084      	sub	sp, #16
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	6078      	str	r0, [r7, #4]
 8016ca8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016caa:	2300      	movs	r3, #0
 8016cac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016cae:	2300      	movs	r3, #0
 8016cb0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016cb2:	2300      	movs	r3, #0
 8016cb4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016cb6:	683b      	ldr	r3, [r7, #0]
 8016cb8:	885b      	ldrh	r3, [r3, #2]
 8016cba:	0a1b      	lsrs	r3, r3, #8
 8016cbc:	b29b      	uxth	r3, r3
 8016cbe:	3b01      	subs	r3, #1
 8016cc0:	2b06      	cmp	r3, #6
 8016cc2:	f200 8128 	bhi.w	8016f16 <USBD_GetDescriptor+0x276>
 8016cc6:	a201      	add	r2, pc, #4	; (adr r2, 8016ccc <USBD_GetDescriptor+0x2c>)
 8016cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ccc:	08016ce9 	.word	0x08016ce9
 8016cd0:	08016d01 	.word	0x08016d01
 8016cd4:	08016d41 	.word	0x08016d41
 8016cd8:	08016f17 	.word	0x08016f17
 8016cdc:	08016f17 	.word	0x08016f17
 8016ce0:	08016eb7 	.word	0x08016eb7
 8016ce4:	08016ee3 	.word	0x08016ee3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	687a      	ldr	r2, [r7, #4]
 8016cf2:	7c12      	ldrb	r2, [r2, #16]
 8016cf4:	f107 0108 	add.w	r1, r7, #8
 8016cf8:	4610      	mov	r0, r2
 8016cfa:	4798      	blx	r3
 8016cfc:	60f8      	str	r0, [r7, #12]
      break;
 8016cfe:	e112      	b.n	8016f26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	7c1b      	ldrb	r3, [r3, #16]
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d10d      	bne.n	8016d24 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d10:	f107 0208 	add.w	r2, r7, #8
 8016d14:	4610      	mov	r0, r2
 8016d16:	4798      	blx	r3
 8016d18:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016d1a:	68fb      	ldr	r3, [r7, #12]
 8016d1c:	3301      	adds	r3, #1
 8016d1e:	2202      	movs	r2, #2
 8016d20:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016d22:	e100      	b.n	8016f26 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d2c:	f107 0208 	add.w	r2, r7, #8
 8016d30:	4610      	mov	r0, r2
 8016d32:	4798      	blx	r3
 8016d34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016d36:	68fb      	ldr	r3, [r7, #12]
 8016d38:	3301      	adds	r3, #1
 8016d3a:	2202      	movs	r2, #2
 8016d3c:	701a      	strb	r2, [r3, #0]
      break;
 8016d3e:	e0f2      	b.n	8016f26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016d40:	683b      	ldr	r3, [r7, #0]
 8016d42:	885b      	ldrh	r3, [r3, #2]
 8016d44:	b2db      	uxtb	r3, r3
 8016d46:	2b05      	cmp	r3, #5
 8016d48:	f200 80ac 	bhi.w	8016ea4 <USBD_GetDescriptor+0x204>
 8016d4c:	a201      	add	r2, pc, #4	; (adr r2, 8016d54 <USBD_GetDescriptor+0xb4>)
 8016d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d52:	bf00      	nop
 8016d54:	08016d6d 	.word	0x08016d6d
 8016d58:	08016da1 	.word	0x08016da1
 8016d5c:	08016dd5 	.word	0x08016dd5
 8016d60:	08016e09 	.word	0x08016e09
 8016d64:	08016e3d 	.word	0x08016e3d
 8016d68:	08016e71 	.word	0x08016e71
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d72:	685b      	ldr	r3, [r3, #4]
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d00b      	beq.n	8016d90 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d7e:	685b      	ldr	r3, [r3, #4]
 8016d80:	687a      	ldr	r2, [r7, #4]
 8016d82:	7c12      	ldrb	r2, [r2, #16]
 8016d84:	f107 0108 	add.w	r1, r7, #8
 8016d88:	4610      	mov	r0, r2
 8016d8a:	4798      	blx	r3
 8016d8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016d8e:	e091      	b.n	8016eb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016d90:	6839      	ldr	r1, [r7, #0]
 8016d92:	6878      	ldr	r0, [r7, #4]
 8016d94:	f000 facb 	bl	801732e <USBD_CtlError>
            err++;
 8016d98:	7afb      	ldrb	r3, [r7, #11]
 8016d9a:	3301      	adds	r3, #1
 8016d9c:	72fb      	strb	r3, [r7, #11]
          break;
 8016d9e:	e089      	b.n	8016eb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016da6:	689b      	ldr	r3, [r3, #8]
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d00b      	beq.n	8016dc4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016db2:	689b      	ldr	r3, [r3, #8]
 8016db4:	687a      	ldr	r2, [r7, #4]
 8016db6:	7c12      	ldrb	r2, [r2, #16]
 8016db8:	f107 0108 	add.w	r1, r7, #8
 8016dbc:	4610      	mov	r0, r2
 8016dbe:	4798      	blx	r3
 8016dc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016dc2:	e077      	b.n	8016eb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016dc4:	6839      	ldr	r1, [r7, #0]
 8016dc6:	6878      	ldr	r0, [r7, #4]
 8016dc8:	f000 fab1 	bl	801732e <USBD_CtlError>
            err++;
 8016dcc:	7afb      	ldrb	r3, [r7, #11]
 8016dce:	3301      	adds	r3, #1
 8016dd0:	72fb      	strb	r3, [r7, #11]
          break;
 8016dd2:	e06f      	b.n	8016eb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016dda:	68db      	ldr	r3, [r3, #12]
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d00b      	beq.n	8016df8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016de6:	68db      	ldr	r3, [r3, #12]
 8016de8:	687a      	ldr	r2, [r7, #4]
 8016dea:	7c12      	ldrb	r2, [r2, #16]
 8016dec:	f107 0108 	add.w	r1, r7, #8
 8016df0:	4610      	mov	r0, r2
 8016df2:	4798      	blx	r3
 8016df4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016df6:	e05d      	b.n	8016eb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016df8:	6839      	ldr	r1, [r7, #0]
 8016dfa:	6878      	ldr	r0, [r7, #4]
 8016dfc:	f000 fa97 	bl	801732e <USBD_CtlError>
            err++;
 8016e00:	7afb      	ldrb	r3, [r7, #11]
 8016e02:	3301      	adds	r3, #1
 8016e04:	72fb      	strb	r3, [r7, #11]
          break;
 8016e06:	e055      	b.n	8016eb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016e0e:	691b      	ldr	r3, [r3, #16]
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d00b      	beq.n	8016e2c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016e1a:	691b      	ldr	r3, [r3, #16]
 8016e1c:	687a      	ldr	r2, [r7, #4]
 8016e1e:	7c12      	ldrb	r2, [r2, #16]
 8016e20:	f107 0108 	add.w	r1, r7, #8
 8016e24:	4610      	mov	r0, r2
 8016e26:	4798      	blx	r3
 8016e28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016e2a:	e043      	b.n	8016eb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016e2c:	6839      	ldr	r1, [r7, #0]
 8016e2e:	6878      	ldr	r0, [r7, #4]
 8016e30:	f000 fa7d 	bl	801732e <USBD_CtlError>
            err++;
 8016e34:	7afb      	ldrb	r3, [r7, #11]
 8016e36:	3301      	adds	r3, #1
 8016e38:	72fb      	strb	r3, [r7, #11]
          break;
 8016e3a:	e03b      	b.n	8016eb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016e42:	695b      	ldr	r3, [r3, #20]
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d00b      	beq.n	8016e60 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016e4e:	695b      	ldr	r3, [r3, #20]
 8016e50:	687a      	ldr	r2, [r7, #4]
 8016e52:	7c12      	ldrb	r2, [r2, #16]
 8016e54:	f107 0108 	add.w	r1, r7, #8
 8016e58:	4610      	mov	r0, r2
 8016e5a:	4798      	blx	r3
 8016e5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016e5e:	e029      	b.n	8016eb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016e60:	6839      	ldr	r1, [r7, #0]
 8016e62:	6878      	ldr	r0, [r7, #4]
 8016e64:	f000 fa63 	bl	801732e <USBD_CtlError>
            err++;
 8016e68:	7afb      	ldrb	r3, [r7, #11]
 8016e6a:	3301      	adds	r3, #1
 8016e6c:	72fb      	strb	r3, [r7, #11]
          break;
 8016e6e:	e021      	b.n	8016eb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016e76:	699b      	ldr	r3, [r3, #24]
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d00b      	beq.n	8016e94 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016e82:	699b      	ldr	r3, [r3, #24]
 8016e84:	687a      	ldr	r2, [r7, #4]
 8016e86:	7c12      	ldrb	r2, [r2, #16]
 8016e88:	f107 0108 	add.w	r1, r7, #8
 8016e8c:	4610      	mov	r0, r2
 8016e8e:	4798      	blx	r3
 8016e90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016e92:	e00f      	b.n	8016eb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016e94:	6839      	ldr	r1, [r7, #0]
 8016e96:	6878      	ldr	r0, [r7, #4]
 8016e98:	f000 fa49 	bl	801732e <USBD_CtlError>
            err++;
 8016e9c:	7afb      	ldrb	r3, [r7, #11]
 8016e9e:	3301      	adds	r3, #1
 8016ea0:	72fb      	strb	r3, [r7, #11]
          break;
 8016ea2:	e007      	b.n	8016eb4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016ea4:	6839      	ldr	r1, [r7, #0]
 8016ea6:	6878      	ldr	r0, [r7, #4]
 8016ea8:	f000 fa41 	bl	801732e <USBD_CtlError>
          err++;
 8016eac:	7afb      	ldrb	r3, [r7, #11]
 8016eae:	3301      	adds	r3, #1
 8016eb0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8016eb2:	bf00      	nop
      }
      break;
 8016eb4:	e037      	b.n	8016f26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	7c1b      	ldrb	r3, [r3, #16]
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d109      	bne.n	8016ed2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016ec6:	f107 0208 	add.w	r2, r7, #8
 8016eca:	4610      	mov	r0, r2
 8016ecc:	4798      	blx	r3
 8016ece:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016ed0:	e029      	b.n	8016f26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016ed2:	6839      	ldr	r1, [r7, #0]
 8016ed4:	6878      	ldr	r0, [r7, #4]
 8016ed6:	f000 fa2a 	bl	801732e <USBD_CtlError>
        err++;
 8016eda:	7afb      	ldrb	r3, [r7, #11]
 8016edc:	3301      	adds	r3, #1
 8016ede:	72fb      	strb	r3, [r7, #11]
      break;
 8016ee0:	e021      	b.n	8016f26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	7c1b      	ldrb	r3, [r3, #16]
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d10d      	bne.n	8016f06 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ef2:	f107 0208 	add.w	r2, r7, #8
 8016ef6:	4610      	mov	r0, r2
 8016ef8:	4798      	blx	r3
 8016efa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016efc:	68fb      	ldr	r3, [r7, #12]
 8016efe:	3301      	adds	r3, #1
 8016f00:	2207      	movs	r2, #7
 8016f02:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016f04:	e00f      	b.n	8016f26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016f06:	6839      	ldr	r1, [r7, #0]
 8016f08:	6878      	ldr	r0, [r7, #4]
 8016f0a:	f000 fa10 	bl	801732e <USBD_CtlError>
        err++;
 8016f0e:	7afb      	ldrb	r3, [r7, #11]
 8016f10:	3301      	adds	r3, #1
 8016f12:	72fb      	strb	r3, [r7, #11]
      break;
 8016f14:	e007      	b.n	8016f26 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8016f16:	6839      	ldr	r1, [r7, #0]
 8016f18:	6878      	ldr	r0, [r7, #4]
 8016f1a:	f000 fa08 	bl	801732e <USBD_CtlError>
      err++;
 8016f1e:	7afb      	ldrb	r3, [r7, #11]
 8016f20:	3301      	adds	r3, #1
 8016f22:	72fb      	strb	r3, [r7, #11]
      break;
 8016f24:	bf00      	nop
  }

  if (err != 0U)
 8016f26:	7afb      	ldrb	r3, [r7, #11]
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d11e      	bne.n	8016f6a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8016f2c:	683b      	ldr	r3, [r7, #0]
 8016f2e:	88db      	ldrh	r3, [r3, #6]
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d016      	beq.n	8016f62 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8016f34:	893b      	ldrh	r3, [r7, #8]
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d00e      	beq.n	8016f58 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8016f3a:	683b      	ldr	r3, [r7, #0]
 8016f3c:	88da      	ldrh	r2, [r3, #6]
 8016f3e:	893b      	ldrh	r3, [r7, #8]
 8016f40:	4293      	cmp	r3, r2
 8016f42:	bf28      	it	cs
 8016f44:	4613      	movcs	r3, r2
 8016f46:	b29b      	uxth	r3, r3
 8016f48:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8016f4a:	893b      	ldrh	r3, [r7, #8]
 8016f4c:	461a      	mov	r2, r3
 8016f4e:	68f9      	ldr	r1, [r7, #12]
 8016f50:	6878      	ldr	r0, [r7, #4]
 8016f52:	f000 fa5d 	bl	8017410 <USBD_CtlSendData>
 8016f56:	e009      	b.n	8016f6c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016f58:	6839      	ldr	r1, [r7, #0]
 8016f5a:	6878      	ldr	r0, [r7, #4]
 8016f5c:	f000 f9e7 	bl	801732e <USBD_CtlError>
 8016f60:	e004      	b.n	8016f6c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8016f62:	6878      	ldr	r0, [r7, #4]
 8016f64:	f000 faae 	bl	80174c4 <USBD_CtlSendStatus>
 8016f68:	e000      	b.n	8016f6c <USBD_GetDescriptor+0x2cc>
    return;
 8016f6a:	bf00      	nop
  }
}
 8016f6c:	3710      	adds	r7, #16
 8016f6e:	46bd      	mov	sp, r7
 8016f70:	bd80      	pop	{r7, pc}
 8016f72:	bf00      	nop

08016f74 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016f74:	b580      	push	{r7, lr}
 8016f76:	b084      	sub	sp, #16
 8016f78:	af00      	add	r7, sp, #0
 8016f7a:	6078      	str	r0, [r7, #4]
 8016f7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016f7e:	683b      	ldr	r3, [r7, #0]
 8016f80:	889b      	ldrh	r3, [r3, #4]
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d131      	bne.n	8016fea <USBD_SetAddress+0x76>
 8016f86:	683b      	ldr	r3, [r7, #0]
 8016f88:	88db      	ldrh	r3, [r3, #6]
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d12d      	bne.n	8016fea <USBD_SetAddress+0x76>
 8016f8e:	683b      	ldr	r3, [r7, #0]
 8016f90:	885b      	ldrh	r3, [r3, #2]
 8016f92:	2b7f      	cmp	r3, #127	; 0x7f
 8016f94:	d829      	bhi.n	8016fea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016f96:	683b      	ldr	r3, [r7, #0]
 8016f98:	885b      	ldrh	r3, [r3, #2]
 8016f9a:	b2db      	uxtb	r3, r3
 8016f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016fa0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016fa8:	b2db      	uxtb	r3, r3
 8016faa:	2b03      	cmp	r3, #3
 8016fac:	d104      	bne.n	8016fb8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8016fae:	6839      	ldr	r1, [r7, #0]
 8016fb0:	6878      	ldr	r0, [r7, #4]
 8016fb2:	f000 f9bc 	bl	801732e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016fb6:	e01d      	b.n	8016ff4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	7bfa      	ldrb	r2, [r7, #15]
 8016fbc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016fc0:	7bfb      	ldrb	r3, [r7, #15]
 8016fc2:	4619      	mov	r1, r3
 8016fc4:	6878      	ldr	r0, [r7, #4]
 8016fc6:	f003 fee3 	bl	801ad90 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016fca:	6878      	ldr	r0, [r7, #4]
 8016fcc:	f000 fa7a 	bl	80174c4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016fd0:	7bfb      	ldrb	r3, [r7, #15]
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d004      	beq.n	8016fe0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	2202      	movs	r2, #2
 8016fda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016fde:	e009      	b.n	8016ff4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	2201      	movs	r2, #1
 8016fe4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016fe8:	e004      	b.n	8016ff4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016fea:	6839      	ldr	r1, [r7, #0]
 8016fec:	6878      	ldr	r0, [r7, #4]
 8016fee:	f000 f99e 	bl	801732e <USBD_CtlError>
  }
}
 8016ff2:	bf00      	nop
 8016ff4:	bf00      	nop
 8016ff6:	3710      	adds	r7, #16
 8016ff8:	46bd      	mov	sp, r7
 8016ffa:	bd80      	pop	{r7, pc}

08016ffc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016ffc:	b580      	push	{r7, lr}
 8016ffe:	b084      	sub	sp, #16
 8017000:	af00      	add	r7, sp, #0
 8017002:	6078      	str	r0, [r7, #4]
 8017004:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017006:	2300      	movs	r3, #0
 8017008:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801700a:	683b      	ldr	r3, [r7, #0]
 801700c:	885b      	ldrh	r3, [r3, #2]
 801700e:	b2da      	uxtb	r2, r3
 8017010:	4b4e      	ldr	r3, [pc, #312]	; (801714c <USBD_SetConfig+0x150>)
 8017012:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8017014:	4b4d      	ldr	r3, [pc, #308]	; (801714c <USBD_SetConfig+0x150>)
 8017016:	781b      	ldrb	r3, [r3, #0]
 8017018:	2b01      	cmp	r3, #1
 801701a:	d905      	bls.n	8017028 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801701c:	6839      	ldr	r1, [r7, #0]
 801701e:	6878      	ldr	r0, [r7, #4]
 8017020:	f000 f985 	bl	801732e <USBD_CtlError>
    return USBD_FAIL;
 8017024:	2303      	movs	r3, #3
 8017026:	e08c      	b.n	8017142 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801702e:	b2db      	uxtb	r3, r3
 8017030:	2b02      	cmp	r3, #2
 8017032:	d002      	beq.n	801703a <USBD_SetConfig+0x3e>
 8017034:	2b03      	cmp	r3, #3
 8017036:	d029      	beq.n	801708c <USBD_SetConfig+0x90>
 8017038:	e075      	b.n	8017126 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801703a:	4b44      	ldr	r3, [pc, #272]	; (801714c <USBD_SetConfig+0x150>)
 801703c:	781b      	ldrb	r3, [r3, #0]
 801703e:	2b00      	cmp	r3, #0
 8017040:	d020      	beq.n	8017084 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8017042:	4b42      	ldr	r3, [pc, #264]	; (801714c <USBD_SetConfig+0x150>)
 8017044:	781b      	ldrb	r3, [r3, #0]
 8017046:	461a      	mov	r2, r3
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801704c:	4b3f      	ldr	r3, [pc, #252]	; (801714c <USBD_SetConfig+0x150>)
 801704e:	781b      	ldrb	r3, [r3, #0]
 8017050:	4619      	mov	r1, r3
 8017052:	6878      	ldr	r0, [r7, #4]
 8017054:	f7fe ffe1 	bl	801601a <USBD_SetClassConfig>
 8017058:	4603      	mov	r3, r0
 801705a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801705c:	7bfb      	ldrb	r3, [r7, #15]
 801705e:	2b00      	cmp	r3, #0
 8017060:	d008      	beq.n	8017074 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8017062:	6839      	ldr	r1, [r7, #0]
 8017064:	6878      	ldr	r0, [r7, #4]
 8017066:	f000 f962 	bl	801732e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	2202      	movs	r2, #2
 801706e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017072:	e065      	b.n	8017140 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8017074:	6878      	ldr	r0, [r7, #4]
 8017076:	f000 fa25 	bl	80174c4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	2203      	movs	r2, #3
 801707e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8017082:	e05d      	b.n	8017140 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017084:	6878      	ldr	r0, [r7, #4]
 8017086:	f000 fa1d 	bl	80174c4 <USBD_CtlSendStatus>
      break;
 801708a:	e059      	b.n	8017140 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801708c:	4b2f      	ldr	r3, [pc, #188]	; (801714c <USBD_SetConfig+0x150>)
 801708e:	781b      	ldrb	r3, [r3, #0]
 8017090:	2b00      	cmp	r3, #0
 8017092:	d112      	bne.n	80170ba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	2202      	movs	r2, #2
 8017098:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801709c:	4b2b      	ldr	r3, [pc, #172]	; (801714c <USBD_SetConfig+0x150>)
 801709e:	781b      	ldrb	r3, [r3, #0]
 80170a0:	461a      	mov	r2, r3
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80170a6:	4b29      	ldr	r3, [pc, #164]	; (801714c <USBD_SetConfig+0x150>)
 80170a8:	781b      	ldrb	r3, [r3, #0]
 80170aa:	4619      	mov	r1, r3
 80170ac:	6878      	ldr	r0, [r7, #4]
 80170ae:	f7fe ffd0 	bl	8016052 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80170b2:	6878      	ldr	r0, [r7, #4]
 80170b4:	f000 fa06 	bl	80174c4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80170b8:	e042      	b.n	8017140 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80170ba:	4b24      	ldr	r3, [pc, #144]	; (801714c <USBD_SetConfig+0x150>)
 80170bc:	781b      	ldrb	r3, [r3, #0]
 80170be:	461a      	mov	r2, r3
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	685b      	ldr	r3, [r3, #4]
 80170c4:	429a      	cmp	r2, r3
 80170c6:	d02a      	beq.n	801711e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	685b      	ldr	r3, [r3, #4]
 80170cc:	b2db      	uxtb	r3, r3
 80170ce:	4619      	mov	r1, r3
 80170d0:	6878      	ldr	r0, [r7, #4]
 80170d2:	f7fe ffbe 	bl	8016052 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80170d6:	4b1d      	ldr	r3, [pc, #116]	; (801714c <USBD_SetConfig+0x150>)
 80170d8:	781b      	ldrb	r3, [r3, #0]
 80170da:	461a      	mov	r2, r3
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80170e0:	4b1a      	ldr	r3, [pc, #104]	; (801714c <USBD_SetConfig+0x150>)
 80170e2:	781b      	ldrb	r3, [r3, #0]
 80170e4:	4619      	mov	r1, r3
 80170e6:	6878      	ldr	r0, [r7, #4]
 80170e8:	f7fe ff97 	bl	801601a <USBD_SetClassConfig>
 80170ec:	4603      	mov	r3, r0
 80170ee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80170f0:	7bfb      	ldrb	r3, [r7, #15]
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d00f      	beq.n	8017116 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80170f6:	6839      	ldr	r1, [r7, #0]
 80170f8:	6878      	ldr	r0, [r7, #4]
 80170fa:	f000 f918 	bl	801732e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	685b      	ldr	r3, [r3, #4]
 8017102:	b2db      	uxtb	r3, r3
 8017104:	4619      	mov	r1, r3
 8017106:	6878      	ldr	r0, [r7, #4]
 8017108:	f7fe ffa3 	bl	8016052 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	2202      	movs	r2, #2
 8017110:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8017114:	e014      	b.n	8017140 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8017116:	6878      	ldr	r0, [r7, #4]
 8017118:	f000 f9d4 	bl	80174c4 <USBD_CtlSendStatus>
      break;
 801711c:	e010      	b.n	8017140 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801711e:	6878      	ldr	r0, [r7, #4]
 8017120:	f000 f9d0 	bl	80174c4 <USBD_CtlSendStatus>
      break;
 8017124:	e00c      	b.n	8017140 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8017126:	6839      	ldr	r1, [r7, #0]
 8017128:	6878      	ldr	r0, [r7, #4]
 801712a:	f000 f900 	bl	801732e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801712e:	4b07      	ldr	r3, [pc, #28]	; (801714c <USBD_SetConfig+0x150>)
 8017130:	781b      	ldrb	r3, [r3, #0]
 8017132:	4619      	mov	r1, r3
 8017134:	6878      	ldr	r0, [r7, #4]
 8017136:	f7fe ff8c 	bl	8016052 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801713a:	2303      	movs	r3, #3
 801713c:	73fb      	strb	r3, [r7, #15]
      break;
 801713e:	bf00      	nop
  }

  return ret;
 8017140:	7bfb      	ldrb	r3, [r7, #15]
}
 8017142:	4618      	mov	r0, r3
 8017144:	3710      	adds	r7, #16
 8017146:	46bd      	mov	sp, r7
 8017148:	bd80      	pop	{r7, pc}
 801714a:	bf00      	nop
 801714c:	240016a4 	.word	0x240016a4

08017150 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017150:	b580      	push	{r7, lr}
 8017152:	b082      	sub	sp, #8
 8017154:	af00      	add	r7, sp, #0
 8017156:	6078      	str	r0, [r7, #4]
 8017158:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801715a:	683b      	ldr	r3, [r7, #0]
 801715c:	88db      	ldrh	r3, [r3, #6]
 801715e:	2b01      	cmp	r3, #1
 8017160:	d004      	beq.n	801716c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8017162:	6839      	ldr	r1, [r7, #0]
 8017164:	6878      	ldr	r0, [r7, #4]
 8017166:	f000 f8e2 	bl	801732e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801716a:	e023      	b.n	80171b4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017172:	b2db      	uxtb	r3, r3
 8017174:	2b02      	cmp	r3, #2
 8017176:	dc02      	bgt.n	801717e <USBD_GetConfig+0x2e>
 8017178:	2b00      	cmp	r3, #0
 801717a:	dc03      	bgt.n	8017184 <USBD_GetConfig+0x34>
 801717c:	e015      	b.n	80171aa <USBD_GetConfig+0x5a>
 801717e:	2b03      	cmp	r3, #3
 8017180:	d00b      	beq.n	801719a <USBD_GetConfig+0x4a>
 8017182:	e012      	b.n	80171aa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	2200      	movs	r2, #0
 8017188:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	3308      	adds	r3, #8
 801718e:	2201      	movs	r2, #1
 8017190:	4619      	mov	r1, r3
 8017192:	6878      	ldr	r0, [r7, #4]
 8017194:	f000 f93c 	bl	8017410 <USBD_CtlSendData>
        break;
 8017198:	e00c      	b.n	80171b4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	3304      	adds	r3, #4
 801719e:	2201      	movs	r2, #1
 80171a0:	4619      	mov	r1, r3
 80171a2:	6878      	ldr	r0, [r7, #4]
 80171a4:	f000 f934 	bl	8017410 <USBD_CtlSendData>
        break;
 80171a8:	e004      	b.n	80171b4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80171aa:	6839      	ldr	r1, [r7, #0]
 80171ac:	6878      	ldr	r0, [r7, #4]
 80171ae:	f000 f8be 	bl	801732e <USBD_CtlError>
        break;
 80171b2:	bf00      	nop
}
 80171b4:	bf00      	nop
 80171b6:	3708      	adds	r7, #8
 80171b8:	46bd      	mov	sp, r7
 80171ba:	bd80      	pop	{r7, pc}

080171bc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80171bc:	b580      	push	{r7, lr}
 80171be:	b082      	sub	sp, #8
 80171c0:	af00      	add	r7, sp, #0
 80171c2:	6078      	str	r0, [r7, #4]
 80171c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80171cc:	b2db      	uxtb	r3, r3
 80171ce:	3b01      	subs	r3, #1
 80171d0:	2b02      	cmp	r3, #2
 80171d2:	d81e      	bhi.n	8017212 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80171d4:	683b      	ldr	r3, [r7, #0]
 80171d6:	88db      	ldrh	r3, [r3, #6]
 80171d8:	2b02      	cmp	r3, #2
 80171da:	d004      	beq.n	80171e6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80171dc:	6839      	ldr	r1, [r7, #0]
 80171de:	6878      	ldr	r0, [r7, #4]
 80171e0:	f000 f8a5 	bl	801732e <USBD_CtlError>
        break;
 80171e4:	e01a      	b.n	801721c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	2201      	movs	r2, #1
 80171ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d005      	beq.n	8017202 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	68db      	ldr	r3, [r3, #12]
 80171fa:	f043 0202 	orr.w	r2, r3, #2
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	330c      	adds	r3, #12
 8017206:	2202      	movs	r2, #2
 8017208:	4619      	mov	r1, r3
 801720a:	6878      	ldr	r0, [r7, #4]
 801720c:	f000 f900 	bl	8017410 <USBD_CtlSendData>
      break;
 8017210:	e004      	b.n	801721c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8017212:	6839      	ldr	r1, [r7, #0]
 8017214:	6878      	ldr	r0, [r7, #4]
 8017216:	f000 f88a 	bl	801732e <USBD_CtlError>
      break;
 801721a:	bf00      	nop
  }
}
 801721c:	bf00      	nop
 801721e:	3708      	adds	r7, #8
 8017220:	46bd      	mov	sp, r7
 8017222:	bd80      	pop	{r7, pc}

08017224 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017224:	b580      	push	{r7, lr}
 8017226:	b082      	sub	sp, #8
 8017228:	af00      	add	r7, sp, #0
 801722a:	6078      	str	r0, [r7, #4]
 801722c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801722e:	683b      	ldr	r3, [r7, #0]
 8017230:	885b      	ldrh	r3, [r3, #2]
 8017232:	2b01      	cmp	r3, #1
 8017234:	d107      	bne.n	8017246 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	2201      	movs	r2, #1
 801723a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801723e:	6878      	ldr	r0, [r7, #4]
 8017240:	f000 f940 	bl	80174c4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8017244:	e013      	b.n	801726e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8017246:	683b      	ldr	r3, [r7, #0]
 8017248:	885b      	ldrh	r3, [r3, #2]
 801724a:	2b02      	cmp	r3, #2
 801724c:	d10b      	bne.n	8017266 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801724e:	683b      	ldr	r3, [r7, #0]
 8017250:	889b      	ldrh	r3, [r3, #4]
 8017252:	0a1b      	lsrs	r3, r3, #8
 8017254:	b29b      	uxth	r3, r3
 8017256:	b2da      	uxtb	r2, r3
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801725e:	6878      	ldr	r0, [r7, #4]
 8017260:	f000 f930 	bl	80174c4 <USBD_CtlSendStatus>
}
 8017264:	e003      	b.n	801726e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8017266:	6839      	ldr	r1, [r7, #0]
 8017268:	6878      	ldr	r0, [r7, #4]
 801726a:	f000 f860 	bl	801732e <USBD_CtlError>
}
 801726e:	bf00      	nop
 8017270:	3708      	adds	r7, #8
 8017272:	46bd      	mov	sp, r7
 8017274:	bd80      	pop	{r7, pc}

08017276 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017276:	b580      	push	{r7, lr}
 8017278:	b082      	sub	sp, #8
 801727a:	af00      	add	r7, sp, #0
 801727c:	6078      	str	r0, [r7, #4]
 801727e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017286:	b2db      	uxtb	r3, r3
 8017288:	3b01      	subs	r3, #1
 801728a:	2b02      	cmp	r3, #2
 801728c:	d80b      	bhi.n	80172a6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801728e:	683b      	ldr	r3, [r7, #0]
 8017290:	885b      	ldrh	r3, [r3, #2]
 8017292:	2b01      	cmp	r3, #1
 8017294:	d10c      	bne.n	80172b0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	2200      	movs	r2, #0
 801729a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801729e:	6878      	ldr	r0, [r7, #4]
 80172a0:	f000 f910 	bl	80174c4 <USBD_CtlSendStatus>
      }
      break;
 80172a4:	e004      	b.n	80172b0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80172a6:	6839      	ldr	r1, [r7, #0]
 80172a8:	6878      	ldr	r0, [r7, #4]
 80172aa:	f000 f840 	bl	801732e <USBD_CtlError>
      break;
 80172ae:	e000      	b.n	80172b2 <USBD_ClrFeature+0x3c>
      break;
 80172b0:	bf00      	nop
  }
}
 80172b2:	bf00      	nop
 80172b4:	3708      	adds	r7, #8
 80172b6:	46bd      	mov	sp, r7
 80172b8:	bd80      	pop	{r7, pc}

080172ba <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80172ba:	b580      	push	{r7, lr}
 80172bc:	b084      	sub	sp, #16
 80172be:	af00      	add	r7, sp, #0
 80172c0:	6078      	str	r0, [r7, #4]
 80172c2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80172c4:	683b      	ldr	r3, [r7, #0]
 80172c6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	781a      	ldrb	r2, [r3, #0]
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80172d0:	68fb      	ldr	r3, [r7, #12]
 80172d2:	3301      	adds	r3, #1
 80172d4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	781a      	ldrb	r2, [r3, #0]
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	3301      	adds	r3, #1
 80172e2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80172e4:	68f8      	ldr	r0, [r7, #12]
 80172e6:	f7ff fa41 	bl	801676c <SWAPBYTE>
 80172ea:	4603      	mov	r3, r0
 80172ec:	461a      	mov	r2, r3
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80172f2:	68fb      	ldr	r3, [r7, #12]
 80172f4:	3301      	adds	r3, #1
 80172f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	3301      	adds	r3, #1
 80172fc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80172fe:	68f8      	ldr	r0, [r7, #12]
 8017300:	f7ff fa34 	bl	801676c <SWAPBYTE>
 8017304:	4603      	mov	r3, r0
 8017306:	461a      	mov	r2, r3
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801730c:	68fb      	ldr	r3, [r7, #12]
 801730e:	3301      	adds	r3, #1
 8017310:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	3301      	adds	r3, #1
 8017316:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8017318:	68f8      	ldr	r0, [r7, #12]
 801731a:	f7ff fa27 	bl	801676c <SWAPBYTE>
 801731e:	4603      	mov	r3, r0
 8017320:	461a      	mov	r2, r3
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	80da      	strh	r2, [r3, #6]
}
 8017326:	bf00      	nop
 8017328:	3710      	adds	r7, #16
 801732a:	46bd      	mov	sp, r7
 801732c:	bd80      	pop	{r7, pc}

0801732e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801732e:	b580      	push	{r7, lr}
 8017330:	b082      	sub	sp, #8
 8017332:	af00      	add	r7, sp, #0
 8017334:	6078      	str	r0, [r7, #4]
 8017336:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8017338:	2180      	movs	r1, #128	; 0x80
 801733a:	6878      	ldr	r0, [r7, #4]
 801733c:	f003 fcbe 	bl	801acbc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8017340:	2100      	movs	r1, #0
 8017342:	6878      	ldr	r0, [r7, #4]
 8017344:	f003 fcba 	bl	801acbc <USBD_LL_StallEP>
}
 8017348:	bf00      	nop
 801734a:	3708      	adds	r7, #8
 801734c:	46bd      	mov	sp, r7
 801734e:	bd80      	pop	{r7, pc}

08017350 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8017350:	b580      	push	{r7, lr}
 8017352:	b086      	sub	sp, #24
 8017354:	af00      	add	r7, sp, #0
 8017356:	60f8      	str	r0, [r7, #12]
 8017358:	60b9      	str	r1, [r7, #8]
 801735a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801735c:	2300      	movs	r3, #0
 801735e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	2b00      	cmp	r3, #0
 8017364:	d036      	beq.n	80173d4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8017366:	68fb      	ldr	r3, [r7, #12]
 8017368:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801736a:	6938      	ldr	r0, [r7, #16]
 801736c:	f000 f836 	bl	80173dc <USBD_GetLen>
 8017370:	4603      	mov	r3, r0
 8017372:	3301      	adds	r3, #1
 8017374:	b29b      	uxth	r3, r3
 8017376:	005b      	lsls	r3, r3, #1
 8017378:	b29a      	uxth	r2, r3
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801737e:	7dfb      	ldrb	r3, [r7, #23]
 8017380:	68ba      	ldr	r2, [r7, #8]
 8017382:	4413      	add	r3, r2
 8017384:	687a      	ldr	r2, [r7, #4]
 8017386:	7812      	ldrb	r2, [r2, #0]
 8017388:	701a      	strb	r2, [r3, #0]
  idx++;
 801738a:	7dfb      	ldrb	r3, [r7, #23]
 801738c:	3301      	adds	r3, #1
 801738e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017390:	7dfb      	ldrb	r3, [r7, #23]
 8017392:	68ba      	ldr	r2, [r7, #8]
 8017394:	4413      	add	r3, r2
 8017396:	2203      	movs	r2, #3
 8017398:	701a      	strb	r2, [r3, #0]
  idx++;
 801739a:	7dfb      	ldrb	r3, [r7, #23]
 801739c:	3301      	adds	r3, #1
 801739e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80173a0:	e013      	b.n	80173ca <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80173a2:	7dfb      	ldrb	r3, [r7, #23]
 80173a4:	68ba      	ldr	r2, [r7, #8]
 80173a6:	4413      	add	r3, r2
 80173a8:	693a      	ldr	r2, [r7, #16]
 80173aa:	7812      	ldrb	r2, [r2, #0]
 80173ac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80173ae:	693b      	ldr	r3, [r7, #16]
 80173b0:	3301      	adds	r3, #1
 80173b2:	613b      	str	r3, [r7, #16]
    idx++;
 80173b4:	7dfb      	ldrb	r3, [r7, #23]
 80173b6:	3301      	adds	r3, #1
 80173b8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80173ba:	7dfb      	ldrb	r3, [r7, #23]
 80173bc:	68ba      	ldr	r2, [r7, #8]
 80173be:	4413      	add	r3, r2
 80173c0:	2200      	movs	r2, #0
 80173c2:	701a      	strb	r2, [r3, #0]
    idx++;
 80173c4:	7dfb      	ldrb	r3, [r7, #23]
 80173c6:	3301      	adds	r3, #1
 80173c8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80173ca:	693b      	ldr	r3, [r7, #16]
 80173cc:	781b      	ldrb	r3, [r3, #0]
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d1e7      	bne.n	80173a2 <USBD_GetString+0x52>
 80173d2:	e000      	b.n	80173d6 <USBD_GetString+0x86>
    return;
 80173d4:	bf00      	nop
  }
}
 80173d6:	3718      	adds	r7, #24
 80173d8:	46bd      	mov	sp, r7
 80173da:	bd80      	pop	{r7, pc}

080173dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80173dc:	b480      	push	{r7}
 80173de:	b085      	sub	sp, #20
 80173e0:	af00      	add	r7, sp, #0
 80173e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80173e4:	2300      	movs	r3, #0
 80173e6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80173ec:	e005      	b.n	80173fa <USBD_GetLen+0x1e>
  {
    len++;
 80173ee:	7bfb      	ldrb	r3, [r7, #15]
 80173f0:	3301      	adds	r3, #1
 80173f2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80173f4:	68bb      	ldr	r3, [r7, #8]
 80173f6:	3301      	adds	r3, #1
 80173f8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80173fa:	68bb      	ldr	r3, [r7, #8]
 80173fc:	781b      	ldrb	r3, [r3, #0]
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d1f5      	bne.n	80173ee <USBD_GetLen+0x12>
  }

  return len;
 8017402:	7bfb      	ldrb	r3, [r7, #15]
}
 8017404:	4618      	mov	r0, r3
 8017406:	3714      	adds	r7, #20
 8017408:	46bd      	mov	sp, r7
 801740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801740e:	4770      	bx	lr

08017410 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8017410:	b580      	push	{r7, lr}
 8017412:	b084      	sub	sp, #16
 8017414:	af00      	add	r7, sp, #0
 8017416:	60f8      	str	r0, [r7, #12]
 8017418:	60b9      	str	r1, [r7, #8]
 801741a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	2202      	movs	r2, #2
 8017420:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	687a      	ldr	r2, [r7, #4]
 8017428:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	687a      	ldr	r2, [r7, #4]
 801742e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	68ba      	ldr	r2, [r7, #8]
 8017434:	2100      	movs	r1, #0
 8017436:	68f8      	ldr	r0, [r7, #12]
 8017438:	f003 fcc9 	bl	801adce <USBD_LL_Transmit>

  return USBD_OK;
 801743c:	2300      	movs	r3, #0
}
 801743e:	4618      	mov	r0, r3
 8017440:	3710      	adds	r7, #16
 8017442:	46bd      	mov	sp, r7
 8017444:	bd80      	pop	{r7, pc}

08017446 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8017446:	b580      	push	{r7, lr}
 8017448:	b084      	sub	sp, #16
 801744a:	af00      	add	r7, sp, #0
 801744c:	60f8      	str	r0, [r7, #12]
 801744e:	60b9      	str	r1, [r7, #8]
 8017450:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	68ba      	ldr	r2, [r7, #8]
 8017456:	2100      	movs	r1, #0
 8017458:	68f8      	ldr	r0, [r7, #12]
 801745a:	f003 fcb8 	bl	801adce <USBD_LL_Transmit>

  return USBD_OK;
 801745e:	2300      	movs	r3, #0
}
 8017460:	4618      	mov	r0, r3
 8017462:	3710      	adds	r7, #16
 8017464:	46bd      	mov	sp, r7
 8017466:	bd80      	pop	{r7, pc}

08017468 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8017468:	b580      	push	{r7, lr}
 801746a:	b084      	sub	sp, #16
 801746c:	af00      	add	r7, sp, #0
 801746e:	60f8      	str	r0, [r7, #12]
 8017470:	60b9      	str	r1, [r7, #8]
 8017472:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017474:	68fb      	ldr	r3, [r7, #12]
 8017476:	2203      	movs	r2, #3
 8017478:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	687a      	ldr	r2, [r7, #4]
 8017480:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017484:	68fb      	ldr	r3, [r7, #12]
 8017486:	687a      	ldr	r2, [r7, #4]
 8017488:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	68ba      	ldr	r2, [r7, #8]
 8017490:	2100      	movs	r1, #0
 8017492:	68f8      	ldr	r0, [r7, #12]
 8017494:	f003 fcbc 	bl	801ae10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017498:	2300      	movs	r3, #0
}
 801749a:	4618      	mov	r0, r3
 801749c:	3710      	adds	r7, #16
 801749e:	46bd      	mov	sp, r7
 80174a0:	bd80      	pop	{r7, pc}

080174a2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80174a2:	b580      	push	{r7, lr}
 80174a4:	b084      	sub	sp, #16
 80174a6:	af00      	add	r7, sp, #0
 80174a8:	60f8      	str	r0, [r7, #12]
 80174aa:	60b9      	str	r1, [r7, #8]
 80174ac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	68ba      	ldr	r2, [r7, #8]
 80174b2:	2100      	movs	r1, #0
 80174b4:	68f8      	ldr	r0, [r7, #12]
 80174b6:	f003 fcab 	bl	801ae10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80174ba:	2300      	movs	r3, #0
}
 80174bc:	4618      	mov	r0, r3
 80174be:	3710      	adds	r7, #16
 80174c0:	46bd      	mov	sp, r7
 80174c2:	bd80      	pop	{r7, pc}

080174c4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80174c4:	b580      	push	{r7, lr}
 80174c6:	b082      	sub	sp, #8
 80174c8:	af00      	add	r7, sp, #0
 80174ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	2204      	movs	r2, #4
 80174d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80174d4:	2300      	movs	r3, #0
 80174d6:	2200      	movs	r2, #0
 80174d8:	2100      	movs	r1, #0
 80174da:	6878      	ldr	r0, [r7, #4]
 80174dc:	f003 fc77 	bl	801adce <USBD_LL_Transmit>

  return USBD_OK;
 80174e0:	2300      	movs	r3, #0
}
 80174e2:	4618      	mov	r0, r3
 80174e4:	3708      	adds	r7, #8
 80174e6:	46bd      	mov	sp, r7
 80174e8:	bd80      	pop	{r7, pc}

080174ea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80174ea:	b580      	push	{r7, lr}
 80174ec:	b082      	sub	sp, #8
 80174ee:	af00      	add	r7, sp, #0
 80174f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	2205      	movs	r2, #5
 80174f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80174fa:	2300      	movs	r3, #0
 80174fc:	2200      	movs	r2, #0
 80174fe:	2100      	movs	r1, #0
 8017500:	6878      	ldr	r0, [r7, #4]
 8017502:	f003 fc85 	bl	801ae10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017506:	2300      	movs	r3, #0
}
 8017508:	4618      	mov	r0, r3
 801750a:	3708      	adds	r7, #8
 801750c:	46bd      	mov	sp, r7
 801750e:	bd80      	pop	{r7, pc}

08017510 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8017510:	b580      	push	{r7, lr}
 8017512:	b084      	sub	sp, #16
 8017514:	af00      	add	r7, sp, #0
 8017516:	4603      	mov	r3, r0
 8017518:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801751a:	79fb      	ldrb	r3, [r7, #7]
 801751c:	4a08      	ldr	r2, [pc, #32]	; (8017540 <disk_status+0x30>)
 801751e:	009b      	lsls	r3, r3, #2
 8017520:	4413      	add	r3, r2
 8017522:	685b      	ldr	r3, [r3, #4]
 8017524:	685b      	ldr	r3, [r3, #4]
 8017526:	79fa      	ldrb	r2, [r7, #7]
 8017528:	4905      	ldr	r1, [pc, #20]	; (8017540 <disk_status+0x30>)
 801752a:	440a      	add	r2, r1
 801752c:	7a12      	ldrb	r2, [r2, #8]
 801752e:	4610      	mov	r0, r2
 8017530:	4798      	blx	r3
 8017532:	4603      	mov	r3, r0
 8017534:	73fb      	strb	r3, [r7, #15]
  return stat;
 8017536:	7bfb      	ldrb	r3, [r7, #15]
}
 8017538:	4618      	mov	r0, r3
 801753a:	3710      	adds	r7, #16
 801753c:	46bd      	mov	sp, r7
 801753e:	bd80      	pop	{r7, pc}
 8017540:	240018d0 	.word	0x240018d0

08017544 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8017544:	b580      	push	{r7, lr}
 8017546:	b084      	sub	sp, #16
 8017548:	af00      	add	r7, sp, #0
 801754a:	4603      	mov	r3, r0
 801754c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801754e:	2300      	movs	r3, #0
 8017550:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8017552:	79fb      	ldrb	r3, [r7, #7]
 8017554:	4a0d      	ldr	r2, [pc, #52]	; (801758c <disk_initialize+0x48>)
 8017556:	5cd3      	ldrb	r3, [r2, r3]
 8017558:	2b00      	cmp	r3, #0
 801755a:	d111      	bne.n	8017580 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801755c:	79fb      	ldrb	r3, [r7, #7]
 801755e:	4a0b      	ldr	r2, [pc, #44]	; (801758c <disk_initialize+0x48>)
 8017560:	2101      	movs	r1, #1
 8017562:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8017564:	79fb      	ldrb	r3, [r7, #7]
 8017566:	4a09      	ldr	r2, [pc, #36]	; (801758c <disk_initialize+0x48>)
 8017568:	009b      	lsls	r3, r3, #2
 801756a:	4413      	add	r3, r2
 801756c:	685b      	ldr	r3, [r3, #4]
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	79fa      	ldrb	r2, [r7, #7]
 8017572:	4906      	ldr	r1, [pc, #24]	; (801758c <disk_initialize+0x48>)
 8017574:	440a      	add	r2, r1
 8017576:	7a12      	ldrb	r2, [r2, #8]
 8017578:	4610      	mov	r0, r2
 801757a:	4798      	blx	r3
 801757c:	4603      	mov	r3, r0
 801757e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8017580:	7bfb      	ldrb	r3, [r7, #15]
}
 8017582:	4618      	mov	r0, r3
 8017584:	3710      	adds	r7, #16
 8017586:	46bd      	mov	sp, r7
 8017588:	bd80      	pop	{r7, pc}
 801758a:	bf00      	nop
 801758c:	240018d0 	.word	0x240018d0

08017590 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8017590:	b590      	push	{r4, r7, lr}
 8017592:	b087      	sub	sp, #28
 8017594:	af00      	add	r7, sp, #0
 8017596:	60b9      	str	r1, [r7, #8]
 8017598:	607a      	str	r2, [r7, #4]
 801759a:	603b      	str	r3, [r7, #0]
 801759c:	4603      	mov	r3, r0
 801759e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80175a0:	7bfb      	ldrb	r3, [r7, #15]
 80175a2:	4a0a      	ldr	r2, [pc, #40]	; (80175cc <disk_read+0x3c>)
 80175a4:	009b      	lsls	r3, r3, #2
 80175a6:	4413      	add	r3, r2
 80175a8:	685b      	ldr	r3, [r3, #4]
 80175aa:	689c      	ldr	r4, [r3, #8]
 80175ac:	7bfb      	ldrb	r3, [r7, #15]
 80175ae:	4a07      	ldr	r2, [pc, #28]	; (80175cc <disk_read+0x3c>)
 80175b0:	4413      	add	r3, r2
 80175b2:	7a18      	ldrb	r0, [r3, #8]
 80175b4:	683b      	ldr	r3, [r7, #0]
 80175b6:	687a      	ldr	r2, [r7, #4]
 80175b8:	68b9      	ldr	r1, [r7, #8]
 80175ba:	47a0      	blx	r4
 80175bc:	4603      	mov	r3, r0
 80175be:	75fb      	strb	r3, [r7, #23]
  return res;
 80175c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80175c2:	4618      	mov	r0, r3
 80175c4:	371c      	adds	r7, #28
 80175c6:	46bd      	mov	sp, r7
 80175c8:	bd90      	pop	{r4, r7, pc}
 80175ca:	bf00      	nop
 80175cc:	240018d0 	.word	0x240018d0

080175d0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80175d0:	b590      	push	{r4, r7, lr}
 80175d2:	b087      	sub	sp, #28
 80175d4:	af00      	add	r7, sp, #0
 80175d6:	60b9      	str	r1, [r7, #8]
 80175d8:	607a      	str	r2, [r7, #4]
 80175da:	603b      	str	r3, [r7, #0]
 80175dc:	4603      	mov	r3, r0
 80175de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80175e0:	7bfb      	ldrb	r3, [r7, #15]
 80175e2:	4a0a      	ldr	r2, [pc, #40]	; (801760c <disk_write+0x3c>)
 80175e4:	009b      	lsls	r3, r3, #2
 80175e6:	4413      	add	r3, r2
 80175e8:	685b      	ldr	r3, [r3, #4]
 80175ea:	68dc      	ldr	r4, [r3, #12]
 80175ec:	7bfb      	ldrb	r3, [r7, #15]
 80175ee:	4a07      	ldr	r2, [pc, #28]	; (801760c <disk_write+0x3c>)
 80175f0:	4413      	add	r3, r2
 80175f2:	7a18      	ldrb	r0, [r3, #8]
 80175f4:	683b      	ldr	r3, [r7, #0]
 80175f6:	687a      	ldr	r2, [r7, #4]
 80175f8:	68b9      	ldr	r1, [r7, #8]
 80175fa:	47a0      	blx	r4
 80175fc:	4603      	mov	r3, r0
 80175fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8017600:	7dfb      	ldrb	r3, [r7, #23]
}
 8017602:	4618      	mov	r0, r3
 8017604:	371c      	adds	r7, #28
 8017606:	46bd      	mov	sp, r7
 8017608:	bd90      	pop	{r4, r7, pc}
 801760a:	bf00      	nop
 801760c:	240018d0 	.word	0x240018d0

08017610 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8017610:	b580      	push	{r7, lr}
 8017612:	b084      	sub	sp, #16
 8017614:	af00      	add	r7, sp, #0
 8017616:	4603      	mov	r3, r0
 8017618:	603a      	str	r2, [r7, #0]
 801761a:	71fb      	strb	r3, [r7, #7]
 801761c:	460b      	mov	r3, r1
 801761e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8017620:	79fb      	ldrb	r3, [r7, #7]
 8017622:	4a09      	ldr	r2, [pc, #36]	; (8017648 <disk_ioctl+0x38>)
 8017624:	009b      	lsls	r3, r3, #2
 8017626:	4413      	add	r3, r2
 8017628:	685b      	ldr	r3, [r3, #4]
 801762a:	691b      	ldr	r3, [r3, #16]
 801762c:	79fa      	ldrb	r2, [r7, #7]
 801762e:	4906      	ldr	r1, [pc, #24]	; (8017648 <disk_ioctl+0x38>)
 8017630:	440a      	add	r2, r1
 8017632:	7a10      	ldrb	r0, [r2, #8]
 8017634:	79b9      	ldrb	r1, [r7, #6]
 8017636:	683a      	ldr	r2, [r7, #0]
 8017638:	4798      	blx	r3
 801763a:	4603      	mov	r3, r0
 801763c:	73fb      	strb	r3, [r7, #15]
  return res;
 801763e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017640:	4618      	mov	r0, r3
 8017642:	3710      	adds	r7, #16
 8017644:	46bd      	mov	sp, r7
 8017646:	bd80      	pop	{r7, pc}
 8017648:	240018d0 	.word	0x240018d0

0801764c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801764c:	b480      	push	{r7}
 801764e:	b085      	sub	sp, #20
 8017650:	af00      	add	r7, sp, #0
 8017652:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	3301      	adds	r3, #1
 8017658:	781b      	ldrb	r3, [r3, #0]
 801765a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801765c:	89fb      	ldrh	r3, [r7, #14]
 801765e:	021b      	lsls	r3, r3, #8
 8017660:	b21a      	sxth	r2, r3
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	781b      	ldrb	r3, [r3, #0]
 8017666:	b21b      	sxth	r3, r3
 8017668:	4313      	orrs	r3, r2
 801766a:	b21b      	sxth	r3, r3
 801766c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801766e:	89fb      	ldrh	r3, [r7, #14]
}
 8017670:	4618      	mov	r0, r3
 8017672:	3714      	adds	r7, #20
 8017674:	46bd      	mov	sp, r7
 8017676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801767a:	4770      	bx	lr

0801767c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801767c:	b480      	push	{r7}
 801767e:	b085      	sub	sp, #20
 8017680:	af00      	add	r7, sp, #0
 8017682:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	3303      	adds	r3, #3
 8017688:	781b      	ldrb	r3, [r3, #0]
 801768a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801768c:	68fb      	ldr	r3, [r7, #12]
 801768e:	021b      	lsls	r3, r3, #8
 8017690:	687a      	ldr	r2, [r7, #4]
 8017692:	3202      	adds	r2, #2
 8017694:	7812      	ldrb	r2, [r2, #0]
 8017696:	4313      	orrs	r3, r2
 8017698:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801769a:	68fb      	ldr	r3, [r7, #12]
 801769c:	021b      	lsls	r3, r3, #8
 801769e:	687a      	ldr	r2, [r7, #4]
 80176a0:	3201      	adds	r2, #1
 80176a2:	7812      	ldrb	r2, [r2, #0]
 80176a4:	4313      	orrs	r3, r2
 80176a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	021b      	lsls	r3, r3, #8
 80176ac:	687a      	ldr	r2, [r7, #4]
 80176ae:	7812      	ldrb	r2, [r2, #0]
 80176b0:	4313      	orrs	r3, r2
 80176b2:	60fb      	str	r3, [r7, #12]
	return rv;
 80176b4:	68fb      	ldr	r3, [r7, #12]
}
 80176b6:	4618      	mov	r0, r3
 80176b8:	3714      	adds	r7, #20
 80176ba:	46bd      	mov	sp, r7
 80176bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176c0:	4770      	bx	lr

080176c2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80176c2:	b480      	push	{r7}
 80176c4:	b083      	sub	sp, #12
 80176c6:	af00      	add	r7, sp, #0
 80176c8:	6078      	str	r0, [r7, #4]
 80176ca:	460b      	mov	r3, r1
 80176cc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	1c5a      	adds	r2, r3, #1
 80176d2:	607a      	str	r2, [r7, #4]
 80176d4:	887a      	ldrh	r2, [r7, #2]
 80176d6:	b2d2      	uxtb	r2, r2
 80176d8:	701a      	strb	r2, [r3, #0]
 80176da:	887b      	ldrh	r3, [r7, #2]
 80176dc:	0a1b      	lsrs	r3, r3, #8
 80176de:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	1c5a      	adds	r2, r3, #1
 80176e4:	607a      	str	r2, [r7, #4]
 80176e6:	887a      	ldrh	r2, [r7, #2]
 80176e8:	b2d2      	uxtb	r2, r2
 80176ea:	701a      	strb	r2, [r3, #0]
}
 80176ec:	bf00      	nop
 80176ee:	370c      	adds	r7, #12
 80176f0:	46bd      	mov	sp, r7
 80176f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176f6:	4770      	bx	lr

080176f8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80176f8:	b480      	push	{r7}
 80176fa:	b083      	sub	sp, #12
 80176fc:	af00      	add	r7, sp, #0
 80176fe:	6078      	str	r0, [r7, #4]
 8017700:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	1c5a      	adds	r2, r3, #1
 8017706:	607a      	str	r2, [r7, #4]
 8017708:	683a      	ldr	r2, [r7, #0]
 801770a:	b2d2      	uxtb	r2, r2
 801770c:	701a      	strb	r2, [r3, #0]
 801770e:	683b      	ldr	r3, [r7, #0]
 8017710:	0a1b      	lsrs	r3, r3, #8
 8017712:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	1c5a      	adds	r2, r3, #1
 8017718:	607a      	str	r2, [r7, #4]
 801771a:	683a      	ldr	r2, [r7, #0]
 801771c:	b2d2      	uxtb	r2, r2
 801771e:	701a      	strb	r2, [r3, #0]
 8017720:	683b      	ldr	r3, [r7, #0]
 8017722:	0a1b      	lsrs	r3, r3, #8
 8017724:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	1c5a      	adds	r2, r3, #1
 801772a:	607a      	str	r2, [r7, #4]
 801772c:	683a      	ldr	r2, [r7, #0]
 801772e:	b2d2      	uxtb	r2, r2
 8017730:	701a      	strb	r2, [r3, #0]
 8017732:	683b      	ldr	r3, [r7, #0]
 8017734:	0a1b      	lsrs	r3, r3, #8
 8017736:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	1c5a      	adds	r2, r3, #1
 801773c:	607a      	str	r2, [r7, #4]
 801773e:	683a      	ldr	r2, [r7, #0]
 8017740:	b2d2      	uxtb	r2, r2
 8017742:	701a      	strb	r2, [r3, #0]
}
 8017744:	bf00      	nop
 8017746:	370c      	adds	r7, #12
 8017748:	46bd      	mov	sp, r7
 801774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801774e:	4770      	bx	lr

08017750 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8017750:	b480      	push	{r7}
 8017752:	b087      	sub	sp, #28
 8017754:	af00      	add	r7, sp, #0
 8017756:	60f8      	str	r0, [r7, #12]
 8017758:	60b9      	str	r1, [r7, #8]
 801775a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801775c:	68fb      	ldr	r3, [r7, #12]
 801775e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8017760:	68bb      	ldr	r3, [r7, #8]
 8017762:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	2b00      	cmp	r3, #0
 8017768:	d00d      	beq.n	8017786 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801776a:	693a      	ldr	r2, [r7, #16]
 801776c:	1c53      	adds	r3, r2, #1
 801776e:	613b      	str	r3, [r7, #16]
 8017770:	697b      	ldr	r3, [r7, #20]
 8017772:	1c59      	adds	r1, r3, #1
 8017774:	6179      	str	r1, [r7, #20]
 8017776:	7812      	ldrb	r2, [r2, #0]
 8017778:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	3b01      	subs	r3, #1
 801777e:	607b      	str	r3, [r7, #4]
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	2b00      	cmp	r3, #0
 8017784:	d1f1      	bne.n	801776a <mem_cpy+0x1a>
	}
}
 8017786:	bf00      	nop
 8017788:	371c      	adds	r7, #28
 801778a:	46bd      	mov	sp, r7
 801778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017790:	4770      	bx	lr

08017792 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8017792:	b480      	push	{r7}
 8017794:	b087      	sub	sp, #28
 8017796:	af00      	add	r7, sp, #0
 8017798:	60f8      	str	r0, [r7, #12]
 801779a:	60b9      	str	r1, [r7, #8]
 801779c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801779e:	68fb      	ldr	r3, [r7, #12]
 80177a0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80177a2:	697b      	ldr	r3, [r7, #20]
 80177a4:	1c5a      	adds	r2, r3, #1
 80177a6:	617a      	str	r2, [r7, #20]
 80177a8:	68ba      	ldr	r2, [r7, #8]
 80177aa:	b2d2      	uxtb	r2, r2
 80177ac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	3b01      	subs	r3, #1
 80177b2:	607b      	str	r3, [r7, #4]
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d1f3      	bne.n	80177a2 <mem_set+0x10>
}
 80177ba:	bf00      	nop
 80177bc:	bf00      	nop
 80177be:	371c      	adds	r7, #28
 80177c0:	46bd      	mov	sp, r7
 80177c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177c6:	4770      	bx	lr

080177c8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80177c8:	b480      	push	{r7}
 80177ca:	b089      	sub	sp, #36	; 0x24
 80177cc:	af00      	add	r7, sp, #0
 80177ce:	60f8      	str	r0, [r7, #12]
 80177d0:	60b9      	str	r1, [r7, #8]
 80177d2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80177d4:	68fb      	ldr	r3, [r7, #12]
 80177d6:	61fb      	str	r3, [r7, #28]
 80177d8:	68bb      	ldr	r3, [r7, #8]
 80177da:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80177dc:	2300      	movs	r3, #0
 80177de:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80177e0:	69fb      	ldr	r3, [r7, #28]
 80177e2:	1c5a      	adds	r2, r3, #1
 80177e4:	61fa      	str	r2, [r7, #28]
 80177e6:	781b      	ldrb	r3, [r3, #0]
 80177e8:	4619      	mov	r1, r3
 80177ea:	69bb      	ldr	r3, [r7, #24]
 80177ec:	1c5a      	adds	r2, r3, #1
 80177ee:	61ba      	str	r2, [r7, #24]
 80177f0:	781b      	ldrb	r3, [r3, #0]
 80177f2:	1acb      	subs	r3, r1, r3
 80177f4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	3b01      	subs	r3, #1
 80177fa:	607b      	str	r3, [r7, #4]
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d002      	beq.n	8017808 <mem_cmp+0x40>
 8017802:	697b      	ldr	r3, [r7, #20]
 8017804:	2b00      	cmp	r3, #0
 8017806:	d0eb      	beq.n	80177e0 <mem_cmp+0x18>

	return r;
 8017808:	697b      	ldr	r3, [r7, #20]
}
 801780a:	4618      	mov	r0, r3
 801780c:	3724      	adds	r7, #36	; 0x24
 801780e:	46bd      	mov	sp, r7
 8017810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017814:	4770      	bx	lr

08017816 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8017816:	b480      	push	{r7}
 8017818:	b083      	sub	sp, #12
 801781a:	af00      	add	r7, sp, #0
 801781c:	6078      	str	r0, [r7, #4]
 801781e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8017820:	e002      	b.n	8017828 <chk_chr+0x12>
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	3301      	adds	r3, #1
 8017826:	607b      	str	r3, [r7, #4]
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	781b      	ldrb	r3, [r3, #0]
 801782c:	2b00      	cmp	r3, #0
 801782e:	d005      	beq.n	801783c <chk_chr+0x26>
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	781b      	ldrb	r3, [r3, #0]
 8017834:	461a      	mov	r2, r3
 8017836:	683b      	ldr	r3, [r7, #0]
 8017838:	4293      	cmp	r3, r2
 801783a:	d1f2      	bne.n	8017822 <chk_chr+0xc>
	return *str;
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	781b      	ldrb	r3, [r3, #0]
}
 8017840:	4618      	mov	r0, r3
 8017842:	370c      	adds	r7, #12
 8017844:	46bd      	mov	sp, r7
 8017846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801784a:	4770      	bx	lr

0801784c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801784c:	b480      	push	{r7}
 801784e:	b085      	sub	sp, #20
 8017850:	af00      	add	r7, sp, #0
 8017852:	6078      	str	r0, [r7, #4]
 8017854:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8017856:	2300      	movs	r3, #0
 8017858:	60bb      	str	r3, [r7, #8]
 801785a:	68bb      	ldr	r3, [r7, #8]
 801785c:	60fb      	str	r3, [r7, #12]
 801785e:	e029      	b.n	80178b4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8017860:	4a27      	ldr	r2, [pc, #156]	; (8017900 <chk_lock+0xb4>)
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	011b      	lsls	r3, r3, #4
 8017866:	4413      	add	r3, r2
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	2b00      	cmp	r3, #0
 801786c:	d01d      	beq.n	80178aa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801786e:	4a24      	ldr	r2, [pc, #144]	; (8017900 <chk_lock+0xb4>)
 8017870:	68fb      	ldr	r3, [r7, #12]
 8017872:	011b      	lsls	r3, r3, #4
 8017874:	4413      	add	r3, r2
 8017876:	681a      	ldr	r2, [r3, #0]
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	681b      	ldr	r3, [r3, #0]
 801787c:	429a      	cmp	r2, r3
 801787e:	d116      	bne.n	80178ae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8017880:	4a1f      	ldr	r2, [pc, #124]	; (8017900 <chk_lock+0xb4>)
 8017882:	68fb      	ldr	r3, [r7, #12]
 8017884:	011b      	lsls	r3, r3, #4
 8017886:	4413      	add	r3, r2
 8017888:	3304      	adds	r3, #4
 801788a:	681a      	ldr	r2, [r3, #0]
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017890:	429a      	cmp	r2, r3
 8017892:	d10c      	bne.n	80178ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017894:	4a1a      	ldr	r2, [pc, #104]	; (8017900 <chk_lock+0xb4>)
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	011b      	lsls	r3, r3, #4
 801789a:	4413      	add	r3, r2
 801789c:	3308      	adds	r3, #8
 801789e:	681a      	ldr	r2, [r3, #0]
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80178a4:	429a      	cmp	r2, r3
 80178a6:	d102      	bne.n	80178ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80178a8:	e007      	b.n	80178ba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80178aa:	2301      	movs	r3, #1
 80178ac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80178ae:	68fb      	ldr	r3, [r7, #12]
 80178b0:	3301      	adds	r3, #1
 80178b2:	60fb      	str	r3, [r7, #12]
 80178b4:	68fb      	ldr	r3, [r7, #12]
 80178b6:	2b01      	cmp	r3, #1
 80178b8:	d9d2      	bls.n	8017860 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80178ba:	68fb      	ldr	r3, [r7, #12]
 80178bc:	2b02      	cmp	r3, #2
 80178be:	d109      	bne.n	80178d4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80178c0:	68bb      	ldr	r3, [r7, #8]
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	d102      	bne.n	80178cc <chk_lock+0x80>
 80178c6:	683b      	ldr	r3, [r7, #0]
 80178c8:	2b02      	cmp	r3, #2
 80178ca:	d101      	bne.n	80178d0 <chk_lock+0x84>
 80178cc:	2300      	movs	r3, #0
 80178ce:	e010      	b.n	80178f2 <chk_lock+0xa6>
 80178d0:	2312      	movs	r3, #18
 80178d2:	e00e      	b.n	80178f2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80178d4:	683b      	ldr	r3, [r7, #0]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d108      	bne.n	80178ec <chk_lock+0xa0>
 80178da:	4a09      	ldr	r2, [pc, #36]	; (8017900 <chk_lock+0xb4>)
 80178dc:	68fb      	ldr	r3, [r7, #12]
 80178de:	011b      	lsls	r3, r3, #4
 80178e0:	4413      	add	r3, r2
 80178e2:	330c      	adds	r3, #12
 80178e4:	881b      	ldrh	r3, [r3, #0]
 80178e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80178ea:	d101      	bne.n	80178f0 <chk_lock+0xa4>
 80178ec:	2310      	movs	r3, #16
 80178ee:	e000      	b.n	80178f2 <chk_lock+0xa6>
 80178f0:	2300      	movs	r3, #0
}
 80178f2:	4618      	mov	r0, r3
 80178f4:	3714      	adds	r7, #20
 80178f6:	46bd      	mov	sp, r7
 80178f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178fc:	4770      	bx	lr
 80178fe:	bf00      	nop
 8017900:	240016b0 	.word	0x240016b0

08017904 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8017904:	b480      	push	{r7}
 8017906:	b083      	sub	sp, #12
 8017908:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801790a:	2300      	movs	r3, #0
 801790c:	607b      	str	r3, [r7, #4]
 801790e:	e002      	b.n	8017916 <enq_lock+0x12>
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	3301      	adds	r3, #1
 8017914:	607b      	str	r3, [r7, #4]
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	2b01      	cmp	r3, #1
 801791a:	d806      	bhi.n	801792a <enq_lock+0x26>
 801791c:	4a09      	ldr	r2, [pc, #36]	; (8017944 <enq_lock+0x40>)
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	011b      	lsls	r3, r3, #4
 8017922:	4413      	add	r3, r2
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	2b00      	cmp	r3, #0
 8017928:	d1f2      	bne.n	8017910 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	2b02      	cmp	r3, #2
 801792e:	bf14      	ite	ne
 8017930:	2301      	movne	r3, #1
 8017932:	2300      	moveq	r3, #0
 8017934:	b2db      	uxtb	r3, r3
}
 8017936:	4618      	mov	r0, r3
 8017938:	370c      	adds	r7, #12
 801793a:	46bd      	mov	sp, r7
 801793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017940:	4770      	bx	lr
 8017942:	bf00      	nop
 8017944:	240016b0 	.word	0x240016b0

08017948 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8017948:	b480      	push	{r7}
 801794a:	b085      	sub	sp, #20
 801794c:	af00      	add	r7, sp, #0
 801794e:	6078      	str	r0, [r7, #4]
 8017950:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017952:	2300      	movs	r3, #0
 8017954:	60fb      	str	r3, [r7, #12]
 8017956:	e01f      	b.n	8017998 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8017958:	4a41      	ldr	r2, [pc, #260]	; (8017a60 <inc_lock+0x118>)
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	011b      	lsls	r3, r3, #4
 801795e:	4413      	add	r3, r2
 8017960:	681a      	ldr	r2, [r3, #0]
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	429a      	cmp	r2, r3
 8017968:	d113      	bne.n	8017992 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801796a:	4a3d      	ldr	r2, [pc, #244]	; (8017a60 <inc_lock+0x118>)
 801796c:	68fb      	ldr	r3, [r7, #12]
 801796e:	011b      	lsls	r3, r3, #4
 8017970:	4413      	add	r3, r2
 8017972:	3304      	adds	r3, #4
 8017974:	681a      	ldr	r2, [r3, #0]
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801797a:	429a      	cmp	r2, r3
 801797c:	d109      	bne.n	8017992 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801797e:	4a38      	ldr	r2, [pc, #224]	; (8017a60 <inc_lock+0x118>)
 8017980:	68fb      	ldr	r3, [r7, #12]
 8017982:	011b      	lsls	r3, r3, #4
 8017984:	4413      	add	r3, r2
 8017986:	3308      	adds	r3, #8
 8017988:	681a      	ldr	r2, [r3, #0]
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801798e:	429a      	cmp	r2, r3
 8017990:	d006      	beq.n	80179a0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017992:	68fb      	ldr	r3, [r7, #12]
 8017994:	3301      	adds	r3, #1
 8017996:	60fb      	str	r3, [r7, #12]
 8017998:	68fb      	ldr	r3, [r7, #12]
 801799a:	2b01      	cmp	r3, #1
 801799c:	d9dc      	bls.n	8017958 <inc_lock+0x10>
 801799e:	e000      	b.n	80179a2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80179a0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80179a2:	68fb      	ldr	r3, [r7, #12]
 80179a4:	2b02      	cmp	r3, #2
 80179a6:	d132      	bne.n	8017a0e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80179a8:	2300      	movs	r3, #0
 80179aa:	60fb      	str	r3, [r7, #12]
 80179ac:	e002      	b.n	80179b4 <inc_lock+0x6c>
 80179ae:	68fb      	ldr	r3, [r7, #12]
 80179b0:	3301      	adds	r3, #1
 80179b2:	60fb      	str	r3, [r7, #12]
 80179b4:	68fb      	ldr	r3, [r7, #12]
 80179b6:	2b01      	cmp	r3, #1
 80179b8:	d806      	bhi.n	80179c8 <inc_lock+0x80>
 80179ba:	4a29      	ldr	r2, [pc, #164]	; (8017a60 <inc_lock+0x118>)
 80179bc:	68fb      	ldr	r3, [r7, #12]
 80179be:	011b      	lsls	r3, r3, #4
 80179c0:	4413      	add	r3, r2
 80179c2:	681b      	ldr	r3, [r3, #0]
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d1f2      	bne.n	80179ae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80179c8:	68fb      	ldr	r3, [r7, #12]
 80179ca:	2b02      	cmp	r3, #2
 80179cc:	d101      	bne.n	80179d2 <inc_lock+0x8a>
 80179ce:	2300      	movs	r3, #0
 80179d0:	e040      	b.n	8017a54 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	681a      	ldr	r2, [r3, #0]
 80179d6:	4922      	ldr	r1, [pc, #136]	; (8017a60 <inc_lock+0x118>)
 80179d8:	68fb      	ldr	r3, [r7, #12]
 80179da:	011b      	lsls	r3, r3, #4
 80179dc:	440b      	add	r3, r1
 80179de:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	689a      	ldr	r2, [r3, #8]
 80179e4:	491e      	ldr	r1, [pc, #120]	; (8017a60 <inc_lock+0x118>)
 80179e6:	68fb      	ldr	r3, [r7, #12]
 80179e8:	011b      	lsls	r3, r3, #4
 80179ea:	440b      	add	r3, r1
 80179ec:	3304      	adds	r3, #4
 80179ee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	695a      	ldr	r2, [r3, #20]
 80179f4:	491a      	ldr	r1, [pc, #104]	; (8017a60 <inc_lock+0x118>)
 80179f6:	68fb      	ldr	r3, [r7, #12]
 80179f8:	011b      	lsls	r3, r3, #4
 80179fa:	440b      	add	r3, r1
 80179fc:	3308      	adds	r3, #8
 80179fe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8017a00:	4a17      	ldr	r2, [pc, #92]	; (8017a60 <inc_lock+0x118>)
 8017a02:	68fb      	ldr	r3, [r7, #12]
 8017a04:	011b      	lsls	r3, r3, #4
 8017a06:	4413      	add	r3, r2
 8017a08:	330c      	adds	r3, #12
 8017a0a:	2200      	movs	r2, #0
 8017a0c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8017a0e:	683b      	ldr	r3, [r7, #0]
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d009      	beq.n	8017a28 <inc_lock+0xe0>
 8017a14:	4a12      	ldr	r2, [pc, #72]	; (8017a60 <inc_lock+0x118>)
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	011b      	lsls	r3, r3, #4
 8017a1a:	4413      	add	r3, r2
 8017a1c:	330c      	adds	r3, #12
 8017a1e:	881b      	ldrh	r3, [r3, #0]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d001      	beq.n	8017a28 <inc_lock+0xe0>
 8017a24:	2300      	movs	r3, #0
 8017a26:	e015      	b.n	8017a54 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8017a28:	683b      	ldr	r3, [r7, #0]
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d108      	bne.n	8017a40 <inc_lock+0xf8>
 8017a2e:	4a0c      	ldr	r2, [pc, #48]	; (8017a60 <inc_lock+0x118>)
 8017a30:	68fb      	ldr	r3, [r7, #12]
 8017a32:	011b      	lsls	r3, r3, #4
 8017a34:	4413      	add	r3, r2
 8017a36:	330c      	adds	r3, #12
 8017a38:	881b      	ldrh	r3, [r3, #0]
 8017a3a:	3301      	adds	r3, #1
 8017a3c:	b29a      	uxth	r2, r3
 8017a3e:	e001      	b.n	8017a44 <inc_lock+0xfc>
 8017a40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017a44:	4906      	ldr	r1, [pc, #24]	; (8017a60 <inc_lock+0x118>)
 8017a46:	68fb      	ldr	r3, [r7, #12]
 8017a48:	011b      	lsls	r3, r3, #4
 8017a4a:	440b      	add	r3, r1
 8017a4c:	330c      	adds	r3, #12
 8017a4e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8017a50:	68fb      	ldr	r3, [r7, #12]
 8017a52:	3301      	adds	r3, #1
}
 8017a54:	4618      	mov	r0, r3
 8017a56:	3714      	adds	r7, #20
 8017a58:	46bd      	mov	sp, r7
 8017a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a5e:	4770      	bx	lr
 8017a60:	240016b0 	.word	0x240016b0

08017a64 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8017a64:	b480      	push	{r7}
 8017a66:	b085      	sub	sp, #20
 8017a68:	af00      	add	r7, sp, #0
 8017a6a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	3b01      	subs	r3, #1
 8017a70:	607b      	str	r3, [r7, #4]
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	2b01      	cmp	r3, #1
 8017a76:	d825      	bhi.n	8017ac4 <dec_lock+0x60>
		n = Files[i].ctr;
 8017a78:	4a17      	ldr	r2, [pc, #92]	; (8017ad8 <dec_lock+0x74>)
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	011b      	lsls	r3, r3, #4
 8017a7e:	4413      	add	r3, r2
 8017a80:	330c      	adds	r3, #12
 8017a82:	881b      	ldrh	r3, [r3, #0]
 8017a84:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8017a86:	89fb      	ldrh	r3, [r7, #14]
 8017a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017a8c:	d101      	bne.n	8017a92 <dec_lock+0x2e>
 8017a8e:	2300      	movs	r3, #0
 8017a90:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8017a92:	89fb      	ldrh	r3, [r7, #14]
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d002      	beq.n	8017a9e <dec_lock+0x3a>
 8017a98:	89fb      	ldrh	r3, [r7, #14]
 8017a9a:	3b01      	subs	r3, #1
 8017a9c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8017a9e:	4a0e      	ldr	r2, [pc, #56]	; (8017ad8 <dec_lock+0x74>)
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	011b      	lsls	r3, r3, #4
 8017aa4:	4413      	add	r3, r2
 8017aa6:	330c      	adds	r3, #12
 8017aa8:	89fa      	ldrh	r2, [r7, #14]
 8017aaa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8017aac:	89fb      	ldrh	r3, [r7, #14]
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d105      	bne.n	8017abe <dec_lock+0x5a>
 8017ab2:	4a09      	ldr	r2, [pc, #36]	; (8017ad8 <dec_lock+0x74>)
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	011b      	lsls	r3, r3, #4
 8017ab8:	4413      	add	r3, r2
 8017aba:	2200      	movs	r2, #0
 8017abc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8017abe:	2300      	movs	r3, #0
 8017ac0:	737b      	strb	r3, [r7, #13]
 8017ac2:	e001      	b.n	8017ac8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8017ac4:	2302      	movs	r3, #2
 8017ac6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8017ac8:	7b7b      	ldrb	r3, [r7, #13]
}
 8017aca:	4618      	mov	r0, r3
 8017acc:	3714      	adds	r7, #20
 8017ace:	46bd      	mov	sp, r7
 8017ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ad4:	4770      	bx	lr
 8017ad6:	bf00      	nop
 8017ad8:	240016b0 	.word	0x240016b0

08017adc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8017adc:	b480      	push	{r7}
 8017ade:	b085      	sub	sp, #20
 8017ae0:	af00      	add	r7, sp, #0
 8017ae2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8017ae4:	2300      	movs	r3, #0
 8017ae6:	60fb      	str	r3, [r7, #12]
 8017ae8:	e010      	b.n	8017b0c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8017aea:	4a0d      	ldr	r2, [pc, #52]	; (8017b20 <clear_lock+0x44>)
 8017aec:	68fb      	ldr	r3, [r7, #12]
 8017aee:	011b      	lsls	r3, r3, #4
 8017af0:	4413      	add	r3, r2
 8017af2:	681b      	ldr	r3, [r3, #0]
 8017af4:	687a      	ldr	r2, [r7, #4]
 8017af6:	429a      	cmp	r2, r3
 8017af8:	d105      	bne.n	8017b06 <clear_lock+0x2a>
 8017afa:	4a09      	ldr	r2, [pc, #36]	; (8017b20 <clear_lock+0x44>)
 8017afc:	68fb      	ldr	r3, [r7, #12]
 8017afe:	011b      	lsls	r3, r3, #4
 8017b00:	4413      	add	r3, r2
 8017b02:	2200      	movs	r2, #0
 8017b04:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8017b06:	68fb      	ldr	r3, [r7, #12]
 8017b08:	3301      	adds	r3, #1
 8017b0a:	60fb      	str	r3, [r7, #12]
 8017b0c:	68fb      	ldr	r3, [r7, #12]
 8017b0e:	2b01      	cmp	r3, #1
 8017b10:	d9eb      	bls.n	8017aea <clear_lock+0xe>
	}
}
 8017b12:	bf00      	nop
 8017b14:	bf00      	nop
 8017b16:	3714      	adds	r7, #20
 8017b18:	46bd      	mov	sp, r7
 8017b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b1e:	4770      	bx	lr
 8017b20:	240016b0 	.word	0x240016b0

08017b24 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8017b24:	b580      	push	{r7, lr}
 8017b26:	b086      	sub	sp, #24
 8017b28:	af00      	add	r7, sp, #0
 8017b2a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	78db      	ldrb	r3, [r3, #3]
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d034      	beq.n	8017ba2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017b3c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	7858      	ldrb	r0, [r3, #1]
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017b48:	2301      	movs	r3, #1
 8017b4a:	697a      	ldr	r2, [r7, #20]
 8017b4c:	f7ff fd40 	bl	80175d0 <disk_write>
 8017b50:	4603      	mov	r3, r0
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d002      	beq.n	8017b5c <sync_window+0x38>
			res = FR_DISK_ERR;
 8017b56:	2301      	movs	r3, #1
 8017b58:	73fb      	strb	r3, [r7, #15]
 8017b5a:	e022      	b.n	8017ba2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	2200      	movs	r2, #0
 8017b60:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b66:	697a      	ldr	r2, [r7, #20]
 8017b68:	1ad2      	subs	r2, r2, r3
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	6a1b      	ldr	r3, [r3, #32]
 8017b6e:	429a      	cmp	r2, r3
 8017b70:	d217      	bcs.n	8017ba2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	789b      	ldrb	r3, [r3, #2]
 8017b76:	613b      	str	r3, [r7, #16]
 8017b78:	e010      	b.n	8017b9c <sync_window+0x78>
					wsect += fs->fsize;
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	6a1b      	ldr	r3, [r3, #32]
 8017b7e:	697a      	ldr	r2, [r7, #20]
 8017b80:	4413      	add	r3, r2
 8017b82:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	7858      	ldrb	r0, [r3, #1]
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017b8e:	2301      	movs	r3, #1
 8017b90:	697a      	ldr	r2, [r7, #20]
 8017b92:	f7ff fd1d 	bl	80175d0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017b96:	693b      	ldr	r3, [r7, #16]
 8017b98:	3b01      	subs	r3, #1
 8017b9a:	613b      	str	r3, [r7, #16]
 8017b9c:	693b      	ldr	r3, [r7, #16]
 8017b9e:	2b01      	cmp	r3, #1
 8017ba0:	d8eb      	bhi.n	8017b7a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8017ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8017ba4:	4618      	mov	r0, r3
 8017ba6:	3718      	adds	r7, #24
 8017ba8:	46bd      	mov	sp, r7
 8017baa:	bd80      	pop	{r7, pc}

08017bac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8017bac:	b580      	push	{r7, lr}
 8017bae:	b084      	sub	sp, #16
 8017bb0:	af00      	add	r7, sp, #0
 8017bb2:	6078      	str	r0, [r7, #4]
 8017bb4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8017bb6:	2300      	movs	r3, #0
 8017bb8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017bbe:	683a      	ldr	r2, [r7, #0]
 8017bc0:	429a      	cmp	r2, r3
 8017bc2:	d01b      	beq.n	8017bfc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8017bc4:	6878      	ldr	r0, [r7, #4]
 8017bc6:	f7ff ffad 	bl	8017b24 <sync_window>
 8017bca:	4603      	mov	r3, r0
 8017bcc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8017bce:	7bfb      	ldrb	r3, [r7, #15]
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d113      	bne.n	8017bfc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	7858      	ldrb	r0, [r3, #1]
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017bde:	2301      	movs	r3, #1
 8017be0:	683a      	ldr	r2, [r7, #0]
 8017be2:	f7ff fcd5 	bl	8017590 <disk_read>
 8017be6:	4603      	mov	r3, r0
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d004      	beq.n	8017bf6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8017bec:	f04f 33ff 	mov.w	r3, #4294967295
 8017bf0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8017bf2:	2301      	movs	r3, #1
 8017bf4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	683a      	ldr	r2, [r7, #0]
 8017bfa:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8017bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8017bfe:	4618      	mov	r0, r3
 8017c00:	3710      	adds	r7, #16
 8017c02:	46bd      	mov	sp, r7
 8017c04:	bd80      	pop	{r7, pc}
	...

08017c08 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8017c08:	b580      	push	{r7, lr}
 8017c0a:	b084      	sub	sp, #16
 8017c0c:	af00      	add	r7, sp, #0
 8017c0e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8017c10:	6878      	ldr	r0, [r7, #4]
 8017c12:	f7ff ff87 	bl	8017b24 <sync_window>
 8017c16:	4603      	mov	r3, r0
 8017c18:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8017c1a:	7bfb      	ldrb	r3, [r7, #15]
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d159      	bne.n	8017cd4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	781b      	ldrb	r3, [r3, #0]
 8017c24:	2b03      	cmp	r3, #3
 8017c26:	d149      	bne.n	8017cbc <sync_fs+0xb4>
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	791b      	ldrb	r3, [r3, #4]
 8017c2c:	2b01      	cmp	r3, #1
 8017c2e:	d145      	bne.n	8017cbc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	899b      	ldrh	r3, [r3, #12]
 8017c3a:	461a      	mov	r2, r3
 8017c3c:	2100      	movs	r1, #0
 8017c3e:	f7ff fda8 	bl	8017792 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	3338      	adds	r3, #56	; 0x38
 8017c46:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017c4a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8017c4e:	4618      	mov	r0, r3
 8017c50:	f7ff fd37 	bl	80176c2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	3338      	adds	r3, #56	; 0x38
 8017c58:	4921      	ldr	r1, [pc, #132]	; (8017ce0 <sync_fs+0xd8>)
 8017c5a:	4618      	mov	r0, r3
 8017c5c:	f7ff fd4c 	bl	80176f8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	3338      	adds	r3, #56	; 0x38
 8017c64:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017c68:	491e      	ldr	r1, [pc, #120]	; (8017ce4 <sync_fs+0xdc>)
 8017c6a:	4618      	mov	r0, r3
 8017c6c:	f7ff fd44 	bl	80176f8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	3338      	adds	r3, #56	; 0x38
 8017c74:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	699b      	ldr	r3, [r3, #24]
 8017c7c:	4619      	mov	r1, r3
 8017c7e:	4610      	mov	r0, r2
 8017c80:	f7ff fd3a 	bl	80176f8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	3338      	adds	r3, #56	; 0x38
 8017c88:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	695b      	ldr	r3, [r3, #20]
 8017c90:	4619      	mov	r1, r3
 8017c92:	4610      	mov	r0, r2
 8017c94:	f7ff fd30 	bl	80176f8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c9c:	1c5a      	adds	r2, r3, #1
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	7858      	ldrb	r0, [r3, #1]
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017cb0:	2301      	movs	r3, #1
 8017cb2:	f7ff fc8d 	bl	80175d0 <disk_write>
			fs->fsi_flag = 0;
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	2200      	movs	r2, #0
 8017cba:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	785b      	ldrb	r3, [r3, #1]
 8017cc0:	2200      	movs	r2, #0
 8017cc2:	2100      	movs	r1, #0
 8017cc4:	4618      	mov	r0, r3
 8017cc6:	f7ff fca3 	bl	8017610 <disk_ioctl>
 8017cca:	4603      	mov	r3, r0
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d001      	beq.n	8017cd4 <sync_fs+0xcc>
 8017cd0:	2301      	movs	r3, #1
 8017cd2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8017cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	3710      	adds	r7, #16
 8017cda:	46bd      	mov	sp, r7
 8017cdc:	bd80      	pop	{r7, pc}
 8017cde:	bf00      	nop
 8017ce0:	41615252 	.word	0x41615252
 8017ce4:	61417272 	.word	0x61417272

08017ce8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8017ce8:	b480      	push	{r7}
 8017cea:	b083      	sub	sp, #12
 8017cec:	af00      	add	r7, sp, #0
 8017cee:	6078      	str	r0, [r7, #4]
 8017cf0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8017cf2:	683b      	ldr	r3, [r7, #0]
 8017cf4:	3b02      	subs	r3, #2
 8017cf6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	69db      	ldr	r3, [r3, #28]
 8017cfc:	3b02      	subs	r3, #2
 8017cfe:	683a      	ldr	r2, [r7, #0]
 8017d00:	429a      	cmp	r2, r3
 8017d02:	d301      	bcc.n	8017d08 <clust2sect+0x20>
 8017d04:	2300      	movs	r3, #0
 8017d06:	e008      	b.n	8017d1a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	895b      	ldrh	r3, [r3, #10]
 8017d0c:	461a      	mov	r2, r3
 8017d0e:	683b      	ldr	r3, [r7, #0]
 8017d10:	fb03 f202 	mul.w	r2, r3, r2
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d18:	4413      	add	r3, r2
}
 8017d1a:	4618      	mov	r0, r3
 8017d1c:	370c      	adds	r7, #12
 8017d1e:	46bd      	mov	sp, r7
 8017d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d24:	4770      	bx	lr

08017d26 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8017d26:	b580      	push	{r7, lr}
 8017d28:	b086      	sub	sp, #24
 8017d2a:	af00      	add	r7, sp, #0
 8017d2c:	6078      	str	r0, [r7, #4]
 8017d2e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8017d36:	683b      	ldr	r3, [r7, #0]
 8017d38:	2b01      	cmp	r3, #1
 8017d3a:	d904      	bls.n	8017d46 <get_fat+0x20>
 8017d3c:	693b      	ldr	r3, [r7, #16]
 8017d3e:	69db      	ldr	r3, [r3, #28]
 8017d40:	683a      	ldr	r2, [r7, #0]
 8017d42:	429a      	cmp	r2, r3
 8017d44:	d302      	bcc.n	8017d4c <get_fat+0x26>
		val = 1;	/* Internal error */
 8017d46:	2301      	movs	r3, #1
 8017d48:	617b      	str	r3, [r7, #20]
 8017d4a:	e0bb      	b.n	8017ec4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8017d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8017d50:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8017d52:	693b      	ldr	r3, [r7, #16]
 8017d54:	781b      	ldrb	r3, [r3, #0]
 8017d56:	2b03      	cmp	r3, #3
 8017d58:	f000 8083 	beq.w	8017e62 <get_fat+0x13c>
 8017d5c:	2b03      	cmp	r3, #3
 8017d5e:	f300 80a7 	bgt.w	8017eb0 <get_fat+0x18a>
 8017d62:	2b01      	cmp	r3, #1
 8017d64:	d002      	beq.n	8017d6c <get_fat+0x46>
 8017d66:	2b02      	cmp	r3, #2
 8017d68:	d056      	beq.n	8017e18 <get_fat+0xf2>
 8017d6a:	e0a1      	b.n	8017eb0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8017d6c:	683b      	ldr	r3, [r7, #0]
 8017d6e:	60fb      	str	r3, [r7, #12]
 8017d70:	68fb      	ldr	r3, [r7, #12]
 8017d72:	085b      	lsrs	r3, r3, #1
 8017d74:	68fa      	ldr	r2, [r7, #12]
 8017d76:	4413      	add	r3, r2
 8017d78:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017d7a:	693b      	ldr	r3, [r7, #16]
 8017d7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017d7e:	693b      	ldr	r3, [r7, #16]
 8017d80:	899b      	ldrh	r3, [r3, #12]
 8017d82:	4619      	mov	r1, r3
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8017d8a:	4413      	add	r3, r2
 8017d8c:	4619      	mov	r1, r3
 8017d8e:	6938      	ldr	r0, [r7, #16]
 8017d90:	f7ff ff0c 	bl	8017bac <move_window>
 8017d94:	4603      	mov	r3, r0
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	f040 808d 	bne.w	8017eb6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8017d9c:	68fb      	ldr	r3, [r7, #12]
 8017d9e:	1c5a      	adds	r2, r3, #1
 8017da0:	60fa      	str	r2, [r7, #12]
 8017da2:	693a      	ldr	r2, [r7, #16]
 8017da4:	8992      	ldrh	r2, [r2, #12]
 8017da6:	fbb3 f1f2 	udiv	r1, r3, r2
 8017daa:	fb01 f202 	mul.w	r2, r1, r2
 8017dae:	1a9b      	subs	r3, r3, r2
 8017db0:	693a      	ldr	r2, [r7, #16]
 8017db2:	4413      	add	r3, r2
 8017db4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017db8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017dba:	693b      	ldr	r3, [r7, #16]
 8017dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017dbe:	693b      	ldr	r3, [r7, #16]
 8017dc0:	899b      	ldrh	r3, [r3, #12]
 8017dc2:	4619      	mov	r1, r3
 8017dc4:	68fb      	ldr	r3, [r7, #12]
 8017dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8017dca:	4413      	add	r3, r2
 8017dcc:	4619      	mov	r1, r3
 8017dce:	6938      	ldr	r0, [r7, #16]
 8017dd0:	f7ff feec 	bl	8017bac <move_window>
 8017dd4:	4603      	mov	r3, r0
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	d16f      	bne.n	8017eba <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8017dda:	693b      	ldr	r3, [r7, #16]
 8017ddc:	899b      	ldrh	r3, [r3, #12]
 8017dde:	461a      	mov	r2, r3
 8017de0:	68fb      	ldr	r3, [r7, #12]
 8017de2:	fbb3 f1f2 	udiv	r1, r3, r2
 8017de6:	fb01 f202 	mul.w	r2, r1, r2
 8017dea:	1a9b      	subs	r3, r3, r2
 8017dec:	693a      	ldr	r2, [r7, #16]
 8017dee:	4413      	add	r3, r2
 8017df0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017df4:	021b      	lsls	r3, r3, #8
 8017df6:	461a      	mov	r2, r3
 8017df8:	68bb      	ldr	r3, [r7, #8]
 8017dfa:	4313      	orrs	r3, r2
 8017dfc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8017dfe:	683b      	ldr	r3, [r7, #0]
 8017e00:	f003 0301 	and.w	r3, r3, #1
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	d002      	beq.n	8017e0e <get_fat+0xe8>
 8017e08:	68bb      	ldr	r3, [r7, #8]
 8017e0a:	091b      	lsrs	r3, r3, #4
 8017e0c:	e002      	b.n	8017e14 <get_fat+0xee>
 8017e0e:	68bb      	ldr	r3, [r7, #8]
 8017e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017e14:	617b      	str	r3, [r7, #20]
			break;
 8017e16:	e055      	b.n	8017ec4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017e18:	693b      	ldr	r3, [r7, #16]
 8017e1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017e1c:	693b      	ldr	r3, [r7, #16]
 8017e1e:	899b      	ldrh	r3, [r3, #12]
 8017e20:	085b      	lsrs	r3, r3, #1
 8017e22:	b29b      	uxth	r3, r3
 8017e24:	4619      	mov	r1, r3
 8017e26:	683b      	ldr	r3, [r7, #0]
 8017e28:	fbb3 f3f1 	udiv	r3, r3, r1
 8017e2c:	4413      	add	r3, r2
 8017e2e:	4619      	mov	r1, r3
 8017e30:	6938      	ldr	r0, [r7, #16]
 8017e32:	f7ff febb 	bl	8017bac <move_window>
 8017e36:	4603      	mov	r3, r0
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d140      	bne.n	8017ebe <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8017e3c:	693b      	ldr	r3, [r7, #16]
 8017e3e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017e42:	683b      	ldr	r3, [r7, #0]
 8017e44:	005b      	lsls	r3, r3, #1
 8017e46:	693a      	ldr	r2, [r7, #16]
 8017e48:	8992      	ldrh	r2, [r2, #12]
 8017e4a:	fbb3 f0f2 	udiv	r0, r3, r2
 8017e4e:	fb00 f202 	mul.w	r2, r0, r2
 8017e52:	1a9b      	subs	r3, r3, r2
 8017e54:	440b      	add	r3, r1
 8017e56:	4618      	mov	r0, r3
 8017e58:	f7ff fbf8 	bl	801764c <ld_word>
 8017e5c:	4603      	mov	r3, r0
 8017e5e:	617b      	str	r3, [r7, #20]
			break;
 8017e60:	e030      	b.n	8017ec4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017e62:	693b      	ldr	r3, [r7, #16]
 8017e64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017e66:	693b      	ldr	r3, [r7, #16]
 8017e68:	899b      	ldrh	r3, [r3, #12]
 8017e6a:	089b      	lsrs	r3, r3, #2
 8017e6c:	b29b      	uxth	r3, r3
 8017e6e:	4619      	mov	r1, r3
 8017e70:	683b      	ldr	r3, [r7, #0]
 8017e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8017e76:	4413      	add	r3, r2
 8017e78:	4619      	mov	r1, r3
 8017e7a:	6938      	ldr	r0, [r7, #16]
 8017e7c:	f7ff fe96 	bl	8017bac <move_window>
 8017e80:	4603      	mov	r3, r0
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d11d      	bne.n	8017ec2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8017e86:	693b      	ldr	r3, [r7, #16]
 8017e88:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017e8c:	683b      	ldr	r3, [r7, #0]
 8017e8e:	009b      	lsls	r3, r3, #2
 8017e90:	693a      	ldr	r2, [r7, #16]
 8017e92:	8992      	ldrh	r2, [r2, #12]
 8017e94:	fbb3 f0f2 	udiv	r0, r3, r2
 8017e98:	fb00 f202 	mul.w	r2, r0, r2
 8017e9c:	1a9b      	subs	r3, r3, r2
 8017e9e:	440b      	add	r3, r1
 8017ea0:	4618      	mov	r0, r3
 8017ea2:	f7ff fbeb 	bl	801767c <ld_dword>
 8017ea6:	4603      	mov	r3, r0
 8017ea8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8017eac:	617b      	str	r3, [r7, #20]
			break;
 8017eae:	e009      	b.n	8017ec4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8017eb0:	2301      	movs	r3, #1
 8017eb2:	617b      	str	r3, [r7, #20]
 8017eb4:	e006      	b.n	8017ec4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017eb6:	bf00      	nop
 8017eb8:	e004      	b.n	8017ec4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017eba:	bf00      	nop
 8017ebc:	e002      	b.n	8017ec4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017ebe:	bf00      	nop
 8017ec0:	e000      	b.n	8017ec4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017ec2:	bf00      	nop
		}
	}

	return val;
 8017ec4:	697b      	ldr	r3, [r7, #20]
}
 8017ec6:	4618      	mov	r0, r3
 8017ec8:	3718      	adds	r7, #24
 8017eca:	46bd      	mov	sp, r7
 8017ecc:	bd80      	pop	{r7, pc}

08017ece <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8017ece:	b590      	push	{r4, r7, lr}
 8017ed0:	b089      	sub	sp, #36	; 0x24
 8017ed2:	af00      	add	r7, sp, #0
 8017ed4:	60f8      	str	r0, [r7, #12]
 8017ed6:	60b9      	str	r1, [r7, #8]
 8017ed8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8017eda:	2302      	movs	r3, #2
 8017edc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8017ede:	68bb      	ldr	r3, [r7, #8]
 8017ee0:	2b01      	cmp	r3, #1
 8017ee2:	f240 8109 	bls.w	80180f8 <put_fat+0x22a>
 8017ee6:	68fb      	ldr	r3, [r7, #12]
 8017ee8:	69db      	ldr	r3, [r3, #28]
 8017eea:	68ba      	ldr	r2, [r7, #8]
 8017eec:	429a      	cmp	r2, r3
 8017eee:	f080 8103 	bcs.w	80180f8 <put_fat+0x22a>
		switch (fs->fs_type) {
 8017ef2:	68fb      	ldr	r3, [r7, #12]
 8017ef4:	781b      	ldrb	r3, [r3, #0]
 8017ef6:	2b03      	cmp	r3, #3
 8017ef8:	f000 80b6 	beq.w	8018068 <put_fat+0x19a>
 8017efc:	2b03      	cmp	r3, #3
 8017efe:	f300 80fb 	bgt.w	80180f8 <put_fat+0x22a>
 8017f02:	2b01      	cmp	r3, #1
 8017f04:	d003      	beq.n	8017f0e <put_fat+0x40>
 8017f06:	2b02      	cmp	r3, #2
 8017f08:	f000 8083 	beq.w	8018012 <put_fat+0x144>
 8017f0c:	e0f4      	b.n	80180f8 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8017f0e:	68bb      	ldr	r3, [r7, #8]
 8017f10:	61bb      	str	r3, [r7, #24]
 8017f12:	69bb      	ldr	r3, [r7, #24]
 8017f14:	085b      	lsrs	r3, r3, #1
 8017f16:	69ba      	ldr	r2, [r7, #24]
 8017f18:	4413      	add	r3, r2
 8017f1a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017f1c:	68fb      	ldr	r3, [r7, #12]
 8017f1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017f20:	68fb      	ldr	r3, [r7, #12]
 8017f22:	899b      	ldrh	r3, [r3, #12]
 8017f24:	4619      	mov	r1, r3
 8017f26:	69bb      	ldr	r3, [r7, #24]
 8017f28:	fbb3 f3f1 	udiv	r3, r3, r1
 8017f2c:	4413      	add	r3, r2
 8017f2e:	4619      	mov	r1, r3
 8017f30:	68f8      	ldr	r0, [r7, #12]
 8017f32:	f7ff fe3b 	bl	8017bac <move_window>
 8017f36:	4603      	mov	r3, r0
 8017f38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017f3a:	7ffb      	ldrb	r3, [r7, #31]
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	f040 80d4 	bne.w	80180ea <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8017f42:	68fb      	ldr	r3, [r7, #12]
 8017f44:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017f48:	69bb      	ldr	r3, [r7, #24]
 8017f4a:	1c5a      	adds	r2, r3, #1
 8017f4c:	61ba      	str	r2, [r7, #24]
 8017f4e:	68fa      	ldr	r2, [r7, #12]
 8017f50:	8992      	ldrh	r2, [r2, #12]
 8017f52:	fbb3 f0f2 	udiv	r0, r3, r2
 8017f56:	fb00 f202 	mul.w	r2, r0, r2
 8017f5a:	1a9b      	subs	r3, r3, r2
 8017f5c:	440b      	add	r3, r1
 8017f5e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8017f60:	68bb      	ldr	r3, [r7, #8]
 8017f62:	f003 0301 	and.w	r3, r3, #1
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d00d      	beq.n	8017f86 <put_fat+0xb8>
 8017f6a:	697b      	ldr	r3, [r7, #20]
 8017f6c:	781b      	ldrb	r3, [r3, #0]
 8017f6e:	b25b      	sxtb	r3, r3
 8017f70:	f003 030f 	and.w	r3, r3, #15
 8017f74:	b25a      	sxtb	r2, r3
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	b2db      	uxtb	r3, r3
 8017f7a:	011b      	lsls	r3, r3, #4
 8017f7c:	b25b      	sxtb	r3, r3
 8017f7e:	4313      	orrs	r3, r2
 8017f80:	b25b      	sxtb	r3, r3
 8017f82:	b2db      	uxtb	r3, r3
 8017f84:	e001      	b.n	8017f8a <put_fat+0xbc>
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	b2db      	uxtb	r3, r3
 8017f8a:	697a      	ldr	r2, [r7, #20]
 8017f8c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8017f8e:	68fb      	ldr	r3, [r7, #12]
 8017f90:	2201      	movs	r2, #1
 8017f92:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	899b      	ldrh	r3, [r3, #12]
 8017f9c:	4619      	mov	r1, r3
 8017f9e:	69bb      	ldr	r3, [r7, #24]
 8017fa0:	fbb3 f3f1 	udiv	r3, r3, r1
 8017fa4:	4413      	add	r3, r2
 8017fa6:	4619      	mov	r1, r3
 8017fa8:	68f8      	ldr	r0, [r7, #12]
 8017faa:	f7ff fdff 	bl	8017bac <move_window>
 8017fae:	4603      	mov	r3, r0
 8017fb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017fb2:	7ffb      	ldrb	r3, [r7, #31]
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	f040 809a 	bne.w	80180ee <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8017fba:	68fb      	ldr	r3, [r7, #12]
 8017fbc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017fc0:	68fb      	ldr	r3, [r7, #12]
 8017fc2:	899b      	ldrh	r3, [r3, #12]
 8017fc4:	461a      	mov	r2, r3
 8017fc6:	69bb      	ldr	r3, [r7, #24]
 8017fc8:	fbb3 f0f2 	udiv	r0, r3, r2
 8017fcc:	fb00 f202 	mul.w	r2, r0, r2
 8017fd0:	1a9b      	subs	r3, r3, r2
 8017fd2:	440b      	add	r3, r1
 8017fd4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8017fd6:	68bb      	ldr	r3, [r7, #8]
 8017fd8:	f003 0301 	and.w	r3, r3, #1
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d003      	beq.n	8017fe8 <put_fat+0x11a>
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	091b      	lsrs	r3, r3, #4
 8017fe4:	b2db      	uxtb	r3, r3
 8017fe6:	e00e      	b.n	8018006 <put_fat+0x138>
 8017fe8:	697b      	ldr	r3, [r7, #20]
 8017fea:	781b      	ldrb	r3, [r3, #0]
 8017fec:	b25b      	sxtb	r3, r3
 8017fee:	f023 030f 	bic.w	r3, r3, #15
 8017ff2:	b25a      	sxtb	r2, r3
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	0a1b      	lsrs	r3, r3, #8
 8017ff8:	b25b      	sxtb	r3, r3
 8017ffa:	f003 030f 	and.w	r3, r3, #15
 8017ffe:	b25b      	sxtb	r3, r3
 8018000:	4313      	orrs	r3, r2
 8018002:	b25b      	sxtb	r3, r3
 8018004:	b2db      	uxtb	r3, r3
 8018006:	697a      	ldr	r2, [r7, #20]
 8018008:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801800a:	68fb      	ldr	r3, [r7, #12]
 801800c:	2201      	movs	r2, #1
 801800e:	70da      	strb	r2, [r3, #3]
			break;
 8018010:	e072      	b.n	80180f8 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8018012:	68fb      	ldr	r3, [r7, #12]
 8018014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018016:	68fb      	ldr	r3, [r7, #12]
 8018018:	899b      	ldrh	r3, [r3, #12]
 801801a:	085b      	lsrs	r3, r3, #1
 801801c:	b29b      	uxth	r3, r3
 801801e:	4619      	mov	r1, r3
 8018020:	68bb      	ldr	r3, [r7, #8]
 8018022:	fbb3 f3f1 	udiv	r3, r3, r1
 8018026:	4413      	add	r3, r2
 8018028:	4619      	mov	r1, r3
 801802a:	68f8      	ldr	r0, [r7, #12]
 801802c:	f7ff fdbe 	bl	8017bac <move_window>
 8018030:	4603      	mov	r3, r0
 8018032:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8018034:	7ffb      	ldrb	r3, [r7, #31]
 8018036:	2b00      	cmp	r3, #0
 8018038:	d15b      	bne.n	80180f2 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801803a:	68fb      	ldr	r3, [r7, #12]
 801803c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018040:	68bb      	ldr	r3, [r7, #8]
 8018042:	005b      	lsls	r3, r3, #1
 8018044:	68fa      	ldr	r2, [r7, #12]
 8018046:	8992      	ldrh	r2, [r2, #12]
 8018048:	fbb3 f0f2 	udiv	r0, r3, r2
 801804c:	fb00 f202 	mul.w	r2, r0, r2
 8018050:	1a9b      	subs	r3, r3, r2
 8018052:	440b      	add	r3, r1
 8018054:	687a      	ldr	r2, [r7, #4]
 8018056:	b292      	uxth	r2, r2
 8018058:	4611      	mov	r1, r2
 801805a:	4618      	mov	r0, r3
 801805c:	f7ff fb31 	bl	80176c2 <st_word>
			fs->wflag = 1;
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	2201      	movs	r2, #1
 8018064:	70da      	strb	r2, [r3, #3]
			break;
 8018066:	e047      	b.n	80180f8 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8018068:	68fb      	ldr	r3, [r7, #12]
 801806a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801806c:	68fb      	ldr	r3, [r7, #12]
 801806e:	899b      	ldrh	r3, [r3, #12]
 8018070:	089b      	lsrs	r3, r3, #2
 8018072:	b29b      	uxth	r3, r3
 8018074:	4619      	mov	r1, r3
 8018076:	68bb      	ldr	r3, [r7, #8]
 8018078:	fbb3 f3f1 	udiv	r3, r3, r1
 801807c:	4413      	add	r3, r2
 801807e:	4619      	mov	r1, r3
 8018080:	68f8      	ldr	r0, [r7, #12]
 8018082:	f7ff fd93 	bl	8017bac <move_window>
 8018086:	4603      	mov	r3, r0
 8018088:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801808a:	7ffb      	ldrb	r3, [r7, #31]
 801808c:	2b00      	cmp	r3, #0
 801808e:	d132      	bne.n	80180f6 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8018096:	68fb      	ldr	r3, [r7, #12]
 8018098:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801809c:	68bb      	ldr	r3, [r7, #8]
 801809e:	009b      	lsls	r3, r3, #2
 80180a0:	68fa      	ldr	r2, [r7, #12]
 80180a2:	8992      	ldrh	r2, [r2, #12]
 80180a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80180a8:	fb00 f202 	mul.w	r2, r0, r2
 80180ac:	1a9b      	subs	r3, r3, r2
 80180ae:	440b      	add	r3, r1
 80180b0:	4618      	mov	r0, r3
 80180b2:	f7ff fae3 	bl	801767c <ld_dword>
 80180b6:	4603      	mov	r3, r0
 80180b8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80180bc:	4323      	orrs	r3, r4
 80180be:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80180c0:	68fb      	ldr	r3, [r7, #12]
 80180c2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80180c6:	68bb      	ldr	r3, [r7, #8]
 80180c8:	009b      	lsls	r3, r3, #2
 80180ca:	68fa      	ldr	r2, [r7, #12]
 80180cc:	8992      	ldrh	r2, [r2, #12]
 80180ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80180d2:	fb00 f202 	mul.w	r2, r0, r2
 80180d6:	1a9b      	subs	r3, r3, r2
 80180d8:	440b      	add	r3, r1
 80180da:	6879      	ldr	r1, [r7, #4]
 80180dc:	4618      	mov	r0, r3
 80180de:	f7ff fb0b 	bl	80176f8 <st_dword>
			fs->wflag = 1;
 80180e2:	68fb      	ldr	r3, [r7, #12]
 80180e4:	2201      	movs	r2, #1
 80180e6:	70da      	strb	r2, [r3, #3]
			break;
 80180e8:	e006      	b.n	80180f8 <put_fat+0x22a>
			if (res != FR_OK) break;
 80180ea:	bf00      	nop
 80180ec:	e004      	b.n	80180f8 <put_fat+0x22a>
			if (res != FR_OK) break;
 80180ee:	bf00      	nop
 80180f0:	e002      	b.n	80180f8 <put_fat+0x22a>
			if (res != FR_OK) break;
 80180f2:	bf00      	nop
 80180f4:	e000      	b.n	80180f8 <put_fat+0x22a>
			if (res != FR_OK) break;
 80180f6:	bf00      	nop
		}
	}
	return res;
 80180f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80180fa:	4618      	mov	r0, r3
 80180fc:	3724      	adds	r7, #36	; 0x24
 80180fe:	46bd      	mov	sp, r7
 8018100:	bd90      	pop	{r4, r7, pc}

08018102 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8018102:	b580      	push	{r7, lr}
 8018104:	b088      	sub	sp, #32
 8018106:	af00      	add	r7, sp, #0
 8018108:	60f8      	str	r0, [r7, #12]
 801810a:	60b9      	str	r1, [r7, #8]
 801810c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801810e:	2300      	movs	r3, #0
 8018110:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8018112:	68fb      	ldr	r3, [r7, #12]
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8018118:	68bb      	ldr	r3, [r7, #8]
 801811a:	2b01      	cmp	r3, #1
 801811c:	d904      	bls.n	8018128 <remove_chain+0x26>
 801811e:	69bb      	ldr	r3, [r7, #24]
 8018120:	69db      	ldr	r3, [r3, #28]
 8018122:	68ba      	ldr	r2, [r7, #8]
 8018124:	429a      	cmp	r2, r3
 8018126:	d301      	bcc.n	801812c <remove_chain+0x2a>
 8018128:	2302      	movs	r3, #2
 801812a:	e04b      	b.n	80181c4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	2b00      	cmp	r3, #0
 8018130:	d00c      	beq.n	801814c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8018132:	f04f 32ff 	mov.w	r2, #4294967295
 8018136:	6879      	ldr	r1, [r7, #4]
 8018138:	69b8      	ldr	r0, [r7, #24]
 801813a:	f7ff fec8 	bl	8017ece <put_fat>
 801813e:	4603      	mov	r3, r0
 8018140:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8018142:	7ffb      	ldrb	r3, [r7, #31]
 8018144:	2b00      	cmp	r3, #0
 8018146:	d001      	beq.n	801814c <remove_chain+0x4a>
 8018148:	7ffb      	ldrb	r3, [r7, #31]
 801814a:	e03b      	b.n	80181c4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801814c:	68b9      	ldr	r1, [r7, #8]
 801814e:	68f8      	ldr	r0, [r7, #12]
 8018150:	f7ff fde9 	bl	8017d26 <get_fat>
 8018154:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8018156:	697b      	ldr	r3, [r7, #20]
 8018158:	2b00      	cmp	r3, #0
 801815a:	d031      	beq.n	80181c0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801815c:	697b      	ldr	r3, [r7, #20]
 801815e:	2b01      	cmp	r3, #1
 8018160:	d101      	bne.n	8018166 <remove_chain+0x64>
 8018162:	2302      	movs	r3, #2
 8018164:	e02e      	b.n	80181c4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8018166:	697b      	ldr	r3, [r7, #20]
 8018168:	f1b3 3fff 	cmp.w	r3, #4294967295
 801816c:	d101      	bne.n	8018172 <remove_chain+0x70>
 801816e:	2301      	movs	r3, #1
 8018170:	e028      	b.n	80181c4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8018172:	2200      	movs	r2, #0
 8018174:	68b9      	ldr	r1, [r7, #8]
 8018176:	69b8      	ldr	r0, [r7, #24]
 8018178:	f7ff fea9 	bl	8017ece <put_fat>
 801817c:	4603      	mov	r3, r0
 801817e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8018180:	7ffb      	ldrb	r3, [r7, #31]
 8018182:	2b00      	cmp	r3, #0
 8018184:	d001      	beq.n	801818a <remove_chain+0x88>
 8018186:	7ffb      	ldrb	r3, [r7, #31]
 8018188:	e01c      	b.n	80181c4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801818a:	69bb      	ldr	r3, [r7, #24]
 801818c:	699a      	ldr	r2, [r3, #24]
 801818e:	69bb      	ldr	r3, [r7, #24]
 8018190:	69db      	ldr	r3, [r3, #28]
 8018192:	3b02      	subs	r3, #2
 8018194:	429a      	cmp	r2, r3
 8018196:	d20b      	bcs.n	80181b0 <remove_chain+0xae>
			fs->free_clst++;
 8018198:	69bb      	ldr	r3, [r7, #24]
 801819a:	699b      	ldr	r3, [r3, #24]
 801819c:	1c5a      	adds	r2, r3, #1
 801819e:	69bb      	ldr	r3, [r7, #24]
 80181a0:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80181a2:	69bb      	ldr	r3, [r7, #24]
 80181a4:	791b      	ldrb	r3, [r3, #4]
 80181a6:	f043 0301 	orr.w	r3, r3, #1
 80181aa:	b2da      	uxtb	r2, r3
 80181ac:	69bb      	ldr	r3, [r7, #24]
 80181ae:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80181b0:	697b      	ldr	r3, [r7, #20]
 80181b2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80181b4:	69bb      	ldr	r3, [r7, #24]
 80181b6:	69db      	ldr	r3, [r3, #28]
 80181b8:	68ba      	ldr	r2, [r7, #8]
 80181ba:	429a      	cmp	r2, r3
 80181bc:	d3c6      	bcc.n	801814c <remove_chain+0x4a>
 80181be:	e000      	b.n	80181c2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80181c0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80181c2:	2300      	movs	r3, #0
}
 80181c4:	4618      	mov	r0, r3
 80181c6:	3720      	adds	r7, #32
 80181c8:	46bd      	mov	sp, r7
 80181ca:	bd80      	pop	{r7, pc}

080181cc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80181cc:	b580      	push	{r7, lr}
 80181ce:	b088      	sub	sp, #32
 80181d0:	af00      	add	r7, sp, #0
 80181d2:	6078      	str	r0, [r7, #4]
 80181d4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	681b      	ldr	r3, [r3, #0]
 80181da:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80181dc:	683b      	ldr	r3, [r7, #0]
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d10d      	bne.n	80181fe <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80181e2:	693b      	ldr	r3, [r7, #16]
 80181e4:	695b      	ldr	r3, [r3, #20]
 80181e6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80181e8:	69bb      	ldr	r3, [r7, #24]
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d004      	beq.n	80181f8 <create_chain+0x2c>
 80181ee:	693b      	ldr	r3, [r7, #16]
 80181f0:	69db      	ldr	r3, [r3, #28]
 80181f2:	69ba      	ldr	r2, [r7, #24]
 80181f4:	429a      	cmp	r2, r3
 80181f6:	d31b      	bcc.n	8018230 <create_chain+0x64>
 80181f8:	2301      	movs	r3, #1
 80181fa:	61bb      	str	r3, [r7, #24]
 80181fc:	e018      	b.n	8018230 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80181fe:	6839      	ldr	r1, [r7, #0]
 8018200:	6878      	ldr	r0, [r7, #4]
 8018202:	f7ff fd90 	bl	8017d26 <get_fat>
 8018206:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8018208:	68fb      	ldr	r3, [r7, #12]
 801820a:	2b01      	cmp	r3, #1
 801820c:	d801      	bhi.n	8018212 <create_chain+0x46>
 801820e:	2301      	movs	r3, #1
 8018210:	e070      	b.n	80182f4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8018212:	68fb      	ldr	r3, [r7, #12]
 8018214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018218:	d101      	bne.n	801821e <create_chain+0x52>
 801821a:	68fb      	ldr	r3, [r7, #12]
 801821c:	e06a      	b.n	80182f4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801821e:	693b      	ldr	r3, [r7, #16]
 8018220:	69db      	ldr	r3, [r3, #28]
 8018222:	68fa      	ldr	r2, [r7, #12]
 8018224:	429a      	cmp	r2, r3
 8018226:	d201      	bcs.n	801822c <create_chain+0x60>
 8018228:	68fb      	ldr	r3, [r7, #12]
 801822a:	e063      	b.n	80182f4 <create_chain+0x128>
		scl = clst;
 801822c:	683b      	ldr	r3, [r7, #0]
 801822e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8018230:	69bb      	ldr	r3, [r7, #24]
 8018232:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8018234:	69fb      	ldr	r3, [r7, #28]
 8018236:	3301      	adds	r3, #1
 8018238:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801823a:	693b      	ldr	r3, [r7, #16]
 801823c:	69db      	ldr	r3, [r3, #28]
 801823e:	69fa      	ldr	r2, [r7, #28]
 8018240:	429a      	cmp	r2, r3
 8018242:	d307      	bcc.n	8018254 <create_chain+0x88>
				ncl = 2;
 8018244:	2302      	movs	r3, #2
 8018246:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8018248:	69fa      	ldr	r2, [r7, #28]
 801824a:	69bb      	ldr	r3, [r7, #24]
 801824c:	429a      	cmp	r2, r3
 801824e:	d901      	bls.n	8018254 <create_chain+0x88>
 8018250:	2300      	movs	r3, #0
 8018252:	e04f      	b.n	80182f4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8018254:	69f9      	ldr	r1, [r7, #28]
 8018256:	6878      	ldr	r0, [r7, #4]
 8018258:	f7ff fd65 	bl	8017d26 <get_fat>
 801825c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	2b00      	cmp	r3, #0
 8018262:	d00e      	beq.n	8018282 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8018264:	68fb      	ldr	r3, [r7, #12]
 8018266:	2b01      	cmp	r3, #1
 8018268:	d003      	beq.n	8018272 <create_chain+0xa6>
 801826a:	68fb      	ldr	r3, [r7, #12]
 801826c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018270:	d101      	bne.n	8018276 <create_chain+0xaa>
 8018272:	68fb      	ldr	r3, [r7, #12]
 8018274:	e03e      	b.n	80182f4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8018276:	69fa      	ldr	r2, [r7, #28]
 8018278:	69bb      	ldr	r3, [r7, #24]
 801827a:	429a      	cmp	r2, r3
 801827c:	d1da      	bne.n	8018234 <create_chain+0x68>
 801827e:	2300      	movs	r3, #0
 8018280:	e038      	b.n	80182f4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8018282:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8018284:	f04f 32ff 	mov.w	r2, #4294967295
 8018288:	69f9      	ldr	r1, [r7, #28]
 801828a:	6938      	ldr	r0, [r7, #16]
 801828c:	f7ff fe1f 	bl	8017ece <put_fat>
 8018290:	4603      	mov	r3, r0
 8018292:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8018294:	7dfb      	ldrb	r3, [r7, #23]
 8018296:	2b00      	cmp	r3, #0
 8018298:	d109      	bne.n	80182ae <create_chain+0xe2>
 801829a:	683b      	ldr	r3, [r7, #0]
 801829c:	2b00      	cmp	r3, #0
 801829e:	d006      	beq.n	80182ae <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80182a0:	69fa      	ldr	r2, [r7, #28]
 80182a2:	6839      	ldr	r1, [r7, #0]
 80182a4:	6938      	ldr	r0, [r7, #16]
 80182a6:	f7ff fe12 	bl	8017ece <put_fat>
 80182aa:	4603      	mov	r3, r0
 80182ac:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80182ae:	7dfb      	ldrb	r3, [r7, #23]
 80182b0:	2b00      	cmp	r3, #0
 80182b2:	d116      	bne.n	80182e2 <create_chain+0x116>
		fs->last_clst = ncl;
 80182b4:	693b      	ldr	r3, [r7, #16]
 80182b6:	69fa      	ldr	r2, [r7, #28]
 80182b8:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80182ba:	693b      	ldr	r3, [r7, #16]
 80182bc:	699a      	ldr	r2, [r3, #24]
 80182be:	693b      	ldr	r3, [r7, #16]
 80182c0:	69db      	ldr	r3, [r3, #28]
 80182c2:	3b02      	subs	r3, #2
 80182c4:	429a      	cmp	r2, r3
 80182c6:	d804      	bhi.n	80182d2 <create_chain+0x106>
 80182c8:	693b      	ldr	r3, [r7, #16]
 80182ca:	699b      	ldr	r3, [r3, #24]
 80182cc:	1e5a      	subs	r2, r3, #1
 80182ce:	693b      	ldr	r3, [r7, #16]
 80182d0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80182d2:	693b      	ldr	r3, [r7, #16]
 80182d4:	791b      	ldrb	r3, [r3, #4]
 80182d6:	f043 0301 	orr.w	r3, r3, #1
 80182da:	b2da      	uxtb	r2, r3
 80182dc:	693b      	ldr	r3, [r7, #16]
 80182de:	711a      	strb	r2, [r3, #4]
 80182e0:	e007      	b.n	80182f2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80182e2:	7dfb      	ldrb	r3, [r7, #23]
 80182e4:	2b01      	cmp	r3, #1
 80182e6:	d102      	bne.n	80182ee <create_chain+0x122>
 80182e8:	f04f 33ff 	mov.w	r3, #4294967295
 80182ec:	e000      	b.n	80182f0 <create_chain+0x124>
 80182ee:	2301      	movs	r3, #1
 80182f0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80182f2:	69fb      	ldr	r3, [r7, #28]
}
 80182f4:	4618      	mov	r0, r3
 80182f6:	3720      	adds	r7, #32
 80182f8:	46bd      	mov	sp, r7
 80182fa:	bd80      	pop	{r7, pc}

080182fc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80182fc:	b480      	push	{r7}
 80182fe:	b087      	sub	sp, #28
 8018300:	af00      	add	r7, sp, #0
 8018302:	6078      	str	r0, [r7, #4]
 8018304:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	681b      	ldr	r3, [r3, #0]
 801830a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018310:	3304      	adds	r3, #4
 8018312:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8018314:	68fb      	ldr	r3, [r7, #12]
 8018316:	899b      	ldrh	r3, [r3, #12]
 8018318:	461a      	mov	r2, r3
 801831a:	683b      	ldr	r3, [r7, #0]
 801831c:	fbb3 f3f2 	udiv	r3, r3, r2
 8018320:	68fa      	ldr	r2, [r7, #12]
 8018322:	8952      	ldrh	r2, [r2, #10]
 8018324:	fbb3 f3f2 	udiv	r3, r3, r2
 8018328:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801832a:	693b      	ldr	r3, [r7, #16]
 801832c:	1d1a      	adds	r2, r3, #4
 801832e:	613a      	str	r2, [r7, #16]
 8018330:	681b      	ldr	r3, [r3, #0]
 8018332:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8018334:	68bb      	ldr	r3, [r7, #8]
 8018336:	2b00      	cmp	r3, #0
 8018338:	d101      	bne.n	801833e <clmt_clust+0x42>
 801833a:	2300      	movs	r3, #0
 801833c:	e010      	b.n	8018360 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801833e:	697a      	ldr	r2, [r7, #20]
 8018340:	68bb      	ldr	r3, [r7, #8]
 8018342:	429a      	cmp	r2, r3
 8018344:	d307      	bcc.n	8018356 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8018346:	697a      	ldr	r2, [r7, #20]
 8018348:	68bb      	ldr	r3, [r7, #8]
 801834a:	1ad3      	subs	r3, r2, r3
 801834c:	617b      	str	r3, [r7, #20]
 801834e:	693b      	ldr	r3, [r7, #16]
 8018350:	3304      	adds	r3, #4
 8018352:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8018354:	e7e9      	b.n	801832a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8018356:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8018358:	693b      	ldr	r3, [r7, #16]
 801835a:	681a      	ldr	r2, [r3, #0]
 801835c:	697b      	ldr	r3, [r7, #20]
 801835e:	4413      	add	r3, r2
}
 8018360:	4618      	mov	r0, r3
 8018362:	371c      	adds	r7, #28
 8018364:	46bd      	mov	sp, r7
 8018366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801836a:	4770      	bx	lr

0801836c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801836c:	b580      	push	{r7, lr}
 801836e:	b086      	sub	sp, #24
 8018370:	af00      	add	r7, sp, #0
 8018372:	6078      	str	r0, [r7, #4]
 8018374:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801837c:	683b      	ldr	r3, [r7, #0]
 801837e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8018382:	d204      	bcs.n	801838e <dir_sdi+0x22>
 8018384:	683b      	ldr	r3, [r7, #0]
 8018386:	f003 031f 	and.w	r3, r3, #31
 801838a:	2b00      	cmp	r3, #0
 801838c:	d001      	beq.n	8018392 <dir_sdi+0x26>
		return FR_INT_ERR;
 801838e:	2302      	movs	r3, #2
 8018390:	e071      	b.n	8018476 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	683a      	ldr	r2, [r7, #0]
 8018396:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	689b      	ldr	r3, [r3, #8]
 801839c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801839e:	697b      	ldr	r3, [r7, #20]
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d106      	bne.n	80183b2 <dir_sdi+0x46>
 80183a4:	693b      	ldr	r3, [r7, #16]
 80183a6:	781b      	ldrb	r3, [r3, #0]
 80183a8:	2b02      	cmp	r3, #2
 80183aa:	d902      	bls.n	80183b2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80183ac:	693b      	ldr	r3, [r7, #16]
 80183ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183b0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80183b2:	697b      	ldr	r3, [r7, #20]
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	d10c      	bne.n	80183d2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80183b8:	683b      	ldr	r3, [r7, #0]
 80183ba:	095b      	lsrs	r3, r3, #5
 80183bc:	693a      	ldr	r2, [r7, #16]
 80183be:	8912      	ldrh	r2, [r2, #8]
 80183c0:	4293      	cmp	r3, r2
 80183c2:	d301      	bcc.n	80183c8 <dir_sdi+0x5c>
 80183c4:	2302      	movs	r3, #2
 80183c6:	e056      	b.n	8018476 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80183c8:	693b      	ldr	r3, [r7, #16]
 80183ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	61da      	str	r2, [r3, #28]
 80183d0:	e02d      	b.n	801842e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80183d2:	693b      	ldr	r3, [r7, #16]
 80183d4:	895b      	ldrh	r3, [r3, #10]
 80183d6:	461a      	mov	r2, r3
 80183d8:	693b      	ldr	r3, [r7, #16]
 80183da:	899b      	ldrh	r3, [r3, #12]
 80183dc:	fb02 f303 	mul.w	r3, r2, r3
 80183e0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80183e2:	e019      	b.n	8018418 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	6979      	ldr	r1, [r7, #20]
 80183e8:	4618      	mov	r0, r3
 80183ea:	f7ff fc9c 	bl	8017d26 <get_fat>
 80183ee:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80183f0:	697b      	ldr	r3, [r7, #20]
 80183f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80183f6:	d101      	bne.n	80183fc <dir_sdi+0x90>
 80183f8:	2301      	movs	r3, #1
 80183fa:	e03c      	b.n	8018476 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80183fc:	697b      	ldr	r3, [r7, #20]
 80183fe:	2b01      	cmp	r3, #1
 8018400:	d904      	bls.n	801840c <dir_sdi+0xa0>
 8018402:	693b      	ldr	r3, [r7, #16]
 8018404:	69db      	ldr	r3, [r3, #28]
 8018406:	697a      	ldr	r2, [r7, #20]
 8018408:	429a      	cmp	r2, r3
 801840a:	d301      	bcc.n	8018410 <dir_sdi+0xa4>
 801840c:	2302      	movs	r3, #2
 801840e:	e032      	b.n	8018476 <dir_sdi+0x10a>
			ofs -= csz;
 8018410:	683a      	ldr	r2, [r7, #0]
 8018412:	68fb      	ldr	r3, [r7, #12]
 8018414:	1ad3      	subs	r3, r2, r3
 8018416:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8018418:	683a      	ldr	r2, [r7, #0]
 801841a:	68fb      	ldr	r3, [r7, #12]
 801841c:	429a      	cmp	r2, r3
 801841e:	d2e1      	bcs.n	80183e4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8018420:	6979      	ldr	r1, [r7, #20]
 8018422:	6938      	ldr	r0, [r7, #16]
 8018424:	f7ff fc60 	bl	8017ce8 <clust2sect>
 8018428:	4602      	mov	r2, r0
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	697a      	ldr	r2, [r7, #20]
 8018432:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	69db      	ldr	r3, [r3, #28]
 8018438:	2b00      	cmp	r3, #0
 801843a:	d101      	bne.n	8018440 <dir_sdi+0xd4>
 801843c:	2302      	movs	r3, #2
 801843e:	e01a      	b.n	8018476 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	69da      	ldr	r2, [r3, #28]
 8018444:	693b      	ldr	r3, [r7, #16]
 8018446:	899b      	ldrh	r3, [r3, #12]
 8018448:	4619      	mov	r1, r3
 801844a:	683b      	ldr	r3, [r7, #0]
 801844c:	fbb3 f3f1 	udiv	r3, r3, r1
 8018450:	441a      	add	r2, r3
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8018456:	693b      	ldr	r3, [r7, #16]
 8018458:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801845c:	693b      	ldr	r3, [r7, #16]
 801845e:	899b      	ldrh	r3, [r3, #12]
 8018460:	461a      	mov	r2, r3
 8018462:	683b      	ldr	r3, [r7, #0]
 8018464:	fbb3 f0f2 	udiv	r0, r3, r2
 8018468:	fb00 f202 	mul.w	r2, r0, r2
 801846c:	1a9b      	subs	r3, r3, r2
 801846e:	18ca      	adds	r2, r1, r3
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8018474:	2300      	movs	r3, #0
}
 8018476:	4618      	mov	r0, r3
 8018478:	3718      	adds	r7, #24
 801847a:	46bd      	mov	sp, r7
 801847c:	bd80      	pop	{r7, pc}

0801847e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801847e:	b580      	push	{r7, lr}
 8018480:	b086      	sub	sp, #24
 8018482:	af00      	add	r7, sp, #0
 8018484:	6078      	str	r0, [r7, #4]
 8018486:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	681b      	ldr	r3, [r3, #0]
 801848c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	695b      	ldr	r3, [r3, #20]
 8018492:	3320      	adds	r3, #32
 8018494:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	69db      	ldr	r3, [r3, #28]
 801849a:	2b00      	cmp	r3, #0
 801849c:	d003      	beq.n	80184a6 <dir_next+0x28>
 801849e:	68bb      	ldr	r3, [r7, #8]
 80184a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80184a4:	d301      	bcc.n	80184aa <dir_next+0x2c>
 80184a6:	2304      	movs	r3, #4
 80184a8:	e0bb      	b.n	8018622 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80184aa:	68fb      	ldr	r3, [r7, #12]
 80184ac:	899b      	ldrh	r3, [r3, #12]
 80184ae:	461a      	mov	r2, r3
 80184b0:	68bb      	ldr	r3, [r7, #8]
 80184b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80184b6:	fb01 f202 	mul.w	r2, r1, r2
 80184ba:	1a9b      	subs	r3, r3, r2
 80184bc:	2b00      	cmp	r3, #0
 80184be:	f040 809d 	bne.w	80185fc <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	69db      	ldr	r3, [r3, #28]
 80184c6:	1c5a      	adds	r2, r3, #1
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	699b      	ldr	r3, [r3, #24]
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d10b      	bne.n	80184ec <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80184d4:	68bb      	ldr	r3, [r7, #8]
 80184d6:	095b      	lsrs	r3, r3, #5
 80184d8:	68fa      	ldr	r2, [r7, #12]
 80184da:	8912      	ldrh	r2, [r2, #8]
 80184dc:	4293      	cmp	r3, r2
 80184de:	f0c0 808d 	bcc.w	80185fc <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	2200      	movs	r2, #0
 80184e6:	61da      	str	r2, [r3, #28]
 80184e8:	2304      	movs	r3, #4
 80184ea:	e09a      	b.n	8018622 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80184ec:	68fb      	ldr	r3, [r7, #12]
 80184ee:	899b      	ldrh	r3, [r3, #12]
 80184f0:	461a      	mov	r2, r3
 80184f2:	68bb      	ldr	r3, [r7, #8]
 80184f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80184f8:	68fa      	ldr	r2, [r7, #12]
 80184fa:	8952      	ldrh	r2, [r2, #10]
 80184fc:	3a01      	subs	r2, #1
 80184fe:	4013      	ands	r3, r2
 8018500:	2b00      	cmp	r3, #0
 8018502:	d17b      	bne.n	80185fc <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8018504:	687a      	ldr	r2, [r7, #4]
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	699b      	ldr	r3, [r3, #24]
 801850a:	4619      	mov	r1, r3
 801850c:	4610      	mov	r0, r2
 801850e:	f7ff fc0a 	bl	8017d26 <get_fat>
 8018512:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8018514:	697b      	ldr	r3, [r7, #20]
 8018516:	2b01      	cmp	r3, #1
 8018518:	d801      	bhi.n	801851e <dir_next+0xa0>
 801851a:	2302      	movs	r3, #2
 801851c:	e081      	b.n	8018622 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801851e:	697b      	ldr	r3, [r7, #20]
 8018520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018524:	d101      	bne.n	801852a <dir_next+0xac>
 8018526:	2301      	movs	r3, #1
 8018528:	e07b      	b.n	8018622 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801852a:	68fb      	ldr	r3, [r7, #12]
 801852c:	69db      	ldr	r3, [r3, #28]
 801852e:	697a      	ldr	r2, [r7, #20]
 8018530:	429a      	cmp	r2, r3
 8018532:	d359      	bcc.n	80185e8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8018534:	683b      	ldr	r3, [r7, #0]
 8018536:	2b00      	cmp	r3, #0
 8018538:	d104      	bne.n	8018544 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	2200      	movs	r2, #0
 801853e:	61da      	str	r2, [r3, #28]
 8018540:	2304      	movs	r3, #4
 8018542:	e06e      	b.n	8018622 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8018544:	687a      	ldr	r2, [r7, #4]
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	699b      	ldr	r3, [r3, #24]
 801854a:	4619      	mov	r1, r3
 801854c:	4610      	mov	r0, r2
 801854e:	f7ff fe3d 	bl	80181cc <create_chain>
 8018552:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8018554:	697b      	ldr	r3, [r7, #20]
 8018556:	2b00      	cmp	r3, #0
 8018558:	d101      	bne.n	801855e <dir_next+0xe0>
 801855a:	2307      	movs	r3, #7
 801855c:	e061      	b.n	8018622 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801855e:	697b      	ldr	r3, [r7, #20]
 8018560:	2b01      	cmp	r3, #1
 8018562:	d101      	bne.n	8018568 <dir_next+0xea>
 8018564:	2302      	movs	r3, #2
 8018566:	e05c      	b.n	8018622 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8018568:	697b      	ldr	r3, [r7, #20]
 801856a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801856e:	d101      	bne.n	8018574 <dir_next+0xf6>
 8018570:	2301      	movs	r3, #1
 8018572:	e056      	b.n	8018622 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8018574:	68f8      	ldr	r0, [r7, #12]
 8018576:	f7ff fad5 	bl	8017b24 <sync_window>
 801857a:	4603      	mov	r3, r0
 801857c:	2b00      	cmp	r3, #0
 801857e:	d001      	beq.n	8018584 <dir_next+0x106>
 8018580:	2301      	movs	r3, #1
 8018582:	e04e      	b.n	8018622 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8018584:	68fb      	ldr	r3, [r7, #12]
 8018586:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801858a:	68fb      	ldr	r3, [r7, #12]
 801858c:	899b      	ldrh	r3, [r3, #12]
 801858e:	461a      	mov	r2, r3
 8018590:	2100      	movs	r1, #0
 8018592:	f7ff f8fe 	bl	8017792 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8018596:	2300      	movs	r3, #0
 8018598:	613b      	str	r3, [r7, #16]
 801859a:	6979      	ldr	r1, [r7, #20]
 801859c:	68f8      	ldr	r0, [r7, #12]
 801859e:	f7ff fba3 	bl	8017ce8 <clust2sect>
 80185a2:	4602      	mov	r2, r0
 80185a4:	68fb      	ldr	r3, [r7, #12]
 80185a6:	635a      	str	r2, [r3, #52]	; 0x34
 80185a8:	e012      	b.n	80185d0 <dir_next+0x152>
						fs->wflag = 1;
 80185aa:	68fb      	ldr	r3, [r7, #12]
 80185ac:	2201      	movs	r2, #1
 80185ae:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80185b0:	68f8      	ldr	r0, [r7, #12]
 80185b2:	f7ff fab7 	bl	8017b24 <sync_window>
 80185b6:	4603      	mov	r3, r0
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	d001      	beq.n	80185c0 <dir_next+0x142>
 80185bc:	2301      	movs	r3, #1
 80185be:	e030      	b.n	8018622 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80185c0:	693b      	ldr	r3, [r7, #16]
 80185c2:	3301      	adds	r3, #1
 80185c4:	613b      	str	r3, [r7, #16]
 80185c6:	68fb      	ldr	r3, [r7, #12]
 80185c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80185ca:	1c5a      	adds	r2, r3, #1
 80185cc:	68fb      	ldr	r3, [r7, #12]
 80185ce:	635a      	str	r2, [r3, #52]	; 0x34
 80185d0:	68fb      	ldr	r3, [r7, #12]
 80185d2:	895b      	ldrh	r3, [r3, #10]
 80185d4:	461a      	mov	r2, r3
 80185d6:	693b      	ldr	r3, [r7, #16]
 80185d8:	4293      	cmp	r3, r2
 80185da:	d3e6      	bcc.n	80185aa <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80185dc:	68fb      	ldr	r3, [r7, #12]
 80185de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80185e0:	693b      	ldr	r3, [r7, #16]
 80185e2:	1ad2      	subs	r2, r2, r3
 80185e4:	68fb      	ldr	r3, [r7, #12]
 80185e6:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	697a      	ldr	r2, [r7, #20]
 80185ec:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80185ee:	6979      	ldr	r1, [r7, #20]
 80185f0:	68f8      	ldr	r0, [r7, #12]
 80185f2:	f7ff fb79 	bl	8017ce8 <clust2sect>
 80185f6:	4602      	mov	r2, r0
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	68ba      	ldr	r2, [r7, #8]
 8018600:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8018602:	68fb      	ldr	r3, [r7, #12]
 8018604:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	899b      	ldrh	r3, [r3, #12]
 801860c:	461a      	mov	r2, r3
 801860e:	68bb      	ldr	r3, [r7, #8]
 8018610:	fbb3 f0f2 	udiv	r0, r3, r2
 8018614:	fb00 f202 	mul.w	r2, r0, r2
 8018618:	1a9b      	subs	r3, r3, r2
 801861a:	18ca      	adds	r2, r1, r3
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8018620:	2300      	movs	r3, #0
}
 8018622:	4618      	mov	r0, r3
 8018624:	3718      	adds	r7, #24
 8018626:	46bd      	mov	sp, r7
 8018628:	bd80      	pop	{r7, pc}

0801862a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801862a:	b580      	push	{r7, lr}
 801862c:	b086      	sub	sp, #24
 801862e:	af00      	add	r7, sp, #0
 8018630:	6078      	str	r0, [r7, #4]
 8018632:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	681b      	ldr	r3, [r3, #0]
 8018638:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801863a:	2100      	movs	r1, #0
 801863c:	6878      	ldr	r0, [r7, #4]
 801863e:	f7ff fe95 	bl	801836c <dir_sdi>
 8018642:	4603      	mov	r3, r0
 8018644:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8018646:	7dfb      	ldrb	r3, [r7, #23]
 8018648:	2b00      	cmp	r3, #0
 801864a:	d12b      	bne.n	80186a4 <dir_alloc+0x7a>
		n = 0;
 801864c:	2300      	movs	r3, #0
 801864e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	69db      	ldr	r3, [r3, #28]
 8018654:	4619      	mov	r1, r3
 8018656:	68f8      	ldr	r0, [r7, #12]
 8018658:	f7ff faa8 	bl	8017bac <move_window>
 801865c:	4603      	mov	r3, r0
 801865e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8018660:	7dfb      	ldrb	r3, [r7, #23]
 8018662:	2b00      	cmp	r3, #0
 8018664:	d11d      	bne.n	80186a2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	6a1b      	ldr	r3, [r3, #32]
 801866a:	781b      	ldrb	r3, [r3, #0]
 801866c:	2be5      	cmp	r3, #229	; 0xe5
 801866e:	d004      	beq.n	801867a <dir_alloc+0x50>
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	6a1b      	ldr	r3, [r3, #32]
 8018674:	781b      	ldrb	r3, [r3, #0]
 8018676:	2b00      	cmp	r3, #0
 8018678:	d107      	bne.n	801868a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801867a:	693b      	ldr	r3, [r7, #16]
 801867c:	3301      	adds	r3, #1
 801867e:	613b      	str	r3, [r7, #16]
 8018680:	693a      	ldr	r2, [r7, #16]
 8018682:	683b      	ldr	r3, [r7, #0]
 8018684:	429a      	cmp	r2, r3
 8018686:	d102      	bne.n	801868e <dir_alloc+0x64>
 8018688:	e00c      	b.n	80186a4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801868a:	2300      	movs	r3, #0
 801868c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801868e:	2101      	movs	r1, #1
 8018690:	6878      	ldr	r0, [r7, #4]
 8018692:	f7ff fef4 	bl	801847e <dir_next>
 8018696:	4603      	mov	r3, r0
 8018698:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801869a:	7dfb      	ldrb	r3, [r7, #23]
 801869c:	2b00      	cmp	r3, #0
 801869e:	d0d7      	beq.n	8018650 <dir_alloc+0x26>
 80186a0:	e000      	b.n	80186a4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80186a2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80186a4:	7dfb      	ldrb	r3, [r7, #23]
 80186a6:	2b04      	cmp	r3, #4
 80186a8:	d101      	bne.n	80186ae <dir_alloc+0x84>
 80186aa:	2307      	movs	r3, #7
 80186ac:	75fb      	strb	r3, [r7, #23]
	return res;
 80186ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80186b0:	4618      	mov	r0, r3
 80186b2:	3718      	adds	r7, #24
 80186b4:	46bd      	mov	sp, r7
 80186b6:	bd80      	pop	{r7, pc}

080186b8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80186b8:	b580      	push	{r7, lr}
 80186ba:	b084      	sub	sp, #16
 80186bc:	af00      	add	r7, sp, #0
 80186be:	6078      	str	r0, [r7, #4]
 80186c0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80186c2:	683b      	ldr	r3, [r7, #0]
 80186c4:	331a      	adds	r3, #26
 80186c6:	4618      	mov	r0, r3
 80186c8:	f7fe ffc0 	bl	801764c <ld_word>
 80186cc:	4603      	mov	r3, r0
 80186ce:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	781b      	ldrb	r3, [r3, #0]
 80186d4:	2b03      	cmp	r3, #3
 80186d6:	d109      	bne.n	80186ec <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80186d8:	683b      	ldr	r3, [r7, #0]
 80186da:	3314      	adds	r3, #20
 80186dc:	4618      	mov	r0, r3
 80186de:	f7fe ffb5 	bl	801764c <ld_word>
 80186e2:	4603      	mov	r3, r0
 80186e4:	041b      	lsls	r3, r3, #16
 80186e6:	68fa      	ldr	r2, [r7, #12]
 80186e8:	4313      	orrs	r3, r2
 80186ea:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80186ec:	68fb      	ldr	r3, [r7, #12]
}
 80186ee:	4618      	mov	r0, r3
 80186f0:	3710      	adds	r7, #16
 80186f2:	46bd      	mov	sp, r7
 80186f4:	bd80      	pop	{r7, pc}

080186f6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80186f6:	b580      	push	{r7, lr}
 80186f8:	b084      	sub	sp, #16
 80186fa:	af00      	add	r7, sp, #0
 80186fc:	60f8      	str	r0, [r7, #12]
 80186fe:	60b9      	str	r1, [r7, #8]
 8018700:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8018702:	68bb      	ldr	r3, [r7, #8]
 8018704:	331a      	adds	r3, #26
 8018706:	687a      	ldr	r2, [r7, #4]
 8018708:	b292      	uxth	r2, r2
 801870a:	4611      	mov	r1, r2
 801870c:	4618      	mov	r0, r3
 801870e:	f7fe ffd8 	bl	80176c2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8018712:	68fb      	ldr	r3, [r7, #12]
 8018714:	781b      	ldrb	r3, [r3, #0]
 8018716:	2b03      	cmp	r3, #3
 8018718:	d109      	bne.n	801872e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801871a:	68bb      	ldr	r3, [r7, #8]
 801871c:	f103 0214 	add.w	r2, r3, #20
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	0c1b      	lsrs	r3, r3, #16
 8018724:	b29b      	uxth	r3, r3
 8018726:	4619      	mov	r1, r3
 8018728:	4610      	mov	r0, r2
 801872a:	f7fe ffca 	bl	80176c2 <st_word>
	}
}
 801872e:	bf00      	nop
 8018730:	3710      	adds	r7, #16
 8018732:	46bd      	mov	sp, r7
 8018734:	bd80      	pop	{r7, pc}
	...

08018738 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8018738:	b590      	push	{r4, r7, lr}
 801873a:	b087      	sub	sp, #28
 801873c:	af00      	add	r7, sp, #0
 801873e:	6078      	str	r0, [r7, #4]
 8018740:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8018742:	683b      	ldr	r3, [r7, #0]
 8018744:	331a      	adds	r3, #26
 8018746:	4618      	mov	r0, r3
 8018748:	f7fe ff80 	bl	801764c <ld_word>
 801874c:	4603      	mov	r3, r0
 801874e:	2b00      	cmp	r3, #0
 8018750:	d001      	beq.n	8018756 <cmp_lfn+0x1e>
 8018752:	2300      	movs	r3, #0
 8018754:	e059      	b.n	801880a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8018756:	683b      	ldr	r3, [r7, #0]
 8018758:	781b      	ldrb	r3, [r3, #0]
 801875a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801875e:	1e5a      	subs	r2, r3, #1
 8018760:	4613      	mov	r3, r2
 8018762:	005b      	lsls	r3, r3, #1
 8018764:	4413      	add	r3, r2
 8018766:	009b      	lsls	r3, r3, #2
 8018768:	4413      	add	r3, r2
 801876a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801876c:	2301      	movs	r3, #1
 801876e:	81fb      	strh	r3, [r7, #14]
 8018770:	2300      	movs	r3, #0
 8018772:	613b      	str	r3, [r7, #16]
 8018774:	e033      	b.n	80187de <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8018776:	4a27      	ldr	r2, [pc, #156]	; (8018814 <cmp_lfn+0xdc>)
 8018778:	693b      	ldr	r3, [r7, #16]
 801877a:	4413      	add	r3, r2
 801877c:	781b      	ldrb	r3, [r3, #0]
 801877e:	461a      	mov	r2, r3
 8018780:	683b      	ldr	r3, [r7, #0]
 8018782:	4413      	add	r3, r2
 8018784:	4618      	mov	r0, r3
 8018786:	f7fe ff61 	bl	801764c <ld_word>
 801878a:	4603      	mov	r3, r0
 801878c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801878e:	89fb      	ldrh	r3, [r7, #14]
 8018790:	2b00      	cmp	r3, #0
 8018792:	d01a      	beq.n	80187ca <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8018794:	697b      	ldr	r3, [r7, #20]
 8018796:	2bfe      	cmp	r3, #254	; 0xfe
 8018798:	d812      	bhi.n	80187c0 <cmp_lfn+0x88>
 801879a:	89bb      	ldrh	r3, [r7, #12]
 801879c:	4618      	mov	r0, r3
 801879e:	f001 fe11 	bl	801a3c4 <ff_wtoupper>
 80187a2:	4603      	mov	r3, r0
 80187a4:	461c      	mov	r4, r3
 80187a6:	697b      	ldr	r3, [r7, #20]
 80187a8:	1c5a      	adds	r2, r3, #1
 80187aa:	617a      	str	r2, [r7, #20]
 80187ac:	005b      	lsls	r3, r3, #1
 80187ae:	687a      	ldr	r2, [r7, #4]
 80187b0:	4413      	add	r3, r2
 80187b2:	881b      	ldrh	r3, [r3, #0]
 80187b4:	4618      	mov	r0, r3
 80187b6:	f001 fe05 	bl	801a3c4 <ff_wtoupper>
 80187ba:	4603      	mov	r3, r0
 80187bc:	429c      	cmp	r4, r3
 80187be:	d001      	beq.n	80187c4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80187c0:	2300      	movs	r3, #0
 80187c2:	e022      	b.n	801880a <cmp_lfn+0xd2>
			}
			wc = uc;
 80187c4:	89bb      	ldrh	r3, [r7, #12]
 80187c6:	81fb      	strh	r3, [r7, #14]
 80187c8:	e006      	b.n	80187d8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80187ca:	89bb      	ldrh	r3, [r7, #12]
 80187cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80187d0:	4293      	cmp	r3, r2
 80187d2:	d001      	beq.n	80187d8 <cmp_lfn+0xa0>
 80187d4:	2300      	movs	r3, #0
 80187d6:	e018      	b.n	801880a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80187d8:	693b      	ldr	r3, [r7, #16]
 80187da:	3301      	adds	r3, #1
 80187dc:	613b      	str	r3, [r7, #16]
 80187de:	693b      	ldr	r3, [r7, #16]
 80187e0:	2b0c      	cmp	r3, #12
 80187e2:	d9c8      	bls.n	8018776 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80187e4:	683b      	ldr	r3, [r7, #0]
 80187e6:	781b      	ldrb	r3, [r3, #0]
 80187e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d00b      	beq.n	8018808 <cmp_lfn+0xd0>
 80187f0:	89fb      	ldrh	r3, [r7, #14]
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	d008      	beq.n	8018808 <cmp_lfn+0xd0>
 80187f6:	697b      	ldr	r3, [r7, #20]
 80187f8:	005b      	lsls	r3, r3, #1
 80187fa:	687a      	ldr	r2, [r7, #4]
 80187fc:	4413      	add	r3, r2
 80187fe:	881b      	ldrh	r3, [r3, #0]
 8018800:	2b00      	cmp	r3, #0
 8018802:	d001      	beq.n	8018808 <cmp_lfn+0xd0>
 8018804:	2300      	movs	r3, #0
 8018806:	e000      	b.n	801880a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8018808:	2301      	movs	r3, #1
}
 801880a:	4618      	mov	r0, r3
 801880c:	371c      	adds	r7, #28
 801880e:	46bd      	mov	sp, r7
 8018810:	bd90      	pop	{r4, r7, pc}
 8018812:	bf00      	nop
 8018814:	08020114 	.word	0x08020114

08018818 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8018818:	b580      	push	{r7, lr}
 801881a:	b088      	sub	sp, #32
 801881c:	af00      	add	r7, sp, #0
 801881e:	60f8      	str	r0, [r7, #12]
 8018820:	60b9      	str	r1, [r7, #8]
 8018822:	4611      	mov	r1, r2
 8018824:	461a      	mov	r2, r3
 8018826:	460b      	mov	r3, r1
 8018828:	71fb      	strb	r3, [r7, #7]
 801882a:	4613      	mov	r3, r2
 801882c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801882e:	68bb      	ldr	r3, [r7, #8]
 8018830:	330d      	adds	r3, #13
 8018832:	79ba      	ldrb	r2, [r7, #6]
 8018834:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8018836:	68bb      	ldr	r3, [r7, #8]
 8018838:	330b      	adds	r3, #11
 801883a:	220f      	movs	r2, #15
 801883c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801883e:	68bb      	ldr	r3, [r7, #8]
 8018840:	330c      	adds	r3, #12
 8018842:	2200      	movs	r2, #0
 8018844:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8018846:	68bb      	ldr	r3, [r7, #8]
 8018848:	331a      	adds	r3, #26
 801884a:	2100      	movs	r1, #0
 801884c:	4618      	mov	r0, r3
 801884e:	f7fe ff38 	bl	80176c2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8018852:	79fb      	ldrb	r3, [r7, #7]
 8018854:	1e5a      	subs	r2, r3, #1
 8018856:	4613      	mov	r3, r2
 8018858:	005b      	lsls	r3, r3, #1
 801885a:	4413      	add	r3, r2
 801885c:	009b      	lsls	r3, r3, #2
 801885e:	4413      	add	r3, r2
 8018860:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8018862:	2300      	movs	r3, #0
 8018864:	82fb      	strh	r3, [r7, #22]
 8018866:	2300      	movs	r3, #0
 8018868:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801886a:	8afb      	ldrh	r3, [r7, #22]
 801886c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018870:	4293      	cmp	r3, r2
 8018872:	d007      	beq.n	8018884 <put_lfn+0x6c>
 8018874:	69fb      	ldr	r3, [r7, #28]
 8018876:	1c5a      	adds	r2, r3, #1
 8018878:	61fa      	str	r2, [r7, #28]
 801887a:	005b      	lsls	r3, r3, #1
 801887c:	68fa      	ldr	r2, [r7, #12]
 801887e:	4413      	add	r3, r2
 8018880:	881b      	ldrh	r3, [r3, #0]
 8018882:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8018884:	4a17      	ldr	r2, [pc, #92]	; (80188e4 <put_lfn+0xcc>)
 8018886:	69bb      	ldr	r3, [r7, #24]
 8018888:	4413      	add	r3, r2
 801888a:	781b      	ldrb	r3, [r3, #0]
 801888c:	461a      	mov	r2, r3
 801888e:	68bb      	ldr	r3, [r7, #8]
 8018890:	4413      	add	r3, r2
 8018892:	8afa      	ldrh	r2, [r7, #22]
 8018894:	4611      	mov	r1, r2
 8018896:	4618      	mov	r0, r3
 8018898:	f7fe ff13 	bl	80176c2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801889c:	8afb      	ldrh	r3, [r7, #22]
 801889e:	2b00      	cmp	r3, #0
 80188a0:	d102      	bne.n	80188a8 <put_lfn+0x90>
 80188a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80188a6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80188a8:	69bb      	ldr	r3, [r7, #24]
 80188aa:	3301      	adds	r3, #1
 80188ac:	61bb      	str	r3, [r7, #24]
 80188ae:	69bb      	ldr	r3, [r7, #24]
 80188b0:	2b0c      	cmp	r3, #12
 80188b2:	d9da      	bls.n	801886a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80188b4:	8afb      	ldrh	r3, [r7, #22]
 80188b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80188ba:	4293      	cmp	r3, r2
 80188bc:	d006      	beq.n	80188cc <put_lfn+0xb4>
 80188be:	69fb      	ldr	r3, [r7, #28]
 80188c0:	005b      	lsls	r3, r3, #1
 80188c2:	68fa      	ldr	r2, [r7, #12]
 80188c4:	4413      	add	r3, r2
 80188c6:	881b      	ldrh	r3, [r3, #0]
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	d103      	bne.n	80188d4 <put_lfn+0xbc>
 80188cc:	79fb      	ldrb	r3, [r7, #7]
 80188ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80188d2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80188d4:	68bb      	ldr	r3, [r7, #8]
 80188d6:	79fa      	ldrb	r2, [r7, #7]
 80188d8:	701a      	strb	r2, [r3, #0]
}
 80188da:	bf00      	nop
 80188dc:	3720      	adds	r7, #32
 80188de:	46bd      	mov	sp, r7
 80188e0:	bd80      	pop	{r7, pc}
 80188e2:	bf00      	nop
 80188e4:	08020114 	.word	0x08020114

080188e8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80188e8:	b580      	push	{r7, lr}
 80188ea:	b08c      	sub	sp, #48	; 0x30
 80188ec:	af00      	add	r7, sp, #0
 80188ee:	60f8      	str	r0, [r7, #12]
 80188f0:	60b9      	str	r1, [r7, #8]
 80188f2:	607a      	str	r2, [r7, #4]
 80188f4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80188f6:	220b      	movs	r2, #11
 80188f8:	68b9      	ldr	r1, [r7, #8]
 80188fa:	68f8      	ldr	r0, [r7, #12]
 80188fc:	f7fe ff28 	bl	8017750 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8018900:	683b      	ldr	r3, [r7, #0]
 8018902:	2b05      	cmp	r3, #5
 8018904:	d929      	bls.n	801895a <gen_numname+0x72>
		sr = seq;
 8018906:	683b      	ldr	r3, [r7, #0]
 8018908:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801890a:	e020      	b.n	801894e <gen_numname+0x66>
			wc = *lfn++;
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	1c9a      	adds	r2, r3, #2
 8018910:	607a      	str	r2, [r7, #4]
 8018912:	881b      	ldrh	r3, [r3, #0]
 8018914:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8018916:	2300      	movs	r3, #0
 8018918:	62bb      	str	r3, [r7, #40]	; 0x28
 801891a:	e015      	b.n	8018948 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 801891c:	69fb      	ldr	r3, [r7, #28]
 801891e:	005a      	lsls	r2, r3, #1
 8018920:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018922:	f003 0301 	and.w	r3, r3, #1
 8018926:	4413      	add	r3, r2
 8018928:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801892a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801892c:	085b      	lsrs	r3, r3, #1
 801892e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8018930:	69fb      	ldr	r3, [r7, #28]
 8018932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018936:	2b00      	cmp	r3, #0
 8018938:	d003      	beq.n	8018942 <gen_numname+0x5a>
 801893a:	69fa      	ldr	r2, [r7, #28]
 801893c:	4b30      	ldr	r3, [pc, #192]	; (8018a00 <gen_numname+0x118>)
 801893e:	4053      	eors	r3, r2
 8018940:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8018942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018944:	3301      	adds	r3, #1
 8018946:	62bb      	str	r3, [r7, #40]	; 0x28
 8018948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801894a:	2b0f      	cmp	r3, #15
 801894c:	d9e6      	bls.n	801891c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	881b      	ldrh	r3, [r3, #0]
 8018952:	2b00      	cmp	r3, #0
 8018954:	d1da      	bne.n	801890c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8018956:	69fb      	ldr	r3, [r7, #28]
 8018958:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801895a:	2307      	movs	r3, #7
 801895c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801895e:	683b      	ldr	r3, [r7, #0]
 8018960:	b2db      	uxtb	r3, r3
 8018962:	f003 030f 	and.w	r3, r3, #15
 8018966:	b2db      	uxtb	r3, r3
 8018968:	3330      	adds	r3, #48	; 0x30
 801896a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 801896e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018972:	2b39      	cmp	r3, #57	; 0x39
 8018974:	d904      	bls.n	8018980 <gen_numname+0x98>
 8018976:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801897a:	3307      	adds	r3, #7
 801897c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8018980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018982:	1e5a      	subs	r2, r3, #1
 8018984:	62ba      	str	r2, [r7, #40]	; 0x28
 8018986:	3330      	adds	r3, #48	; 0x30
 8018988:	443b      	add	r3, r7
 801898a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801898e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8018992:	683b      	ldr	r3, [r7, #0]
 8018994:	091b      	lsrs	r3, r3, #4
 8018996:	603b      	str	r3, [r7, #0]
	} while (seq);
 8018998:	683b      	ldr	r3, [r7, #0]
 801899a:	2b00      	cmp	r3, #0
 801899c:	d1df      	bne.n	801895e <gen_numname+0x76>
	ns[i] = '~';
 801899e:	f107 0214 	add.w	r2, r7, #20
 80189a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189a4:	4413      	add	r3, r2
 80189a6:	227e      	movs	r2, #126	; 0x7e
 80189a8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80189aa:	2300      	movs	r3, #0
 80189ac:	627b      	str	r3, [r7, #36]	; 0x24
 80189ae:	e002      	b.n	80189b6 <gen_numname+0xce>
 80189b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189b2:	3301      	adds	r3, #1
 80189b4:	627b      	str	r3, [r7, #36]	; 0x24
 80189b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80189b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189ba:	429a      	cmp	r2, r3
 80189bc:	d205      	bcs.n	80189ca <gen_numname+0xe2>
 80189be:	68fa      	ldr	r2, [r7, #12]
 80189c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189c2:	4413      	add	r3, r2
 80189c4:	781b      	ldrb	r3, [r3, #0]
 80189c6:	2b20      	cmp	r3, #32
 80189c8:	d1f2      	bne.n	80189b0 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80189ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189cc:	2b07      	cmp	r3, #7
 80189ce:	d807      	bhi.n	80189e0 <gen_numname+0xf8>
 80189d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189d2:	1c5a      	adds	r2, r3, #1
 80189d4:	62ba      	str	r2, [r7, #40]	; 0x28
 80189d6:	3330      	adds	r3, #48	; 0x30
 80189d8:	443b      	add	r3, r7
 80189da:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80189de:	e000      	b.n	80189e2 <gen_numname+0xfa>
 80189e0:	2120      	movs	r1, #32
 80189e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189e4:	1c5a      	adds	r2, r3, #1
 80189e6:	627a      	str	r2, [r7, #36]	; 0x24
 80189e8:	68fa      	ldr	r2, [r7, #12]
 80189ea:	4413      	add	r3, r2
 80189ec:	460a      	mov	r2, r1
 80189ee:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80189f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189f2:	2b07      	cmp	r3, #7
 80189f4:	d9e9      	bls.n	80189ca <gen_numname+0xe2>
}
 80189f6:	bf00      	nop
 80189f8:	bf00      	nop
 80189fa:	3730      	adds	r7, #48	; 0x30
 80189fc:	46bd      	mov	sp, r7
 80189fe:	bd80      	pop	{r7, pc}
 8018a00:	00011021 	.word	0x00011021

08018a04 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8018a04:	b480      	push	{r7}
 8018a06:	b085      	sub	sp, #20
 8018a08:	af00      	add	r7, sp, #0
 8018a0a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8018a0c:	2300      	movs	r3, #0
 8018a0e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8018a10:	230b      	movs	r3, #11
 8018a12:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8018a14:	7bfb      	ldrb	r3, [r7, #15]
 8018a16:	b2da      	uxtb	r2, r3
 8018a18:	0852      	lsrs	r2, r2, #1
 8018a1a:	01db      	lsls	r3, r3, #7
 8018a1c:	4313      	orrs	r3, r2
 8018a1e:	b2da      	uxtb	r2, r3
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	1c59      	adds	r1, r3, #1
 8018a24:	6079      	str	r1, [r7, #4]
 8018a26:	781b      	ldrb	r3, [r3, #0]
 8018a28:	4413      	add	r3, r2
 8018a2a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8018a2c:	68bb      	ldr	r3, [r7, #8]
 8018a2e:	3b01      	subs	r3, #1
 8018a30:	60bb      	str	r3, [r7, #8]
 8018a32:	68bb      	ldr	r3, [r7, #8]
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d1ed      	bne.n	8018a14 <sum_sfn+0x10>
	return sum;
 8018a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8018a3a:	4618      	mov	r0, r3
 8018a3c:	3714      	adds	r7, #20
 8018a3e:	46bd      	mov	sp, r7
 8018a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a44:	4770      	bx	lr

08018a46 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8018a46:	b580      	push	{r7, lr}
 8018a48:	b086      	sub	sp, #24
 8018a4a:	af00      	add	r7, sp, #0
 8018a4c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	681b      	ldr	r3, [r3, #0]
 8018a52:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8018a54:	2100      	movs	r1, #0
 8018a56:	6878      	ldr	r0, [r7, #4]
 8018a58:	f7ff fc88 	bl	801836c <dir_sdi>
 8018a5c:	4603      	mov	r3, r0
 8018a5e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8018a60:	7dfb      	ldrb	r3, [r7, #23]
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	d001      	beq.n	8018a6a <dir_find+0x24>
 8018a66:	7dfb      	ldrb	r3, [r7, #23]
 8018a68:	e0a9      	b.n	8018bbe <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018a6a:	23ff      	movs	r3, #255	; 0xff
 8018a6c:	753b      	strb	r3, [r7, #20]
 8018a6e:	7d3b      	ldrb	r3, [r7, #20]
 8018a70:	757b      	strb	r3, [r7, #21]
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	f04f 32ff 	mov.w	r2, #4294967295
 8018a78:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	69db      	ldr	r3, [r3, #28]
 8018a7e:	4619      	mov	r1, r3
 8018a80:	6938      	ldr	r0, [r7, #16]
 8018a82:	f7ff f893 	bl	8017bac <move_window>
 8018a86:	4603      	mov	r3, r0
 8018a88:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8018a8a:	7dfb      	ldrb	r3, [r7, #23]
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	f040 8090 	bne.w	8018bb2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	6a1b      	ldr	r3, [r3, #32]
 8018a96:	781b      	ldrb	r3, [r3, #0]
 8018a98:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8018a9a:	7dbb      	ldrb	r3, [r7, #22]
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	d102      	bne.n	8018aa6 <dir_find+0x60>
 8018aa0:	2304      	movs	r3, #4
 8018aa2:	75fb      	strb	r3, [r7, #23]
 8018aa4:	e08a      	b.n	8018bbc <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	6a1b      	ldr	r3, [r3, #32]
 8018aaa:	330b      	adds	r3, #11
 8018aac:	781b      	ldrb	r3, [r3, #0]
 8018aae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018ab2:	73fb      	strb	r3, [r7, #15]
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	7bfa      	ldrb	r2, [r7, #15]
 8018ab8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8018aba:	7dbb      	ldrb	r3, [r7, #22]
 8018abc:	2be5      	cmp	r3, #229	; 0xe5
 8018abe:	d007      	beq.n	8018ad0 <dir_find+0x8a>
 8018ac0:	7bfb      	ldrb	r3, [r7, #15]
 8018ac2:	f003 0308 	and.w	r3, r3, #8
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d009      	beq.n	8018ade <dir_find+0x98>
 8018aca:	7bfb      	ldrb	r3, [r7, #15]
 8018acc:	2b0f      	cmp	r3, #15
 8018ace:	d006      	beq.n	8018ade <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018ad0:	23ff      	movs	r3, #255	; 0xff
 8018ad2:	757b      	strb	r3, [r7, #21]
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8018ada:	631a      	str	r2, [r3, #48]	; 0x30
 8018adc:	e05e      	b.n	8018b9c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8018ade:	7bfb      	ldrb	r3, [r7, #15]
 8018ae0:	2b0f      	cmp	r3, #15
 8018ae2:	d136      	bne.n	8018b52 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d154      	bne.n	8018b9c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8018af2:	7dbb      	ldrb	r3, [r7, #22]
 8018af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	d00d      	beq.n	8018b18 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	6a1b      	ldr	r3, [r3, #32]
 8018b00:	7b5b      	ldrb	r3, [r3, #13]
 8018b02:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8018b04:	7dbb      	ldrb	r3, [r7, #22]
 8018b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018b0a:	75bb      	strb	r3, [r7, #22]
 8018b0c:	7dbb      	ldrb	r3, [r7, #22]
 8018b0e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	695a      	ldr	r2, [r3, #20]
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8018b18:	7dba      	ldrb	r2, [r7, #22]
 8018b1a:	7d7b      	ldrb	r3, [r7, #21]
 8018b1c:	429a      	cmp	r2, r3
 8018b1e:	d115      	bne.n	8018b4c <dir_find+0x106>
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	6a1b      	ldr	r3, [r3, #32]
 8018b24:	330d      	adds	r3, #13
 8018b26:	781b      	ldrb	r3, [r3, #0]
 8018b28:	7d3a      	ldrb	r2, [r7, #20]
 8018b2a:	429a      	cmp	r2, r3
 8018b2c:	d10e      	bne.n	8018b4c <dir_find+0x106>
 8018b2e:	693b      	ldr	r3, [r7, #16]
 8018b30:	691a      	ldr	r2, [r3, #16]
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	6a1b      	ldr	r3, [r3, #32]
 8018b36:	4619      	mov	r1, r3
 8018b38:	4610      	mov	r0, r2
 8018b3a:	f7ff fdfd 	bl	8018738 <cmp_lfn>
 8018b3e:	4603      	mov	r3, r0
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	d003      	beq.n	8018b4c <dir_find+0x106>
 8018b44:	7d7b      	ldrb	r3, [r7, #21]
 8018b46:	3b01      	subs	r3, #1
 8018b48:	b2db      	uxtb	r3, r3
 8018b4a:	e000      	b.n	8018b4e <dir_find+0x108>
 8018b4c:	23ff      	movs	r3, #255	; 0xff
 8018b4e:	757b      	strb	r3, [r7, #21]
 8018b50:	e024      	b.n	8018b9c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8018b52:	7d7b      	ldrb	r3, [r7, #21]
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d109      	bne.n	8018b6c <dir_find+0x126>
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	6a1b      	ldr	r3, [r3, #32]
 8018b5c:	4618      	mov	r0, r3
 8018b5e:	f7ff ff51 	bl	8018a04 <sum_sfn>
 8018b62:	4603      	mov	r3, r0
 8018b64:	461a      	mov	r2, r3
 8018b66:	7d3b      	ldrb	r3, [r7, #20]
 8018b68:	4293      	cmp	r3, r2
 8018b6a:	d024      	beq.n	8018bb6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018b72:	f003 0301 	and.w	r3, r3, #1
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d10a      	bne.n	8018b90 <dir_find+0x14a>
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	6a18      	ldr	r0, [r3, #32]
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	3324      	adds	r3, #36	; 0x24
 8018b82:	220b      	movs	r2, #11
 8018b84:	4619      	mov	r1, r3
 8018b86:	f7fe fe1f 	bl	80177c8 <mem_cmp>
 8018b8a:	4603      	mov	r3, r0
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d014      	beq.n	8018bba <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018b90:	23ff      	movs	r3, #255	; 0xff
 8018b92:	757b      	strb	r3, [r7, #21]
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	f04f 32ff 	mov.w	r2, #4294967295
 8018b9a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8018b9c:	2100      	movs	r1, #0
 8018b9e:	6878      	ldr	r0, [r7, #4]
 8018ba0:	f7ff fc6d 	bl	801847e <dir_next>
 8018ba4:	4603      	mov	r3, r0
 8018ba6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8018ba8:	7dfb      	ldrb	r3, [r7, #23]
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	f43f af65 	beq.w	8018a7a <dir_find+0x34>
 8018bb0:	e004      	b.n	8018bbc <dir_find+0x176>
		if (res != FR_OK) break;
 8018bb2:	bf00      	nop
 8018bb4:	e002      	b.n	8018bbc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8018bb6:	bf00      	nop
 8018bb8:	e000      	b.n	8018bbc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8018bba:	bf00      	nop

	return res;
 8018bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8018bbe:	4618      	mov	r0, r3
 8018bc0:	3718      	adds	r7, #24
 8018bc2:	46bd      	mov	sp, r7
 8018bc4:	bd80      	pop	{r7, pc}
	...

08018bc8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8018bc8:	b580      	push	{r7, lr}
 8018bca:	b08c      	sub	sp, #48	; 0x30
 8018bcc:	af00      	add	r7, sp, #0
 8018bce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018bdc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8018be0:	2b00      	cmp	r3, #0
 8018be2:	d001      	beq.n	8018be8 <dir_register+0x20>
 8018be4:	2306      	movs	r3, #6
 8018be6:	e0e0      	b.n	8018daa <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8018be8:	2300      	movs	r3, #0
 8018bea:	627b      	str	r3, [r7, #36]	; 0x24
 8018bec:	e002      	b.n	8018bf4 <dir_register+0x2c>
 8018bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bf0:	3301      	adds	r3, #1
 8018bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8018bf4:	69fb      	ldr	r3, [r7, #28]
 8018bf6:	691a      	ldr	r2, [r3, #16]
 8018bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bfa:	005b      	lsls	r3, r3, #1
 8018bfc:	4413      	add	r3, r2
 8018bfe:	881b      	ldrh	r3, [r3, #0]
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	d1f4      	bne.n	8018bee <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8018c0a:	f107 030c 	add.w	r3, r7, #12
 8018c0e:	220c      	movs	r2, #12
 8018c10:	4618      	mov	r0, r3
 8018c12:	f7fe fd9d 	bl	8017750 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8018c16:	7dfb      	ldrb	r3, [r7, #23]
 8018c18:	f003 0301 	and.w	r3, r3, #1
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	d032      	beq.n	8018c86 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	2240      	movs	r2, #64	; 0x40
 8018c24:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8018c28:	2301      	movs	r3, #1
 8018c2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8018c2c:	e016      	b.n	8018c5c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8018c34:	69fb      	ldr	r3, [r7, #28]
 8018c36:	691a      	ldr	r2, [r3, #16]
 8018c38:	f107 010c 	add.w	r1, r7, #12
 8018c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c3e:	f7ff fe53 	bl	80188e8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8018c42:	6878      	ldr	r0, [r7, #4]
 8018c44:	f7ff feff 	bl	8018a46 <dir_find>
 8018c48:	4603      	mov	r3, r0
 8018c4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8018c4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018c52:	2b00      	cmp	r3, #0
 8018c54:	d106      	bne.n	8018c64 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8018c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c58:	3301      	adds	r3, #1
 8018c5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8018c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c5e:	2b63      	cmp	r3, #99	; 0x63
 8018c60:	d9e5      	bls.n	8018c2e <dir_register+0x66>
 8018c62:	e000      	b.n	8018c66 <dir_register+0x9e>
			if (res != FR_OK) break;
 8018c64:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8018c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c68:	2b64      	cmp	r3, #100	; 0x64
 8018c6a:	d101      	bne.n	8018c70 <dir_register+0xa8>
 8018c6c:	2307      	movs	r3, #7
 8018c6e:	e09c      	b.n	8018daa <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8018c70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018c74:	2b04      	cmp	r3, #4
 8018c76:	d002      	beq.n	8018c7e <dir_register+0xb6>
 8018c78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018c7c:	e095      	b.n	8018daa <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8018c7e:	7dfa      	ldrb	r2, [r7, #23]
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8018c86:	7dfb      	ldrb	r3, [r7, #23]
 8018c88:	f003 0302 	and.w	r3, r3, #2
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	d007      	beq.n	8018ca0 <dir_register+0xd8>
 8018c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c92:	330c      	adds	r3, #12
 8018c94:	4a47      	ldr	r2, [pc, #284]	; (8018db4 <dir_register+0x1ec>)
 8018c96:	fba2 2303 	umull	r2, r3, r2, r3
 8018c9a:	089b      	lsrs	r3, r3, #2
 8018c9c:	3301      	adds	r3, #1
 8018c9e:	e000      	b.n	8018ca2 <dir_register+0xda>
 8018ca0:	2301      	movs	r3, #1
 8018ca2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8018ca4:	6a39      	ldr	r1, [r7, #32]
 8018ca6:	6878      	ldr	r0, [r7, #4]
 8018ca8:	f7ff fcbf 	bl	801862a <dir_alloc>
 8018cac:	4603      	mov	r3, r0
 8018cae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8018cb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	d148      	bne.n	8018d4c <dir_register+0x184>
 8018cba:	6a3b      	ldr	r3, [r7, #32]
 8018cbc:	3b01      	subs	r3, #1
 8018cbe:	623b      	str	r3, [r7, #32]
 8018cc0:	6a3b      	ldr	r3, [r7, #32]
 8018cc2:	2b00      	cmp	r3, #0
 8018cc4:	d042      	beq.n	8018d4c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	695a      	ldr	r2, [r3, #20]
 8018cca:	6a3b      	ldr	r3, [r7, #32]
 8018ccc:	015b      	lsls	r3, r3, #5
 8018cce:	1ad3      	subs	r3, r2, r3
 8018cd0:	4619      	mov	r1, r3
 8018cd2:	6878      	ldr	r0, [r7, #4]
 8018cd4:	f7ff fb4a 	bl	801836c <dir_sdi>
 8018cd8:	4603      	mov	r3, r0
 8018cda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8018cde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	d132      	bne.n	8018d4c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	3324      	adds	r3, #36	; 0x24
 8018cea:	4618      	mov	r0, r3
 8018cec:	f7ff fe8a 	bl	8018a04 <sum_sfn>
 8018cf0:	4603      	mov	r3, r0
 8018cf2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	69db      	ldr	r3, [r3, #28]
 8018cf8:	4619      	mov	r1, r3
 8018cfa:	69f8      	ldr	r0, [r7, #28]
 8018cfc:	f7fe ff56 	bl	8017bac <move_window>
 8018d00:	4603      	mov	r3, r0
 8018d02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8018d06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d11d      	bne.n	8018d4a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8018d0e:	69fb      	ldr	r3, [r7, #28]
 8018d10:	6918      	ldr	r0, [r3, #16]
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	6a19      	ldr	r1, [r3, #32]
 8018d16:	6a3b      	ldr	r3, [r7, #32]
 8018d18:	b2da      	uxtb	r2, r3
 8018d1a:	7efb      	ldrb	r3, [r7, #27]
 8018d1c:	f7ff fd7c 	bl	8018818 <put_lfn>
				fs->wflag = 1;
 8018d20:	69fb      	ldr	r3, [r7, #28]
 8018d22:	2201      	movs	r2, #1
 8018d24:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8018d26:	2100      	movs	r1, #0
 8018d28:	6878      	ldr	r0, [r7, #4]
 8018d2a:	f7ff fba8 	bl	801847e <dir_next>
 8018d2e:	4603      	mov	r3, r0
 8018d30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8018d34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d107      	bne.n	8018d4c <dir_register+0x184>
 8018d3c:	6a3b      	ldr	r3, [r7, #32]
 8018d3e:	3b01      	subs	r3, #1
 8018d40:	623b      	str	r3, [r7, #32]
 8018d42:	6a3b      	ldr	r3, [r7, #32]
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	d1d5      	bne.n	8018cf4 <dir_register+0x12c>
 8018d48:	e000      	b.n	8018d4c <dir_register+0x184>
				if (res != FR_OK) break;
 8018d4a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8018d4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018d50:	2b00      	cmp	r3, #0
 8018d52:	d128      	bne.n	8018da6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	69db      	ldr	r3, [r3, #28]
 8018d58:	4619      	mov	r1, r3
 8018d5a:	69f8      	ldr	r0, [r7, #28]
 8018d5c:	f7fe ff26 	bl	8017bac <move_window>
 8018d60:	4603      	mov	r3, r0
 8018d62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8018d66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	d11b      	bne.n	8018da6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	6a1b      	ldr	r3, [r3, #32]
 8018d72:	2220      	movs	r2, #32
 8018d74:	2100      	movs	r1, #0
 8018d76:	4618      	mov	r0, r3
 8018d78:	f7fe fd0b 	bl	8017792 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	6a18      	ldr	r0, [r3, #32]
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	3324      	adds	r3, #36	; 0x24
 8018d84:	220b      	movs	r2, #11
 8018d86:	4619      	mov	r1, r3
 8018d88:	f7fe fce2 	bl	8017750 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	6a1b      	ldr	r3, [r3, #32]
 8018d96:	330c      	adds	r3, #12
 8018d98:	f002 0218 	and.w	r2, r2, #24
 8018d9c:	b2d2      	uxtb	r2, r2
 8018d9e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8018da0:	69fb      	ldr	r3, [r7, #28]
 8018da2:	2201      	movs	r2, #1
 8018da4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8018da6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8018daa:	4618      	mov	r0, r3
 8018dac:	3730      	adds	r7, #48	; 0x30
 8018dae:	46bd      	mov	sp, r7
 8018db0:	bd80      	pop	{r7, pc}
 8018db2:	bf00      	nop
 8018db4:	4ec4ec4f 	.word	0x4ec4ec4f

08018db8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8018db8:	b580      	push	{r7, lr}
 8018dba:	b08a      	sub	sp, #40	; 0x28
 8018dbc:	af00      	add	r7, sp, #0
 8018dbe:	6078      	str	r0, [r7, #4]
 8018dc0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8018dc2:	683b      	ldr	r3, [r7, #0]
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	613b      	str	r3, [r7, #16]
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	681b      	ldr	r3, [r3, #0]
 8018dcc:	691b      	ldr	r3, [r3, #16]
 8018dce:	60fb      	str	r3, [r7, #12]
 8018dd0:	2300      	movs	r3, #0
 8018dd2:	617b      	str	r3, [r7, #20]
 8018dd4:	697b      	ldr	r3, [r7, #20]
 8018dd6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8018dd8:	69bb      	ldr	r3, [r7, #24]
 8018dda:	1c5a      	adds	r2, r3, #1
 8018ddc:	61ba      	str	r2, [r7, #24]
 8018dde:	693a      	ldr	r2, [r7, #16]
 8018de0:	4413      	add	r3, r2
 8018de2:	781b      	ldrb	r3, [r3, #0]
 8018de4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8018de6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018de8:	2b1f      	cmp	r3, #31
 8018dea:	d940      	bls.n	8018e6e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8018dec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018dee:	2b2f      	cmp	r3, #47	; 0x2f
 8018df0:	d006      	beq.n	8018e00 <create_name+0x48>
 8018df2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018df4:	2b5c      	cmp	r3, #92	; 0x5c
 8018df6:	d110      	bne.n	8018e1a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8018df8:	e002      	b.n	8018e00 <create_name+0x48>
 8018dfa:	69bb      	ldr	r3, [r7, #24]
 8018dfc:	3301      	adds	r3, #1
 8018dfe:	61bb      	str	r3, [r7, #24]
 8018e00:	693a      	ldr	r2, [r7, #16]
 8018e02:	69bb      	ldr	r3, [r7, #24]
 8018e04:	4413      	add	r3, r2
 8018e06:	781b      	ldrb	r3, [r3, #0]
 8018e08:	2b2f      	cmp	r3, #47	; 0x2f
 8018e0a:	d0f6      	beq.n	8018dfa <create_name+0x42>
 8018e0c:	693a      	ldr	r2, [r7, #16]
 8018e0e:	69bb      	ldr	r3, [r7, #24]
 8018e10:	4413      	add	r3, r2
 8018e12:	781b      	ldrb	r3, [r3, #0]
 8018e14:	2b5c      	cmp	r3, #92	; 0x5c
 8018e16:	d0f0      	beq.n	8018dfa <create_name+0x42>
			break;
 8018e18:	e02a      	b.n	8018e70 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8018e1a:	697b      	ldr	r3, [r7, #20]
 8018e1c:	2bfe      	cmp	r3, #254	; 0xfe
 8018e1e:	d901      	bls.n	8018e24 <create_name+0x6c>
 8018e20:	2306      	movs	r3, #6
 8018e22:	e17d      	b.n	8019120 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8018e24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e26:	b2db      	uxtb	r3, r3
 8018e28:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8018e2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e2c:	2101      	movs	r1, #1
 8018e2e:	4618      	mov	r0, r3
 8018e30:	f001 fa8c 	bl	801a34c <ff_convert>
 8018e34:	4603      	mov	r3, r0
 8018e36:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8018e38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d101      	bne.n	8018e42 <create_name+0x8a>
 8018e3e:	2306      	movs	r3, #6
 8018e40:	e16e      	b.n	8019120 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8018e42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e44:	2b7f      	cmp	r3, #127	; 0x7f
 8018e46:	d809      	bhi.n	8018e5c <create_name+0xa4>
 8018e48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e4a:	4619      	mov	r1, r3
 8018e4c:	488d      	ldr	r0, [pc, #564]	; (8019084 <create_name+0x2cc>)
 8018e4e:	f7fe fce2 	bl	8017816 <chk_chr>
 8018e52:	4603      	mov	r3, r0
 8018e54:	2b00      	cmp	r3, #0
 8018e56:	d001      	beq.n	8018e5c <create_name+0xa4>
 8018e58:	2306      	movs	r3, #6
 8018e5a:	e161      	b.n	8019120 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8018e5c:	697b      	ldr	r3, [r7, #20]
 8018e5e:	1c5a      	adds	r2, r3, #1
 8018e60:	617a      	str	r2, [r7, #20]
 8018e62:	005b      	lsls	r3, r3, #1
 8018e64:	68fa      	ldr	r2, [r7, #12]
 8018e66:	4413      	add	r3, r2
 8018e68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018e6a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8018e6c:	e7b4      	b.n	8018dd8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8018e6e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8018e70:	693a      	ldr	r2, [r7, #16]
 8018e72:	69bb      	ldr	r3, [r7, #24]
 8018e74:	441a      	add	r2, r3
 8018e76:	683b      	ldr	r3, [r7, #0]
 8018e78:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8018e7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e7c:	2b1f      	cmp	r3, #31
 8018e7e:	d801      	bhi.n	8018e84 <create_name+0xcc>
 8018e80:	2304      	movs	r3, #4
 8018e82:	e000      	b.n	8018e86 <create_name+0xce>
 8018e84:	2300      	movs	r3, #0
 8018e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8018e8a:	e011      	b.n	8018eb0 <create_name+0xf8>
		w = lfn[di - 1];
 8018e8c:	697a      	ldr	r2, [r7, #20]
 8018e8e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018e92:	4413      	add	r3, r2
 8018e94:	005b      	lsls	r3, r3, #1
 8018e96:	68fa      	ldr	r2, [r7, #12]
 8018e98:	4413      	add	r3, r2
 8018e9a:	881b      	ldrh	r3, [r3, #0]
 8018e9c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8018e9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ea0:	2b20      	cmp	r3, #32
 8018ea2:	d002      	beq.n	8018eaa <create_name+0xf2>
 8018ea4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ea6:	2b2e      	cmp	r3, #46	; 0x2e
 8018ea8:	d106      	bne.n	8018eb8 <create_name+0x100>
		di--;
 8018eaa:	697b      	ldr	r3, [r7, #20]
 8018eac:	3b01      	subs	r3, #1
 8018eae:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8018eb0:	697b      	ldr	r3, [r7, #20]
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	d1ea      	bne.n	8018e8c <create_name+0xd4>
 8018eb6:	e000      	b.n	8018eba <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8018eb8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8018eba:	697b      	ldr	r3, [r7, #20]
 8018ebc:	005b      	lsls	r3, r3, #1
 8018ebe:	68fa      	ldr	r2, [r7, #12]
 8018ec0:	4413      	add	r3, r2
 8018ec2:	2200      	movs	r2, #0
 8018ec4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8018ec6:	697b      	ldr	r3, [r7, #20]
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d101      	bne.n	8018ed0 <create_name+0x118>
 8018ecc:	2306      	movs	r3, #6
 8018ece:	e127      	b.n	8019120 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	3324      	adds	r3, #36	; 0x24
 8018ed4:	220b      	movs	r2, #11
 8018ed6:	2120      	movs	r1, #32
 8018ed8:	4618      	mov	r0, r3
 8018eda:	f7fe fc5a 	bl	8017792 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8018ede:	2300      	movs	r3, #0
 8018ee0:	61bb      	str	r3, [r7, #24]
 8018ee2:	e002      	b.n	8018eea <create_name+0x132>
 8018ee4:	69bb      	ldr	r3, [r7, #24]
 8018ee6:	3301      	adds	r3, #1
 8018ee8:	61bb      	str	r3, [r7, #24]
 8018eea:	69bb      	ldr	r3, [r7, #24]
 8018eec:	005b      	lsls	r3, r3, #1
 8018eee:	68fa      	ldr	r2, [r7, #12]
 8018ef0:	4413      	add	r3, r2
 8018ef2:	881b      	ldrh	r3, [r3, #0]
 8018ef4:	2b20      	cmp	r3, #32
 8018ef6:	d0f5      	beq.n	8018ee4 <create_name+0x12c>
 8018ef8:	69bb      	ldr	r3, [r7, #24]
 8018efa:	005b      	lsls	r3, r3, #1
 8018efc:	68fa      	ldr	r2, [r7, #12]
 8018efe:	4413      	add	r3, r2
 8018f00:	881b      	ldrh	r3, [r3, #0]
 8018f02:	2b2e      	cmp	r3, #46	; 0x2e
 8018f04:	d0ee      	beq.n	8018ee4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8018f06:	69bb      	ldr	r3, [r7, #24]
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d009      	beq.n	8018f20 <create_name+0x168>
 8018f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f10:	f043 0303 	orr.w	r3, r3, #3
 8018f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8018f18:	e002      	b.n	8018f20 <create_name+0x168>
 8018f1a:	697b      	ldr	r3, [r7, #20]
 8018f1c:	3b01      	subs	r3, #1
 8018f1e:	617b      	str	r3, [r7, #20]
 8018f20:	697b      	ldr	r3, [r7, #20]
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d009      	beq.n	8018f3a <create_name+0x182>
 8018f26:	697a      	ldr	r2, [r7, #20]
 8018f28:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018f2c:	4413      	add	r3, r2
 8018f2e:	005b      	lsls	r3, r3, #1
 8018f30:	68fa      	ldr	r2, [r7, #12]
 8018f32:	4413      	add	r3, r2
 8018f34:	881b      	ldrh	r3, [r3, #0]
 8018f36:	2b2e      	cmp	r3, #46	; 0x2e
 8018f38:	d1ef      	bne.n	8018f1a <create_name+0x162>

	i = b = 0; ni = 8;
 8018f3a:	2300      	movs	r3, #0
 8018f3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018f40:	2300      	movs	r3, #0
 8018f42:	623b      	str	r3, [r7, #32]
 8018f44:	2308      	movs	r3, #8
 8018f46:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8018f48:	69bb      	ldr	r3, [r7, #24]
 8018f4a:	1c5a      	adds	r2, r3, #1
 8018f4c:	61ba      	str	r2, [r7, #24]
 8018f4e:	005b      	lsls	r3, r3, #1
 8018f50:	68fa      	ldr	r2, [r7, #12]
 8018f52:	4413      	add	r3, r2
 8018f54:	881b      	ldrh	r3, [r3, #0]
 8018f56:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8018f58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	f000 8090 	beq.w	8019080 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8018f60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f62:	2b20      	cmp	r3, #32
 8018f64:	d006      	beq.n	8018f74 <create_name+0x1bc>
 8018f66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f68:	2b2e      	cmp	r3, #46	; 0x2e
 8018f6a:	d10a      	bne.n	8018f82 <create_name+0x1ca>
 8018f6c:	69ba      	ldr	r2, [r7, #24]
 8018f6e:	697b      	ldr	r3, [r7, #20]
 8018f70:	429a      	cmp	r2, r3
 8018f72:	d006      	beq.n	8018f82 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8018f74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f78:	f043 0303 	orr.w	r3, r3, #3
 8018f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018f80:	e07d      	b.n	801907e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8018f82:	6a3a      	ldr	r2, [r7, #32]
 8018f84:	69fb      	ldr	r3, [r7, #28]
 8018f86:	429a      	cmp	r2, r3
 8018f88:	d203      	bcs.n	8018f92 <create_name+0x1da>
 8018f8a:	69ba      	ldr	r2, [r7, #24]
 8018f8c:	697b      	ldr	r3, [r7, #20]
 8018f8e:	429a      	cmp	r2, r3
 8018f90:	d123      	bne.n	8018fda <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8018f92:	69fb      	ldr	r3, [r7, #28]
 8018f94:	2b0b      	cmp	r3, #11
 8018f96:	d106      	bne.n	8018fa6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8018f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f9c:	f043 0303 	orr.w	r3, r3, #3
 8018fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018fa4:	e075      	b.n	8019092 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8018fa6:	69ba      	ldr	r2, [r7, #24]
 8018fa8:	697b      	ldr	r3, [r7, #20]
 8018faa:	429a      	cmp	r2, r3
 8018fac:	d005      	beq.n	8018fba <create_name+0x202>
 8018fae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018fb2:	f043 0303 	orr.w	r3, r3, #3
 8018fb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8018fba:	69ba      	ldr	r2, [r7, #24]
 8018fbc:	697b      	ldr	r3, [r7, #20]
 8018fbe:	429a      	cmp	r2, r3
 8018fc0:	d866      	bhi.n	8019090 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8018fc2:	697b      	ldr	r3, [r7, #20]
 8018fc4:	61bb      	str	r3, [r7, #24]
 8018fc6:	2308      	movs	r3, #8
 8018fc8:	623b      	str	r3, [r7, #32]
 8018fca:	230b      	movs	r3, #11
 8018fcc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8018fce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018fd2:	009b      	lsls	r3, r3, #2
 8018fd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018fd8:	e051      	b.n	801907e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8018fda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018fdc:	2b7f      	cmp	r3, #127	; 0x7f
 8018fde:	d914      	bls.n	801900a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8018fe0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018fe2:	2100      	movs	r1, #0
 8018fe4:	4618      	mov	r0, r3
 8018fe6:	f001 f9b1 	bl	801a34c <ff_convert>
 8018fea:	4603      	mov	r3, r0
 8018fec:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8018fee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	d004      	beq.n	8018ffe <create_name+0x246>
 8018ff4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ff6:	3b80      	subs	r3, #128	; 0x80
 8018ff8:	4a23      	ldr	r2, [pc, #140]	; (8019088 <create_name+0x2d0>)
 8018ffa:	5cd3      	ldrb	r3, [r2, r3]
 8018ffc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8018ffe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019002:	f043 0302 	orr.w	r3, r3, #2
 8019006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801900a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801900c:	2b00      	cmp	r3, #0
 801900e:	d007      	beq.n	8019020 <create_name+0x268>
 8019010:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019012:	4619      	mov	r1, r3
 8019014:	481d      	ldr	r0, [pc, #116]	; (801908c <create_name+0x2d4>)
 8019016:	f7fe fbfe 	bl	8017816 <chk_chr>
 801901a:	4603      	mov	r3, r0
 801901c:	2b00      	cmp	r3, #0
 801901e:	d008      	beq.n	8019032 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8019020:	235f      	movs	r3, #95	; 0x5f
 8019022:	84bb      	strh	r3, [r7, #36]	; 0x24
 8019024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019028:	f043 0303 	orr.w	r3, r3, #3
 801902c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019030:	e01b      	b.n	801906a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8019032:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019034:	2b40      	cmp	r3, #64	; 0x40
 8019036:	d909      	bls.n	801904c <create_name+0x294>
 8019038:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801903a:	2b5a      	cmp	r3, #90	; 0x5a
 801903c:	d806      	bhi.n	801904c <create_name+0x294>
					b |= 2;
 801903e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019042:	f043 0302 	orr.w	r3, r3, #2
 8019046:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801904a:	e00e      	b.n	801906a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801904c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801904e:	2b60      	cmp	r3, #96	; 0x60
 8019050:	d90b      	bls.n	801906a <create_name+0x2b2>
 8019052:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019054:	2b7a      	cmp	r3, #122	; 0x7a
 8019056:	d808      	bhi.n	801906a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8019058:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801905c:	f043 0301 	orr.w	r3, r3, #1
 8019060:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8019064:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019066:	3b20      	subs	r3, #32
 8019068:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801906a:	6a3b      	ldr	r3, [r7, #32]
 801906c:	1c5a      	adds	r2, r3, #1
 801906e:	623a      	str	r2, [r7, #32]
 8019070:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019072:	b2d1      	uxtb	r1, r2
 8019074:	687a      	ldr	r2, [r7, #4]
 8019076:	4413      	add	r3, r2
 8019078:	460a      	mov	r2, r1
 801907a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 801907e:	e763      	b.n	8018f48 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8019080:	bf00      	nop
 8019082:	e006      	b.n	8019092 <create_name+0x2da>
 8019084:	0801ff40 	.word	0x0801ff40
 8019088:	08020094 	.word	0x08020094
 801908c:	0801ff4c 	.word	0x0801ff4c
			if (si > di) break;			/* No extension */
 8019090:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019098:	2be5      	cmp	r3, #229	; 0xe5
 801909a:	d103      	bne.n	80190a4 <create_name+0x2ec>
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	2205      	movs	r2, #5
 80190a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80190a4:	69fb      	ldr	r3, [r7, #28]
 80190a6:	2b08      	cmp	r3, #8
 80190a8:	d104      	bne.n	80190b4 <create_name+0x2fc>
 80190aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80190ae:	009b      	lsls	r3, r3, #2
 80190b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80190b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80190b8:	f003 030c 	and.w	r3, r3, #12
 80190bc:	2b0c      	cmp	r3, #12
 80190be:	d005      	beq.n	80190cc <create_name+0x314>
 80190c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80190c4:	f003 0303 	and.w	r3, r3, #3
 80190c8:	2b03      	cmp	r3, #3
 80190ca:	d105      	bne.n	80190d8 <create_name+0x320>
 80190cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80190d0:	f043 0302 	orr.w	r3, r3, #2
 80190d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80190d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80190dc:	f003 0302 	and.w	r3, r3, #2
 80190e0:	2b00      	cmp	r3, #0
 80190e2:	d117      	bne.n	8019114 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80190e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80190e8:	f003 0303 	and.w	r3, r3, #3
 80190ec:	2b01      	cmp	r3, #1
 80190ee:	d105      	bne.n	80190fc <create_name+0x344>
 80190f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80190f4:	f043 0310 	orr.w	r3, r3, #16
 80190f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80190fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019100:	f003 030c 	and.w	r3, r3, #12
 8019104:	2b04      	cmp	r3, #4
 8019106:	d105      	bne.n	8019114 <create_name+0x35c>
 8019108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801910c:	f043 0308 	orr.w	r3, r3, #8
 8019110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801911a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 801911e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8019120:	4618      	mov	r0, r3
 8019122:	3728      	adds	r7, #40	; 0x28
 8019124:	46bd      	mov	sp, r7
 8019126:	bd80      	pop	{r7, pc}

08019128 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8019128:	b580      	push	{r7, lr}
 801912a:	b086      	sub	sp, #24
 801912c:	af00      	add	r7, sp, #0
 801912e:	6078      	str	r0, [r7, #4]
 8019130:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8019136:	693b      	ldr	r3, [r7, #16]
 8019138:	681b      	ldr	r3, [r3, #0]
 801913a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801913c:	e002      	b.n	8019144 <follow_path+0x1c>
 801913e:	683b      	ldr	r3, [r7, #0]
 8019140:	3301      	adds	r3, #1
 8019142:	603b      	str	r3, [r7, #0]
 8019144:	683b      	ldr	r3, [r7, #0]
 8019146:	781b      	ldrb	r3, [r3, #0]
 8019148:	2b2f      	cmp	r3, #47	; 0x2f
 801914a:	d0f8      	beq.n	801913e <follow_path+0x16>
 801914c:	683b      	ldr	r3, [r7, #0]
 801914e:	781b      	ldrb	r3, [r3, #0]
 8019150:	2b5c      	cmp	r3, #92	; 0x5c
 8019152:	d0f4      	beq.n	801913e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8019154:	693b      	ldr	r3, [r7, #16]
 8019156:	2200      	movs	r2, #0
 8019158:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801915a:	683b      	ldr	r3, [r7, #0]
 801915c:	781b      	ldrb	r3, [r3, #0]
 801915e:	2b1f      	cmp	r3, #31
 8019160:	d80a      	bhi.n	8019178 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8019162:	687b      	ldr	r3, [r7, #4]
 8019164:	2280      	movs	r2, #128	; 0x80
 8019166:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801916a:	2100      	movs	r1, #0
 801916c:	6878      	ldr	r0, [r7, #4]
 801916e:	f7ff f8fd 	bl	801836c <dir_sdi>
 8019172:	4603      	mov	r3, r0
 8019174:	75fb      	strb	r3, [r7, #23]
 8019176:	e048      	b.n	801920a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8019178:	463b      	mov	r3, r7
 801917a:	4619      	mov	r1, r3
 801917c:	6878      	ldr	r0, [r7, #4]
 801917e:	f7ff fe1b 	bl	8018db8 <create_name>
 8019182:	4603      	mov	r3, r0
 8019184:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8019186:	7dfb      	ldrb	r3, [r7, #23]
 8019188:	2b00      	cmp	r3, #0
 801918a:	d139      	bne.n	8019200 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801918c:	6878      	ldr	r0, [r7, #4]
 801918e:	f7ff fc5a 	bl	8018a46 <dir_find>
 8019192:	4603      	mov	r3, r0
 8019194:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801919c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801919e:	7dfb      	ldrb	r3, [r7, #23]
 80191a0:	2b00      	cmp	r3, #0
 80191a2:	d00a      	beq.n	80191ba <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80191a4:	7dfb      	ldrb	r3, [r7, #23]
 80191a6:	2b04      	cmp	r3, #4
 80191a8:	d12c      	bne.n	8019204 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80191aa:	7afb      	ldrb	r3, [r7, #11]
 80191ac:	f003 0304 	and.w	r3, r3, #4
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	d127      	bne.n	8019204 <follow_path+0xdc>
 80191b4:	2305      	movs	r3, #5
 80191b6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80191b8:	e024      	b.n	8019204 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80191ba:	7afb      	ldrb	r3, [r7, #11]
 80191bc:	f003 0304 	and.w	r3, r3, #4
 80191c0:	2b00      	cmp	r3, #0
 80191c2:	d121      	bne.n	8019208 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80191c4:	693b      	ldr	r3, [r7, #16]
 80191c6:	799b      	ldrb	r3, [r3, #6]
 80191c8:	f003 0310 	and.w	r3, r3, #16
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d102      	bne.n	80191d6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80191d0:	2305      	movs	r3, #5
 80191d2:	75fb      	strb	r3, [r7, #23]
 80191d4:	e019      	b.n	801920a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80191d6:	68fb      	ldr	r3, [r7, #12]
 80191d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80191dc:	687b      	ldr	r3, [r7, #4]
 80191de:	695b      	ldr	r3, [r3, #20]
 80191e0:	68fa      	ldr	r2, [r7, #12]
 80191e2:	8992      	ldrh	r2, [r2, #12]
 80191e4:	fbb3 f0f2 	udiv	r0, r3, r2
 80191e8:	fb00 f202 	mul.w	r2, r0, r2
 80191ec:	1a9b      	subs	r3, r3, r2
 80191ee:	440b      	add	r3, r1
 80191f0:	4619      	mov	r1, r3
 80191f2:	68f8      	ldr	r0, [r7, #12]
 80191f4:	f7ff fa60 	bl	80186b8 <ld_clust>
 80191f8:	4602      	mov	r2, r0
 80191fa:	693b      	ldr	r3, [r7, #16]
 80191fc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80191fe:	e7bb      	b.n	8019178 <follow_path+0x50>
			if (res != FR_OK) break;
 8019200:	bf00      	nop
 8019202:	e002      	b.n	801920a <follow_path+0xe2>
				break;
 8019204:	bf00      	nop
 8019206:	e000      	b.n	801920a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8019208:	bf00      	nop
			}
		}
	}

	return res;
 801920a:	7dfb      	ldrb	r3, [r7, #23]
}
 801920c:	4618      	mov	r0, r3
 801920e:	3718      	adds	r7, #24
 8019210:	46bd      	mov	sp, r7
 8019212:	bd80      	pop	{r7, pc}

08019214 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8019214:	b480      	push	{r7}
 8019216:	b087      	sub	sp, #28
 8019218:	af00      	add	r7, sp, #0
 801921a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801921c:	f04f 33ff 	mov.w	r3, #4294967295
 8019220:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8019222:	687b      	ldr	r3, [r7, #4]
 8019224:	681b      	ldr	r3, [r3, #0]
 8019226:	2b00      	cmp	r3, #0
 8019228:	d031      	beq.n	801928e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	681b      	ldr	r3, [r3, #0]
 801922e:	617b      	str	r3, [r7, #20]
 8019230:	e002      	b.n	8019238 <get_ldnumber+0x24>
 8019232:	697b      	ldr	r3, [r7, #20]
 8019234:	3301      	adds	r3, #1
 8019236:	617b      	str	r3, [r7, #20]
 8019238:	697b      	ldr	r3, [r7, #20]
 801923a:	781b      	ldrb	r3, [r3, #0]
 801923c:	2b1f      	cmp	r3, #31
 801923e:	d903      	bls.n	8019248 <get_ldnumber+0x34>
 8019240:	697b      	ldr	r3, [r7, #20]
 8019242:	781b      	ldrb	r3, [r3, #0]
 8019244:	2b3a      	cmp	r3, #58	; 0x3a
 8019246:	d1f4      	bne.n	8019232 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8019248:	697b      	ldr	r3, [r7, #20]
 801924a:	781b      	ldrb	r3, [r3, #0]
 801924c:	2b3a      	cmp	r3, #58	; 0x3a
 801924e:	d11c      	bne.n	801928a <get_ldnumber+0x76>
			tp = *path;
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	681b      	ldr	r3, [r3, #0]
 8019254:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8019256:	68fb      	ldr	r3, [r7, #12]
 8019258:	1c5a      	adds	r2, r3, #1
 801925a:	60fa      	str	r2, [r7, #12]
 801925c:	781b      	ldrb	r3, [r3, #0]
 801925e:	3b30      	subs	r3, #48	; 0x30
 8019260:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8019262:	68bb      	ldr	r3, [r7, #8]
 8019264:	2b09      	cmp	r3, #9
 8019266:	d80e      	bhi.n	8019286 <get_ldnumber+0x72>
 8019268:	68fa      	ldr	r2, [r7, #12]
 801926a:	697b      	ldr	r3, [r7, #20]
 801926c:	429a      	cmp	r2, r3
 801926e:	d10a      	bne.n	8019286 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8019270:	68bb      	ldr	r3, [r7, #8]
 8019272:	2b00      	cmp	r3, #0
 8019274:	d107      	bne.n	8019286 <get_ldnumber+0x72>
					vol = (int)i;
 8019276:	68bb      	ldr	r3, [r7, #8]
 8019278:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801927a:	697b      	ldr	r3, [r7, #20]
 801927c:	3301      	adds	r3, #1
 801927e:	617b      	str	r3, [r7, #20]
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	697a      	ldr	r2, [r7, #20]
 8019284:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8019286:	693b      	ldr	r3, [r7, #16]
 8019288:	e002      	b.n	8019290 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801928a:	2300      	movs	r3, #0
 801928c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801928e:	693b      	ldr	r3, [r7, #16]
}
 8019290:	4618      	mov	r0, r3
 8019292:	371c      	adds	r7, #28
 8019294:	46bd      	mov	sp, r7
 8019296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801929a:	4770      	bx	lr

0801929c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801929c:	b580      	push	{r7, lr}
 801929e:	b082      	sub	sp, #8
 80192a0:	af00      	add	r7, sp, #0
 80192a2:	6078      	str	r0, [r7, #4]
 80192a4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	2200      	movs	r2, #0
 80192aa:	70da      	strb	r2, [r3, #3]
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	f04f 32ff 	mov.w	r2, #4294967295
 80192b2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80192b4:	6839      	ldr	r1, [r7, #0]
 80192b6:	6878      	ldr	r0, [r7, #4]
 80192b8:	f7fe fc78 	bl	8017bac <move_window>
 80192bc:	4603      	mov	r3, r0
 80192be:	2b00      	cmp	r3, #0
 80192c0:	d001      	beq.n	80192c6 <check_fs+0x2a>
 80192c2:	2304      	movs	r3, #4
 80192c4:	e038      	b.n	8019338 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80192c6:	687b      	ldr	r3, [r7, #4]
 80192c8:	3338      	adds	r3, #56	; 0x38
 80192ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80192ce:	4618      	mov	r0, r3
 80192d0:	f7fe f9bc 	bl	801764c <ld_word>
 80192d4:	4603      	mov	r3, r0
 80192d6:	461a      	mov	r2, r3
 80192d8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80192dc:	429a      	cmp	r2, r3
 80192de:	d001      	beq.n	80192e4 <check_fs+0x48>
 80192e0:	2303      	movs	r3, #3
 80192e2:	e029      	b.n	8019338 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80192ea:	2be9      	cmp	r3, #233	; 0xe9
 80192ec:	d009      	beq.n	8019302 <check_fs+0x66>
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80192f4:	2beb      	cmp	r3, #235	; 0xeb
 80192f6:	d11e      	bne.n	8019336 <check_fs+0x9a>
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80192fe:	2b90      	cmp	r3, #144	; 0x90
 8019300:	d119      	bne.n	8019336 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	3338      	adds	r3, #56	; 0x38
 8019306:	3336      	adds	r3, #54	; 0x36
 8019308:	4618      	mov	r0, r3
 801930a:	f7fe f9b7 	bl	801767c <ld_dword>
 801930e:	4603      	mov	r3, r0
 8019310:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8019314:	4a0a      	ldr	r2, [pc, #40]	; (8019340 <check_fs+0xa4>)
 8019316:	4293      	cmp	r3, r2
 8019318:	d101      	bne.n	801931e <check_fs+0x82>
 801931a:	2300      	movs	r3, #0
 801931c:	e00c      	b.n	8019338 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	3338      	adds	r3, #56	; 0x38
 8019322:	3352      	adds	r3, #82	; 0x52
 8019324:	4618      	mov	r0, r3
 8019326:	f7fe f9a9 	bl	801767c <ld_dword>
 801932a:	4603      	mov	r3, r0
 801932c:	4a05      	ldr	r2, [pc, #20]	; (8019344 <check_fs+0xa8>)
 801932e:	4293      	cmp	r3, r2
 8019330:	d101      	bne.n	8019336 <check_fs+0x9a>
 8019332:	2300      	movs	r3, #0
 8019334:	e000      	b.n	8019338 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8019336:	2302      	movs	r3, #2
}
 8019338:	4618      	mov	r0, r3
 801933a:	3708      	adds	r7, #8
 801933c:	46bd      	mov	sp, r7
 801933e:	bd80      	pop	{r7, pc}
 8019340:	00544146 	.word	0x00544146
 8019344:	33544146 	.word	0x33544146

08019348 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8019348:	b580      	push	{r7, lr}
 801934a:	b096      	sub	sp, #88	; 0x58
 801934c:	af00      	add	r7, sp, #0
 801934e:	60f8      	str	r0, [r7, #12]
 8019350:	60b9      	str	r1, [r7, #8]
 8019352:	4613      	mov	r3, r2
 8019354:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8019356:	68bb      	ldr	r3, [r7, #8]
 8019358:	2200      	movs	r2, #0
 801935a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801935c:	68f8      	ldr	r0, [r7, #12]
 801935e:	f7ff ff59 	bl	8019214 <get_ldnumber>
 8019362:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8019364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019366:	2b00      	cmp	r3, #0
 8019368:	da01      	bge.n	801936e <find_volume+0x26>
 801936a:	230b      	movs	r3, #11
 801936c:	e265      	b.n	801983a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801936e:	4a9f      	ldr	r2, [pc, #636]	; (80195ec <find_volume+0x2a4>)
 8019370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019376:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8019378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801937a:	2b00      	cmp	r3, #0
 801937c:	d101      	bne.n	8019382 <find_volume+0x3a>
 801937e:	230c      	movs	r3, #12
 8019380:	e25b      	b.n	801983a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8019382:	68bb      	ldr	r3, [r7, #8]
 8019384:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019386:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8019388:	79fb      	ldrb	r3, [r7, #7]
 801938a:	f023 0301 	bic.w	r3, r3, #1
 801938e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8019390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019392:	781b      	ldrb	r3, [r3, #0]
 8019394:	2b00      	cmp	r3, #0
 8019396:	d01a      	beq.n	80193ce <find_volume+0x86>
		stat = disk_status(fs->drv);
 8019398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801939a:	785b      	ldrb	r3, [r3, #1]
 801939c:	4618      	mov	r0, r3
 801939e:	f7fe f8b7 	bl	8017510 <disk_status>
 80193a2:	4603      	mov	r3, r0
 80193a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80193a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80193ac:	f003 0301 	and.w	r3, r3, #1
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	d10c      	bne.n	80193ce <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80193b4:	79fb      	ldrb	r3, [r7, #7]
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	d007      	beq.n	80193ca <find_volume+0x82>
 80193ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80193be:	f003 0304 	and.w	r3, r3, #4
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d001      	beq.n	80193ca <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80193c6:	230a      	movs	r3, #10
 80193c8:	e237      	b.n	801983a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80193ca:	2300      	movs	r3, #0
 80193cc:	e235      	b.n	801983a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80193ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193d0:	2200      	movs	r2, #0
 80193d2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80193d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80193d6:	b2da      	uxtb	r2, r3
 80193d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193da:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80193dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193de:	785b      	ldrb	r3, [r3, #1]
 80193e0:	4618      	mov	r0, r3
 80193e2:	f7fe f8af 	bl	8017544 <disk_initialize>
 80193e6:	4603      	mov	r3, r0
 80193e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80193ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80193f0:	f003 0301 	and.w	r3, r3, #1
 80193f4:	2b00      	cmp	r3, #0
 80193f6:	d001      	beq.n	80193fc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80193f8:	2303      	movs	r3, #3
 80193fa:	e21e      	b.n	801983a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80193fc:	79fb      	ldrb	r3, [r7, #7]
 80193fe:	2b00      	cmp	r3, #0
 8019400:	d007      	beq.n	8019412 <find_volume+0xca>
 8019402:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019406:	f003 0304 	and.w	r3, r3, #4
 801940a:	2b00      	cmp	r3, #0
 801940c:	d001      	beq.n	8019412 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801940e:	230a      	movs	r3, #10
 8019410:	e213      	b.n	801983a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8019412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019414:	7858      	ldrb	r0, [r3, #1]
 8019416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019418:	330c      	adds	r3, #12
 801941a:	461a      	mov	r2, r3
 801941c:	2102      	movs	r1, #2
 801941e:	f7fe f8f7 	bl	8017610 <disk_ioctl>
 8019422:	4603      	mov	r3, r0
 8019424:	2b00      	cmp	r3, #0
 8019426:	d001      	beq.n	801942c <find_volume+0xe4>
 8019428:	2301      	movs	r3, #1
 801942a:	e206      	b.n	801983a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801942c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801942e:	899b      	ldrh	r3, [r3, #12]
 8019430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8019434:	d80d      	bhi.n	8019452 <find_volume+0x10a>
 8019436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019438:	899b      	ldrh	r3, [r3, #12]
 801943a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801943e:	d308      	bcc.n	8019452 <find_volume+0x10a>
 8019440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019442:	899b      	ldrh	r3, [r3, #12]
 8019444:	461a      	mov	r2, r3
 8019446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019448:	899b      	ldrh	r3, [r3, #12]
 801944a:	3b01      	subs	r3, #1
 801944c:	4013      	ands	r3, r2
 801944e:	2b00      	cmp	r3, #0
 8019450:	d001      	beq.n	8019456 <find_volume+0x10e>
 8019452:	2301      	movs	r3, #1
 8019454:	e1f1      	b.n	801983a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8019456:	2300      	movs	r3, #0
 8019458:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801945a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801945c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801945e:	f7ff ff1d 	bl	801929c <check_fs>
 8019462:	4603      	mov	r3, r0
 8019464:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8019468:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801946c:	2b02      	cmp	r3, #2
 801946e:	d149      	bne.n	8019504 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8019470:	2300      	movs	r3, #0
 8019472:	643b      	str	r3, [r7, #64]	; 0x40
 8019474:	e01e      	b.n	80194b4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8019476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019478:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801947c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801947e:	011b      	lsls	r3, r3, #4
 8019480:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8019484:	4413      	add	r3, r2
 8019486:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8019488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801948a:	3304      	adds	r3, #4
 801948c:	781b      	ldrb	r3, [r3, #0]
 801948e:	2b00      	cmp	r3, #0
 8019490:	d006      	beq.n	80194a0 <find_volume+0x158>
 8019492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019494:	3308      	adds	r3, #8
 8019496:	4618      	mov	r0, r3
 8019498:	f7fe f8f0 	bl	801767c <ld_dword>
 801949c:	4602      	mov	r2, r0
 801949e:	e000      	b.n	80194a2 <find_volume+0x15a>
 80194a0:	2200      	movs	r2, #0
 80194a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80194a4:	009b      	lsls	r3, r3, #2
 80194a6:	3358      	adds	r3, #88	; 0x58
 80194a8:	443b      	add	r3, r7
 80194aa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80194ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80194b0:	3301      	adds	r3, #1
 80194b2:	643b      	str	r3, [r7, #64]	; 0x40
 80194b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80194b6:	2b03      	cmp	r3, #3
 80194b8:	d9dd      	bls.n	8019476 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80194ba:	2300      	movs	r3, #0
 80194bc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80194be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	d002      	beq.n	80194ca <find_volume+0x182>
 80194c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80194c6:	3b01      	subs	r3, #1
 80194c8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80194ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80194cc:	009b      	lsls	r3, r3, #2
 80194ce:	3358      	adds	r3, #88	; 0x58
 80194d0:	443b      	add	r3, r7
 80194d2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80194d6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80194d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80194da:	2b00      	cmp	r3, #0
 80194dc:	d005      	beq.n	80194ea <find_volume+0x1a2>
 80194de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80194e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80194e2:	f7ff fedb 	bl	801929c <check_fs>
 80194e6:	4603      	mov	r3, r0
 80194e8:	e000      	b.n	80194ec <find_volume+0x1a4>
 80194ea:	2303      	movs	r3, #3
 80194ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80194f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80194f4:	2b01      	cmp	r3, #1
 80194f6:	d905      	bls.n	8019504 <find_volume+0x1bc>
 80194f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80194fa:	3301      	adds	r3, #1
 80194fc:	643b      	str	r3, [r7, #64]	; 0x40
 80194fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019500:	2b03      	cmp	r3, #3
 8019502:	d9e2      	bls.n	80194ca <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8019504:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019508:	2b04      	cmp	r3, #4
 801950a:	d101      	bne.n	8019510 <find_volume+0x1c8>
 801950c:	2301      	movs	r3, #1
 801950e:	e194      	b.n	801983a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8019510:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019514:	2b01      	cmp	r3, #1
 8019516:	d901      	bls.n	801951c <find_volume+0x1d4>
 8019518:	230d      	movs	r3, #13
 801951a:	e18e      	b.n	801983a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801951c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801951e:	3338      	adds	r3, #56	; 0x38
 8019520:	330b      	adds	r3, #11
 8019522:	4618      	mov	r0, r3
 8019524:	f7fe f892 	bl	801764c <ld_word>
 8019528:	4603      	mov	r3, r0
 801952a:	461a      	mov	r2, r3
 801952c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801952e:	899b      	ldrh	r3, [r3, #12]
 8019530:	429a      	cmp	r2, r3
 8019532:	d001      	beq.n	8019538 <find_volume+0x1f0>
 8019534:	230d      	movs	r3, #13
 8019536:	e180      	b.n	801983a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8019538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801953a:	3338      	adds	r3, #56	; 0x38
 801953c:	3316      	adds	r3, #22
 801953e:	4618      	mov	r0, r3
 8019540:	f7fe f884 	bl	801764c <ld_word>
 8019544:	4603      	mov	r3, r0
 8019546:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8019548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801954a:	2b00      	cmp	r3, #0
 801954c:	d106      	bne.n	801955c <find_volume+0x214>
 801954e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019550:	3338      	adds	r3, #56	; 0x38
 8019552:	3324      	adds	r3, #36	; 0x24
 8019554:	4618      	mov	r0, r3
 8019556:	f7fe f891 	bl	801767c <ld_dword>
 801955a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801955c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801955e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019560:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8019562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019564:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8019568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801956a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801956c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801956e:	789b      	ldrb	r3, [r3, #2]
 8019570:	2b01      	cmp	r3, #1
 8019572:	d005      	beq.n	8019580 <find_volume+0x238>
 8019574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019576:	789b      	ldrb	r3, [r3, #2]
 8019578:	2b02      	cmp	r3, #2
 801957a:	d001      	beq.n	8019580 <find_volume+0x238>
 801957c:	230d      	movs	r3, #13
 801957e:	e15c      	b.n	801983a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8019580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019582:	789b      	ldrb	r3, [r3, #2]
 8019584:	461a      	mov	r2, r3
 8019586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019588:	fb02 f303 	mul.w	r3, r2, r3
 801958c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801958e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019590:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019594:	b29a      	uxth	r2, r3
 8019596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019598:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801959a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801959c:	895b      	ldrh	r3, [r3, #10]
 801959e:	2b00      	cmp	r3, #0
 80195a0:	d008      	beq.n	80195b4 <find_volume+0x26c>
 80195a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195a4:	895b      	ldrh	r3, [r3, #10]
 80195a6:	461a      	mov	r2, r3
 80195a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195aa:	895b      	ldrh	r3, [r3, #10]
 80195ac:	3b01      	subs	r3, #1
 80195ae:	4013      	ands	r3, r2
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	d001      	beq.n	80195b8 <find_volume+0x270>
 80195b4:	230d      	movs	r3, #13
 80195b6:	e140      	b.n	801983a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80195b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195ba:	3338      	adds	r3, #56	; 0x38
 80195bc:	3311      	adds	r3, #17
 80195be:	4618      	mov	r0, r3
 80195c0:	f7fe f844 	bl	801764c <ld_word>
 80195c4:	4603      	mov	r3, r0
 80195c6:	461a      	mov	r2, r3
 80195c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195ca:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80195cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195ce:	891b      	ldrh	r3, [r3, #8]
 80195d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80195d2:	8992      	ldrh	r2, [r2, #12]
 80195d4:	0952      	lsrs	r2, r2, #5
 80195d6:	b292      	uxth	r2, r2
 80195d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80195dc:	fb01 f202 	mul.w	r2, r1, r2
 80195e0:	1a9b      	subs	r3, r3, r2
 80195e2:	b29b      	uxth	r3, r3
 80195e4:	2b00      	cmp	r3, #0
 80195e6:	d003      	beq.n	80195f0 <find_volume+0x2a8>
 80195e8:	230d      	movs	r3, #13
 80195ea:	e126      	b.n	801983a <find_volume+0x4f2>
 80195ec:	240016a8 	.word	0x240016a8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80195f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195f2:	3338      	adds	r3, #56	; 0x38
 80195f4:	3313      	adds	r3, #19
 80195f6:	4618      	mov	r0, r3
 80195f8:	f7fe f828 	bl	801764c <ld_word>
 80195fc:	4603      	mov	r3, r0
 80195fe:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8019600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019602:	2b00      	cmp	r3, #0
 8019604:	d106      	bne.n	8019614 <find_volume+0x2cc>
 8019606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019608:	3338      	adds	r3, #56	; 0x38
 801960a:	3320      	adds	r3, #32
 801960c:	4618      	mov	r0, r3
 801960e:	f7fe f835 	bl	801767c <ld_dword>
 8019612:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8019614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019616:	3338      	adds	r3, #56	; 0x38
 8019618:	330e      	adds	r3, #14
 801961a:	4618      	mov	r0, r3
 801961c:	f7fe f816 	bl	801764c <ld_word>
 8019620:	4603      	mov	r3, r0
 8019622:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8019624:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8019626:	2b00      	cmp	r3, #0
 8019628:	d101      	bne.n	801962e <find_volume+0x2e6>
 801962a:	230d      	movs	r3, #13
 801962c:	e105      	b.n	801983a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801962e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8019630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019632:	4413      	add	r3, r2
 8019634:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019636:	8911      	ldrh	r1, [r2, #8]
 8019638:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801963a:	8992      	ldrh	r2, [r2, #12]
 801963c:	0952      	lsrs	r2, r2, #5
 801963e:	b292      	uxth	r2, r2
 8019640:	fbb1 f2f2 	udiv	r2, r1, r2
 8019644:	b292      	uxth	r2, r2
 8019646:	4413      	add	r3, r2
 8019648:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801964a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801964c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801964e:	429a      	cmp	r2, r3
 8019650:	d201      	bcs.n	8019656 <find_volume+0x30e>
 8019652:	230d      	movs	r3, #13
 8019654:	e0f1      	b.n	801983a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8019656:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801965a:	1ad3      	subs	r3, r2, r3
 801965c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801965e:	8952      	ldrh	r2, [r2, #10]
 8019660:	fbb3 f3f2 	udiv	r3, r3, r2
 8019664:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8019666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019668:	2b00      	cmp	r3, #0
 801966a:	d101      	bne.n	8019670 <find_volume+0x328>
 801966c:	230d      	movs	r3, #13
 801966e:	e0e4      	b.n	801983a <find_volume+0x4f2>
		fmt = FS_FAT32;
 8019670:	2303      	movs	r3, #3
 8019672:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8019676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019678:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801967c:	4293      	cmp	r3, r2
 801967e:	d802      	bhi.n	8019686 <find_volume+0x33e>
 8019680:	2302      	movs	r3, #2
 8019682:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8019686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019688:	f640 72f5 	movw	r2, #4085	; 0xff5
 801968c:	4293      	cmp	r3, r2
 801968e:	d802      	bhi.n	8019696 <find_volume+0x34e>
 8019690:	2301      	movs	r3, #1
 8019692:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8019696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019698:	1c9a      	adds	r2, r3, #2
 801969a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801969c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801969e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80196a2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80196a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80196a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80196a8:	441a      	add	r2, r3
 80196aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196ac:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80196ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80196b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196b2:	441a      	add	r2, r3
 80196b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196b6:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80196b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80196bc:	2b03      	cmp	r3, #3
 80196be:	d11e      	bne.n	80196fe <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80196c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196c2:	3338      	adds	r3, #56	; 0x38
 80196c4:	332a      	adds	r3, #42	; 0x2a
 80196c6:	4618      	mov	r0, r3
 80196c8:	f7fd ffc0 	bl	801764c <ld_word>
 80196cc:	4603      	mov	r3, r0
 80196ce:	2b00      	cmp	r3, #0
 80196d0:	d001      	beq.n	80196d6 <find_volume+0x38e>
 80196d2:	230d      	movs	r3, #13
 80196d4:	e0b1      	b.n	801983a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80196d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196d8:	891b      	ldrh	r3, [r3, #8]
 80196da:	2b00      	cmp	r3, #0
 80196dc:	d001      	beq.n	80196e2 <find_volume+0x39a>
 80196de:	230d      	movs	r3, #13
 80196e0:	e0ab      	b.n	801983a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80196e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196e4:	3338      	adds	r3, #56	; 0x38
 80196e6:	332c      	adds	r3, #44	; 0x2c
 80196e8:	4618      	mov	r0, r3
 80196ea:	f7fd ffc7 	bl	801767c <ld_dword>
 80196ee:	4602      	mov	r2, r0
 80196f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196f2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80196f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196f6:	69db      	ldr	r3, [r3, #28]
 80196f8:	009b      	lsls	r3, r3, #2
 80196fa:	647b      	str	r3, [r7, #68]	; 0x44
 80196fc:	e01f      	b.n	801973e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80196fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019700:	891b      	ldrh	r3, [r3, #8]
 8019702:	2b00      	cmp	r3, #0
 8019704:	d101      	bne.n	801970a <find_volume+0x3c2>
 8019706:	230d      	movs	r3, #13
 8019708:	e097      	b.n	801983a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801970a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801970c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801970e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019710:	441a      	add	r2, r3
 8019712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019714:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8019716:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801971a:	2b02      	cmp	r3, #2
 801971c:	d103      	bne.n	8019726 <find_volume+0x3de>
 801971e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019720:	69db      	ldr	r3, [r3, #28]
 8019722:	005b      	lsls	r3, r3, #1
 8019724:	e00a      	b.n	801973c <find_volume+0x3f4>
 8019726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019728:	69da      	ldr	r2, [r3, #28]
 801972a:	4613      	mov	r3, r2
 801972c:	005b      	lsls	r3, r3, #1
 801972e:	4413      	add	r3, r2
 8019730:	085a      	lsrs	r2, r3, #1
 8019732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019734:	69db      	ldr	r3, [r3, #28]
 8019736:	f003 0301 	and.w	r3, r3, #1
 801973a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801973c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801973e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019740:	6a1a      	ldr	r2, [r3, #32]
 8019742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019744:	899b      	ldrh	r3, [r3, #12]
 8019746:	4619      	mov	r1, r3
 8019748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801974a:	440b      	add	r3, r1
 801974c:	3b01      	subs	r3, #1
 801974e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019750:	8989      	ldrh	r1, [r1, #12]
 8019752:	fbb3 f3f1 	udiv	r3, r3, r1
 8019756:	429a      	cmp	r2, r3
 8019758:	d201      	bcs.n	801975e <find_volume+0x416>
 801975a:	230d      	movs	r3, #13
 801975c:	e06d      	b.n	801983a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801975e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019760:	f04f 32ff 	mov.w	r2, #4294967295
 8019764:	619a      	str	r2, [r3, #24]
 8019766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019768:	699a      	ldr	r2, [r3, #24]
 801976a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801976c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801976e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019770:	2280      	movs	r2, #128	; 0x80
 8019772:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8019774:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019778:	2b03      	cmp	r3, #3
 801977a:	d149      	bne.n	8019810 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801977c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801977e:	3338      	adds	r3, #56	; 0x38
 8019780:	3330      	adds	r3, #48	; 0x30
 8019782:	4618      	mov	r0, r3
 8019784:	f7fd ff62 	bl	801764c <ld_word>
 8019788:	4603      	mov	r3, r0
 801978a:	2b01      	cmp	r3, #1
 801978c:	d140      	bne.n	8019810 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801978e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019790:	3301      	adds	r3, #1
 8019792:	4619      	mov	r1, r3
 8019794:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019796:	f7fe fa09 	bl	8017bac <move_window>
 801979a:	4603      	mov	r3, r0
 801979c:	2b00      	cmp	r3, #0
 801979e:	d137      	bne.n	8019810 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80197a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197a2:	2200      	movs	r2, #0
 80197a4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80197a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197a8:	3338      	adds	r3, #56	; 0x38
 80197aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80197ae:	4618      	mov	r0, r3
 80197b0:	f7fd ff4c 	bl	801764c <ld_word>
 80197b4:	4603      	mov	r3, r0
 80197b6:	461a      	mov	r2, r3
 80197b8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80197bc:	429a      	cmp	r2, r3
 80197be:	d127      	bne.n	8019810 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80197c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197c2:	3338      	adds	r3, #56	; 0x38
 80197c4:	4618      	mov	r0, r3
 80197c6:	f7fd ff59 	bl	801767c <ld_dword>
 80197ca:	4603      	mov	r3, r0
 80197cc:	4a1d      	ldr	r2, [pc, #116]	; (8019844 <find_volume+0x4fc>)
 80197ce:	4293      	cmp	r3, r2
 80197d0:	d11e      	bne.n	8019810 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80197d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197d4:	3338      	adds	r3, #56	; 0x38
 80197d6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80197da:	4618      	mov	r0, r3
 80197dc:	f7fd ff4e 	bl	801767c <ld_dword>
 80197e0:	4603      	mov	r3, r0
 80197e2:	4a19      	ldr	r2, [pc, #100]	; (8019848 <find_volume+0x500>)
 80197e4:	4293      	cmp	r3, r2
 80197e6:	d113      	bne.n	8019810 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80197e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197ea:	3338      	adds	r3, #56	; 0x38
 80197ec:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80197f0:	4618      	mov	r0, r3
 80197f2:	f7fd ff43 	bl	801767c <ld_dword>
 80197f6:	4602      	mov	r2, r0
 80197f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197fa:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80197fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197fe:	3338      	adds	r3, #56	; 0x38
 8019800:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8019804:	4618      	mov	r0, r3
 8019806:	f7fd ff39 	bl	801767c <ld_dword>
 801980a:	4602      	mov	r2, r0
 801980c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801980e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8019810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019812:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8019816:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8019818:	4b0c      	ldr	r3, [pc, #48]	; (801984c <find_volume+0x504>)
 801981a:	881b      	ldrh	r3, [r3, #0]
 801981c:	3301      	adds	r3, #1
 801981e:	b29a      	uxth	r2, r3
 8019820:	4b0a      	ldr	r3, [pc, #40]	; (801984c <find_volume+0x504>)
 8019822:	801a      	strh	r2, [r3, #0]
 8019824:	4b09      	ldr	r3, [pc, #36]	; (801984c <find_volume+0x504>)
 8019826:	881a      	ldrh	r2, [r3, #0]
 8019828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801982a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801982c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801982e:	4a08      	ldr	r2, [pc, #32]	; (8019850 <find_volume+0x508>)
 8019830:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8019832:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019834:	f7fe f952 	bl	8017adc <clear_lock>
#endif
	return FR_OK;
 8019838:	2300      	movs	r3, #0
}
 801983a:	4618      	mov	r0, r3
 801983c:	3758      	adds	r7, #88	; 0x58
 801983e:	46bd      	mov	sp, r7
 8019840:	bd80      	pop	{r7, pc}
 8019842:	bf00      	nop
 8019844:	41615252 	.word	0x41615252
 8019848:	61417272 	.word	0x61417272
 801984c:	240016ac 	.word	0x240016ac
 8019850:	240016d0 	.word	0x240016d0

08019854 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8019854:	b580      	push	{r7, lr}
 8019856:	b084      	sub	sp, #16
 8019858:	af00      	add	r7, sp, #0
 801985a:	6078      	str	r0, [r7, #4]
 801985c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801985e:	2309      	movs	r3, #9
 8019860:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	2b00      	cmp	r3, #0
 8019866:	d01c      	beq.n	80198a2 <validate+0x4e>
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	681b      	ldr	r3, [r3, #0]
 801986c:	2b00      	cmp	r3, #0
 801986e:	d018      	beq.n	80198a2 <validate+0x4e>
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	781b      	ldrb	r3, [r3, #0]
 8019876:	2b00      	cmp	r3, #0
 8019878:	d013      	beq.n	80198a2 <validate+0x4e>
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	889a      	ldrh	r2, [r3, #4]
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	681b      	ldr	r3, [r3, #0]
 8019882:	88db      	ldrh	r3, [r3, #6]
 8019884:	429a      	cmp	r2, r3
 8019886:	d10c      	bne.n	80198a2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	681b      	ldr	r3, [r3, #0]
 801988c:	785b      	ldrb	r3, [r3, #1]
 801988e:	4618      	mov	r0, r3
 8019890:	f7fd fe3e 	bl	8017510 <disk_status>
 8019894:	4603      	mov	r3, r0
 8019896:	f003 0301 	and.w	r3, r3, #1
 801989a:	2b00      	cmp	r3, #0
 801989c:	d101      	bne.n	80198a2 <validate+0x4e>
			res = FR_OK;
 801989e:	2300      	movs	r3, #0
 80198a0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80198a2:	7bfb      	ldrb	r3, [r7, #15]
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	d102      	bne.n	80198ae <validate+0x5a>
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	681b      	ldr	r3, [r3, #0]
 80198ac:	e000      	b.n	80198b0 <validate+0x5c>
 80198ae:	2300      	movs	r3, #0
 80198b0:	683a      	ldr	r2, [r7, #0]
 80198b2:	6013      	str	r3, [r2, #0]
	return res;
 80198b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80198b6:	4618      	mov	r0, r3
 80198b8:	3710      	adds	r7, #16
 80198ba:	46bd      	mov	sp, r7
 80198bc:	bd80      	pop	{r7, pc}
	...

080198c0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80198c0:	b580      	push	{r7, lr}
 80198c2:	b088      	sub	sp, #32
 80198c4:	af00      	add	r7, sp, #0
 80198c6:	60f8      	str	r0, [r7, #12]
 80198c8:	60b9      	str	r1, [r7, #8]
 80198ca:	4613      	mov	r3, r2
 80198cc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80198ce:	68bb      	ldr	r3, [r7, #8]
 80198d0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80198d2:	f107 0310 	add.w	r3, r7, #16
 80198d6:	4618      	mov	r0, r3
 80198d8:	f7ff fc9c 	bl	8019214 <get_ldnumber>
 80198dc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80198de:	69fb      	ldr	r3, [r7, #28]
 80198e0:	2b00      	cmp	r3, #0
 80198e2:	da01      	bge.n	80198e8 <f_mount+0x28>
 80198e4:	230b      	movs	r3, #11
 80198e6:	e02b      	b.n	8019940 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80198e8:	4a17      	ldr	r2, [pc, #92]	; (8019948 <f_mount+0x88>)
 80198ea:	69fb      	ldr	r3, [r7, #28]
 80198ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80198f0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80198f2:	69bb      	ldr	r3, [r7, #24]
 80198f4:	2b00      	cmp	r3, #0
 80198f6:	d005      	beq.n	8019904 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80198f8:	69b8      	ldr	r0, [r7, #24]
 80198fa:	f7fe f8ef 	bl	8017adc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80198fe:	69bb      	ldr	r3, [r7, #24]
 8019900:	2200      	movs	r2, #0
 8019902:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8019904:	68fb      	ldr	r3, [r7, #12]
 8019906:	2b00      	cmp	r3, #0
 8019908:	d002      	beq.n	8019910 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801990a:	68fb      	ldr	r3, [r7, #12]
 801990c:	2200      	movs	r2, #0
 801990e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8019910:	68fa      	ldr	r2, [r7, #12]
 8019912:	490d      	ldr	r1, [pc, #52]	; (8019948 <f_mount+0x88>)
 8019914:	69fb      	ldr	r3, [r7, #28]
 8019916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801991a:	68fb      	ldr	r3, [r7, #12]
 801991c:	2b00      	cmp	r3, #0
 801991e:	d002      	beq.n	8019926 <f_mount+0x66>
 8019920:	79fb      	ldrb	r3, [r7, #7]
 8019922:	2b01      	cmp	r3, #1
 8019924:	d001      	beq.n	801992a <f_mount+0x6a>
 8019926:	2300      	movs	r3, #0
 8019928:	e00a      	b.n	8019940 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801992a:	f107 010c 	add.w	r1, r7, #12
 801992e:	f107 0308 	add.w	r3, r7, #8
 8019932:	2200      	movs	r2, #0
 8019934:	4618      	mov	r0, r3
 8019936:	f7ff fd07 	bl	8019348 <find_volume>
 801993a:	4603      	mov	r3, r0
 801993c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801993e:	7dfb      	ldrb	r3, [r7, #23]
}
 8019940:	4618      	mov	r0, r3
 8019942:	3720      	adds	r7, #32
 8019944:	46bd      	mov	sp, r7
 8019946:	bd80      	pop	{r7, pc}
 8019948:	240016a8 	.word	0x240016a8

0801994c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801994c:	b580      	push	{r7, lr}
 801994e:	b09a      	sub	sp, #104	; 0x68
 8019950:	af00      	add	r7, sp, #0
 8019952:	60f8      	str	r0, [r7, #12]
 8019954:	60b9      	str	r1, [r7, #8]
 8019956:	4613      	mov	r3, r2
 8019958:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801995a:	68fb      	ldr	r3, [r7, #12]
 801995c:	2b00      	cmp	r3, #0
 801995e:	d101      	bne.n	8019964 <f_open+0x18>
 8019960:	2309      	movs	r3, #9
 8019962:	e1bb      	b.n	8019cdc <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8019964:	79fb      	ldrb	r3, [r7, #7]
 8019966:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801996a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801996c:	79fa      	ldrb	r2, [r7, #7]
 801996e:	f107 0114 	add.w	r1, r7, #20
 8019972:	f107 0308 	add.w	r3, r7, #8
 8019976:	4618      	mov	r0, r3
 8019978:	f7ff fce6 	bl	8019348 <find_volume>
 801997c:	4603      	mov	r3, r0
 801997e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8019982:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019986:	2b00      	cmp	r3, #0
 8019988:	f040 819f 	bne.w	8019cca <f_open+0x37e>
		dj.obj.fs = fs;
 801998c:	697b      	ldr	r3, [r7, #20]
 801998e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8019990:	68ba      	ldr	r2, [r7, #8]
 8019992:	f107 0318 	add.w	r3, r7, #24
 8019996:	4611      	mov	r1, r2
 8019998:	4618      	mov	r0, r3
 801999a:	f7ff fbc5 	bl	8019128 <follow_path>
 801999e:	4603      	mov	r3, r0
 80199a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80199a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80199a8:	2b00      	cmp	r3, #0
 80199aa:	d11a      	bne.n	80199e2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80199ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80199b0:	b25b      	sxtb	r3, r3
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	da03      	bge.n	80199be <f_open+0x72>
				res = FR_INVALID_NAME;
 80199b6:	2306      	movs	r3, #6
 80199b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80199bc:	e011      	b.n	80199e2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80199be:	79fb      	ldrb	r3, [r7, #7]
 80199c0:	f023 0301 	bic.w	r3, r3, #1
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	bf14      	ite	ne
 80199c8:	2301      	movne	r3, #1
 80199ca:	2300      	moveq	r3, #0
 80199cc:	b2db      	uxtb	r3, r3
 80199ce:	461a      	mov	r2, r3
 80199d0:	f107 0318 	add.w	r3, r7, #24
 80199d4:	4611      	mov	r1, r2
 80199d6:	4618      	mov	r0, r3
 80199d8:	f7fd ff38 	bl	801784c <chk_lock>
 80199dc:	4603      	mov	r3, r0
 80199de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80199e2:	79fb      	ldrb	r3, [r7, #7]
 80199e4:	f003 031c 	and.w	r3, r3, #28
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	d07f      	beq.n	8019aec <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80199ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	d017      	beq.n	8019a24 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80199f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80199f8:	2b04      	cmp	r3, #4
 80199fa:	d10e      	bne.n	8019a1a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80199fc:	f7fd ff82 	bl	8017904 <enq_lock>
 8019a00:	4603      	mov	r3, r0
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	d006      	beq.n	8019a14 <f_open+0xc8>
 8019a06:	f107 0318 	add.w	r3, r7, #24
 8019a0a:	4618      	mov	r0, r3
 8019a0c:	f7ff f8dc 	bl	8018bc8 <dir_register>
 8019a10:	4603      	mov	r3, r0
 8019a12:	e000      	b.n	8019a16 <f_open+0xca>
 8019a14:	2312      	movs	r3, #18
 8019a16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8019a1a:	79fb      	ldrb	r3, [r7, #7]
 8019a1c:	f043 0308 	orr.w	r3, r3, #8
 8019a20:	71fb      	strb	r3, [r7, #7]
 8019a22:	e010      	b.n	8019a46 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8019a24:	7fbb      	ldrb	r3, [r7, #30]
 8019a26:	f003 0311 	and.w	r3, r3, #17
 8019a2a:	2b00      	cmp	r3, #0
 8019a2c:	d003      	beq.n	8019a36 <f_open+0xea>
					res = FR_DENIED;
 8019a2e:	2307      	movs	r3, #7
 8019a30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019a34:	e007      	b.n	8019a46 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8019a36:	79fb      	ldrb	r3, [r7, #7]
 8019a38:	f003 0304 	and.w	r3, r3, #4
 8019a3c:	2b00      	cmp	r3, #0
 8019a3e:	d002      	beq.n	8019a46 <f_open+0xfa>
 8019a40:	2308      	movs	r3, #8
 8019a42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8019a46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	d168      	bne.n	8019b20 <f_open+0x1d4>
 8019a4e:	79fb      	ldrb	r3, [r7, #7]
 8019a50:	f003 0308 	and.w	r3, r3, #8
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	d063      	beq.n	8019b20 <f_open+0x1d4>
				dw = GET_FATTIME();
 8019a58:	f7fb fb70 	bl	801513c <get_fattime>
 8019a5c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8019a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a60:	330e      	adds	r3, #14
 8019a62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019a64:	4618      	mov	r0, r3
 8019a66:	f7fd fe47 	bl	80176f8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8019a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a6c:	3316      	adds	r3, #22
 8019a6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019a70:	4618      	mov	r0, r3
 8019a72:	f7fd fe41 	bl	80176f8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8019a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a78:	330b      	adds	r3, #11
 8019a7a:	2220      	movs	r2, #32
 8019a7c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8019a7e:	697b      	ldr	r3, [r7, #20]
 8019a80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019a82:	4611      	mov	r1, r2
 8019a84:	4618      	mov	r0, r3
 8019a86:	f7fe fe17 	bl	80186b8 <ld_clust>
 8019a8a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8019a8c:	697b      	ldr	r3, [r7, #20]
 8019a8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019a90:	2200      	movs	r2, #0
 8019a92:	4618      	mov	r0, r3
 8019a94:	f7fe fe2f 	bl	80186f6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8019a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a9a:	331c      	adds	r3, #28
 8019a9c:	2100      	movs	r1, #0
 8019a9e:	4618      	mov	r0, r3
 8019aa0:	f7fd fe2a 	bl	80176f8 <st_dword>
					fs->wflag = 1;
 8019aa4:	697b      	ldr	r3, [r7, #20]
 8019aa6:	2201      	movs	r2, #1
 8019aa8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8019aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019aac:	2b00      	cmp	r3, #0
 8019aae:	d037      	beq.n	8019b20 <f_open+0x1d4>
						dw = fs->winsect;
 8019ab0:	697b      	ldr	r3, [r7, #20]
 8019ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019ab4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8019ab6:	f107 0318 	add.w	r3, r7, #24
 8019aba:	2200      	movs	r2, #0
 8019abc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8019abe:	4618      	mov	r0, r3
 8019ac0:	f7fe fb1f 	bl	8018102 <remove_chain>
 8019ac4:	4603      	mov	r3, r0
 8019ac6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8019aca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019ace:	2b00      	cmp	r3, #0
 8019ad0:	d126      	bne.n	8019b20 <f_open+0x1d4>
							res = move_window(fs, dw);
 8019ad2:	697b      	ldr	r3, [r7, #20]
 8019ad4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019ad6:	4618      	mov	r0, r3
 8019ad8:	f7fe f868 	bl	8017bac <move_window>
 8019adc:	4603      	mov	r3, r0
 8019ade:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8019ae2:	697b      	ldr	r3, [r7, #20]
 8019ae4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019ae6:	3a01      	subs	r2, #1
 8019ae8:	615a      	str	r2, [r3, #20]
 8019aea:	e019      	b.n	8019b20 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8019aec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019af0:	2b00      	cmp	r3, #0
 8019af2:	d115      	bne.n	8019b20 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8019af4:	7fbb      	ldrb	r3, [r7, #30]
 8019af6:	f003 0310 	and.w	r3, r3, #16
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d003      	beq.n	8019b06 <f_open+0x1ba>
					res = FR_NO_FILE;
 8019afe:	2304      	movs	r3, #4
 8019b00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019b04:	e00c      	b.n	8019b20 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8019b06:	79fb      	ldrb	r3, [r7, #7]
 8019b08:	f003 0302 	and.w	r3, r3, #2
 8019b0c:	2b00      	cmp	r3, #0
 8019b0e:	d007      	beq.n	8019b20 <f_open+0x1d4>
 8019b10:	7fbb      	ldrb	r3, [r7, #30]
 8019b12:	f003 0301 	and.w	r3, r3, #1
 8019b16:	2b00      	cmp	r3, #0
 8019b18:	d002      	beq.n	8019b20 <f_open+0x1d4>
						res = FR_DENIED;
 8019b1a:	2307      	movs	r3, #7
 8019b1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8019b20:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019b24:	2b00      	cmp	r3, #0
 8019b26:	d128      	bne.n	8019b7a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8019b28:	79fb      	ldrb	r3, [r7, #7]
 8019b2a:	f003 0308 	and.w	r3, r3, #8
 8019b2e:	2b00      	cmp	r3, #0
 8019b30:	d003      	beq.n	8019b3a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8019b32:	79fb      	ldrb	r3, [r7, #7]
 8019b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019b38:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8019b3a:	697b      	ldr	r3, [r7, #20]
 8019b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8019b3e:	68fb      	ldr	r3, [r7, #12]
 8019b40:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8019b42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019b44:	68fb      	ldr	r3, [r7, #12]
 8019b46:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8019b48:	79fb      	ldrb	r3, [r7, #7]
 8019b4a:	f023 0301 	bic.w	r3, r3, #1
 8019b4e:	2b00      	cmp	r3, #0
 8019b50:	bf14      	ite	ne
 8019b52:	2301      	movne	r3, #1
 8019b54:	2300      	moveq	r3, #0
 8019b56:	b2db      	uxtb	r3, r3
 8019b58:	461a      	mov	r2, r3
 8019b5a:	f107 0318 	add.w	r3, r7, #24
 8019b5e:	4611      	mov	r1, r2
 8019b60:	4618      	mov	r0, r3
 8019b62:	f7fd fef1 	bl	8017948 <inc_lock>
 8019b66:	4602      	mov	r2, r0
 8019b68:	68fb      	ldr	r3, [r7, #12]
 8019b6a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8019b6c:	68fb      	ldr	r3, [r7, #12]
 8019b6e:	691b      	ldr	r3, [r3, #16]
 8019b70:	2b00      	cmp	r3, #0
 8019b72:	d102      	bne.n	8019b7a <f_open+0x22e>
 8019b74:	2302      	movs	r3, #2
 8019b76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8019b7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	f040 80a3 	bne.w	8019cca <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8019b84:	697b      	ldr	r3, [r7, #20]
 8019b86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019b88:	4611      	mov	r1, r2
 8019b8a:	4618      	mov	r0, r3
 8019b8c:	f7fe fd94 	bl	80186b8 <ld_clust>
 8019b90:	4602      	mov	r2, r0
 8019b92:	68fb      	ldr	r3, [r7, #12]
 8019b94:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8019b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b98:	331c      	adds	r3, #28
 8019b9a:	4618      	mov	r0, r3
 8019b9c:	f7fd fd6e 	bl	801767c <ld_dword>
 8019ba0:	4602      	mov	r2, r0
 8019ba2:	68fb      	ldr	r3, [r7, #12]
 8019ba4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8019ba6:	68fb      	ldr	r3, [r7, #12]
 8019ba8:	2200      	movs	r2, #0
 8019baa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8019bac:	697a      	ldr	r2, [r7, #20]
 8019bae:	68fb      	ldr	r3, [r7, #12]
 8019bb0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8019bb2:	697b      	ldr	r3, [r7, #20]
 8019bb4:	88da      	ldrh	r2, [r3, #6]
 8019bb6:	68fb      	ldr	r3, [r7, #12]
 8019bb8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8019bba:	68fb      	ldr	r3, [r7, #12]
 8019bbc:	79fa      	ldrb	r2, [r7, #7]
 8019bbe:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8019bc0:	68fb      	ldr	r3, [r7, #12]
 8019bc2:	2200      	movs	r2, #0
 8019bc4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8019bc6:	68fb      	ldr	r3, [r7, #12]
 8019bc8:	2200      	movs	r2, #0
 8019bca:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8019bcc:	68fb      	ldr	r3, [r7, #12]
 8019bce:	2200      	movs	r2, #0
 8019bd0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8019bd2:	68fb      	ldr	r3, [r7, #12]
 8019bd4:	3330      	adds	r3, #48	; 0x30
 8019bd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8019bda:	2100      	movs	r1, #0
 8019bdc:	4618      	mov	r0, r3
 8019bde:	f7fd fdd8 	bl	8017792 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8019be2:	79fb      	ldrb	r3, [r7, #7]
 8019be4:	f003 0320 	and.w	r3, r3, #32
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	d06e      	beq.n	8019cca <f_open+0x37e>
 8019bec:	68fb      	ldr	r3, [r7, #12]
 8019bee:	68db      	ldr	r3, [r3, #12]
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	d06a      	beq.n	8019cca <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8019bf4:	68fb      	ldr	r3, [r7, #12]
 8019bf6:	68da      	ldr	r2, [r3, #12]
 8019bf8:	68fb      	ldr	r3, [r7, #12]
 8019bfa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8019bfc:	697b      	ldr	r3, [r7, #20]
 8019bfe:	895b      	ldrh	r3, [r3, #10]
 8019c00:	461a      	mov	r2, r3
 8019c02:	697b      	ldr	r3, [r7, #20]
 8019c04:	899b      	ldrh	r3, [r3, #12]
 8019c06:	fb02 f303 	mul.w	r3, r2, r3
 8019c0a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8019c0c:	68fb      	ldr	r3, [r7, #12]
 8019c0e:	689b      	ldr	r3, [r3, #8]
 8019c10:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8019c12:	68fb      	ldr	r3, [r7, #12]
 8019c14:	68db      	ldr	r3, [r3, #12]
 8019c16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019c18:	e016      	b.n	8019c48 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8019c1a:	68fb      	ldr	r3, [r7, #12]
 8019c1c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8019c1e:	4618      	mov	r0, r3
 8019c20:	f7fe f881 	bl	8017d26 <get_fat>
 8019c24:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8019c26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019c28:	2b01      	cmp	r3, #1
 8019c2a:	d802      	bhi.n	8019c32 <f_open+0x2e6>
 8019c2c:	2302      	movs	r3, #2
 8019c2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8019c32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c38:	d102      	bne.n	8019c40 <f_open+0x2f4>
 8019c3a:	2301      	movs	r3, #1
 8019c3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8019c40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8019c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019c44:	1ad3      	subs	r3, r2, r3
 8019c46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019c48:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d103      	bne.n	8019c58 <f_open+0x30c>
 8019c50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8019c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019c54:	429a      	cmp	r2, r3
 8019c56:	d8e0      	bhi.n	8019c1a <f_open+0x2ce>
				}
				fp->clust = clst;
 8019c58:	68fb      	ldr	r3, [r7, #12]
 8019c5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8019c5c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8019c5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	d131      	bne.n	8019cca <f_open+0x37e>
 8019c66:	697b      	ldr	r3, [r7, #20]
 8019c68:	899b      	ldrh	r3, [r3, #12]
 8019c6a:	461a      	mov	r2, r3
 8019c6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019c6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8019c72:	fb01 f202 	mul.w	r2, r1, r2
 8019c76:	1a9b      	subs	r3, r3, r2
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	d026      	beq.n	8019cca <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8019c7c:	697b      	ldr	r3, [r7, #20]
 8019c7e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8019c80:	4618      	mov	r0, r3
 8019c82:	f7fe f831 	bl	8017ce8 <clust2sect>
 8019c86:	64f8      	str	r0, [r7, #76]	; 0x4c
 8019c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019c8a:	2b00      	cmp	r3, #0
 8019c8c:	d103      	bne.n	8019c96 <f_open+0x34a>
						res = FR_INT_ERR;
 8019c8e:	2302      	movs	r3, #2
 8019c90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019c94:	e019      	b.n	8019cca <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8019c96:	697b      	ldr	r3, [r7, #20]
 8019c98:	899b      	ldrh	r3, [r3, #12]
 8019c9a:	461a      	mov	r2, r3
 8019c9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019c9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8019ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019ca4:	441a      	add	r2, r3
 8019ca6:	68fb      	ldr	r3, [r7, #12]
 8019ca8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8019caa:	697b      	ldr	r3, [r7, #20]
 8019cac:	7858      	ldrb	r0, [r3, #1]
 8019cae:	68fb      	ldr	r3, [r7, #12]
 8019cb0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019cb4:	68fb      	ldr	r3, [r7, #12]
 8019cb6:	6a1a      	ldr	r2, [r3, #32]
 8019cb8:	2301      	movs	r3, #1
 8019cba:	f7fd fc69 	bl	8017590 <disk_read>
 8019cbe:	4603      	mov	r3, r0
 8019cc0:	2b00      	cmp	r3, #0
 8019cc2:	d002      	beq.n	8019cca <f_open+0x37e>
 8019cc4:	2301      	movs	r3, #1
 8019cc6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8019cca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d002      	beq.n	8019cd8 <f_open+0x38c>
 8019cd2:	68fb      	ldr	r3, [r7, #12]
 8019cd4:	2200      	movs	r2, #0
 8019cd6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8019cd8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8019cdc:	4618      	mov	r0, r3
 8019cde:	3768      	adds	r7, #104	; 0x68
 8019ce0:	46bd      	mov	sp, r7
 8019ce2:	bd80      	pop	{r7, pc}

08019ce4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8019ce4:	b580      	push	{r7, lr}
 8019ce6:	b08c      	sub	sp, #48	; 0x30
 8019ce8:	af00      	add	r7, sp, #0
 8019cea:	60f8      	str	r0, [r7, #12]
 8019cec:	60b9      	str	r1, [r7, #8]
 8019cee:	607a      	str	r2, [r7, #4]
 8019cf0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8019cf2:	68bb      	ldr	r3, [r7, #8]
 8019cf4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8019cf6:	683b      	ldr	r3, [r7, #0]
 8019cf8:	2200      	movs	r2, #0
 8019cfa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8019cfc:	68fb      	ldr	r3, [r7, #12]
 8019cfe:	f107 0210 	add.w	r2, r7, #16
 8019d02:	4611      	mov	r1, r2
 8019d04:	4618      	mov	r0, r3
 8019d06:	f7ff fda5 	bl	8019854 <validate>
 8019d0a:	4603      	mov	r3, r0
 8019d0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8019d10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019d14:	2b00      	cmp	r3, #0
 8019d16:	d107      	bne.n	8019d28 <f_write+0x44>
 8019d18:	68fb      	ldr	r3, [r7, #12]
 8019d1a:	7d5b      	ldrb	r3, [r3, #21]
 8019d1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8019d20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	d002      	beq.n	8019d2e <f_write+0x4a>
 8019d28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019d2c:	e16a      	b.n	801a004 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8019d2e:	68fb      	ldr	r3, [r7, #12]
 8019d30:	7d1b      	ldrb	r3, [r3, #20]
 8019d32:	f003 0302 	and.w	r3, r3, #2
 8019d36:	2b00      	cmp	r3, #0
 8019d38:	d101      	bne.n	8019d3e <f_write+0x5a>
 8019d3a:	2307      	movs	r3, #7
 8019d3c:	e162      	b.n	801a004 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8019d3e:	68fb      	ldr	r3, [r7, #12]
 8019d40:	699a      	ldr	r2, [r3, #24]
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	441a      	add	r2, r3
 8019d46:	68fb      	ldr	r3, [r7, #12]
 8019d48:	699b      	ldr	r3, [r3, #24]
 8019d4a:	429a      	cmp	r2, r3
 8019d4c:	f080 814c 	bcs.w	8019fe8 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8019d50:	68fb      	ldr	r3, [r7, #12]
 8019d52:	699b      	ldr	r3, [r3, #24]
 8019d54:	43db      	mvns	r3, r3
 8019d56:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8019d58:	e146      	b.n	8019fe8 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8019d5a:	68fb      	ldr	r3, [r7, #12]
 8019d5c:	699b      	ldr	r3, [r3, #24]
 8019d5e:	693a      	ldr	r2, [r7, #16]
 8019d60:	8992      	ldrh	r2, [r2, #12]
 8019d62:	fbb3 f1f2 	udiv	r1, r3, r2
 8019d66:	fb01 f202 	mul.w	r2, r1, r2
 8019d6a:	1a9b      	subs	r3, r3, r2
 8019d6c:	2b00      	cmp	r3, #0
 8019d6e:	f040 80f1 	bne.w	8019f54 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8019d72:	68fb      	ldr	r3, [r7, #12]
 8019d74:	699b      	ldr	r3, [r3, #24]
 8019d76:	693a      	ldr	r2, [r7, #16]
 8019d78:	8992      	ldrh	r2, [r2, #12]
 8019d7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8019d7e:	693a      	ldr	r2, [r7, #16]
 8019d80:	8952      	ldrh	r2, [r2, #10]
 8019d82:	3a01      	subs	r2, #1
 8019d84:	4013      	ands	r3, r2
 8019d86:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8019d88:	69bb      	ldr	r3, [r7, #24]
 8019d8a:	2b00      	cmp	r3, #0
 8019d8c:	d143      	bne.n	8019e16 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8019d8e:	68fb      	ldr	r3, [r7, #12]
 8019d90:	699b      	ldr	r3, [r3, #24]
 8019d92:	2b00      	cmp	r3, #0
 8019d94:	d10c      	bne.n	8019db0 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8019d96:	68fb      	ldr	r3, [r7, #12]
 8019d98:	689b      	ldr	r3, [r3, #8]
 8019d9a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8019d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d11a      	bne.n	8019dd8 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8019da2:	68fb      	ldr	r3, [r7, #12]
 8019da4:	2100      	movs	r1, #0
 8019da6:	4618      	mov	r0, r3
 8019da8:	f7fe fa10 	bl	80181cc <create_chain>
 8019dac:	62b8      	str	r0, [r7, #40]	; 0x28
 8019dae:	e013      	b.n	8019dd8 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8019db0:	68fb      	ldr	r3, [r7, #12]
 8019db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019db4:	2b00      	cmp	r3, #0
 8019db6:	d007      	beq.n	8019dc8 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8019db8:	68fb      	ldr	r3, [r7, #12]
 8019dba:	699b      	ldr	r3, [r3, #24]
 8019dbc:	4619      	mov	r1, r3
 8019dbe:	68f8      	ldr	r0, [r7, #12]
 8019dc0:	f7fe fa9c 	bl	80182fc <clmt_clust>
 8019dc4:	62b8      	str	r0, [r7, #40]	; 0x28
 8019dc6:	e007      	b.n	8019dd8 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8019dc8:	68fa      	ldr	r2, [r7, #12]
 8019dca:	68fb      	ldr	r3, [r7, #12]
 8019dcc:	69db      	ldr	r3, [r3, #28]
 8019dce:	4619      	mov	r1, r3
 8019dd0:	4610      	mov	r0, r2
 8019dd2:	f7fe f9fb 	bl	80181cc <create_chain>
 8019dd6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	f000 8109 	beq.w	8019ff2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8019de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019de2:	2b01      	cmp	r3, #1
 8019de4:	d104      	bne.n	8019df0 <f_write+0x10c>
 8019de6:	68fb      	ldr	r3, [r7, #12]
 8019de8:	2202      	movs	r2, #2
 8019dea:	755a      	strb	r2, [r3, #21]
 8019dec:	2302      	movs	r3, #2
 8019dee:	e109      	b.n	801a004 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8019df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019df6:	d104      	bne.n	8019e02 <f_write+0x11e>
 8019df8:	68fb      	ldr	r3, [r7, #12]
 8019dfa:	2201      	movs	r2, #1
 8019dfc:	755a      	strb	r2, [r3, #21]
 8019dfe:	2301      	movs	r3, #1
 8019e00:	e100      	b.n	801a004 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8019e02:	68fb      	ldr	r3, [r7, #12]
 8019e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019e06:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8019e08:	68fb      	ldr	r3, [r7, #12]
 8019e0a:	689b      	ldr	r3, [r3, #8]
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d102      	bne.n	8019e16 <f_write+0x132>
 8019e10:	68fb      	ldr	r3, [r7, #12]
 8019e12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019e14:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8019e16:	68fb      	ldr	r3, [r7, #12]
 8019e18:	7d1b      	ldrb	r3, [r3, #20]
 8019e1a:	b25b      	sxtb	r3, r3
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	da18      	bge.n	8019e52 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019e20:	693b      	ldr	r3, [r7, #16]
 8019e22:	7858      	ldrb	r0, [r3, #1]
 8019e24:	68fb      	ldr	r3, [r7, #12]
 8019e26:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019e2a:	68fb      	ldr	r3, [r7, #12]
 8019e2c:	6a1a      	ldr	r2, [r3, #32]
 8019e2e:	2301      	movs	r3, #1
 8019e30:	f7fd fbce 	bl	80175d0 <disk_write>
 8019e34:	4603      	mov	r3, r0
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	d004      	beq.n	8019e44 <f_write+0x160>
 8019e3a:	68fb      	ldr	r3, [r7, #12]
 8019e3c:	2201      	movs	r2, #1
 8019e3e:	755a      	strb	r2, [r3, #21]
 8019e40:	2301      	movs	r3, #1
 8019e42:	e0df      	b.n	801a004 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019e44:	68fb      	ldr	r3, [r7, #12]
 8019e46:	7d1b      	ldrb	r3, [r3, #20]
 8019e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019e4c:	b2da      	uxtb	r2, r3
 8019e4e:	68fb      	ldr	r3, [r7, #12]
 8019e50:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8019e52:	693a      	ldr	r2, [r7, #16]
 8019e54:	68fb      	ldr	r3, [r7, #12]
 8019e56:	69db      	ldr	r3, [r3, #28]
 8019e58:	4619      	mov	r1, r3
 8019e5a:	4610      	mov	r0, r2
 8019e5c:	f7fd ff44 	bl	8017ce8 <clust2sect>
 8019e60:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8019e62:	697b      	ldr	r3, [r7, #20]
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	d104      	bne.n	8019e72 <f_write+0x18e>
 8019e68:	68fb      	ldr	r3, [r7, #12]
 8019e6a:	2202      	movs	r2, #2
 8019e6c:	755a      	strb	r2, [r3, #21]
 8019e6e:	2302      	movs	r3, #2
 8019e70:	e0c8      	b.n	801a004 <f_write+0x320>
			sect += csect;
 8019e72:	697a      	ldr	r2, [r7, #20]
 8019e74:	69bb      	ldr	r3, [r7, #24]
 8019e76:	4413      	add	r3, r2
 8019e78:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8019e7a:	693b      	ldr	r3, [r7, #16]
 8019e7c:	899b      	ldrh	r3, [r3, #12]
 8019e7e:	461a      	mov	r2, r3
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	fbb3 f3f2 	udiv	r3, r3, r2
 8019e86:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8019e88:	6a3b      	ldr	r3, [r7, #32]
 8019e8a:	2b00      	cmp	r3, #0
 8019e8c:	d043      	beq.n	8019f16 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8019e8e:	69ba      	ldr	r2, [r7, #24]
 8019e90:	6a3b      	ldr	r3, [r7, #32]
 8019e92:	4413      	add	r3, r2
 8019e94:	693a      	ldr	r2, [r7, #16]
 8019e96:	8952      	ldrh	r2, [r2, #10]
 8019e98:	4293      	cmp	r3, r2
 8019e9a:	d905      	bls.n	8019ea8 <f_write+0x1c4>
					cc = fs->csize - csect;
 8019e9c:	693b      	ldr	r3, [r7, #16]
 8019e9e:	895b      	ldrh	r3, [r3, #10]
 8019ea0:	461a      	mov	r2, r3
 8019ea2:	69bb      	ldr	r3, [r7, #24]
 8019ea4:	1ad3      	subs	r3, r2, r3
 8019ea6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019ea8:	693b      	ldr	r3, [r7, #16]
 8019eaa:	7858      	ldrb	r0, [r3, #1]
 8019eac:	6a3b      	ldr	r3, [r7, #32]
 8019eae:	697a      	ldr	r2, [r7, #20]
 8019eb0:	69f9      	ldr	r1, [r7, #28]
 8019eb2:	f7fd fb8d 	bl	80175d0 <disk_write>
 8019eb6:	4603      	mov	r3, r0
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	d004      	beq.n	8019ec6 <f_write+0x1e2>
 8019ebc:	68fb      	ldr	r3, [r7, #12]
 8019ebe:	2201      	movs	r2, #1
 8019ec0:	755a      	strb	r2, [r3, #21]
 8019ec2:	2301      	movs	r3, #1
 8019ec4:	e09e      	b.n	801a004 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8019ec6:	68fb      	ldr	r3, [r7, #12]
 8019ec8:	6a1a      	ldr	r2, [r3, #32]
 8019eca:	697b      	ldr	r3, [r7, #20]
 8019ecc:	1ad3      	subs	r3, r2, r3
 8019ece:	6a3a      	ldr	r2, [r7, #32]
 8019ed0:	429a      	cmp	r2, r3
 8019ed2:	d918      	bls.n	8019f06 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8019ed4:	68fb      	ldr	r3, [r7, #12]
 8019ed6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8019eda:	68fb      	ldr	r3, [r7, #12]
 8019edc:	6a1a      	ldr	r2, [r3, #32]
 8019ede:	697b      	ldr	r3, [r7, #20]
 8019ee0:	1ad3      	subs	r3, r2, r3
 8019ee2:	693a      	ldr	r2, [r7, #16]
 8019ee4:	8992      	ldrh	r2, [r2, #12]
 8019ee6:	fb02 f303 	mul.w	r3, r2, r3
 8019eea:	69fa      	ldr	r2, [r7, #28]
 8019eec:	18d1      	adds	r1, r2, r3
 8019eee:	693b      	ldr	r3, [r7, #16]
 8019ef0:	899b      	ldrh	r3, [r3, #12]
 8019ef2:	461a      	mov	r2, r3
 8019ef4:	f7fd fc2c 	bl	8017750 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8019ef8:	68fb      	ldr	r3, [r7, #12]
 8019efa:	7d1b      	ldrb	r3, [r3, #20]
 8019efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019f00:	b2da      	uxtb	r2, r3
 8019f02:	68fb      	ldr	r3, [r7, #12]
 8019f04:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8019f06:	693b      	ldr	r3, [r7, #16]
 8019f08:	899b      	ldrh	r3, [r3, #12]
 8019f0a:	461a      	mov	r2, r3
 8019f0c:	6a3b      	ldr	r3, [r7, #32]
 8019f0e:	fb02 f303 	mul.w	r3, r2, r3
 8019f12:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8019f14:	e04b      	b.n	8019fae <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8019f16:	68fb      	ldr	r3, [r7, #12]
 8019f18:	6a1b      	ldr	r3, [r3, #32]
 8019f1a:	697a      	ldr	r2, [r7, #20]
 8019f1c:	429a      	cmp	r2, r3
 8019f1e:	d016      	beq.n	8019f4e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8019f20:	68fb      	ldr	r3, [r7, #12]
 8019f22:	699a      	ldr	r2, [r3, #24]
 8019f24:	68fb      	ldr	r3, [r7, #12]
 8019f26:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8019f28:	429a      	cmp	r2, r3
 8019f2a:	d210      	bcs.n	8019f4e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8019f2c:	693b      	ldr	r3, [r7, #16]
 8019f2e:	7858      	ldrb	r0, [r3, #1]
 8019f30:	68fb      	ldr	r3, [r7, #12]
 8019f32:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019f36:	2301      	movs	r3, #1
 8019f38:	697a      	ldr	r2, [r7, #20]
 8019f3a:	f7fd fb29 	bl	8017590 <disk_read>
 8019f3e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	d004      	beq.n	8019f4e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8019f44:	68fb      	ldr	r3, [r7, #12]
 8019f46:	2201      	movs	r2, #1
 8019f48:	755a      	strb	r2, [r3, #21]
 8019f4a:	2301      	movs	r3, #1
 8019f4c:	e05a      	b.n	801a004 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8019f4e:	68fb      	ldr	r3, [r7, #12]
 8019f50:	697a      	ldr	r2, [r7, #20]
 8019f52:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8019f54:	693b      	ldr	r3, [r7, #16]
 8019f56:	899b      	ldrh	r3, [r3, #12]
 8019f58:	4618      	mov	r0, r3
 8019f5a:	68fb      	ldr	r3, [r7, #12]
 8019f5c:	699b      	ldr	r3, [r3, #24]
 8019f5e:	693a      	ldr	r2, [r7, #16]
 8019f60:	8992      	ldrh	r2, [r2, #12]
 8019f62:	fbb3 f1f2 	udiv	r1, r3, r2
 8019f66:	fb01 f202 	mul.w	r2, r1, r2
 8019f6a:	1a9b      	subs	r3, r3, r2
 8019f6c:	1ac3      	subs	r3, r0, r3
 8019f6e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8019f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	429a      	cmp	r2, r3
 8019f76:	d901      	bls.n	8019f7c <f_write+0x298>
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8019f7c:	68fb      	ldr	r3, [r7, #12]
 8019f7e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019f82:	68fb      	ldr	r3, [r7, #12]
 8019f84:	699b      	ldr	r3, [r3, #24]
 8019f86:	693a      	ldr	r2, [r7, #16]
 8019f88:	8992      	ldrh	r2, [r2, #12]
 8019f8a:	fbb3 f0f2 	udiv	r0, r3, r2
 8019f8e:	fb00 f202 	mul.w	r2, r0, r2
 8019f92:	1a9b      	subs	r3, r3, r2
 8019f94:	440b      	add	r3, r1
 8019f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f98:	69f9      	ldr	r1, [r7, #28]
 8019f9a:	4618      	mov	r0, r3
 8019f9c:	f7fd fbd8 	bl	8017750 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8019fa0:	68fb      	ldr	r3, [r7, #12]
 8019fa2:	7d1b      	ldrb	r3, [r3, #20]
 8019fa4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8019fa8:	b2da      	uxtb	r2, r3
 8019faa:	68fb      	ldr	r3, [r7, #12]
 8019fac:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8019fae:	69fa      	ldr	r2, [r7, #28]
 8019fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fb2:	4413      	add	r3, r2
 8019fb4:	61fb      	str	r3, [r7, #28]
 8019fb6:	68fb      	ldr	r3, [r7, #12]
 8019fb8:	699a      	ldr	r2, [r3, #24]
 8019fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fbc:	441a      	add	r2, r3
 8019fbe:	68fb      	ldr	r3, [r7, #12]
 8019fc0:	619a      	str	r2, [r3, #24]
 8019fc2:	68fb      	ldr	r3, [r7, #12]
 8019fc4:	68da      	ldr	r2, [r3, #12]
 8019fc6:	68fb      	ldr	r3, [r7, #12]
 8019fc8:	699b      	ldr	r3, [r3, #24]
 8019fca:	429a      	cmp	r2, r3
 8019fcc:	bf38      	it	cc
 8019fce:	461a      	movcc	r2, r3
 8019fd0:	68fb      	ldr	r3, [r7, #12]
 8019fd2:	60da      	str	r2, [r3, #12]
 8019fd4:	683b      	ldr	r3, [r7, #0]
 8019fd6:	681a      	ldr	r2, [r3, #0]
 8019fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fda:	441a      	add	r2, r3
 8019fdc:	683b      	ldr	r3, [r7, #0]
 8019fde:	601a      	str	r2, [r3, #0]
 8019fe0:	687a      	ldr	r2, [r7, #4]
 8019fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fe4:	1ad3      	subs	r3, r2, r3
 8019fe6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	f47f aeb5 	bne.w	8019d5a <f_write+0x76>
 8019ff0:	e000      	b.n	8019ff4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019ff2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8019ff4:	68fb      	ldr	r3, [r7, #12]
 8019ff6:	7d1b      	ldrb	r3, [r3, #20]
 8019ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019ffc:	b2da      	uxtb	r2, r3
 8019ffe:	68fb      	ldr	r3, [r7, #12]
 801a000:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801a002:	2300      	movs	r3, #0
}
 801a004:	4618      	mov	r0, r3
 801a006:	3730      	adds	r7, #48	; 0x30
 801a008:	46bd      	mov	sp, r7
 801a00a:	bd80      	pop	{r7, pc}

0801a00c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801a00c:	b580      	push	{r7, lr}
 801a00e:	b086      	sub	sp, #24
 801a010:	af00      	add	r7, sp, #0
 801a012:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	f107 0208 	add.w	r2, r7, #8
 801a01a:	4611      	mov	r1, r2
 801a01c:	4618      	mov	r0, r3
 801a01e:	f7ff fc19 	bl	8019854 <validate>
 801a022:	4603      	mov	r3, r0
 801a024:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801a026:	7dfb      	ldrb	r3, [r7, #23]
 801a028:	2b00      	cmp	r3, #0
 801a02a:	d168      	bne.n	801a0fe <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801a02c:	687b      	ldr	r3, [r7, #4]
 801a02e:	7d1b      	ldrb	r3, [r3, #20]
 801a030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a034:	2b00      	cmp	r3, #0
 801a036:	d062      	beq.n	801a0fe <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	7d1b      	ldrb	r3, [r3, #20]
 801a03c:	b25b      	sxtb	r3, r3
 801a03e:	2b00      	cmp	r3, #0
 801a040:	da15      	bge.n	801a06e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801a042:	68bb      	ldr	r3, [r7, #8]
 801a044:	7858      	ldrb	r0, [r3, #1]
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801a04c:	687b      	ldr	r3, [r7, #4]
 801a04e:	6a1a      	ldr	r2, [r3, #32]
 801a050:	2301      	movs	r3, #1
 801a052:	f7fd fabd 	bl	80175d0 <disk_write>
 801a056:	4603      	mov	r3, r0
 801a058:	2b00      	cmp	r3, #0
 801a05a:	d001      	beq.n	801a060 <f_sync+0x54>
 801a05c:	2301      	movs	r3, #1
 801a05e:	e04f      	b.n	801a100 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	7d1b      	ldrb	r3, [r3, #20]
 801a064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a068:	b2da      	uxtb	r2, r3
 801a06a:	687b      	ldr	r3, [r7, #4]
 801a06c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801a06e:	f7fb f865 	bl	801513c <get_fattime>
 801a072:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801a074:	68ba      	ldr	r2, [r7, #8]
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a07a:	4619      	mov	r1, r3
 801a07c:	4610      	mov	r0, r2
 801a07e:	f7fd fd95 	bl	8017bac <move_window>
 801a082:	4603      	mov	r3, r0
 801a084:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801a086:	7dfb      	ldrb	r3, [r7, #23]
 801a088:	2b00      	cmp	r3, #0
 801a08a:	d138      	bne.n	801a0fe <f_sync+0xf2>
					dir = fp->dir_ptr;
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a090:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801a092:	68fb      	ldr	r3, [r7, #12]
 801a094:	330b      	adds	r3, #11
 801a096:	781a      	ldrb	r2, [r3, #0]
 801a098:	68fb      	ldr	r3, [r7, #12]
 801a09a:	330b      	adds	r3, #11
 801a09c:	f042 0220 	orr.w	r2, r2, #32
 801a0a0:	b2d2      	uxtb	r2, r2
 801a0a2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	6818      	ldr	r0, [r3, #0]
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	689b      	ldr	r3, [r3, #8]
 801a0ac:	461a      	mov	r2, r3
 801a0ae:	68f9      	ldr	r1, [r7, #12]
 801a0b0:	f7fe fb21 	bl	80186f6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801a0b4:	68fb      	ldr	r3, [r7, #12]
 801a0b6:	f103 021c 	add.w	r2, r3, #28
 801a0ba:	687b      	ldr	r3, [r7, #4]
 801a0bc:	68db      	ldr	r3, [r3, #12]
 801a0be:	4619      	mov	r1, r3
 801a0c0:	4610      	mov	r0, r2
 801a0c2:	f7fd fb19 	bl	80176f8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801a0c6:	68fb      	ldr	r3, [r7, #12]
 801a0c8:	3316      	adds	r3, #22
 801a0ca:	6939      	ldr	r1, [r7, #16]
 801a0cc:	4618      	mov	r0, r3
 801a0ce:	f7fd fb13 	bl	80176f8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801a0d2:	68fb      	ldr	r3, [r7, #12]
 801a0d4:	3312      	adds	r3, #18
 801a0d6:	2100      	movs	r1, #0
 801a0d8:	4618      	mov	r0, r3
 801a0da:	f7fd faf2 	bl	80176c2 <st_word>
					fs->wflag = 1;
 801a0de:	68bb      	ldr	r3, [r7, #8]
 801a0e0:	2201      	movs	r2, #1
 801a0e2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801a0e4:	68bb      	ldr	r3, [r7, #8]
 801a0e6:	4618      	mov	r0, r3
 801a0e8:	f7fd fd8e 	bl	8017c08 <sync_fs>
 801a0ec:	4603      	mov	r3, r0
 801a0ee:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	7d1b      	ldrb	r3, [r3, #20]
 801a0f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a0f8:	b2da      	uxtb	r2, r3
 801a0fa:	687b      	ldr	r3, [r7, #4]
 801a0fc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801a0fe:	7dfb      	ldrb	r3, [r7, #23]
}
 801a100:	4618      	mov	r0, r3
 801a102:	3718      	adds	r7, #24
 801a104:	46bd      	mov	sp, r7
 801a106:	bd80      	pop	{r7, pc}

0801a108 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801a108:	b580      	push	{r7, lr}
 801a10a:	b084      	sub	sp, #16
 801a10c:	af00      	add	r7, sp, #0
 801a10e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801a110:	6878      	ldr	r0, [r7, #4]
 801a112:	f7ff ff7b 	bl	801a00c <f_sync>
 801a116:	4603      	mov	r3, r0
 801a118:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801a11a:	7bfb      	ldrb	r3, [r7, #15]
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	d118      	bne.n	801a152 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	f107 0208 	add.w	r2, r7, #8
 801a126:	4611      	mov	r1, r2
 801a128:	4618      	mov	r0, r3
 801a12a:	f7ff fb93 	bl	8019854 <validate>
 801a12e:	4603      	mov	r3, r0
 801a130:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801a132:	7bfb      	ldrb	r3, [r7, #15]
 801a134:	2b00      	cmp	r3, #0
 801a136:	d10c      	bne.n	801a152 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	691b      	ldr	r3, [r3, #16]
 801a13c:	4618      	mov	r0, r3
 801a13e:	f7fd fc91 	bl	8017a64 <dec_lock>
 801a142:	4603      	mov	r3, r0
 801a144:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801a146:	7bfb      	ldrb	r3, [r7, #15]
 801a148:	2b00      	cmp	r3, #0
 801a14a:	d102      	bne.n	801a152 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801a14c:	687b      	ldr	r3, [r7, #4]
 801a14e:	2200      	movs	r2, #0
 801a150:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801a152:	7bfb      	ldrb	r3, [r7, #15]
}
 801a154:	4618      	mov	r0, r3
 801a156:	3710      	adds	r7, #16
 801a158:	46bd      	mov	sp, r7
 801a15a:	bd80      	pop	{r7, pc}

0801a15c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 801a15c:	b580      	push	{r7, lr}
 801a15e:	b084      	sub	sp, #16
 801a160:	af00      	add	r7, sp, #0
 801a162:	6078      	str	r0, [r7, #4]
 801a164:	460b      	mov	r3, r1
 801a166:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 801a168:	78fb      	ldrb	r3, [r7, #3]
 801a16a:	2b0a      	cmp	r3, #10
 801a16c:	d103      	bne.n	801a176 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801a16e:	210d      	movs	r1, #13
 801a170:	6878      	ldr	r0, [r7, #4]
 801a172:	f7ff fff3 	bl	801a15c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	685b      	ldr	r3, [r3, #4]
 801a17a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 801a17c:	68fb      	ldr	r3, [r7, #12]
 801a17e:	2b00      	cmp	r3, #0
 801a180:	db25      	blt.n	801a1ce <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 801a182:	68fb      	ldr	r3, [r7, #12]
 801a184:	1c5a      	adds	r2, r3, #1
 801a186:	60fa      	str	r2, [r7, #12]
 801a188:	687a      	ldr	r2, [r7, #4]
 801a18a:	4413      	add	r3, r2
 801a18c:	78fa      	ldrb	r2, [r7, #3]
 801a18e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801a190:	68fb      	ldr	r3, [r7, #12]
 801a192:	2b3c      	cmp	r3, #60	; 0x3c
 801a194:	dd12      	ble.n	801a1bc <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	6818      	ldr	r0, [r3, #0]
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	f103 010c 	add.w	r1, r3, #12
 801a1a0:	68fa      	ldr	r2, [r7, #12]
 801a1a2:	f107 0308 	add.w	r3, r7, #8
 801a1a6:	f7ff fd9d 	bl	8019ce4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801a1aa:	68ba      	ldr	r2, [r7, #8]
 801a1ac:	68fb      	ldr	r3, [r7, #12]
 801a1ae:	429a      	cmp	r2, r3
 801a1b0:	d101      	bne.n	801a1b6 <putc_bfd+0x5a>
 801a1b2:	2300      	movs	r3, #0
 801a1b4:	e001      	b.n	801a1ba <putc_bfd+0x5e>
 801a1b6:	f04f 33ff 	mov.w	r3, #4294967295
 801a1ba:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	68fa      	ldr	r2, [r7, #12]
 801a1c0:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801a1c2:	687b      	ldr	r3, [r7, #4]
 801a1c4:	689b      	ldr	r3, [r3, #8]
 801a1c6:	1c5a      	adds	r2, r3, #1
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	609a      	str	r2, [r3, #8]
 801a1cc:	e000      	b.n	801a1d0 <putc_bfd+0x74>
	if (i < 0) return;
 801a1ce:	bf00      	nop
}
 801a1d0:	3710      	adds	r7, #16
 801a1d2:	46bd      	mov	sp, r7
 801a1d4:	bd80      	pop	{r7, pc}

0801a1d6 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801a1d6:	b580      	push	{r7, lr}
 801a1d8:	b084      	sub	sp, #16
 801a1da:	af00      	add	r7, sp, #0
 801a1dc:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	685b      	ldr	r3, [r3, #4]
 801a1e2:	2b00      	cmp	r3, #0
 801a1e4:	db16      	blt.n	801a214 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	6818      	ldr	r0, [r3, #0]
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	f103 010c 	add.w	r1, r3, #12
 801a1f0:	687b      	ldr	r3, [r7, #4]
 801a1f2:	685b      	ldr	r3, [r3, #4]
 801a1f4:	461a      	mov	r2, r3
 801a1f6:	f107 030c 	add.w	r3, r7, #12
 801a1fa:	f7ff fd73 	bl	8019ce4 <f_write>
 801a1fe:	4603      	mov	r3, r0
 801a200:	2b00      	cmp	r3, #0
 801a202:	d107      	bne.n	801a214 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	685b      	ldr	r3, [r3, #4]
 801a208:	68fa      	ldr	r2, [r7, #12]
 801a20a:	4293      	cmp	r3, r2
 801a20c:	d102      	bne.n	801a214 <putc_flush+0x3e>
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	689b      	ldr	r3, [r3, #8]
 801a212:	e001      	b.n	801a218 <putc_flush+0x42>
	return EOF;
 801a214:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a218:	4618      	mov	r0, r3
 801a21a:	3710      	adds	r7, #16
 801a21c:	46bd      	mov	sp, r7
 801a21e:	bd80      	pop	{r7, pc}

0801a220 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 801a220:	b480      	push	{r7}
 801a222:	b083      	sub	sp, #12
 801a224:	af00      	add	r7, sp, #0
 801a226:	6078      	str	r0, [r7, #4]
 801a228:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	683a      	ldr	r2, [r7, #0]
 801a22e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	2200      	movs	r2, #0
 801a234:	605a      	str	r2, [r3, #4]
 801a236:	687b      	ldr	r3, [r7, #4]
 801a238:	685a      	ldr	r2, [r3, #4]
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	609a      	str	r2, [r3, #8]
}
 801a23e:	bf00      	nop
 801a240:	370c      	adds	r7, #12
 801a242:	46bd      	mov	sp, r7
 801a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a248:	4770      	bx	lr

0801a24a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 801a24a:	b580      	push	{r7, lr}
 801a24c:	b096      	sub	sp, #88	; 0x58
 801a24e:	af00      	add	r7, sp, #0
 801a250:	6078      	str	r0, [r7, #4]
 801a252:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 801a254:	f107 030c 	add.w	r3, r7, #12
 801a258:	6839      	ldr	r1, [r7, #0]
 801a25a:	4618      	mov	r0, r3
 801a25c:	f7ff ffe0 	bl	801a220 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 801a260:	e009      	b.n	801a276 <f_puts+0x2c>
 801a262:	687b      	ldr	r3, [r7, #4]
 801a264:	1c5a      	adds	r2, r3, #1
 801a266:	607a      	str	r2, [r7, #4]
 801a268:	781a      	ldrb	r2, [r3, #0]
 801a26a:	f107 030c 	add.w	r3, r7, #12
 801a26e:	4611      	mov	r1, r2
 801a270:	4618      	mov	r0, r3
 801a272:	f7ff ff73 	bl	801a15c <putc_bfd>
 801a276:	687b      	ldr	r3, [r7, #4]
 801a278:	781b      	ldrb	r3, [r3, #0]
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	d1f1      	bne.n	801a262 <f_puts+0x18>
	return putc_flush(&pb);
 801a27e:	f107 030c 	add.w	r3, r7, #12
 801a282:	4618      	mov	r0, r3
 801a284:	f7ff ffa7 	bl	801a1d6 <putc_flush>
 801a288:	4603      	mov	r3, r0
}
 801a28a:	4618      	mov	r0, r3
 801a28c:	3758      	adds	r7, #88	; 0x58
 801a28e:	46bd      	mov	sp, r7
 801a290:	bd80      	pop	{r7, pc}
	...

0801a294 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801a294:	b480      	push	{r7}
 801a296:	b087      	sub	sp, #28
 801a298:	af00      	add	r7, sp, #0
 801a29a:	60f8      	str	r0, [r7, #12]
 801a29c:	60b9      	str	r1, [r7, #8]
 801a29e:	4613      	mov	r3, r2
 801a2a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801a2a2:	2301      	movs	r3, #1
 801a2a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801a2a6:	2300      	movs	r3, #0
 801a2a8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801a2aa:	4b1f      	ldr	r3, [pc, #124]	; (801a328 <FATFS_LinkDriverEx+0x94>)
 801a2ac:	7a5b      	ldrb	r3, [r3, #9]
 801a2ae:	b2db      	uxtb	r3, r3
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d131      	bne.n	801a318 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801a2b4:	4b1c      	ldr	r3, [pc, #112]	; (801a328 <FATFS_LinkDriverEx+0x94>)
 801a2b6:	7a5b      	ldrb	r3, [r3, #9]
 801a2b8:	b2db      	uxtb	r3, r3
 801a2ba:	461a      	mov	r2, r3
 801a2bc:	4b1a      	ldr	r3, [pc, #104]	; (801a328 <FATFS_LinkDriverEx+0x94>)
 801a2be:	2100      	movs	r1, #0
 801a2c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801a2c2:	4b19      	ldr	r3, [pc, #100]	; (801a328 <FATFS_LinkDriverEx+0x94>)
 801a2c4:	7a5b      	ldrb	r3, [r3, #9]
 801a2c6:	b2db      	uxtb	r3, r3
 801a2c8:	4a17      	ldr	r2, [pc, #92]	; (801a328 <FATFS_LinkDriverEx+0x94>)
 801a2ca:	009b      	lsls	r3, r3, #2
 801a2cc:	4413      	add	r3, r2
 801a2ce:	68fa      	ldr	r2, [r7, #12]
 801a2d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801a2d2:	4b15      	ldr	r3, [pc, #84]	; (801a328 <FATFS_LinkDriverEx+0x94>)
 801a2d4:	7a5b      	ldrb	r3, [r3, #9]
 801a2d6:	b2db      	uxtb	r3, r3
 801a2d8:	461a      	mov	r2, r3
 801a2da:	4b13      	ldr	r3, [pc, #76]	; (801a328 <FATFS_LinkDriverEx+0x94>)
 801a2dc:	4413      	add	r3, r2
 801a2de:	79fa      	ldrb	r2, [r7, #7]
 801a2e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801a2e2:	4b11      	ldr	r3, [pc, #68]	; (801a328 <FATFS_LinkDriverEx+0x94>)
 801a2e4:	7a5b      	ldrb	r3, [r3, #9]
 801a2e6:	b2db      	uxtb	r3, r3
 801a2e8:	1c5a      	adds	r2, r3, #1
 801a2ea:	b2d1      	uxtb	r1, r2
 801a2ec:	4a0e      	ldr	r2, [pc, #56]	; (801a328 <FATFS_LinkDriverEx+0x94>)
 801a2ee:	7251      	strb	r1, [r2, #9]
 801a2f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801a2f2:	7dbb      	ldrb	r3, [r7, #22]
 801a2f4:	3330      	adds	r3, #48	; 0x30
 801a2f6:	b2da      	uxtb	r2, r3
 801a2f8:	68bb      	ldr	r3, [r7, #8]
 801a2fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801a2fc:	68bb      	ldr	r3, [r7, #8]
 801a2fe:	3301      	adds	r3, #1
 801a300:	223a      	movs	r2, #58	; 0x3a
 801a302:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801a304:	68bb      	ldr	r3, [r7, #8]
 801a306:	3302      	adds	r3, #2
 801a308:	222f      	movs	r2, #47	; 0x2f
 801a30a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801a30c:	68bb      	ldr	r3, [r7, #8]
 801a30e:	3303      	adds	r3, #3
 801a310:	2200      	movs	r2, #0
 801a312:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801a314:	2300      	movs	r3, #0
 801a316:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801a318:	7dfb      	ldrb	r3, [r7, #23]
}
 801a31a:	4618      	mov	r0, r3
 801a31c:	371c      	adds	r7, #28
 801a31e:	46bd      	mov	sp, r7
 801a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a324:	4770      	bx	lr
 801a326:	bf00      	nop
 801a328:	240018d0 	.word	0x240018d0

0801a32c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801a32c:	b580      	push	{r7, lr}
 801a32e:	b082      	sub	sp, #8
 801a330:	af00      	add	r7, sp, #0
 801a332:	6078      	str	r0, [r7, #4]
 801a334:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801a336:	2200      	movs	r2, #0
 801a338:	6839      	ldr	r1, [r7, #0]
 801a33a:	6878      	ldr	r0, [r7, #4]
 801a33c:	f7ff ffaa 	bl	801a294 <FATFS_LinkDriverEx>
 801a340:	4603      	mov	r3, r0
}
 801a342:	4618      	mov	r0, r3
 801a344:	3708      	adds	r7, #8
 801a346:	46bd      	mov	sp, r7
 801a348:	bd80      	pop	{r7, pc}
	...

0801a34c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801a34c:	b480      	push	{r7}
 801a34e:	b085      	sub	sp, #20
 801a350:	af00      	add	r7, sp, #0
 801a352:	4603      	mov	r3, r0
 801a354:	6039      	str	r1, [r7, #0]
 801a356:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801a358:	88fb      	ldrh	r3, [r7, #6]
 801a35a:	2b7f      	cmp	r3, #127	; 0x7f
 801a35c:	d802      	bhi.n	801a364 <ff_convert+0x18>
		c = chr;
 801a35e:	88fb      	ldrh	r3, [r7, #6]
 801a360:	81fb      	strh	r3, [r7, #14]
 801a362:	e025      	b.n	801a3b0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801a364:	683b      	ldr	r3, [r7, #0]
 801a366:	2b00      	cmp	r3, #0
 801a368:	d00b      	beq.n	801a382 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801a36a:	88fb      	ldrh	r3, [r7, #6]
 801a36c:	2bff      	cmp	r3, #255	; 0xff
 801a36e:	d805      	bhi.n	801a37c <ff_convert+0x30>
 801a370:	88fb      	ldrh	r3, [r7, #6]
 801a372:	3b80      	subs	r3, #128	; 0x80
 801a374:	4a12      	ldr	r2, [pc, #72]	; (801a3c0 <ff_convert+0x74>)
 801a376:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a37a:	e000      	b.n	801a37e <ff_convert+0x32>
 801a37c:	2300      	movs	r3, #0
 801a37e:	81fb      	strh	r3, [r7, #14]
 801a380:	e016      	b.n	801a3b0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801a382:	2300      	movs	r3, #0
 801a384:	81fb      	strh	r3, [r7, #14]
 801a386:	e009      	b.n	801a39c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801a388:	89fb      	ldrh	r3, [r7, #14]
 801a38a:	4a0d      	ldr	r2, [pc, #52]	; (801a3c0 <ff_convert+0x74>)
 801a38c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a390:	88fa      	ldrh	r2, [r7, #6]
 801a392:	429a      	cmp	r2, r3
 801a394:	d006      	beq.n	801a3a4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801a396:	89fb      	ldrh	r3, [r7, #14]
 801a398:	3301      	adds	r3, #1
 801a39a:	81fb      	strh	r3, [r7, #14]
 801a39c:	89fb      	ldrh	r3, [r7, #14]
 801a39e:	2b7f      	cmp	r3, #127	; 0x7f
 801a3a0:	d9f2      	bls.n	801a388 <ff_convert+0x3c>
 801a3a2:	e000      	b.n	801a3a6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801a3a4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801a3a6:	89fb      	ldrh	r3, [r7, #14]
 801a3a8:	3380      	adds	r3, #128	; 0x80
 801a3aa:	b29b      	uxth	r3, r3
 801a3ac:	b2db      	uxtb	r3, r3
 801a3ae:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801a3b0:	89fb      	ldrh	r3, [r7, #14]
}
 801a3b2:	4618      	mov	r0, r3
 801a3b4:	3714      	adds	r7, #20
 801a3b6:	46bd      	mov	sp, r7
 801a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3bc:	4770      	bx	lr
 801a3be:	bf00      	nop
 801a3c0:	08020124 	.word	0x08020124

0801a3c4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801a3c4:	b480      	push	{r7}
 801a3c6:	b087      	sub	sp, #28
 801a3c8:	af00      	add	r7, sp, #0
 801a3ca:	4603      	mov	r3, r0
 801a3cc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801a3ce:	88fb      	ldrh	r3, [r7, #6]
 801a3d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a3d4:	d201      	bcs.n	801a3da <ff_wtoupper+0x16>
 801a3d6:	4b3e      	ldr	r3, [pc, #248]	; (801a4d0 <ff_wtoupper+0x10c>)
 801a3d8:	e000      	b.n	801a3dc <ff_wtoupper+0x18>
 801a3da:	4b3e      	ldr	r3, [pc, #248]	; (801a4d4 <ff_wtoupper+0x110>)
 801a3dc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801a3de:	697b      	ldr	r3, [r7, #20]
 801a3e0:	1c9a      	adds	r2, r3, #2
 801a3e2:	617a      	str	r2, [r7, #20]
 801a3e4:	881b      	ldrh	r3, [r3, #0]
 801a3e6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801a3e8:	8a7b      	ldrh	r3, [r7, #18]
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	d068      	beq.n	801a4c0 <ff_wtoupper+0xfc>
 801a3ee:	88fa      	ldrh	r2, [r7, #6]
 801a3f0:	8a7b      	ldrh	r3, [r7, #18]
 801a3f2:	429a      	cmp	r2, r3
 801a3f4:	d364      	bcc.n	801a4c0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801a3f6:	697b      	ldr	r3, [r7, #20]
 801a3f8:	1c9a      	adds	r2, r3, #2
 801a3fa:	617a      	str	r2, [r7, #20]
 801a3fc:	881b      	ldrh	r3, [r3, #0]
 801a3fe:	823b      	strh	r3, [r7, #16]
 801a400:	8a3b      	ldrh	r3, [r7, #16]
 801a402:	0a1b      	lsrs	r3, r3, #8
 801a404:	81fb      	strh	r3, [r7, #14]
 801a406:	8a3b      	ldrh	r3, [r7, #16]
 801a408:	b2db      	uxtb	r3, r3
 801a40a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801a40c:	88fa      	ldrh	r2, [r7, #6]
 801a40e:	8a79      	ldrh	r1, [r7, #18]
 801a410:	8a3b      	ldrh	r3, [r7, #16]
 801a412:	440b      	add	r3, r1
 801a414:	429a      	cmp	r2, r3
 801a416:	da49      	bge.n	801a4ac <ff_wtoupper+0xe8>
			switch (cmd) {
 801a418:	89fb      	ldrh	r3, [r7, #14]
 801a41a:	2b08      	cmp	r3, #8
 801a41c:	d84f      	bhi.n	801a4be <ff_wtoupper+0xfa>
 801a41e:	a201      	add	r2, pc, #4	; (adr r2, 801a424 <ff_wtoupper+0x60>)
 801a420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a424:	0801a449 	.word	0x0801a449
 801a428:	0801a45b 	.word	0x0801a45b
 801a42c:	0801a471 	.word	0x0801a471
 801a430:	0801a479 	.word	0x0801a479
 801a434:	0801a481 	.word	0x0801a481
 801a438:	0801a489 	.word	0x0801a489
 801a43c:	0801a491 	.word	0x0801a491
 801a440:	0801a499 	.word	0x0801a499
 801a444:	0801a4a1 	.word	0x0801a4a1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801a448:	88fa      	ldrh	r2, [r7, #6]
 801a44a:	8a7b      	ldrh	r3, [r7, #18]
 801a44c:	1ad3      	subs	r3, r2, r3
 801a44e:	005b      	lsls	r3, r3, #1
 801a450:	697a      	ldr	r2, [r7, #20]
 801a452:	4413      	add	r3, r2
 801a454:	881b      	ldrh	r3, [r3, #0]
 801a456:	80fb      	strh	r3, [r7, #6]
 801a458:	e027      	b.n	801a4aa <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801a45a:	88fa      	ldrh	r2, [r7, #6]
 801a45c:	8a7b      	ldrh	r3, [r7, #18]
 801a45e:	1ad3      	subs	r3, r2, r3
 801a460:	b29b      	uxth	r3, r3
 801a462:	f003 0301 	and.w	r3, r3, #1
 801a466:	b29b      	uxth	r3, r3
 801a468:	88fa      	ldrh	r2, [r7, #6]
 801a46a:	1ad3      	subs	r3, r2, r3
 801a46c:	80fb      	strh	r3, [r7, #6]
 801a46e:	e01c      	b.n	801a4aa <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801a470:	88fb      	ldrh	r3, [r7, #6]
 801a472:	3b10      	subs	r3, #16
 801a474:	80fb      	strh	r3, [r7, #6]
 801a476:	e018      	b.n	801a4aa <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801a478:	88fb      	ldrh	r3, [r7, #6]
 801a47a:	3b20      	subs	r3, #32
 801a47c:	80fb      	strh	r3, [r7, #6]
 801a47e:	e014      	b.n	801a4aa <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801a480:	88fb      	ldrh	r3, [r7, #6]
 801a482:	3b30      	subs	r3, #48	; 0x30
 801a484:	80fb      	strh	r3, [r7, #6]
 801a486:	e010      	b.n	801a4aa <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801a488:	88fb      	ldrh	r3, [r7, #6]
 801a48a:	3b1a      	subs	r3, #26
 801a48c:	80fb      	strh	r3, [r7, #6]
 801a48e:	e00c      	b.n	801a4aa <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801a490:	88fb      	ldrh	r3, [r7, #6]
 801a492:	3308      	adds	r3, #8
 801a494:	80fb      	strh	r3, [r7, #6]
 801a496:	e008      	b.n	801a4aa <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801a498:	88fb      	ldrh	r3, [r7, #6]
 801a49a:	3b50      	subs	r3, #80	; 0x50
 801a49c:	80fb      	strh	r3, [r7, #6]
 801a49e:	e004      	b.n	801a4aa <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801a4a0:	88fb      	ldrh	r3, [r7, #6]
 801a4a2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801a4a6:	80fb      	strh	r3, [r7, #6]
 801a4a8:	bf00      	nop
			}
			break;
 801a4aa:	e008      	b.n	801a4be <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801a4ac:	89fb      	ldrh	r3, [r7, #14]
 801a4ae:	2b00      	cmp	r3, #0
 801a4b0:	d195      	bne.n	801a3de <ff_wtoupper+0x1a>
 801a4b2:	8a3b      	ldrh	r3, [r7, #16]
 801a4b4:	005b      	lsls	r3, r3, #1
 801a4b6:	697a      	ldr	r2, [r7, #20]
 801a4b8:	4413      	add	r3, r2
 801a4ba:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801a4bc:	e78f      	b.n	801a3de <ff_wtoupper+0x1a>
			break;
 801a4be:	bf00      	nop
	}

	return chr;
 801a4c0:	88fb      	ldrh	r3, [r7, #6]
}
 801a4c2:	4618      	mov	r0, r3
 801a4c4:	371c      	adds	r7, #28
 801a4c6:	46bd      	mov	sp, r7
 801a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4cc:	4770      	bx	lr
 801a4ce:	bf00      	nop
 801a4d0:	08020224 	.word	0x08020224
 801a4d4:	08020418 	.word	0x08020418

0801a4d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801a4d8:	b580      	push	{r7, lr}
 801a4da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 801a4dc:	2201      	movs	r2, #1
 801a4de:	4913      	ldr	r1, [pc, #76]	; (801a52c <MX_USB_DEVICE_Init+0x54>)
 801a4e0:	4813      	ldr	r0, [pc, #76]	; (801a530 <MX_USB_DEVICE_Init+0x58>)
 801a4e2:	f7fb fd1d 	bl	8015f20 <USBD_Init>
 801a4e6:	4603      	mov	r3, r0
 801a4e8:	2b00      	cmp	r3, #0
 801a4ea:	d001      	beq.n	801a4f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801a4ec:	f7e8 fd1e 	bl	8002f2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 801a4f0:	4910      	ldr	r1, [pc, #64]	; (801a534 <MX_USB_DEVICE_Init+0x5c>)
 801a4f2:	480f      	ldr	r0, [pc, #60]	; (801a530 <MX_USB_DEVICE_Init+0x58>)
 801a4f4:	f7fb fd44 	bl	8015f80 <USBD_RegisterClass>
 801a4f8:	4603      	mov	r3, r0
 801a4fa:	2b00      	cmp	r3, #0
 801a4fc:	d001      	beq.n	801a502 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801a4fe:	f7e8 fd15 	bl	8002f2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801a502:	490d      	ldr	r1, [pc, #52]	; (801a538 <MX_USB_DEVICE_Init+0x60>)
 801a504:	480a      	ldr	r0, [pc, #40]	; (801a530 <MX_USB_DEVICE_Init+0x58>)
 801a506:	f7fb fc3b 	bl	8015d80 <USBD_CDC_RegisterInterface>
 801a50a:	4603      	mov	r3, r0
 801a50c:	2b00      	cmp	r3, #0
 801a50e:	d001      	beq.n	801a514 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801a510:	f7e8 fd0c 	bl	8002f2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 801a514:	4806      	ldr	r0, [pc, #24]	; (801a530 <MX_USB_DEVICE_Init+0x58>)
 801a516:	f7fb fd69 	bl	8015fec <USBD_Start>
 801a51a:	4603      	mov	r3, r0
 801a51c:	2b00      	cmp	r3, #0
 801a51e:	d001      	beq.n	801a524 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801a520:	f7e8 fd04 	bl	8002f2c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801a524:	f7f0 f994 	bl	800a850 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801a528:	bf00      	nop
 801a52a:	bd80      	pop	{r7, pc}
 801a52c:	240000b0 	.word	0x240000b0
 801a530:	240018dc 	.word	0x240018dc
 801a534:	2400001c 	.word	0x2400001c
 801a538:	2400009c 	.word	0x2400009c

0801a53c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 801a53c:	b580      	push	{r7, lr}
 801a53e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 801a540:	2200      	movs	r2, #0
 801a542:	4905      	ldr	r1, [pc, #20]	; (801a558 <CDC_Init_HS+0x1c>)
 801a544:	4805      	ldr	r0, [pc, #20]	; (801a55c <CDC_Init_HS+0x20>)
 801a546:	f7fb fc35 	bl	8015db4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801a54a:	4905      	ldr	r1, [pc, #20]	; (801a560 <CDC_Init_HS+0x24>)
 801a54c:	4803      	ldr	r0, [pc, #12]	; (801a55c <CDC_Init_HS+0x20>)
 801a54e:	f7fb fc53 	bl	8015df8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801a552:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801a554:	4618      	mov	r0, r3
 801a556:	bd80      	pop	{r7, pc}
 801a558:	240023b8 	.word	0x240023b8
 801a55c:	240018dc 	.word	0x240018dc
 801a560:	24001bb8 	.word	0x24001bb8

0801a564 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801a564:	b480      	push	{r7}
 801a566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 801a568:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801a56a:	4618      	mov	r0, r3
 801a56c:	46bd      	mov	sp, r7
 801a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a572:	4770      	bx	lr

0801a574 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801a574:	b480      	push	{r7}
 801a576:	b083      	sub	sp, #12
 801a578:	af00      	add	r7, sp, #0
 801a57a:	4603      	mov	r3, r0
 801a57c:	6039      	str	r1, [r7, #0]
 801a57e:	71fb      	strb	r3, [r7, #7]
 801a580:	4613      	mov	r3, r2
 801a582:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801a584:	79fb      	ldrb	r3, [r7, #7]
 801a586:	2b23      	cmp	r3, #35	; 0x23
 801a588:	d84a      	bhi.n	801a620 <CDC_Control_HS+0xac>
 801a58a:	a201      	add	r2, pc, #4	; (adr r2, 801a590 <CDC_Control_HS+0x1c>)
 801a58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a590:	0801a621 	.word	0x0801a621
 801a594:	0801a621 	.word	0x0801a621
 801a598:	0801a621 	.word	0x0801a621
 801a59c:	0801a621 	.word	0x0801a621
 801a5a0:	0801a621 	.word	0x0801a621
 801a5a4:	0801a621 	.word	0x0801a621
 801a5a8:	0801a621 	.word	0x0801a621
 801a5ac:	0801a621 	.word	0x0801a621
 801a5b0:	0801a621 	.word	0x0801a621
 801a5b4:	0801a621 	.word	0x0801a621
 801a5b8:	0801a621 	.word	0x0801a621
 801a5bc:	0801a621 	.word	0x0801a621
 801a5c0:	0801a621 	.word	0x0801a621
 801a5c4:	0801a621 	.word	0x0801a621
 801a5c8:	0801a621 	.word	0x0801a621
 801a5cc:	0801a621 	.word	0x0801a621
 801a5d0:	0801a621 	.word	0x0801a621
 801a5d4:	0801a621 	.word	0x0801a621
 801a5d8:	0801a621 	.word	0x0801a621
 801a5dc:	0801a621 	.word	0x0801a621
 801a5e0:	0801a621 	.word	0x0801a621
 801a5e4:	0801a621 	.word	0x0801a621
 801a5e8:	0801a621 	.word	0x0801a621
 801a5ec:	0801a621 	.word	0x0801a621
 801a5f0:	0801a621 	.word	0x0801a621
 801a5f4:	0801a621 	.word	0x0801a621
 801a5f8:	0801a621 	.word	0x0801a621
 801a5fc:	0801a621 	.word	0x0801a621
 801a600:	0801a621 	.word	0x0801a621
 801a604:	0801a621 	.word	0x0801a621
 801a608:	0801a621 	.word	0x0801a621
 801a60c:	0801a621 	.word	0x0801a621
 801a610:	0801a621 	.word	0x0801a621
 801a614:	0801a621 	.word	0x0801a621
 801a618:	0801a621 	.word	0x0801a621
 801a61c:	0801a621 	.word	0x0801a621
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 801a620:	bf00      	nop
  }

  return (USBD_OK);
 801a622:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801a624:	4618      	mov	r0, r3
 801a626:	370c      	adds	r7, #12
 801a628:	46bd      	mov	sp, r7
 801a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a62e:	4770      	bx	lr

0801a630 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 801a630:	b580      	push	{r7, lr}
 801a632:	b082      	sub	sp, #8
 801a634:	af00      	add	r7, sp, #0
 801a636:	6078      	str	r0, [r7, #4]
 801a638:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801a63a:	6879      	ldr	r1, [r7, #4]
 801a63c:	4805      	ldr	r0, [pc, #20]	; (801a654 <CDC_Receive_HS+0x24>)
 801a63e:	f7fb fbdb 	bl	8015df8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801a642:	4804      	ldr	r0, [pc, #16]	; (801a654 <CDC_Receive_HS+0x24>)
 801a644:	f7fb fc36 	bl	8015eb4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801a648:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801a64a:	4618      	mov	r0, r3
 801a64c:	3708      	adds	r7, #8
 801a64e:	46bd      	mov	sp, r7
 801a650:	bd80      	pop	{r7, pc}
 801a652:	bf00      	nop
 801a654:	240018dc 	.word	0x240018dc

0801a658 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 801a658:	b580      	push	{r7, lr}
 801a65a:	b084      	sub	sp, #16
 801a65c:	af00      	add	r7, sp, #0
 801a65e:	6078      	str	r0, [r7, #4]
 801a660:	460b      	mov	r3, r1
 801a662:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801a664:	2300      	movs	r3, #0
 801a666:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 801a668:	4b0d      	ldr	r3, [pc, #52]	; (801a6a0 <CDC_Transmit_HS+0x48>)
 801a66a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801a66e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801a670:	68bb      	ldr	r3, [r7, #8]
 801a672:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801a676:	2b00      	cmp	r3, #0
 801a678:	d001      	beq.n	801a67e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 801a67a:	2301      	movs	r3, #1
 801a67c:	e00b      	b.n	801a696 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 801a67e:	887b      	ldrh	r3, [r7, #2]
 801a680:	461a      	mov	r2, r3
 801a682:	6879      	ldr	r1, [r7, #4]
 801a684:	4806      	ldr	r0, [pc, #24]	; (801a6a0 <CDC_Transmit_HS+0x48>)
 801a686:	f7fb fb95 	bl	8015db4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 801a68a:	4805      	ldr	r0, [pc, #20]	; (801a6a0 <CDC_Transmit_HS+0x48>)
 801a68c:	f7fb fbd2 	bl	8015e34 <USBD_CDC_TransmitPacket>
 801a690:	4603      	mov	r3, r0
 801a692:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801a694:	7bfb      	ldrb	r3, [r7, #15]
}
 801a696:	4618      	mov	r0, r3
 801a698:	3710      	adds	r7, #16
 801a69a:	46bd      	mov	sp, r7
 801a69c:	bd80      	pop	{r7, pc}
 801a69e:	bf00      	nop
 801a6a0:	240018dc 	.word	0x240018dc

0801a6a4 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801a6a4:	b480      	push	{r7}
 801a6a6:	b087      	sub	sp, #28
 801a6a8:	af00      	add	r7, sp, #0
 801a6aa:	60f8      	str	r0, [r7, #12]
 801a6ac:	60b9      	str	r1, [r7, #8]
 801a6ae:	4613      	mov	r3, r2
 801a6b0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801a6b2:	2300      	movs	r3, #0
 801a6b4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801a6b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a6ba:	4618      	mov	r0, r3
 801a6bc:	371c      	adds	r7, #28
 801a6be:	46bd      	mov	sp, r7
 801a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6c4:	4770      	bx	lr
	...

0801a6c8 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a6c8:	b480      	push	{r7}
 801a6ca:	b083      	sub	sp, #12
 801a6cc:	af00      	add	r7, sp, #0
 801a6ce:	4603      	mov	r3, r0
 801a6d0:	6039      	str	r1, [r7, #0]
 801a6d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801a6d4:	683b      	ldr	r3, [r7, #0]
 801a6d6:	2212      	movs	r2, #18
 801a6d8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801a6da:	4b03      	ldr	r3, [pc, #12]	; (801a6e8 <USBD_HS_DeviceDescriptor+0x20>)
}
 801a6dc:	4618      	mov	r0, r3
 801a6de:	370c      	adds	r7, #12
 801a6e0:	46bd      	mov	sp, r7
 801a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6e6:	4770      	bx	lr
 801a6e8:	240000cc 	.word	0x240000cc

0801a6ec <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a6ec:	b480      	push	{r7}
 801a6ee:	b083      	sub	sp, #12
 801a6f0:	af00      	add	r7, sp, #0
 801a6f2:	4603      	mov	r3, r0
 801a6f4:	6039      	str	r1, [r7, #0]
 801a6f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801a6f8:	683b      	ldr	r3, [r7, #0]
 801a6fa:	2204      	movs	r2, #4
 801a6fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801a6fe:	4b03      	ldr	r3, [pc, #12]	; (801a70c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 801a700:	4618      	mov	r0, r3
 801a702:	370c      	adds	r7, #12
 801a704:	46bd      	mov	sp, r7
 801a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a70a:	4770      	bx	lr
 801a70c:	240000e0 	.word	0x240000e0

0801a710 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a710:	b580      	push	{r7, lr}
 801a712:	b082      	sub	sp, #8
 801a714:	af00      	add	r7, sp, #0
 801a716:	4603      	mov	r3, r0
 801a718:	6039      	str	r1, [r7, #0]
 801a71a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a71c:	79fb      	ldrb	r3, [r7, #7]
 801a71e:	2b00      	cmp	r3, #0
 801a720:	d105      	bne.n	801a72e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801a722:	683a      	ldr	r2, [r7, #0]
 801a724:	4907      	ldr	r1, [pc, #28]	; (801a744 <USBD_HS_ProductStrDescriptor+0x34>)
 801a726:	4808      	ldr	r0, [pc, #32]	; (801a748 <USBD_HS_ProductStrDescriptor+0x38>)
 801a728:	f7fc fe12 	bl	8017350 <USBD_GetString>
 801a72c:	e004      	b.n	801a738 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801a72e:	683a      	ldr	r2, [r7, #0]
 801a730:	4904      	ldr	r1, [pc, #16]	; (801a744 <USBD_HS_ProductStrDescriptor+0x34>)
 801a732:	4805      	ldr	r0, [pc, #20]	; (801a748 <USBD_HS_ProductStrDescriptor+0x38>)
 801a734:	f7fc fe0c 	bl	8017350 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a738:	4b02      	ldr	r3, [pc, #8]	; (801a744 <USBD_HS_ProductStrDescriptor+0x34>)
}
 801a73a:	4618      	mov	r0, r3
 801a73c:	3708      	adds	r7, #8
 801a73e:	46bd      	mov	sp, r7
 801a740:	bd80      	pop	{r7, pc}
 801a742:	bf00      	nop
 801a744:	24002bb8 	.word	0x24002bb8
 801a748:	0801ff88 	.word	0x0801ff88

0801a74c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a74c:	b580      	push	{r7, lr}
 801a74e:	b082      	sub	sp, #8
 801a750:	af00      	add	r7, sp, #0
 801a752:	4603      	mov	r3, r0
 801a754:	6039      	str	r1, [r7, #0]
 801a756:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801a758:	683a      	ldr	r2, [r7, #0]
 801a75a:	4904      	ldr	r1, [pc, #16]	; (801a76c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 801a75c:	4804      	ldr	r0, [pc, #16]	; (801a770 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801a75e:	f7fc fdf7 	bl	8017350 <USBD_GetString>
  return USBD_StrDesc;
 801a762:	4b02      	ldr	r3, [pc, #8]	; (801a76c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801a764:	4618      	mov	r0, r3
 801a766:	3708      	adds	r7, #8
 801a768:	46bd      	mov	sp, r7
 801a76a:	bd80      	pop	{r7, pc}
 801a76c:	24002bb8 	.word	0x24002bb8
 801a770:	0801ffa4 	.word	0x0801ffa4

0801a774 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a774:	b580      	push	{r7, lr}
 801a776:	b082      	sub	sp, #8
 801a778:	af00      	add	r7, sp, #0
 801a77a:	4603      	mov	r3, r0
 801a77c:	6039      	str	r1, [r7, #0]
 801a77e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801a780:	683b      	ldr	r3, [r7, #0]
 801a782:	221a      	movs	r2, #26
 801a784:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801a786:	f000 f843 	bl	801a810 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801a78a:	4b02      	ldr	r3, [pc, #8]	; (801a794 <USBD_HS_SerialStrDescriptor+0x20>)
}
 801a78c:	4618      	mov	r0, r3
 801a78e:	3708      	adds	r7, #8
 801a790:	46bd      	mov	sp, r7
 801a792:	bd80      	pop	{r7, pc}
 801a794:	240000e4 	.word	0x240000e4

0801a798 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a798:	b580      	push	{r7, lr}
 801a79a:	b082      	sub	sp, #8
 801a79c:	af00      	add	r7, sp, #0
 801a79e:	4603      	mov	r3, r0
 801a7a0:	6039      	str	r1, [r7, #0]
 801a7a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801a7a4:	79fb      	ldrb	r3, [r7, #7]
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	d105      	bne.n	801a7b6 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801a7aa:	683a      	ldr	r2, [r7, #0]
 801a7ac:	4907      	ldr	r1, [pc, #28]	; (801a7cc <USBD_HS_ConfigStrDescriptor+0x34>)
 801a7ae:	4808      	ldr	r0, [pc, #32]	; (801a7d0 <USBD_HS_ConfigStrDescriptor+0x38>)
 801a7b0:	f7fc fdce 	bl	8017350 <USBD_GetString>
 801a7b4:	e004      	b.n	801a7c0 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801a7b6:	683a      	ldr	r2, [r7, #0]
 801a7b8:	4904      	ldr	r1, [pc, #16]	; (801a7cc <USBD_HS_ConfigStrDescriptor+0x34>)
 801a7ba:	4805      	ldr	r0, [pc, #20]	; (801a7d0 <USBD_HS_ConfigStrDescriptor+0x38>)
 801a7bc:	f7fc fdc8 	bl	8017350 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a7c0:	4b02      	ldr	r3, [pc, #8]	; (801a7cc <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801a7c2:	4618      	mov	r0, r3
 801a7c4:	3708      	adds	r7, #8
 801a7c6:	46bd      	mov	sp, r7
 801a7c8:	bd80      	pop	{r7, pc}
 801a7ca:	bf00      	nop
 801a7cc:	24002bb8 	.word	0x24002bb8
 801a7d0:	0801ffa8 	.word	0x0801ffa8

0801a7d4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a7d4:	b580      	push	{r7, lr}
 801a7d6:	b082      	sub	sp, #8
 801a7d8:	af00      	add	r7, sp, #0
 801a7da:	4603      	mov	r3, r0
 801a7dc:	6039      	str	r1, [r7, #0]
 801a7de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a7e0:	79fb      	ldrb	r3, [r7, #7]
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	d105      	bne.n	801a7f2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801a7e6:	683a      	ldr	r2, [r7, #0]
 801a7e8:	4907      	ldr	r1, [pc, #28]	; (801a808 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801a7ea:	4808      	ldr	r0, [pc, #32]	; (801a80c <USBD_HS_InterfaceStrDescriptor+0x38>)
 801a7ec:	f7fc fdb0 	bl	8017350 <USBD_GetString>
 801a7f0:	e004      	b.n	801a7fc <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801a7f2:	683a      	ldr	r2, [r7, #0]
 801a7f4:	4904      	ldr	r1, [pc, #16]	; (801a808 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801a7f6:	4805      	ldr	r0, [pc, #20]	; (801a80c <USBD_HS_InterfaceStrDescriptor+0x38>)
 801a7f8:	f7fc fdaa 	bl	8017350 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a7fc:	4b02      	ldr	r3, [pc, #8]	; (801a808 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801a7fe:	4618      	mov	r0, r3
 801a800:	3708      	adds	r7, #8
 801a802:	46bd      	mov	sp, r7
 801a804:	bd80      	pop	{r7, pc}
 801a806:	bf00      	nop
 801a808:	24002bb8 	.word	0x24002bb8
 801a80c:	0801ffb4 	.word	0x0801ffb4

0801a810 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801a810:	b580      	push	{r7, lr}
 801a812:	b084      	sub	sp, #16
 801a814:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801a816:	4b0f      	ldr	r3, [pc, #60]	; (801a854 <Get_SerialNum+0x44>)
 801a818:	681b      	ldr	r3, [r3, #0]
 801a81a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801a81c:	4b0e      	ldr	r3, [pc, #56]	; (801a858 <Get_SerialNum+0x48>)
 801a81e:	681b      	ldr	r3, [r3, #0]
 801a820:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801a822:	4b0e      	ldr	r3, [pc, #56]	; (801a85c <Get_SerialNum+0x4c>)
 801a824:	681b      	ldr	r3, [r3, #0]
 801a826:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801a828:	68fa      	ldr	r2, [r7, #12]
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	4413      	add	r3, r2
 801a82e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801a830:	68fb      	ldr	r3, [r7, #12]
 801a832:	2b00      	cmp	r3, #0
 801a834:	d009      	beq.n	801a84a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801a836:	2208      	movs	r2, #8
 801a838:	4909      	ldr	r1, [pc, #36]	; (801a860 <Get_SerialNum+0x50>)
 801a83a:	68f8      	ldr	r0, [r7, #12]
 801a83c:	f000 f814 	bl	801a868 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801a840:	2204      	movs	r2, #4
 801a842:	4908      	ldr	r1, [pc, #32]	; (801a864 <Get_SerialNum+0x54>)
 801a844:	68b8      	ldr	r0, [r7, #8]
 801a846:	f000 f80f 	bl	801a868 <IntToUnicode>
  }
}
 801a84a:	bf00      	nop
 801a84c:	3710      	adds	r7, #16
 801a84e:	46bd      	mov	sp, r7
 801a850:	bd80      	pop	{r7, pc}
 801a852:	bf00      	nop
 801a854:	1ff1e800 	.word	0x1ff1e800
 801a858:	1ff1e804 	.word	0x1ff1e804
 801a85c:	1ff1e808 	.word	0x1ff1e808
 801a860:	240000e6 	.word	0x240000e6
 801a864:	240000f6 	.word	0x240000f6

0801a868 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801a868:	b480      	push	{r7}
 801a86a:	b087      	sub	sp, #28
 801a86c:	af00      	add	r7, sp, #0
 801a86e:	60f8      	str	r0, [r7, #12]
 801a870:	60b9      	str	r1, [r7, #8]
 801a872:	4613      	mov	r3, r2
 801a874:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801a876:	2300      	movs	r3, #0
 801a878:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801a87a:	2300      	movs	r3, #0
 801a87c:	75fb      	strb	r3, [r7, #23]
 801a87e:	e027      	b.n	801a8d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801a880:	68fb      	ldr	r3, [r7, #12]
 801a882:	0f1b      	lsrs	r3, r3, #28
 801a884:	2b09      	cmp	r3, #9
 801a886:	d80b      	bhi.n	801a8a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801a888:	68fb      	ldr	r3, [r7, #12]
 801a88a:	0f1b      	lsrs	r3, r3, #28
 801a88c:	b2da      	uxtb	r2, r3
 801a88e:	7dfb      	ldrb	r3, [r7, #23]
 801a890:	005b      	lsls	r3, r3, #1
 801a892:	4619      	mov	r1, r3
 801a894:	68bb      	ldr	r3, [r7, #8]
 801a896:	440b      	add	r3, r1
 801a898:	3230      	adds	r2, #48	; 0x30
 801a89a:	b2d2      	uxtb	r2, r2
 801a89c:	701a      	strb	r2, [r3, #0]
 801a89e:	e00a      	b.n	801a8b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801a8a0:	68fb      	ldr	r3, [r7, #12]
 801a8a2:	0f1b      	lsrs	r3, r3, #28
 801a8a4:	b2da      	uxtb	r2, r3
 801a8a6:	7dfb      	ldrb	r3, [r7, #23]
 801a8a8:	005b      	lsls	r3, r3, #1
 801a8aa:	4619      	mov	r1, r3
 801a8ac:	68bb      	ldr	r3, [r7, #8]
 801a8ae:	440b      	add	r3, r1
 801a8b0:	3237      	adds	r2, #55	; 0x37
 801a8b2:	b2d2      	uxtb	r2, r2
 801a8b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801a8b6:	68fb      	ldr	r3, [r7, #12]
 801a8b8:	011b      	lsls	r3, r3, #4
 801a8ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801a8bc:	7dfb      	ldrb	r3, [r7, #23]
 801a8be:	005b      	lsls	r3, r3, #1
 801a8c0:	3301      	adds	r3, #1
 801a8c2:	68ba      	ldr	r2, [r7, #8]
 801a8c4:	4413      	add	r3, r2
 801a8c6:	2200      	movs	r2, #0
 801a8c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801a8ca:	7dfb      	ldrb	r3, [r7, #23]
 801a8cc:	3301      	adds	r3, #1
 801a8ce:	75fb      	strb	r3, [r7, #23]
 801a8d0:	7dfa      	ldrb	r2, [r7, #23]
 801a8d2:	79fb      	ldrb	r3, [r7, #7]
 801a8d4:	429a      	cmp	r2, r3
 801a8d6:	d3d3      	bcc.n	801a880 <IntToUnicode+0x18>
  }
}
 801a8d8:	bf00      	nop
 801a8da:	bf00      	nop
 801a8dc:	371c      	adds	r7, #28
 801a8de:	46bd      	mov	sp, r7
 801a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8e4:	4770      	bx	lr
	...

0801a8e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801a8e8:	b580      	push	{r7, lr}
 801a8ea:	b0b2      	sub	sp, #200	; 0xc8
 801a8ec:	af00      	add	r7, sp, #0
 801a8ee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801a8f0:	f107 0310 	add.w	r3, r7, #16
 801a8f4:	22b8      	movs	r2, #184	; 0xb8
 801a8f6:	2100      	movs	r1, #0
 801a8f8:	4618      	mov	r0, r3
 801a8fa:	f001 fa92 	bl	801be22 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	681b      	ldr	r3, [r3, #0]
 801a902:	4a1a      	ldr	r2, [pc, #104]	; (801a96c <HAL_PCD_MspInit+0x84>)
 801a904:	4293      	cmp	r3, r2
 801a906:	d12c      	bne.n	801a962 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801a908:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801a90c:	f04f 0300 	mov.w	r3, #0
 801a910:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801a914:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 801a918:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801a91c:	f107 0310 	add.w	r3, r7, #16
 801a920:	4618      	mov	r0, r3
 801a922:	f7f0 ff75 	bl	800b810 <HAL_RCCEx_PeriphCLKConfig>
 801a926:	4603      	mov	r3, r0
 801a928:	2b00      	cmp	r3, #0
 801a92a:	d001      	beq.n	801a930 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 801a92c:	f7e8 fafe 	bl	8002f2c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801a930:	f7ef ff8e 	bl	800a850 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801a934:	4b0e      	ldr	r3, [pc, #56]	; (801a970 <HAL_PCD_MspInit+0x88>)
 801a936:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801a93a:	4a0d      	ldr	r2, [pc, #52]	; (801a970 <HAL_PCD_MspInit+0x88>)
 801a93c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801a940:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801a944:	4b0a      	ldr	r3, [pc, #40]	; (801a970 <HAL_PCD_MspInit+0x88>)
 801a946:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801a94a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a94e:	60fb      	str	r3, [r7, #12]
 801a950:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801a952:	2200      	movs	r2, #0
 801a954:	2100      	movs	r1, #0
 801a956:	204d      	movs	r0, #77	; 0x4d
 801a958:	f7eb fcff 	bl	800635a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801a95c:	204d      	movs	r0, #77	; 0x4d
 801a95e:	f7eb fd16 	bl	800638e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801a962:	bf00      	nop
 801a964:	37c8      	adds	r7, #200	; 0xc8
 801a966:	46bd      	mov	sp, r7
 801a968:	bd80      	pop	{r7, pc}
 801a96a:	bf00      	nop
 801a96c:	40040000 	.word	0x40040000
 801a970:	58024400 	.word	0x58024400

0801a974 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a974:	b580      	push	{r7, lr}
 801a976:	b082      	sub	sp, #8
 801a978:	af00      	add	r7, sp, #0
 801a97a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801a982:	687b      	ldr	r3, [r7, #4]
 801a984:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801a988:	4619      	mov	r1, r3
 801a98a:	4610      	mov	r0, r2
 801a98c:	f7fb fb7b 	bl	8016086 <USBD_LL_SetupStage>
}
 801a990:	bf00      	nop
 801a992:	3708      	adds	r7, #8
 801a994:	46bd      	mov	sp, r7
 801a996:	bd80      	pop	{r7, pc}

0801a998 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a998:	b580      	push	{r7, lr}
 801a99a:	b082      	sub	sp, #8
 801a99c:	af00      	add	r7, sp, #0
 801a99e:	6078      	str	r0, [r7, #4]
 801a9a0:	460b      	mov	r3, r1
 801a9a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801a9aa:	78fa      	ldrb	r2, [r7, #3]
 801a9ac:	6879      	ldr	r1, [r7, #4]
 801a9ae:	4613      	mov	r3, r2
 801a9b0:	00db      	lsls	r3, r3, #3
 801a9b2:	4413      	add	r3, r2
 801a9b4:	009b      	lsls	r3, r3, #2
 801a9b6:	440b      	add	r3, r1
 801a9b8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801a9bc:	681a      	ldr	r2, [r3, #0]
 801a9be:	78fb      	ldrb	r3, [r7, #3]
 801a9c0:	4619      	mov	r1, r3
 801a9c2:	f7fb fbb5 	bl	8016130 <USBD_LL_DataOutStage>
}
 801a9c6:	bf00      	nop
 801a9c8:	3708      	adds	r7, #8
 801a9ca:	46bd      	mov	sp, r7
 801a9cc:	bd80      	pop	{r7, pc}

0801a9ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a9ce:	b580      	push	{r7, lr}
 801a9d0:	b082      	sub	sp, #8
 801a9d2:	af00      	add	r7, sp, #0
 801a9d4:	6078      	str	r0, [r7, #4]
 801a9d6:	460b      	mov	r3, r1
 801a9d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801a9e0:	78fa      	ldrb	r2, [r7, #3]
 801a9e2:	6879      	ldr	r1, [r7, #4]
 801a9e4:	4613      	mov	r3, r2
 801a9e6:	00db      	lsls	r3, r3, #3
 801a9e8:	4413      	add	r3, r2
 801a9ea:	009b      	lsls	r3, r3, #2
 801a9ec:	440b      	add	r3, r1
 801a9ee:	3348      	adds	r3, #72	; 0x48
 801a9f0:	681a      	ldr	r2, [r3, #0]
 801a9f2:	78fb      	ldrb	r3, [r7, #3]
 801a9f4:	4619      	mov	r1, r3
 801a9f6:	f7fb fc4e 	bl	8016296 <USBD_LL_DataInStage>
}
 801a9fa:	bf00      	nop
 801a9fc:	3708      	adds	r7, #8
 801a9fe:	46bd      	mov	sp, r7
 801aa00:	bd80      	pop	{r7, pc}

0801aa02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aa02:	b580      	push	{r7, lr}
 801aa04:	b082      	sub	sp, #8
 801aa06:	af00      	add	r7, sp, #0
 801aa08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aa10:	4618      	mov	r0, r3
 801aa12:	f7fb fd88 	bl	8016526 <USBD_LL_SOF>
}
 801aa16:	bf00      	nop
 801aa18:	3708      	adds	r7, #8
 801aa1a:	46bd      	mov	sp, r7
 801aa1c:	bd80      	pop	{r7, pc}

0801aa1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aa1e:	b580      	push	{r7, lr}
 801aa20:	b084      	sub	sp, #16
 801aa22:	af00      	add	r7, sp, #0
 801aa24:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801aa26:	2301      	movs	r3, #1
 801aa28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	691b      	ldr	r3, [r3, #16]
 801aa2e:	2b00      	cmp	r3, #0
 801aa30:	d102      	bne.n	801aa38 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801aa32:	2300      	movs	r3, #0
 801aa34:	73fb      	strb	r3, [r7, #15]
 801aa36:	e008      	b.n	801aa4a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801aa38:	687b      	ldr	r3, [r7, #4]
 801aa3a:	691b      	ldr	r3, [r3, #16]
 801aa3c:	2b02      	cmp	r3, #2
 801aa3e:	d102      	bne.n	801aa46 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801aa40:	2301      	movs	r3, #1
 801aa42:	73fb      	strb	r3, [r7, #15]
 801aa44:	e001      	b.n	801aa4a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801aa46:	f7e8 fa71 	bl	8002f2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aa50:	7bfa      	ldrb	r2, [r7, #15]
 801aa52:	4611      	mov	r1, r2
 801aa54:	4618      	mov	r0, r3
 801aa56:	f7fb fd22 	bl	801649e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aa60:	4618      	mov	r0, r3
 801aa62:	f7fb fcca 	bl	80163fa <USBD_LL_Reset>
}
 801aa66:	bf00      	nop
 801aa68:	3710      	adds	r7, #16
 801aa6a:	46bd      	mov	sp, r7
 801aa6c:	bd80      	pop	{r7, pc}
	...

0801aa70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aa70:	b580      	push	{r7, lr}
 801aa72:	b082      	sub	sp, #8
 801aa74:	af00      	add	r7, sp, #0
 801aa76:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aa7e:	4618      	mov	r0, r3
 801aa80:	f7fb fd1d 	bl	80164be <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	681b      	ldr	r3, [r3, #0]
 801aa88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801aa8c:	681b      	ldr	r3, [r3, #0]
 801aa8e:	687a      	ldr	r2, [r7, #4]
 801aa90:	6812      	ldr	r2, [r2, #0]
 801aa92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801aa96:	f043 0301 	orr.w	r3, r3, #1
 801aa9a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801aa9c:	687b      	ldr	r3, [r7, #4]
 801aa9e:	6a1b      	ldr	r3, [r3, #32]
 801aaa0:	2b00      	cmp	r3, #0
 801aaa2:	d005      	beq.n	801aab0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801aaa4:	4b04      	ldr	r3, [pc, #16]	; (801aab8 <HAL_PCD_SuspendCallback+0x48>)
 801aaa6:	691b      	ldr	r3, [r3, #16]
 801aaa8:	4a03      	ldr	r2, [pc, #12]	; (801aab8 <HAL_PCD_SuspendCallback+0x48>)
 801aaaa:	f043 0306 	orr.w	r3, r3, #6
 801aaae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801aab0:	bf00      	nop
 801aab2:	3708      	adds	r7, #8
 801aab4:	46bd      	mov	sp, r7
 801aab6:	bd80      	pop	{r7, pc}
 801aab8:	e000ed00 	.word	0xe000ed00

0801aabc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aabc:	b580      	push	{r7, lr}
 801aabe:	b082      	sub	sp, #8
 801aac0:	af00      	add	r7, sp, #0
 801aac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aaca:	4618      	mov	r0, r3
 801aacc:	f7fb fd13 	bl	80164f6 <USBD_LL_Resume>
}
 801aad0:	bf00      	nop
 801aad2:	3708      	adds	r7, #8
 801aad4:	46bd      	mov	sp, r7
 801aad6:	bd80      	pop	{r7, pc}

0801aad8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aad8:	b580      	push	{r7, lr}
 801aada:	b082      	sub	sp, #8
 801aadc:	af00      	add	r7, sp, #0
 801aade:	6078      	str	r0, [r7, #4]
 801aae0:	460b      	mov	r3, r1
 801aae2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aaea:	78fa      	ldrb	r2, [r7, #3]
 801aaec:	4611      	mov	r1, r2
 801aaee:	4618      	mov	r0, r3
 801aaf0:	f7fb fd6b 	bl	80165ca <USBD_LL_IsoOUTIncomplete>
}
 801aaf4:	bf00      	nop
 801aaf6:	3708      	adds	r7, #8
 801aaf8:	46bd      	mov	sp, r7
 801aafa:	bd80      	pop	{r7, pc}

0801aafc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aafc:	b580      	push	{r7, lr}
 801aafe:	b082      	sub	sp, #8
 801ab00:	af00      	add	r7, sp, #0
 801ab02:	6078      	str	r0, [r7, #4]
 801ab04:	460b      	mov	r3, r1
 801ab06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ab0e:	78fa      	ldrb	r2, [r7, #3]
 801ab10:	4611      	mov	r1, r2
 801ab12:	4618      	mov	r0, r3
 801ab14:	f7fb fd27 	bl	8016566 <USBD_LL_IsoINIncomplete>
}
 801ab18:	bf00      	nop
 801ab1a:	3708      	adds	r7, #8
 801ab1c:	46bd      	mov	sp, r7
 801ab1e:	bd80      	pop	{r7, pc}

0801ab20 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ab20:	b580      	push	{r7, lr}
 801ab22:	b082      	sub	sp, #8
 801ab24:	af00      	add	r7, sp, #0
 801ab26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801ab28:	687b      	ldr	r3, [r7, #4]
 801ab2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ab2e:	4618      	mov	r0, r3
 801ab30:	f7fb fd7d 	bl	801662e <USBD_LL_DevConnected>
}
 801ab34:	bf00      	nop
 801ab36:	3708      	adds	r7, #8
 801ab38:	46bd      	mov	sp, r7
 801ab3a:	bd80      	pop	{r7, pc}

0801ab3c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ab3c:	b580      	push	{r7, lr}
 801ab3e:	b082      	sub	sp, #8
 801ab40:	af00      	add	r7, sp, #0
 801ab42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801ab44:	687b      	ldr	r3, [r7, #4]
 801ab46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ab4a:	4618      	mov	r0, r3
 801ab4c:	f7fb fd7a 	bl	8016644 <USBD_LL_DevDisconnected>
}
 801ab50:	bf00      	nop
 801ab52:	3708      	adds	r7, #8
 801ab54:	46bd      	mov	sp, r7
 801ab56:	bd80      	pop	{r7, pc}

0801ab58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801ab58:	b580      	push	{r7, lr}
 801ab5a:	b082      	sub	sp, #8
 801ab5c:	af00      	add	r7, sp, #0
 801ab5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	781b      	ldrb	r3, [r3, #0]
 801ab64:	2b01      	cmp	r3, #1
 801ab66:	d140      	bne.n	801abea <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 801ab68:	4a22      	ldr	r2, [pc, #136]	; (801abf4 <USBD_LL_Init+0x9c>)
 801ab6a:	687b      	ldr	r3, [r7, #4]
 801ab6c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	4a20      	ldr	r2, [pc, #128]	; (801abf4 <USBD_LL_Init+0x9c>)
 801ab74:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801ab78:	4b1e      	ldr	r3, [pc, #120]	; (801abf4 <USBD_LL_Init+0x9c>)
 801ab7a:	4a1f      	ldr	r2, [pc, #124]	; (801abf8 <USBD_LL_Init+0xa0>)
 801ab7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 801ab7e:	4b1d      	ldr	r3, [pc, #116]	; (801abf4 <USBD_LL_Init+0x9c>)
 801ab80:	2209      	movs	r2, #9
 801ab82:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801ab84:	4b1b      	ldr	r3, [pc, #108]	; (801abf4 <USBD_LL_Init+0x9c>)
 801ab86:	2202      	movs	r2, #2
 801ab88:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801ab8a:	4b1a      	ldr	r3, [pc, #104]	; (801abf4 <USBD_LL_Init+0x9c>)
 801ab8c:	2200      	movs	r2, #0
 801ab8e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 801ab90:	4b18      	ldr	r3, [pc, #96]	; (801abf4 <USBD_LL_Init+0x9c>)
 801ab92:	2202      	movs	r2, #2
 801ab94:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801ab96:	4b17      	ldr	r3, [pc, #92]	; (801abf4 <USBD_LL_Init+0x9c>)
 801ab98:	2200      	movs	r2, #0
 801ab9a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801ab9c:	4b15      	ldr	r3, [pc, #84]	; (801abf4 <USBD_LL_Init+0x9c>)
 801ab9e:	2200      	movs	r2, #0
 801aba0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801aba2:	4b14      	ldr	r3, [pc, #80]	; (801abf4 <USBD_LL_Init+0x9c>)
 801aba4:	2200      	movs	r2, #0
 801aba6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 801aba8:	4b12      	ldr	r3, [pc, #72]	; (801abf4 <USBD_LL_Init+0x9c>)
 801abaa:	2200      	movs	r2, #0
 801abac:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801abae:	4b11      	ldr	r3, [pc, #68]	; (801abf4 <USBD_LL_Init+0x9c>)
 801abb0:	2200      	movs	r2, #0
 801abb2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801abb4:	4b0f      	ldr	r3, [pc, #60]	; (801abf4 <USBD_LL_Init+0x9c>)
 801abb6:	2200      	movs	r2, #0
 801abb8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801abba:	480e      	ldr	r0, [pc, #56]	; (801abf4 <USBD_LL_Init+0x9c>)
 801abbc:	f7ee fb55 	bl	800926a <HAL_PCD_Init>
 801abc0:	4603      	mov	r3, r0
 801abc2:	2b00      	cmp	r3, #0
 801abc4:	d001      	beq.n	801abca <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801abc6:	f7e8 f9b1 	bl	8002f2c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801abca:	f44f 7100 	mov.w	r1, #512	; 0x200
 801abce:	4809      	ldr	r0, [pc, #36]	; (801abf4 <USBD_LL_Init+0x9c>)
 801abd0:	f7ef fdc3 	bl	800a75a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801abd4:	2280      	movs	r2, #128	; 0x80
 801abd6:	2100      	movs	r1, #0
 801abd8:	4806      	ldr	r0, [pc, #24]	; (801abf4 <USBD_LL_Init+0x9c>)
 801abda:	f7ef fd77 	bl	800a6cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801abde:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801abe2:	2101      	movs	r1, #1
 801abe4:	4803      	ldr	r0, [pc, #12]	; (801abf4 <USBD_LL_Init+0x9c>)
 801abe6:	f7ef fd71 	bl	800a6cc <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 801abea:	2300      	movs	r3, #0
}
 801abec:	4618      	mov	r0, r3
 801abee:	3708      	adds	r7, #8
 801abf0:	46bd      	mov	sp, r7
 801abf2:	bd80      	pop	{r7, pc}
 801abf4:	24002db8 	.word	0x24002db8
 801abf8:	40040000 	.word	0x40040000

0801abfc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801abfc:	b580      	push	{r7, lr}
 801abfe:	b084      	sub	sp, #16
 801ac00:	af00      	add	r7, sp, #0
 801ac02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac04:	2300      	movs	r3, #0
 801ac06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac08:	2300      	movs	r3, #0
 801ac0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ac12:	4618      	mov	r0, r3
 801ac14:	f7ee fc4d 	bl	80094b2 <HAL_PCD_Start>
 801ac18:	4603      	mov	r3, r0
 801ac1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac1c:	7bfb      	ldrb	r3, [r7, #15]
 801ac1e:	4618      	mov	r0, r3
 801ac20:	f000 f942 	bl	801aea8 <USBD_Get_USB_Status>
 801ac24:	4603      	mov	r3, r0
 801ac26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ac28:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac2a:	4618      	mov	r0, r3
 801ac2c:	3710      	adds	r7, #16
 801ac2e:	46bd      	mov	sp, r7
 801ac30:	bd80      	pop	{r7, pc}

0801ac32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801ac32:	b580      	push	{r7, lr}
 801ac34:	b084      	sub	sp, #16
 801ac36:	af00      	add	r7, sp, #0
 801ac38:	6078      	str	r0, [r7, #4]
 801ac3a:	4608      	mov	r0, r1
 801ac3c:	4611      	mov	r1, r2
 801ac3e:	461a      	mov	r2, r3
 801ac40:	4603      	mov	r3, r0
 801ac42:	70fb      	strb	r3, [r7, #3]
 801ac44:	460b      	mov	r3, r1
 801ac46:	70bb      	strb	r3, [r7, #2]
 801ac48:	4613      	mov	r3, r2
 801ac4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac4c:	2300      	movs	r3, #0
 801ac4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac50:	2300      	movs	r3, #0
 801ac52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801ac54:	687b      	ldr	r3, [r7, #4]
 801ac56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801ac5a:	78bb      	ldrb	r3, [r7, #2]
 801ac5c:	883a      	ldrh	r2, [r7, #0]
 801ac5e:	78f9      	ldrb	r1, [r7, #3]
 801ac60:	f7ef f94d 	bl	8009efe <HAL_PCD_EP_Open>
 801ac64:	4603      	mov	r3, r0
 801ac66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac68:	7bfb      	ldrb	r3, [r7, #15]
 801ac6a:	4618      	mov	r0, r3
 801ac6c:	f000 f91c 	bl	801aea8 <USBD_Get_USB_Status>
 801ac70:	4603      	mov	r3, r0
 801ac72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ac74:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac76:	4618      	mov	r0, r3
 801ac78:	3710      	adds	r7, #16
 801ac7a:	46bd      	mov	sp, r7
 801ac7c:	bd80      	pop	{r7, pc}

0801ac7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ac7e:	b580      	push	{r7, lr}
 801ac80:	b084      	sub	sp, #16
 801ac82:	af00      	add	r7, sp, #0
 801ac84:	6078      	str	r0, [r7, #4]
 801ac86:	460b      	mov	r3, r1
 801ac88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac8a:	2300      	movs	r3, #0
 801ac8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac8e:	2300      	movs	r3, #0
 801ac90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801ac92:	687b      	ldr	r3, [r7, #4]
 801ac94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ac98:	78fa      	ldrb	r2, [r7, #3]
 801ac9a:	4611      	mov	r1, r2
 801ac9c:	4618      	mov	r0, r3
 801ac9e:	f7ef f996 	bl	8009fce <HAL_PCD_EP_Close>
 801aca2:	4603      	mov	r3, r0
 801aca4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801aca6:	7bfb      	ldrb	r3, [r7, #15]
 801aca8:	4618      	mov	r0, r3
 801acaa:	f000 f8fd 	bl	801aea8 <USBD_Get_USB_Status>
 801acae:	4603      	mov	r3, r0
 801acb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801acb2:	7bbb      	ldrb	r3, [r7, #14]
}
 801acb4:	4618      	mov	r0, r3
 801acb6:	3710      	adds	r7, #16
 801acb8:	46bd      	mov	sp, r7
 801acba:	bd80      	pop	{r7, pc}

0801acbc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801acbc:	b580      	push	{r7, lr}
 801acbe:	b084      	sub	sp, #16
 801acc0:	af00      	add	r7, sp, #0
 801acc2:	6078      	str	r0, [r7, #4]
 801acc4:	460b      	mov	r3, r1
 801acc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801acc8:	2300      	movs	r3, #0
 801acca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801accc:	2300      	movs	r3, #0
 801acce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801acd6:	78fa      	ldrb	r2, [r7, #3]
 801acd8:	4611      	mov	r1, r2
 801acda:	4618      	mov	r0, r3
 801acdc:	f7ef fa50 	bl	800a180 <HAL_PCD_EP_SetStall>
 801ace0:	4603      	mov	r3, r0
 801ace2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ace4:	7bfb      	ldrb	r3, [r7, #15]
 801ace6:	4618      	mov	r0, r3
 801ace8:	f000 f8de 	bl	801aea8 <USBD_Get_USB_Status>
 801acec:	4603      	mov	r3, r0
 801acee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801acf0:	7bbb      	ldrb	r3, [r7, #14]
}
 801acf2:	4618      	mov	r0, r3
 801acf4:	3710      	adds	r7, #16
 801acf6:	46bd      	mov	sp, r7
 801acf8:	bd80      	pop	{r7, pc}

0801acfa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801acfa:	b580      	push	{r7, lr}
 801acfc:	b084      	sub	sp, #16
 801acfe:	af00      	add	r7, sp, #0
 801ad00:	6078      	str	r0, [r7, #4]
 801ad02:	460b      	mov	r3, r1
 801ad04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ad06:	2300      	movs	r3, #0
 801ad08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ad0a:	2300      	movs	r3, #0
 801ad0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ad14:	78fa      	ldrb	r2, [r7, #3]
 801ad16:	4611      	mov	r1, r2
 801ad18:	4618      	mov	r0, r3
 801ad1a:	f7ef fa95 	bl	800a248 <HAL_PCD_EP_ClrStall>
 801ad1e:	4603      	mov	r3, r0
 801ad20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ad22:	7bfb      	ldrb	r3, [r7, #15]
 801ad24:	4618      	mov	r0, r3
 801ad26:	f000 f8bf 	bl	801aea8 <USBD_Get_USB_Status>
 801ad2a:	4603      	mov	r3, r0
 801ad2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ad2e:	7bbb      	ldrb	r3, [r7, #14]
}
 801ad30:	4618      	mov	r0, r3
 801ad32:	3710      	adds	r7, #16
 801ad34:	46bd      	mov	sp, r7
 801ad36:	bd80      	pop	{r7, pc}

0801ad38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ad38:	b480      	push	{r7}
 801ad3a:	b085      	sub	sp, #20
 801ad3c:	af00      	add	r7, sp, #0
 801ad3e:	6078      	str	r0, [r7, #4]
 801ad40:	460b      	mov	r3, r1
 801ad42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ad4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801ad4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ad50:	2b00      	cmp	r3, #0
 801ad52:	da0b      	bge.n	801ad6c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801ad54:	78fb      	ldrb	r3, [r7, #3]
 801ad56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ad5a:	68f9      	ldr	r1, [r7, #12]
 801ad5c:	4613      	mov	r3, r2
 801ad5e:	00db      	lsls	r3, r3, #3
 801ad60:	4413      	add	r3, r2
 801ad62:	009b      	lsls	r3, r3, #2
 801ad64:	440b      	add	r3, r1
 801ad66:	333e      	adds	r3, #62	; 0x3e
 801ad68:	781b      	ldrb	r3, [r3, #0]
 801ad6a:	e00b      	b.n	801ad84 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801ad6c:	78fb      	ldrb	r3, [r7, #3]
 801ad6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ad72:	68f9      	ldr	r1, [r7, #12]
 801ad74:	4613      	mov	r3, r2
 801ad76:	00db      	lsls	r3, r3, #3
 801ad78:	4413      	add	r3, r2
 801ad7a:	009b      	lsls	r3, r3, #2
 801ad7c:	440b      	add	r3, r1
 801ad7e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801ad82:	781b      	ldrb	r3, [r3, #0]
  }
}
 801ad84:	4618      	mov	r0, r3
 801ad86:	3714      	adds	r7, #20
 801ad88:	46bd      	mov	sp, r7
 801ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad8e:	4770      	bx	lr

0801ad90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801ad90:	b580      	push	{r7, lr}
 801ad92:	b084      	sub	sp, #16
 801ad94:	af00      	add	r7, sp, #0
 801ad96:	6078      	str	r0, [r7, #4]
 801ad98:	460b      	mov	r3, r1
 801ad9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ad9c:	2300      	movs	r3, #0
 801ad9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ada0:	2300      	movs	r3, #0
 801ada2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801adaa:	78fa      	ldrb	r2, [r7, #3]
 801adac:	4611      	mov	r1, r2
 801adae:	4618      	mov	r0, r3
 801adb0:	f7ef f880 	bl	8009eb4 <HAL_PCD_SetAddress>
 801adb4:	4603      	mov	r3, r0
 801adb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801adb8:	7bfb      	ldrb	r3, [r7, #15]
 801adba:	4618      	mov	r0, r3
 801adbc:	f000 f874 	bl	801aea8 <USBD_Get_USB_Status>
 801adc0:	4603      	mov	r3, r0
 801adc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801adc4:	7bbb      	ldrb	r3, [r7, #14]
}
 801adc6:	4618      	mov	r0, r3
 801adc8:	3710      	adds	r7, #16
 801adca:	46bd      	mov	sp, r7
 801adcc:	bd80      	pop	{r7, pc}

0801adce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801adce:	b580      	push	{r7, lr}
 801add0:	b086      	sub	sp, #24
 801add2:	af00      	add	r7, sp, #0
 801add4:	60f8      	str	r0, [r7, #12]
 801add6:	607a      	str	r2, [r7, #4]
 801add8:	603b      	str	r3, [r7, #0]
 801adda:	460b      	mov	r3, r1
 801addc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801adde:	2300      	movs	r3, #0
 801ade0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ade2:	2300      	movs	r3, #0
 801ade4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801ade6:	68fb      	ldr	r3, [r7, #12]
 801ade8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801adec:	7af9      	ldrb	r1, [r7, #11]
 801adee:	683b      	ldr	r3, [r7, #0]
 801adf0:	687a      	ldr	r2, [r7, #4]
 801adf2:	f7ef f98a 	bl	800a10a <HAL_PCD_EP_Transmit>
 801adf6:	4603      	mov	r3, r0
 801adf8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801adfa:	7dfb      	ldrb	r3, [r7, #23]
 801adfc:	4618      	mov	r0, r3
 801adfe:	f000 f853 	bl	801aea8 <USBD_Get_USB_Status>
 801ae02:	4603      	mov	r3, r0
 801ae04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801ae06:	7dbb      	ldrb	r3, [r7, #22]
}
 801ae08:	4618      	mov	r0, r3
 801ae0a:	3718      	adds	r7, #24
 801ae0c:	46bd      	mov	sp, r7
 801ae0e:	bd80      	pop	{r7, pc}

0801ae10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ae10:	b580      	push	{r7, lr}
 801ae12:	b086      	sub	sp, #24
 801ae14:	af00      	add	r7, sp, #0
 801ae16:	60f8      	str	r0, [r7, #12]
 801ae18:	607a      	str	r2, [r7, #4]
 801ae1a:	603b      	str	r3, [r7, #0]
 801ae1c:	460b      	mov	r3, r1
 801ae1e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ae20:	2300      	movs	r3, #0
 801ae22:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ae24:	2300      	movs	r3, #0
 801ae26:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801ae28:	68fb      	ldr	r3, [r7, #12]
 801ae2a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801ae2e:	7af9      	ldrb	r1, [r7, #11]
 801ae30:	683b      	ldr	r3, [r7, #0]
 801ae32:	687a      	ldr	r2, [r7, #4]
 801ae34:	f7ef f915 	bl	800a062 <HAL_PCD_EP_Receive>
 801ae38:	4603      	mov	r3, r0
 801ae3a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ae3c:	7dfb      	ldrb	r3, [r7, #23]
 801ae3e:	4618      	mov	r0, r3
 801ae40:	f000 f832 	bl	801aea8 <USBD_Get_USB_Status>
 801ae44:	4603      	mov	r3, r0
 801ae46:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801ae48:	7dbb      	ldrb	r3, [r7, #22]
}
 801ae4a:	4618      	mov	r0, r3
 801ae4c:	3718      	adds	r7, #24
 801ae4e:	46bd      	mov	sp, r7
 801ae50:	bd80      	pop	{r7, pc}

0801ae52 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ae52:	b580      	push	{r7, lr}
 801ae54:	b082      	sub	sp, #8
 801ae56:	af00      	add	r7, sp, #0
 801ae58:	6078      	str	r0, [r7, #4]
 801ae5a:	460b      	mov	r3, r1
 801ae5c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ae64:	78fa      	ldrb	r2, [r7, #3]
 801ae66:	4611      	mov	r1, r2
 801ae68:	4618      	mov	r0, r3
 801ae6a:	f7ef f936 	bl	800a0da <HAL_PCD_EP_GetRxCount>
 801ae6e:	4603      	mov	r3, r0
}
 801ae70:	4618      	mov	r0, r3
 801ae72:	3708      	adds	r7, #8
 801ae74:	46bd      	mov	sp, r7
 801ae76:	bd80      	pop	{r7, pc}

0801ae78 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801ae78:	b480      	push	{r7}
 801ae7a:	b083      	sub	sp, #12
 801ae7c:	af00      	add	r7, sp, #0
 801ae7e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801ae80:	4b03      	ldr	r3, [pc, #12]	; (801ae90 <USBD_static_malloc+0x18>)
}
 801ae82:	4618      	mov	r0, r3
 801ae84:	370c      	adds	r7, #12
 801ae86:	46bd      	mov	sp, r7
 801ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae8c:	4770      	bx	lr
 801ae8e:	bf00      	nop
 801ae90:	240032c4 	.word	0x240032c4

0801ae94 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801ae94:	b480      	push	{r7}
 801ae96:	b083      	sub	sp, #12
 801ae98:	af00      	add	r7, sp, #0
 801ae9a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801ae9c:	bf00      	nop
 801ae9e:	370c      	adds	r7, #12
 801aea0:	46bd      	mov	sp, r7
 801aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aea6:	4770      	bx	lr

0801aea8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801aea8:	b480      	push	{r7}
 801aeaa:	b085      	sub	sp, #20
 801aeac:	af00      	add	r7, sp, #0
 801aeae:	4603      	mov	r3, r0
 801aeb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aeb2:	2300      	movs	r3, #0
 801aeb4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801aeb6:	79fb      	ldrb	r3, [r7, #7]
 801aeb8:	2b03      	cmp	r3, #3
 801aeba:	d817      	bhi.n	801aeec <USBD_Get_USB_Status+0x44>
 801aebc:	a201      	add	r2, pc, #4	; (adr r2, 801aec4 <USBD_Get_USB_Status+0x1c>)
 801aebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aec2:	bf00      	nop
 801aec4:	0801aed5 	.word	0x0801aed5
 801aec8:	0801aedb 	.word	0x0801aedb
 801aecc:	0801aee1 	.word	0x0801aee1
 801aed0:	0801aee7 	.word	0x0801aee7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801aed4:	2300      	movs	r3, #0
 801aed6:	73fb      	strb	r3, [r7, #15]
    break;
 801aed8:	e00b      	b.n	801aef2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801aeda:	2303      	movs	r3, #3
 801aedc:	73fb      	strb	r3, [r7, #15]
    break;
 801aede:	e008      	b.n	801aef2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801aee0:	2301      	movs	r3, #1
 801aee2:	73fb      	strb	r3, [r7, #15]
    break;
 801aee4:	e005      	b.n	801aef2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801aee6:	2303      	movs	r3, #3
 801aee8:	73fb      	strb	r3, [r7, #15]
    break;
 801aeea:	e002      	b.n	801aef2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801aeec:	2303      	movs	r3, #3
 801aeee:	73fb      	strb	r3, [r7, #15]
    break;
 801aef0:	bf00      	nop
  }
  return usb_status;
 801aef2:	7bfb      	ldrb	r3, [r7, #15]
}
 801aef4:	4618      	mov	r0, r3
 801aef6:	3714      	adds	r7, #20
 801aef8:	46bd      	mov	sp, r7
 801aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aefe:	4770      	bx	lr

0801af00 <__cvt>:
 801af00:	b5f0      	push	{r4, r5, r6, r7, lr}
 801af02:	ed2d 8b02 	vpush	{d8}
 801af06:	eeb0 8b40 	vmov.f64	d8, d0
 801af0a:	b085      	sub	sp, #20
 801af0c:	4617      	mov	r7, r2
 801af0e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801af10:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801af12:	ee18 2a90 	vmov	r2, s17
 801af16:	f025 0520 	bic.w	r5, r5, #32
 801af1a:	2a00      	cmp	r2, #0
 801af1c:	bfb6      	itet	lt
 801af1e:	222d      	movlt	r2, #45	; 0x2d
 801af20:	2200      	movge	r2, #0
 801af22:	eeb1 8b40 	vneglt.f64	d8, d0
 801af26:	2d46      	cmp	r5, #70	; 0x46
 801af28:	460c      	mov	r4, r1
 801af2a:	701a      	strb	r2, [r3, #0]
 801af2c:	d004      	beq.n	801af38 <__cvt+0x38>
 801af2e:	2d45      	cmp	r5, #69	; 0x45
 801af30:	d100      	bne.n	801af34 <__cvt+0x34>
 801af32:	3401      	adds	r4, #1
 801af34:	2102      	movs	r1, #2
 801af36:	e000      	b.n	801af3a <__cvt+0x3a>
 801af38:	2103      	movs	r1, #3
 801af3a:	ab03      	add	r3, sp, #12
 801af3c:	9301      	str	r3, [sp, #4]
 801af3e:	ab02      	add	r3, sp, #8
 801af40:	9300      	str	r3, [sp, #0]
 801af42:	4622      	mov	r2, r4
 801af44:	4633      	mov	r3, r6
 801af46:	eeb0 0b48 	vmov.f64	d0, d8
 801af4a:	f001 f891 	bl	801c070 <_dtoa_r>
 801af4e:	2d47      	cmp	r5, #71	; 0x47
 801af50:	d101      	bne.n	801af56 <__cvt+0x56>
 801af52:	07fb      	lsls	r3, r7, #31
 801af54:	d51a      	bpl.n	801af8c <__cvt+0x8c>
 801af56:	2d46      	cmp	r5, #70	; 0x46
 801af58:	eb00 0204 	add.w	r2, r0, r4
 801af5c:	d10c      	bne.n	801af78 <__cvt+0x78>
 801af5e:	7803      	ldrb	r3, [r0, #0]
 801af60:	2b30      	cmp	r3, #48	; 0x30
 801af62:	d107      	bne.n	801af74 <__cvt+0x74>
 801af64:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801af68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af6c:	bf1c      	itt	ne
 801af6e:	f1c4 0401 	rsbne	r4, r4, #1
 801af72:	6034      	strne	r4, [r6, #0]
 801af74:	6833      	ldr	r3, [r6, #0]
 801af76:	441a      	add	r2, r3
 801af78:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801af7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af80:	bf08      	it	eq
 801af82:	9203      	streq	r2, [sp, #12]
 801af84:	2130      	movs	r1, #48	; 0x30
 801af86:	9b03      	ldr	r3, [sp, #12]
 801af88:	4293      	cmp	r3, r2
 801af8a:	d307      	bcc.n	801af9c <__cvt+0x9c>
 801af8c:	9b03      	ldr	r3, [sp, #12]
 801af8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801af90:	1a1b      	subs	r3, r3, r0
 801af92:	6013      	str	r3, [r2, #0]
 801af94:	b005      	add	sp, #20
 801af96:	ecbd 8b02 	vpop	{d8}
 801af9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801af9c:	1c5c      	adds	r4, r3, #1
 801af9e:	9403      	str	r4, [sp, #12]
 801afa0:	7019      	strb	r1, [r3, #0]
 801afa2:	e7f0      	b.n	801af86 <__cvt+0x86>

0801afa4 <__exponent>:
 801afa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801afa6:	4603      	mov	r3, r0
 801afa8:	2900      	cmp	r1, #0
 801afaa:	bfb8      	it	lt
 801afac:	4249      	neglt	r1, r1
 801afae:	f803 2b02 	strb.w	r2, [r3], #2
 801afb2:	bfb4      	ite	lt
 801afb4:	222d      	movlt	r2, #45	; 0x2d
 801afb6:	222b      	movge	r2, #43	; 0x2b
 801afb8:	2909      	cmp	r1, #9
 801afba:	7042      	strb	r2, [r0, #1]
 801afbc:	dd2a      	ble.n	801b014 <__exponent+0x70>
 801afbe:	f10d 0207 	add.w	r2, sp, #7
 801afc2:	4617      	mov	r7, r2
 801afc4:	260a      	movs	r6, #10
 801afc6:	4694      	mov	ip, r2
 801afc8:	fb91 f5f6 	sdiv	r5, r1, r6
 801afcc:	fb06 1415 	mls	r4, r6, r5, r1
 801afd0:	3430      	adds	r4, #48	; 0x30
 801afd2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801afd6:	460c      	mov	r4, r1
 801afd8:	2c63      	cmp	r4, #99	; 0x63
 801afda:	f102 32ff 	add.w	r2, r2, #4294967295
 801afde:	4629      	mov	r1, r5
 801afe0:	dcf1      	bgt.n	801afc6 <__exponent+0x22>
 801afe2:	3130      	adds	r1, #48	; 0x30
 801afe4:	f1ac 0402 	sub.w	r4, ip, #2
 801afe8:	f802 1c01 	strb.w	r1, [r2, #-1]
 801afec:	1c41      	adds	r1, r0, #1
 801afee:	4622      	mov	r2, r4
 801aff0:	42ba      	cmp	r2, r7
 801aff2:	d30a      	bcc.n	801b00a <__exponent+0x66>
 801aff4:	f10d 0209 	add.w	r2, sp, #9
 801aff8:	eba2 020c 	sub.w	r2, r2, ip
 801affc:	42bc      	cmp	r4, r7
 801affe:	bf88      	it	hi
 801b000:	2200      	movhi	r2, #0
 801b002:	4413      	add	r3, r2
 801b004:	1a18      	subs	r0, r3, r0
 801b006:	b003      	add	sp, #12
 801b008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b00a:	f812 5b01 	ldrb.w	r5, [r2], #1
 801b00e:	f801 5f01 	strb.w	r5, [r1, #1]!
 801b012:	e7ed      	b.n	801aff0 <__exponent+0x4c>
 801b014:	2330      	movs	r3, #48	; 0x30
 801b016:	3130      	adds	r1, #48	; 0x30
 801b018:	7083      	strb	r3, [r0, #2]
 801b01a:	70c1      	strb	r1, [r0, #3]
 801b01c:	1d03      	adds	r3, r0, #4
 801b01e:	e7f1      	b.n	801b004 <__exponent+0x60>

0801b020 <_printf_float>:
 801b020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b024:	b08b      	sub	sp, #44	; 0x2c
 801b026:	460c      	mov	r4, r1
 801b028:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801b02c:	4616      	mov	r6, r2
 801b02e:	461f      	mov	r7, r3
 801b030:	4605      	mov	r5, r0
 801b032:	f000 feff 	bl	801be34 <_localeconv_r>
 801b036:	f8d0 b000 	ldr.w	fp, [r0]
 801b03a:	4658      	mov	r0, fp
 801b03c:	f7e5 f9c8 	bl	80003d0 <strlen>
 801b040:	2300      	movs	r3, #0
 801b042:	9308      	str	r3, [sp, #32]
 801b044:	f8d8 3000 	ldr.w	r3, [r8]
 801b048:	f894 9018 	ldrb.w	r9, [r4, #24]
 801b04c:	6822      	ldr	r2, [r4, #0]
 801b04e:	3307      	adds	r3, #7
 801b050:	f023 0307 	bic.w	r3, r3, #7
 801b054:	f103 0108 	add.w	r1, r3, #8
 801b058:	f8c8 1000 	str.w	r1, [r8]
 801b05c:	ed93 0b00 	vldr	d0, [r3]
 801b060:	ed9f 6b97 	vldr	d6, [pc, #604]	; 801b2c0 <_printf_float+0x2a0>
 801b064:	eeb0 7bc0 	vabs.f64	d7, d0
 801b068:	eeb4 7b46 	vcmp.f64	d7, d6
 801b06c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b070:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801b074:	4682      	mov	sl, r0
 801b076:	dd24      	ble.n	801b0c2 <_printf_float+0xa2>
 801b078:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801b07c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b080:	d502      	bpl.n	801b088 <_printf_float+0x68>
 801b082:	232d      	movs	r3, #45	; 0x2d
 801b084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b088:	498f      	ldr	r1, [pc, #572]	; (801b2c8 <_printf_float+0x2a8>)
 801b08a:	4b90      	ldr	r3, [pc, #576]	; (801b2cc <_printf_float+0x2ac>)
 801b08c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801b090:	bf94      	ite	ls
 801b092:	4688      	movls	r8, r1
 801b094:	4698      	movhi	r8, r3
 801b096:	2303      	movs	r3, #3
 801b098:	6123      	str	r3, [r4, #16]
 801b09a:	f022 0204 	bic.w	r2, r2, #4
 801b09e:	2300      	movs	r3, #0
 801b0a0:	6022      	str	r2, [r4, #0]
 801b0a2:	9304      	str	r3, [sp, #16]
 801b0a4:	9700      	str	r7, [sp, #0]
 801b0a6:	4633      	mov	r3, r6
 801b0a8:	aa09      	add	r2, sp, #36	; 0x24
 801b0aa:	4621      	mov	r1, r4
 801b0ac:	4628      	mov	r0, r5
 801b0ae:	f000 f9d1 	bl	801b454 <_printf_common>
 801b0b2:	3001      	adds	r0, #1
 801b0b4:	f040 808a 	bne.w	801b1cc <_printf_float+0x1ac>
 801b0b8:	f04f 30ff 	mov.w	r0, #4294967295
 801b0bc:	b00b      	add	sp, #44	; 0x2c
 801b0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0c2:	eeb4 0b40 	vcmp.f64	d0, d0
 801b0c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0ca:	d709      	bvc.n	801b0e0 <_printf_float+0xc0>
 801b0cc:	ee10 3a90 	vmov	r3, s1
 801b0d0:	2b00      	cmp	r3, #0
 801b0d2:	bfbc      	itt	lt
 801b0d4:	232d      	movlt	r3, #45	; 0x2d
 801b0d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801b0da:	497d      	ldr	r1, [pc, #500]	; (801b2d0 <_printf_float+0x2b0>)
 801b0dc:	4b7d      	ldr	r3, [pc, #500]	; (801b2d4 <_printf_float+0x2b4>)
 801b0de:	e7d5      	b.n	801b08c <_printf_float+0x6c>
 801b0e0:	6863      	ldr	r3, [r4, #4]
 801b0e2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801b0e6:	9104      	str	r1, [sp, #16]
 801b0e8:	1c59      	adds	r1, r3, #1
 801b0ea:	d13c      	bne.n	801b166 <_printf_float+0x146>
 801b0ec:	2306      	movs	r3, #6
 801b0ee:	6063      	str	r3, [r4, #4]
 801b0f0:	2300      	movs	r3, #0
 801b0f2:	9303      	str	r3, [sp, #12]
 801b0f4:	ab08      	add	r3, sp, #32
 801b0f6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801b0fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801b0fe:	ab07      	add	r3, sp, #28
 801b100:	6861      	ldr	r1, [r4, #4]
 801b102:	9300      	str	r3, [sp, #0]
 801b104:	6022      	str	r2, [r4, #0]
 801b106:	f10d 031b 	add.w	r3, sp, #27
 801b10a:	4628      	mov	r0, r5
 801b10c:	f7ff fef8 	bl	801af00 <__cvt>
 801b110:	9b04      	ldr	r3, [sp, #16]
 801b112:	9907      	ldr	r1, [sp, #28]
 801b114:	2b47      	cmp	r3, #71	; 0x47
 801b116:	4680      	mov	r8, r0
 801b118:	d108      	bne.n	801b12c <_printf_float+0x10c>
 801b11a:	1cc8      	adds	r0, r1, #3
 801b11c:	db02      	blt.n	801b124 <_printf_float+0x104>
 801b11e:	6863      	ldr	r3, [r4, #4]
 801b120:	4299      	cmp	r1, r3
 801b122:	dd41      	ble.n	801b1a8 <_printf_float+0x188>
 801b124:	f1a9 0902 	sub.w	r9, r9, #2
 801b128:	fa5f f989 	uxtb.w	r9, r9
 801b12c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801b130:	d820      	bhi.n	801b174 <_printf_float+0x154>
 801b132:	3901      	subs	r1, #1
 801b134:	464a      	mov	r2, r9
 801b136:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801b13a:	9107      	str	r1, [sp, #28]
 801b13c:	f7ff ff32 	bl	801afa4 <__exponent>
 801b140:	9a08      	ldr	r2, [sp, #32]
 801b142:	9004      	str	r0, [sp, #16]
 801b144:	1813      	adds	r3, r2, r0
 801b146:	2a01      	cmp	r2, #1
 801b148:	6123      	str	r3, [r4, #16]
 801b14a:	dc02      	bgt.n	801b152 <_printf_float+0x132>
 801b14c:	6822      	ldr	r2, [r4, #0]
 801b14e:	07d2      	lsls	r2, r2, #31
 801b150:	d501      	bpl.n	801b156 <_printf_float+0x136>
 801b152:	3301      	adds	r3, #1
 801b154:	6123      	str	r3, [r4, #16]
 801b156:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801b15a:	2b00      	cmp	r3, #0
 801b15c:	d0a2      	beq.n	801b0a4 <_printf_float+0x84>
 801b15e:	232d      	movs	r3, #45	; 0x2d
 801b160:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b164:	e79e      	b.n	801b0a4 <_printf_float+0x84>
 801b166:	9904      	ldr	r1, [sp, #16]
 801b168:	2947      	cmp	r1, #71	; 0x47
 801b16a:	d1c1      	bne.n	801b0f0 <_printf_float+0xd0>
 801b16c:	2b00      	cmp	r3, #0
 801b16e:	d1bf      	bne.n	801b0f0 <_printf_float+0xd0>
 801b170:	2301      	movs	r3, #1
 801b172:	e7bc      	b.n	801b0ee <_printf_float+0xce>
 801b174:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801b178:	d118      	bne.n	801b1ac <_printf_float+0x18c>
 801b17a:	2900      	cmp	r1, #0
 801b17c:	6863      	ldr	r3, [r4, #4]
 801b17e:	dd0b      	ble.n	801b198 <_printf_float+0x178>
 801b180:	6121      	str	r1, [r4, #16]
 801b182:	b913      	cbnz	r3, 801b18a <_printf_float+0x16a>
 801b184:	6822      	ldr	r2, [r4, #0]
 801b186:	07d0      	lsls	r0, r2, #31
 801b188:	d502      	bpl.n	801b190 <_printf_float+0x170>
 801b18a:	3301      	adds	r3, #1
 801b18c:	440b      	add	r3, r1
 801b18e:	6123      	str	r3, [r4, #16]
 801b190:	2300      	movs	r3, #0
 801b192:	65a1      	str	r1, [r4, #88]	; 0x58
 801b194:	9304      	str	r3, [sp, #16]
 801b196:	e7de      	b.n	801b156 <_printf_float+0x136>
 801b198:	b913      	cbnz	r3, 801b1a0 <_printf_float+0x180>
 801b19a:	6822      	ldr	r2, [r4, #0]
 801b19c:	07d2      	lsls	r2, r2, #31
 801b19e:	d501      	bpl.n	801b1a4 <_printf_float+0x184>
 801b1a0:	3302      	adds	r3, #2
 801b1a2:	e7f4      	b.n	801b18e <_printf_float+0x16e>
 801b1a4:	2301      	movs	r3, #1
 801b1a6:	e7f2      	b.n	801b18e <_printf_float+0x16e>
 801b1a8:	f04f 0967 	mov.w	r9, #103	; 0x67
 801b1ac:	9b08      	ldr	r3, [sp, #32]
 801b1ae:	4299      	cmp	r1, r3
 801b1b0:	db05      	blt.n	801b1be <_printf_float+0x19e>
 801b1b2:	6823      	ldr	r3, [r4, #0]
 801b1b4:	6121      	str	r1, [r4, #16]
 801b1b6:	07d8      	lsls	r0, r3, #31
 801b1b8:	d5ea      	bpl.n	801b190 <_printf_float+0x170>
 801b1ba:	1c4b      	adds	r3, r1, #1
 801b1bc:	e7e7      	b.n	801b18e <_printf_float+0x16e>
 801b1be:	2900      	cmp	r1, #0
 801b1c0:	bfd4      	ite	le
 801b1c2:	f1c1 0202 	rsble	r2, r1, #2
 801b1c6:	2201      	movgt	r2, #1
 801b1c8:	4413      	add	r3, r2
 801b1ca:	e7e0      	b.n	801b18e <_printf_float+0x16e>
 801b1cc:	6823      	ldr	r3, [r4, #0]
 801b1ce:	055a      	lsls	r2, r3, #21
 801b1d0:	d407      	bmi.n	801b1e2 <_printf_float+0x1c2>
 801b1d2:	6923      	ldr	r3, [r4, #16]
 801b1d4:	4642      	mov	r2, r8
 801b1d6:	4631      	mov	r1, r6
 801b1d8:	4628      	mov	r0, r5
 801b1da:	47b8      	blx	r7
 801b1dc:	3001      	adds	r0, #1
 801b1de:	d12a      	bne.n	801b236 <_printf_float+0x216>
 801b1e0:	e76a      	b.n	801b0b8 <_printf_float+0x98>
 801b1e2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801b1e6:	f240 80e0 	bls.w	801b3aa <_printf_float+0x38a>
 801b1ea:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801b1ee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b1f6:	d133      	bne.n	801b260 <_printf_float+0x240>
 801b1f8:	4a37      	ldr	r2, [pc, #220]	; (801b2d8 <_printf_float+0x2b8>)
 801b1fa:	2301      	movs	r3, #1
 801b1fc:	4631      	mov	r1, r6
 801b1fe:	4628      	mov	r0, r5
 801b200:	47b8      	blx	r7
 801b202:	3001      	adds	r0, #1
 801b204:	f43f af58 	beq.w	801b0b8 <_printf_float+0x98>
 801b208:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b20c:	429a      	cmp	r2, r3
 801b20e:	db02      	blt.n	801b216 <_printf_float+0x1f6>
 801b210:	6823      	ldr	r3, [r4, #0]
 801b212:	07d8      	lsls	r0, r3, #31
 801b214:	d50f      	bpl.n	801b236 <_printf_float+0x216>
 801b216:	4653      	mov	r3, sl
 801b218:	465a      	mov	r2, fp
 801b21a:	4631      	mov	r1, r6
 801b21c:	4628      	mov	r0, r5
 801b21e:	47b8      	blx	r7
 801b220:	3001      	adds	r0, #1
 801b222:	f43f af49 	beq.w	801b0b8 <_printf_float+0x98>
 801b226:	f04f 0800 	mov.w	r8, #0
 801b22a:	f104 091a 	add.w	r9, r4, #26
 801b22e:	9b08      	ldr	r3, [sp, #32]
 801b230:	3b01      	subs	r3, #1
 801b232:	4543      	cmp	r3, r8
 801b234:	dc09      	bgt.n	801b24a <_printf_float+0x22a>
 801b236:	6823      	ldr	r3, [r4, #0]
 801b238:	079b      	lsls	r3, r3, #30
 801b23a:	f100 8106 	bmi.w	801b44a <_printf_float+0x42a>
 801b23e:	68e0      	ldr	r0, [r4, #12]
 801b240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b242:	4298      	cmp	r0, r3
 801b244:	bfb8      	it	lt
 801b246:	4618      	movlt	r0, r3
 801b248:	e738      	b.n	801b0bc <_printf_float+0x9c>
 801b24a:	2301      	movs	r3, #1
 801b24c:	464a      	mov	r2, r9
 801b24e:	4631      	mov	r1, r6
 801b250:	4628      	mov	r0, r5
 801b252:	47b8      	blx	r7
 801b254:	3001      	adds	r0, #1
 801b256:	f43f af2f 	beq.w	801b0b8 <_printf_float+0x98>
 801b25a:	f108 0801 	add.w	r8, r8, #1
 801b25e:	e7e6      	b.n	801b22e <_printf_float+0x20e>
 801b260:	9b07      	ldr	r3, [sp, #28]
 801b262:	2b00      	cmp	r3, #0
 801b264:	dc3a      	bgt.n	801b2dc <_printf_float+0x2bc>
 801b266:	4a1c      	ldr	r2, [pc, #112]	; (801b2d8 <_printf_float+0x2b8>)
 801b268:	2301      	movs	r3, #1
 801b26a:	4631      	mov	r1, r6
 801b26c:	4628      	mov	r0, r5
 801b26e:	47b8      	blx	r7
 801b270:	3001      	adds	r0, #1
 801b272:	f43f af21 	beq.w	801b0b8 <_printf_float+0x98>
 801b276:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801b27a:	4313      	orrs	r3, r2
 801b27c:	d102      	bne.n	801b284 <_printf_float+0x264>
 801b27e:	6823      	ldr	r3, [r4, #0]
 801b280:	07d9      	lsls	r1, r3, #31
 801b282:	d5d8      	bpl.n	801b236 <_printf_float+0x216>
 801b284:	4653      	mov	r3, sl
 801b286:	465a      	mov	r2, fp
 801b288:	4631      	mov	r1, r6
 801b28a:	4628      	mov	r0, r5
 801b28c:	47b8      	blx	r7
 801b28e:	3001      	adds	r0, #1
 801b290:	f43f af12 	beq.w	801b0b8 <_printf_float+0x98>
 801b294:	f04f 0900 	mov.w	r9, #0
 801b298:	f104 0a1a 	add.w	sl, r4, #26
 801b29c:	9b07      	ldr	r3, [sp, #28]
 801b29e:	425b      	negs	r3, r3
 801b2a0:	454b      	cmp	r3, r9
 801b2a2:	dc01      	bgt.n	801b2a8 <_printf_float+0x288>
 801b2a4:	9b08      	ldr	r3, [sp, #32]
 801b2a6:	e795      	b.n	801b1d4 <_printf_float+0x1b4>
 801b2a8:	2301      	movs	r3, #1
 801b2aa:	4652      	mov	r2, sl
 801b2ac:	4631      	mov	r1, r6
 801b2ae:	4628      	mov	r0, r5
 801b2b0:	47b8      	blx	r7
 801b2b2:	3001      	adds	r0, #1
 801b2b4:	f43f af00 	beq.w	801b0b8 <_printf_float+0x98>
 801b2b8:	f109 0901 	add.w	r9, r9, #1
 801b2bc:	e7ee      	b.n	801b29c <_printf_float+0x27c>
 801b2be:	bf00      	nop
 801b2c0:	ffffffff 	.word	0xffffffff
 801b2c4:	7fefffff 	.word	0x7fefffff
 801b2c8:	080204d4 	.word	0x080204d4
 801b2cc:	080204d8 	.word	0x080204d8
 801b2d0:	080204dc 	.word	0x080204dc
 801b2d4:	080204e0 	.word	0x080204e0
 801b2d8:	08020870 	.word	0x08020870
 801b2dc:	9a08      	ldr	r2, [sp, #32]
 801b2de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b2e0:	429a      	cmp	r2, r3
 801b2e2:	bfa8      	it	ge
 801b2e4:	461a      	movge	r2, r3
 801b2e6:	2a00      	cmp	r2, #0
 801b2e8:	4691      	mov	r9, r2
 801b2ea:	dc38      	bgt.n	801b35e <_printf_float+0x33e>
 801b2ec:	2300      	movs	r3, #0
 801b2ee:	9305      	str	r3, [sp, #20]
 801b2f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b2f4:	f104 021a 	add.w	r2, r4, #26
 801b2f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b2fa:	9905      	ldr	r1, [sp, #20]
 801b2fc:	9304      	str	r3, [sp, #16]
 801b2fe:	eba3 0309 	sub.w	r3, r3, r9
 801b302:	428b      	cmp	r3, r1
 801b304:	dc33      	bgt.n	801b36e <_printf_float+0x34e>
 801b306:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b30a:	429a      	cmp	r2, r3
 801b30c:	db3c      	blt.n	801b388 <_printf_float+0x368>
 801b30e:	6823      	ldr	r3, [r4, #0]
 801b310:	07da      	lsls	r2, r3, #31
 801b312:	d439      	bmi.n	801b388 <_printf_float+0x368>
 801b314:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801b318:	eba2 0903 	sub.w	r9, r2, r3
 801b31c:	9b04      	ldr	r3, [sp, #16]
 801b31e:	1ad2      	subs	r2, r2, r3
 801b320:	4591      	cmp	r9, r2
 801b322:	bfa8      	it	ge
 801b324:	4691      	movge	r9, r2
 801b326:	f1b9 0f00 	cmp.w	r9, #0
 801b32a:	dc35      	bgt.n	801b398 <_printf_float+0x378>
 801b32c:	f04f 0800 	mov.w	r8, #0
 801b330:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b334:	f104 0a1a 	add.w	sl, r4, #26
 801b338:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b33c:	1a9b      	subs	r3, r3, r2
 801b33e:	eba3 0309 	sub.w	r3, r3, r9
 801b342:	4543      	cmp	r3, r8
 801b344:	f77f af77 	ble.w	801b236 <_printf_float+0x216>
 801b348:	2301      	movs	r3, #1
 801b34a:	4652      	mov	r2, sl
 801b34c:	4631      	mov	r1, r6
 801b34e:	4628      	mov	r0, r5
 801b350:	47b8      	blx	r7
 801b352:	3001      	adds	r0, #1
 801b354:	f43f aeb0 	beq.w	801b0b8 <_printf_float+0x98>
 801b358:	f108 0801 	add.w	r8, r8, #1
 801b35c:	e7ec      	b.n	801b338 <_printf_float+0x318>
 801b35e:	4613      	mov	r3, r2
 801b360:	4631      	mov	r1, r6
 801b362:	4642      	mov	r2, r8
 801b364:	4628      	mov	r0, r5
 801b366:	47b8      	blx	r7
 801b368:	3001      	adds	r0, #1
 801b36a:	d1bf      	bne.n	801b2ec <_printf_float+0x2cc>
 801b36c:	e6a4      	b.n	801b0b8 <_printf_float+0x98>
 801b36e:	2301      	movs	r3, #1
 801b370:	4631      	mov	r1, r6
 801b372:	4628      	mov	r0, r5
 801b374:	9204      	str	r2, [sp, #16]
 801b376:	47b8      	blx	r7
 801b378:	3001      	adds	r0, #1
 801b37a:	f43f ae9d 	beq.w	801b0b8 <_printf_float+0x98>
 801b37e:	9b05      	ldr	r3, [sp, #20]
 801b380:	9a04      	ldr	r2, [sp, #16]
 801b382:	3301      	adds	r3, #1
 801b384:	9305      	str	r3, [sp, #20]
 801b386:	e7b7      	b.n	801b2f8 <_printf_float+0x2d8>
 801b388:	4653      	mov	r3, sl
 801b38a:	465a      	mov	r2, fp
 801b38c:	4631      	mov	r1, r6
 801b38e:	4628      	mov	r0, r5
 801b390:	47b8      	blx	r7
 801b392:	3001      	adds	r0, #1
 801b394:	d1be      	bne.n	801b314 <_printf_float+0x2f4>
 801b396:	e68f      	b.n	801b0b8 <_printf_float+0x98>
 801b398:	9a04      	ldr	r2, [sp, #16]
 801b39a:	464b      	mov	r3, r9
 801b39c:	4442      	add	r2, r8
 801b39e:	4631      	mov	r1, r6
 801b3a0:	4628      	mov	r0, r5
 801b3a2:	47b8      	blx	r7
 801b3a4:	3001      	adds	r0, #1
 801b3a6:	d1c1      	bne.n	801b32c <_printf_float+0x30c>
 801b3a8:	e686      	b.n	801b0b8 <_printf_float+0x98>
 801b3aa:	9a08      	ldr	r2, [sp, #32]
 801b3ac:	2a01      	cmp	r2, #1
 801b3ae:	dc01      	bgt.n	801b3b4 <_printf_float+0x394>
 801b3b0:	07db      	lsls	r3, r3, #31
 801b3b2:	d537      	bpl.n	801b424 <_printf_float+0x404>
 801b3b4:	2301      	movs	r3, #1
 801b3b6:	4642      	mov	r2, r8
 801b3b8:	4631      	mov	r1, r6
 801b3ba:	4628      	mov	r0, r5
 801b3bc:	47b8      	blx	r7
 801b3be:	3001      	adds	r0, #1
 801b3c0:	f43f ae7a 	beq.w	801b0b8 <_printf_float+0x98>
 801b3c4:	4653      	mov	r3, sl
 801b3c6:	465a      	mov	r2, fp
 801b3c8:	4631      	mov	r1, r6
 801b3ca:	4628      	mov	r0, r5
 801b3cc:	47b8      	blx	r7
 801b3ce:	3001      	adds	r0, #1
 801b3d0:	f43f ae72 	beq.w	801b0b8 <_printf_float+0x98>
 801b3d4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801b3d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b3dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3e0:	9b08      	ldr	r3, [sp, #32]
 801b3e2:	d01a      	beq.n	801b41a <_printf_float+0x3fa>
 801b3e4:	3b01      	subs	r3, #1
 801b3e6:	f108 0201 	add.w	r2, r8, #1
 801b3ea:	4631      	mov	r1, r6
 801b3ec:	4628      	mov	r0, r5
 801b3ee:	47b8      	blx	r7
 801b3f0:	3001      	adds	r0, #1
 801b3f2:	d10e      	bne.n	801b412 <_printf_float+0x3f2>
 801b3f4:	e660      	b.n	801b0b8 <_printf_float+0x98>
 801b3f6:	2301      	movs	r3, #1
 801b3f8:	464a      	mov	r2, r9
 801b3fa:	4631      	mov	r1, r6
 801b3fc:	4628      	mov	r0, r5
 801b3fe:	47b8      	blx	r7
 801b400:	3001      	adds	r0, #1
 801b402:	f43f ae59 	beq.w	801b0b8 <_printf_float+0x98>
 801b406:	f108 0801 	add.w	r8, r8, #1
 801b40a:	9b08      	ldr	r3, [sp, #32]
 801b40c:	3b01      	subs	r3, #1
 801b40e:	4543      	cmp	r3, r8
 801b410:	dcf1      	bgt.n	801b3f6 <_printf_float+0x3d6>
 801b412:	9b04      	ldr	r3, [sp, #16]
 801b414:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b418:	e6dd      	b.n	801b1d6 <_printf_float+0x1b6>
 801b41a:	f04f 0800 	mov.w	r8, #0
 801b41e:	f104 091a 	add.w	r9, r4, #26
 801b422:	e7f2      	b.n	801b40a <_printf_float+0x3ea>
 801b424:	2301      	movs	r3, #1
 801b426:	4642      	mov	r2, r8
 801b428:	e7df      	b.n	801b3ea <_printf_float+0x3ca>
 801b42a:	2301      	movs	r3, #1
 801b42c:	464a      	mov	r2, r9
 801b42e:	4631      	mov	r1, r6
 801b430:	4628      	mov	r0, r5
 801b432:	47b8      	blx	r7
 801b434:	3001      	adds	r0, #1
 801b436:	f43f ae3f 	beq.w	801b0b8 <_printf_float+0x98>
 801b43a:	f108 0801 	add.w	r8, r8, #1
 801b43e:	68e3      	ldr	r3, [r4, #12]
 801b440:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b442:	1a5b      	subs	r3, r3, r1
 801b444:	4543      	cmp	r3, r8
 801b446:	dcf0      	bgt.n	801b42a <_printf_float+0x40a>
 801b448:	e6f9      	b.n	801b23e <_printf_float+0x21e>
 801b44a:	f04f 0800 	mov.w	r8, #0
 801b44e:	f104 0919 	add.w	r9, r4, #25
 801b452:	e7f4      	b.n	801b43e <_printf_float+0x41e>

0801b454 <_printf_common>:
 801b454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b458:	4616      	mov	r6, r2
 801b45a:	4699      	mov	r9, r3
 801b45c:	688a      	ldr	r2, [r1, #8]
 801b45e:	690b      	ldr	r3, [r1, #16]
 801b460:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b464:	4293      	cmp	r3, r2
 801b466:	bfb8      	it	lt
 801b468:	4613      	movlt	r3, r2
 801b46a:	6033      	str	r3, [r6, #0]
 801b46c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b470:	4607      	mov	r7, r0
 801b472:	460c      	mov	r4, r1
 801b474:	b10a      	cbz	r2, 801b47a <_printf_common+0x26>
 801b476:	3301      	adds	r3, #1
 801b478:	6033      	str	r3, [r6, #0]
 801b47a:	6823      	ldr	r3, [r4, #0]
 801b47c:	0699      	lsls	r1, r3, #26
 801b47e:	bf42      	ittt	mi
 801b480:	6833      	ldrmi	r3, [r6, #0]
 801b482:	3302      	addmi	r3, #2
 801b484:	6033      	strmi	r3, [r6, #0]
 801b486:	6825      	ldr	r5, [r4, #0]
 801b488:	f015 0506 	ands.w	r5, r5, #6
 801b48c:	d106      	bne.n	801b49c <_printf_common+0x48>
 801b48e:	f104 0a19 	add.w	sl, r4, #25
 801b492:	68e3      	ldr	r3, [r4, #12]
 801b494:	6832      	ldr	r2, [r6, #0]
 801b496:	1a9b      	subs	r3, r3, r2
 801b498:	42ab      	cmp	r3, r5
 801b49a:	dc26      	bgt.n	801b4ea <_printf_common+0x96>
 801b49c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b4a0:	1e13      	subs	r3, r2, #0
 801b4a2:	6822      	ldr	r2, [r4, #0]
 801b4a4:	bf18      	it	ne
 801b4a6:	2301      	movne	r3, #1
 801b4a8:	0692      	lsls	r2, r2, #26
 801b4aa:	d42b      	bmi.n	801b504 <_printf_common+0xb0>
 801b4ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b4b0:	4649      	mov	r1, r9
 801b4b2:	4638      	mov	r0, r7
 801b4b4:	47c0      	blx	r8
 801b4b6:	3001      	adds	r0, #1
 801b4b8:	d01e      	beq.n	801b4f8 <_printf_common+0xa4>
 801b4ba:	6823      	ldr	r3, [r4, #0]
 801b4bc:	6922      	ldr	r2, [r4, #16]
 801b4be:	f003 0306 	and.w	r3, r3, #6
 801b4c2:	2b04      	cmp	r3, #4
 801b4c4:	bf02      	ittt	eq
 801b4c6:	68e5      	ldreq	r5, [r4, #12]
 801b4c8:	6833      	ldreq	r3, [r6, #0]
 801b4ca:	1aed      	subeq	r5, r5, r3
 801b4cc:	68a3      	ldr	r3, [r4, #8]
 801b4ce:	bf0c      	ite	eq
 801b4d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b4d4:	2500      	movne	r5, #0
 801b4d6:	4293      	cmp	r3, r2
 801b4d8:	bfc4      	itt	gt
 801b4da:	1a9b      	subgt	r3, r3, r2
 801b4dc:	18ed      	addgt	r5, r5, r3
 801b4de:	2600      	movs	r6, #0
 801b4e0:	341a      	adds	r4, #26
 801b4e2:	42b5      	cmp	r5, r6
 801b4e4:	d11a      	bne.n	801b51c <_printf_common+0xc8>
 801b4e6:	2000      	movs	r0, #0
 801b4e8:	e008      	b.n	801b4fc <_printf_common+0xa8>
 801b4ea:	2301      	movs	r3, #1
 801b4ec:	4652      	mov	r2, sl
 801b4ee:	4649      	mov	r1, r9
 801b4f0:	4638      	mov	r0, r7
 801b4f2:	47c0      	blx	r8
 801b4f4:	3001      	adds	r0, #1
 801b4f6:	d103      	bne.n	801b500 <_printf_common+0xac>
 801b4f8:	f04f 30ff 	mov.w	r0, #4294967295
 801b4fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b500:	3501      	adds	r5, #1
 801b502:	e7c6      	b.n	801b492 <_printf_common+0x3e>
 801b504:	18e1      	adds	r1, r4, r3
 801b506:	1c5a      	adds	r2, r3, #1
 801b508:	2030      	movs	r0, #48	; 0x30
 801b50a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b50e:	4422      	add	r2, r4
 801b510:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b514:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b518:	3302      	adds	r3, #2
 801b51a:	e7c7      	b.n	801b4ac <_printf_common+0x58>
 801b51c:	2301      	movs	r3, #1
 801b51e:	4622      	mov	r2, r4
 801b520:	4649      	mov	r1, r9
 801b522:	4638      	mov	r0, r7
 801b524:	47c0      	blx	r8
 801b526:	3001      	adds	r0, #1
 801b528:	d0e6      	beq.n	801b4f8 <_printf_common+0xa4>
 801b52a:	3601      	adds	r6, #1
 801b52c:	e7d9      	b.n	801b4e2 <_printf_common+0x8e>
	...

0801b530 <_printf_i>:
 801b530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b534:	7e0f      	ldrb	r7, [r1, #24]
 801b536:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b538:	2f78      	cmp	r7, #120	; 0x78
 801b53a:	4691      	mov	r9, r2
 801b53c:	4680      	mov	r8, r0
 801b53e:	460c      	mov	r4, r1
 801b540:	469a      	mov	sl, r3
 801b542:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b546:	d807      	bhi.n	801b558 <_printf_i+0x28>
 801b548:	2f62      	cmp	r7, #98	; 0x62
 801b54a:	d80a      	bhi.n	801b562 <_printf_i+0x32>
 801b54c:	2f00      	cmp	r7, #0
 801b54e:	f000 80d4 	beq.w	801b6fa <_printf_i+0x1ca>
 801b552:	2f58      	cmp	r7, #88	; 0x58
 801b554:	f000 80c0 	beq.w	801b6d8 <_printf_i+0x1a8>
 801b558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b55c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b560:	e03a      	b.n	801b5d8 <_printf_i+0xa8>
 801b562:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b566:	2b15      	cmp	r3, #21
 801b568:	d8f6      	bhi.n	801b558 <_printf_i+0x28>
 801b56a:	a101      	add	r1, pc, #4	; (adr r1, 801b570 <_printf_i+0x40>)
 801b56c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b570:	0801b5c9 	.word	0x0801b5c9
 801b574:	0801b5dd 	.word	0x0801b5dd
 801b578:	0801b559 	.word	0x0801b559
 801b57c:	0801b559 	.word	0x0801b559
 801b580:	0801b559 	.word	0x0801b559
 801b584:	0801b559 	.word	0x0801b559
 801b588:	0801b5dd 	.word	0x0801b5dd
 801b58c:	0801b559 	.word	0x0801b559
 801b590:	0801b559 	.word	0x0801b559
 801b594:	0801b559 	.word	0x0801b559
 801b598:	0801b559 	.word	0x0801b559
 801b59c:	0801b6e1 	.word	0x0801b6e1
 801b5a0:	0801b609 	.word	0x0801b609
 801b5a4:	0801b69b 	.word	0x0801b69b
 801b5a8:	0801b559 	.word	0x0801b559
 801b5ac:	0801b559 	.word	0x0801b559
 801b5b0:	0801b703 	.word	0x0801b703
 801b5b4:	0801b559 	.word	0x0801b559
 801b5b8:	0801b609 	.word	0x0801b609
 801b5bc:	0801b559 	.word	0x0801b559
 801b5c0:	0801b559 	.word	0x0801b559
 801b5c4:	0801b6a3 	.word	0x0801b6a3
 801b5c8:	682b      	ldr	r3, [r5, #0]
 801b5ca:	1d1a      	adds	r2, r3, #4
 801b5cc:	681b      	ldr	r3, [r3, #0]
 801b5ce:	602a      	str	r2, [r5, #0]
 801b5d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b5d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b5d8:	2301      	movs	r3, #1
 801b5da:	e09f      	b.n	801b71c <_printf_i+0x1ec>
 801b5dc:	6820      	ldr	r0, [r4, #0]
 801b5de:	682b      	ldr	r3, [r5, #0]
 801b5e0:	0607      	lsls	r7, r0, #24
 801b5e2:	f103 0104 	add.w	r1, r3, #4
 801b5e6:	6029      	str	r1, [r5, #0]
 801b5e8:	d501      	bpl.n	801b5ee <_printf_i+0xbe>
 801b5ea:	681e      	ldr	r6, [r3, #0]
 801b5ec:	e003      	b.n	801b5f6 <_printf_i+0xc6>
 801b5ee:	0646      	lsls	r6, r0, #25
 801b5f0:	d5fb      	bpl.n	801b5ea <_printf_i+0xba>
 801b5f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b5f6:	2e00      	cmp	r6, #0
 801b5f8:	da03      	bge.n	801b602 <_printf_i+0xd2>
 801b5fa:	232d      	movs	r3, #45	; 0x2d
 801b5fc:	4276      	negs	r6, r6
 801b5fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b602:	485a      	ldr	r0, [pc, #360]	; (801b76c <_printf_i+0x23c>)
 801b604:	230a      	movs	r3, #10
 801b606:	e012      	b.n	801b62e <_printf_i+0xfe>
 801b608:	682b      	ldr	r3, [r5, #0]
 801b60a:	6820      	ldr	r0, [r4, #0]
 801b60c:	1d19      	adds	r1, r3, #4
 801b60e:	6029      	str	r1, [r5, #0]
 801b610:	0605      	lsls	r5, r0, #24
 801b612:	d501      	bpl.n	801b618 <_printf_i+0xe8>
 801b614:	681e      	ldr	r6, [r3, #0]
 801b616:	e002      	b.n	801b61e <_printf_i+0xee>
 801b618:	0641      	lsls	r1, r0, #25
 801b61a:	d5fb      	bpl.n	801b614 <_printf_i+0xe4>
 801b61c:	881e      	ldrh	r6, [r3, #0]
 801b61e:	4853      	ldr	r0, [pc, #332]	; (801b76c <_printf_i+0x23c>)
 801b620:	2f6f      	cmp	r7, #111	; 0x6f
 801b622:	bf0c      	ite	eq
 801b624:	2308      	moveq	r3, #8
 801b626:	230a      	movne	r3, #10
 801b628:	2100      	movs	r1, #0
 801b62a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b62e:	6865      	ldr	r5, [r4, #4]
 801b630:	60a5      	str	r5, [r4, #8]
 801b632:	2d00      	cmp	r5, #0
 801b634:	bfa2      	ittt	ge
 801b636:	6821      	ldrge	r1, [r4, #0]
 801b638:	f021 0104 	bicge.w	r1, r1, #4
 801b63c:	6021      	strge	r1, [r4, #0]
 801b63e:	b90e      	cbnz	r6, 801b644 <_printf_i+0x114>
 801b640:	2d00      	cmp	r5, #0
 801b642:	d04b      	beq.n	801b6dc <_printf_i+0x1ac>
 801b644:	4615      	mov	r5, r2
 801b646:	fbb6 f1f3 	udiv	r1, r6, r3
 801b64a:	fb03 6711 	mls	r7, r3, r1, r6
 801b64e:	5dc7      	ldrb	r7, [r0, r7]
 801b650:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b654:	4637      	mov	r7, r6
 801b656:	42bb      	cmp	r3, r7
 801b658:	460e      	mov	r6, r1
 801b65a:	d9f4      	bls.n	801b646 <_printf_i+0x116>
 801b65c:	2b08      	cmp	r3, #8
 801b65e:	d10b      	bne.n	801b678 <_printf_i+0x148>
 801b660:	6823      	ldr	r3, [r4, #0]
 801b662:	07de      	lsls	r6, r3, #31
 801b664:	d508      	bpl.n	801b678 <_printf_i+0x148>
 801b666:	6923      	ldr	r3, [r4, #16]
 801b668:	6861      	ldr	r1, [r4, #4]
 801b66a:	4299      	cmp	r1, r3
 801b66c:	bfde      	ittt	le
 801b66e:	2330      	movle	r3, #48	; 0x30
 801b670:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b674:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b678:	1b52      	subs	r2, r2, r5
 801b67a:	6122      	str	r2, [r4, #16]
 801b67c:	f8cd a000 	str.w	sl, [sp]
 801b680:	464b      	mov	r3, r9
 801b682:	aa03      	add	r2, sp, #12
 801b684:	4621      	mov	r1, r4
 801b686:	4640      	mov	r0, r8
 801b688:	f7ff fee4 	bl	801b454 <_printf_common>
 801b68c:	3001      	adds	r0, #1
 801b68e:	d14a      	bne.n	801b726 <_printf_i+0x1f6>
 801b690:	f04f 30ff 	mov.w	r0, #4294967295
 801b694:	b004      	add	sp, #16
 801b696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b69a:	6823      	ldr	r3, [r4, #0]
 801b69c:	f043 0320 	orr.w	r3, r3, #32
 801b6a0:	6023      	str	r3, [r4, #0]
 801b6a2:	4833      	ldr	r0, [pc, #204]	; (801b770 <_printf_i+0x240>)
 801b6a4:	2778      	movs	r7, #120	; 0x78
 801b6a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b6aa:	6823      	ldr	r3, [r4, #0]
 801b6ac:	6829      	ldr	r1, [r5, #0]
 801b6ae:	061f      	lsls	r7, r3, #24
 801b6b0:	f851 6b04 	ldr.w	r6, [r1], #4
 801b6b4:	d402      	bmi.n	801b6bc <_printf_i+0x18c>
 801b6b6:	065f      	lsls	r7, r3, #25
 801b6b8:	bf48      	it	mi
 801b6ba:	b2b6      	uxthmi	r6, r6
 801b6bc:	07df      	lsls	r7, r3, #31
 801b6be:	bf48      	it	mi
 801b6c0:	f043 0320 	orrmi.w	r3, r3, #32
 801b6c4:	6029      	str	r1, [r5, #0]
 801b6c6:	bf48      	it	mi
 801b6c8:	6023      	strmi	r3, [r4, #0]
 801b6ca:	b91e      	cbnz	r6, 801b6d4 <_printf_i+0x1a4>
 801b6cc:	6823      	ldr	r3, [r4, #0]
 801b6ce:	f023 0320 	bic.w	r3, r3, #32
 801b6d2:	6023      	str	r3, [r4, #0]
 801b6d4:	2310      	movs	r3, #16
 801b6d6:	e7a7      	b.n	801b628 <_printf_i+0xf8>
 801b6d8:	4824      	ldr	r0, [pc, #144]	; (801b76c <_printf_i+0x23c>)
 801b6da:	e7e4      	b.n	801b6a6 <_printf_i+0x176>
 801b6dc:	4615      	mov	r5, r2
 801b6de:	e7bd      	b.n	801b65c <_printf_i+0x12c>
 801b6e0:	682b      	ldr	r3, [r5, #0]
 801b6e2:	6826      	ldr	r6, [r4, #0]
 801b6e4:	6961      	ldr	r1, [r4, #20]
 801b6e6:	1d18      	adds	r0, r3, #4
 801b6e8:	6028      	str	r0, [r5, #0]
 801b6ea:	0635      	lsls	r5, r6, #24
 801b6ec:	681b      	ldr	r3, [r3, #0]
 801b6ee:	d501      	bpl.n	801b6f4 <_printf_i+0x1c4>
 801b6f0:	6019      	str	r1, [r3, #0]
 801b6f2:	e002      	b.n	801b6fa <_printf_i+0x1ca>
 801b6f4:	0670      	lsls	r0, r6, #25
 801b6f6:	d5fb      	bpl.n	801b6f0 <_printf_i+0x1c0>
 801b6f8:	8019      	strh	r1, [r3, #0]
 801b6fa:	2300      	movs	r3, #0
 801b6fc:	6123      	str	r3, [r4, #16]
 801b6fe:	4615      	mov	r5, r2
 801b700:	e7bc      	b.n	801b67c <_printf_i+0x14c>
 801b702:	682b      	ldr	r3, [r5, #0]
 801b704:	1d1a      	adds	r2, r3, #4
 801b706:	602a      	str	r2, [r5, #0]
 801b708:	681d      	ldr	r5, [r3, #0]
 801b70a:	6862      	ldr	r2, [r4, #4]
 801b70c:	2100      	movs	r1, #0
 801b70e:	4628      	mov	r0, r5
 801b710:	f7e4 fe0e 	bl	8000330 <memchr>
 801b714:	b108      	cbz	r0, 801b71a <_printf_i+0x1ea>
 801b716:	1b40      	subs	r0, r0, r5
 801b718:	6060      	str	r0, [r4, #4]
 801b71a:	6863      	ldr	r3, [r4, #4]
 801b71c:	6123      	str	r3, [r4, #16]
 801b71e:	2300      	movs	r3, #0
 801b720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b724:	e7aa      	b.n	801b67c <_printf_i+0x14c>
 801b726:	6923      	ldr	r3, [r4, #16]
 801b728:	462a      	mov	r2, r5
 801b72a:	4649      	mov	r1, r9
 801b72c:	4640      	mov	r0, r8
 801b72e:	47d0      	blx	sl
 801b730:	3001      	adds	r0, #1
 801b732:	d0ad      	beq.n	801b690 <_printf_i+0x160>
 801b734:	6823      	ldr	r3, [r4, #0]
 801b736:	079b      	lsls	r3, r3, #30
 801b738:	d413      	bmi.n	801b762 <_printf_i+0x232>
 801b73a:	68e0      	ldr	r0, [r4, #12]
 801b73c:	9b03      	ldr	r3, [sp, #12]
 801b73e:	4298      	cmp	r0, r3
 801b740:	bfb8      	it	lt
 801b742:	4618      	movlt	r0, r3
 801b744:	e7a6      	b.n	801b694 <_printf_i+0x164>
 801b746:	2301      	movs	r3, #1
 801b748:	4632      	mov	r2, r6
 801b74a:	4649      	mov	r1, r9
 801b74c:	4640      	mov	r0, r8
 801b74e:	47d0      	blx	sl
 801b750:	3001      	adds	r0, #1
 801b752:	d09d      	beq.n	801b690 <_printf_i+0x160>
 801b754:	3501      	adds	r5, #1
 801b756:	68e3      	ldr	r3, [r4, #12]
 801b758:	9903      	ldr	r1, [sp, #12]
 801b75a:	1a5b      	subs	r3, r3, r1
 801b75c:	42ab      	cmp	r3, r5
 801b75e:	dcf2      	bgt.n	801b746 <_printf_i+0x216>
 801b760:	e7eb      	b.n	801b73a <_printf_i+0x20a>
 801b762:	2500      	movs	r5, #0
 801b764:	f104 0619 	add.w	r6, r4, #25
 801b768:	e7f5      	b.n	801b756 <_printf_i+0x226>
 801b76a:	bf00      	nop
 801b76c:	080204e4 	.word	0x080204e4
 801b770:	080204f5 	.word	0x080204f5

0801b774 <_scanf_float>:
 801b774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b778:	b087      	sub	sp, #28
 801b77a:	4617      	mov	r7, r2
 801b77c:	9303      	str	r3, [sp, #12]
 801b77e:	688b      	ldr	r3, [r1, #8]
 801b780:	1e5a      	subs	r2, r3, #1
 801b782:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801b786:	bf83      	ittte	hi
 801b788:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801b78c:	195b      	addhi	r3, r3, r5
 801b78e:	9302      	strhi	r3, [sp, #8]
 801b790:	2300      	movls	r3, #0
 801b792:	bf86      	itte	hi
 801b794:	f240 135d 	movwhi	r3, #349	; 0x15d
 801b798:	608b      	strhi	r3, [r1, #8]
 801b79a:	9302      	strls	r3, [sp, #8]
 801b79c:	680b      	ldr	r3, [r1, #0]
 801b79e:	468b      	mov	fp, r1
 801b7a0:	2500      	movs	r5, #0
 801b7a2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801b7a6:	f84b 3b1c 	str.w	r3, [fp], #28
 801b7aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b7ae:	4680      	mov	r8, r0
 801b7b0:	460c      	mov	r4, r1
 801b7b2:	465e      	mov	r6, fp
 801b7b4:	46aa      	mov	sl, r5
 801b7b6:	46a9      	mov	r9, r5
 801b7b8:	9501      	str	r5, [sp, #4]
 801b7ba:	68a2      	ldr	r2, [r4, #8]
 801b7bc:	b152      	cbz	r2, 801b7d4 <_scanf_float+0x60>
 801b7be:	683b      	ldr	r3, [r7, #0]
 801b7c0:	781b      	ldrb	r3, [r3, #0]
 801b7c2:	2b4e      	cmp	r3, #78	; 0x4e
 801b7c4:	d864      	bhi.n	801b890 <_scanf_float+0x11c>
 801b7c6:	2b40      	cmp	r3, #64	; 0x40
 801b7c8:	d83c      	bhi.n	801b844 <_scanf_float+0xd0>
 801b7ca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801b7ce:	b2c8      	uxtb	r0, r1
 801b7d0:	280e      	cmp	r0, #14
 801b7d2:	d93a      	bls.n	801b84a <_scanf_float+0xd6>
 801b7d4:	f1b9 0f00 	cmp.w	r9, #0
 801b7d8:	d003      	beq.n	801b7e2 <_scanf_float+0x6e>
 801b7da:	6823      	ldr	r3, [r4, #0]
 801b7dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b7e0:	6023      	str	r3, [r4, #0]
 801b7e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b7e6:	f1ba 0f01 	cmp.w	sl, #1
 801b7ea:	f200 8113 	bhi.w	801ba14 <_scanf_float+0x2a0>
 801b7ee:	455e      	cmp	r6, fp
 801b7f0:	f200 8105 	bhi.w	801b9fe <_scanf_float+0x28a>
 801b7f4:	2501      	movs	r5, #1
 801b7f6:	4628      	mov	r0, r5
 801b7f8:	b007      	add	sp, #28
 801b7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7fe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801b802:	2a0d      	cmp	r2, #13
 801b804:	d8e6      	bhi.n	801b7d4 <_scanf_float+0x60>
 801b806:	a101      	add	r1, pc, #4	; (adr r1, 801b80c <_scanf_float+0x98>)
 801b808:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b80c:	0801b94b 	.word	0x0801b94b
 801b810:	0801b7d5 	.word	0x0801b7d5
 801b814:	0801b7d5 	.word	0x0801b7d5
 801b818:	0801b7d5 	.word	0x0801b7d5
 801b81c:	0801b9ab 	.word	0x0801b9ab
 801b820:	0801b983 	.word	0x0801b983
 801b824:	0801b7d5 	.word	0x0801b7d5
 801b828:	0801b7d5 	.word	0x0801b7d5
 801b82c:	0801b959 	.word	0x0801b959
 801b830:	0801b7d5 	.word	0x0801b7d5
 801b834:	0801b7d5 	.word	0x0801b7d5
 801b838:	0801b7d5 	.word	0x0801b7d5
 801b83c:	0801b7d5 	.word	0x0801b7d5
 801b840:	0801b911 	.word	0x0801b911
 801b844:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801b848:	e7db      	b.n	801b802 <_scanf_float+0x8e>
 801b84a:	290e      	cmp	r1, #14
 801b84c:	d8c2      	bhi.n	801b7d4 <_scanf_float+0x60>
 801b84e:	a001      	add	r0, pc, #4	; (adr r0, 801b854 <_scanf_float+0xe0>)
 801b850:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801b854:	0801b903 	.word	0x0801b903
 801b858:	0801b7d5 	.word	0x0801b7d5
 801b85c:	0801b903 	.word	0x0801b903
 801b860:	0801b997 	.word	0x0801b997
 801b864:	0801b7d5 	.word	0x0801b7d5
 801b868:	0801b8b1 	.word	0x0801b8b1
 801b86c:	0801b8ed 	.word	0x0801b8ed
 801b870:	0801b8ed 	.word	0x0801b8ed
 801b874:	0801b8ed 	.word	0x0801b8ed
 801b878:	0801b8ed 	.word	0x0801b8ed
 801b87c:	0801b8ed 	.word	0x0801b8ed
 801b880:	0801b8ed 	.word	0x0801b8ed
 801b884:	0801b8ed 	.word	0x0801b8ed
 801b888:	0801b8ed 	.word	0x0801b8ed
 801b88c:	0801b8ed 	.word	0x0801b8ed
 801b890:	2b6e      	cmp	r3, #110	; 0x6e
 801b892:	d809      	bhi.n	801b8a8 <_scanf_float+0x134>
 801b894:	2b60      	cmp	r3, #96	; 0x60
 801b896:	d8b2      	bhi.n	801b7fe <_scanf_float+0x8a>
 801b898:	2b54      	cmp	r3, #84	; 0x54
 801b89a:	d077      	beq.n	801b98c <_scanf_float+0x218>
 801b89c:	2b59      	cmp	r3, #89	; 0x59
 801b89e:	d199      	bne.n	801b7d4 <_scanf_float+0x60>
 801b8a0:	2d07      	cmp	r5, #7
 801b8a2:	d197      	bne.n	801b7d4 <_scanf_float+0x60>
 801b8a4:	2508      	movs	r5, #8
 801b8a6:	e029      	b.n	801b8fc <_scanf_float+0x188>
 801b8a8:	2b74      	cmp	r3, #116	; 0x74
 801b8aa:	d06f      	beq.n	801b98c <_scanf_float+0x218>
 801b8ac:	2b79      	cmp	r3, #121	; 0x79
 801b8ae:	e7f6      	b.n	801b89e <_scanf_float+0x12a>
 801b8b0:	6821      	ldr	r1, [r4, #0]
 801b8b2:	05c8      	lsls	r0, r1, #23
 801b8b4:	d51a      	bpl.n	801b8ec <_scanf_float+0x178>
 801b8b6:	9b02      	ldr	r3, [sp, #8]
 801b8b8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801b8bc:	6021      	str	r1, [r4, #0]
 801b8be:	f109 0901 	add.w	r9, r9, #1
 801b8c2:	b11b      	cbz	r3, 801b8cc <_scanf_float+0x158>
 801b8c4:	3b01      	subs	r3, #1
 801b8c6:	3201      	adds	r2, #1
 801b8c8:	9302      	str	r3, [sp, #8]
 801b8ca:	60a2      	str	r2, [r4, #8]
 801b8cc:	68a3      	ldr	r3, [r4, #8]
 801b8ce:	3b01      	subs	r3, #1
 801b8d0:	60a3      	str	r3, [r4, #8]
 801b8d2:	6923      	ldr	r3, [r4, #16]
 801b8d4:	3301      	adds	r3, #1
 801b8d6:	6123      	str	r3, [r4, #16]
 801b8d8:	687b      	ldr	r3, [r7, #4]
 801b8da:	3b01      	subs	r3, #1
 801b8dc:	2b00      	cmp	r3, #0
 801b8de:	607b      	str	r3, [r7, #4]
 801b8e0:	f340 8084 	ble.w	801b9ec <_scanf_float+0x278>
 801b8e4:	683b      	ldr	r3, [r7, #0]
 801b8e6:	3301      	adds	r3, #1
 801b8e8:	603b      	str	r3, [r7, #0]
 801b8ea:	e766      	b.n	801b7ba <_scanf_float+0x46>
 801b8ec:	eb1a 0f05 	cmn.w	sl, r5
 801b8f0:	f47f af70 	bne.w	801b7d4 <_scanf_float+0x60>
 801b8f4:	6822      	ldr	r2, [r4, #0]
 801b8f6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801b8fa:	6022      	str	r2, [r4, #0]
 801b8fc:	f806 3b01 	strb.w	r3, [r6], #1
 801b900:	e7e4      	b.n	801b8cc <_scanf_float+0x158>
 801b902:	6822      	ldr	r2, [r4, #0]
 801b904:	0610      	lsls	r0, r2, #24
 801b906:	f57f af65 	bpl.w	801b7d4 <_scanf_float+0x60>
 801b90a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801b90e:	e7f4      	b.n	801b8fa <_scanf_float+0x186>
 801b910:	f1ba 0f00 	cmp.w	sl, #0
 801b914:	d10e      	bne.n	801b934 <_scanf_float+0x1c0>
 801b916:	f1b9 0f00 	cmp.w	r9, #0
 801b91a:	d10e      	bne.n	801b93a <_scanf_float+0x1c6>
 801b91c:	6822      	ldr	r2, [r4, #0]
 801b91e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b922:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b926:	d108      	bne.n	801b93a <_scanf_float+0x1c6>
 801b928:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b92c:	6022      	str	r2, [r4, #0]
 801b92e:	f04f 0a01 	mov.w	sl, #1
 801b932:	e7e3      	b.n	801b8fc <_scanf_float+0x188>
 801b934:	f1ba 0f02 	cmp.w	sl, #2
 801b938:	d055      	beq.n	801b9e6 <_scanf_float+0x272>
 801b93a:	2d01      	cmp	r5, #1
 801b93c:	d002      	beq.n	801b944 <_scanf_float+0x1d0>
 801b93e:	2d04      	cmp	r5, #4
 801b940:	f47f af48 	bne.w	801b7d4 <_scanf_float+0x60>
 801b944:	3501      	adds	r5, #1
 801b946:	b2ed      	uxtb	r5, r5
 801b948:	e7d8      	b.n	801b8fc <_scanf_float+0x188>
 801b94a:	f1ba 0f01 	cmp.w	sl, #1
 801b94e:	f47f af41 	bne.w	801b7d4 <_scanf_float+0x60>
 801b952:	f04f 0a02 	mov.w	sl, #2
 801b956:	e7d1      	b.n	801b8fc <_scanf_float+0x188>
 801b958:	b97d      	cbnz	r5, 801b97a <_scanf_float+0x206>
 801b95a:	f1b9 0f00 	cmp.w	r9, #0
 801b95e:	f47f af3c 	bne.w	801b7da <_scanf_float+0x66>
 801b962:	6822      	ldr	r2, [r4, #0]
 801b964:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b968:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b96c:	f47f af39 	bne.w	801b7e2 <_scanf_float+0x6e>
 801b970:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b974:	6022      	str	r2, [r4, #0]
 801b976:	2501      	movs	r5, #1
 801b978:	e7c0      	b.n	801b8fc <_scanf_float+0x188>
 801b97a:	2d03      	cmp	r5, #3
 801b97c:	d0e2      	beq.n	801b944 <_scanf_float+0x1d0>
 801b97e:	2d05      	cmp	r5, #5
 801b980:	e7de      	b.n	801b940 <_scanf_float+0x1cc>
 801b982:	2d02      	cmp	r5, #2
 801b984:	f47f af26 	bne.w	801b7d4 <_scanf_float+0x60>
 801b988:	2503      	movs	r5, #3
 801b98a:	e7b7      	b.n	801b8fc <_scanf_float+0x188>
 801b98c:	2d06      	cmp	r5, #6
 801b98e:	f47f af21 	bne.w	801b7d4 <_scanf_float+0x60>
 801b992:	2507      	movs	r5, #7
 801b994:	e7b2      	b.n	801b8fc <_scanf_float+0x188>
 801b996:	6822      	ldr	r2, [r4, #0]
 801b998:	0591      	lsls	r1, r2, #22
 801b99a:	f57f af1b 	bpl.w	801b7d4 <_scanf_float+0x60>
 801b99e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801b9a2:	6022      	str	r2, [r4, #0]
 801b9a4:	f8cd 9004 	str.w	r9, [sp, #4]
 801b9a8:	e7a8      	b.n	801b8fc <_scanf_float+0x188>
 801b9aa:	6822      	ldr	r2, [r4, #0]
 801b9ac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801b9b0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801b9b4:	d006      	beq.n	801b9c4 <_scanf_float+0x250>
 801b9b6:	0550      	lsls	r0, r2, #21
 801b9b8:	f57f af0c 	bpl.w	801b7d4 <_scanf_float+0x60>
 801b9bc:	f1b9 0f00 	cmp.w	r9, #0
 801b9c0:	f43f af0f 	beq.w	801b7e2 <_scanf_float+0x6e>
 801b9c4:	0591      	lsls	r1, r2, #22
 801b9c6:	bf58      	it	pl
 801b9c8:	9901      	ldrpl	r1, [sp, #4]
 801b9ca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b9ce:	bf58      	it	pl
 801b9d0:	eba9 0101 	subpl.w	r1, r9, r1
 801b9d4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801b9d8:	bf58      	it	pl
 801b9da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801b9de:	6022      	str	r2, [r4, #0]
 801b9e0:	f04f 0900 	mov.w	r9, #0
 801b9e4:	e78a      	b.n	801b8fc <_scanf_float+0x188>
 801b9e6:	f04f 0a03 	mov.w	sl, #3
 801b9ea:	e787      	b.n	801b8fc <_scanf_float+0x188>
 801b9ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801b9f0:	4639      	mov	r1, r7
 801b9f2:	4640      	mov	r0, r8
 801b9f4:	4798      	blx	r3
 801b9f6:	2800      	cmp	r0, #0
 801b9f8:	f43f aedf 	beq.w	801b7ba <_scanf_float+0x46>
 801b9fc:	e6ea      	b.n	801b7d4 <_scanf_float+0x60>
 801b9fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ba02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801ba06:	463a      	mov	r2, r7
 801ba08:	4640      	mov	r0, r8
 801ba0a:	4798      	blx	r3
 801ba0c:	6923      	ldr	r3, [r4, #16]
 801ba0e:	3b01      	subs	r3, #1
 801ba10:	6123      	str	r3, [r4, #16]
 801ba12:	e6ec      	b.n	801b7ee <_scanf_float+0x7a>
 801ba14:	1e6b      	subs	r3, r5, #1
 801ba16:	2b06      	cmp	r3, #6
 801ba18:	d825      	bhi.n	801ba66 <_scanf_float+0x2f2>
 801ba1a:	2d02      	cmp	r5, #2
 801ba1c:	d836      	bhi.n	801ba8c <_scanf_float+0x318>
 801ba1e:	455e      	cmp	r6, fp
 801ba20:	f67f aee8 	bls.w	801b7f4 <_scanf_float+0x80>
 801ba24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ba28:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801ba2c:	463a      	mov	r2, r7
 801ba2e:	4640      	mov	r0, r8
 801ba30:	4798      	blx	r3
 801ba32:	6923      	ldr	r3, [r4, #16]
 801ba34:	3b01      	subs	r3, #1
 801ba36:	6123      	str	r3, [r4, #16]
 801ba38:	e7f1      	b.n	801ba1e <_scanf_float+0x2aa>
 801ba3a:	9802      	ldr	r0, [sp, #8]
 801ba3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ba40:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801ba44:	9002      	str	r0, [sp, #8]
 801ba46:	463a      	mov	r2, r7
 801ba48:	4640      	mov	r0, r8
 801ba4a:	4798      	blx	r3
 801ba4c:	6923      	ldr	r3, [r4, #16]
 801ba4e:	3b01      	subs	r3, #1
 801ba50:	6123      	str	r3, [r4, #16]
 801ba52:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ba56:	fa5f fa8a 	uxtb.w	sl, sl
 801ba5a:	f1ba 0f02 	cmp.w	sl, #2
 801ba5e:	d1ec      	bne.n	801ba3a <_scanf_float+0x2c6>
 801ba60:	3d03      	subs	r5, #3
 801ba62:	b2ed      	uxtb	r5, r5
 801ba64:	1b76      	subs	r6, r6, r5
 801ba66:	6823      	ldr	r3, [r4, #0]
 801ba68:	05da      	lsls	r2, r3, #23
 801ba6a:	d52f      	bpl.n	801bacc <_scanf_float+0x358>
 801ba6c:	055b      	lsls	r3, r3, #21
 801ba6e:	d510      	bpl.n	801ba92 <_scanf_float+0x31e>
 801ba70:	455e      	cmp	r6, fp
 801ba72:	f67f aebf 	bls.w	801b7f4 <_scanf_float+0x80>
 801ba76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ba7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801ba7e:	463a      	mov	r2, r7
 801ba80:	4640      	mov	r0, r8
 801ba82:	4798      	blx	r3
 801ba84:	6923      	ldr	r3, [r4, #16]
 801ba86:	3b01      	subs	r3, #1
 801ba88:	6123      	str	r3, [r4, #16]
 801ba8a:	e7f1      	b.n	801ba70 <_scanf_float+0x2fc>
 801ba8c:	46aa      	mov	sl, r5
 801ba8e:	9602      	str	r6, [sp, #8]
 801ba90:	e7df      	b.n	801ba52 <_scanf_float+0x2de>
 801ba92:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801ba96:	6923      	ldr	r3, [r4, #16]
 801ba98:	2965      	cmp	r1, #101	; 0x65
 801ba9a:	f103 33ff 	add.w	r3, r3, #4294967295
 801ba9e:	f106 35ff 	add.w	r5, r6, #4294967295
 801baa2:	6123      	str	r3, [r4, #16]
 801baa4:	d00c      	beq.n	801bac0 <_scanf_float+0x34c>
 801baa6:	2945      	cmp	r1, #69	; 0x45
 801baa8:	d00a      	beq.n	801bac0 <_scanf_float+0x34c>
 801baaa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801baae:	463a      	mov	r2, r7
 801bab0:	4640      	mov	r0, r8
 801bab2:	4798      	blx	r3
 801bab4:	6923      	ldr	r3, [r4, #16]
 801bab6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801baba:	3b01      	subs	r3, #1
 801babc:	1eb5      	subs	r5, r6, #2
 801babe:	6123      	str	r3, [r4, #16]
 801bac0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bac4:	463a      	mov	r2, r7
 801bac6:	4640      	mov	r0, r8
 801bac8:	4798      	blx	r3
 801baca:	462e      	mov	r6, r5
 801bacc:	6825      	ldr	r5, [r4, #0]
 801bace:	f015 0510 	ands.w	r5, r5, #16
 801bad2:	d14d      	bne.n	801bb70 <_scanf_float+0x3fc>
 801bad4:	7035      	strb	r5, [r6, #0]
 801bad6:	6823      	ldr	r3, [r4, #0]
 801bad8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801badc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bae0:	d11a      	bne.n	801bb18 <_scanf_float+0x3a4>
 801bae2:	9b01      	ldr	r3, [sp, #4]
 801bae4:	454b      	cmp	r3, r9
 801bae6:	eba3 0209 	sub.w	r2, r3, r9
 801baea:	d122      	bne.n	801bb32 <_scanf_float+0x3be>
 801baec:	2200      	movs	r2, #0
 801baee:	4659      	mov	r1, fp
 801baf0:	4640      	mov	r0, r8
 801baf2:	f002 fb9f 	bl	801e234 <_strtod_r>
 801baf6:	9b03      	ldr	r3, [sp, #12]
 801baf8:	6821      	ldr	r1, [r4, #0]
 801bafa:	681b      	ldr	r3, [r3, #0]
 801bafc:	f011 0f02 	tst.w	r1, #2
 801bb00:	f103 0204 	add.w	r2, r3, #4
 801bb04:	d020      	beq.n	801bb48 <_scanf_float+0x3d4>
 801bb06:	9903      	ldr	r1, [sp, #12]
 801bb08:	600a      	str	r2, [r1, #0]
 801bb0a:	681b      	ldr	r3, [r3, #0]
 801bb0c:	ed83 0b00 	vstr	d0, [r3]
 801bb10:	68e3      	ldr	r3, [r4, #12]
 801bb12:	3301      	adds	r3, #1
 801bb14:	60e3      	str	r3, [r4, #12]
 801bb16:	e66e      	b.n	801b7f6 <_scanf_float+0x82>
 801bb18:	9b04      	ldr	r3, [sp, #16]
 801bb1a:	2b00      	cmp	r3, #0
 801bb1c:	d0e6      	beq.n	801baec <_scanf_float+0x378>
 801bb1e:	9905      	ldr	r1, [sp, #20]
 801bb20:	230a      	movs	r3, #10
 801bb22:	462a      	mov	r2, r5
 801bb24:	3101      	adds	r1, #1
 801bb26:	4640      	mov	r0, r8
 801bb28:	f002 fc0c 	bl	801e344 <_strtol_r>
 801bb2c:	9b04      	ldr	r3, [sp, #16]
 801bb2e:	9e05      	ldr	r6, [sp, #20]
 801bb30:	1ac2      	subs	r2, r0, r3
 801bb32:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801bb36:	429e      	cmp	r6, r3
 801bb38:	bf28      	it	cs
 801bb3a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801bb3e:	490d      	ldr	r1, [pc, #52]	; (801bb74 <_scanf_float+0x400>)
 801bb40:	4630      	mov	r0, r6
 801bb42:	f000 f8dd 	bl	801bd00 <siprintf>
 801bb46:	e7d1      	b.n	801baec <_scanf_float+0x378>
 801bb48:	f011 0f04 	tst.w	r1, #4
 801bb4c:	9903      	ldr	r1, [sp, #12]
 801bb4e:	600a      	str	r2, [r1, #0]
 801bb50:	d1db      	bne.n	801bb0a <_scanf_float+0x396>
 801bb52:	eeb4 0b40 	vcmp.f64	d0, d0
 801bb56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb5a:	681e      	ldr	r6, [r3, #0]
 801bb5c:	d705      	bvc.n	801bb6a <_scanf_float+0x3f6>
 801bb5e:	4806      	ldr	r0, [pc, #24]	; (801bb78 <_scanf_float+0x404>)
 801bb60:	f000 f9f6 	bl	801bf50 <nanf>
 801bb64:	ed86 0a00 	vstr	s0, [r6]
 801bb68:	e7d2      	b.n	801bb10 <_scanf_float+0x39c>
 801bb6a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801bb6e:	e7f9      	b.n	801bb64 <_scanf_float+0x3f0>
 801bb70:	2500      	movs	r5, #0
 801bb72:	e640      	b.n	801b7f6 <_scanf_float+0x82>
 801bb74:	08020506 	.word	0x08020506
 801bb78:	080208b8 	.word	0x080208b8

0801bb7c <std>:
 801bb7c:	2300      	movs	r3, #0
 801bb7e:	b510      	push	{r4, lr}
 801bb80:	4604      	mov	r4, r0
 801bb82:	e9c0 3300 	strd	r3, r3, [r0]
 801bb86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bb8a:	6083      	str	r3, [r0, #8]
 801bb8c:	8181      	strh	r1, [r0, #12]
 801bb8e:	6643      	str	r3, [r0, #100]	; 0x64
 801bb90:	81c2      	strh	r2, [r0, #14]
 801bb92:	6183      	str	r3, [r0, #24]
 801bb94:	4619      	mov	r1, r3
 801bb96:	2208      	movs	r2, #8
 801bb98:	305c      	adds	r0, #92	; 0x5c
 801bb9a:	f000 f942 	bl	801be22 <memset>
 801bb9e:	4b0d      	ldr	r3, [pc, #52]	; (801bbd4 <std+0x58>)
 801bba0:	6263      	str	r3, [r4, #36]	; 0x24
 801bba2:	4b0d      	ldr	r3, [pc, #52]	; (801bbd8 <std+0x5c>)
 801bba4:	62a3      	str	r3, [r4, #40]	; 0x28
 801bba6:	4b0d      	ldr	r3, [pc, #52]	; (801bbdc <std+0x60>)
 801bba8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801bbaa:	4b0d      	ldr	r3, [pc, #52]	; (801bbe0 <std+0x64>)
 801bbac:	6323      	str	r3, [r4, #48]	; 0x30
 801bbae:	4b0d      	ldr	r3, [pc, #52]	; (801bbe4 <std+0x68>)
 801bbb0:	6224      	str	r4, [r4, #32]
 801bbb2:	429c      	cmp	r4, r3
 801bbb4:	d006      	beq.n	801bbc4 <std+0x48>
 801bbb6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801bbba:	4294      	cmp	r4, r2
 801bbbc:	d002      	beq.n	801bbc4 <std+0x48>
 801bbbe:	33d0      	adds	r3, #208	; 0xd0
 801bbc0:	429c      	cmp	r4, r3
 801bbc2:	d105      	bne.n	801bbd0 <std+0x54>
 801bbc4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801bbc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bbcc:	f000 b9a6 	b.w	801bf1c <__retarget_lock_init_recursive>
 801bbd0:	bd10      	pop	{r4, pc}
 801bbd2:	bf00      	nop
 801bbd4:	0801bd99 	.word	0x0801bd99
 801bbd8:	0801bdbf 	.word	0x0801bdbf
 801bbdc:	0801bdf7 	.word	0x0801bdf7
 801bbe0:	0801be1b 	.word	0x0801be1b
 801bbe4:	240034e4 	.word	0x240034e4

0801bbe8 <stdio_exit_handler>:
 801bbe8:	4a02      	ldr	r2, [pc, #8]	; (801bbf4 <stdio_exit_handler+0xc>)
 801bbea:	4903      	ldr	r1, [pc, #12]	; (801bbf8 <stdio_exit_handler+0x10>)
 801bbec:	4803      	ldr	r0, [pc, #12]	; (801bbfc <stdio_exit_handler+0x14>)
 801bbee:	f000 b869 	b.w	801bcc4 <_fwalk_sglue>
 801bbf2:	bf00      	nop
 801bbf4:	24000100 	.word	0x24000100
 801bbf8:	0801ed45 	.word	0x0801ed45
 801bbfc:	2400010c 	.word	0x2400010c

0801bc00 <cleanup_stdio>:
 801bc00:	6841      	ldr	r1, [r0, #4]
 801bc02:	4b0c      	ldr	r3, [pc, #48]	; (801bc34 <cleanup_stdio+0x34>)
 801bc04:	4299      	cmp	r1, r3
 801bc06:	b510      	push	{r4, lr}
 801bc08:	4604      	mov	r4, r0
 801bc0a:	d001      	beq.n	801bc10 <cleanup_stdio+0x10>
 801bc0c:	f003 f89a 	bl	801ed44 <_fflush_r>
 801bc10:	68a1      	ldr	r1, [r4, #8]
 801bc12:	4b09      	ldr	r3, [pc, #36]	; (801bc38 <cleanup_stdio+0x38>)
 801bc14:	4299      	cmp	r1, r3
 801bc16:	d002      	beq.n	801bc1e <cleanup_stdio+0x1e>
 801bc18:	4620      	mov	r0, r4
 801bc1a:	f003 f893 	bl	801ed44 <_fflush_r>
 801bc1e:	68e1      	ldr	r1, [r4, #12]
 801bc20:	4b06      	ldr	r3, [pc, #24]	; (801bc3c <cleanup_stdio+0x3c>)
 801bc22:	4299      	cmp	r1, r3
 801bc24:	d004      	beq.n	801bc30 <cleanup_stdio+0x30>
 801bc26:	4620      	mov	r0, r4
 801bc28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bc2c:	f003 b88a 	b.w	801ed44 <_fflush_r>
 801bc30:	bd10      	pop	{r4, pc}
 801bc32:	bf00      	nop
 801bc34:	240034e4 	.word	0x240034e4
 801bc38:	2400354c 	.word	0x2400354c
 801bc3c:	240035b4 	.word	0x240035b4

0801bc40 <global_stdio_init.part.0>:
 801bc40:	b510      	push	{r4, lr}
 801bc42:	4b0b      	ldr	r3, [pc, #44]	; (801bc70 <global_stdio_init.part.0+0x30>)
 801bc44:	4c0b      	ldr	r4, [pc, #44]	; (801bc74 <global_stdio_init.part.0+0x34>)
 801bc46:	4a0c      	ldr	r2, [pc, #48]	; (801bc78 <global_stdio_init.part.0+0x38>)
 801bc48:	601a      	str	r2, [r3, #0]
 801bc4a:	4620      	mov	r0, r4
 801bc4c:	2200      	movs	r2, #0
 801bc4e:	2104      	movs	r1, #4
 801bc50:	f7ff ff94 	bl	801bb7c <std>
 801bc54:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801bc58:	2201      	movs	r2, #1
 801bc5a:	2109      	movs	r1, #9
 801bc5c:	f7ff ff8e 	bl	801bb7c <std>
 801bc60:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801bc64:	2202      	movs	r2, #2
 801bc66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bc6a:	2112      	movs	r1, #18
 801bc6c:	f7ff bf86 	b.w	801bb7c <std>
 801bc70:	2400361c 	.word	0x2400361c
 801bc74:	240034e4 	.word	0x240034e4
 801bc78:	0801bbe9 	.word	0x0801bbe9

0801bc7c <__sfp_lock_acquire>:
 801bc7c:	4801      	ldr	r0, [pc, #4]	; (801bc84 <__sfp_lock_acquire+0x8>)
 801bc7e:	f000 b94e 	b.w	801bf1e <__retarget_lock_acquire_recursive>
 801bc82:	bf00      	nop
 801bc84:	24003625 	.word	0x24003625

0801bc88 <__sfp_lock_release>:
 801bc88:	4801      	ldr	r0, [pc, #4]	; (801bc90 <__sfp_lock_release+0x8>)
 801bc8a:	f000 b949 	b.w	801bf20 <__retarget_lock_release_recursive>
 801bc8e:	bf00      	nop
 801bc90:	24003625 	.word	0x24003625

0801bc94 <__sinit>:
 801bc94:	b510      	push	{r4, lr}
 801bc96:	4604      	mov	r4, r0
 801bc98:	f7ff fff0 	bl	801bc7c <__sfp_lock_acquire>
 801bc9c:	6a23      	ldr	r3, [r4, #32]
 801bc9e:	b11b      	cbz	r3, 801bca8 <__sinit+0x14>
 801bca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bca4:	f7ff bff0 	b.w	801bc88 <__sfp_lock_release>
 801bca8:	4b04      	ldr	r3, [pc, #16]	; (801bcbc <__sinit+0x28>)
 801bcaa:	6223      	str	r3, [r4, #32]
 801bcac:	4b04      	ldr	r3, [pc, #16]	; (801bcc0 <__sinit+0x2c>)
 801bcae:	681b      	ldr	r3, [r3, #0]
 801bcb0:	2b00      	cmp	r3, #0
 801bcb2:	d1f5      	bne.n	801bca0 <__sinit+0xc>
 801bcb4:	f7ff ffc4 	bl	801bc40 <global_stdio_init.part.0>
 801bcb8:	e7f2      	b.n	801bca0 <__sinit+0xc>
 801bcba:	bf00      	nop
 801bcbc:	0801bc01 	.word	0x0801bc01
 801bcc0:	2400361c 	.word	0x2400361c

0801bcc4 <_fwalk_sglue>:
 801bcc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bcc8:	4607      	mov	r7, r0
 801bcca:	4688      	mov	r8, r1
 801bccc:	4614      	mov	r4, r2
 801bcce:	2600      	movs	r6, #0
 801bcd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801bcd4:	f1b9 0901 	subs.w	r9, r9, #1
 801bcd8:	d505      	bpl.n	801bce6 <_fwalk_sglue+0x22>
 801bcda:	6824      	ldr	r4, [r4, #0]
 801bcdc:	2c00      	cmp	r4, #0
 801bcde:	d1f7      	bne.n	801bcd0 <_fwalk_sglue+0xc>
 801bce0:	4630      	mov	r0, r6
 801bce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bce6:	89ab      	ldrh	r3, [r5, #12]
 801bce8:	2b01      	cmp	r3, #1
 801bcea:	d907      	bls.n	801bcfc <_fwalk_sglue+0x38>
 801bcec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801bcf0:	3301      	adds	r3, #1
 801bcf2:	d003      	beq.n	801bcfc <_fwalk_sglue+0x38>
 801bcf4:	4629      	mov	r1, r5
 801bcf6:	4638      	mov	r0, r7
 801bcf8:	47c0      	blx	r8
 801bcfa:	4306      	orrs	r6, r0
 801bcfc:	3568      	adds	r5, #104	; 0x68
 801bcfe:	e7e9      	b.n	801bcd4 <_fwalk_sglue+0x10>

0801bd00 <siprintf>:
 801bd00:	b40e      	push	{r1, r2, r3}
 801bd02:	b500      	push	{lr}
 801bd04:	b09c      	sub	sp, #112	; 0x70
 801bd06:	ab1d      	add	r3, sp, #116	; 0x74
 801bd08:	9002      	str	r0, [sp, #8]
 801bd0a:	9006      	str	r0, [sp, #24]
 801bd0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801bd10:	4809      	ldr	r0, [pc, #36]	; (801bd38 <siprintf+0x38>)
 801bd12:	9107      	str	r1, [sp, #28]
 801bd14:	9104      	str	r1, [sp, #16]
 801bd16:	4909      	ldr	r1, [pc, #36]	; (801bd3c <siprintf+0x3c>)
 801bd18:	f853 2b04 	ldr.w	r2, [r3], #4
 801bd1c:	9105      	str	r1, [sp, #20]
 801bd1e:	6800      	ldr	r0, [r0, #0]
 801bd20:	9301      	str	r3, [sp, #4]
 801bd22:	a902      	add	r1, sp, #8
 801bd24:	f002 fb6a 	bl	801e3fc <_svfiprintf_r>
 801bd28:	9b02      	ldr	r3, [sp, #8]
 801bd2a:	2200      	movs	r2, #0
 801bd2c:	701a      	strb	r2, [r3, #0]
 801bd2e:	b01c      	add	sp, #112	; 0x70
 801bd30:	f85d eb04 	ldr.w	lr, [sp], #4
 801bd34:	b003      	add	sp, #12
 801bd36:	4770      	bx	lr
 801bd38:	24000158 	.word	0x24000158
 801bd3c:	ffff0208 	.word	0xffff0208

0801bd40 <siscanf>:
 801bd40:	b40e      	push	{r1, r2, r3}
 801bd42:	b510      	push	{r4, lr}
 801bd44:	b09f      	sub	sp, #124	; 0x7c
 801bd46:	ac21      	add	r4, sp, #132	; 0x84
 801bd48:	f44f 7101 	mov.w	r1, #516	; 0x204
 801bd4c:	f854 2b04 	ldr.w	r2, [r4], #4
 801bd50:	9201      	str	r2, [sp, #4]
 801bd52:	f8ad 101c 	strh.w	r1, [sp, #28]
 801bd56:	9004      	str	r0, [sp, #16]
 801bd58:	9008      	str	r0, [sp, #32]
 801bd5a:	f7e4 fb39 	bl	80003d0 <strlen>
 801bd5e:	4b0c      	ldr	r3, [pc, #48]	; (801bd90 <siscanf+0x50>)
 801bd60:	9005      	str	r0, [sp, #20]
 801bd62:	9009      	str	r0, [sp, #36]	; 0x24
 801bd64:	930d      	str	r3, [sp, #52]	; 0x34
 801bd66:	480b      	ldr	r0, [pc, #44]	; (801bd94 <siscanf+0x54>)
 801bd68:	9a01      	ldr	r2, [sp, #4]
 801bd6a:	6800      	ldr	r0, [r0, #0]
 801bd6c:	9403      	str	r4, [sp, #12]
 801bd6e:	2300      	movs	r3, #0
 801bd70:	9311      	str	r3, [sp, #68]	; 0x44
 801bd72:	9316      	str	r3, [sp, #88]	; 0x58
 801bd74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bd78:	f8ad 301e 	strh.w	r3, [sp, #30]
 801bd7c:	a904      	add	r1, sp, #16
 801bd7e:	4623      	mov	r3, r4
 801bd80:	f002 fc94 	bl	801e6ac <__ssvfiscanf_r>
 801bd84:	b01f      	add	sp, #124	; 0x7c
 801bd86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd8a:	b003      	add	sp, #12
 801bd8c:	4770      	bx	lr
 801bd8e:	bf00      	nop
 801bd90:	0801bdbb 	.word	0x0801bdbb
 801bd94:	24000158 	.word	0x24000158

0801bd98 <__sread>:
 801bd98:	b510      	push	{r4, lr}
 801bd9a:	460c      	mov	r4, r1
 801bd9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bda0:	f000 f86e 	bl	801be80 <_read_r>
 801bda4:	2800      	cmp	r0, #0
 801bda6:	bfab      	itete	ge
 801bda8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801bdaa:	89a3      	ldrhlt	r3, [r4, #12]
 801bdac:	181b      	addge	r3, r3, r0
 801bdae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801bdb2:	bfac      	ite	ge
 801bdb4:	6563      	strge	r3, [r4, #84]	; 0x54
 801bdb6:	81a3      	strhlt	r3, [r4, #12]
 801bdb8:	bd10      	pop	{r4, pc}

0801bdba <__seofread>:
 801bdba:	2000      	movs	r0, #0
 801bdbc:	4770      	bx	lr

0801bdbe <__swrite>:
 801bdbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bdc2:	461f      	mov	r7, r3
 801bdc4:	898b      	ldrh	r3, [r1, #12]
 801bdc6:	05db      	lsls	r3, r3, #23
 801bdc8:	4605      	mov	r5, r0
 801bdca:	460c      	mov	r4, r1
 801bdcc:	4616      	mov	r6, r2
 801bdce:	d505      	bpl.n	801bddc <__swrite+0x1e>
 801bdd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bdd4:	2302      	movs	r3, #2
 801bdd6:	2200      	movs	r2, #0
 801bdd8:	f000 f840 	bl	801be5c <_lseek_r>
 801bddc:	89a3      	ldrh	r3, [r4, #12]
 801bdde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bde2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bde6:	81a3      	strh	r3, [r4, #12]
 801bde8:	4632      	mov	r2, r6
 801bdea:	463b      	mov	r3, r7
 801bdec:	4628      	mov	r0, r5
 801bdee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bdf2:	f000 b857 	b.w	801bea4 <_write_r>

0801bdf6 <__sseek>:
 801bdf6:	b510      	push	{r4, lr}
 801bdf8:	460c      	mov	r4, r1
 801bdfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bdfe:	f000 f82d 	bl	801be5c <_lseek_r>
 801be02:	1c43      	adds	r3, r0, #1
 801be04:	89a3      	ldrh	r3, [r4, #12]
 801be06:	bf15      	itete	ne
 801be08:	6560      	strne	r0, [r4, #84]	; 0x54
 801be0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801be0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801be12:	81a3      	strheq	r3, [r4, #12]
 801be14:	bf18      	it	ne
 801be16:	81a3      	strhne	r3, [r4, #12]
 801be18:	bd10      	pop	{r4, pc}

0801be1a <__sclose>:
 801be1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801be1e:	f000 b80d 	b.w	801be3c <_close_r>

0801be22 <memset>:
 801be22:	4402      	add	r2, r0
 801be24:	4603      	mov	r3, r0
 801be26:	4293      	cmp	r3, r2
 801be28:	d100      	bne.n	801be2c <memset+0xa>
 801be2a:	4770      	bx	lr
 801be2c:	f803 1b01 	strb.w	r1, [r3], #1
 801be30:	e7f9      	b.n	801be26 <memset+0x4>
	...

0801be34 <_localeconv_r>:
 801be34:	4800      	ldr	r0, [pc, #0]	; (801be38 <_localeconv_r+0x4>)
 801be36:	4770      	bx	lr
 801be38:	2400024c 	.word	0x2400024c

0801be3c <_close_r>:
 801be3c:	b538      	push	{r3, r4, r5, lr}
 801be3e:	4d06      	ldr	r5, [pc, #24]	; (801be58 <_close_r+0x1c>)
 801be40:	2300      	movs	r3, #0
 801be42:	4604      	mov	r4, r0
 801be44:	4608      	mov	r0, r1
 801be46:	602b      	str	r3, [r5, #0]
 801be48:	f7e8 f817 	bl	8003e7a <_close>
 801be4c:	1c43      	adds	r3, r0, #1
 801be4e:	d102      	bne.n	801be56 <_close_r+0x1a>
 801be50:	682b      	ldr	r3, [r5, #0]
 801be52:	b103      	cbz	r3, 801be56 <_close_r+0x1a>
 801be54:	6023      	str	r3, [r4, #0]
 801be56:	bd38      	pop	{r3, r4, r5, pc}
 801be58:	24003620 	.word	0x24003620

0801be5c <_lseek_r>:
 801be5c:	b538      	push	{r3, r4, r5, lr}
 801be5e:	4d07      	ldr	r5, [pc, #28]	; (801be7c <_lseek_r+0x20>)
 801be60:	4604      	mov	r4, r0
 801be62:	4608      	mov	r0, r1
 801be64:	4611      	mov	r1, r2
 801be66:	2200      	movs	r2, #0
 801be68:	602a      	str	r2, [r5, #0]
 801be6a:	461a      	mov	r2, r3
 801be6c:	f7e8 f82c 	bl	8003ec8 <_lseek>
 801be70:	1c43      	adds	r3, r0, #1
 801be72:	d102      	bne.n	801be7a <_lseek_r+0x1e>
 801be74:	682b      	ldr	r3, [r5, #0]
 801be76:	b103      	cbz	r3, 801be7a <_lseek_r+0x1e>
 801be78:	6023      	str	r3, [r4, #0]
 801be7a:	bd38      	pop	{r3, r4, r5, pc}
 801be7c:	24003620 	.word	0x24003620

0801be80 <_read_r>:
 801be80:	b538      	push	{r3, r4, r5, lr}
 801be82:	4d07      	ldr	r5, [pc, #28]	; (801bea0 <_read_r+0x20>)
 801be84:	4604      	mov	r4, r0
 801be86:	4608      	mov	r0, r1
 801be88:	4611      	mov	r1, r2
 801be8a:	2200      	movs	r2, #0
 801be8c:	602a      	str	r2, [r5, #0]
 801be8e:	461a      	mov	r2, r3
 801be90:	f7e7 ffba 	bl	8003e08 <_read>
 801be94:	1c43      	adds	r3, r0, #1
 801be96:	d102      	bne.n	801be9e <_read_r+0x1e>
 801be98:	682b      	ldr	r3, [r5, #0]
 801be9a:	b103      	cbz	r3, 801be9e <_read_r+0x1e>
 801be9c:	6023      	str	r3, [r4, #0]
 801be9e:	bd38      	pop	{r3, r4, r5, pc}
 801bea0:	24003620 	.word	0x24003620

0801bea4 <_write_r>:
 801bea4:	b538      	push	{r3, r4, r5, lr}
 801bea6:	4d07      	ldr	r5, [pc, #28]	; (801bec4 <_write_r+0x20>)
 801bea8:	4604      	mov	r4, r0
 801beaa:	4608      	mov	r0, r1
 801beac:	4611      	mov	r1, r2
 801beae:	2200      	movs	r2, #0
 801beb0:	602a      	str	r2, [r5, #0]
 801beb2:	461a      	mov	r2, r3
 801beb4:	f7e7 ffc5 	bl	8003e42 <_write>
 801beb8:	1c43      	adds	r3, r0, #1
 801beba:	d102      	bne.n	801bec2 <_write_r+0x1e>
 801bebc:	682b      	ldr	r3, [r5, #0]
 801bebe:	b103      	cbz	r3, 801bec2 <_write_r+0x1e>
 801bec0:	6023      	str	r3, [r4, #0]
 801bec2:	bd38      	pop	{r3, r4, r5, pc}
 801bec4:	24003620 	.word	0x24003620

0801bec8 <__errno>:
 801bec8:	4b01      	ldr	r3, [pc, #4]	; (801bed0 <__errno+0x8>)
 801beca:	6818      	ldr	r0, [r3, #0]
 801becc:	4770      	bx	lr
 801bece:	bf00      	nop
 801bed0:	24000158 	.word	0x24000158

0801bed4 <__libc_init_array>:
 801bed4:	b570      	push	{r4, r5, r6, lr}
 801bed6:	4d0d      	ldr	r5, [pc, #52]	; (801bf0c <__libc_init_array+0x38>)
 801bed8:	4c0d      	ldr	r4, [pc, #52]	; (801bf10 <__libc_init_array+0x3c>)
 801beda:	1b64      	subs	r4, r4, r5
 801bedc:	10a4      	asrs	r4, r4, #2
 801bede:	2600      	movs	r6, #0
 801bee0:	42a6      	cmp	r6, r4
 801bee2:	d109      	bne.n	801bef8 <__libc_init_array+0x24>
 801bee4:	4d0b      	ldr	r5, [pc, #44]	; (801bf14 <__libc_init_array+0x40>)
 801bee6:	4c0c      	ldr	r4, [pc, #48]	; (801bf18 <__libc_init_array+0x44>)
 801bee8:	f003 ff1e 	bl	801fd28 <_init>
 801beec:	1b64      	subs	r4, r4, r5
 801beee:	10a4      	asrs	r4, r4, #2
 801bef0:	2600      	movs	r6, #0
 801bef2:	42a6      	cmp	r6, r4
 801bef4:	d105      	bne.n	801bf02 <__libc_init_array+0x2e>
 801bef6:	bd70      	pop	{r4, r5, r6, pc}
 801bef8:	f855 3b04 	ldr.w	r3, [r5], #4
 801befc:	4798      	blx	r3
 801befe:	3601      	adds	r6, #1
 801bf00:	e7ee      	b.n	801bee0 <__libc_init_array+0xc>
 801bf02:	f855 3b04 	ldr.w	r3, [r5], #4
 801bf06:	4798      	blx	r3
 801bf08:	3601      	adds	r6, #1
 801bf0a:	e7f2      	b.n	801bef2 <__libc_init_array+0x1e>
 801bf0c:	08020924 	.word	0x08020924
 801bf10:	08020924 	.word	0x08020924
 801bf14:	08020924 	.word	0x08020924
 801bf18:	08020928 	.word	0x08020928

0801bf1c <__retarget_lock_init_recursive>:
 801bf1c:	4770      	bx	lr

0801bf1e <__retarget_lock_acquire_recursive>:
 801bf1e:	4770      	bx	lr

0801bf20 <__retarget_lock_release_recursive>:
 801bf20:	4770      	bx	lr

0801bf22 <strcpy>:
 801bf22:	4603      	mov	r3, r0
 801bf24:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bf28:	f803 2b01 	strb.w	r2, [r3], #1
 801bf2c:	2a00      	cmp	r2, #0
 801bf2e:	d1f9      	bne.n	801bf24 <strcpy+0x2>
 801bf30:	4770      	bx	lr

0801bf32 <memcpy>:
 801bf32:	440a      	add	r2, r1
 801bf34:	4291      	cmp	r1, r2
 801bf36:	f100 33ff 	add.w	r3, r0, #4294967295
 801bf3a:	d100      	bne.n	801bf3e <memcpy+0xc>
 801bf3c:	4770      	bx	lr
 801bf3e:	b510      	push	{r4, lr}
 801bf40:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bf44:	f803 4f01 	strb.w	r4, [r3, #1]!
 801bf48:	4291      	cmp	r1, r2
 801bf4a:	d1f9      	bne.n	801bf40 <memcpy+0xe>
 801bf4c:	bd10      	pop	{r4, pc}
	...

0801bf50 <nanf>:
 801bf50:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801bf58 <nanf+0x8>
 801bf54:	4770      	bx	lr
 801bf56:	bf00      	nop
 801bf58:	7fc00000 	.word	0x7fc00000

0801bf5c <quorem>:
 801bf5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf60:	6903      	ldr	r3, [r0, #16]
 801bf62:	690c      	ldr	r4, [r1, #16]
 801bf64:	42a3      	cmp	r3, r4
 801bf66:	4607      	mov	r7, r0
 801bf68:	db7e      	blt.n	801c068 <quorem+0x10c>
 801bf6a:	3c01      	subs	r4, #1
 801bf6c:	f101 0814 	add.w	r8, r1, #20
 801bf70:	f100 0514 	add.w	r5, r0, #20
 801bf74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801bf78:	9301      	str	r3, [sp, #4]
 801bf7a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801bf7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801bf82:	3301      	adds	r3, #1
 801bf84:	429a      	cmp	r2, r3
 801bf86:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801bf8a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801bf8e:	fbb2 f6f3 	udiv	r6, r2, r3
 801bf92:	d331      	bcc.n	801bff8 <quorem+0x9c>
 801bf94:	f04f 0e00 	mov.w	lr, #0
 801bf98:	4640      	mov	r0, r8
 801bf9a:	46ac      	mov	ip, r5
 801bf9c:	46f2      	mov	sl, lr
 801bf9e:	f850 2b04 	ldr.w	r2, [r0], #4
 801bfa2:	b293      	uxth	r3, r2
 801bfa4:	fb06 e303 	mla	r3, r6, r3, lr
 801bfa8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801bfac:	0c1a      	lsrs	r2, r3, #16
 801bfae:	b29b      	uxth	r3, r3
 801bfb0:	ebaa 0303 	sub.w	r3, sl, r3
 801bfb4:	f8dc a000 	ldr.w	sl, [ip]
 801bfb8:	fa13 f38a 	uxtah	r3, r3, sl
 801bfbc:	fb06 220e 	mla	r2, r6, lr, r2
 801bfc0:	9300      	str	r3, [sp, #0]
 801bfc2:	9b00      	ldr	r3, [sp, #0]
 801bfc4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801bfc8:	b292      	uxth	r2, r2
 801bfca:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801bfce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801bfd2:	f8bd 3000 	ldrh.w	r3, [sp]
 801bfd6:	4581      	cmp	r9, r0
 801bfd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bfdc:	f84c 3b04 	str.w	r3, [ip], #4
 801bfe0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801bfe4:	d2db      	bcs.n	801bf9e <quorem+0x42>
 801bfe6:	f855 300b 	ldr.w	r3, [r5, fp]
 801bfea:	b92b      	cbnz	r3, 801bff8 <quorem+0x9c>
 801bfec:	9b01      	ldr	r3, [sp, #4]
 801bfee:	3b04      	subs	r3, #4
 801bff0:	429d      	cmp	r5, r3
 801bff2:	461a      	mov	r2, r3
 801bff4:	d32c      	bcc.n	801c050 <quorem+0xf4>
 801bff6:	613c      	str	r4, [r7, #16]
 801bff8:	4638      	mov	r0, r7
 801bffa:	f001 f96b 	bl	801d2d4 <__mcmp>
 801bffe:	2800      	cmp	r0, #0
 801c000:	db22      	blt.n	801c048 <quorem+0xec>
 801c002:	3601      	adds	r6, #1
 801c004:	4629      	mov	r1, r5
 801c006:	2000      	movs	r0, #0
 801c008:	f858 2b04 	ldr.w	r2, [r8], #4
 801c00c:	f8d1 c000 	ldr.w	ip, [r1]
 801c010:	b293      	uxth	r3, r2
 801c012:	1ac3      	subs	r3, r0, r3
 801c014:	0c12      	lsrs	r2, r2, #16
 801c016:	fa13 f38c 	uxtah	r3, r3, ip
 801c01a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801c01e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c022:	b29b      	uxth	r3, r3
 801c024:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c028:	45c1      	cmp	r9, r8
 801c02a:	f841 3b04 	str.w	r3, [r1], #4
 801c02e:	ea4f 4022 	mov.w	r0, r2, asr #16
 801c032:	d2e9      	bcs.n	801c008 <quorem+0xac>
 801c034:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c038:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c03c:	b922      	cbnz	r2, 801c048 <quorem+0xec>
 801c03e:	3b04      	subs	r3, #4
 801c040:	429d      	cmp	r5, r3
 801c042:	461a      	mov	r2, r3
 801c044:	d30a      	bcc.n	801c05c <quorem+0x100>
 801c046:	613c      	str	r4, [r7, #16]
 801c048:	4630      	mov	r0, r6
 801c04a:	b003      	add	sp, #12
 801c04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c050:	6812      	ldr	r2, [r2, #0]
 801c052:	3b04      	subs	r3, #4
 801c054:	2a00      	cmp	r2, #0
 801c056:	d1ce      	bne.n	801bff6 <quorem+0x9a>
 801c058:	3c01      	subs	r4, #1
 801c05a:	e7c9      	b.n	801bff0 <quorem+0x94>
 801c05c:	6812      	ldr	r2, [r2, #0]
 801c05e:	3b04      	subs	r3, #4
 801c060:	2a00      	cmp	r2, #0
 801c062:	d1f0      	bne.n	801c046 <quorem+0xea>
 801c064:	3c01      	subs	r4, #1
 801c066:	e7eb      	b.n	801c040 <quorem+0xe4>
 801c068:	2000      	movs	r0, #0
 801c06a:	e7ee      	b.n	801c04a <quorem+0xee>
 801c06c:	0000      	movs	r0, r0
	...

0801c070 <_dtoa_r>:
 801c070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c074:	ed2d 8b02 	vpush	{d8}
 801c078:	69c5      	ldr	r5, [r0, #28]
 801c07a:	b091      	sub	sp, #68	; 0x44
 801c07c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801c080:	ec59 8b10 	vmov	r8, r9, d0
 801c084:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801c086:	9106      	str	r1, [sp, #24]
 801c088:	4606      	mov	r6, r0
 801c08a:	9208      	str	r2, [sp, #32]
 801c08c:	930c      	str	r3, [sp, #48]	; 0x30
 801c08e:	b975      	cbnz	r5, 801c0ae <_dtoa_r+0x3e>
 801c090:	2010      	movs	r0, #16
 801c092:	f000 fda5 	bl	801cbe0 <malloc>
 801c096:	4602      	mov	r2, r0
 801c098:	61f0      	str	r0, [r6, #28]
 801c09a:	b920      	cbnz	r0, 801c0a6 <_dtoa_r+0x36>
 801c09c:	4ba6      	ldr	r3, [pc, #664]	; (801c338 <_dtoa_r+0x2c8>)
 801c09e:	21ef      	movs	r1, #239	; 0xef
 801c0a0:	48a6      	ldr	r0, [pc, #664]	; (801c33c <_dtoa_r+0x2cc>)
 801c0a2:	f002 ff31 	bl	801ef08 <__assert_func>
 801c0a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c0aa:	6005      	str	r5, [r0, #0]
 801c0ac:	60c5      	str	r5, [r0, #12]
 801c0ae:	69f3      	ldr	r3, [r6, #28]
 801c0b0:	6819      	ldr	r1, [r3, #0]
 801c0b2:	b151      	cbz	r1, 801c0ca <_dtoa_r+0x5a>
 801c0b4:	685a      	ldr	r2, [r3, #4]
 801c0b6:	604a      	str	r2, [r1, #4]
 801c0b8:	2301      	movs	r3, #1
 801c0ba:	4093      	lsls	r3, r2
 801c0bc:	608b      	str	r3, [r1, #8]
 801c0be:	4630      	mov	r0, r6
 801c0c0:	f000 fe82 	bl	801cdc8 <_Bfree>
 801c0c4:	69f3      	ldr	r3, [r6, #28]
 801c0c6:	2200      	movs	r2, #0
 801c0c8:	601a      	str	r2, [r3, #0]
 801c0ca:	f1b9 0300 	subs.w	r3, r9, #0
 801c0ce:	bfbb      	ittet	lt
 801c0d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c0d4:	9303      	strlt	r3, [sp, #12]
 801c0d6:	2300      	movge	r3, #0
 801c0d8:	2201      	movlt	r2, #1
 801c0da:	bfac      	ite	ge
 801c0dc:	6023      	strge	r3, [r4, #0]
 801c0de:	6022      	strlt	r2, [r4, #0]
 801c0e0:	4b97      	ldr	r3, [pc, #604]	; (801c340 <_dtoa_r+0x2d0>)
 801c0e2:	9c03      	ldr	r4, [sp, #12]
 801c0e4:	43a3      	bics	r3, r4
 801c0e6:	d11c      	bne.n	801c122 <_dtoa_r+0xb2>
 801c0e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c0ea:	f242 730f 	movw	r3, #9999	; 0x270f
 801c0ee:	6013      	str	r3, [r2, #0]
 801c0f0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801c0f4:	ea53 0308 	orrs.w	r3, r3, r8
 801c0f8:	f000 84fb 	beq.w	801caf2 <_dtoa_r+0xa82>
 801c0fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c0fe:	b963      	cbnz	r3, 801c11a <_dtoa_r+0xaa>
 801c100:	4b90      	ldr	r3, [pc, #576]	; (801c344 <_dtoa_r+0x2d4>)
 801c102:	e020      	b.n	801c146 <_dtoa_r+0xd6>
 801c104:	4b90      	ldr	r3, [pc, #576]	; (801c348 <_dtoa_r+0x2d8>)
 801c106:	9301      	str	r3, [sp, #4]
 801c108:	3308      	adds	r3, #8
 801c10a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801c10c:	6013      	str	r3, [r2, #0]
 801c10e:	9801      	ldr	r0, [sp, #4]
 801c110:	b011      	add	sp, #68	; 0x44
 801c112:	ecbd 8b02 	vpop	{d8}
 801c116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c11a:	4b8a      	ldr	r3, [pc, #552]	; (801c344 <_dtoa_r+0x2d4>)
 801c11c:	9301      	str	r3, [sp, #4]
 801c11e:	3303      	adds	r3, #3
 801c120:	e7f3      	b.n	801c10a <_dtoa_r+0x9a>
 801c122:	ed9d 8b02 	vldr	d8, [sp, #8]
 801c126:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801c12a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c12e:	d10c      	bne.n	801c14a <_dtoa_r+0xda>
 801c130:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c132:	2301      	movs	r3, #1
 801c134:	6013      	str	r3, [r2, #0]
 801c136:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c138:	2b00      	cmp	r3, #0
 801c13a:	f000 84d7 	beq.w	801caec <_dtoa_r+0xa7c>
 801c13e:	4b83      	ldr	r3, [pc, #524]	; (801c34c <_dtoa_r+0x2dc>)
 801c140:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801c142:	6013      	str	r3, [r2, #0]
 801c144:	3b01      	subs	r3, #1
 801c146:	9301      	str	r3, [sp, #4]
 801c148:	e7e1      	b.n	801c10e <_dtoa_r+0x9e>
 801c14a:	aa0e      	add	r2, sp, #56	; 0x38
 801c14c:	a90f      	add	r1, sp, #60	; 0x3c
 801c14e:	4630      	mov	r0, r6
 801c150:	eeb0 0b48 	vmov.f64	d0, d8
 801c154:	f001 f9d4 	bl	801d500 <__d2b>
 801c158:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801c15c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c15e:	4605      	mov	r5, r0
 801c160:	2b00      	cmp	r3, #0
 801c162:	d046      	beq.n	801c1f2 <_dtoa_r+0x182>
 801c164:	eeb0 7b48 	vmov.f64	d7, d8
 801c168:	ee18 1a90 	vmov	r1, s17
 801c16c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801c170:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801c174:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801c178:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c17c:	2000      	movs	r0, #0
 801c17e:	ee07 1a90 	vmov	s15, r1
 801c182:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801c186:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801c320 <_dtoa_r+0x2b0>
 801c18a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c18e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801c328 <_dtoa_r+0x2b8>
 801c192:	eea7 6b05 	vfma.f64	d6, d7, d5
 801c196:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801c330 <_dtoa_r+0x2c0>
 801c19a:	ee07 3a90 	vmov	s15, r3
 801c19e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801c1a2:	eeb0 7b46 	vmov.f64	d7, d6
 801c1a6:	eea4 7b05 	vfma.f64	d7, d4, d5
 801c1aa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801c1ae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801c1b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1b6:	ee16 ba90 	vmov	fp, s13
 801c1ba:	9009      	str	r0, [sp, #36]	; 0x24
 801c1bc:	d508      	bpl.n	801c1d0 <_dtoa_r+0x160>
 801c1be:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801c1c2:	eeb4 6b47 	vcmp.f64	d6, d7
 801c1c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1ca:	bf18      	it	ne
 801c1cc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801c1d0:	f1bb 0f16 	cmp.w	fp, #22
 801c1d4:	d82b      	bhi.n	801c22e <_dtoa_r+0x1be>
 801c1d6:	495e      	ldr	r1, [pc, #376]	; (801c350 <_dtoa_r+0x2e0>)
 801c1d8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801c1dc:	ed91 7b00 	vldr	d7, [r1]
 801c1e0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801c1e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1e8:	d501      	bpl.n	801c1ee <_dtoa_r+0x17e>
 801c1ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c1ee:	2100      	movs	r1, #0
 801c1f0:	e01e      	b.n	801c230 <_dtoa_r+0x1c0>
 801c1f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c1f4:	4413      	add	r3, r2
 801c1f6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 801c1fa:	2920      	cmp	r1, #32
 801c1fc:	bfc1      	itttt	gt
 801c1fe:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801c202:	408c      	lslgt	r4, r1
 801c204:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 801c208:	fa28 f101 	lsrgt.w	r1, r8, r1
 801c20c:	bfd6      	itet	le
 801c20e:	f1c1 0120 	rsble	r1, r1, #32
 801c212:	4321      	orrgt	r1, r4
 801c214:	fa08 f101 	lslle.w	r1, r8, r1
 801c218:	ee07 1a90 	vmov	s15, r1
 801c21c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801c220:	3b01      	subs	r3, #1
 801c222:	ee17 1a90 	vmov	r1, s15
 801c226:	2001      	movs	r0, #1
 801c228:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801c22c:	e7a7      	b.n	801c17e <_dtoa_r+0x10e>
 801c22e:	2101      	movs	r1, #1
 801c230:	1ad2      	subs	r2, r2, r3
 801c232:	1e53      	subs	r3, r2, #1
 801c234:	9305      	str	r3, [sp, #20]
 801c236:	bf45      	ittet	mi
 801c238:	f1c2 0301 	rsbmi	r3, r2, #1
 801c23c:	9304      	strmi	r3, [sp, #16]
 801c23e:	2300      	movpl	r3, #0
 801c240:	2300      	movmi	r3, #0
 801c242:	bf4c      	ite	mi
 801c244:	9305      	strmi	r3, [sp, #20]
 801c246:	9304      	strpl	r3, [sp, #16]
 801c248:	f1bb 0f00 	cmp.w	fp, #0
 801c24c:	910b      	str	r1, [sp, #44]	; 0x2c
 801c24e:	db18      	blt.n	801c282 <_dtoa_r+0x212>
 801c250:	9b05      	ldr	r3, [sp, #20]
 801c252:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801c256:	445b      	add	r3, fp
 801c258:	9305      	str	r3, [sp, #20]
 801c25a:	2300      	movs	r3, #0
 801c25c:	9a06      	ldr	r2, [sp, #24]
 801c25e:	2a09      	cmp	r2, #9
 801c260:	d848      	bhi.n	801c2f4 <_dtoa_r+0x284>
 801c262:	2a05      	cmp	r2, #5
 801c264:	bfc4      	itt	gt
 801c266:	3a04      	subgt	r2, #4
 801c268:	9206      	strgt	r2, [sp, #24]
 801c26a:	9a06      	ldr	r2, [sp, #24]
 801c26c:	f1a2 0202 	sub.w	r2, r2, #2
 801c270:	bfcc      	ite	gt
 801c272:	2400      	movgt	r4, #0
 801c274:	2401      	movle	r4, #1
 801c276:	2a03      	cmp	r2, #3
 801c278:	d847      	bhi.n	801c30a <_dtoa_r+0x29a>
 801c27a:	e8df f002 	tbb	[pc, r2]
 801c27e:	2d0b      	.short	0x2d0b
 801c280:	392b      	.short	0x392b
 801c282:	9b04      	ldr	r3, [sp, #16]
 801c284:	2200      	movs	r2, #0
 801c286:	eba3 030b 	sub.w	r3, r3, fp
 801c28a:	9304      	str	r3, [sp, #16]
 801c28c:	920a      	str	r2, [sp, #40]	; 0x28
 801c28e:	f1cb 0300 	rsb	r3, fp, #0
 801c292:	e7e3      	b.n	801c25c <_dtoa_r+0x1ec>
 801c294:	2200      	movs	r2, #0
 801c296:	9207      	str	r2, [sp, #28]
 801c298:	9a08      	ldr	r2, [sp, #32]
 801c29a:	2a00      	cmp	r2, #0
 801c29c:	dc38      	bgt.n	801c310 <_dtoa_r+0x2a0>
 801c29e:	f04f 0a01 	mov.w	sl, #1
 801c2a2:	46d1      	mov	r9, sl
 801c2a4:	4652      	mov	r2, sl
 801c2a6:	f8cd a020 	str.w	sl, [sp, #32]
 801c2aa:	69f7      	ldr	r7, [r6, #28]
 801c2ac:	2100      	movs	r1, #0
 801c2ae:	2004      	movs	r0, #4
 801c2b0:	f100 0c14 	add.w	ip, r0, #20
 801c2b4:	4594      	cmp	ip, r2
 801c2b6:	d930      	bls.n	801c31a <_dtoa_r+0x2aa>
 801c2b8:	6079      	str	r1, [r7, #4]
 801c2ba:	4630      	mov	r0, r6
 801c2bc:	930d      	str	r3, [sp, #52]	; 0x34
 801c2be:	f000 fd43 	bl	801cd48 <_Balloc>
 801c2c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c2c4:	9001      	str	r0, [sp, #4]
 801c2c6:	4602      	mov	r2, r0
 801c2c8:	2800      	cmp	r0, #0
 801c2ca:	d145      	bne.n	801c358 <_dtoa_r+0x2e8>
 801c2cc:	4b21      	ldr	r3, [pc, #132]	; (801c354 <_dtoa_r+0x2e4>)
 801c2ce:	f240 11af 	movw	r1, #431	; 0x1af
 801c2d2:	e6e5      	b.n	801c0a0 <_dtoa_r+0x30>
 801c2d4:	2201      	movs	r2, #1
 801c2d6:	e7de      	b.n	801c296 <_dtoa_r+0x226>
 801c2d8:	2200      	movs	r2, #0
 801c2da:	9207      	str	r2, [sp, #28]
 801c2dc:	9a08      	ldr	r2, [sp, #32]
 801c2de:	eb0b 0a02 	add.w	sl, fp, r2
 801c2e2:	f10a 0901 	add.w	r9, sl, #1
 801c2e6:	464a      	mov	r2, r9
 801c2e8:	2a01      	cmp	r2, #1
 801c2ea:	bfb8      	it	lt
 801c2ec:	2201      	movlt	r2, #1
 801c2ee:	e7dc      	b.n	801c2aa <_dtoa_r+0x23a>
 801c2f0:	2201      	movs	r2, #1
 801c2f2:	e7f2      	b.n	801c2da <_dtoa_r+0x26a>
 801c2f4:	2401      	movs	r4, #1
 801c2f6:	2200      	movs	r2, #0
 801c2f8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801c2fc:	f04f 3aff 	mov.w	sl, #4294967295
 801c300:	2100      	movs	r1, #0
 801c302:	46d1      	mov	r9, sl
 801c304:	2212      	movs	r2, #18
 801c306:	9108      	str	r1, [sp, #32]
 801c308:	e7cf      	b.n	801c2aa <_dtoa_r+0x23a>
 801c30a:	2201      	movs	r2, #1
 801c30c:	9207      	str	r2, [sp, #28]
 801c30e:	e7f5      	b.n	801c2fc <_dtoa_r+0x28c>
 801c310:	f8dd a020 	ldr.w	sl, [sp, #32]
 801c314:	46d1      	mov	r9, sl
 801c316:	4652      	mov	r2, sl
 801c318:	e7c7      	b.n	801c2aa <_dtoa_r+0x23a>
 801c31a:	3101      	adds	r1, #1
 801c31c:	0040      	lsls	r0, r0, #1
 801c31e:	e7c7      	b.n	801c2b0 <_dtoa_r+0x240>
 801c320:	636f4361 	.word	0x636f4361
 801c324:	3fd287a7 	.word	0x3fd287a7
 801c328:	8b60c8b3 	.word	0x8b60c8b3
 801c32c:	3fc68a28 	.word	0x3fc68a28
 801c330:	509f79fb 	.word	0x509f79fb
 801c334:	3fd34413 	.word	0x3fd34413
 801c338:	08020518 	.word	0x08020518
 801c33c:	0802052f 	.word	0x0802052f
 801c340:	7ff00000 	.word	0x7ff00000
 801c344:	08020514 	.word	0x08020514
 801c348:	0802050b 	.word	0x0802050b
 801c34c:	08020871 	.word	0x08020871
 801c350:	08020620 	.word	0x08020620
 801c354:	08020587 	.word	0x08020587
 801c358:	69f2      	ldr	r2, [r6, #28]
 801c35a:	9901      	ldr	r1, [sp, #4]
 801c35c:	6011      	str	r1, [r2, #0]
 801c35e:	f1b9 0f0e 	cmp.w	r9, #14
 801c362:	d86c      	bhi.n	801c43e <_dtoa_r+0x3ce>
 801c364:	2c00      	cmp	r4, #0
 801c366:	d06a      	beq.n	801c43e <_dtoa_r+0x3ce>
 801c368:	f1bb 0f00 	cmp.w	fp, #0
 801c36c:	f340 80a0 	ble.w	801c4b0 <_dtoa_r+0x440>
 801c370:	4ac1      	ldr	r2, [pc, #772]	; (801c678 <_dtoa_r+0x608>)
 801c372:	f00b 010f 	and.w	r1, fp, #15
 801c376:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801c37a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801c37e:	ed92 7b00 	vldr	d7, [r2]
 801c382:	ea4f 122b 	mov.w	r2, fp, asr #4
 801c386:	f000 8087 	beq.w	801c498 <_dtoa_r+0x428>
 801c38a:	49bc      	ldr	r1, [pc, #752]	; (801c67c <_dtoa_r+0x60c>)
 801c38c:	ed91 6b08 	vldr	d6, [r1, #32]
 801c390:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801c394:	ed8d 6b02 	vstr	d6, [sp, #8]
 801c398:	f002 020f 	and.w	r2, r2, #15
 801c39c:	2103      	movs	r1, #3
 801c39e:	48b7      	ldr	r0, [pc, #732]	; (801c67c <_dtoa_r+0x60c>)
 801c3a0:	2a00      	cmp	r2, #0
 801c3a2:	d17b      	bne.n	801c49c <_dtoa_r+0x42c>
 801c3a4:	ed9d 6b02 	vldr	d6, [sp, #8]
 801c3a8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801c3ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c3b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c3b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c3b6:	2a00      	cmp	r2, #0
 801c3b8:	f000 80a0 	beq.w	801c4fc <_dtoa_r+0x48c>
 801c3bc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801c3c0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801c3c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c3c8:	f140 8098 	bpl.w	801c4fc <_dtoa_r+0x48c>
 801c3cc:	f1b9 0f00 	cmp.w	r9, #0
 801c3d0:	f000 8094 	beq.w	801c4fc <_dtoa_r+0x48c>
 801c3d4:	f1ba 0f00 	cmp.w	sl, #0
 801c3d8:	dd2f      	ble.n	801c43a <_dtoa_r+0x3ca>
 801c3da:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801c3de:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c3e2:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c3e6:	f10b 32ff 	add.w	r2, fp, #4294967295
 801c3ea:	3101      	adds	r1, #1
 801c3ec:	4654      	mov	r4, sl
 801c3ee:	ed9d 6b02 	vldr	d6, [sp, #8]
 801c3f2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801c3f6:	ee07 1a90 	vmov	s15, r1
 801c3fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801c3fe:	eea7 5b06 	vfma.f64	d5, d7, d6
 801c402:	ee15 7a90 	vmov	r7, s11
 801c406:	ec51 0b15 	vmov	r0, r1, d5
 801c40a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801c40e:	2c00      	cmp	r4, #0
 801c410:	d177      	bne.n	801c502 <_dtoa_r+0x492>
 801c412:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801c416:	ee36 6b47 	vsub.f64	d6, d6, d7
 801c41a:	ec41 0b17 	vmov	d7, r0, r1
 801c41e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c426:	f300 826a 	bgt.w	801c8fe <_dtoa_r+0x88e>
 801c42a:	eeb1 7b47 	vneg.f64	d7, d7
 801c42e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c436:	f100 8260 	bmi.w	801c8fa <_dtoa_r+0x88a>
 801c43a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801c43e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c440:	2a00      	cmp	r2, #0
 801c442:	f2c0 811d 	blt.w	801c680 <_dtoa_r+0x610>
 801c446:	f1bb 0f0e 	cmp.w	fp, #14
 801c44a:	f300 8119 	bgt.w	801c680 <_dtoa_r+0x610>
 801c44e:	4b8a      	ldr	r3, [pc, #552]	; (801c678 <_dtoa_r+0x608>)
 801c450:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c454:	ed93 6b00 	vldr	d6, [r3]
 801c458:	9b08      	ldr	r3, [sp, #32]
 801c45a:	2b00      	cmp	r3, #0
 801c45c:	f280 80b7 	bge.w	801c5ce <_dtoa_r+0x55e>
 801c460:	f1b9 0f00 	cmp.w	r9, #0
 801c464:	f300 80b3 	bgt.w	801c5ce <_dtoa_r+0x55e>
 801c468:	f040 8246 	bne.w	801c8f8 <_dtoa_r+0x888>
 801c46c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801c470:	ee26 6b07 	vmul.f64	d6, d6, d7
 801c474:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c478:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c47c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c480:	464c      	mov	r4, r9
 801c482:	464f      	mov	r7, r9
 801c484:	f280 821c 	bge.w	801c8c0 <_dtoa_r+0x850>
 801c488:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c48c:	2331      	movs	r3, #49	; 0x31
 801c48e:	f808 3b01 	strb.w	r3, [r8], #1
 801c492:	f10b 0b01 	add.w	fp, fp, #1
 801c496:	e218      	b.n	801c8ca <_dtoa_r+0x85a>
 801c498:	2102      	movs	r1, #2
 801c49a:	e780      	b.n	801c39e <_dtoa_r+0x32e>
 801c49c:	07d4      	lsls	r4, r2, #31
 801c49e:	d504      	bpl.n	801c4aa <_dtoa_r+0x43a>
 801c4a0:	ed90 6b00 	vldr	d6, [r0]
 801c4a4:	3101      	adds	r1, #1
 801c4a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c4aa:	1052      	asrs	r2, r2, #1
 801c4ac:	3008      	adds	r0, #8
 801c4ae:	e777      	b.n	801c3a0 <_dtoa_r+0x330>
 801c4b0:	d022      	beq.n	801c4f8 <_dtoa_r+0x488>
 801c4b2:	f1cb 0200 	rsb	r2, fp, #0
 801c4b6:	4970      	ldr	r1, [pc, #448]	; (801c678 <_dtoa_r+0x608>)
 801c4b8:	f002 000f 	and.w	r0, r2, #15
 801c4bc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801c4c0:	ed91 7b00 	vldr	d7, [r1]
 801c4c4:	ee28 7b07 	vmul.f64	d7, d8, d7
 801c4c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c4cc:	486b      	ldr	r0, [pc, #428]	; (801c67c <_dtoa_r+0x60c>)
 801c4ce:	1112      	asrs	r2, r2, #4
 801c4d0:	2400      	movs	r4, #0
 801c4d2:	2102      	movs	r1, #2
 801c4d4:	b92a      	cbnz	r2, 801c4e2 <_dtoa_r+0x472>
 801c4d6:	2c00      	cmp	r4, #0
 801c4d8:	f43f af6a 	beq.w	801c3b0 <_dtoa_r+0x340>
 801c4dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c4e0:	e766      	b.n	801c3b0 <_dtoa_r+0x340>
 801c4e2:	07d7      	lsls	r7, r2, #31
 801c4e4:	d505      	bpl.n	801c4f2 <_dtoa_r+0x482>
 801c4e6:	ed90 6b00 	vldr	d6, [r0]
 801c4ea:	3101      	adds	r1, #1
 801c4ec:	2401      	movs	r4, #1
 801c4ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c4f2:	1052      	asrs	r2, r2, #1
 801c4f4:	3008      	adds	r0, #8
 801c4f6:	e7ed      	b.n	801c4d4 <_dtoa_r+0x464>
 801c4f8:	2102      	movs	r1, #2
 801c4fa:	e759      	b.n	801c3b0 <_dtoa_r+0x340>
 801c4fc:	465a      	mov	r2, fp
 801c4fe:	464c      	mov	r4, r9
 801c500:	e775      	b.n	801c3ee <_dtoa_r+0x37e>
 801c502:	ec41 0b17 	vmov	d7, r0, r1
 801c506:	495c      	ldr	r1, [pc, #368]	; (801c678 <_dtoa_r+0x608>)
 801c508:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801c50c:	ed11 4b02 	vldr	d4, [r1, #-8]
 801c510:	9901      	ldr	r1, [sp, #4]
 801c512:	440c      	add	r4, r1
 801c514:	9907      	ldr	r1, [sp, #28]
 801c516:	b351      	cbz	r1, 801c56e <_dtoa_r+0x4fe>
 801c518:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801c51c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801c520:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c524:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801c528:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801c52c:	ee35 7b47 	vsub.f64	d7, d5, d7
 801c530:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801c534:	ee14 1a90 	vmov	r1, s9
 801c538:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801c53c:	3130      	adds	r1, #48	; 0x30
 801c53e:	ee36 6b45 	vsub.f64	d6, d6, d5
 801c542:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c54a:	f808 1b01 	strb.w	r1, [r8], #1
 801c54e:	d439      	bmi.n	801c5c4 <_dtoa_r+0x554>
 801c550:	ee32 5b46 	vsub.f64	d5, d2, d6
 801c554:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801c558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c55c:	d472      	bmi.n	801c644 <_dtoa_r+0x5d4>
 801c55e:	45a0      	cmp	r8, r4
 801c560:	f43f af6b 	beq.w	801c43a <_dtoa_r+0x3ca>
 801c564:	ee27 7b03 	vmul.f64	d7, d7, d3
 801c568:	ee26 6b03 	vmul.f64	d6, d6, d3
 801c56c:	e7e0      	b.n	801c530 <_dtoa_r+0x4c0>
 801c56e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c572:	ee27 7b04 	vmul.f64	d7, d7, d4
 801c576:	4620      	mov	r0, r4
 801c578:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801c57c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801c580:	ee14 1a90 	vmov	r1, s9
 801c584:	3130      	adds	r1, #48	; 0x30
 801c586:	f808 1b01 	strb.w	r1, [r8], #1
 801c58a:	45a0      	cmp	r8, r4
 801c58c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801c590:	ee36 6b45 	vsub.f64	d6, d6, d5
 801c594:	d118      	bne.n	801c5c8 <_dtoa_r+0x558>
 801c596:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801c59a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801c59e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801c5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c5a6:	dc4d      	bgt.n	801c644 <_dtoa_r+0x5d4>
 801c5a8:	ee35 5b47 	vsub.f64	d5, d5, d7
 801c5ac:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801c5b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c5b4:	f57f af41 	bpl.w	801c43a <_dtoa_r+0x3ca>
 801c5b8:	4680      	mov	r8, r0
 801c5ba:	3801      	subs	r0, #1
 801c5bc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801c5c0:	2b30      	cmp	r3, #48	; 0x30
 801c5c2:	d0f9      	beq.n	801c5b8 <_dtoa_r+0x548>
 801c5c4:	4693      	mov	fp, r2
 801c5c6:	e02a      	b.n	801c61e <_dtoa_r+0x5ae>
 801c5c8:	ee26 6b03 	vmul.f64	d6, d6, d3
 801c5cc:	e7d6      	b.n	801c57c <_dtoa_r+0x50c>
 801c5ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c5d2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801c5d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c5da:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801c5de:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801c5e2:	ee15 3a10 	vmov	r3, s10
 801c5e6:	3330      	adds	r3, #48	; 0x30
 801c5e8:	f808 3b01 	strb.w	r3, [r8], #1
 801c5ec:	9b01      	ldr	r3, [sp, #4]
 801c5ee:	eba8 0303 	sub.w	r3, r8, r3
 801c5f2:	4599      	cmp	r9, r3
 801c5f4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801c5f8:	eea3 7b46 	vfms.f64	d7, d3, d6
 801c5fc:	d133      	bne.n	801c666 <_dtoa_r+0x5f6>
 801c5fe:	ee37 7b07 	vadd.f64	d7, d7, d7
 801c602:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801c606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c60a:	dc1a      	bgt.n	801c642 <_dtoa_r+0x5d2>
 801c60c:	eeb4 7b46 	vcmp.f64	d7, d6
 801c610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c614:	d103      	bne.n	801c61e <_dtoa_r+0x5ae>
 801c616:	ee15 3a10 	vmov	r3, s10
 801c61a:	07d9      	lsls	r1, r3, #31
 801c61c:	d411      	bmi.n	801c642 <_dtoa_r+0x5d2>
 801c61e:	4629      	mov	r1, r5
 801c620:	4630      	mov	r0, r6
 801c622:	f000 fbd1 	bl	801cdc8 <_Bfree>
 801c626:	2300      	movs	r3, #0
 801c628:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c62a:	f888 3000 	strb.w	r3, [r8]
 801c62e:	f10b 0301 	add.w	r3, fp, #1
 801c632:	6013      	str	r3, [r2, #0]
 801c634:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c636:	2b00      	cmp	r3, #0
 801c638:	f43f ad69 	beq.w	801c10e <_dtoa_r+0x9e>
 801c63c:	f8c3 8000 	str.w	r8, [r3]
 801c640:	e565      	b.n	801c10e <_dtoa_r+0x9e>
 801c642:	465a      	mov	r2, fp
 801c644:	4643      	mov	r3, r8
 801c646:	4698      	mov	r8, r3
 801c648:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801c64c:	2939      	cmp	r1, #57	; 0x39
 801c64e:	d106      	bne.n	801c65e <_dtoa_r+0x5ee>
 801c650:	9901      	ldr	r1, [sp, #4]
 801c652:	4299      	cmp	r1, r3
 801c654:	d1f7      	bne.n	801c646 <_dtoa_r+0x5d6>
 801c656:	9801      	ldr	r0, [sp, #4]
 801c658:	2130      	movs	r1, #48	; 0x30
 801c65a:	3201      	adds	r2, #1
 801c65c:	7001      	strb	r1, [r0, #0]
 801c65e:	7819      	ldrb	r1, [r3, #0]
 801c660:	3101      	adds	r1, #1
 801c662:	7019      	strb	r1, [r3, #0]
 801c664:	e7ae      	b.n	801c5c4 <_dtoa_r+0x554>
 801c666:	ee27 7b04 	vmul.f64	d7, d7, d4
 801c66a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c66e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c672:	d1b2      	bne.n	801c5da <_dtoa_r+0x56a>
 801c674:	e7d3      	b.n	801c61e <_dtoa_r+0x5ae>
 801c676:	bf00      	nop
 801c678:	08020620 	.word	0x08020620
 801c67c:	080205f8 	.word	0x080205f8
 801c680:	9907      	ldr	r1, [sp, #28]
 801c682:	2900      	cmp	r1, #0
 801c684:	f000 80d0 	beq.w	801c828 <_dtoa_r+0x7b8>
 801c688:	9906      	ldr	r1, [sp, #24]
 801c68a:	2901      	cmp	r1, #1
 801c68c:	f300 80b4 	bgt.w	801c7f8 <_dtoa_r+0x788>
 801c690:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c692:	2900      	cmp	r1, #0
 801c694:	f000 80ac 	beq.w	801c7f0 <_dtoa_r+0x780>
 801c698:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801c69c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801c6a0:	461c      	mov	r4, r3
 801c6a2:	9309      	str	r3, [sp, #36]	; 0x24
 801c6a4:	9b04      	ldr	r3, [sp, #16]
 801c6a6:	4413      	add	r3, r2
 801c6a8:	9304      	str	r3, [sp, #16]
 801c6aa:	9b05      	ldr	r3, [sp, #20]
 801c6ac:	2101      	movs	r1, #1
 801c6ae:	4413      	add	r3, r2
 801c6b0:	4630      	mov	r0, r6
 801c6b2:	9305      	str	r3, [sp, #20]
 801c6b4:	f000 fc88 	bl	801cfc8 <__i2b>
 801c6b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c6ba:	4607      	mov	r7, r0
 801c6bc:	f1b8 0f00 	cmp.w	r8, #0
 801c6c0:	d00d      	beq.n	801c6de <_dtoa_r+0x66e>
 801c6c2:	9a05      	ldr	r2, [sp, #20]
 801c6c4:	2a00      	cmp	r2, #0
 801c6c6:	dd0a      	ble.n	801c6de <_dtoa_r+0x66e>
 801c6c8:	4542      	cmp	r2, r8
 801c6ca:	9904      	ldr	r1, [sp, #16]
 801c6cc:	bfa8      	it	ge
 801c6ce:	4642      	movge	r2, r8
 801c6d0:	1a89      	subs	r1, r1, r2
 801c6d2:	9104      	str	r1, [sp, #16]
 801c6d4:	9905      	ldr	r1, [sp, #20]
 801c6d6:	eba8 0802 	sub.w	r8, r8, r2
 801c6da:	1a8a      	subs	r2, r1, r2
 801c6dc:	9205      	str	r2, [sp, #20]
 801c6de:	b303      	cbz	r3, 801c722 <_dtoa_r+0x6b2>
 801c6e0:	9a07      	ldr	r2, [sp, #28]
 801c6e2:	2a00      	cmp	r2, #0
 801c6e4:	f000 80a5 	beq.w	801c832 <_dtoa_r+0x7c2>
 801c6e8:	2c00      	cmp	r4, #0
 801c6ea:	dd13      	ble.n	801c714 <_dtoa_r+0x6a4>
 801c6ec:	4639      	mov	r1, r7
 801c6ee:	4622      	mov	r2, r4
 801c6f0:	4630      	mov	r0, r6
 801c6f2:	930d      	str	r3, [sp, #52]	; 0x34
 801c6f4:	f000 fd28 	bl	801d148 <__pow5mult>
 801c6f8:	462a      	mov	r2, r5
 801c6fa:	4601      	mov	r1, r0
 801c6fc:	4607      	mov	r7, r0
 801c6fe:	4630      	mov	r0, r6
 801c700:	f000 fc78 	bl	801cff4 <__multiply>
 801c704:	4629      	mov	r1, r5
 801c706:	9009      	str	r0, [sp, #36]	; 0x24
 801c708:	4630      	mov	r0, r6
 801c70a:	f000 fb5d 	bl	801cdc8 <_Bfree>
 801c70e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c710:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c712:	4615      	mov	r5, r2
 801c714:	1b1a      	subs	r2, r3, r4
 801c716:	d004      	beq.n	801c722 <_dtoa_r+0x6b2>
 801c718:	4629      	mov	r1, r5
 801c71a:	4630      	mov	r0, r6
 801c71c:	f000 fd14 	bl	801d148 <__pow5mult>
 801c720:	4605      	mov	r5, r0
 801c722:	2101      	movs	r1, #1
 801c724:	4630      	mov	r0, r6
 801c726:	f000 fc4f 	bl	801cfc8 <__i2b>
 801c72a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c72c:	2b00      	cmp	r3, #0
 801c72e:	4604      	mov	r4, r0
 801c730:	f340 8081 	ble.w	801c836 <_dtoa_r+0x7c6>
 801c734:	461a      	mov	r2, r3
 801c736:	4601      	mov	r1, r0
 801c738:	4630      	mov	r0, r6
 801c73a:	f000 fd05 	bl	801d148 <__pow5mult>
 801c73e:	9b06      	ldr	r3, [sp, #24]
 801c740:	2b01      	cmp	r3, #1
 801c742:	4604      	mov	r4, r0
 801c744:	dd7a      	ble.n	801c83c <_dtoa_r+0x7cc>
 801c746:	2300      	movs	r3, #0
 801c748:	9309      	str	r3, [sp, #36]	; 0x24
 801c74a:	6922      	ldr	r2, [r4, #16]
 801c74c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801c750:	6910      	ldr	r0, [r2, #16]
 801c752:	f000 fbeb 	bl	801cf2c <__hi0bits>
 801c756:	f1c0 0020 	rsb	r0, r0, #32
 801c75a:	9b05      	ldr	r3, [sp, #20]
 801c75c:	4418      	add	r0, r3
 801c75e:	f010 001f 	ands.w	r0, r0, #31
 801c762:	f000 8093 	beq.w	801c88c <_dtoa_r+0x81c>
 801c766:	f1c0 0220 	rsb	r2, r0, #32
 801c76a:	2a04      	cmp	r2, #4
 801c76c:	f340 8085 	ble.w	801c87a <_dtoa_r+0x80a>
 801c770:	9b04      	ldr	r3, [sp, #16]
 801c772:	f1c0 001c 	rsb	r0, r0, #28
 801c776:	4403      	add	r3, r0
 801c778:	9304      	str	r3, [sp, #16]
 801c77a:	9b05      	ldr	r3, [sp, #20]
 801c77c:	4480      	add	r8, r0
 801c77e:	4403      	add	r3, r0
 801c780:	9305      	str	r3, [sp, #20]
 801c782:	9b04      	ldr	r3, [sp, #16]
 801c784:	2b00      	cmp	r3, #0
 801c786:	dd05      	ble.n	801c794 <_dtoa_r+0x724>
 801c788:	4629      	mov	r1, r5
 801c78a:	461a      	mov	r2, r3
 801c78c:	4630      	mov	r0, r6
 801c78e:	f000 fd35 	bl	801d1fc <__lshift>
 801c792:	4605      	mov	r5, r0
 801c794:	9b05      	ldr	r3, [sp, #20]
 801c796:	2b00      	cmp	r3, #0
 801c798:	dd05      	ble.n	801c7a6 <_dtoa_r+0x736>
 801c79a:	4621      	mov	r1, r4
 801c79c:	461a      	mov	r2, r3
 801c79e:	4630      	mov	r0, r6
 801c7a0:	f000 fd2c 	bl	801d1fc <__lshift>
 801c7a4:	4604      	mov	r4, r0
 801c7a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c7a8:	2b00      	cmp	r3, #0
 801c7aa:	d071      	beq.n	801c890 <_dtoa_r+0x820>
 801c7ac:	4621      	mov	r1, r4
 801c7ae:	4628      	mov	r0, r5
 801c7b0:	f000 fd90 	bl	801d2d4 <__mcmp>
 801c7b4:	2800      	cmp	r0, #0
 801c7b6:	da6b      	bge.n	801c890 <_dtoa_r+0x820>
 801c7b8:	2300      	movs	r3, #0
 801c7ba:	4629      	mov	r1, r5
 801c7bc:	220a      	movs	r2, #10
 801c7be:	4630      	mov	r0, r6
 801c7c0:	f000 fb24 	bl	801ce0c <__multadd>
 801c7c4:	9b07      	ldr	r3, [sp, #28]
 801c7c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c7ca:	4605      	mov	r5, r0
 801c7cc:	2b00      	cmp	r3, #0
 801c7ce:	f000 8197 	beq.w	801cb00 <_dtoa_r+0xa90>
 801c7d2:	4639      	mov	r1, r7
 801c7d4:	2300      	movs	r3, #0
 801c7d6:	220a      	movs	r2, #10
 801c7d8:	4630      	mov	r0, r6
 801c7da:	f000 fb17 	bl	801ce0c <__multadd>
 801c7de:	f1ba 0f00 	cmp.w	sl, #0
 801c7e2:	4607      	mov	r7, r0
 801c7e4:	f300 8093 	bgt.w	801c90e <_dtoa_r+0x89e>
 801c7e8:	9b06      	ldr	r3, [sp, #24]
 801c7ea:	2b02      	cmp	r3, #2
 801c7ec:	dc57      	bgt.n	801c89e <_dtoa_r+0x82e>
 801c7ee:	e08e      	b.n	801c90e <_dtoa_r+0x89e>
 801c7f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c7f2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801c7f6:	e751      	b.n	801c69c <_dtoa_r+0x62c>
 801c7f8:	f109 34ff 	add.w	r4, r9, #4294967295
 801c7fc:	42a3      	cmp	r3, r4
 801c7fe:	bfbf      	itttt	lt
 801c800:	1ae2      	sublt	r2, r4, r3
 801c802:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801c804:	189b      	addlt	r3, r3, r2
 801c806:	930a      	strlt	r3, [sp, #40]	; 0x28
 801c808:	bfae      	itee	ge
 801c80a:	1b1c      	subge	r4, r3, r4
 801c80c:	4623      	movlt	r3, r4
 801c80e:	2400      	movlt	r4, #0
 801c810:	f1b9 0f00 	cmp.w	r9, #0
 801c814:	bfb5      	itete	lt
 801c816:	9a04      	ldrlt	r2, [sp, #16]
 801c818:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801c81c:	eba2 0809 	sublt.w	r8, r2, r9
 801c820:	464a      	movge	r2, r9
 801c822:	bfb8      	it	lt
 801c824:	2200      	movlt	r2, #0
 801c826:	e73c      	b.n	801c6a2 <_dtoa_r+0x632>
 801c828:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801c82c:	9f07      	ldr	r7, [sp, #28]
 801c82e:	461c      	mov	r4, r3
 801c830:	e744      	b.n	801c6bc <_dtoa_r+0x64c>
 801c832:	461a      	mov	r2, r3
 801c834:	e770      	b.n	801c718 <_dtoa_r+0x6a8>
 801c836:	9b06      	ldr	r3, [sp, #24]
 801c838:	2b01      	cmp	r3, #1
 801c83a:	dc18      	bgt.n	801c86e <_dtoa_r+0x7fe>
 801c83c:	9b02      	ldr	r3, [sp, #8]
 801c83e:	b9b3      	cbnz	r3, 801c86e <_dtoa_r+0x7fe>
 801c840:	9b03      	ldr	r3, [sp, #12]
 801c842:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801c846:	b9a2      	cbnz	r2, 801c872 <_dtoa_r+0x802>
 801c848:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801c84c:	0d12      	lsrs	r2, r2, #20
 801c84e:	0512      	lsls	r2, r2, #20
 801c850:	b18a      	cbz	r2, 801c876 <_dtoa_r+0x806>
 801c852:	9b04      	ldr	r3, [sp, #16]
 801c854:	3301      	adds	r3, #1
 801c856:	9304      	str	r3, [sp, #16]
 801c858:	9b05      	ldr	r3, [sp, #20]
 801c85a:	3301      	adds	r3, #1
 801c85c:	9305      	str	r3, [sp, #20]
 801c85e:	2301      	movs	r3, #1
 801c860:	9309      	str	r3, [sp, #36]	; 0x24
 801c862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c864:	2b00      	cmp	r3, #0
 801c866:	f47f af70 	bne.w	801c74a <_dtoa_r+0x6da>
 801c86a:	2001      	movs	r0, #1
 801c86c:	e775      	b.n	801c75a <_dtoa_r+0x6ea>
 801c86e:	2300      	movs	r3, #0
 801c870:	e7f6      	b.n	801c860 <_dtoa_r+0x7f0>
 801c872:	9b02      	ldr	r3, [sp, #8]
 801c874:	e7f4      	b.n	801c860 <_dtoa_r+0x7f0>
 801c876:	9209      	str	r2, [sp, #36]	; 0x24
 801c878:	e7f3      	b.n	801c862 <_dtoa_r+0x7f2>
 801c87a:	d082      	beq.n	801c782 <_dtoa_r+0x712>
 801c87c:	9b04      	ldr	r3, [sp, #16]
 801c87e:	321c      	adds	r2, #28
 801c880:	4413      	add	r3, r2
 801c882:	9304      	str	r3, [sp, #16]
 801c884:	9b05      	ldr	r3, [sp, #20]
 801c886:	4490      	add	r8, r2
 801c888:	4413      	add	r3, r2
 801c88a:	e779      	b.n	801c780 <_dtoa_r+0x710>
 801c88c:	4602      	mov	r2, r0
 801c88e:	e7f5      	b.n	801c87c <_dtoa_r+0x80c>
 801c890:	f1b9 0f00 	cmp.w	r9, #0
 801c894:	dc36      	bgt.n	801c904 <_dtoa_r+0x894>
 801c896:	9b06      	ldr	r3, [sp, #24]
 801c898:	2b02      	cmp	r3, #2
 801c89a:	dd33      	ble.n	801c904 <_dtoa_r+0x894>
 801c89c:	46ca      	mov	sl, r9
 801c89e:	f1ba 0f00 	cmp.w	sl, #0
 801c8a2:	d10d      	bne.n	801c8c0 <_dtoa_r+0x850>
 801c8a4:	4621      	mov	r1, r4
 801c8a6:	4653      	mov	r3, sl
 801c8a8:	2205      	movs	r2, #5
 801c8aa:	4630      	mov	r0, r6
 801c8ac:	f000 faae 	bl	801ce0c <__multadd>
 801c8b0:	4601      	mov	r1, r0
 801c8b2:	4604      	mov	r4, r0
 801c8b4:	4628      	mov	r0, r5
 801c8b6:	f000 fd0d 	bl	801d2d4 <__mcmp>
 801c8ba:	2800      	cmp	r0, #0
 801c8bc:	f73f ade4 	bgt.w	801c488 <_dtoa_r+0x418>
 801c8c0:	9b08      	ldr	r3, [sp, #32]
 801c8c2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c8c6:	ea6f 0b03 	mvn.w	fp, r3
 801c8ca:	f04f 0900 	mov.w	r9, #0
 801c8ce:	4621      	mov	r1, r4
 801c8d0:	4630      	mov	r0, r6
 801c8d2:	f000 fa79 	bl	801cdc8 <_Bfree>
 801c8d6:	2f00      	cmp	r7, #0
 801c8d8:	f43f aea1 	beq.w	801c61e <_dtoa_r+0x5ae>
 801c8dc:	f1b9 0f00 	cmp.w	r9, #0
 801c8e0:	d005      	beq.n	801c8ee <_dtoa_r+0x87e>
 801c8e2:	45b9      	cmp	r9, r7
 801c8e4:	d003      	beq.n	801c8ee <_dtoa_r+0x87e>
 801c8e6:	4649      	mov	r1, r9
 801c8e8:	4630      	mov	r0, r6
 801c8ea:	f000 fa6d 	bl	801cdc8 <_Bfree>
 801c8ee:	4639      	mov	r1, r7
 801c8f0:	4630      	mov	r0, r6
 801c8f2:	f000 fa69 	bl	801cdc8 <_Bfree>
 801c8f6:	e692      	b.n	801c61e <_dtoa_r+0x5ae>
 801c8f8:	2400      	movs	r4, #0
 801c8fa:	4627      	mov	r7, r4
 801c8fc:	e7e0      	b.n	801c8c0 <_dtoa_r+0x850>
 801c8fe:	4693      	mov	fp, r2
 801c900:	4627      	mov	r7, r4
 801c902:	e5c1      	b.n	801c488 <_dtoa_r+0x418>
 801c904:	9b07      	ldr	r3, [sp, #28]
 801c906:	46ca      	mov	sl, r9
 801c908:	2b00      	cmp	r3, #0
 801c90a:	f000 8100 	beq.w	801cb0e <_dtoa_r+0xa9e>
 801c90e:	f1b8 0f00 	cmp.w	r8, #0
 801c912:	dd05      	ble.n	801c920 <_dtoa_r+0x8b0>
 801c914:	4639      	mov	r1, r7
 801c916:	4642      	mov	r2, r8
 801c918:	4630      	mov	r0, r6
 801c91a:	f000 fc6f 	bl	801d1fc <__lshift>
 801c91e:	4607      	mov	r7, r0
 801c920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c922:	2b00      	cmp	r3, #0
 801c924:	d05d      	beq.n	801c9e2 <_dtoa_r+0x972>
 801c926:	6879      	ldr	r1, [r7, #4]
 801c928:	4630      	mov	r0, r6
 801c92a:	f000 fa0d 	bl	801cd48 <_Balloc>
 801c92e:	4680      	mov	r8, r0
 801c930:	b928      	cbnz	r0, 801c93e <_dtoa_r+0x8ce>
 801c932:	4b82      	ldr	r3, [pc, #520]	; (801cb3c <_dtoa_r+0xacc>)
 801c934:	4602      	mov	r2, r0
 801c936:	f240 21ef 	movw	r1, #751	; 0x2ef
 801c93a:	f7ff bbb1 	b.w	801c0a0 <_dtoa_r+0x30>
 801c93e:	693a      	ldr	r2, [r7, #16]
 801c940:	3202      	adds	r2, #2
 801c942:	0092      	lsls	r2, r2, #2
 801c944:	f107 010c 	add.w	r1, r7, #12
 801c948:	300c      	adds	r0, #12
 801c94a:	f7ff faf2 	bl	801bf32 <memcpy>
 801c94e:	2201      	movs	r2, #1
 801c950:	4641      	mov	r1, r8
 801c952:	4630      	mov	r0, r6
 801c954:	f000 fc52 	bl	801d1fc <__lshift>
 801c958:	9b01      	ldr	r3, [sp, #4]
 801c95a:	3301      	adds	r3, #1
 801c95c:	9304      	str	r3, [sp, #16]
 801c95e:	9b01      	ldr	r3, [sp, #4]
 801c960:	4453      	add	r3, sl
 801c962:	9308      	str	r3, [sp, #32]
 801c964:	9b02      	ldr	r3, [sp, #8]
 801c966:	f003 0301 	and.w	r3, r3, #1
 801c96a:	46b9      	mov	r9, r7
 801c96c:	9307      	str	r3, [sp, #28]
 801c96e:	4607      	mov	r7, r0
 801c970:	9b04      	ldr	r3, [sp, #16]
 801c972:	4621      	mov	r1, r4
 801c974:	3b01      	subs	r3, #1
 801c976:	4628      	mov	r0, r5
 801c978:	9302      	str	r3, [sp, #8]
 801c97a:	f7ff faef 	bl	801bf5c <quorem>
 801c97e:	4603      	mov	r3, r0
 801c980:	3330      	adds	r3, #48	; 0x30
 801c982:	9005      	str	r0, [sp, #20]
 801c984:	4649      	mov	r1, r9
 801c986:	4628      	mov	r0, r5
 801c988:	9309      	str	r3, [sp, #36]	; 0x24
 801c98a:	f000 fca3 	bl	801d2d4 <__mcmp>
 801c98e:	463a      	mov	r2, r7
 801c990:	4682      	mov	sl, r0
 801c992:	4621      	mov	r1, r4
 801c994:	4630      	mov	r0, r6
 801c996:	f000 fcb9 	bl	801d30c <__mdiff>
 801c99a:	68c2      	ldr	r2, [r0, #12]
 801c99c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c99e:	4680      	mov	r8, r0
 801c9a0:	bb0a      	cbnz	r2, 801c9e6 <_dtoa_r+0x976>
 801c9a2:	4601      	mov	r1, r0
 801c9a4:	4628      	mov	r0, r5
 801c9a6:	f000 fc95 	bl	801d2d4 <__mcmp>
 801c9aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c9ac:	4602      	mov	r2, r0
 801c9ae:	4641      	mov	r1, r8
 801c9b0:	4630      	mov	r0, r6
 801c9b2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801c9b6:	f000 fa07 	bl	801cdc8 <_Bfree>
 801c9ba:	9b06      	ldr	r3, [sp, #24]
 801c9bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c9be:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801c9c2:	ea43 0102 	orr.w	r1, r3, r2
 801c9c6:	9b07      	ldr	r3, [sp, #28]
 801c9c8:	4319      	orrs	r1, r3
 801c9ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c9cc:	d10d      	bne.n	801c9ea <_dtoa_r+0x97a>
 801c9ce:	2b39      	cmp	r3, #57	; 0x39
 801c9d0:	d029      	beq.n	801ca26 <_dtoa_r+0x9b6>
 801c9d2:	f1ba 0f00 	cmp.w	sl, #0
 801c9d6:	dd01      	ble.n	801c9dc <_dtoa_r+0x96c>
 801c9d8:	9b05      	ldr	r3, [sp, #20]
 801c9da:	3331      	adds	r3, #49	; 0x31
 801c9dc:	9a02      	ldr	r2, [sp, #8]
 801c9de:	7013      	strb	r3, [r2, #0]
 801c9e0:	e775      	b.n	801c8ce <_dtoa_r+0x85e>
 801c9e2:	4638      	mov	r0, r7
 801c9e4:	e7b8      	b.n	801c958 <_dtoa_r+0x8e8>
 801c9e6:	2201      	movs	r2, #1
 801c9e8:	e7e1      	b.n	801c9ae <_dtoa_r+0x93e>
 801c9ea:	f1ba 0f00 	cmp.w	sl, #0
 801c9ee:	db06      	blt.n	801c9fe <_dtoa_r+0x98e>
 801c9f0:	9906      	ldr	r1, [sp, #24]
 801c9f2:	ea41 0a0a 	orr.w	sl, r1, sl
 801c9f6:	9907      	ldr	r1, [sp, #28]
 801c9f8:	ea5a 0a01 	orrs.w	sl, sl, r1
 801c9fc:	d120      	bne.n	801ca40 <_dtoa_r+0x9d0>
 801c9fe:	2a00      	cmp	r2, #0
 801ca00:	ddec      	ble.n	801c9dc <_dtoa_r+0x96c>
 801ca02:	4629      	mov	r1, r5
 801ca04:	2201      	movs	r2, #1
 801ca06:	4630      	mov	r0, r6
 801ca08:	9304      	str	r3, [sp, #16]
 801ca0a:	f000 fbf7 	bl	801d1fc <__lshift>
 801ca0e:	4621      	mov	r1, r4
 801ca10:	4605      	mov	r5, r0
 801ca12:	f000 fc5f 	bl	801d2d4 <__mcmp>
 801ca16:	2800      	cmp	r0, #0
 801ca18:	9b04      	ldr	r3, [sp, #16]
 801ca1a:	dc02      	bgt.n	801ca22 <_dtoa_r+0x9b2>
 801ca1c:	d1de      	bne.n	801c9dc <_dtoa_r+0x96c>
 801ca1e:	07da      	lsls	r2, r3, #31
 801ca20:	d5dc      	bpl.n	801c9dc <_dtoa_r+0x96c>
 801ca22:	2b39      	cmp	r3, #57	; 0x39
 801ca24:	d1d8      	bne.n	801c9d8 <_dtoa_r+0x968>
 801ca26:	9a02      	ldr	r2, [sp, #8]
 801ca28:	2339      	movs	r3, #57	; 0x39
 801ca2a:	7013      	strb	r3, [r2, #0]
 801ca2c:	4643      	mov	r3, r8
 801ca2e:	4698      	mov	r8, r3
 801ca30:	3b01      	subs	r3, #1
 801ca32:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801ca36:	2a39      	cmp	r2, #57	; 0x39
 801ca38:	d051      	beq.n	801cade <_dtoa_r+0xa6e>
 801ca3a:	3201      	adds	r2, #1
 801ca3c:	701a      	strb	r2, [r3, #0]
 801ca3e:	e746      	b.n	801c8ce <_dtoa_r+0x85e>
 801ca40:	2a00      	cmp	r2, #0
 801ca42:	dd03      	ble.n	801ca4c <_dtoa_r+0x9dc>
 801ca44:	2b39      	cmp	r3, #57	; 0x39
 801ca46:	d0ee      	beq.n	801ca26 <_dtoa_r+0x9b6>
 801ca48:	3301      	adds	r3, #1
 801ca4a:	e7c7      	b.n	801c9dc <_dtoa_r+0x96c>
 801ca4c:	9a04      	ldr	r2, [sp, #16]
 801ca4e:	9908      	ldr	r1, [sp, #32]
 801ca50:	f802 3c01 	strb.w	r3, [r2, #-1]
 801ca54:	428a      	cmp	r2, r1
 801ca56:	d02b      	beq.n	801cab0 <_dtoa_r+0xa40>
 801ca58:	4629      	mov	r1, r5
 801ca5a:	2300      	movs	r3, #0
 801ca5c:	220a      	movs	r2, #10
 801ca5e:	4630      	mov	r0, r6
 801ca60:	f000 f9d4 	bl	801ce0c <__multadd>
 801ca64:	45b9      	cmp	r9, r7
 801ca66:	4605      	mov	r5, r0
 801ca68:	f04f 0300 	mov.w	r3, #0
 801ca6c:	f04f 020a 	mov.w	r2, #10
 801ca70:	4649      	mov	r1, r9
 801ca72:	4630      	mov	r0, r6
 801ca74:	d107      	bne.n	801ca86 <_dtoa_r+0xa16>
 801ca76:	f000 f9c9 	bl	801ce0c <__multadd>
 801ca7a:	4681      	mov	r9, r0
 801ca7c:	4607      	mov	r7, r0
 801ca7e:	9b04      	ldr	r3, [sp, #16]
 801ca80:	3301      	adds	r3, #1
 801ca82:	9304      	str	r3, [sp, #16]
 801ca84:	e774      	b.n	801c970 <_dtoa_r+0x900>
 801ca86:	f000 f9c1 	bl	801ce0c <__multadd>
 801ca8a:	4639      	mov	r1, r7
 801ca8c:	4681      	mov	r9, r0
 801ca8e:	2300      	movs	r3, #0
 801ca90:	220a      	movs	r2, #10
 801ca92:	4630      	mov	r0, r6
 801ca94:	f000 f9ba 	bl	801ce0c <__multadd>
 801ca98:	4607      	mov	r7, r0
 801ca9a:	e7f0      	b.n	801ca7e <_dtoa_r+0xa0e>
 801ca9c:	f1ba 0f00 	cmp.w	sl, #0
 801caa0:	9a01      	ldr	r2, [sp, #4]
 801caa2:	bfcc      	ite	gt
 801caa4:	46d0      	movgt	r8, sl
 801caa6:	f04f 0801 	movle.w	r8, #1
 801caaa:	4490      	add	r8, r2
 801caac:	f04f 0900 	mov.w	r9, #0
 801cab0:	4629      	mov	r1, r5
 801cab2:	2201      	movs	r2, #1
 801cab4:	4630      	mov	r0, r6
 801cab6:	9302      	str	r3, [sp, #8]
 801cab8:	f000 fba0 	bl	801d1fc <__lshift>
 801cabc:	4621      	mov	r1, r4
 801cabe:	4605      	mov	r5, r0
 801cac0:	f000 fc08 	bl	801d2d4 <__mcmp>
 801cac4:	2800      	cmp	r0, #0
 801cac6:	dcb1      	bgt.n	801ca2c <_dtoa_r+0x9bc>
 801cac8:	d102      	bne.n	801cad0 <_dtoa_r+0xa60>
 801caca:	9b02      	ldr	r3, [sp, #8]
 801cacc:	07db      	lsls	r3, r3, #31
 801cace:	d4ad      	bmi.n	801ca2c <_dtoa_r+0x9bc>
 801cad0:	4643      	mov	r3, r8
 801cad2:	4698      	mov	r8, r3
 801cad4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cad8:	2a30      	cmp	r2, #48	; 0x30
 801cada:	d0fa      	beq.n	801cad2 <_dtoa_r+0xa62>
 801cadc:	e6f7      	b.n	801c8ce <_dtoa_r+0x85e>
 801cade:	9a01      	ldr	r2, [sp, #4]
 801cae0:	429a      	cmp	r2, r3
 801cae2:	d1a4      	bne.n	801ca2e <_dtoa_r+0x9be>
 801cae4:	f10b 0b01 	add.w	fp, fp, #1
 801cae8:	2331      	movs	r3, #49	; 0x31
 801caea:	e778      	b.n	801c9de <_dtoa_r+0x96e>
 801caec:	4b14      	ldr	r3, [pc, #80]	; (801cb40 <_dtoa_r+0xad0>)
 801caee:	f7ff bb2a 	b.w	801c146 <_dtoa_r+0xd6>
 801caf2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801caf4:	2b00      	cmp	r3, #0
 801caf6:	f47f ab05 	bne.w	801c104 <_dtoa_r+0x94>
 801cafa:	4b12      	ldr	r3, [pc, #72]	; (801cb44 <_dtoa_r+0xad4>)
 801cafc:	f7ff bb23 	b.w	801c146 <_dtoa_r+0xd6>
 801cb00:	f1ba 0f00 	cmp.w	sl, #0
 801cb04:	dc03      	bgt.n	801cb0e <_dtoa_r+0xa9e>
 801cb06:	9b06      	ldr	r3, [sp, #24]
 801cb08:	2b02      	cmp	r3, #2
 801cb0a:	f73f aec8 	bgt.w	801c89e <_dtoa_r+0x82e>
 801cb0e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801cb12:	4621      	mov	r1, r4
 801cb14:	4628      	mov	r0, r5
 801cb16:	f7ff fa21 	bl	801bf5c <quorem>
 801cb1a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801cb1e:	f808 3b01 	strb.w	r3, [r8], #1
 801cb22:	9a01      	ldr	r2, [sp, #4]
 801cb24:	eba8 0202 	sub.w	r2, r8, r2
 801cb28:	4592      	cmp	sl, r2
 801cb2a:	ddb7      	ble.n	801ca9c <_dtoa_r+0xa2c>
 801cb2c:	4629      	mov	r1, r5
 801cb2e:	2300      	movs	r3, #0
 801cb30:	220a      	movs	r2, #10
 801cb32:	4630      	mov	r0, r6
 801cb34:	f000 f96a 	bl	801ce0c <__multadd>
 801cb38:	4605      	mov	r5, r0
 801cb3a:	e7ea      	b.n	801cb12 <_dtoa_r+0xaa2>
 801cb3c:	08020587 	.word	0x08020587
 801cb40:	08020870 	.word	0x08020870
 801cb44:	0802050b 	.word	0x0802050b

0801cb48 <_free_r>:
 801cb48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cb4a:	2900      	cmp	r1, #0
 801cb4c:	d044      	beq.n	801cbd8 <_free_r+0x90>
 801cb4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cb52:	9001      	str	r0, [sp, #4]
 801cb54:	2b00      	cmp	r3, #0
 801cb56:	f1a1 0404 	sub.w	r4, r1, #4
 801cb5a:	bfb8      	it	lt
 801cb5c:	18e4      	addlt	r4, r4, r3
 801cb5e:	f000 f8e7 	bl	801cd30 <__malloc_lock>
 801cb62:	4a1e      	ldr	r2, [pc, #120]	; (801cbdc <_free_r+0x94>)
 801cb64:	9801      	ldr	r0, [sp, #4]
 801cb66:	6813      	ldr	r3, [r2, #0]
 801cb68:	b933      	cbnz	r3, 801cb78 <_free_r+0x30>
 801cb6a:	6063      	str	r3, [r4, #4]
 801cb6c:	6014      	str	r4, [r2, #0]
 801cb6e:	b003      	add	sp, #12
 801cb70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cb74:	f000 b8e2 	b.w	801cd3c <__malloc_unlock>
 801cb78:	42a3      	cmp	r3, r4
 801cb7a:	d908      	bls.n	801cb8e <_free_r+0x46>
 801cb7c:	6825      	ldr	r5, [r4, #0]
 801cb7e:	1961      	adds	r1, r4, r5
 801cb80:	428b      	cmp	r3, r1
 801cb82:	bf01      	itttt	eq
 801cb84:	6819      	ldreq	r1, [r3, #0]
 801cb86:	685b      	ldreq	r3, [r3, #4]
 801cb88:	1949      	addeq	r1, r1, r5
 801cb8a:	6021      	streq	r1, [r4, #0]
 801cb8c:	e7ed      	b.n	801cb6a <_free_r+0x22>
 801cb8e:	461a      	mov	r2, r3
 801cb90:	685b      	ldr	r3, [r3, #4]
 801cb92:	b10b      	cbz	r3, 801cb98 <_free_r+0x50>
 801cb94:	42a3      	cmp	r3, r4
 801cb96:	d9fa      	bls.n	801cb8e <_free_r+0x46>
 801cb98:	6811      	ldr	r1, [r2, #0]
 801cb9a:	1855      	adds	r5, r2, r1
 801cb9c:	42a5      	cmp	r5, r4
 801cb9e:	d10b      	bne.n	801cbb8 <_free_r+0x70>
 801cba0:	6824      	ldr	r4, [r4, #0]
 801cba2:	4421      	add	r1, r4
 801cba4:	1854      	adds	r4, r2, r1
 801cba6:	42a3      	cmp	r3, r4
 801cba8:	6011      	str	r1, [r2, #0]
 801cbaa:	d1e0      	bne.n	801cb6e <_free_r+0x26>
 801cbac:	681c      	ldr	r4, [r3, #0]
 801cbae:	685b      	ldr	r3, [r3, #4]
 801cbb0:	6053      	str	r3, [r2, #4]
 801cbb2:	440c      	add	r4, r1
 801cbb4:	6014      	str	r4, [r2, #0]
 801cbb6:	e7da      	b.n	801cb6e <_free_r+0x26>
 801cbb8:	d902      	bls.n	801cbc0 <_free_r+0x78>
 801cbba:	230c      	movs	r3, #12
 801cbbc:	6003      	str	r3, [r0, #0]
 801cbbe:	e7d6      	b.n	801cb6e <_free_r+0x26>
 801cbc0:	6825      	ldr	r5, [r4, #0]
 801cbc2:	1961      	adds	r1, r4, r5
 801cbc4:	428b      	cmp	r3, r1
 801cbc6:	bf04      	itt	eq
 801cbc8:	6819      	ldreq	r1, [r3, #0]
 801cbca:	685b      	ldreq	r3, [r3, #4]
 801cbcc:	6063      	str	r3, [r4, #4]
 801cbce:	bf04      	itt	eq
 801cbd0:	1949      	addeq	r1, r1, r5
 801cbd2:	6021      	streq	r1, [r4, #0]
 801cbd4:	6054      	str	r4, [r2, #4]
 801cbd6:	e7ca      	b.n	801cb6e <_free_r+0x26>
 801cbd8:	b003      	add	sp, #12
 801cbda:	bd30      	pop	{r4, r5, pc}
 801cbdc:	24003628 	.word	0x24003628

0801cbe0 <malloc>:
 801cbe0:	4b02      	ldr	r3, [pc, #8]	; (801cbec <malloc+0xc>)
 801cbe2:	4601      	mov	r1, r0
 801cbe4:	6818      	ldr	r0, [r3, #0]
 801cbe6:	f000 b823 	b.w	801cc30 <_malloc_r>
 801cbea:	bf00      	nop
 801cbec:	24000158 	.word	0x24000158

0801cbf0 <sbrk_aligned>:
 801cbf0:	b570      	push	{r4, r5, r6, lr}
 801cbf2:	4e0e      	ldr	r6, [pc, #56]	; (801cc2c <sbrk_aligned+0x3c>)
 801cbf4:	460c      	mov	r4, r1
 801cbf6:	6831      	ldr	r1, [r6, #0]
 801cbf8:	4605      	mov	r5, r0
 801cbfa:	b911      	cbnz	r1, 801cc02 <sbrk_aligned+0x12>
 801cbfc:	f002 f96a 	bl	801eed4 <_sbrk_r>
 801cc00:	6030      	str	r0, [r6, #0]
 801cc02:	4621      	mov	r1, r4
 801cc04:	4628      	mov	r0, r5
 801cc06:	f002 f965 	bl	801eed4 <_sbrk_r>
 801cc0a:	1c43      	adds	r3, r0, #1
 801cc0c:	d00a      	beq.n	801cc24 <sbrk_aligned+0x34>
 801cc0e:	1cc4      	adds	r4, r0, #3
 801cc10:	f024 0403 	bic.w	r4, r4, #3
 801cc14:	42a0      	cmp	r0, r4
 801cc16:	d007      	beq.n	801cc28 <sbrk_aligned+0x38>
 801cc18:	1a21      	subs	r1, r4, r0
 801cc1a:	4628      	mov	r0, r5
 801cc1c:	f002 f95a 	bl	801eed4 <_sbrk_r>
 801cc20:	3001      	adds	r0, #1
 801cc22:	d101      	bne.n	801cc28 <sbrk_aligned+0x38>
 801cc24:	f04f 34ff 	mov.w	r4, #4294967295
 801cc28:	4620      	mov	r0, r4
 801cc2a:	bd70      	pop	{r4, r5, r6, pc}
 801cc2c:	2400362c 	.word	0x2400362c

0801cc30 <_malloc_r>:
 801cc30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cc34:	1ccd      	adds	r5, r1, #3
 801cc36:	f025 0503 	bic.w	r5, r5, #3
 801cc3a:	3508      	adds	r5, #8
 801cc3c:	2d0c      	cmp	r5, #12
 801cc3e:	bf38      	it	cc
 801cc40:	250c      	movcc	r5, #12
 801cc42:	2d00      	cmp	r5, #0
 801cc44:	4607      	mov	r7, r0
 801cc46:	db01      	blt.n	801cc4c <_malloc_r+0x1c>
 801cc48:	42a9      	cmp	r1, r5
 801cc4a:	d905      	bls.n	801cc58 <_malloc_r+0x28>
 801cc4c:	230c      	movs	r3, #12
 801cc4e:	603b      	str	r3, [r7, #0]
 801cc50:	2600      	movs	r6, #0
 801cc52:	4630      	mov	r0, r6
 801cc54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cc58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801cd2c <_malloc_r+0xfc>
 801cc5c:	f000 f868 	bl	801cd30 <__malloc_lock>
 801cc60:	f8d8 3000 	ldr.w	r3, [r8]
 801cc64:	461c      	mov	r4, r3
 801cc66:	bb5c      	cbnz	r4, 801ccc0 <_malloc_r+0x90>
 801cc68:	4629      	mov	r1, r5
 801cc6a:	4638      	mov	r0, r7
 801cc6c:	f7ff ffc0 	bl	801cbf0 <sbrk_aligned>
 801cc70:	1c43      	adds	r3, r0, #1
 801cc72:	4604      	mov	r4, r0
 801cc74:	d155      	bne.n	801cd22 <_malloc_r+0xf2>
 801cc76:	f8d8 4000 	ldr.w	r4, [r8]
 801cc7a:	4626      	mov	r6, r4
 801cc7c:	2e00      	cmp	r6, #0
 801cc7e:	d145      	bne.n	801cd0c <_malloc_r+0xdc>
 801cc80:	2c00      	cmp	r4, #0
 801cc82:	d048      	beq.n	801cd16 <_malloc_r+0xe6>
 801cc84:	6823      	ldr	r3, [r4, #0]
 801cc86:	4631      	mov	r1, r6
 801cc88:	4638      	mov	r0, r7
 801cc8a:	eb04 0903 	add.w	r9, r4, r3
 801cc8e:	f002 f921 	bl	801eed4 <_sbrk_r>
 801cc92:	4581      	cmp	r9, r0
 801cc94:	d13f      	bne.n	801cd16 <_malloc_r+0xe6>
 801cc96:	6821      	ldr	r1, [r4, #0]
 801cc98:	1a6d      	subs	r5, r5, r1
 801cc9a:	4629      	mov	r1, r5
 801cc9c:	4638      	mov	r0, r7
 801cc9e:	f7ff ffa7 	bl	801cbf0 <sbrk_aligned>
 801cca2:	3001      	adds	r0, #1
 801cca4:	d037      	beq.n	801cd16 <_malloc_r+0xe6>
 801cca6:	6823      	ldr	r3, [r4, #0]
 801cca8:	442b      	add	r3, r5
 801ccaa:	6023      	str	r3, [r4, #0]
 801ccac:	f8d8 3000 	ldr.w	r3, [r8]
 801ccb0:	2b00      	cmp	r3, #0
 801ccb2:	d038      	beq.n	801cd26 <_malloc_r+0xf6>
 801ccb4:	685a      	ldr	r2, [r3, #4]
 801ccb6:	42a2      	cmp	r2, r4
 801ccb8:	d12b      	bne.n	801cd12 <_malloc_r+0xe2>
 801ccba:	2200      	movs	r2, #0
 801ccbc:	605a      	str	r2, [r3, #4]
 801ccbe:	e00f      	b.n	801cce0 <_malloc_r+0xb0>
 801ccc0:	6822      	ldr	r2, [r4, #0]
 801ccc2:	1b52      	subs	r2, r2, r5
 801ccc4:	d41f      	bmi.n	801cd06 <_malloc_r+0xd6>
 801ccc6:	2a0b      	cmp	r2, #11
 801ccc8:	d917      	bls.n	801ccfa <_malloc_r+0xca>
 801ccca:	1961      	adds	r1, r4, r5
 801cccc:	42a3      	cmp	r3, r4
 801ccce:	6025      	str	r5, [r4, #0]
 801ccd0:	bf18      	it	ne
 801ccd2:	6059      	strne	r1, [r3, #4]
 801ccd4:	6863      	ldr	r3, [r4, #4]
 801ccd6:	bf08      	it	eq
 801ccd8:	f8c8 1000 	streq.w	r1, [r8]
 801ccdc:	5162      	str	r2, [r4, r5]
 801ccde:	604b      	str	r3, [r1, #4]
 801cce0:	4638      	mov	r0, r7
 801cce2:	f104 060b 	add.w	r6, r4, #11
 801cce6:	f000 f829 	bl	801cd3c <__malloc_unlock>
 801ccea:	f026 0607 	bic.w	r6, r6, #7
 801ccee:	1d23      	adds	r3, r4, #4
 801ccf0:	1af2      	subs	r2, r6, r3
 801ccf2:	d0ae      	beq.n	801cc52 <_malloc_r+0x22>
 801ccf4:	1b9b      	subs	r3, r3, r6
 801ccf6:	50a3      	str	r3, [r4, r2]
 801ccf8:	e7ab      	b.n	801cc52 <_malloc_r+0x22>
 801ccfa:	42a3      	cmp	r3, r4
 801ccfc:	6862      	ldr	r2, [r4, #4]
 801ccfe:	d1dd      	bne.n	801ccbc <_malloc_r+0x8c>
 801cd00:	f8c8 2000 	str.w	r2, [r8]
 801cd04:	e7ec      	b.n	801cce0 <_malloc_r+0xb0>
 801cd06:	4623      	mov	r3, r4
 801cd08:	6864      	ldr	r4, [r4, #4]
 801cd0a:	e7ac      	b.n	801cc66 <_malloc_r+0x36>
 801cd0c:	4634      	mov	r4, r6
 801cd0e:	6876      	ldr	r6, [r6, #4]
 801cd10:	e7b4      	b.n	801cc7c <_malloc_r+0x4c>
 801cd12:	4613      	mov	r3, r2
 801cd14:	e7cc      	b.n	801ccb0 <_malloc_r+0x80>
 801cd16:	230c      	movs	r3, #12
 801cd18:	603b      	str	r3, [r7, #0]
 801cd1a:	4638      	mov	r0, r7
 801cd1c:	f000 f80e 	bl	801cd3c <__malloc_unlock>
 801cd20:	e797      	b.n	801cc52 <_malloc_r+0x22>
 801cd22:	6025      	str	r5, [r4, #0]
 801cd24:	e7dc      	b.n	801cce0 <_malloc_r+0xb0>
 801cd26:	605b      	str	r3, [r3, #4]
 801cd28:	deff      	udf	#255	; 0xff
 801cd2a:	bf00      	nop
 801cd2c:	24003628 	.word	0x24003628

0801cd30 <__malloc_lock>:
 801cd30:	4801      	ldr	r0, [pc, #4]	; (801cd38 <__malloc_lock+0x8>)
 801cd32:	f7ff b8f4 	b.w	801bf1e <__retarget_lock_acquire_recursive>
 801cd36:	bf00      	nop
 801cd38:	24003624 	.word	0x24003624

0801cd3c <__malloc_unlock>:
 801cd3c:	4801      	ldr	r0, [pc, #4]	; (801cd44 <__malloc_unlock+0x8>)
 801cd3e:	f7ff b8ef 	b.w	801bf20 <__retarget_lock_release_recursive>
 801cd42:	bf00      	nop
 801cd44:	24003624 	.word	0x24003624

0801cd48 <_Balloc>:
 801cd48:	b570      	push	{r4, r5, r6, lr}
 801cd4a:	69c6      	ldr	r6, [r0, #28]
 801cd4c:	4604      	mov	r4, r0
 801cd4e:	460d      	mov	r5, r1
 801cd50:	b976      	cbnz	r6, 801cd70 <_Balloc+0x28>
 801cd52:	2010      	movs	r0, #16
 801cd54:	f7ff ff44 	bl	801cbe0 <malloc>
 801cd58:	4602      	mov	r2, r0
 801cd5a:	61e0      	str	r0, [r4, #28]
 801cd5c:	b920      	cbnz	r0, 801cd68 <_Balloc+0x20>
 801cd5e:	4b18      	ldr	r3, [pc, #96]	; (801cdc0 <_Balloc+0x78>)
 801cd60:	4818      	ldr	r0, [pc, #96]	; (801cdc4 <_Balloc+0x7c>)
 801cd62:	216b      	movs	r1, #107	; 0x6b
 801cd64:	f002 f8d0 	bl	801ef08 <__assert_func>
 801cd68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cd6c:	6006      	str	r6, [r0, #0]
 801cd6e:	60c6      	str	r6, [r0, #12]
 801cd70:	69e6      	ldr	r6, [r4, #28]
 801cd72:	68f3      	ldr	r3, [r6, #12]
 801cd74:	b183      	cbz	r3, 801cd98 <_Balloc+0x50>
 801cd76:	69e3      	ldr	r3, [r4, #28]
 801cd78:	68db      	ldr	r3, [r3, #12]
 801cd7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801cd7e:	b9b8      	cbnz	r0, 801cdb0 <_Balloc+0x68>
 801cd80:	2101      	movs	r1, #1
 801cd82:	fa01 f605 	lsl.w	r6, r1, r5
 801cd86:	1d72      	adds	r2, r6, #5
 801cd88:	0092      	lsls	r2, r2, #2
 801cd8a:	4620      	mov	r0, r4
 801cd8c:	f002 f8da 	bl	801ef44 <_calloc_r>
 801cd90:	b160      	cbz	r0, 801cdac <_Balloc+0x64>
 801cd92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801cd96:	e00e      	b.n	801cdb6 <_Balloc+0x6e>
 801cd98:	2221      	movs	r2, #33	; 0x21
 801cd9a:	2104      	movs	r1, #4
 801cd9c:	4620      	mov	r0, r4
 801cd9e:	f002 f8d1 	bl	801ef44 <_calloc_r>
 801cda2:	69e3      	ldr	r3, [r4, #28]
 801cda4:	60f0      	str	r0, [r6, #12]
 801cda6:	68db      	ldr	r3, [r3, #12]
 801cda8:	2b00      	cmp	r3, #0
 801cdaa:	d1e4      	bne.n	801cd76 <_Balloc+0x2e>
 801cdac:	2000      	movs	r0, #0
 801cdae:	bd70      	pop	{r4, r5, r6, pc}
 801cdb0:	6802      	ldr	r2, [r0, #0]
 801cdb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cdb6:	2300      	movs	r3, #0
 801cdb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801cdbc:	e7f7      	b.n	801cdae <_Balloc+0x66>
 801cdbe:	bf00      	nop
 801cdc0:	08020518 	.word	0x08020518
 801cdc4:	08020598 	.word	0x08020598

0801cdc8 <_Bfree>:
 801cdc8:	b570      	push	{r4, r5, r6, lr}
 801cdca:	69c6      	ldr	r6, [r0, #28]
 801cdcc:	4605      	mov	r5, r0
 801cdce:	460c      	mov	r4, r1
 801cdd0:	b976      	cbnz	r6, 801cdf0 <_Bfree+0x28>
 801cdd2:	2010      	movs	r0, #16
 801cdd4:	f7ff ff04 	bl	801cbe0 <malloc>
 801cdd8:	4602      	mov	r2, r0
 801cdda:	61e8      	str	r0, [r5, #28]
 801cddc:	b920      	cbnz	r0, 801cde8 <_Bfree+0x20>
 801cdde:	4b09      	ldr	r3, [pc, #36]	; (801ce04 <_Bfree+0x3c>)
 801cde0:	4809      	ldr	r0, [pc, #36]	; (801ce08 <_Bfree+0x40>)
 801cde2:	218f      	movs	r1, #143	; 0x8f
 801cde4:	f002 f890 	bl	801ef08 <__assert_func>
 801cde8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cdec:	6006      	str	r6, [r0, #0]
 801cdee:	60c6      	str	r6, [r0, #12]
 801cdf0:	b13c      	cbz	r4, 801ce02 <_Bfree+0x3a>
 801cdf2:	69eb      	ldr	r3, [r5, #28]
 801cdf4:	6862      	ldr	r2, [r4, #4]
 801cdf6:	68db      	ldr	r3, [r3, #12]
 801cdf8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801cdfc:	6021      	str	r1, [r4, #0]
 801cdfe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801ce02:	bd70      	pop	{r4, r5, r6, pc}
 801ce04:	08020518 	.word	0x08020518
 801ce08:	08020598 	.word	0x08020598

0801ce0c <__multadd>:
 801ce0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce10:	690d      	ldr	r5, [r1, #16]
 801ce12:	4607      	mov	r7, r0
 801ce14:	460c      	mov	r4, r1
 801ce16:	461e      	mov	r6, r3
 801ce18:	f101 0c14 	add.w	ip, r1, #20
 801ce1c:	2000      	movs	r0, #0
 801ce1e:	f8dc 3000 	ldr.w	r3, [ip]
 801ce22:	b299      	uxth	r1, r3
 801ce24:	fb02 6101 	mla	r1, r2, r1, r6
 801ce28:	0c1e      	lsrs	r6, r3, #16
 801ce2a:	0c0b      	lsrs	r3, r1, #16
 801ce2c:	fb02 3306 	mla	r3, r2, r6, r3
 801ce30:	b289      	uxth	r1, r1
 801ce32:	3001      	adds	r0, #1
 801ce34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801ce38:	4285      	cmp	r5, r0
 801ce3a:	f84c 1b04 	str.w	r1, [ip], #4
 801ce3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801ce42:	dcec      	bgt.n	801ce1e <__multadd+0x12>
 801ce44:	b30e      	cbz	r6, 801ce8a <__multadd+0x7e>
 801ce46:	68a3      	ldr	r3, [r4, #8]
 801ce48:	42ab      	cmp	r3, r5
 801ce4a:	dc19      	bgt.n	801ce80 <__multadd+0x74>
 801ce4c:	6861      	ldr	r1, [r4, #4]
 801ce4e:	4638      	mov	r0, r7
 801ce50:	3101      	adds	r1, #1
 801ce52:	f7ff ff79 	bl	801cd48 <_Balloc>
 801ce56:	4680      	mov	r8, r0
 801ce58:	b928      	cbnz	r0, 801ce66 <__multadd+0x5a>
 801ce5a:	4602      	mov	r2, r0
 801ce5c:	4b0c      	ldr	r3, [pc, #48]	; (801ce90 <__multadd+0x84>)
 801ce5e:	480d      	ldr	r0, [pc, #52]	; (801ce94 <__multadd+0x88>)
 801ce60:	21ba      	movs	r1, #186	; 0xba
 801ce62:	f002 f851 	bl	801ef08 <__assert_func>
 801ce66:	6922      	ldr	r2, [r4, #16]
 801ce68:	3202      	adds	r2, #2
 801ce6a:	f104 010c 	add.w	r1, r4, #12
 801ce6e:	0092      	lsls	r2, r2, #2
 801ce70:	300c      	adds	r0, #12
 801ce72:	f7ff f85e 	bl	801bf32 <memcpy>
 801ce76:	4621      	mov	r1, r4
 801ce78:	4638      	mov	r0, r7
 801ce7a:	f7ff ffa5 	bl	801cdc8 <_Bfree>
 801ce7e:	4644      	mov	r4, r8
 801ce80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ce84:	3501      	adds	r5, #1
 801ce86:	615e      	str	r6, [r3, #20]
 801ce88:	6125      	str	r5, [r4, #16]
 801ce8a:	4620      	mov	r0, r4
 801ce8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ce90:	08020587 	.word	0x08020587
 801ce94:	08020598 	.word	0x08020598

0801ce98 <__s2b>:
 801ce98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ce9c:	460c      	mov	r4, r1
 801ce9e:	4615      	mov	r5, r2
 801cea0:	461f      	mov	r7, r3
 801cea2:	2209      	movs	r2, #9
 801cea4:	3308      	adds	r3, #8
 801cea6:	4606      	mov	r6, r0
 801cea8:	fb93 f3f2 	sdiv	r3, r3, r2
 801ceac:	2100      	movs	r1, #0
 801ceae:	2201      	movs	r2, #1
 801ceb0:	429a      	cmp	r2, r3
 801ceb2:	db09      	blt.n	801cec8 <__s2b+0x30>
 801ceb4:	4630      	mov	r0, r6
 801ceb6:	f7ff ff47 	bl	801cd48 <_Balloc>
 801ceba:	b940      	cbnz	r0, 801cece <__s2b+0x36>
 801cebc:	4602      	mov	r2, r0
 801cebe:	4b19      	ldr	r3, [pc, #100]	; (801cf24 <__s2b+0x8c>)
 801cec0:	4819      	ldr	r0, [pc, #100]	; (801cf28 <__s2b+0x90>)
 801cec2:	21d3      	movs	r1, #211	; 0xd3
 801cec4:	f002 f820 	bl	801ef08 <__assert_func>
 801cec8:	0052      	lsls	r2, r2, #1
 801ceca:	3101      	adds	r1, #1
 801cecc:	e7f0      	b.n	801ceb0 <__s2b+0x18>
 801cece:	9b08      	ldr	r3, [sp, #32]
 801ced0:	6143      	str	r3, [r0, #20]
 801ced2:	2d09      	cmp	r5, #9
 801ced4:	f04f 0301 	mov.w	r3, #1
 801ced8:	6103      	str	r3, [r0, #16]
 801ceda:	dd16      	ble.n	801cf0a <__s2b+0x72>
 801cedc:	f104 0909 	add.w	r9, r4, #9
 801cee0:	46c8      	mov	r8, r9
 801cee2:	442c      	add	r4, r5
 801cee4:	f818 3b01 	ldrb.w	r3, [r8], #1
 801cee8:	4601      	mov	r1, r0
 801ceea:	3b30      	subs	r3, #48	; 0x30
 801ceec:	220a      	movs	r2, #10
 801ceee:	4630      	mov	r0, r6
 801cef0:	f7ff ff8c 	bl	801ce0c <__multadd>
 801cef4:	45a0      	cmp	r8, r4
 801cef6:	d1f5      	bne.n	801cee4 <__s2b+0x4c>
 801cef8:	f1a5 0408 	sub.w	r4, r5, #8
 801cefc:	444c      	add	r4, r9
 801cefe:	1b2d      	subs	r5, r5, r4
 801cf00:	1963      	adds	r3, r4, r5
 801cf02:	42bb      	cmp	r3, r7
 801cf04:	db04      	blt.n	801cf10 <__s2b+0x78>
 801cf06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cf0a:	340a      	adds	r4, #10
 801cf0c:	2509      	movs	r5, #9
 801cf0e:	e7f6      	b.n	801cefe <__s2b+0x66>
 801cf10:	f814 3b01 	ldrb.w	r3, [r4], #1
 801cf14:	4601      	mov	r1, r0
 801cf16:	3b30      	subs	r3, #48	; 0x30
 801cf18:	220a      	movs	r2, #10
 801cf1a:	4630      	mov	r0, r6
 801cf1c:	f7ff ff76 	bl	801ce0c <__multadd>
 801cf20:	e7ee      	b.n	801cf00 <__s2b+0x68>
 801cf22:	bf00      	nop
 801cf24:	08020587 	.word	0x08020587
 801cf28:	08020598 	.word	0x08020598

0801cf2c <__hi0bits>:
 801cf2c:	0c03      	lsrs	r3, r0, #16
 801cf2e:	041b      	lsls	r3, r3, #16
 801cf30:	b9d3      	cbnz	r3, 801cf68 <__hi0bits+0x3c>
 801cf32:	0400      	lsls	r0, r0, #16
 801cf34:	2310      	movs	r3, #16
 801cf36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801cf3a:	bf04      	itt	eq
 801cf3c:	0200      	lsleq	r0, r0, #8
 801cf3e:	3308      	addeq	r3, #8
 801cf40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801cf44:	bf04      	itt	eq
 801cf46:	0100      	lsleq	r0, r0, #4
 801cf48:	3304      	addeq	r3, #4
 801cf4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801cf4e:	bf04      	itt	eq
 801cf50:	0080      	lsleq	r0, r0, #2
 801cf52:	3302      	addeq	r3, #2
 801cf54:	2800      	cmp	r0, #0
 801cf56:	db05      	blt.n	801cf64 <__hi0bits+0x38>
 801cf58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801cf5c:	f103 0301 	add.w	r3, r3, #1
 801cf60:	bf08      	it	eq
 801cf62:	2320      	moveq	r3, #32
 801cf64:	4618      	mov	r0, r3
 801cf66:	4770      	bx	lr
 801cf68:	2300      	movs	r3, #0
 801cf6a:	e7e4      	b.n	801cf36 <__hi0bits+0xa>

0801cf6c <__lo0bits>:
 801cf6c:	6803      	ldr	r3, [r0, #0]
 801cf6e:	f013 0207 	ands.w	r2, r3, #7
 801cf72:	d00c      	beq.n	801cf8e <__lo0bits+0x22>
 801cf74:	07d9      	lsls	r1, r3, #31
 801cf76:	d422      	bmi.n	801cfbe <__lo0bits+0x52>
 801cf78:	079a      	lsls	r2, r3, #30
 801cf7a:	bf49      	itett	mi
 801cf7c:	085b      	lsrmi	r3, r3, #1
 801cf7e:	089b      	lsrpl	r3, r3, #2
 801cf80:	6003      	strmi	r3, [r0, #0]
 801cf82:	2201      	movmi	r2, #1
 801cf84:	bf5c      	itt	pl
 801cf86:	6003      	strpl	r3, [r0, #0]
 801cf88:	2202      	movpl	r2, #2
 801cf8a:	4610      	mov	r0, r2
 801cf8c:	4770      	bx	lr
 801cf8e:	b299      	uxth	r1, r3
 801cf90:	b909      	cbnz	r1, 801cf96 <__lo0bits+0x2a>
 801cf92:	0c1b      	lsrs	r3, r3, #16
 801cf94:	2210      	movs	r2, #16
 801cf96:	b2d9      	uxtb	r1, r3
 801cf98:	b909      	cbnz	r1, 801cf9e <__lo0bits+0x32>
 801cf9a:	3208      	adds	r2, #8
 801cf9c:	0a1b      	lsrs	r3, r3, #8
 801cf9e:	0719      	lsls	r1, r3, #28
 801cfa0:	bf04      	itt	eq
 801cfa2:	091b      	lsreq	r3, r3, #4
 801cfa4:	3204      	addeq	r2, #4
 801cfa6:	0799      	lsls	r1, r3, #30
 801cfa8:	bf04      	itt	eq
 801cfaa:	089b      	lsreq	r3, r3, #2
 801cfac:	3202      	addeq	r2, #2
 801cfae:	07d9      	lsls	r1, r3, #31
 801cfb0:	d403      	bmi.n	801cfba <__lo0bits+0x4e>
 801cfb2:	085b      	lsrs	r3, r3, #1
 801cfb4:	f102 0201 	add.w	r2, r2, #1
 801cfb8:	d003      	beq.n	801cfc2 <__lo0bits+0x56>
 801cfba:	6003      	str	r3, [r0, #0]
 801cfbc:	e7e5      	b.n	801cf8a <__lo0bits+0x1e>
 801cfbe:	2200      	movs	r2, #0
 801cfc0:	e7e3      	b.n	801cf8a <__lo0bits+0x1e>
 801cfc2:	2220      	movs	r2, #32
 801cfc4:	e7e1      	b.n	801cf8a <__lo0bits+0x1e>
	...

0801cfc8 <__i2b>:
 801cfc8:	b510      	push	{r4, lr}
 801cfca:	460c      	mov	r4, r1
 801cfcc:	2101      	movs	r1, #1
 801cfce:	f7ff febb 	bl	801cd48 <_Balloc>
 801cfd2:	4602      	mov	r2, r0
 801cfd4:	b928      	cbnz	r0, 801cfe2 <__i2b+0x1a>
 801cfd6:	4b05      	ldr	r3, [pc, #20]	; (801cfec <__i2b+0x24>)
 801cfd8:	4805      	ldr	r0, [pc, #20]	; (801cff0 <__i2b+0x28>)
 801cfda:	f240 1145 	movw	r1, #325	; 0x145
 801cfde:	f001 ff93 	bl	801ef08 <__assert_func>
 801cfe2:	2301      	movs	r3, #1
 801cfe4:	6144      	str	r4, [r0, #20]
 801cfe6:	6103      	str	r3, [r0, #16]
 801cfe8:	bd10      	pop	{r4, pc}
 801cfea:	bf00      	nop
 801cfec:	08020587 	.word	0x08020587
 801cff0:	08020598 	.word	0x08020598

0801cff4 <__multiply>:
 801cff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cff8:	4691      	mov	r9, r2
 801cffa:	690a      	ldr	r2, [r1, #16]
 801cffc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d000:	429a      	cmp	r2, r3
 801d002:	bfb8      	it	lt
 801d004:	460b      	movlt	r3, r1
 801d006:	460c      	mov	r4, r1
 801d008:	bfbc      	itt	lt
 801d00a:	464c      	movlt	r4, r9
 801d00c:	4699      	movlt	r9, r3
 801d00e:	6927      	ldr	r7, [r4, #16]
 801d010:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801d014:	68a3      	ldr	r3, [r4, #8]
 801d016:	6861      	ldr	r1, [r4, #4]
 801d018:	eb07 060a 	add.w	r6, r7, sl
 801d01c:	42b3      	cmp	r3, r6
 801d01e:	b085      	sub	sp, #20
 801d020:	bfb8      	it	lt
 801d022:	3101      	addlt	r1, #1
 801d024:	f7ff fe90 	bl	801cd48 <_Balloc>
 801d028:	b930      	cbnz	r0, 801d038 <__multiply+0x44>
 801d02a:	4602      	mov	r2, r0
 801d02c:	4b44      	ldr	r3, [pc, #272]	; (801d140 <__multiply+0x14c>)
 801d02e:	4845      	ldr	r0, [pc, #276]	; (801d144 <__multiply+0x150>)
 801d030:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801d034:	f001 ff68 	bl	801ef08 <__assert_func>
 801d038:	f100 0514 	add.w	r5, r0, #20
 801d03c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801d040:	462b      	mov	r3, r5
 801d042:	2200      	movs	r2, #0
 801d044:	4543      	cmp	r3, r8
 801d046:	d321      	bcc.n	801d08c <__multiply+0x98>
 801d048:	f104 0314 	add.w	r3, r4, #20
 801d04c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801d050:	f109 0314 	add.w	r3, r9, #20
 801d054:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801d058:	9202      	str	r2, [sp, #8]
 801d05a:	1b3a      	subs	r2, r7, r4
 801d05c:	3a15      	subs	r2, #21
 801d05e:	f022 0203 	bic.w	r2, r2, #3
 801d062:	3204      	adds	r2, #4
 801d064:	f104 0115 	add.w	r1, r4, #21
 801d068:	428f      	cmp	r7, r1
 801d06a:	bf38      	it	cc
 801d06c:	2204      	movcc	r2, #4
 801d06e:	9201      	str	r2, [sp, #4]
 801d070:	9a02      	ldr	r2, [sp, #8]
 801d072:	9303      	str	r3, [sp, #12]
 801d074:	429a      	cmp	r2, r3
 801d076:	d80c      	bhi.n	801d092 <__multiply+0x9e>
 801d078:	2e00      	cmp	r6, #0
 801d07a:	dd03      	ble.n	801d084 <__multiply+0x90>
 801d07c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d080:	2b00      	cmp	r3, #0
 801d082:	d05b      	beq.n	801d13c <__multiply+0x148>
 801d084:	6106      	str	r6, [r0, #16]
 801d086:	b005      	add	sp, #20
 801d088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d08c:	f843 2b04 	str.w	r2, [r3], #4
 801d090:	e7d8      	b.n	801d044 <__multiply+0x50>
 801d092:	f8b3 a000 	ldrh.w	sl, [r3]
 801d096:	f1ba 0f00 	cmp.w	sl, #0
 801d09a:	d024      	beq.n	801d0e6 <__multiply+0xf2>
 801d09c:	f104 0e14 	add.w	lr, r4, #20
 801d0a0:	46a9      	mov	r9, r5
 801d0a2:	f04f 0c00 	mov.w	ip, #0
 801d0a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 801d0aa:	f8d9 1000 	ldr.w	r1, [r9]
 801d0ae:	fa1f fb82 	uxth.w	fp, r2
 801d0b2:	b289      	uxth	r1, r1
 801d0b4:	fb0a 110b 	mla	r1, sl, fp, r1
 801d0b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801d0bc:	f8d9 2000 	ldr.w	r2, [r9]
 801d0c0:	4461      	add	r1, ip
 801d0c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d0c6:	fb0a c20b 	mla	r2, sl, fp, ip
 801d0ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801d0ce:	b289      	uxth	r1, r1
 801d0d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801d0d4:	4577      	cmp	r7, lr
 801d0d6:	f849 1b04 	str.w	r1, [r9], #4
 801d0da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d0de:	d8e2      	bhi.n	801d0a6 <__multiply+0xb2>
 801d0e0:	9a01      	ldr	r2, [sp, #4]
 801d0e2:	f845 c002 	str.w	ip, [r5, r2]
 801d0e6:	9a03      	ldr	r2, [sp, #12]
 801d0e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801d0ec:	3304      	adds	r3, #4
 801d0ee:	f1b9 0f00 	cmp.w	r9, #0
 801d0f2:	d021      	beq.n	801d138 <__multiply+0x144>
 801d0f4:	6829      	ldr	r1, [r5, #0]
 801d0f6:	f104 0c14 	add.w	ip, r4, #20
 801d0fa:	46ae      	mov	lr, r5
 801d0fc:	f04f 0a00 	mov.w	sl, #0
 801d100:	f8bc b000 	ldrh.w	fp, [ip]
 801d104:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801d108:	fb09 220b 	mla	r2, r9, fp, r2
 801d10c:	4452      	add	r2, sl
 801d10e:	b289      	uxth	r1, r1
 801d110:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801d114:	f84e 1b04 	str.w	r1, [lr], #4
 801d118:	f85c 1b04 	ldr.w	r1, [ip], #4
 801d11c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801d120:	f8be 1000 	ldrh.w	r1, [lr]
 801d124:	fb09 110a 	mla	r1, r9, sl, r1
 801d128:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801d12c:	4567      	cmp	r7, ip
 801d12e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801d132:	d8e5      	bhi.n	801d100 <__multiply+0x10c>
 801d134:	9a01      	ldr	r2, [sp, #4]
 801d136:	50a9      	str	r1, [r5, r2]
 801d138:	3504      	adds	r5, #4
 801d13a:	e799      	b.n	801d070 <__multiply+0x7c>
 801d13c:	3e01      	subs	r6, #1
 801d13e:	e79b      	b.n	801d078 <__multiply+0x84>
 801d140:	08020587 	.word	0x08020587
 801d144:	08020598 	.word	0x08020598

0801d148 <__pow5mult>:
 801d148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d14c:	4615      	mov	r5, r2
 801d14e:	f012 0203 	ands.w	r2, r2, #3
 801d152:	4606      	mov	r6, r0
 801d154:	460f      	mov	r7, r1
 801d156:	d007      	beq.n	801d168 <__pow5mult+0x20>
 801d158:	4c25      	ldr	r4, [pc, #148]	; (801d1f0 <__pow5mult+0xa8>)
 801d15a:	3a01      	subs	r2, #1
 801d15c:	2300      	movs	r3, #0
 801d15e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d162:	f7ff fe53 	bl	801ce0c <__multadd>
 801d166:	4607      	mov	r7, r0
 801d168:	10ad      	asrs	r5, r5, #2
 801d16a:	d03d      	beq.n	801d1e8 <__pow5mult+0xa0>
 801d16c:	69f4      	ldr	r4, [r6, #28]
 801d16e:	b97c      	cbnz	r4, 801d190 <__pow5mult+0x48>
 801d170:	2010      	movs	r0, #16
 801d172:	f7ff fd35 	bl	801cbe0 <malloc>
 801d176:	4602      	mov	r2, r0
 801d178:	61f0      	str	r0, [r6, #28]
 801d17a:	b928      	cbnz	r0, 801d188 <__pow5mult+0x40>
 801d17c:	4b1d      	ldr	r3, [pc, #116]	; (801d1f4 <__pow5mult+0xac>)
 801d17e:	481e      	ldr	r0, [pc, #120]	; (801d1f8 <__pow5mult+0xb0>)
 801d180:	f240 11b3 	movw	r1, #435	; 0x1b3
 801d184:	f001 fec0 	bl	801ef08 <__assert_func>
 801d188:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d18c:	6004      	str	r4, [r0, #0]
 801d18e:	60c4      	str	r4, [r0, #12]
 801d190:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801d194:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d198:	b94c      	cbnz	r4, 801d1ae <__pow5mult+0x66>
 801d19a:	f240 2171 	movw	r1, #625	; 0x271
 801d19e:	4630      	mov	r0, r6
 801d1a0:	f7ff ff12 	bl	801cfc8 <__i2b>
 801d1a4:	2300      	movs	r3, #0
 801d1a6:	f8c8 0008 	str.w	r0, [r8, #8]
 801d1aa:	4604      	mov	r4, r0
 801d1ac:	6003      	str	r3, [r0, #0]
 801d1ae:	f04f 0900 	mov.w	r9, #0
 801d1b2:	07eb      	lsls	r3, r5, #31
 801d1b4:	d50a      	bpl.n	801d1cc <__pow5mult+0x84>
 801d1b6:	4639      	mov	r1, r7
 801d1b8:	4622      	mov	r2, r4
 801d1ba:	4630      	mov	r0, r6
 801d1bc:	f7ff ff1a 	bl	801cff4 <__multiply>
 801d1c0:	4639      	mov	r1, r7
 801d1c2:	4680      	mov	r8, r0
 801d1c4:	4630      	mov	r0, r6
 801d1c6:	f7ff fdff 	bl	801cdc8 <_Bfree>
 801d1ca:	4647      	mov	r7, r8
 801d1cc:	106d      	asrs	r5, r5, #1
 801d1ce:	d00b      	beq.n	801d1e8 <__pow5mult+0xa0>
 801d1d0:	6820      	ldr	r0, [r4, #0]
 801d1d2:	b938      	cbnz	r0, 801d1e4 <__pow5mult+0x9c>
 801d1d4:	4622      	mov	r2, r4
 801d1d6:	4621      	mov	r1, r4
 801d1d8:	4630      	mov	r0, r6
 801d1da:	f7ff ff0b 	bl	801cff4 <__multiply>
 801d1de:	6020      	str	r0, [r4, #0]
 801d1e0:	f8c0 9000 	str.w	r9, [r0]
 801d1e4:	4604      	mov	r4, r0
 801d1e6:	e7e4      	b.n	801d1b2 <__pow5mult+0x6a>
 801d1e8:	4638      	mov	r0, r7
 801d1ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d1ee:	bf00      	nop
 801d1f0:	080206e8 	.word	0x080206e8
 801d1f4:	08020518 	.word	0x08020518
 801d1f8:	08020598 	.word	0x08020598

0801d1fc <__lshift>:
 801d1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d200:	460c      	mov	r4, r1
 801d202:	6849      	ldr	r1, [r1, #4]
 801d204:	6923      	ldr	r3, [r4, #16]
 801d206:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d20a:	68a3      	ldr	r3, [r4, #8]
 801d20c:	4607      	mov	r7, r0
 801d20e:	4691      	mov	r9, r2
 801d210:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d214:	f108 0601 	add.w	r6, r8, #1
 801d218:	42b3      	cmp	r3, r6
 801d21a:	db0b      	blt.n	801d234 <__lshift+0x38>
 801d21c:	4638      	mov	r0, r7
 801d21e:	f7ff fd93 	bl	801cd48 <_Balloc>
 801d222:	4605      	mov	r5, r0
 801d224:	b948      	cbnz	r0, 801d23a <__lshift+0x3e>
 801d226:	4602      	mov	r2, r0
 801d228:	4b28      	ldr	r3, [pc, #160]	; (801d2cc <__lshift+0xd0>)
 801d22a:	4829      	ldr	r0, [pc, #164]	; (801d2d0 <__lshift+0xd4>)
 801d22c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801d230:	f001 fe6a 	bl	801ef08 <__assert_func>
 801d234:	3101      	adds	r1, #1
 801d236:	005b      	lsls	r3, r3, #1
 801d238:	e7ee      	b.n	801d218 <__lshift+0x1c>
 801d23a:	2300      	movs	r3, #0
 801d23c:	f100 0114 	add.w	r1, r0, #20
 801d240:	f100 0210 	add.w	r2, r0, #16
 801d244:	4618      	mov	r0, r3
 801d246:	4553      	cmp	r3, sl
 801d248:	db33      	blt.n	801d2b2 <__lshift+0xb6>
 801d24a:	6920      	ldr	r0, [r4, #16]
 801d24c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d250:	f104 0314 	add.w	r3, r4, #20
 801d254:	f019 091f 	ands.w	r9, r9, #31
 801d258:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d25c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d260:	d02b      	beq.n	801d2ba <__lshift+0xbe>
 801d262:	f1c9 0e20 	rsb	lr, r9, #32
 801d266:	468a      	mov	sl, r1
 801d268:	2200      	movs	r2, #0
 801d26a:	6818      	ldr	r0, [r3, #0]
 801d26c:	fa00 f009 	lsl.w	r0, r0, r9
 801d270:	4310      	orrs	r0, r2
 801d272:	f84a 0b04 	str.w	r0, [sl], #4
 801d276:	f853 2b04 	ldr.w	r2, [r3], #4
 801d27a:	459c      	cmp	ip, r3
 801d27c:	fa22 f20e 	lsr.w	r2, r2, lr
 801d280:	d8f3      	bhi.n	801d26a <__lshift+0x6e>
 801d282:	ebac 0304 	sub.w	r3, ip, r4
 801d286:	3b15      	subs	r3, #21
 801d288:	f023 0303 	bic.w	r3, r3, #3
 801d28c:	3304      	adds	r3, #4
 801d28e:	f104 0015 	add.w	r0, r4, #21
 801d292:	4584      	cmp	ip, r0
 801d294:	bf38      	it	cc
 801d296:	2304      	movcc	r3, #4
 801d298:	50ca      	str	r2, [r1, r3]
 801d29a:	b10a      	cbz	r2, 801d2a0 <__lshift+0xa4>
 801d29c:	f108 0602 	add.w	r6, r8, #2
 801d2a0:	3e01      	subs	r6, #1
 801d2a2:	4638      	mov	r0, r7
 801d2a4:	612e      	str	r6, [r5, #16]
 801d2a6:	4621      	mov	r1, r4
 801d2a8:	f7ff fd8e 	bl	801cdc8 <_Bfree>
 801d2ac:	4628      	mov	r0, r5
 801d2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d2b2:	f842 0f04 	str.w	r0, [r2, #4]!
 801d2b6:	3301      	adds	r3, #1
 801d2b8:	e7c5      	b.n	801d246 <__lshift+0x4a>
 801d2ba:	3904      	subs	r1, #4
 801d2bc:	f853 2b04 	ldr.w	r2, [r3], #4
 801d2c0:	f841 2f04 	str.w	r2, [r1, #4]!
 801d2c4:	459c      	cmp	ip, r3
 801d2c6:	d8f9      	bhi.n	801d2bc <__lshift+0xc0>
 801d2c8:	e7ea      	b.n	801d2a0 <__lshift+0xa4>
 801d2ca:	bf00      	nop
 801d2cc:	08020587 	.word	0x08020587
 801d2d0:	08020598 	.word	0x08020598

0801d2d4 <__mcmp>:
 801d2d4:	b530      	push	{r4, r5, lr}
 801d2d6:	6902      	ldr	r2, [r0, #16]
 801d2d8:	690c      	ldr	r4, [r1, #16]
 801d2da:	1b12      	subs	r2, r2, r4
 801d2dc:	d10e      	bne.n	801d2fc <__mcmp+0x28>
 801d2de:	f100 0314 	add.w	r3, r0, #20
 801d2e2:	3114      	adds	r1, #20
 801d2e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801d2e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801d2ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801d2f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801d2f4:	42a5      	cmp	r5, r4
 801d2f6:	d003      	beq.n	801d300 <__mcmp+0x2c>
 801d2f8:	d305      	bcc.n	801d306 <__mcmp+0x32>
 801d2fa:	2201      	movs	r2, #1
 801d2fc:	4610      	mov	r0, r2
 801d2fe:	bd30      	pop	{r4, r5, pc}
 801d300:	4283      	cmp	r3, r0
 801d302:	d3f3      	bcc.n	801d2ec <__mcmp+0x18>
 801d304:	e7fa      	b.n	801d2fc <__mcmp+0x28>
 801d306:	f04f 32ff 	mov.w	r2, #4294967295
 801d30a:	e7f7      	b.n	801d2fc <__mcmp+0x28>

0801d30c <__mdiff>:
 801d30c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d310:	460c      	mov	r4, r1
 801d312:	4606      	mov	r6, r0
 801d314:	4611      	mov	r1, r2
 801d316:	4620      	mov	r0, r4
 801d318:	4690      	mov	r8, r2
 801d31a:	f7ff ffdb 	bl	801d2d4 <__mcmp>
 801d31e:	1e05      	subs	r5, r0, #0
 801d320:	d110      	bne.n	801d344 <__mdiff+0x38>
 801d322:	4629      	mov	r1, r5
 801d324:	4630      	mov	r0, r6
 801d326:	f7ff fd0f 	bl	801cd48 <_Balloc>
 801d32a:	b930      	cbnz	r0, 801d33a <__mdiff+0x2e>
 801d32c:	4b3a      	ldr	r3, [pc, #232]	; (801d418 <__mdiff+0x10c>)
 801d32e:	4602      	mov	r2, r0
 801d330:	f240 2137 	movw	r1, #567	; 0x237
 801d334:	4839      	ldr	r0, [pc, #228]	; (801d41c <__mdiff+0x110>)
 801d336:	f001 fde7 	bl	801ef08 <__assert_func>
 801d33a:	2301      	movs	r3, #1
 801d33c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d340:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d344:	bfa4      	itt	ge
 801d346:	4643      	movge	r3, r8
 801d348:	46a0      	movge	r8, r4
 801d34a:	4630      	mov	r0, r6
 801d34c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d350:	bfa6      	itte	ge
 801d352:	461c      	movge	r4, r3
 801d354:	2500      	movge	r5, #0
 801d356:	2501      	movlt	r5, #1
 801d358:	f7ff fcf6 	bl	801cd48 <_Balloc>
 801d35c:	b920      	cbnz	r0, 801d368 <__mdiff+0x5c>
 801d35e:	4b2e      	ldr	r3, [pc, #184]	; (801d418 <__mdiff+0x10c>)
 801d360:	4602      	mov	r2, r0
 801d362:	f240 2145 	movw	r1, #581	; 0x245
 801d366:	e7e5      	b.n	801d334 <__mdiff+0x28>
 801d368:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801d36c:	6926      	ldr	r6, [r4, #16]
 801d36e:	60c5      	str	r5, [r0, #12]
 801d370:	f104 0914 	add.w	r9, r4, #20
 801d374:	f108 0514 	add.w	r5, r8, #20
 801d378:	f100 0e14 	add.w	lr, r0, #20
 801d37c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801d380:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801d384:	f108 0210 	add.w	r2, r8, #16
 801d388:	46f2      	mov	sl, lr
 801d38a:	2100      	movs	r1, #0
 801d38c:	f859 3b04 	ldr.w	r3, [r9], #4
 801d390:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801d394:	fa11 f88b 	uxtah	r8, r1, fp
 801d398:	b299      	uxth	r1, r3
 801d39a:	0c1b      	lsrs	r3, r3, #16
 801d39c:	eba8 0801 	sub.w	r8, r8, r1
 801d3a0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801d3a4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801d3a8:	fa1f f888 	uxth.w	r8, r8
 801d3ac:	1419      	asrs	r1, r3, #16
 801d3ae:	454e      	cmp	r6, r9
 801d3b0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801d3b4:	f84a 3b04 	str.w	r3, [sl], #4
 801d3b8:	d8e8      	bhi.n	801d38c <__mdiff+0x80>
 801d3ba:	1b33      	subs	r3, r6, r4
 801d3bc:	3b15      	subs	r3, #21
 801d3be:	f023 0303 	bic.w	r3, r3, #3
 801d3c2:	3304      	adds	r3, #4
 801d3c4:	3415      	adds	r4, #21
 801d3c6:	42a6      	cmp	r6, r4
 801d3c8:	bf38      	it	cc
 801d3ca:	2304      	movcc	r3, #4
 801d3cc:	441d      	add	r5, r3
 801d3ce:	4473      	add	r3, lr
 801d3d0:	469e      	mov	lr, r3
 801d3d2:	462e      	mov	r6, r5
 801d3d4:	4566      	cmp	r6, ip
 801d3d6:	d30e      	bcc.n	801d3f6 <__mdiff+0xea>
 801d3d8:	f10c 0203 	add.w	r2, ip, #3
 801d3dc:	1b52      	subs	r2, r2, r5
 801d3de:	f022 0203 	bic.w	r2, r2, #3
 801d3e2:	3d03      	subs	r5, #3
 801d3e4:	45ac      	cmp	ip, r5
 801d3e6:	bf38      	it	cc
 801d3e8:	2200      	movcc	r2, #0
 801d3ea:	4413      	add	r3, r2
 801d3ec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801d3f0:	b17a      	cbz	r2, 801d412 <__mdiff+0x106>
 801d3f2:	6107      	str	r7, [r0, #16]
 801d3f4:	e7a4      	b.n	801d340 <__mdiff+0x34>
 801d3f6:	f856 8b04 	ldr.w	r8, [r6], #4
 801d3fa:	fa11 f288 	uxtah	r2, r1, r8
 801d3fe:	1414      	asrs	r4, r2, #16
 801d400:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801d404:	b292      	uxth	r2, r2
 801d406:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801d40a:	f84e 2b04 	str.w	r2, [lr], #4
 801d40e:	1421      	asrs	r1, r4, #16
 801d410:	e7e0      	b.n	801d3d4 <__mdiff+0xc8>
 801d412:	3f01      	subs	r7, #1
 801d414:	e7ea      	b.n	801d3ec <__mdiff+0xe0>
 801d416:	bf00      	nop
 801d418:	08020587 	.word	0x08020587
 801d41c:	08020598 	.word	0x08020598

0801d420 <__ulp>:
 801d420:	b082      	sub	sp, #8
 801d422:	ed8d 0b00 	vstr	d0, [sp]
 801d426:	9a01      	ldr	r2, [sp, #4]
 801d428:	4b0f      	ldr	r3, [pc, #60]	; (801d468 <__ulp+0x48>)
 801d42a:	4013      	ands	r3, r2
 801d42c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801d430:	2b00      	cmp	r3, #0
 801d432:	dc08      	bgt.n	801d446 <__ulp+0x26>
 801d434:	425b      	negs	r3, r3
 801d436:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801d43a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801d43e:	da04      	bge.n	801d44a <__ulp+0x2a>
 801d440:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801d444:	4113      	asrs	r3, r2
 801d446:	2200      	movs	r2, #0
 801d448:	e008      	b.n	801d45c <__ulp+0x3c>
 801d44a:	f1a2 0314 	sub.w	r3, r2, #20
 801d44e:	2b1e      	cmp	r3, #30
 801d450:	bfda      	itte	le
 801d452:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801d456:	40da      	lsrle	r2, r3
 801d458:	2201      	movgt	r2, #1
 801d45a:	2300      	movs	r3, #0
 801d45c:	4619      	mov	r1, r3
 801d45e:	4610      	mov	r0, r2
 801d460:	ec41 0b10 	vmov	d0, r0, r1
 801d464:	b002      	add	sp, #8
 801d466:	4770      	bx	lr
 801d468:	7ff00000 	.word	0x7ff00000

0801d46c <__b2d>:
 801d46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d470:	6906      	ldr	r6, [r0, #16]
 801d472:	f100 0814 	add.w	r8, r0, #20
 801d476:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801d47a:	1f37      	subs	r7, r6, #4
 801d47c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d480:	4610      	mov	r0, r2
 801d482:	f7ff fd53 	bl	801cf2c <__hi0bits>
 801d486:	f1c0 0320 	rsb	r3, r0, #32
 801d48a:	280a      	cmp	r0, #10
 801d48c:	600b      	str	r3, [r1, #0]
 801d48e:	491b      	ldr	r1, [pc, #108]	; (801d4fc <__b2d+0x90>)
 801d490:	dc15      	bgt.n	801d4be <__b2d+0x52>
 801d492:	f1c0 0c0b 	rsb	ip, r0, #11
 801d496:	fa22 f30c 	lsr.w	r3, r2, ip
 801d49a:	45b8      	cmp	r8, r7
 801d49c:	ea43 0501 	orr.w	r5, r3, r1
 801d4a0:	bf34      	ite	cc
 801d4a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d4a6:	2300      	movcs	r3, #0
 801d4a8:	3015      	adds	r0, #21
 801d4aa:	fa02 f000 	lsl.w	r0, r2, r0
 801d4ae:	fa23 f30c 	lsr.w	r3, r3, ip
 801d4b2:	4303      	orrs	r3, r0
 801d4b4:	461c      	mov	r4, r3
 801d4b6:	ec45 4b10 	vmov	d0, r4, r5
 801d4ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d4be:	45b8      	cmp	r8, r7
 801d4c0:	bf3a      	itte	cc
 801d4c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d4c6:	f1a6 0708 	subcc.w	r7, r6, #8
 801d4ca:	2300      	movcs	r3, #0
 801d4cc:	380b      	subs	r0, #11
 801d4ce:	d012      	beq.n	801d4f6 <__b2d+0x8a>
 801d4d0:	f1c0 0120 	rsb	r1, r0, #32
 801d4d4:	fa23 f401 	lsr.w	r4, r3, r1
 801d4d8:	4082      	lsls	r2, r0
 801d4da:	4322      	orrs	r2, r4
 801d4dc:	4547      	cmp	r7, r8
 801d4de:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801d4e2:	bf8c      	ite	hi
 801d4e4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801d4e8:	2200      	movls	r2, #0
 801d4ea:	4083      	lsls	r3, r0
 801d4ec:	40ca      	lsrs	r2, r1
 801d4ee:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801d4f2:	4313      	orrs	r3, r2
 801d4f4:	e7de      	b.n	801d4b4 <__b2d+0x48>
 801d4f6:	ea42 0501 	orr.w	r5, r2, r1
 801d4fa:	e7db      	b.n	801d4b4 <__b2d+0x48>
 801d4fc:	3ff00000 	.word	0x3ff00000

0801d500 <__d2b>:
 801d500:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d504:	460f      	mov	r7, r1
 801d506:	2101      	movs	r1, #1
 801d508:	ec59 8b10 	vmov	r8, r9, d0
 801d50c:	4616      	mov	r6, r2
 801d50e:	f7ff fc1b 	bl	801cd48 <_Balloc>
 801d512:	4604      	mov	r4, r0
 801d514:	b930      	cbnz	r0, 801d524 <__d2b+0x24>
 801d516:	4602      	mov	r2, r0
 801d518:	4b24      	ldr	r3, [pc, #144]	; (801d5ac <__d2b+0xac>)
 801d51a:	4825      	ldr	r0, [pc, #148]	; (801d5b0 <__d2b+0xb0>)
 801d51c:	f240 310f 	movw	r1, #783	; 0x30f
 801d520:	f001 fcf2 	bl	801ef08 <__assert_func>
 801d524:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d528:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d52c:	bb2d      	cbnz	r5, 801d57a <__d2b+0x7a>
 801d52e:	9301      	str	r3, [sp, #4]
 801d530:	f1b8 0300 	subs.w	r3, r8, #0
 801d534:	d026      	beq.n	801d584 <__d2b+0x84>
 801d536:	4668      	mov	r0, sp
 801d538:	9300      	str	r3, [sp, #0]
 801d53a:	f7ff fd17 	bl	801cf6c <__lo0bits>
 801d53e:	e9dd 1200 	ldrd	r1, r2, [sp]
 801d542:	b1e8      	cbz	r0, 801d580 <__d2b+0x80>
 801d544:	f1c0 0320 	rsb	r3, r0, #32
 801d548:	fa02 f303 	lsl.w	r3, r2, r3
 801d54c:	430b      	orrs	r3, r1
 801d54e:	40c2      	lsrs	r2, r0
 801d550:	6163      	str	r3, [r4, #20]
 801d552:	9201      	str	r2, [sp, #4]
 801d554:	9b01      	ldr	r3, [sp, #4]
 801d556:	61a3      	str	r3, [r4, #24]
 801d558:	2b00      	cmp	r3, #0
 801d55a:	bf14      	ite	ne
 801d55c:	2202      	movne	r2, #2
 801d55e:	2201      	moveq	r2, #1
 801d560:	6122      	str	r2, [r4, #16]
 801d562:	b1bd      	cbz	r5, 801d594 <__d2b+0x94>
 801d564:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d568:	4405      	add	r5, r0
 801d56a:	603d      	str	r5, [r7, #0]
 801d56c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d570:	6030      	str	r0, [r6, #0]
 801d572:	4620      	mov	r0, r4
 801d574:	b003      	add	sp, #12
 801d576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d57a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d57e:	e7d6      	b.n	801d52e <__d2b+0x2e>
 801d580:	6161      	str	r1, [r4, #20]
 801d582:	e7e7      	b.n	801d554 <__d2b+0x54>
 801d584:	a801      	add	r0, sp, #4
 801d586:	f7ff fcf1 	bl	801cf6c <__lo0bits>
 801d58a:	9b01      	ldr	r3, [sp, #4]
 801d58c:	6163      	str	r3, [r4, #20]
 801d58e:	3020      	adds	r0, #32
 801d590:	2201      	movs	r2, #1
 801d592:	e7e5      	b.n	801d560 <__d2b+0x60>
 801d594:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d598:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d59c:	6038      	str	r0, [r7, #0]
 801d59e:	6918      	ldr	r0, [r3, #16]
 801d5a0:	f7ff fcc4 	bl	801cf2c <__hi0bits>
 801d5a4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d5a8:	e7e2      	b.n	801d570 <__d2b+0x70>
 801d5aa:	bf00      	nop
 801d5ac:	08020587 	.word	0x08020587
 801d5b0:	08020598 	.word	0x08020598

0801d5b4 <__ratio>:
 801d5b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5b8:	4688      	mov	r8, r1
 801d5ba:	4669      	mov	r1, sp
 801d5bc:	4681      	mov	r9, r0
 801d5be:	f7ff ff55 	bl	801d46c <__b2d>
 801d5c2:	a901      	add	r1, sp, #4
 801d5c4:	4640      	mov	r0, r8
 801d5c6:	ec55 4b10 	vmov	r4, r5, d0
 801d5ca:	ee10 aa10 	vmov	sl, s0
 801d5ce:	f7ff ff4d 	bl	801d46c <__b2d>
 801d5d2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801d5d6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801d5da:	1ad2      	subs	r2, r2, r3
 801d5dc:	e9dd 3100 	ldrd	r3, r1, [sp]
 801d5e0:	1a5b      	subs	r3, r3, r1
 801d5e2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801d5e6:	ec57 6b10 	vmov	r6, r7, d0
 801d5ea:	2b00      	cmp	r3, #0
 801d5ec:	bfd6      	itet	le
 801d5ee:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d5f2:	462a      	movgt	r2, r5
 801d5f4:	463a      	movle	r2, r7
 801d5f6:	46ab      	mov	fp, r5
 801d5f8:	bfd6      	itet	le
 801d5fa:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801d5fe:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801d602:	ee00 3a90 	vmovle	s1, r3
 801d606:	ec4b ab17 	vmov	d7, sl, fp
 801d60a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801d60e:	b003      	add	sp, #12
 801d610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d614 <__copybits>:
 801d614:	3901      	subs	r1, #1
 801d616:	b570      	push	{r4, r5, r6, lr}
 801d618:	1149      	asrs	r1, r1, #5
 801d61a:	6914      	ldr	r4, [r2, #16]
 801d61c:	3101      	adds	r1, #1
 801d61e:	f102 0314 	add.w	r3, r2, #20
 801d622:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d626:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d62a:	1f05      	subs	r5, r0, #4
 801d62c:	42a3      	cmp	r3, r4
 801d62e:	d30c      	bcc.n	801d64a <__copybits+0x36>
 801d630:	1aa3      	subs	r3, r4, r2
 801d632:	3b11      	subs	r3, #17
 801d634:	f023 0303 	bic.w	r3, r3, #3
 801d638:	3211      	adds	r2, #17
 801d63a:	42a2      	cmp	r2, r4
 801d63c:	bf88      	it	hi
 801d63e:	2300      	movhi	r3, #0
 801d640:	4418      	add	r0, r3
 801d642:	2300      	movs	r3, #0
 801d644:	4288      	cmp	r0, r1
 801d646:	d305      	bcc.n	801d654 <__copybits+0x40>
 801d648:	bd70      	pop	{r4, r5, r6, pc}
 801d64a:	f853 6b04 	ldr.w	r6, [r3], #4
 801d64e:	f845 6f04 	str.w	r6, [r5, #4]!
 801d652:	e7eb      	b.n	801d62c <__copybits+0x18>
 801d654:	f840 3b04 	str.w	r3, [r0], #4
 801d658:	e7f4      	b.n	801d644 <__copybits+0x30>

0801d65a <__any_on>:
 801d65a:	f100 0214 	add.w	r2, r0, #20
 801d65e:	6900      	ldr	r0, [r0, #16]
 801d660:	114b      	asrs	r3, r1, #5
 801d662:	4298      	cmp	r0, r3
 801d664:	b510      	push	{r4, lr}
 801d666:	db11      	blt.n	801d68c <__any_on+0x32>
 801d668:	dd0a      	ble.n	801d680 <__any_on+0x26>
 801d66a:	f011 011f 	ands.w	r1, r1, #31
 801d66e:	d007      	beq.n	801d680 <__any_on+0x26>
 801d670:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d674:	fa24 f001 	lsr.w	r0, r4, r1
 801d678:	fa00 f101 	lsl.w	r1, r0, r1
 801d67c:	428c      	cmp	r4, r1
 801d67e:	d10b      	bne.n	801d698 <__any_on+0x3e>
 801d680:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d684:	4293      	cmp	r3, r2
 801d686:	d803      	bhi.n	801d690 <__any_on+0x36>
 801d688:	2000      	movs	r0, #0
 801d68a:	bd10      	pop	{r4, pc}
 801d68c:	4603      	mov	r3, r0
 801d68e:	e7f7      	b.n	801d680 <__any_on+0x26>
 801d690:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d694:	2900      	cmp	r1, #0
 801d696:	d0f5      	beq.n	801d684 <__any_on+0x2a>
 801d698:	2001      	movs	r0, #1
 801d69a:	e7f6      	b.n	801d68a <__any_on+0x30>

0801d69c <sulp>:
 801d69c:	b570      	push	{r4, r5, r6, lr}
 801d69e:	4604      	mov	r4, r0
 801d6a0:	460d      	mov	r5, r1
 801d6a2:	4616      	mov	r6, r2
 801d6a4:	ec45 4b10 	vmov	d0, r4, r5
 801d6a8:	f7ff feba 	bl	801d420 <__ulp>
 801d6ac:	b17e      	cbz	r6, 801d6ce <sulp+0x32>
 801d6ae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801d6b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801d6b6:	2b00      	cmp	r3, #0
 801d6b8:	dd09      	ble.n	801d6ce <sulp+0x32>
 801d6ba:	051b      	lsls	r3, r3, #20
 801d6bc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801d6c0:	2000      	movs	r0, #0
 801d6c2:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801d6c6:	ec41 0b17 	vmov	d7, r0, r1
 801d6ca:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d6ce:	bd70      	pop	{r4, r5, r6, pc}

0801d6d0 <_strtod_l>:
 801d6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6d4:	ed2d 8b0e 	vpush	{d8-d14}
 801d6d8:	b097      	sub	sp, #92	; 0x5c
 801d6da:	4604      	mov	r4, r0
 801d6dc:	920d      	str	r2, [sp, #52]	; 0x34
 801d6de:	2200      	movs	r2, #0
 801d6e0:	9212      	str	r2, [sp, #72]	; 0x48
 801d6e2:	468a      	mov	sl, r1
 801d6e4:	f04f 0800 	mov.w	r8, #0
 801d6e8:	f04f 0900 	mov.w	r9, #0
 801d6ec:	460a      	mov	r2, r1
 801d6ee:	9211      	str	r2, [sp, #68]	; 0x44
 801d6f0:	7811      	ldrb	r1, [r2, #0]
 801d6f2:	292b      	cmp	r1, #43	; 0x2b
 801d6f4:	d04c      	beq.n	801d790 <_strtod_l+0xc0>
 801d6f6:	d839      	bhi.n	801d76c <_strtod_l+0x9c>
 801d6f8:	290d      	cmp	r1, #13
 801d6fa:	d833      	bhi.n	801d764 <_strtod_l+0x94>
 801d6fc:	2908      	cmp	r1, #8
 801d6fe:	d833      	bhi.n	801d768 <_strtod_l+0x98>
 801d700:	2900      	cmp	r1, #0
 801d702:	d03c      	beq.n	801d77e <_strtod_l+0xae>
 801d704:	2200      	movs	r2, #0
 801d706:	9208      	str	r2, [sp, #32]
 801d708:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d70a:	7832      	ldrb	r2, [r6, #0]
 801d70c:	2a30      	cmp	r2, #48	; 0x30
 801d70e:	f040 80b8 	bne.w	801d882 <_strtod_l+0x1b2>
 801d712:	7872      	ldrb	r2, [r6, #1]
 801d714:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801d718:	2a58      	cmp	r2, #88	; 0x58
 801d71a:	d170      	bne.n	801d7fe <_strtod_l+0x12e>
 801d71c:	9302      	str	r3, [sp, #8]
 801d71e:	9b08      	ldr	r3, [sp, #32]
 801d720:	9301      	str	r3, [sp, #4]
 801d722:	ab12      	add	r3, sp, #72	; 0x48
 801d724:	9300      	str	r3, [sp, #0]
 801d726:	4a91      	ldr	r2, [pc, #580]	; (801d96c <_strtod_l+0x29c>)
 801d728:	ab13      	add	r3, sp, #76	; 0x4c
 801d72a:	a911      	add	r1, sp, #68	; 0x44
 801d72c:	4620      	mov	r0, r4
 801d72e:	f001 fc87 	bl	801f040 <__gethex>
 801d732:	f010 070f 	ands.w	r7, r0, #15
 801d736:	4605      	mov	r5, r0
 801d738:	d005      	beq.n	801d746 <_strtod_l+0x76>
 801d73a:	2f06      	cmp	r7, #6
 801d73c:	d12a      	bne.n	801d794 <_strtod_l+0xc4>
 801d73e:	3601      	adds	r6, #1
 801d740:	2300      	movs	r3, #0
 801d742:	9611      	str	r6, [sp, #68]	; 0x44
 801d744:	9308      	str	r3, [sp, #32]
 801d746:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d748:	2b00      	cmp	r3, #0
 801d74a:	f040 8555 	bne.w	801e1f8 <_strtod_l+0xb28>
 801d74e:	9b08      	ldr	r3, [sp, #32]
 801d750:	ec49 8b10 	vmov	d0, r8, r9
 801d754:	b1cb      	cbz	r3, 801d78a <_strtod_l+0xba>
 801d756:	eeb1 0b40 	vneg.f64	d0, d0
 801d75a:	b017      	add	sp, #92	; 0x5c
 801d75c:	ecbd 8b0e 	vpop	{d8-d14}
 801d760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d764:	2920      	cmp	r1, #32
 801d766:	d1cd      	bne.n	801d704 <_strtod_l+0x34>
 801d768:	3201      	adds	r2, #1
 801d76a:	e7c0      	b.n	801d6ee <_strtod_l+0x1e>
 801d76c:	292d      	cmp	r1, #45	; 0x2d
 801d76e:	d1c9      	bne.n	801d704 <_strtod_l+0x34>
 801d770:	2101      	movs	r1, #1
 801d772:	9108      	str	r1, [sp, #32]
 801d774:	1c51      	adds	r1, r2, #1
 801d776:	9111      	str	r1, [sp, #68]	; 0x44
 801d778:	7852      	ldrb	r2, [r2, #1]
 801d77a:	2a00      	cmp	r2, #0
 801d77c:	d1c4      	bne.n	801d708 <_strtod_l+0x38>
 801d77e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d780:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801d784:	2b00      	cmp	r3, #0
 801d786:	f040 8535 	bne.w	801e1f4 <_strtod_l+0xb24>
 801d78a:	ec49 8b10 	vmov	d0, r8, r9
 801d78e:	e7e4      	b.n	801d75a <_strtod_l+0x8a>
 801d790:	2100      	movs	r1, #0
 801d792:	e7ee      	b.n	801d772 <_strtod_l+0xa2>
 801d794:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d796:	b13a      	cbz	r2, 801d7a8 <_strtod_l+0xd8>
 801d798:	2135      	movs	r1, #53	; 0x35
 801d79a:	a814      	add	r0, sp, #80	; 0x50
 801d79c:	f7ff ff3a 	bl	801d614 <__copybits>
 801d7a0:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d7a2:	4620      	mov	r0, r4
 801d7a4:	f7ff fb10 	bl	801cdc8 <_Bfree>
 801d7a8:	1e7b      	subs	r3, r7, #1
 801d7aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d7ac:	2b04      	cmp	r3, #4
 801d7ae:	d806      	bhi.n	801d7be <_strtod_l+0xee>
 801d7b0:	e8df f003 	tbb	[pc, r3]
 801d7b4:	201d0314 	.word	0x201d0314
 801d7b8:	14          	.byte	0x14
 801d7b9:	00          	.byte	0x00
 801d7ba:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 801d7be:	05eb      	lsls	r3, r5, #23
 801d7c0:	bf48      	it	mi
 801d7c2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801d7c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801d7ca:	0d1b      	lsrs	r3, r3, #20
 801d7cc:	051b      	lsls	r3, r3, #20
 801d7ce:	2b00      	cmp	r3, #0
 801d7d0:	d1b9      	bne.n	801d746 <_strtod_l+0x76>
 801d7d2:	f7fe fb79 	bl	801bec8 <__errno>
 801d7d6:	2322      	movs	r3, #34	; 0x22
 801d7d8:	6003      	str	r3, [r0, #0]
 801d7da:	e7b4      	b.n	801d746 <_strtod_l+0x76>
 801d7dc:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 801d7e0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801d7e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801d7e8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801d7ec:	e7e7      	b.n	801d7be <_strtod_l+0xee>
 801d7ee:	f8df 9184 	ldr.w	r9, [pc, #388]	; 801d974 <_strtod_l+0x2a4>
 801d7f2:	e7e4      	b.n	801d7be <_strtod_l+0xee>
 801d7f4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801d7f8:	f04f 38ff 	mov.w	r8, #4294967295
 801d7fc:	e7df      	b.n	801d7be <_strtod_l+0xee>
 801d7fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d800:	1c5a      	adds	r2, r3, #1
 801d802:	9211      	str	r2, [sp, #68]	; 0x44
 801d804:	785b      	ldrb	r3, [r3, #1]
 801d806:	2b30      	cmp	r3, #48	; 0x30
 801d808:	d0f9      	beq.n	801d7fe <_strtod_l+0x12e>
 801d80a:	2b00      	cmp	r3, #0
 801d80c:	d09b      	beq.n	801d746 <_strtod_l+0x76>
 801d80e:	2301      	movs	r3, #1
 801d810:	9306      	str	r3, [sp, #24]
 801d812:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d814:	9309      	str	r3, [sp, #36]	; 0x24
 801d816:	2300      	movs	r3, #0
 801d818:	9305      	str	r3, [sp, #20]
 801d81a:	9307      	str	r3, [sp, #28]
 801d81c:	461e      	mov	r6, r3
 801d81e:	220a      	movs	r2, #10
 801d820:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d822:	7805      	ldrb	r5, [r0, #0]
 801d824:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 801d828:	b2d9      	uxtb	r1, r3
 801d82a:	2909      	cmp	r1, #9
 801d82c:	d92b      	bls.n	801d886 <_strtod_l+0x1b6>
 801d82e:	4950      	ldr	r1, [pc, #320]	; (801d970 <_strtod_l+0x2a0>)
 801d830:	2201      	movs	r2, #1
 801d832:	f001 fb3c 	bl	801eeae <strncmp>
 801d836:	2800      	cmp	r0, #0
 801d838:	d035      	beq.n	801d8a6 <_strtod_l+0x1d6>
 801d83a:	2000      	movs	r0, #0
 801d83c:	462a      	mov	r2, r5
 801d83e:	4633      	mov	r3, r6
 801d840:	4683      	mov	fp, r0
 801d842:	4601      	mov	r1, r0
 801d844:	2a65      	cmp	r2, #101	; 0x65
 801d846:	d001      	beq.n	801d84c <_strtod_l+0x17c>
 801d848:	2a45      	cmp	r2, #69	; 0x45
 801d84a:	d118      	bne.n	801d87e <_strtod_l+0x1ae>
 801d84c:	b91b      	cbnz	r3, 801d856 <_strtod_l+0x186>
 801d84e:	9b06      	ldr	r3, [sp, #24]
 801d850:	4303      	orrs	r3, r0
 801d852:	d094      	beq.n	801d77e <_strtod_l+0xae>
 801d854:	2300      	movs	r3, #0
 801d856:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 801d85a:	f10a 0201 	add.w	r2, sl, #1
 801d85e:	9211      	str	r2, [sp, #68]	; 0x44
 801d860:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801d864:	2a2b      	cmp	r2, #43	; 0x2b
 801d866:	d075      	beq.n	801d954 <_strtod_l+0x284>
 801d868:	2a2d      	cmp	r2, #45	; 0x2d
 801d86a:	d07b      	beq.n	801d964 <_strtod_l+0x294>
 801d86c:	f04f 0e00 	mov.w	lr, #0
 801d870:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801d874:	2d09      	cmp	r5, #9
 801d876:	f240 8083 	bls.w	801d980 <_strtod_l+0x2b0>
 801d87a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801d87e:	2500      	movs	r5, #0
 801d880:	e09e      	b.n	801d9c0 <_strtod_l+0x2f0>
 801d882:	2300      	movs	r3, #0
 801d884:	e7c4      	b.n	801d810 <_strtod_l+0x140>
 801d886:	2e08      	cmp	r6, #8
 801d888:	bfd5      	itete	le
 801d88a:	9907      	ldrle	r1, [sp, #28]
 801d88c:	9905      	ldrgt	r1, [sp, #20]
 801d88e:	fb02 3301 	mlale	r3, r2, r1, r3
 801d892:	fb02 3301 	mlagt	r3, r2, r1, r3
 801d896:	f100 0001 	add.w	r0, r0, #1
 801d89a:	bfd4      	ite	le
 801d89c:	9307      	strle	r3, [sp, #28]
 801d89e:	9305      	strgt	r3, [sp, #20]
 801d8a0:	3601      	adds	r6, #1
 801d8a2:	9011      	str	r0, [sp, #68]	; 0x44
 801d8a4:	e7bc      	b.n	801d820 <_strtod_l+0x150>
 801d8a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d8a8:	1c5a      	adds	r2, r3, #1
 801d8aa:	9211      	str	r2, [sp, #68]	; 0x44
 801d8ac:	785a      	ldrb	r2, [r3, #1]
 801d8ae:	b3ae      	cbz	r6, 801d91c <_strtod_l+0x24c>
 801d8b0:	4683      	mov	fp, r0
 801d8b2:	4633      	mov	r3, r6
 801d8b4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801d8b8:	2909      	cmp	r1, #9
 801d8ba:	d912      	bls.n	801d8e2 <_strtod_l+0x212>
 801d8bc:	2101      	movs	r1, #1
 801d8be:	e7c1      	b.n	801d844 <_strtod_l+0x174>
 801d8c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d8c2:	1c5a      	adds	r2, r3, #1
 801d8c4:	9211      	str	r2, [sp, #68]	; 0x44
 801d8c6:	785a      	ldrb	r2, [r3, #1]
 801d8c8:	3001      	adds	r0, #1
 801d8ca:	2a30      	cmp	r2, #48	; 0x30
 801d8cc:	d0f8      	beq.n	801d8c0 <_strtod_l+0x1f0>
 801d8ce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801d8d2:	2b08      	cmp	r3, #8
 801d8d4:	f200 8495 	bhi.w	801e202 <_strtod_l+0xb32>
 801d8d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d8da:	9309      	str	r3, [sp, #36]	; 0x24
 801d8dc:	4683      	mov	fp, r0
 801d8de:	2000      	movs	r0, #0
 801d8e0:	4603      	mov	r3, r0
 801d8e2:	3a30      	subs	r2, #48	; 0x30
 801d8e4:	f100 0101 	add.w	r1, r0, #1
 801d8e8:	d012      	beq.n	801d910 <_strtod_l+0x240>
 801d8ea:	448b      	add	fp, r1
 801d8ec:	eb00 0c03 	add.w	ip, r0, r3
 801d8f0:	4619      	mov	r1, r3
 801d8f2:	250a      	movs	r5, #10
 801d8f4:	4561      	cmp	r1, ip
 801d8f6:	d113      	bne.n	801d920 <_strtod_l+0x250>
 801d8f8:	1819      	adds	r1, r3, r0
 801d8fa:	2908      	cmp	r1, #8
 801d8fc:	f103 0301 	add.w	r3, r3, #1
 801d900:	4403      	add	r3, r0
 801d902:	dc1b      	bgt.n	801d93c <_strtod_l+0x26c>
 801d904:	9807      	ldr	r0, [sp, #28]
 801d906:	210a      	movs	r1, #10
 801d908:	fb01 2200 	mla	r2, r1, r0, r2
 801d90c:	9207      	str	r2, [sp, #28]
 801d90e:	2100      	movs	r1, #0
 801d910:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d912:	1c50      	adds	r0, r2, #1
 801d914:	9011      	str	r0, [sp, #68]	; 0x44
 801d916:	7852      	ldrb	r2, [r2, #1]
 801d918:	4608      	mov	r0, r1
 801d91a:	e7cb      	b.n	801d8b4 <_strtod_l+0x1e4>
 801d91c:	4630      	mov	r0, r6
 801d91e:	e7d4      	b.n	801d8ca <_strtod_l+0x1fa>
 801d920:	2908      	cmp	r1, #8
 801d922:	f101 0101 	add.w	r1, r1, #1
 801d926:	dc03      	bgt.n	801d930 <_strtod_l+0x260>
 801d928:	9f07      	ldr	r7, [sp, #28]
 801d92a:	436f      	muls	r7, r5
 801d92c:	9707      	str	r7, [sp, #28]
 801d92e:	e7e1      	b.n	801d8f4 <_strtod_l+0x224>
 801d930:	2910      	cmp	r1, #16
 801d932:	bfde      	ittt	le
 801d934:	9f05      	ldrle	r7, [sp, #20]
 801d936:	436f      	mulle	r7, r5
 801d938:	9705      	strle	r7, [sp, #20]
 801d93a:	e7db      	b.n	801d8f4 <_strtod_l+0x224>
 801d93c:	2b10      	cmp	r3, #16
 801d93e:	bfdf      	itttt	le
 801d940:	9805      	ldrle	r0, [sp, #20]
 801d942:	210a      	movle	r1, #10
 801d944:	fb01 2200 	mlale	r2, r1, r0, r2
 801d948:	9205      	strle	r2, [sp, #20]
 801d94a:	e7e0      	b.n	801d90e <_strtod_l+0x23e>
 801d94c:	f04f 0b00 	mov.w	fp, #0
 801d950:	2101      	movs	r1, #1
 801d952:	e77c      	b.n	801d84e <_strtod_l+0x17e>
 801d954:	f04f 0e00 	mov.w	lr, #0
 801d958:	f10a 0202 	add.w	r2, sl, #2
 801d95c:	9211      	str	r2, [sp, #68]	; 0x44
 801d95e:	f89a 2002 	ldrb.w	r2, [sl, #2]
 801d962:	e785      	b.n	801d870 <_strtod_l+0x1a0>
 801d964:	f04f 0e01 	mov.w	lr, #1
 801d968:	e7f6      	b.n	801d958 <_strtod_l+0x288>
 801d96a:	bf00      	nop
 801d96c:	080206f8 	.word	0x080206f8
 801d970:	080206f4 	.word	0x080206f4
 801d974:	7ff00000 	.word	0x7ff00000
 801d978:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d97a:	1c55      	adds	r5, r2, #1
 801d97c:	9511      	str	r5, [sp, #68]	; 0x44
 801d97e:	7852      	ldrb	r2, [r2, #1]
 801d980:	2a30      	cmp	r2, #48	; 0x30
 801d982:	d0f9      	beq.n	801d978 <_strtod_l+0x2a8>
 801d984:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 801d988:	2d08      	cmp	r5, #8
 801d98a:	f63f af78 	bhi.w	801d87e <_strtod_l+0x1ae>
 801d98e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801d992:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d994:	920a      	str	r2, [sp, #40]	; 0x28
 801d996:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d998:	1c55      	adds	r5, r2, #1
 801d99a:	9511      	str	r5, [sp, #68]	; 0x44
 801d99c:	7852      	ldrb	r2, [r2, #1]
 801d99e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801d9a2:	2f09      	cmp	r7, #9
 801d9a4:	d937      	bls.n	801da16 <_strtod_l+0x346>
 801d9a6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801d9a8:	1bed      	subs	r5, r5, r7
 801d9aa:	2d08      	cmp	r5, #8
 801d9ac:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801d9b0:	dc02      	bgt.n	801d9b8 <_strtod_l+0x2e8>
 801d9b2:	4565      	cmp	r5, ip
 801d9b4:	bfa8      	it	ge
 801d9b6:	4665      	movge	r5, ip
 801d9b8:	f1be 0f00 	cmp.w	lr, #0
 801d9bc:	d000      	beq.n	801d9c0 <_strtod_l+0x2f0>
 801d9be:	426d      	negs	r5, r5
 801d9c0:	2b00      	cmp	r3, #0
 801d9c2:	d14d      	bne.n	801da60 <_strtod_l+0x390>
 801d9c4:	9b06      	ldr	r3, [sp, #24]
 801d9c6:	4303      	orrs	r3, r0
 801d9c8:	f47f aebd 	bne.w	801d746 <_strtod_l+0x76>
 801d9cc:	2900      	cmp	r1, #0
 801d9ce:	f47f aed6 	bne.w	801d77e <_strtod_l+0xae>
 801d9d2:	2a69      	cmp	r2, #105	; 0x69
 801d9d4:	d027      	beq.n	801da26 <_strtod_l+0x356>
 801d9d6:	dc24      	bgt.n	801da22 <_strtod_l+0x352>
 801d9d8:	2a49      	cmp	r2, #73	; 0x49
 801d9da:	d024      	beq.n	801da26 <_strtod_l+0x356>
 801d9dc:	2a4e      	cmp	r2, #78	; 0x4e
 801d9de:	f47f aece 	bne.w	801d77e <_strtod_l+0xae>
 801d9e2:	4995      	ldr	r1, [pc, #596]	; (801dc38 <_strtod_l+0x568>)
 801d9e4:	a811      	add	r0, sp, #68	; 0x44
 801d9e6:	f001 fd6b 	bl	801f4c0 <__match>
 801d9ea:	2800      	cmp	r0, #0
 801d9ec:	f43f aec7 	beq.w	801d77e <_strtod_l+0xae>
 801d9f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d9f2:	781b      	ldrb	r3, [r3, #0]
 801d9f4:	2b28      	cmp	r3, #40	; 0x28
 801d9f6:	d12d      	bne.n	801da54 <_strtod_l+0x384>
 801d9f8:	4990      	ldr	r1, [pc, #576]	; (801dc3c <_strtod_l+0x56c>)
 801d9fa:	aa14      	add	r2, sp, #80	; 0x50
 801d9fc:	a811      	add	r0, sp, #68	; 0x44
 801d9fe:	f001 fd73 	bl	801f4e8 <__hexnan>
 801da02:	2805      	cmp	r0, #5
 801da04:	d126      	bne.n	801da54 <_strtod_l+0x384>
 801da06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801da08:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801da0c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801da10:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801da14:	e697      	b.n	801d746 <_strtod_l+0x76>
 801da16:	250a      	movs	r5, #10
 801da18:	fb05 2c0c 	mla	ip, r5, ip, r2
 801da1c:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 801da20:	e7b9      	b.n	801d996 <_strtod_l+0x2c6>
 801da22:	2a6e      	cmp	r2, #110	; 0x6e
 801da24:	e7db      	b.n	801d9de <_strtod_l+0x30e>
 801da26:	4986      	ldr	r1, [pc, #536]	; (801dc40 <_strtod_l+0x570>)
 801da28:	a811      	add	r0, sp, #68	; 0x44
 801da2a:	f001 fd49 	bl	801f4c0 <__match>
 801da2e:	2800      	cmp	r0, #0
 801da30:	f43f aea5 	beq.w	801d77e <_strtod_l+0xae>
 801da34:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801da36:	4983      	ldr	r1, [pc, #524]	; (801dc44 <_strtod_l+0x574>)
 801da38:	3b01      	subs	r3, #1
 801da3a:	a811      	add	r0, sp, #68	; 0x44
 801da3c:	9311      	str	r3, [sp, #68]	; 0x44
 801da3e:	f001 fd3f 	bl	801f4c0 <__match>
 801da42:	b910      	cbnz	r0, 801da4a <_strtod_l+0x37a>
 801da44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801da46:	3301      	adds	r3, #1
 801da48:	9311      	str	r3, [sp, #68]	; 0x44
 801da4a:	f8df 920c 	ldr.w	r9, [pc, #524]	; 801dc58 <_strtod_l+0x588>
 801da4e:	f04f 0800 	mov.w	r8, #0
 801da52:	e678      	b.n	801d746 <_strtod_l+0x76>
 801da54:	487c      	ldr	r0, [pc, #496]	; (801dc48 <_strtod_l+0x578>)
 801da56:	f001 fa4f 	bl	801eef8 <nan>
 801da5a:	ec59 8b10 	vmov	r8, r9, d0
 801da5e:	e672      	b.n	801d746 <_strtod_l+0x76>
 801da60:	eddd 7a07 	vldr	s15, [sp, #28]
 801da64:	eba5 020b 	sub.w	r2, r5, fp
 801da68:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801da6c:	2e00      	cmp	r6, #0
 801da6e:	bf08      	it	eq
 801da70:	461e      	moveq	r6, r3
 801da72:	2b10      	cmp	r3, #16
 801da74:	9206      	str	r2, [sp, #24]
 801da76:	461a      	mov	r2, r3
 801da78:	bfa8      	it	ge
 801da7a:	2210      	movge	r2, #16
 801da7c:	2b09      	cmp	r3, #9
 801da7e:	ec59 8b17 	vmov	r8, r9, d7
 801da82:	dd0c      	ble.n	801da9e <_strtod_l+0x3ce>
 801da84:	4971      	ldr	r1, [pc, #452]	; (801dc4c <_strtod_l+0x57c>)
 801da86:	eddd 6a05 	vldr	s13, [sp, #20]
 801da8a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801da8e:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 801da92:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801da96:	eea7 6b05 	vfma.f64	d6, d7, d5
 801da9a:	ec59 8b16 	vmov	r8, r9, d6
 801da9e:	2b0f      	cmp	r3, #15
 801daa0:	dc37      	bgt.n	801db12 <_strtod_l+0x442>
 801daa2:	9906      	ldr	r1, [sp, #24]
 801daa4:	2900      	cmp	r1, #0
 801daa6:	f43f ae4e 	beq.w	801d746 <_strtod_l+0x76>
 801daaa:	dd23      	ble.n	801daf4 <_strtod_l+0x424>
 801daac:	2916      	cmp	r1, #22
 801daae:	dc0b      	bgt.n	801dac8 <_strtod_l+0x3f8>
 801dab0:	4b66      	ldr	r3, [pc, #408]	; (801dc4c <_strtod_l+0x57c>)
 801dab2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801dab6:	ed93 7b00 	vldr	d7, [r3]
 801daba:	ec49 8b16 	vmov	d6, r8, r9
 801dabe:	ee27 7b06 	vmul.f64	d7, d7, d6
 801dac2:	ec59 8b17 	vmov	r8, r9, d7
 801dac6:	e63e      	b.n	801d746 <_strtod_l+0x76>
 801dac8:	9806      	ldr	r0, [sp, #24]
 801daca:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801dace:	4281      	cmp	r1, r0
 801dad0:	db1f      	blt.n	801db12 <_strtod_l+0x442>
 801dad2:	4a5e      	ldr	r2, [pc, #376]	; (801dc4c <_strtod_l+0x57c>)
 801dad4:	f1c3 030f 	rsb	r3, r3, #15
 801dad8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801dadc:	ed91 7b00 	vldr	d7, [r1]
 801dae0:	ec49 8b16 	vmov	d6, r8, r9
 801dae4:	1ac3      	subs	r3, r0, r3
 801dae6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801daea:	ee27 7b06 	vmul.f64	d7, d7, d6
 801daee:	ed92 6b00 	vldr	d6, [r2]
 801daf2:	e7e4      	b.n	801dabe <_strtod_l+0x3ee>
 801daf4:	9906      	ldr	r1, [sp, #24]
 801daf6:	3116      	adds	r1, #22
 801daf8:	db0b      	blt.n	801db12 <_strtod_l+0x442>
 801dafa:	4b54      	ldr	r3, [pc, #336]	; (801dc4c <_strtod_l+0x57c>)
 801dafc:	ebab 0505 	sub.w	r5, fp, r5
 801db00:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801db04:	ed95 7b00 	vldr	d7, [r5]
 801db08:	ec49 8b16 	vmov	d6, r8, r9
 801db0c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801db10:	e7d7      	b.n	801dac2 <_strtod_l+0x3f2>
 801db12:	9906      	ldr	r1, [sp, #24]
 801db14:	1a9a      	subs	r2, r3, r2
 801db16:	440a      	add	r2, r1
 801db18:	2a00      	cmp	r2, #0
 801db1a:	dd6e      	ble.n	801dbfa <_strtod_l+0x52a>
 801db1c:	f012 000f 	ands.w	r0, r2, #15
 801db20:	d00a      	beq.n	801db38 <_strtod_l+0x468>
 801db22:	494a      	ldr	r1, [pc, #296]	; (801dc4c <_strtod_l+0x57c>)
 801db24:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801db28:	ed91 7b00 	vldr	d7, [r1]
 801db2c:	ec49 8b16 	vmov	d6, r8, r9
 801db30:	ee27 7b06 	vmul.f64	d7, d7, d6
 801db34:	ec59 8b17 	vmov	r8, r9, d7
 801db38:	f032 020f 	bics.w	r2, r2, #15
 801db3c:	d04e      	beq.n	801dbdc <_strtod_l+0x50c>
 801db3e:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801db42:	dd22      	ble.n	801db8a <_strtod_l+0x4ba>
 801db44:	2500      	movs	r5, #0
 801db46:	462e      	mov	r6, r5
 801db48:	9507      	str	r5, [sp, #28]
 801db4a:	462f      	mov	r7, r5
 801db4c:	2322      	movs	r3, #34	; 0x22
 801db4e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801dc58 <_strtod_l+0x588>
 801db52:	6023      	str	r3, [r4, #0]
 801db54:	f04f 0800 	mov.w	r8, #0
 801db58:	9b07      	ldr	r3, [sp, #28]
 801db5a:	2b00      	cmp	r3, #0
 801db5c:	f43f adf3 	beq.w	801d746 <_strtod_l+0x76>
 801db60:	9912      	ldr	r1, [sp, #72]	; 0x48
 801db62:	4620      	mov	r0, r4
 801db64:	f7ff f930 	bl	801cdc8 <_Bfree>
 801db68:	4639      	mov	r1, r7
 801db6a:	4620      	mov	r0, r4
 801db6c:	f7ff f92c 	bl	801cdc8 <_Bfree>
 801db70:	4631      	mov	r1, r6
 801db72:	4620      	mov	r0, r4
 801db74:	f7ff f928 	bl	801cdc8 <_Bfree>
 801db78:	9907      	ldr	r1, [sp, #28]
 801db7a:	4620      	mov	r0, r4
 801db7c:	f7ff f924 	bl	801cdc8 <_Bfree>
 801db80:	4629      	mov	r1, r5
 801db82:	4620      	mov	r0, r4
 801db84:	f7ff f920 	bl	801cdc8 <_Bfree>
 801db88:	e5dd      	b.n	801d746 <_strtod_l+0x76>
 801db8a:	2000      	movs	r0, #0
 801db8c:	ec49 8b17 	vmov	d7, r8, r9
 801db90:	4f2f      	ldr	r7, [pc, #188]	; (801dc50 <_strtod_l+0x580>)
 801db92:	1112      	asrs	r2, r2, #4
 801db94:	4601      	mov	r1, r0
 801db96:	2a01      	cmp	r2, #1
 801db98:	dc23      	bgt.n	801dbe2 <_strtod_l+0x512>
 801db9a:	b108      	cbz	r0, 801dba0 <_strtod_l+0x4d0>
 801db9c:	ec59 8b17 	vmov	r8, r9, d7
 801dba0:	4a2b      	ldr	r2, [pc, #172]	; (801dc50 <_strtod_l+0x580>)
 801dba2:	482c      	ldr	r0, [pc, #176]	; (801dc54 <_strtod_l+0x584>)
 801dba4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801dba8:	ed92 7b00 	vldr	d7, [r2]
 801dbac:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801dbb0:	ec49 8b16 	vmov	d6, r8, r9
 801dbb4:	4a28      	ldr	r2, [pc, #160]	; (801dc58 <_strtod_l+0x588>)
 801dbb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801dbba:	ee17 1a90 	vmov	r1, s15
 801dbbe:	400a      	ands	r2, r1
 801dbc0:	4282      	cmp	r2, r0
 801dbc2:	ec59 8b17 	vmov	r8, r9, d7
 801dbc6:	d8bd      	bhi.n	801db44 <_strtod_l+0x474>
 801dbc8:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801dbcc:	4282      	cmp	r2, r0
 801dbce:	bf86      	itte	hi
 801dbd0:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 801dc5c <_strtod_l+0x58c>
 801dbd4:	f04f 38ff 	movhi.w	r8, #4294967295
 801dbd8:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801dbdc:	2200      	movs	r2, #0
 801dbde:	9205      	str	r2, [sp, #20]
 801dbe0:	e076      	b.n	801dcd0 <_strtod_l+0x600>
 801dbe2:	f012 0f01 	tst.w	r2, #1
 801dbe6:	d004      	beq.n	801dbf2 <_strtod_l+0x522>
 801dbe8:	ed97 6b00 	vldr	d6, [r7]
 801dbec:	2001      	movs	r0, #1
 801dbee:	ee27 7b06 	vmul.f64	d7, d7, d6
 801dbf2:	3101      	adds	r1, #1
 801dbf4:	1052      	asrs	r2, r2, #1
 801dbf6:	3708      	adds	r7, #8
 801dbf8:	e7cd      	b.n	801db96 <_strtod_l+0x4c6>
 801dbfa:	d0ef      	beq.n	801dbdc <_strtod_l+0x50c>
 801dbfc:	4252      	negs	r2, r2
 801dbfe:	f012 000f 	ands.w	r0, r2, #15
 801dc02:	d00a      	beq.n	801dc1a <_strtod_l+0x54a>
 801dc04:	4911      	ldr	r1, [pc, #68]	; (801dc4c <_strtod_l+0x57c>)
 801dc06:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801dc0a:	ed91 7b00 	vldr	d7, [r1]
 801dc0e:	ec49 8b16 	vmov	d6, r8, r9
 801dc12:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801dc16:	ec59 8b17 	vmov	r8, r9, d7
 801dc1a:	1112      	asrs	r2, r2, #4
 801dc1c:	d0de      	beq.n	801dbdc <_strtod_l+0x50c>
 801dc1e:	2a1f      	cmp	r2, #31
 801dc20:	dd1e      	ble.n	801dc60 <_strtod_l+0x590>
 801dc22:	2500      	movs	r5, #0
 801dc24:	462e      	mov	r6, r5
 801dc26:	9507      	str	r5, [sp, #28]
 801dc28:	462f      	mov	r7, r5
 801dc2a:	2322      	movs	r3, #34	; 0x22
 801dc2c:	f04f 0800 	mov.w	r8, #0
 801dc30:	f04f 0900 	mov.w	r9, #0
 801dc34:	6023      	str	r3, [r4, #0]
 801dc36:	e78f      	b.n	801db58 <_strtod_l+0x488>
 801dc38:	080204e1 	.word	0x080204e1
 801dc3c:	0802070c 	.word	0x0802070c
 801dc40:	080204d9 	.word	0x080204d9
 801dc44:	0802050e 	.word	0x0802050e
 801dc48:	080208b8 	.word	0x080208b8
 801dc4c:	08020620 	.word	0x08020620
 801dc50:	080205f8 	.word	0x080205f8
 801dc54:	7ca00000 	.word	0x7ca00000
 801dc58:	7ff00000 	.word	0x7ff00000
 801dc5c:	7fefffff 	.word	0x7fefffff
 801dc60:	f012 0110 	ands.w	r1, r2, #16
 801dc64:	bf18      	it	ne
 801dc66:	216a      	movne	r1, #106	; 0x6a
 801dc68:	9105      	str	r1, [sp, #20]
 801dc6a:	ec49 8b17 	vmov	d7, r8, r9
 801dc6e:	49be      	ldr	r1, [pc, #760]	; (801df68 <_strtod_l+0x898>)
 801dc70:	2000      	movs	r0, #0
 801dc72:	07d7      	lsls	r7, r2, #31
 801dc74:	d504      	bpl.n	801dc80 <_strtod_l+0x5b0>
 801dc76:	ed91 6b00 	vldr	d6, [r1]
 801dc7a:	2001      	movs	r0, #1
 801dc7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 801dc80:	1052      	asrs	r2, r2, #1
 801dc82:	f101 0108 	add.w	r1, r1, #8
 801dc86:	d1f4      	bne.n	801dc72 <_strtod_l+0x5a2>
 801dc88:	b108      	cbz	r0, 801dc8e <_strtod_l+0x5be>
 801dc8a:	ec59 8b17 	vmov	r8, r9, d7
 801dc8e:	9a05      	ldr	r2, [sp, #20]
 801dc90:	b1ba      	cbz	r2, 801dcc2 <_strtod_l+0x5f2>
 801dc92:	f3c9 510a 	ubfx	r1, r9, #20, #11
 801dc96:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 801dc9a:	2a00      	cmp	r2, #0
 801dc9c:	4648      	mov	r0, r9
 801dc9e:	dd10      	ble.n	801dcc2 <_strtod_l+0x5f2>
 801dca0:	2a1f      	cmp	r2, #31
 801dca2:	f340 812c 	ble.w	801defe <_strtod_l+0x82e>
 801dca6:	2a34      	cmp	r2, #52	; 0x34
 801dca8:	bfde      	ittt	le
 801dcaa:	f04f 32ff 	movle.w	r2, #4294967295
 801dcae:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801dcb2:	408a      	lslle	r2, r1
 801dcb4:	f04f 0800 	mov.w	r8, #0
 801dcb8:	bfcc      	ite	gt
 801dcba:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801dcbe:	ea02 0900 	andle.w	r9, r2, r0
 801dcc2:	ec49 8b17 	vmov	d7, r8, r9
 801dcc6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801dcca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dcce:	d0a8      	beq.n	801dc22 <_strtod_l+0x552>
 801dcd0:	9a07      	ldr	r2, [sp, #28]
 801dcd2:	9200      	str	r2, [sp, #0]
 801dcd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801dcd6:	4632      	mov	r2, r6
 801dcd8:	4620      	mov	r0, r4
 801dcda:	f7ff f8dd 	bl	801ce98 <__s2b>
 801dcde:	9007      	str	r0, [sp, #28]
 801dce0:	2800      	cmp	r0, #0
 801dce2:	f43f af2f 	beq.w	801db44 <_strtod_l+0x474>
 801dce6:	9a06      	ldr	r2, [sp, #24]
 801dce8:	2a00      	cmp	r2, #0
 801dcea:	ebab 0305 	sub.w	r3, fp, r5
 801dcee:	ed9f 9b96 	vldr	d9, [pc, #600]	; 801df48 <_strtod_l+0x878>
 801dcf2:	bfa8      	it	ge
 801dcf4:	2300      	movge	r3, #0
 801dcf6:	ed9f ab96 	vldr	d10, [pc, #600]	; 801df50 <_strtod_l+0x880>
 801dcfa:	ed9f bb97 	vldr	d11, [pc, #604]	; 801df58 <_strtod_l+0x888>
 801dcfe:	9309      	str	r3, [sp, #36]	; 0x24
 801dd00:	2500      	movs	r5, #0
 801dd02:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801dd06:	930c      	str	r3, [sp, #48]	; 0x30
 801dd08:	462e      	mov	r6, r5
 801dd0a:	9b07      	ldr	r3, [sp, #28]
 801dd0c:	4620      	mov	r0, r4
 801dd0e:	6859      	ldr	r1, [r3, #4]
 801dd10:	f7ff f81a 	bl	801cd48 <_Balloc>
 801dd14:	4607      	mov	r7, r0
 801dd16:	2800      	cmp	r0, #0
 801dd18:	f43f af18 	beq.w	801db4c <_strtod_l+0x47c>
 801dd1c:	9b07      	ldr	r3, [sp, #28]
 801dd1e:	691a      	ldr	r2, [r3, #16]
 801dd20:	3202      	adds	r2, #2
 801dd22:	f103 010c 	add.w	r1, r3, #12
 801dd26:	0092      	lsls	r2, r2, #2
 801dd28:	300c      	adds	r0, #12
 801dd2a:	f7fe f902 	bl	801bf32 <memcpy>
 801dd2e:	ec49 8b10 	vmov	d0, r8, r9
 801dd32:	aa14      	add	r2, sp, #80	; 0x50
 801dd34:	a913      	add	r1, sp, #76	; 0x4c
 801dd36:	4620      	mov	r0, r4
 801dd38:	f7ff fbe2 	bl	801d500 <__d2b>
 801dd3c:	ec49 8b18 	vmov	d8, r8, r9
 801dd40:	9012      	str	r0, [sp, #72]	; 0x48
 801dd42:	2800      	cmp	r0, #0
 801dd44:	f43f af02 	beq.w	801db4c <_strtod_l+0x47c>
 801dd48:	2101      	movs	r1, #1
 801dd4a:	4620      	mov	r0, r4
 801dd4c:	f7ff f93c 	bl	801cfc8 <__i2b>
 801dd50:	4606      	mov	r6, r0
 801dd52:	2800      	cmp	r0, #0
 801dd54:	f43f aefa 	beq.w	801db4c <_strtod_l+0x47c>
 801dd58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801dd5a:	9914      	ldr	r1, [sp, #80]	; 0x50
 801dd5c:	2b00      	cmp	r3, #0
 801dd5e:	bfab      	itete	ge
 801dd60:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 801dd62:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 801dd64:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 801dd68:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 801dd6c:	bfac      	ite	ge
 801dd6e:	eb03 0b02 	addge.w	fp, r3, r2
 801dd72:	eba2 0a03 	sublt.w	sl, r2, r3
 801dd76:	9a05      	ldr	r2, [sp, #20]
 801dd78:	1a9b      	subs	r3, r3, r2
 801dd7a:	440b      	add	r3, r1
 801dd7c:	4a7b      	ldr	r2, [pc, #492]	; (801df6c <_strtod_l+0x89c>)
 801dd7e:	3b01      	subs	r3, #1
 801dd80:	4293      	cmp	r3, r2
 801dd82:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801dd86:	f280 80cd 	bge.w	801df24 <_strtod_l+0x854>
 801dd8a:	1ad2      	subs	r2, r2, r3
 801dd8c:	2a1f      	cmp	r2, #31
 801dd8e:	eba1 0102 	sub.w	r1, r1, r2
 801dd92:	f04f 0001 	mov.w	r0, #1
 801dd96:	f300 80b9 	bgt.w	801df0c <_strtod_l+0x83c>
 801dd9a:	fa00 f302 	lsl.w	r3, r0, r2
 801dd9e:	930b      	str	r3, [sp, #44]	; 0x2c
 801dda0:	2300      	movs	r3, #0
 801dda2:	930a      	str	r3, [sp, #40]	; 0x28
 801dda4:	eb0b 0301 	add.w	r3, fp, r1
 801dda8:	9a05      	ldr	r2, [sp, #20]
 801ddaa:	459b      	cmp	fp, r3
 801ddac:	448a      	add	sl, r1
 801ddae:	4492      	add	sl, r2
 801ddb0:	465a      	mov	r2, fp
 801ddb2:	bfa8      	it	ge
 801ddb4:	461a      	movge	r2, r3
 801ddb6:	4552      	cmp	r2, sl
 801ddb8:	bfa8      	it	ge
 801ddba:	4652      	movge	r2, sl
 801ddbc:	2a00      	cmp	r2, #0
 801ddbe:	bfc2      	ittt	gt
 801ddc0:	1a9b      	subgt	r3, r3, r2
 801ddc2:	ebaa 0a02 	subgt.w	sl, sl, r2
 801ddc6:	ebab 0b02 	subgt.w	fp, fp, r2
 801ddca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ddcc:	2a00      	cmp	r2, #0
 801ddce:	dd18      	ble.n	801de02 <_strtod_l+0x732>
 801ddd0:	4631      	mov	r1, r6
 801ddd2:	4620      	mov	r0, r4
 801ddd4:	930f      	str	r3, [sp, #60]	; 0x3c
 801ddd6:	f7ff f9b7 	bl	801d148 <__pow5mult>
 801ddda:	4606      	mov	r6, r0
 801dddc:	2800      	cmp	r0, #0
 801ddde:	f43f aeb5 	beq.w	801db4c <_strtod_l+0x47c>
 801dde2:	4601      	mov	r1, r0
 801dde4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dde6:	4620      	mov	r0, r4
 801dde8:	f7ff f904 	bl	801cff4 <__multiply>
 801ddec:	900e      	str	r0, [sp, #56]	; 0x38
 801ddee:	2800      	cmp	r0, #0
 801ddf0:	f43f aeac 	beq.w	801db4c <_strtod_l+0x47c>
 801ddf4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ddf6:	4620      	mov	r0, r4
 801ddf8:	f7fe ffe6 	bl	801cdc8 <_Bfree>
 801ddfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ddfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801de00:	9212      	str	r2, [sp, #72]	; 0x48
 801de02:	2b00      	cmp	r3, #0
 801de04:	f300 8093 	bgt.w	801df2e <_strtod_l+0x85e>
 801de08:	9b06      	ldr	r3, [sp, #24]
 801de0a:	2b00      	cmp	r3, #0
 801de0c:	dd08      	ble.n	801de20 <_strtod_l+0x750>
 801de0e:	4639      	mov	r1, r7
 801de10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801de12:	4620      	mov	r0, r4
 801de14:	f7ff f998 	bl	801d148 <__pow5mult>
 801de18:	4607      	mov	r7, r0
 801de1a:	2800      	cmp	r0, #0
 801de1c:	f43f ae96 	beq.w	801db4c <_strtod_l+0x47c>
 801de20:	f1ba 0f00 	cmp.w	sl, #0
 801de24:	dd08      	ble.n	801de38 <_strtod_l+0x768>
 801de26:	4639      	mov	r1, r7
 801de28:	4652      	mov	r2, sl
 801de2a:	4620      	mov	r0, r4
 801de2c:	f7ff f9e6 	bl	801d1fc <__lshift>
 801de30:	4607      	mov	r7, r0
 801de32:	2800      	cmp	r0, #0
 801de34:	f43f ae8a 	beq.w	801db4c <_strtod_l+0x47c>
 801de38:	f1bb 0f00 	cmp.w	fp, #0
 801de3c:	dd08      	ble.n	801de50 <_strtod_l+0x780>
 801de3e:	4631      	mov	r1, r6
 801de40:	465a      	mov	r2, fp
 801de42:	4620      	mov	r0, r4
 801de44:	f7ff f9da 	bl	801d1fc <__lshift>
 801de48:	4606      	mov	r6, r0
 801de4a:	2800      	cmp	r0, #0
 801de4c:	f43f ae7e 	beq.w	801db4c <_strtod_l+0x47c>
 801de50:	9912      	ldr	r1, [sp, #72]	; 0x48
 801de52:	463a      	mov	r2, r7
 801de54:	4620      	mov	r0, r4
 801de56:	f7ff fa59 	bl	801d30c <__mdiff>
 801de5a:	4605      	mov	r5, r0
 801de5c:	2800      	cmp	r0, #0
 801de5e:	f43f ae75 	beq.w	801db4c <_strtod_l+0x47c>
 801de62:	2300      	movs	r3, #0
 801de64:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801de68:	60c3      	str	r3, [r0, #12]
 801de6a:	4631      	mov	r1, r6
 801de6c:	f7ff fa32 	bl	801d2d4 <__mcmp>
 801de70:	2800      	cmp	r0, #0
 801de72:	da7f      	bge.n	801df74 <_strtod_l+0x8a4>
 801de74:	ea5a 0a08 	orrs.w	sl, sl, r8
 801de78:	f040 80a5 	bne.w	801dfc6 <_strtod_l+0x8f6>
 801de7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801de80:	2b00      	cmp	r3, #0
 801de82:	f040 80a0 	bne.w	801dfc6 <_strtod_l+0x8f6>
 801de86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801de8a:	0d1b      	lsrs	r3, r3, #20
 801de8c:	051b      	lsls	r3, r3, #20
 801de8e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801de92:	f240 8098 	bls.w	801dfc6 <_strtod_l+0x8f6>
 801de96:	696b      	ldr	r3, [r5, #20]
 801de98:	b91b      	cbnz	r3, 801dea2 <_strtod_l+0x7d2>
 801de9a:	692b      	ldr	r3, [r5, #16]
 801de9c:	2b01      	cmp	r3, #1
 801de9e:	f340 8092 	ble.w	801dfc6 <_strtod_l+0x8f6>
 801dea2:	4629      	mov	r1, r5
 801dea4:	2201      	movs	r2, #1
 801dea6:	4620      	mov	r0, r4
 801dea8:	f7ff f9a8 	bl	801d1fc <__lshift>
 801deac:	4631      	mov	r1, r6
 801deae:	4605      	mov	r5, r0
 801deb0:	f7ff fa10 	bl	801d2d4 <__mcmp>
 801deb4:	2800      	cmp	r0, #0
 801deb6:	f340 8086 	ble.w	801dfc6 <_strtod_l+0x8f6>
 801deba:	9905      	ldr	r1, [sp, #20]
 801debc:	4a2c      	ldr	r2, [pc, #176]	; (801df70 <_strtod_l+0x8a0>)
 801debe:	464b      	mov	r3, r9
 801dec0:	2900      	cmp	r1, #0
 801dec2:	f000 809f 	beq.w	801e004 <_strtod_l+0x934>
 801dec6:	ea02 0109 	and.w	r1, r2, r9
 801deca:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801dece:	f300 8099 	bgt.w	801e004 <_strtod_l+0x934>
 801ded2:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801ded6:	f77f aea8 	ble.w	801dc2a <_strtod_l+0x55a>
 801deda:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801df60 <_strtod_l+0x890>
 801dede:	ec49 8b16 	vmov	d6, r8, r9
 801dee2:	4b23      	ldr	r3, [pc, #140]	; (801df70 <_strtod_l+0x8a0>)
 801dee4:	ee26 7b07 	vmul.f64	d7, d6, d7
 801dee8:	ee17 2a90 	vmov	r2, s15
 801deec:	4013      	ands	r3, r2
 801deee:	ec59 8b17 	vmov	r8, r9, d7
 801def2:	2b00      	cmp	r3, #0
 801def4:	f47f ae34 	bne.w	801db60 <_strtod_l+0x490>
 801def8:	2322      	movs	r3, #34	; 0x22
 801defa:	6023      	str	r3, [r4, #0]
 801defc:	e630      	b.n	801db60 <_strtod_l+0x490>
 801defe:	f04f 31ff 	mov.w	r1, #4294967295
 801df02:	fa01 f202 	lsl.w	r2, r1, r2
 801df06:	ea02 0808 	and.w	r8, r2, r8
 801df0a:	e6da      	b.n	801dcc2 <_strtod_l+0x5f2>
 801df0c:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801df10:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801df14:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801df18:	33e2      	adds	r3, #226	; 0xe2
 801df1a:	fa00 f303 	lsl.w	r3, r0, r3
 801df1e:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 801df22:	e73f      	b.n	801dda4 <_strtod_l+0x6d4>
 801df24:	2200      	movs	r2, #0
 801df26:	2301      	movs	r3, #1
 801df28:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801df2c:	e73a      	b.n	801dda4 <_strtod_l+0x6d4>
 801df2e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801df30:	461a      	mov	r2, r3
 801df32:	4620      	mov	r0, r4
 801df34:	f7ff f962 	bl	801d1fc <__lshift>
 801df38:	9012      	str	r0, [sp, #72]	; 0x48
 801df3a:	2800      	cmp	r0, #0
 801df3c:	f47f af64 	bne.w	801de08 <_strtod_l+0x738>
 801df40:	e604      	b.n	801db4c <_strtod_l+0x47c>
 801df42:	bf00      	nop
 801df44:	f3af 8000 	nop.w
 801df48:	94a03595 	.word	0x94a03595
 801df4c:	3fcfffff 	.word	0x3fcfffff
 801df50:	94a03595 	.word	0x94a03595
 801df54:	3fdfffff 	.word	0x3fdfffff
 801df58:	35afe535 	.word	0x35afe535
 801df5c:	3fe00000 	.word	0x3fe00000
 801df60:	00000000 	.word	0x00000000
 801df64:	39500000 	.word	0x39500000
 801df68:	08020720 	.word	0x08020720
 801df6c:	fffffc02 	.word	0xfffffc02
 801df70:	7ff00000 	.word	0x7ff00000
 801df74:	46cb      	mov	fp, r9
 801df76:	d15f      	bne.n	801e038 <_strtod_l+0x968>
 801df78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801df7c:	f1ba 0f00 	cmp.w	sl, #0
 801df80:	d02a      	beq.n	801dfd8 <_strtod_l+0x908>
 801df82:	4aa7      	ldr	r2, [pc, #668]	; (801e220 <_strtod_l+0xb50>)
 801df84:	4293      	cmp	r3, r2
 801df86:	d12b      	bne.n	801dfe0 <_strtod_l+0x910>
 801df88:	9b05      	ldr	r3, [sp, #20]
 801df8a:	4642      	mov	r2, r8
 801df8c:	b1fb      	cbz	r3, 801dfce <_strtod_l+0x8fe>
 801df8e:	4ba5      	ldr	r3, [pc, #660]	; (801e224 <_strtod_l+0xb54>)
 801df90:	ea09 0303 	and.w	r3, r9, r3
 801df94:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801df98:	f04f 31ff 	mov.w	r1, #4294967295
 801df9c:	d81a      	bhi.n	801dfd4 <_strtod_l+0x904>
 801df9e:	0d1b      	lsrs	r3, r3, #20
 801dfa0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801dfa4:	fa01 f303 	lsl.w	r3, r1, r3
 801dfa8:	429a      	cmp	r2, r3
 801dfaa:	d119      	bne.n	801dfe0 <_strtod_l+0x910>
 801dfac:	4b9e      	ldr	r3, [pc, #632]	; (801e228 <_strtod_l+0xb58>)
 801dfae:	459b      	cmp	fp, r3
 801dfb0:	d102      	bne.n	801dfb8 <_strtod_l+0x8e8>
 801dfb2:	3201      	adds	r2, #1
 801dfb4:	f43f adca 	beq.w	801db4c <_strtod_l+0x47c>
 801dfb8:	4b9a      	ldr	r3, [pc, #616]	; (801e224 <_strtod_l+0xb54>)
 801dfba:	ea0b 0303 	and.w	r3, fp, r3
 801dfbe:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801dfc2:	f04f 0800 	mov.w	r8, #0
 801dfc6:	9b05      	ldr	r3, [sp, #20]
 801dfc8:	2b00      	cmp	r3, #0
 801dfca:	d186      	bne.n	801deda <_strtod_l+0x80a>
 801dfcc:	e5c8      	b.n	801db60 <_strtod_l+0x490>
 801dfce:	f04f 33ff 	mov.w	r3, #4294967295
 801dfd2:	e7e9      	b.n	801dfa8 <_strtod_l+0x8d8>
 801dfd4:	460b      	mov	r3, r1
 801dfd6:	e7e7      	b.n	801dfa8 <_strtod_l+0x8d8>
 801dfd8:	ea53 0308 	orrs.w	r3, r3, r8
 801dfdc:	f43f af6d 	beq.w	801deba <_strtod_l+0x7ea>
 801dfe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dfe2:	b1cb      	cbz	r3, 801e018 <_strtod_l+0x948>
 801dfe4:	ea13 0f0b 	tst.w	r3, fp
 801dfe8:	d0ed      	beq.n	801dfc6 <_strtod_l+0x8f6>
 801dfea:	9a05      	ldr	r2, [sp, #20]
 801dfec:	4640      	mov	r0, r8
 801dfee:	4649      	mov	r1, r9
 801dff0:	f1ba 0f00 	cmp.w	sl, #0
 801dff4:	d014      	beq.n	801e020 <_strtod_l+0x950>
 801dff6:	f7ff fb51 	bl	801d69c <sulp>
 801dffa:	ee38 7b00 	vadd.f64	d7, d8, d0
 801dffe:	ec59 8b17 	vmov	r8, r9, d7
 801e002:	e7e0      	b.n	801dfc6 <_strtod_l+0x8f6>
 801e004:	4013      	ands	r3, r2
 801e006:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801e00a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801e00e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801e012:	f04f 38ff 	mov.w	r8, #4294967295
 801e016:	e7d6      	b.n	801dfc6 <_strtod_l+0x8f6>
 801e018:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e01a:	ea13 0f08 	tst.w	r3, r8
 801e01e:	e7e3      	b.n	801dfe8 <_strtod_l+0x918>
 801e020:	f7ff fb3c 	bl	801d69c <sulp>
 801e024:	ee38 0b40 	vsub.f64	d0, d8, d0
 801e028:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801e02c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e030:	ec59 8b10 	vmov	r8, r9, d0
 801e034:	d1c7      	bne.n	801dfc6 <_strtod_l+0x8f6>
 801e036:	e5f8      	b.n	801dc2a <_strtod_l+0x55a>
 801e038:	4631      	mov	r1, r6
 801e03a:	4628      	mov	r0, r5
 801e03c:	f7ff faba 	bl	801d5b4 <__ratio>
 801e040:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801e044:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801e048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e04c:	d85f      	bhi.n	801e10e <_strtod_l+0xa3e>
 801e04e:	f1ba 0f00 	cmp.w	sl, #0
 801e052:	d166      	bne.n	801e122 <_strtod_l+0xa52>
 801e054:	f1b8 0f00 	cmp.w	r8, #0
 801e058:	d14d      	bne.n	801e0f6 <_strtod_l+0xa26>
 801e05a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e05e:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801e062:	2b00      	cmp	r3, #0
 801e064:	d162      	bne.n	801e12c <_strtod_l+0xa5c>
 801e066:	eeb4 0bcd 	vcmpe.f64	d0, d13
 801e06a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801e06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e072:	d401      	bmi.n	801e078 <_strtod_l+0x9a8>
 801e074:	ee20 db0d 	vmul.f64	d13, d0, d13
 801e078:	eeb1 cb4d 	vneg.f64	d12, d13
 801e07c:	4869      	ldr	r0, [pc, #420]	; (801e224 <_strtod_l+0xb54>)
 801e07e:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 801e230 <_strtod_l+0xb60>
 801e082:	ea0b 0100 	and.w	r1, fp, r0
 801e086:	4561      	cmp	r1, ip
 801e088:	ec53 2b1c 	vmov	r2, r3, d12
 801e08c:	d17a      	bne.n	801e184 <_strtod_l+0xab4>
 801e08e:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801e092:	ec49 8b10 	vmov	d0, r8, r9
 801e096:	910a      	str	r1, [sp, #40]	; 0x28
 801e098:	f7ff f9c2 	bl	801d420 <__ulp>
 801e09c:	ec49 8b1e 	vmov	d14, r8, r9
 801e0a0:	4860      	ldr	r0, [pc, #384]	; (801e224 <_strtod_l+0xb54>)
 801e0a2:	eea0 eb0c 	vfma.f64	d14, d0, d12
 801e0a6:	ee1e 3a90 	vmov	r3, s29
 801e0aa:	4a60      	ldr	r2, [pc, #384]	; (801e22c <_strtod_l+0xb5c>)
 801e0ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e0ae:	4018      	ands	r0, r3
 801e0b0:	4290      	cmp	r0, r2
 801e0b2:	ec59 8b1e 	vmov	r8, r9, d14
 801e0b6:	d93c      	bls.n	801e132 <_strtod_l+0xa62>
 801e0b8:	ee18 2a90 	vmov	r2, s17
 801e0bc:	4b5a      	ldr	r3, [pc, #360]	; (801e228 <_strtod_l+0xb58>)
 801e0be:	429a      	cmp	r2, r3
 801e0c0:	d104      	bne.n	801e0cc <_strtod_l+0x9fc>
 801e0c2:	ee18 3a10 	vmov	r3, s16
 801e0c6:	3301      	adds	r3, #1
 801e0c8:	f43f ad40 	beq.w	801db4c <_strtod_l+0x47c>
 801e0cc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 801e228 <_strtod_l+0xb58>
 801e0d0:	f04f 38ff 	mov.w	r8, #4294967295
 801e0d4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e0d6:	4620      	mov	r0, r4
 801e0d8:	f7fe fe76 	bl	801cdc8 <_Bfree>
 801e0dc:	4639      	mov	r1, r7
 801e0de:	4620      	mov	r0, r4
 801e0e0:	f7fe fe72 	bl	801cdc8 <_Bfree>
 801e0e4:	4631      	mov	r1, r6
 801e0e6:	4620      	mov	r0, r4
 801e0e8:	f7fe fe6e 	bl	801cdc8 <_Bfree>
 801e0ec:	4629      	mov	r1, r5
 801e0ee:	4620      	mov	r0, r4
 801e0f0:	f7fe fe6a 	bl	801cdc8 <_Bfree>
 801e0f4:	e609      	b.n	801dd0a <_strtod_l+0x63a>
 801e0f6:	f1b8 0f01 	cmp.w	r8, #1
 801e0fa:	d103      	bne.n	801e104 <_strtod_l+0xa34>
 801e0fc:	f1b9 0f00 	cmp.w	r9, #0
 801e100:	f43f ad93 	beq.w	801dc2a <_strtod_l+0x55a>
 801e104:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801e108:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801e10c:	e7b6      	b.n	801e07c <_strtod_l+0x9ac>
 801e10e:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801e112:	ee20 db0d 	vmul.f64	d13, d0, d13
 801e116:	f1ba 0f00 	cmp.w	sl, #0
 801e11a:	d0ad      	beq.n	801e078 <_strtod_l+0x9a8>
 801e11c:	eeb0 cb4d 	vmov.f64	d12, d13
 801e120:	e7ac      	b.n	801e07c <_strtod_l+0x9ac>
 801e122:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 801e126:	eeb0 db4c 	vmov.f64	d13, d12
 801e12a:	e7a7      	b.n	801e07c <_strtod_l+0x9ac>
 801e12c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801e130:	e7a4      	b.n	801e07c <_strtod_l+0x9ac>
 801e132:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801e136:	9b05      	ldr	r3, [sp, #20]
 801e138:	46cb      	mov	fp, r9
 801e13a:	2b00      	cmp	r3, #0
 801e13c:	d1ca      	bne.n	801e0d4 <_strtod_l+0xa04>
 801e13e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e142:	0d1b      	lsrs	r3, r3, #20
 801e144:	051b      	lsls	r3, r3, #20
 801e146:	4299      	cmp	r1, r3
 801e148:	d1c4      	bne.n	801e0d4 <_strtod_l+0xa04>
 801e14a:	ec51 0b1d 	vmov	r0, r1, d13
 801e14e:	f7e2 fb1b 	bl	8000788 <__aeabi_d2lz>
 801e152:	f7e2 fad3 	bl	80006fc <__aeabi_l2d>
 801e156:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 801e15a:	ec41 0b17 	vmov	d7, r0, r1
 801e15e:	ea4b 0b08 	orr.w	fp, fp, r8
 801e162:	ea5b 0b0a 	orrs.w	fp, fp, sl
 801e166:	ee3d db47 	vsub.f64	d13, d13, d7
 801e16a:	d03c      	beq.n	801e1e6 <_strtod_l+0xb16>
 801e16c:	eeb4 dbca 	vcmpe.f64	d13, d10
 801e170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e174:	f53f acf4 	bmi.w	801db60 <_strtod_l+0x490>
 801e178:	eeb4 dbcb 	vcmpe.f64	d13, d11
 801e17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e180:	dda8      	ble.n	801e0d4 <_strtod_l+0xa04>
 801e182:	e4ed      	b.n	801db60 <_strtod_l+0x490>
 801e184:	9805      	ldr	r0, [sp, #20]
 801e186:	b1f0      	cbz	r0, 801e1c6 <_strtod_l+0xaf6>
 801e188:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801e18c:	d81b      	bhi.n	801e1c6 <_strtod_l+0xaf6>
 801e18e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801e218 <_strtod_l+0xb48>
 801e192:	eeb4 dbc7 	vcmpe.f64	d13, d7
 801e196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e19a:	d811      	bhi.n	801e1c0 <_strtod_l+0xaf0>
 801e19c:	eebc dbcd 	vcvt.u32.f64	s26, d13
 801e1a0:	ee1d 3a10 	vmov	r3, s26
 801e1a4:	2b01      	cmp	r3, #1
 801e1a6:	bf38      	it	cc
 801e1a8:	2301      	movcc	r3, #1
 801e1aa:	ee0d 3a10 	vmov	s26, r3
 801e1ae:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 801e1b2:	f1ba 0f00 	cmp.w	sl, #0
 801e1b6:	d113      	bne.n	801e1e0 <_strtod_l+0xb10>
 801e1b8:	eeb1 7b4d 	vneg.f64	d7, d13
 801e1bc:	ec53 2b17 	vmov	r2, r3, d7
 801e1c0:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 801e1c4:	1a43      	subs	r3, r0, r1
 801e1c6:	eeb0 0b48 	vmov.f64	d0, d8
 801e1ca:	ec43 2b1c 	vmov	d12, r2, r3
 801e1ce:	910a      	str	r1, [sp, #40]	; 0x28
 801e1d0:	f7ff f926 	bl	801d420 <__ulp>
 801e1d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e1d6:	eeac 8b00 	vfma.f64	d8, d12, d0
 801e1da:	ec59 8b18 	vmov	r8, r9, d8
 801e1de:	e7aa      	b.n	801e136 <_strtod_l+0xa66>
 801e1e0:	eeb0 7b4d 	vmov.f64	d7, d13
 801e1e4:	e7ea      	b.n	801e1bc <_strtod_l+0xaec>
 801e1e6:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801e1ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1ee:	f57f af71 	bpl.w	801e0d4 <_strtod_l+0xa04>
 801e1f2:	e4b5      	b.n	801db60 <_strtod_l+0x490>
 801e1f4:	2300      	movs	r3, #0
 801e1f6:	9308      	str	r3, [sp, #32]
 801e1f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e1fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e1fc:	6013      	str	r3, [r2, #0]
 801e1fe:	f7ff baa6 	b.w	801d74e <_strtod_l+0x7e>
 801e202:	2a65      	cmp	r2, #101	; 0x65
 801e204:	f43f aba2 	beq.w	801d94c <_strtod_l+0x27c>
 801e208:	2a45      	cmp	r2, #69	; 0x45
 801e20a:	f43f ab9f 	beq.w	801d94c <_strtod_l+0x27c>
 801e20e:	2101      	movs	r1, #1
 801e210:	f7ff bbd8 	b.w	801d9c4 <_strtod_l+0x2f4>
 801e214:	f3af 8000 	nop.w
 801e218:	ffc00000 	.word	0xffc00000
 801e21c:	41dfffff 	.word	0x41dfffff
 801e220:	000fffff 	.word	0x000fffff
 801e224:	7ff00000 	.word	0x7ff00000
 801e228:	7fefffff 	.word	0x7fefffff
 801e22c:	7c9fffff 	.word	0x7c9fffff
 801e230:	7fe00000 	.word	0x7fe00000

0801e234 <_strtod_r>:
 801e234:	4b01      	ldr	r3, [pc, #4]	; (801e23c <_strtod_r+0x8>)
 801e236:	f7ff ba4b 	b.w	801d6d0 <_strtod_l>
 801e23a:	bf00      	nop
 801e23c:	2400015c 	.word	0x2400015c

0801e240 <_strtol_l.constprop.0>:
 801e240:	2b01      	cmp	r3, #1
 801e242:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e246:	d001      	beq.n	801e24c <_strtol_l.constprop.0+0xc>
 801e248:	2b24      	cmp	r3, #36	; 0x24
 801e24a:	d906      	bls.n	801e25a <_strtol_l.constprop.0+0x1a>
 801e24c:	f7fd fe3c 	bl	801bec8 <__errno>
 801e250:	2316      	movs	r3, #22
 801e252:	6003      	str	r3, [r0, #0]
 801e254:	2000      	movs	r0, #0
 801e256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e25a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801e340 <_strtol_l.constprop.0+0x100>
 801e25e:	460d      	mov	r5, r1
 801e260:	462e      	mov	r6, r5
 801e262:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e266:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801e26a:	f017 0708 	ands.w	r7, r7, #8
 801e26e:	d1f7      	bne.n	801e260 <_strtol_l.constprop.0+0x20>
 801e270:	2c2d      	cmp	r4, #45	; 0x2d
 801e272:	d132      	bne.n	801e2da <_strtol_l.constprop.0+0x9a>
 801e274:	782c      	ldrb	r4, [r5, #0]
 801e276:	2701      	movs	r7, #1
 801e278:	1cb5      	adds	r5, r6, #2
 801e27a:	2b00      	cmp	r3, #0
 801e27c:	d05b      	beq.n	801e336 <_strtol_l.constprop.0+0xf6>
 801e27e:	2b10      	cmp	r3, #16
 801e280:	d109      	bne.n	801e296 <_strtol_l.constprop.0+0x56>
 801e282:	2c30      	cmp	r4, #48	; 0x30
 801e284:	d107      	bne.n	801e296 <_strtol_l.constprop.0+0x56>
 801e286:	782c      	ldrb	r4, [r5, #0]
 801e288:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801e28c:	2c58      	cmp	r4, #88	; 0x58
 801e28e:	d14d      	bne.n	801e32c <_strtol_l.constprop.0+0xec>
 801e290:	786c      	ldrb	r4, [r5, #1]
 801e292:	2310      	movs	r3, #16
 801e294:	3502      	adds	r5, #2
 801e296:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801e29a:	f108 38ff 	add.w	r8, r8, #4294967295
 801e29e:	f04f 0e00 	mov.w	lr, #0
 801e2a2:	fbb8 f9f3 	udiv	r9, r8, r3
 801e2a6:	4676      	mov	r6, lr
 801e2a8:	fb03 8a19 	mls	sl, r3, r9, r8
 801e2ac:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801e2b0:	f1bc 0f09 	cmp.w	ip, #9
 801e2b4:	d816      	bhi.n	801e2e4 <_strtol_l.constprop.0+0xa4>
 801e2b6:	4664      	mov	r4, ip
 801e2b8:	42a3      	cmp	r3, r4
 801e2ba:	dd24      	ble.n	801e306 <_strtol_l.constprop.0+0xc6>
 801e2bc:	f1be 3fff 	cmp.w	lr, #4294967295
 801e2c0:	d008      	beq.n	801e2d4 <_strtol_l.constprop.0+0x94>
 801e2c2:	45b1      	cmp	r9, r6
 801e2c4:	d31c      	bcc.n	801e300 <_strtol_l.constprop.0+0xc0>
 801e2c6:	d101      	bne.n	801e2cc <_strtol_l.constprop.0+0x8c>
 801e2c8:	45a2      	cmp	sl, r4
 801e2ca:	db19      	blt.n	801e300 <_strtol_l.constprop.0+0xc0>
 801e2cc:	fb06 4603 	mla	r6, r6, r3, r4
 801e2d0:	f04f 0e01 	mov.w	lr, #1
 801e2d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e2d8:	e7e8      	b.n	801e2ac <_strtol_l.constprop.0+0x6c>
 801e2da:	2c2b      	cmp	r4, #43	; 0x2b
 801e2dc:	bf04      	itt	eq
 801e2de:	782c      	ldrbeq	r4, [r5, #0]
 801e2e0:	1cb5      	addeq	r5, r6, #2
 801e2e2:	e7ca      	b.n	801e27a <_strtol_l.constprop.0+0x3a>
 801e2e4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801e2e8:	f1bc 0f19 	cmp.w	ip, #25
 801e2ec:	d801      	bhi.n	801e2f2 <_strtol_l.constprop.0+0xb2>
 801e2ee:	3c37      	subs	r4, #55	; 0x37
 801e2f0:	e7e2      	b.n	801e2b8 <_strtol_l.constprop.0+0x78>
 801e2f2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801e2f6:	f1bc 0f19 	cmp.w	ip, #25
 801e2fa:	d804      	bhi.n	801e306 <_strtol_l.constprop.0+0xc6>
 801e2fc:	3c57      	subs	r4, #87	; 0x57
 801e2fe:	e7db      	b.n	801e2b8 <_strtol_l.constprop.0+0x78>
 801e300:	f04f 3eff 	mov.w	lr, #4294967295
 801e304:	e7e6      	b.n	801e2d4 <_strtol_l.constprop.0+0x94>
 801e306:	f1be 3fff 	cmp.w	lr, #4294967295
 801e30a:	d105      	bne.n	801e318 <_strtol_l.constprop.0+0xd8>
 801e30c:	2322      	movs	r3, #34	; 0x22
 801e30e:	6003      	str	r3, [r0, #0]
 801e310:	4646      	mov	r6, r8
 801e312:	b942      	cbnz	r2, 801e326 <_strtol_l.constprop.0+0xe6>
 801e314:	4630      	mov	r0, r6
 801e316:	e79e      	b.n	801e256 <_strtol_l.constprop.0+0x16>
 801e318:	b107      	cbz	r7, 801e31c <_strtol_l.constprop.0+0xdc>
 801e31a:	4276      	negs	r6, r6
 801e31c:	2a00      	cmp	r2, #0
 801e31e:	d0f9      	beq.n	801e314 <_strtol_l.constprop.0+0xd4>
 801e320:	f1be 0f00 	cmp.w	lr, #0
 801e324:	d000      	beq.n	801e328 <_strtol_l.constprop.0+0xe8>
 801e326:	1e69      	subs	r1, r5, #1
 801e328:	6011      	str	r1, [r2, #0]
 801e32a:	e7f3      	b.n	801e314 <_strtol_l.constprop.0+0xd4>
 801e32c:	2430      	movs	r4, #48	; 0x30
 801e32e:	2b00      	cmp	r3, #0
 801e330:	d1b1      	bne.n	801e296 <_strtol_l.constprop.0+0x56>
 801e332:	2308      	movs	r3, #8
 801e334:	e7af      	b.n	801e296 <_strtol_l.constprop.0+0x56>
 801e336:	2c30      	cmp	r4, #48	; 0x30
 801e338:	d0a5      	beq.n	801e286 <_strtol_l.constprop.0+0x46>
 801e33a:	230a      	movs	r3, #10
 801e33c:	e7ab      	b.n	801e296 <_strtol_l.constprop.0+0x56>
 801e33e:	bf00      	nop
 801e340:	08020749 	.word	0x08020749

0801e344 <_strtol_r>:
 801e344:	f7ff bf7c 	b.w	801e240 <_strtol_l.constprop.0>

0801e348 <__ssputs_r>:
 801e348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e34c:	688e      	ldr	r6, [r1, #8]
 801e34e:	461f      	mov	r7, r3
 801e350:	42be      	cmp	r6, r7
 801e352:	680b      	ldr	r3, [r1, #0]
 801e354:	4682      	mov	sl, r0
 801e356:	460c      	mov	r4, r1
 801e358:	4690      	mov	r8, r2
 801e35a:	d82c      	bhi.n	801e3b6 <__ssputs_r+0x6e>
 801e35c:	898a      	ldrh	r2, [r1, #12]
 801e35e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e362:	d026      	beq.n	801e3b2 <__ssputs_r+0x6a>
 801e364:	6965      	ldr	r5, [r4, #20]
 801e366:	6909      	ldr	r1, [r1, #16]
 801e368:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e36c:	eba3 0901 	sub.w	r9, r3, r1
 801e370:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e374:	1c7b      	adds	r3, r7, #1
 801e376:	444b      	add	r3, r9
 801e378:	106d      	asrs	r5, r5, #1
 801e37a:	429d      	cmp	r5, r3
 801e37c:	bf38      	it	cc
 801e37e:	461d      	movcc	r5, r3
 801e380:	0553      	lsls	r3, r2, #21
 801e382:	d527      	bpl.n	801e3d4 <__ssputs_r+0x8c>
 801e384:	4629      	mov	r1, r5
 801e386:	f7fe fc53 	bl	801cc30 <_malloc_r>
 801e38a:	4606      	mov	r6, r0
 801e38c:	b360      	cbz	r0, 801e3e8 <__ssputs_r+0xa0>
 801e38e:	6921      	ldr	r1, [r4, #16]
 801e390:	464a      	mov	r2, r9
 801e392:	f7fd fdce 	bl	801bf32 <memcpy>
 801e396:	89a3      	ldrh	r3, [r4, #12]
 801e398:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e39c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e3a0:	81a3      	strh	r3, [r4, #12]
 801e3a2:	6126      	str	r6, [r4, #16]
 801e3a4:	6165      	str	r5, [r4, #20]
 801e3a6:	444e      	add	r6, r9
 801e3a8:	eba5 0509 	sub.w	r5, r5, r9
 801e3ac:	6026      	str	r6, [r4, #0]
 801e3ae:	60a5      	str	r5, [r4, #8]
 801e3b0:	463e      	mov	r6, r7
 801e3b2:	42be      	cmp	r6, r7
 801e3b4:	d900      	bls.n	801e3b8 <__ssputs_r+0x70>
 801e3b6:	463e      	mov	r6, r7
 801e3b8:	6820      	ldr	r0, [r4, #0]
 801e3ba:	4632      	mov	r2, r6
 801e3bc:	4641      	mov	r1, r8
 801e3be:	f000 fd5c 	bl	801ee7a <memmove>
 801e3c2:	68a3      	ldr	r3, [r4, #8]
 801e3c4:	1b9b      	subs	r3, r3, r6
 801e3c6:	60a3      	str	r3, [r4, #8]
 801e3c8:	6823      	ldr	r3, [r4, #0]
 801e3ca:	4433      	add	r3, r6
 801e3cc:	6023      	str	r3, [r4, #0]
 801e3ce:	2000      	movs	r0, #0
 801e3d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e3d4:	462a      	mov	r2, r5
 801e3d6:	f001 f934 	bl	801f642 <_realloc_r>
 801e3da:	4606      	mov	r6, r0
 801e3dc:	2800      	cmp	r0, #0
 801e3de:	d1e0      	bne.n	801e3a2 <__ssputs_r+0x5a>
 801e3e0:	6921      	ldr	r1, [r4, #16]
 801e3e2:	4650      	mov	r0, sl
 801e3e4:	f7fe fbb0 	bl	801cb48 <_free_r>
 801e3e8:	230c      	movs	r3, #12
 801e3ea:	f8ca 3000 	str.w	r3, [sl]
 801e3ee:	89a3      	ldrh	r3, [r4, #12]
 801e3f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e3f4:	81a3      	strh	r3, [r4, #12]
 801e3f6:	f04f 30ff 	mov.w	r0, #4294967295
 801e3fa:	e7e9      	b.n	801e3d0 <__ssputs_r+0x88>

0801e3fc <_svfiprintf_r>:
 801e3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e400:	4698      	mov	r8, r3
 801e402:	898b      	ldrh	r3, [r1, #12]
 801e404:	061b      	lsls	r3, r3, #24
 801e406:	b09d      	sub	sp, #116	; 0x74
 801e408:	4607      	mov	r7, r0
 801e40a:	460d      	mov	r5, r1
 801e40c:	4614      	mov	r4, r2
 801e40e:	d50e      	bpl.n	801e42e <_svfiprintf_r+0x32>
 801e410:	690b      	ldr	r3, [r1, #16]
 801e412:	b963      	cbnz	r3, 801e42e <_svfiprintf_r+0x32>
 801e414:	2140      	movs	r1, #64	; 0x40
 801e416:	f7fe fc0b 	bl	801cc30 <_malloc_r>
 801e41a:	6028      	str	r0, [r5, #0]
 801e41c:	6128      	str	r0, [r5, #16]
 801e41e:	b920      	cbnz	r0, 801e42a <_svfiprintf_r+0x2e>
 801e420:	230c      	movs	r3, #12
 801e422:	603b      	str	r3, [r7, #0]
 801e424:	f04f 30ff 	mov.w	r0, #4294967295
 801e428:	e0d0      	b.n	801e5cc <_svfiprintf_r+0x1d0>
 801e42a:	2340      	movs	r3, #64	; 0x40
 801e42c:	616b      	str	r3, [r5, #20]
 801e42e:	2300      	movs	r3, #0
 801e430:	9309      	str	r3, [sp, #36]	; 0x24
 801e432:	2320      	movs	r3, #32
 801e434:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e438:	f8cd 800c 	str.w	r8, [sp, #12]
 801e43c:	2330      	movs	r3, #48	; 0x30
 801e43e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801e5e4 <_svfiprintf_r+0x1e8>
 801e442:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e446:	f04f 0901 	mov.w	r9, #1
 801e44a:	4623      	mov	r3, r4
 801e44c:	469a      	mov	sl, r3
 801e44e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e452:	b10a      	cbz	r2, 801e458 <_svfiprintf_r+0x5c>
 801e454:	2a25      	cmp	r2, #37	; 0x25
 801e456:	d1f9      	bne.n	801e44c <_svfiprintf_r+0x50>
 801e458:	ebba 0b04 	subs.w	fp, sl, r4
 801e45c:	d00b      	beq.n	801e476 <_svfiprintf_r+0x7a>
 801e45e:	465b      	mov	r3, fp
 801e460:	4622      	mov	r2, r4
 801e462:	4629      	mov	r1, r5
 801e464:	4638      	mov	r0, r7
 801e466:	f7ff ff6f 	bl	801e348 <__ssputs_r>
 801e46a:	3001      	adds	r0, #1
 801e46c:	f000 80a9 	beq.w	801e5c2 <_svfiprintf_r+0x1c6>
 801e470:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e472:	445a      	add	r2, fp
 801e474:	9209      	str	r2, [sp, #36]	; 0x24
 801e476:	f89a 3000 	ldrb.w	r3, [sl]
 801e47a:	2b00      	cmp	r3, #0
 801e47c:	f000 80a1 	beq.w	801e5c2 <_svfiprintf_r+0x1c6>
 801e480:	2300      	movs	r3, #0
 801e482:	f04f 32ff 	mov.w	r2, #4294967295
 801e486:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e48a:	f10a 0a01 	add.w	sl, sl, #1
 801e48e:	9304      	str	r3, [sp, #16]
 801e490:	9307      	str	r3, [sp, #28]
 801e492:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e496:	931a      	str	r3, [sp, #104]	; 0x68
 801e498:	4654      	mov	r4, sl
 801e49a:	2205      	movs	r2, #5
 801e49c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e4a0:	4850      	ldr	r0, [pc, #320]	; (801e5e4 <_svfiprintf_r+0x1e8>)
 801e4a2:	f7e1 ff45 	bl	8000330 <memchr>
 801e4a6:	9a04      	ldr	r2, [sp, #16]
 801e4a8:	b9d8      	cbnz	r0, 801e4e2 <_svfiprintf_r+0xe6>
 801e4aa:	06d0      	lsls	r0, r2, #27
 801e4ac:	bf44      	itt	mi
 801e4ae:	2320      	movmi	r3, #32
 801e4b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e4b4:	0711      	lsls	r1, r2, #28
 801e4b6:	bf44      	itt	mi
 801e4b8:	232b      	movmi	r3, #43	; 0x2b
 801e4ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e4be:	f89a 3000 	ldrb.w	r3, [sl]
 801e4c2:	2b2a      	cmp	r3, #42	; 0x2a
 801e4c4:	d015      	beq.n	801e4f2 <_svfiprintf_r+0xf6>
 801e4c6:	9a07      	ldr	r2, [sp, #28]
 801e4c8:	4654      	mov	r4, sl
 801e4ca:	2000      	movs	r0, #0
 801e4cc:	f04f 0c0a 	mov.w	ip, #10
 801e4d0:	4621      	mov	r1, r4
 801e4d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e4d6:	3b30      	subs	r3, #48	; 0x30
 801e4d8:	2b09      	cmp	r3, #9
 801e4da:	d94d      	bls.n	801e578 <_svfiprintf_r+0x17c>
 801e4dc:	b1b0      	cbz	r0, 801e50c <_svfiprintf_r+0x110>
 801e4de:	9207      	str	r2, [sp, #28]
 801e4e0:	e014      	b.n	801e50c <_svfiprintf_r+0x110>
 801e4e2:	eba0 0308 	sub.w	r3, r0, r8
 801e4e6:	fa09 f303 	lsl.w	r3, r9, r3
 801e4ea:	4313      	orrs	r3, r2
 801e4ec:	9304      	str	r3, [sp, #16]
 801e4ee:	46a2      	mov	sl, r4
 801e4f0:	e7d2      	b.n	801e498 <_svfiprintf_r+0x9c>
 801e4f2:	9b03      	ldr	r3, [sp, #12]
 801e4f4:	1d19      	adds	r1, r3, #4
 801e4f6:	681b      	ldr	r3, [r3, #0]
 801e4f8:	9103      	str	r1, [sp, #12]
 801e4fa:	2b00      	cmp	r3, #0
 801e4fc:	bfbb      	ittet	lt
 801e4fe:	425b      	neglt	r3, r3
 801e500:	f042 0202 	orrlt.w	r2, r2, #2
 801e504:	9307      	strge	r3, [sp, #28]
 801e506:	9307      	strlt	r3, [sp, #28]
 801e508:	bfb8      	it	lt
 801e50a:	9204      	strlt	r2, [sp, #16]
 801e50c:	7823      	ldrb	r3, [r4, #0]
 801e50e:	2b2e      	cmp	r3, #46	; 0x2e
 801e510:	d10c      	bne.n	801e52c <_svfiprintf_r+0x130>
 801e512:	7863      	ldrb	r3, [r4, #1]
 801e514:	2b2a      	cmp	r3, #42	; 0x2a
 801e516:	d134      	bne.n	801e582 <_svfiprintf_r+0x186>
 801e518:	9b03      	ldr	r3, [sp, #12]
 801e51a:	1d1a      	adds	r2, r3, #4
 801e51c:	681b      	ldr	r3, [r3, #0]
 801e51e:	9203      	str	r2, [sp, #12]
 801e520:	2b00      	cmp	r3, #0
 801e522:	bfb8      	it	lt
 801e524:	f04f 33ff 	movlt.w	r3, #4294967295
 801e528:	3402      	adds	r4, #2
 801e52a:	9305      	str	r3, [sp, #20]
 801e52c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801e5f4 <_svfiprintf_r+0x1f8>
 801e530:	7821      	ldrb	r1, [r4, #0]
 801e532:	2203      	movs	r2, #3
 801e534:	4650      	mov	r0, sl
 801e536:	f7e1 fefb 	bl	8000330 <memchr>
 801e53a:	b138      	cbz	r0, 801e54c <_svfiprintf_r+0x150>
 801e53c:	9b04      	ldr	r3, [sp, #16]
 801e53e:	eba0 000a 	sub.w	r0, r0, sl
 801e542:	2240      	movs	r2, #64	; 0x40
 801e544:	4082      	lsls	r2, r0
 801e546:	4313      	orrs	r3, r2
 801e548:	3401      	adds	r4, #1
 801e54a:	9304      	str	r3, [sp, #16]
 801e54c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e550:	4825      	ldr	r0, [pc, #148]	; (801e5e8 <_svfiprintf_r+0x1ec>)
 801e552:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e556:	2206      	movs	r2, #6
 801e558:	f7e1 feea 	bl	8000330 <memchr>
 801e55c:	2800      	cmp	r0, #0
 801e55e:	d038      	beq.n	801e5d2 <_svfiprintf_r+0x1d6>
 801e560:	4b22      	ldr	r3, [pc, #136]	; (801e5ec <_svfiprintf_r+0x1f0>)
 801e562:	bb1b      	cbnz	r3, 801e5ac <_svfiprintf_r+0x1b0>
 801e564:	9b03      	ldr	r3, [sp, #12]
 801e566:	3307      	adds	r3, #7
 801e568:	f023 0307 	bic.w	r3, r3, #7
 801e56c:	3308      	adds	r3, #8
 801e56e:	9303      	str	r3, [sp, #12]
 801e570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e572:	4433      	add	r3, r6
 801e574:	9309      	str	r3, [sp, #36]	; 0x24
 801e576:	e768      	b.n	801e44a <_svfiprintf_r+0x4e>
 801e578:	fb0c 3202 	mla	r2, ip, r2, r3
 801e57c:	460c      	mov	r4, r1
 801e57e:	2001      	movs	r0, #1
 801e580:	e7a6      	b.n	801e4d0 <_svfiprintf_r+0xd4>
 801e582:	2300      	movs	r3, #0
 801e584:	3401      	adds	r4, #1
 801e586:	9305      	str	r3, [sp, #20]
 801e588:	4619      	mov	r1, r3
 801e58a:	f04f 0c0a 	mov.w	ip, #10
 801e58e:	4620      	mov	r0, r4
 801e590:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e594:	3a30      	subs	r2, #48	; 0x30
 801e596:	2a09      	cmp	r2, #9
 801e598:	d903      	bls.n	801e5a2 <_svfiprintf_r+0x1a6>
 801e59a:	2b00      	cmp	r3, #0
 801e59c:	d0c6      	beq.n	801e52c <_svfiprintf_r+0x130>
 801e59e:	9105      	str	r1, [sp, #20]
 801e5a0:	e7c4      	b.n	801e52c <_svfiprintf_r+0x130>
 801e5a2:	fb0c 2101 	mla	r1, ip, r1, r2
 801e5a6:	4604      	mov	r4, r0
 801e5a8:	2301      	movs	r3, #1
 801e5aa:	e7f0      	b.n	801e58e <_svfiprintf_r+0x192>
 801e5ac:	ab03      	add	r3, sp, #12
 801e5ae:	9300      	str	r3, [sp, #0]
 801e5b0:	462a      	mov	r2, r5
 801e5b2:	4b0f      	ldr	r3, [pc, #60]	; (801e5f0 <_svfiprintf_r+0x1f4>)
 801e5b4:	a904      	add	r1, sp, #16
 801e5b6:	4638      	mov	r0, r7
 801e5b8:	f7fc fd32 	bl	801b020 <_printf_float>
 801e5bc:	1c42      	adds	r2, r0, #1
 801e5be:	4606      	mov	r6, r0
 801e5c0:	d1d6      	bne.n	801e570 <_svfiprintf_r+0x174>
 801e5c2:	89ab      	ldrh	r3, [r5, #12]
 801e5c4:	065b      	lsls	r3, r3, #25
 801e5c6:	f53f af2d 	bmi.w	801e424 <_svfiprintf_r+0x28>
 801e5ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e5cc:	b01d      	add	sp, #116	; 0x74
 801e5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e5d2:	ab03      	add	r3, sp, #12
 801e5d4:	9300      	str	r3, [sp, #0]
 801e5d6:	462a      	mov	r2, r5
 801e5d8:	4b05      	ldr	r3, [pc, #20]	; (801e5f0 <_svfiprintf_r+0x1f4>)
 801e5da:	a904      	add	r1, sp, #16
 801e5dc:	4638      	mov	r0, r7
 801e5de:	f7fc ffa7 	bl	801b530 <_printf_i>
 801e5e2:	e7eb      	b.n	801e5bc <_svfiprintf_r+0x1c0>
 801e5e4:	08020849 	.word	0x08020849
 801e5e8:	08020853 	.word	0x08020853
 801e5ec:	0801b021 	.word	0x0801b021
 801e5f0:	0801e349 	.word	0x0801e349
 801e5f4:	0802084f 	.word	0x0802084f

0801e5f8 <_sungetc_r>:
 801e5f8:	b538      	push	{r3, r4, r5, lr}
 801e5fa:	1c4b      	adds	r3, r1, #1
 801e5fc:	4614      	mov	r4, r2
 801e5fe:	d103      	bne.n	801e608 <_sungetc_r+0x10>
 801e600:	f04f 35ff 	mov.w	r5, #4294967295
 801e604:	4628      	mov	r0, r5
 801e606:	bd38      	pop	{r3, r4, r5, pc}
 801e608:	8993      	ldrh	r3, [r2, #12]
 801e60a:	f023 0320 	bic.w	r3, r3, #32
 801e60e:	8193      	strh	r3, [r2, #12]
 801e610:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e612:	6852      	ldr	r2, [r2, #4]
 801e614:	b2cd      	uxtb	r5, r1
 801e616:	b18b      	cbz	r3, 801e63c <_sungetc_r+0x44>
 801e618:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e61a:	4293      	cmp	r3, r2
 801e61c:	dd08      	ble.n	801e630 <_sungetc_r+0x38>
 801e61e:	6823      	ldr	r3, [r4, #0]
 801e620:	1e5a      	subs	r2, r3, #1
 801e622:	6022      	str	r2, [r4, #0]
 801e624:	f803 5c01 	strb.w	r5, [r3, #-1]
 801e628:	6863      	ldr	r3, [r4, #4]
 801e62a:	3301      	adds	r3, #1
 801e62c:	6063      	str	r3, [r4, #4]
 801e62e:	e7e9      	b.n	801e604 <_sungetc_r+0xc>
 801e630:	4621      	mov	r1, r4
 801e632:	f000 fbe8 	bl	801ee06 <__submore>
 801e636:	2800      	cmp	r0, #0
 801e638:	d0f1      	beq.n	801e61e <_sungetc_r+0x26>
 801e63a:	e7e1      	b.n	801e600 <_sungetc_r+0x8>
 801e63c:	6921      	ldr	r1, [r4, #16]
 801e63e:	6823      	ldr	r3, [r4, #0]
 801e640:	b151      	cbz	r1, 801e658 <_sungetc_r+0x60>
 801e642:	4299      	cmp	r1, r3
 801e644:	d208      	bcs.n	801e658 <_sungetc_r+0x60>
 801e646:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801e64a:	42a9      	cmp	r1, r5
 801e64c:	d104      	bne.n	801e658 <_sungetc_r+0x60>
 801e64e:	3b01      	subs	r3, #1
 801e650:	3201      	adds	r2, #1
 801e652:	6023      	str	r3, [r4, #0]
 801e654:	6062      	str	r2, [r4, #4]
 801e656:	e7d5      	b.n	801e604 <_sungetc_r+0xc>
 801e658:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801e65c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e660:	6363      	str	r3, [r4, #52]	; 0x34
 801e662:	2303      	movs	r3, #3
 801e664:	63a3      	str	r3, [r4, #56]	; 0x38
 801e666:	4623      	mov	r3, r4
 801e668:	f803 5f46 	strb.w	r5, [r3, #70]!
 801e66c:	6023      	str	r3, [r4, #0]
 801e66e:	2301      	movs	r3, #1
 801e670:	e7dc      	b.n	801e62c <_sungetc_r+0x34>

0801e672 <__ssrefill_r>:
 801e672:	b510      	push	{r4, lr}
 801e674:	460c      	mov	r4, r1
 801e676:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801e678:	b169      	cbz	r1, 801e696 <__ssrefill_r+0x24>
 801e67a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e67e:	4299      	cmp	r1, r3
 801e680:	d001      	beq.n	801e686 <__ssrefill_r+0x14>
 801e682:	f7fe fa61 	bl	801cb48 <_free_r>
 801e686:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e688:	6063      	str	r3, [r4, #4]
 801e68a:	2000      	movs	r0, #0
 801e68c:	6360      	str	r0, [r4, #52]	; 0x34
 801e68e:	b113      	cbz	r3, 801e696 <__ssrefill_r+0x24>
 801e690:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801e692:	6023      	str	r3, [r4, #0]
 801e694:	bd10      	pop	{r4, pc}
 801e696:	6923      	ldr	r3, [r4, #16]
 801e698:	6023      	str	r3, [r4, #0]
 801e69a:	2300      	movs	r3, #0
 801e69c:	6063      	str	r3, [r4, #4]
 801e69e:	89a3      	ldrh	r3, [r4, #12]
 801e6a0:	f043 0320 	orr.w	r3, r3, #32
 801e6a4:	81a3      	strh	r3, [r4, #12]
 801e6a6:	f04f 30ff 	mov.w	r0, #4294967295
 801e6aa:	e7f3      	b.n	801e694 <__ssrefill_r+0x22>

0801e6ac <__ssvfiscanf_r>:
 801e6ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e6b0:	460c      	mov	r4, r1
 801e6b2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801e6b6:	2100      	movs	r1, #0
 801e6b8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801e6bc:	49a6      	ldr	r1, [pc, #664]	; (801e958 <__ssvfiscanf_r+0x2ac>)
 801e6be:	91a0      	str	r1, [sp, #640]	; 0x280
 801e6c0:	f10d 0804 	add.w	r8, sp, #4
 801e6c4:	49a5      	ldr	r1, [pc, #660]	; (801e95c <__ssvfiscanf_r+0x2b0>)
 801e6c6:	4fa6      	ldr	r7, [pc, #664]	; (801e960 <__ssvfiscanf_r+0x2b4>)
 801e6c8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801e964 <__ssvfiscanf_r+0x2b8>
 801e6cc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801e6d0:	4606      	mov	r6, r0
 801e6d2:	91a1      	str	r1, [sp, #644]	; 0x284
 801e6d4:	9300      	str	r3, [sp, #0]
 801e6d6:	7813      	ldrb	r3, [r2, #0]
 801e6d8:	2b00      	cmp	r3, #0
 801e6da:	f000 815a 	beq.w	801e992 <__ssvfiscanf_r+0x2e6>
 801e6de:	5cf9      	ldrb	r1, [r7, r3]
 801e6e0:	f011 0108 	ands.w	r1, r1, #8
 801e6e4:	f102 0501 	add.w	r5, r2, #1
 801e6e8:	d019      	beq.n	801e71e <__ssvfiscanf_r+0x72>
 801e6ea:	6863      	ldr	r3, [r4, #4]
 801e6ec:	2b00      	cmp	r3, #0
 801e6ee:	dd0f      	ble.n	801e710 <__ssvfiscanf_r+0x64>
 801e6f0:	6823      	ldr	r3, [r4, #0]
 801e6f2:	781a      	ldrb	r2, [r3, #0]
 801e6f4:	5cba      	ldrb	r2, [r7, r2]
 801e6f6:	0712      	lsls	r2, r2, #28
 801e6f8:	d401      	bmi.n	801e6fe <__ssvfiscanf_r+0x52>
 801e6fa:	462a      	mov	r2, r5
 801e6fc:	e7eb      	b.n	801e6d6 <__ssvfiscanf_r+0x2a>
 801e6fe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e700:	3201      	adds	r2, #1
 801e702:	9245      	str	r2, [sp, #276]	; 0x114
 801e704:	6862      	ldr	r2, [r4, #4]
 801e706:	3301      	adds	r3, #1
 801e708:	3a01      	subs	r2, #1
 801e70a:	6062      	str	r2, [r4, #4]
 801e70c:	6023      	str	r3, [r4, #0]
 801e70e:	e7ec      	b.n	801e6ea <__ssvfiscanf_r+0x3e>
 801e710:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e712:	4621      	mov	r1, r4
 801e714:	4630      	mov	r0, r6
 801e716:	4798      	blx	r3
 801e718:	2800      	cmp	r0, #0
 801e71a:	d0e9      	beq.n	801e6f0 <__ssvfiscanf_r+0x44>
 801e71c:	e7ed      	b.n	801e6fa <__ssvfiscanf_r+0x4e>
 801e71e:	2b25      	cmp	r3, #37	; 0x25
 801e720:	d012      	beq.n	801e748 <__ssvfiscanf_r+0x9c>
 801e722:	469a      	mov	sl, r3
 801e724:	6863      	ldr	r3, [r4, #4]
 801e726:	2b00      	cmp	r3, #0
 801e728:	f340 8091 	ble.w	801e84e <__ssvfiscanf_r+0x1a2>
 801e72c:	6822      	ldr	r2, [r4, #0]
 801e72e:	7813      	ldrb	r3, [r2, #0]
 801e730:	4553      	cmp	r3, sl
 801e732:	f040 812e 	bne.w	801e992 <__ssvfiscanf_r+0x2e6>
 801e736:	6863      	ldr	r3, [r4, #4]
 801e738:	3b01      	subs	r3, #1
 801e73a:	6063      	str	r3, [r4, #4]
 801e73c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801e73e:	3201      	adds	r2, #1
 801e740:	3301      	adds	r3, #1
 801e742:	6022      	str	r2, [r4, #0]
 801e744:	9345      	str	r3, [sp, #276]	; 0x114
 801e746:	e7d8      	b.n	801e6fa <__ssvfiscanf_r+0x4e>
 801e748:	9141      	str	r1, [sp, #260]	; 0x104
 801e74a:	9143      	str	r1, [sp, #268]	; 0x10c
 801e74c:	7853      	ldrb	r3, [r2, #1]
 801e74e:	2b2a      	cmp	r3, #42	; 0x2a
 801e750:	bf02      	ittt	eq
 801e752:	2310      	moveq	r3, #16
 801e754:	1c95      	addeq	r5, r2, #2
 801e756:	9341      	streq	r3, [sp, #260]	; 0x104
 801e758:	220a      	movs	r2, #10
 801e75a:	46aa      	mov	sl, r5
 801e75c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801e760:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801e764:	2b09      	cmp	r3, #9
 801e766:	d91c      	bls.n	801e7a2 <__ssvfiscanf_r+0xf6>
 801e768:	487e      	ldr	r0, [pc, #504]	; (801e964 <__ssvfiscanf_r+0x2b8>)
 801e76a:	2203      	movs	r2, #3
 801e76c:	f7e1 fde0 	bl	8000330 <memchr>
 801e770:	b138      	cbz	r0, 801e782 <__ssvfiscanf_r+0xd6>
 801e772:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801e774:	eba0 0009 	sub.w	r0, r0, r9
 801e778:	2301      	movs	r3, #1
 801e77a:	4083      	lsls	r3, r0
 801e77c:	4313      	orrs	r3, r2
 801e77e:	9341      	str	r3, [sp, #260]	; 0x104
 801e780:	4655      	mov	r5, sl
 801e782:	f815 3b01 	ldrb.w	r3, [r5], #1
 801e786:	2b78      	cmp	r3, #120	; 0x78
 801e788:	d806      	bhi.n	801e798 <__ssvfiscanf_r+0xec>
 801e78a:	2b57      	cmp	r3, #87	; 0x57
 801e78c:	d810      	bhi.n	801e7b0 <__ssvfiscanf_r+0x104>
 801e78e:	2b25      	cmp	r3, #37	; 0x25
 801e790:	d0c7      	beq.n	801e722 <__ssvfiscanf_r+0x76>
 801e792:	d857      	bhi.n	801e844 <__ssvfiscanf_r+0x198>
 801e794:	2b00      	cmp	r3, #0
 801e796:	d065      	beq.n	801e864 <__ssvfiscanf_r+0x1b8>
 801e798:	2303      	movs	r3, #3
 801e79a:	9347      	str	r3, [sp, #284]	; 0x11c
 801e79c:	230a      	movs	r3, #10
 801e79e:	9342      	str	r3, [sp, #264]	; 0x108
 801e7a0:	e076      	b.n	801e890 <__ssvfiscanf_r+0x1e4>
 801e7a2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801e7a4:	fb02 1103 	mla	r1, r2, r3, r1
 801e7a8:	3930      	subs	r1, #48	; 0x30
 801e7aa:	9143      	str	r1, [sp, #268]	; 0x10c
 801e7ac:	4655      	mov	r5, sl
 801e7ae:	e7d4      	b.n	801e75a <__ssvfiscanf_r+0xae>
 801e7b0:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801e7b4:	2a20      	cmp	r2, #32
 801e7b6:	d8ef      	bhi.n	801e798 <__ssvfiscanf_r+0xec>
 801e7b8:	a101      	add	r1, pc, #4	; (adr r1, 801e7c0 <__ssvfiscanf_r+0x114>)
 801e7ba:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801e7be:	bf00      	nop
 801e7c0:	0801e873 	.word	0x0801e873
 801e7c4:	0801e799 	.word	0x0801e799
 801e7c8:	0801e799 	.word	0x0801e799
 801e7cc:	0801e8d1 	.word	0x0801e8d1
 801e7d0:	0801e799 	.word	0x0801e799
 801e7d4:	0801e799 	.word	0x0801e799
 801e7d8:	0801e799 	.word	0x0801e799
 801e7dc:	0801e799 	.word	0x0801e799
 801e7e0:	0801e799 	.word	0x0801e799
 801e7e4:	0801e799 	.word	0x0801e799
 801e7e8:	0801e799 	.word	0x0801e799
 801e7ec:	0801e8e7 	.word	0x0801e8e7
 801e7f0:	0801e8cd 	.word	0x0801e8cd
 801e7f4:	0801e84b 	.word	0x0801e84b
 801e7f8:	0801e84b 	.word	0x0801e84b
 801e7fc:	0801e84b 	.word	0x0801e84b
 801e800:	0801e799 	.word	0x0801e799
 801e804:	0801e889 	.word	0x0801e889
 801e808:	0801e799 	.word	0x0801e799
 801e80c:	0801e799 	.word	0x0801e799
 801e810:	0801e799 	.word	0x0801e799
 801e814:	0801e799 	.word	0x0801e799
 801e818:	0801e8f7 	.word	0x0801e8f7
 801e81c:	0801e8c5 	.word	0x0801e8c5
 801e820:	0801e86b 	.word	0x0801e86b
 801e824:	0801e799 	.word	0x0801e799
 801e828:	0801e799 	.word	0x0801e799
 801e82c:	0801e8f3 	.word	0x0801e8f3
 801e830:	0801e799 	.word	0x0801e799
 801e834:	0801e8cd 	.word	0x0801e8cd
 801e838:	0801e799 	.word	0x0801e799
 801e83c:	0801e799 	.word	0x0801e799
 801e840:	0801e873 	.word	0x0801e873
 801e844:	3b45      	subs	r3, #69	; 0x45
 801e846:	2b02      	cmp	r3, #2
 801e848:	d8a6      	bhi.n	801e798 <__ssvfiscanf_r+0xec>
 801e84a:	2305      	movs	r3, #5
 801e84c:	e01f      	b.n	801e88e <__ssvfiscanf_r+0x1e2>
 801e84e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e850:	4621      	mov	r1, r4
 801e852:	4630      	mov	r0, r6
 801e854:	4798      	blx	r3
 801e856:	2800      	cmp	r0, #0
 801e858:	f43f af68 	beq.w	801e72c <__ssvfiscanf_r+0x80>
 801e85c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801e85e:	2800      	cmp	r0, #0
 801e860:	f040 808d 	bne.w	801e97e <__ssvfiscanf_r+0x2d2>
 801e864:	f04f 30ff 	mov.w	r0, #4294967295
 801e868:	e08f      	b.n	801e98a <__ssvfiscanf_r+0x2de>
 801e86a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801e86c:	f042 0220 	orr.w	r2, r2, #32
 801e870:	9241      	str	r2, [sp, #260]	; 0x104
 801e872:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801e874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e878:	9241      	str	r2, [sp, #260]	; 0x104
 801e87a:	2210      	movs	r2, #16
 801e87c:	2b6f      	cmp	r3, #111	; 0x6f
 801e87e:	9242      	str	r2, [sp, #264]	; 0x108
 801e880:	bf34      	ite	cc
 801e882:	2303      	movcc	r3, #3
 801e884:	2304      	movcs	r3, #4
 801e886:	e002      	b.n	801e88e <__ssvfiscanf_r+0x1e2>
 801e888:	2300      	movs	r3, #0
 801e88a:	9342      	str	r3, [sp, #264]	; 0x108
 801e88c:	2303      	movs	r3, #3
 801e88e:	9347      	str	r3, [sp, #284]	; 0x11c
 801e890:	6863      	ldr	r3, [r4, #4]
 801e892:	2b00      	cmp	r3, #0
 801e894:	dd3d      	ble.n	801e912 <__ssvfiscanf_r+0x266>
 801e896:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e898:	0659      	lsls	r1, r3, #25
 801e89a:	d404      	bmi.n	801e8a6 <__ssvfiscanf_r+0x1fa>
 801e89c:	6823      	ldr	r3, [r4, #0]
 801e89e:	781a      	ldrb	r2, [r3, #0]
 801e8a0:	5cba      	ldrb	r2, [r7, r2]
 801e8a2:	0712      	lsls	r2, r2, #28
 801e8a4:	d43c      	bmi.n	801e920 <__ssvfiscanf_r+0x274>
 801e8a6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801e8a8:	2b02      	cmp	r3, #2
 801e8aa:	dc4b      	bgt.n	801e944 <__ssvfiscanf_r+0x298>
 801e8ac:	466b      	mov	r3, sp
 801e8ae:	4622      	mov	r2, r4
 801e8b0:	a941      	add	r1, sp, #260	; 0x104
 801e8b2:	4630      	mov	r0, r6
 801e8b4:	f000 f872 	bl	801e99c <_scanf_chars>
 801e8b8:	2801      	cmp	r0, #1
 801e8ba:	d06a      	beq.n	801e992 <__ssvfiscanf_r+0x2e6>
 801e8bc:	2802      	cmp	r0, #2
 801e8be:	f47f af1c 	bne.w	801e6fa <__ssvfiscanf_r+0x4e>
 801e8c2:	e7cb      	b.n	801e85c <__ssvfiscanf_r+0x1b0>
 801e8c4:	2308      	movs	r3, #8
 801e8c6:	9342      	str	r3, [sp, #264]	; 0x108
 801e8c8:	2304      	movs	r3, #4
 801e8ca:	e7e0      	b.n	801e88e <__ssvfiscanf_r+0x1e2>
 801e8cc:	220a      	movs	r2, #10
 801e8ce:	e7d5      	b.n	801e87c <__ssvfiscanf_r+0x1d0>
 801e8d0:	4629      	mov	r1, r5
 801e8d2:	4640      	mov	r0, r8
 801e8d4:	f000 fa5e 	bl	801ed94 <__sccl>
 801e8d8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e8da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e8de:	9341      	str	r3, [sp, #260]	; 0x104
 801e8e0:	4605      	mov	r5, r0
 801e8e2:	2301      	movs	r3, #1
 801e8e4:	e7d3      	b.n	801e88e <__ssvfiscanf_r+0x1e2>
 801e8e6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e8e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e8ec:	9341      	str	r3, [sp, #260]	; 0x104
 801e8ee:	2300      	movs	r3, #0
 801e8f0:	e7cd      	b.n	801e88e <__ssvfiscanf_r+0x1e2>
 801e8f2:	2302      	movs	r3, #2
 801e8f4:	e7cb      	b.n	801e88e <__ssvfiscanf_r+0x1e2>
 801e8f6:	9841      	ldr	r0, [sp, #260]	; 0x104
 801e8f8:	06c3      	lsls	r3, r0, #27
 801e8fa:	f53f aefe 	bmi.w	801e6fa <__ssvfiscanf_r+0x4e>
 801e8fe:	9b00      	ldr	r3, [sp, #0]
 801e900:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e902:	1d19      	adds	r1, r3, #4
 801e904:	9100      	str	r1, [sp, #0]
 801e906:	681b      	ldr	r3, [r3, #0]
 801e908:	07c0      	lsls	r0, r0, #31
 801e90a:	bf4c      	ite	mi
 801e90c:	801a      	strhmi	r2, [r3, #0]
 801e90e:	601a      	strpl	r2, [r3, #0]
 801e910:	e6f3      	b.n	801e6fa <__ssvfiscanf_r+0x4e>
 801e912:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e914:	4621      	mov	r1, r4
 801e916:	4630      	mov	r0, r6
 801e918:	4798      	blx	r3
 801e91a:	2800      	cmp	r0, #0
 801e91c:	d0bb      	beq.n	801e896 <__ssvfiscanf_r+0x1ea>
 801e91e:	e79d      	b.n	801e85c <__ssvfiscanf_r+0x1b0>
 801e920:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e922:	3201      	adds	r2, #1
 801e924:	9245      	str	r2, [sp, #276]	; 0x114
 801e926:	6862      	ldr	r2, [r4, #4]
 801e928:	3a01      	subs	r2, #1
 801e92a:	2a00      	cmp	r2, #0
 801e92c:	6062      	str	r2, [r4, #4]
 801e92e:	dd02      	ble.n	801e936 <__ssvfiscanf_r+0x28a>
 801e930:	3301      	adds	r3, #1
 801e932:	6023      	str	r3, [r4, #0]
 801e934:	e7b2      	b.n	801e89c <__ssvfiscanf_r+0x1f0>
 801e936:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e938:	4621      	mov	r1, r4
 801e93a:	4630      	mov	r0, r6
 801e93c:	4798      	blx	r3
 801e93e:	2800      	cmp	r0, #0
 801e940:	d0ac      	beq.n	801e89c <__ssvfiscanf_r+0x1f0>
 801e942:	e78b      	b.n	801e85c <__ssvfiscanf_r+0x1b0>
 801e944:	2b04      	cmp	r3, #4
 801e946:	dc0f      	bgt.n	801e968 <__ssvfiscanf_r+0x2bc>
 801e948:	466b      	mov	r3, sp
 801e94a:	4622      	mov	r2, r4
 801e94c:	a941      	add	r1, sp, #260	; 0x104
 801e94e:	4630      	mov	r0, r6
 801e950:	f000 f87e 	bl	801ea50 <_scanf_i>
 801e954:	e7b0      	b.n	801e8b8 <__ssvfiscanf_r+0x20c>
 801e956:	bf00      	nop
 801e958:	0801e5f9 	.word	0x0801e5f9
 801e95c:	0801e673 	.word	0x0801e673
 801e960:	08020749 	.word	0x08020749
 801e964:	0802084f 	.word	0x0802084f
 801e968:	4b0b      	ldr	r3, [pc, #44]	; (801e998 <__ssvfiscanf_r+0x2ec>)
 801e96a:	2b00      	cmp	r3, #0
 801e96c:	f43f aec5 	beq.w	801e6fa <__ssvfiscanf_r+0x4e>
 801e970:	466b      	mov	r3, sp
 801e972:	4622      	mov	r2, r4
 801e974:	a941      	add	r1, sp, #260	; 0x104
 801e976:	4630      	mov	r0, r6
 801e978:	f7fc fefc 	bl	801b774 <_scanf_float>
 801e97c:	e79c      	b.n	801e8b8 <__ssvfiscanf_r+0x20c>
 801e97e:	89a3      	ldrh	r3, [r4, #12]
 801e980:	f013 0f40 	tst.w	r3, #64	; 0x40
 801e984:	bf18      	it	ne
 801e986:	f04f 30ff 	movne.w	r0, #4294967295
 801e98a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801e98e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e992:	9844      	ldr	r0, [sp, #272]	; 0x110
 801e994:	e7f9      	b.n	801e98a <__ssvfiscanf_r+0x2de>
 801e996:	bf00      	nop
 801e998:	0801b775 	.word	0x0801b775

0801e99c <_scanf_chars>:
 801e99c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e9a0:	4615      	mov	r5, r2
 801e9a2:	688a      	ldr	r2, [r1, #8]
 801e9a4:	4680      	mov	r8, r0
 801e9a6:	460c      	mov	r4, r1
 801e9a8:	b932      	cbnz	r2, 801e9b8 <_scanf_chars+0x1c>
 801e9aa:	698a      	ldr	r2, [r1, #24]
 801e9ac:	2a00      	cmp	r2, #0
 801e9ae:	bf0c      	ite	eq
 801e9b0:	2201      	moveq	r2, #1
 801e9b2:	f04f 32ff 	movne.w	r2, #4294967295
 801e9b6:	608a      	str	r2, [r1, #8]
 801e9b8:	6822      	ldr	r2, [r4, #0]
 801e9ba:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801ea4c <_scanf_chars+0xb0>
 801e9be:	06d1      	lsls	r1, r2, #27
 801e9c0:	bf5f      	itttt	pl
 801e9c2:	681a      	ldrpl	r2, [r3, #0]
 801e9c4:	1d11      	addpl	r1, r2, #4
 801e9c6:	6019      	strpl	r1, [r3, #0]
 801e9c8:	6816      	ldrpl	r6, [r2, #0]
 801e9ca:	2700      	movs	r7, #0
 801e9cc:	69a0      	ldr	r0, [r4, #24]
 801e9ce:	b188      	cbz	r0, 801e9f4 <_scanf_chars+0x58>
 801e9d0:	2801      	cmp	r0, #1
 801e9d2:	d107      	bne.n	801e9e4 <_scanf_chars+0x48>
 801e9d4:	682a      	ldr	r2, [r5, #0]
 801e9d6:	7811      	ldrb	r1, [r2, #0]
 801e9d8:	6962      	ldr	r2, [r4, #20]
 801e9da:	5c52      	ldrb	r2, [r2, r1]
 801e9dc:	b952      	cbnz	r2, 801e9f4 <_scanf_chars+0x58>
 801e9de:	2f00      	cmp	r7, #0
 801e9e0:	d031      	beq.n	801ea46 <_scanf_chars+0xaa>
 801e9e2:	e022      	b.n	801ea2a <_scanf_chars+0x8e>
 801e9e4:	2802      	cmp	r0, #2
 801e9e6:	d120      	bne.n	801ea2a <_scanf_chars+0x8e>
 801e9e8:	682b      	ldr	r3, [r5, #0]
 801e9ea:	781b      	ldrb	r3, [r3, #0]
 801e9ec:	f819 3003 	ldrb.w	r3, [r9, r3]
 801e9f0:	071b      	lsls	r3, r3, #28
 801e9f2:	d41a      	bmi.n	801ea2a <_scanf_chars+0x8e>
 801e9f4:	6823      	ldr	r3, [r4, #0]
 801e9f6:	06da      	lsls	r2, r3, #27
 801e9f8:	bf5e      	ittt	pl
 801e9fa:	682b      	ldrpl	r3, [r5, #0]
 801e9fc:	781b      	ldrbpl	r3, [r3, #0]
 801e9fe:	f806 3b01 	strbpl.w	r3, [r6], #1
 801ea02:	682a      	ldr	r2, [r5, #0]
 801ea04:	686b      	ldr	r3, [r5, #4]
 801ea06:	3201      	adds	r2, #1
 801ea08:	602a      	str	r2, [r5, #0]
 801ea0a:	68a2      	ldr	r2, [r4, #8]
 801ea0c:	3b01      	subs	r3, #1
 801ea0e:	3a01      	subs	r2, #1
 801ea10:	606b      	str	r3, [r5, #4]
 801ea12:	3701      	adds	r7, #1
 801ea14:	60a2      	str	r2, [r4, #8]
 801ea16:	b142      	cbz	r2, 801ea2a <_scanf_chars+0x8e>
 801ea18:	2b00      	cmp	r3, #0
 801ea1a:	dcd7      	bgt.n	801e9cc <_scanf_chars+0x30>
 801ea1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801ea20:	4629      	mov	r1, r5
 801ea22:	4640      	mov	r0, r8
 801ea24:	4798      	blx	r3
 801ea26:	2800      	cmp	r0, #0
 801ea28:	d0d0      	beq.n	801e9cc <_scanf_chars+0x30>
 801ea2a:	6823      	ldr	r3, [r4, #0]
 801ea2c:	f013 0310 	ands.w	r3, r3, #16
 801ea30:	d105      	bne.n	801ea3e <_scanf_chars+0xa2>
 801ea32:	68e2      	ldr	r2, [r4, #12]
 801ea34:	3201      	adds	r2, #1
 801ea36:	60e2      	str	r2, [r4, #12]
 801ea38:	69a2      	ldr	r2, [r4, #24]
 801ea3a:	b102      	cbz	r2, 801ea3e <_scanf_chars+0xa2>
 801ea3c:	7033      	strb	r3, [r6, #0]
 801ea3e:	6923      	ldr	r3, [r4, #16]
 801ea40:	443b      	add	r3, r7
 801ea42:	6123      	str	r3, [r4, #16]
 801ea44:	2000      	movs	r0, #0
 801ea46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ea4a:	bf00      	nop
 801ea4c:	08020749 	.word	0x08020749

0801ea50 <_scanf_i>:
 801ea50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea54:	4698      	mov	r8, r3
 801ea56:	4b74      	ldr	r3, [pc, #464]	; (801ec28 <_scanf_i+0x1d8>)
 801ea58:	460c      	mov	r4, r1
 801ea5a:	4682      	mov	sl, r0
 801ea5c:	4616      	mov	r6, r2
 801ea5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ea62:	b087      	sub	sp, #28
 801ea64:	ab03      	add	r3, sp, #12
 801ea66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801ea6a:	4b70      	ldr	r3, [pc, #448]	; (801ec2c <_scanf_i+0x1dc>)
 801ea6c:	69a1      	ldr	r1, [r4, #24]
 801ea6e:	4a70      	ldr	r2, [pc, #448]	; (801ec30 <_scanf_i+0x1e0>)
 801ea70:	2903      	cmp	r1, #3
 801ea72:	bf18      	it	ne
 801ea74:	461a      	movne	r2, r3
 801ea76:	68a3      	ldr	r3, [r4, #8]
 801ea78:	9201      	str	r2, [sp, #4]
 801ea7a:	1e5a      	subs	r2, r3, #1
 801ea7c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801ea80:	bf88      	it	hi
 801ea82:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801ea86:	4627      	mov	r7, r4
 801ea88:	bf82      	ittt	hi
 801ea8a:	eb03 0905 	addhi.w	r9, r3, r5
 801ea8e:	f240 135d 	movwhi	r3, #349	; 0x15d
 801ea92:	60a3      	strhi	r3, [r4, #8]
 801ea94:	f857 3b1c 	ldr.w	r3, [r7], #28
 801ea98:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801ea9c:	bf98      	it	ls
 801ea9e:	f04f 0900 	movls.w	r9, #0
 801eaa2:	6023      	str	r3, [r4, #0]
 801eaa4:	463d      	mov	r5, r7
 801eaa6:	f04f 0b00 	mov.w	fp, #0
 801eaaa:	6831      	ldr	r1, [r6, #0]
 801eaac:	ab03      	add	r3, sp, #12
 801eaae:	7809      	ldrb	r1, [r1, #0]
 801eab0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801eab4:	2202      	movs	r2, #2
 801eab6:	f7e1 fc3b 	bl	8000330 <memchr>
 801eaba:	b328      	cbz	r0, 801eb08 <_scanf_i+0xb8>
 801eabc:	f1bb 0f01 	cmp.w	fp, #1
 801eac0:	d159      	bne.n	801eb76 <_scanf_i+0x126>
 801eac2:	6862      	ldr	r2, [r4, #4]
 801eac4:	b92a      	cbnz	r2, 801ead2 <_scanf_i+0x82>
 801eac6:	6822      	ldr	r2, [r4, #0]
 801eac8:	2308      	movs	r3, #8
 801eaca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801eace:	6063      	str	r3, [r4, #4]
 801ead0:	6022      	str	r2, [r4, #0]
 801ead2:	6822      	ldr	r2, [r4, #0]
 801ead4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801ead8:	6022      	str	r2, [r4, #0]
 801eada:	68a2      	ldr	r2, [r4, #8]
 801eadc:	1e51      	subs	r1, r2, #1
 801eade:	60a1      	str	r1, [r4, #8]
 801eae0:	b192      	cbz	r2, 801eb08 <_scanf_i+0xb8>
 801eae2:	6832      	ldr	r2, [r6, #0]
 801eae4:	1c51      	adds	r1, r2, #1
 801eae6:	6031      	str	r1, [r6, #0]
 801eae8:	7812      	ldrb	r2, [r2, #0]
 801eaea:	f805 2b01 	strb.w	r2, [r5], #1
 801eaee:	6872      	ldr	r2, [r6, #4]
 801eaf0:	3a01      	subs	r2, #1
 801eaf2:	2a00      	cmp	r2, #0
 801eaf4:	6072      	str	r2, [r6, #4]
 801eaf6:	dc07      	bgt.n	801eb08 <_scanf_i+0xb8>
 801eaf8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801eafc:	4631      	mov	r1, r6
 801eafe:	4650      	mov	r0, sl
 801eb00:	4790      	blx	r2
 801eb02:	2800      	cmp	r0, #0
 801eb04:	f040 8085 	bne.w	801ec12 <_scanf_i+0x1c2>
 801eb08:	f10b 0b01 	add.w	fp, fp, #1
 801eb0c:	f1bb 0f03 	cmp.w	fp, #3
 801eb10:	d1cb      	bne.n	801eaaa <_scanf_i+0x5a>
 801eb12:	6863      	ldr	r3, [r4, #4]
 801eb14:	b90b      	cbnz	r3, 801eb1a <_scanf_i+0xca>
 801eb16:	230a      	movs	r3, #10
 801eb18:	6063      	str	r3, [r4, #4]
 801eb1a:	6863      	ldr	r3, [r4, #4]
 801eb1c:	4945      	ldr	r1, [pc, #276]	; (801ec34 <_scanf_i+0x1e4>)
 801eb1e:	6960      	ldr	r0, [r4, #20]
 801eb20:	1ac9      	subs	r1, r1, r3
 801eb22:	f000 f937 	bl	801ed94 <__sccl>
 801eb26:	f04f 0b00 	mov.w	fp, #0
 801eb2a:	68a3      	ldr	r3, [r4, #8]
 801eb2c:	6822      	ldr	r2, [r4, #0]
 801eb2e:	2b00      	cmp	r3, #0
 801eb30:	d03d      	beq.n	801ebae <_scanf_i+0x15e>
 801eb32:	6831      	ldr	r1, [r6, #0]
 801eb34:	6960      	ldr	r0, [r4, #20]
 801eb36:	f891 c000 	ldrb.w	ip, [r1]
 801eb3a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801eb3e:	2800      	cmp	r0, #0
 801eb40:	d035      	beq.n	801ebae <_scanf_i+0x15e>
 801eb42:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801eb46:	d124      	bne.n	801eb92 <_scanf_i+0x142>
 801eb48:	0510      	lsls	r0, r2, #20
 801eb4a:	d522      	bpl.n	801eb92 <_scanf_i+0x142>
 801eb4c:	f10b 0b01 	add.w	fp, fp, #1
 801eb50:	f1b9 0f00 	cmp.w	r9, #0
 801eb54:	d003      	beq.n	801eb5e <_scanf_i+0x10e>
 801eb56:	3301      	adds	r3, #1
 801eb58:	f109 39ff 	add.w	r9, r9, #4294967295
 801eb5c:	60a3      	str	r3, [r4, #8]
 801eb5e:	6873      	ldr	r3, [r6, #4]
 801eb60:	3b01      	subs	r3, #1
 801eb62:	2b00      	cmp	r3, #0
 801eb64:	6073      	str	r3, [r6, #4]
 801eb66:	dd1b      	ble.n	801eba0 <_scanf_i+0x150>
 801eb68:	6833      	ldr	r3, [r6, #0]
 801eb6a:	3301      	adds	r3, #1
 801eb6c:	6033      	str	r3, [r6, #0]
 801eb6e:	68a3      	ldr	r3, [r4, #8]
 801eb70:	3b01      	subs	r3, #1
 801eb72:	60a3      	str	r3, [r4, #8]
 801eb74:	e7d9      	b.n	801eb2a <_scanf_i+0xda>
 801eb76:	f1bb 0f02 	cmp.w	fp, #2
 801eb7a:	d1ae      	bne.n	801eada <_scanf_i+0x8a>
 801eb7c:	6822      	ldr	r2, [r4, #0]
 801eb7e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801eb82:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801eb86:	d1bf      	bne.n	801eb08 <_scanf_i+0xb8>
 801eb88:	2310      	movs	r3, #16
 801eb8a:	6063      	str	r3, [r4, #4]
 801eb8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801eb90:	e7a2      	b.n	801ead8 <_scanf_i+0x88>
 801eb92:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801eb96:	6022      	str	r2, [r4, #0]
 801eb98:	780b      	ldrb	r3, [r1, #0]
 801eb9a:	f805 3b01 	strb.w	r3, [r5], #1
 801eb9e:	e7de      	b.n	801eb5e <_scanf_i+0x10e>
 801eba0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801eba4:	4631      	mov	r1, r6
 801eba6:	4650      	mov	r0, sl
 801eba8:	4798      	blx	r3
 801ebaa:	2800      	cmp	r0, #0
 801ebac:	d0df      	beq.n	801eb6e <_scanf_i+0x11e>
 801ebae:	6823      	ldr	r3, [r4, #0]
 801ebb0:	05d9      	lsls	r1, r3, #23
 801ebb2:	d50d      	bpl.n	801ebd0 <_scanf_i+0x180>
 801ebb4:	42bd      	cmp	r5, r7
 801ebb6:	d909      	bls.n	801ebcc <_scanf_i+0x17c>
 801ebb8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801ebbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ebc0:	4632      	mov	r2, r6
 801ebc2:	4650      	mov	r0, sl
 801ebc4:	4798      	blx	r3
 801ebc6:	f105 39ff 	add.w	r9, r5, #4294967295
 801ebca:	464d      	mov	r5, r9
 801ebcc:	42bd      	cmp	r5, r7
 801ebce:	d028      	beq.n	801ec22 <_scanf_i+0x1d2>
 801ebd0:	6822      	ldr	r2, [r4, #0]
 801ebd2:	f012 0210 	ands.w	r2, r2, #16
 801ebd6:	d113      	bne.n	801ec00 <_scanf_i+0x1b0>
 801ebd8:	702a      	strb	r2, [r5, #0]
 801ebda:	6863      	ldr	r3, [r4, #4]
 801ebdc:	9e01      	ldr	r6, [sp, #4]
 801ebde:	4639      	mov	r1, r7
 801ebe0:	4650      	mov	r0, sl
 801ebe2:	47b0      	blx	r6
 801ebe4:	f8d8 3000 	ldr.w	r3, [r8]
 801ebe8:	6821      	ldr	r1, [r4, #0]
 801ebea:	1d1a      	adds	r2, r3, #4
 801ebec:	f8c8 2000 	str.w	r2, [r8]
 801ebf0:	f011 0f20 	tst.w	r1, #32
 801ebf4:	681b      	ldr	r3, [r3, #0]
 801ebf6:	d00f      	beq.n	801ec18 <_scanf_i+0x1c8>
 801ebf8:	6018      	str	r0, [r3, #0]
 801ebfa:	68e3      	ldr	r3, [r4, #12]
 801ebfc:	3301      	adds	r3, #1
 801ebfe:	60e3      	str	r3, [r4, #12]
 801ec00:	6923      	ldr	r3, [r4, #16]
 801ec02:	1bed      	subs	r5, r5, r7
 801ec04:	445d      	add	r5, fp
 801ec06:	442b      	add	r3, r5
 801ec08:	6123      	str	r3, [r4, #16]
 801ec0a:	2000      	movs	r0, #0
 801ec0c:	b007      	add	sp, #28
 801ec0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec12:	f04f 0b00 	mov.w	fp, #0
 801ec16:	e7ca      	b.n	801ebae <_scanf_i+0x15e>
 801ec18:	07ca      	lsls	r2, r1, #31
 801ec1a:	bf4c      	ite	mi
 801ec1c:	8018      	strhmi	r0, [r3, #0]
 801ec1e:	6018      	strpl	r0, [r3, #0]
 801ec20:	e7eb      	b.n	801ebfa <_scanf_i+0x1aa>
 801ec22:	2001      	movs	r0, #1
 801ec24:	e7f2      	b.n	801ec0c <_scanf_i+0x1bc>
 801ec26:	bf00      	nop
 801ec28:	0801ffc4 	.word	0x0801ffc4
 801ec2c:	0801f785 	.word	0x0801f785
 801ec30:	0801e345 	.word	0x0801e345
 801ec34:	0802086a 	.word	0x0802086a

0801ec38 <__sflush_r>:
 801ec38:	898a      	ldrh	r2, [r1, #12]
 801ec3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec3e:	4605      	mov	r5, r0
 801ec40:	0710      	lsls	r0, r2, #28
 801ec42:	460c      	mov	r4, r1
 801ec44:	d458      	bmi.n	801ecf8 <__sflush_r+0xc0>
 801ec46:	684b      	ldr	r3, [r1, #4]
 801ec48:	2b00      	cmp	r3, #0
 801ec4a:	dc05      	bgt.n	801ec58 <__sflush_r+0x20>
 801ec4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ec4e:	2b00      	cmp	r3, #0
 801ec50:	dc02      	bgt.n	801ec58 <__sflush_r+0x20>
 801ec52:	2000      	movs	r0, #0
 801ec54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ec58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ec5a:	2e00      	cmp	r6, #0
 801ec5c:	d0f9      	beq.n	801ec52 <__sflush_r+0x1a>
 801ec5e:	2300      	movs	r3, #0
 801ec60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ec64:	682f      	ldr	r7, [r5, #0]
 801ec66:	6a21      	ldr	r1, [r4, #32]
 801ec68:	602b      	str	r3, [r5, #0]
 801ec6a:	d032      	beq.n	801ecd2 <__sflush_r+0x9a>
 801ec6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ec6e:	89a3      	ldrh	r3, [r4, #12]
 801ec70:	075a      	lsls	r2, r3, #29
 801ec72:	d505      	bpl.n	801ec80 <__sflush_r+0x48>
 801ec74:	6863      	ldr	r3, [r4, #4]
 801ec76:	1ac0      	subs	r0, r0, r3
 801ec78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ec7a:	b10b      	cbz	r3, 801ec80 <__sflush_r+0x48>
 801ec7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ec7e:	1ac0      	subs	r0, r0, r3
 801ec80:	2300      	movs	r3, #0
 801ec82:	4602      	mov	r2, r0
 801ec84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ec86:	6a21      	ldr	r1, [r4, #32]
 801ec88:	4628      	mov	r0, r5
 801ec8a:	47b0      	blx	r6
 801ec8c:	1c43      	adds	r3, r0, #1
 801ec8e:	89a3      	ldrh	r3, [r4, #12]
 801ec90:	d106      	bne.n	801eca0 <__sflush_r+0x68>
 801ec92:	6829      	ldr	r1, [r5, #0]
 801ec94:	291d      	cmp	r1, #29
 801ec96:	d82b      	bhi.n	801ecf0 <__sflush_r+0xb8>
 801ec98:	4a29      	ldr	r2, [pc, #164]	; (801ed40 <__sflush_r+0x108>)
 801ec9a:	410a      	asrs	r2, r1
 801ec9c:	07d6      	lsls	r6, r2, #31
 801ec9e:	d427      	bmi.n	801ecf0 <__sflush_r+0xb8>
 801eca0:	2200      	movs	r2, #0
 801eca2:	6062      	str	r2, [r4, #4]
 801eca4:	04d9      	lsls	r1, r3, #19
 801eca6:	6922      	ldr	r2, [r4, #16]
 801eca8:	6022      	str	r2, [r4, #0]
 801ecaa:	d504      	bpl.n	801ecb6 <__sflush_r+0x7e>
 801ecac:	1c42      	adds	r2, r0, #1
 801ecae:	d101      	bne.n	801ecb4 <__sflush_r+0x7c>
 801ecb0:	682b      	ldr	r3, [r5, #0]
 801ecb2:	b903      	cbnz	r3, 801ecb6 <__sflush_r+0x7e>
 801ecb4:	6560      	str	r0, [r4, #84]	; 0x54
 801ecb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ecb8:	602f      	str	r7, [r5, #0]
 801ecba:	2900      	cmp	r1, #0
 801ecbc:	d0c9      	beq.n	801ec52 <__sflush_r+0x1a>
 801ecbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ecc2:	4299      	cmp	r1, r3
 801ecc4:	d002      	beq.n	801eccc <__sflush_r+0x94>
 801ecc6:	4628      	mov	r0, r5
 801ecc8:	f7fd ff3e 	bl	801cb48 <_free_r>
 801eccc:	2000      	movs	r0, #0
 801ecce:	6360      	str	r0, [r4, #52]	; 0x34
 801ecd0:	e7c0      	b.n	801ec54 <__sflush_r+0x1c>
 801ecd2:	2301      	movs	r3, #1
 801ecd4:	4628      	mov	r0, r5
 801ecd6:	47b0      	blx	r6
 801ecd8:	1c41      	adds	r1, r0, #1
 801ecda:	d1c8      	bne.n	801ec6e <__sflush_r+0x36>
 801ecdc:	682b      	ldr	r3, [r5, #0]
 801ecde:	2b00      	cmp	r3, #0
 801ece0:	d0c5      	beq.n	801ec6e <__sflush_r+0x36>
 801ece2:	2b1d      	cmp	r3, #29
 801ece4:	d001      	beq.n	801ecea <__sflush_r+0xb2>
 801ece6:	2b16      	cmp	r3, #22
 801ece8:	d101      	bne.n	801ecee <__sflush_r+0xb6>
 801ecea:	602f      	str	r7, [r5, #0]
 801ecec:	e7b1      	b.n	801ec52 <__sflush_r+0x1a>
 801ecee:	89a3      	ldrh	r3, [r4, #12]
 801ecf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ecf4:	81a3      	strh	r3, [r4, #12]
 801ecf6:	e7ad      	b.n	801ec54 <__sflush_r+0x1c>
 801ecf8:	690f      	ldr	r7, [r1, #16]
 801ecfa:	2f00      	cmp	r7, #0
 801ecfc:	d0a9      	beq.n	801ec52 <__sflush_r+0x1a>
 801ecfe:	0793      	lsls	r3, r2, #30
 801ed00:	680e      	ldr	r6, [r1, #0]
 801ed02:	bf08      	it	eq
 801ed04:	694b      	ldreq	r3, [r1, #20]
 801ed06:	600f      	str	r7, [r1, #0]
 801ed08:	bf18      	it	ne
 801ed0a:	2300      	movne	r3, #0
 801ed0c:	eba6 0807 	sub.w	r8, r6, r7
 801ed10:	608b      	str	r3, [r1, #8]
 801ed12:	f1b8 0f00 	cmp.w	r8, #0
 801ed16:	dd9c      	ble.n	801ec52 <__sflush_r+0x1a>
 801ed18:	6a21      	ldr	r1, [r4, #32]
 801ed1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ed1c:	4643      	mov	r3, r8
 801ed1e:	463a      	mov	r2, r7
 801ed20:	4628      	mov	r0, r5
 801ed22:	47b0      	blx	r6
 801ed24:	2800      	cmp	r0, #0
 801ed26:	dc06      	bgt.n	801ed36 <__sflush_r+0xfe>
 801ed28:	89a3      	ldrh	r3, [r4, #12]
 801ed2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ed2e:	81a3      	strh	r3, [r4, #12]
 801ed30:	f04f 30ff 	mov.w	r0, #4294967295
 801ed34:	e78e      	b.n	801ec54 <__sflush_r+0x1c>
 801ed36:	4407      	add	r7, r0
 801ed38:	eba8 0800 	sub.w	r8, r8, r0
 801ed3c:	e7e9      	b.n	801ed12 <__sflush_r+0xda>
 801ed3e:	bf00      	nop
 801ed40:	dfbffffe 	.word	0xdfbffffe

0801ed44 <_fflush_r>:
 801ed44:	b538      	push	{r3, r4, r5, lr}
 801ed46:	690b      	ldr	r3, [r1, #16]
 801ed48:	4605      	mov	r5, r0
 801ed4a:	460c      	mov	r4, r1
 801ed4c:	b913      	cbnz	r3, 801ed54 <_fflush_r+0x10>
 801ed4e:	2500      	movs	r5, #0
 801ed50:	4628      	mov	r0, r5
 801ed52:	bd38      	pop	{r3, r4, r5, pc}
 801ed54:	b118      	cbz	r0, 801ed5e <_fflush_r+0x1a>
 801ed56:	6a03      	ldr	r3, [r0, #32]
 801ed58:	b90b      	cbnz	r3, 801ed5e <_fflush_r+0x1a>
 801ed5a:	f7fc ff9b 	bl	801bc94 <__sinit>
 801ed5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ed62:	2b00      	cmp	r3, #0
 801ed64:	d0f3      	beq.n	801ed4e <_fflush_r+0xa>
 801ed66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ed68:	07d0      	lsls	r0, r2, #31
 801ed6a:	d404      	bmi.n	801ed76 <_fflush_r+0x32>
 801ed6c:	0599      	lsls	r1, r3, #22
 801ed6e:	d402      	bmi.n	801ed76 <_fflush_r+0x32>
 801ed70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ed72:	f7fd f8d4 	bl	801bf1e <__retarget_lock_acquire_recursive>
 801ed76:	4628      	mov	r0, r5
 801ed78:	4621      	mov	r1, r4
 801ed7a:	f7ff ff5d 	bl	801ec38 <__sflush_r>
 801ed7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ed80:	07da      	lsls	r2, r3, #31
 801ed82:	4605      	mov	r5, r0
 801ed84:	d4e4      	bmi.n	801ed50 <_fflush_r+0xc>
 801ed86:	89a3      	ldrh	r3, [r4, #12]
 801ed88:	059b      	lsls	r3, r3, #22
 801ed8a:	d4e1      	bmi.n	801ed50 <_fflush_r+0xc>
 801ed8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ed8e:	f7fd f8c7 	bl	801bf20 <__retarget_lock_release_recursive>
 801ed92:	e7dd      	b.n	801ed50 <_fflush_r+0xc>

0801ed94 <__sccl>:
 801ed94:	b570      	push	{r4, r5, r6, lr}
 801ed96:	780b      	ldrb	r3, [r1, #0]
 801ed98:	4604      	mov	r4, r0
 801ed9a:	2b5e      	cmp	r3, #94	; 0x5e
 801ed9c:	bf0b      	itete	eq
 801ed9e:	784b      	ldrbeq	r3, [r1, #1]
 801eda0:	1c4a      	addne	r2, r1, #1
 801eda2:	1c8a      	addeq	r2, r1, #2
 801eda4:	2100      	movne	r1, #0
 801eda6:	bf08      	it	eq
 801eda8:	2101      	moveq	r1, #1
 801edaa:	3801      	subs	r0, #1
 801edac:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801edb0:	f800 1f01 	strb.w	r1, [r0, #1]!
 801edb4:	42a8      	cmp	r0, r5
 801edb6:	d1fb      	bne.n	801edb0 <__sccl+0x1c>
 801edb8:	b90b      	cbnz	r3, 801edbe <__sccl+0x2a>
 801edba:	1e50      	subs	r0, r2, #1
 801edbc:	bd70      	pop	{r4, r5, r6, pc}
 801edbe:	f081 0101 	eor.w	r1, r1, #1
 801edc2:	54e1      	strb	r1, [r4, r3]
 801edc4:	4610      	mov	r0, r2
 801edc6:	4602      	mov	r2, r0
 801edc8:	f812 5b01 	ldrb.w	r5, [r2], #1
 801edcc:	2d2d      	cmp	r5, #45	; 0x2d
 801edce:	d005      	beq.n	801eddc <__sccl+0x48>
 801edd0:	2d5d      	cmp	r5, #93	; 0x5d
 801edd2:	d016      	beq.n	801ee02 <__sccl+0x6e>
 801edd4:	2d00      	cmp	r5, #0
 801edd6:	d0f1      	beq.n	801edbc <__sccl+0x28>
 801edd8:	462b      	mov	r3, r5
 801edda:	e7f2      	b.n	801edc2 <__sccl+0x2e>
 801eddc:	7846      	ldrb	r6, [r0, #1]
 801edde:	2e5d      	cmp	r6, #93	; 0x5d
 801ede0:	d0fa      	beq.n	801edd8 <__sccl+0x44>
 801ede2:	42b3      	cmp	r3, r6
 801ede4:	dcf8      	bgt.n	801edd8 <__sccl+0x44>
 801ede6:	3002      	adds	r0, #2
 801ede8:	461a      	mov	r2, r3
 801edea:	3201      	adds	r2, #1
 801edec:	4296      	cmp	r6, r2
 801edee:	54a1      	strb	r1, [r4, r2]
 801edf0:	dcfb      	bgt.n	801edea <__sccl+0x56>
 801edf2:	1af2      	subs	r2, r6, r3
 801edf4:	3a01      	subs	r2, #1
 801edf6:	1c5d      	adds	r5, r3, #1
 801edf8:	42b3      	cmp	r3, r6
 801edfa:	bfa8      	it	ge
 801edfc:	2200      	movge	r2, #0
 801edfe:	18ab      	adds	r3, r5, r2
 801ee00:	e7e1      	b.n	801edc6 <__sccl+0x32>
 801ee02:	4610      	mov	r0, r2
 801ee04:	e7da      	b.n	801edbc <__sccl+0x28>

0801ee06 <__submore>:
 801ee06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ee0a:	460c      	mov	r4, r1
 801ee0c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801ee0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ee12:	4299      	cmp	r1, r3
 801ee14:	d11d      	bne.n	801ee52 <__submore+0x4c>
 801ee16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ee1a:	f7fd ff09 	bl	801cc30 <_malloc_r>
 801ee1e:	b918      	cbnz	r0, 801ee28 <__submore+0x22>
 801ee20:	f04f 30ff 	mov.w	r0, #4294967295
 801ee24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ee28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ee2c:	63a3      	str	r3, [r4, #56]	; 0x38
 801ee2e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801ee32:	6360      	str	r0, [r4, #52]	; 0x34
 801ee34:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801ee38:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801ee3c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801ee40:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801ee44:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801ee48:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801ee4c:	6020      	str	r0, [r4, #0]
 801ee4e:	2000      	movs	r0, #0
 801ee50:	e7e8      	b.n	801ee24 <__submore+0x1e>
 801ee52:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801ee54:	0077      	lsls	r7, r6, #1
 801ee56:	463a      	mov	r2, r7
 801ee58:	f000 fbf3 	bl	801f642 <_realloc_r>
 801ee5c:	4605      	mov	r5, r0
 801ee5e:	2800      	cmp	r0, #0
 801ee60:	d0de      	beq.n	801ee20 <__submore+0x1a>
 801ee62:	eb00 0806 	add.w	r8, r0, r6
 801ee66:	4601      	mov	r1, r0
 801ee68:	4632      	mov	r2, r6
 801ee6a:	4640      	mov	r0, r8
 801ee6c:	f7fd f861 	bl	801bf32 <memcpy>
 801ee70:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801ee74:	f8c4 8000 	str.w	r8, [r4]
 801ee78:	e7e9      	b.n	801ee4e <__submore+0x48>

0801ee7a <memmove>:
 801ee7a:	4288      	cmp	r0, r1
 801ee7c:	b510      	push	{r4, lr}
 801ee7e:	eb01 0402 	add.w	r4, r1, r2
 801ee82:	d902      	bls.n	801ee8a <memmove+0x10>
 801ee84:	4284      	cmp	r4, r0
 801ee86:	4623      	mov	r3, r4
 801ee88:	d807      	bhi.n	801ee9a <memmove+0x20>
 801ee8a:	1e43      	subs	r3, r0, #1
 801ee8c:	42a1      	cmp	r1, r4
 801ee8e:	d008      	beq.n	801eea2 <memmove+0x28>
 801ee90:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ee94:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ee98:	e7f8      	b.n	801ee8c <memmove+0x12>
 801ee9a:	4402      	add	r2, r0
 801ee9c:	4601      	mov	r1, r0
 801ee9e:	428a      	cmp	r2, r1
 801eea0:	d100      	bne.n	801eea4 <memmove+0x2a>
 801eea2:	bd10      	pop	{r4, pc}
 801eea4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801eea8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801eeac:	e7f7      	b.n	801ee9e <memmove+0x24>

0801eeae <strncmp>:
 801eeae:	b510      	push	{r4, lr}
 801eeb0:	b16a      	cbz	r2, 801eece <strncmp+0x20>
 801eeb2:	3901      	subs	r1, #1
 801eeb4:	1884      	adds	r4, r0, r2
 801eeb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801eeba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801eebe:	429a      	cmp	r2, r3
 801eec0:	d103      	bne.n	801eeca <strncmp+0x1c>
 801eec2:	42a0      	cmp	r0, r4
 801eec4:	d001      	beq.n	801eeca <strncmp+0x1c>
 801eec6:	2a00      	cmp	r2, #0
 801eec8:	d1f5      	bne.n	801eeb6 <strncmp+0x8>
 801eeca:	1ad0      	subs	r0, r2, r3
 801eecc:	bd10      	pop	{r4, pc}
 801eece:	4610      	mov	r0, r2
 801eed0:	e7fc      	b.n	801eecc <strncmp+0x1e>
	...

0801eed4 <_sbrk_r>:
 801eed4:	b538      	push	{r3, r4, r5, lr}
 801eed6:	4d06      	ldr	r5, [pc, #24]	; (801eef0 <_sbrk_r+0x1c>)
 801eed8:	2300      	movs	r3, #0
 801eeda:	4604      	mov	r4, r0
 801eedc:	4608      	mov	r0, r1
 801eede:	602b      	str	r3, [r5, #0]
 801eee0:	f7e5 f800 	bl	8003ee4 <_sbrk>
 801eee4:	1c43      	adds	r3, r0, #1
 801eee6:	d102      	bne.n	801eeee <_sbrk_r+0x1a>
 801eee8:	682b      	ldr	r3, [r5, #0]
 801eeea:	b103      	cbz	r3, 801eeee <_sbrk_r+0x1a>
 801eeec:	6023      	str	r3, [r4, #0]
 801eeee:	bd38      	pop	{r3, r4, r5, pc}
 801eef0:	24003620 	.word	0x24003620
 801eef4:	00000000 	.word	0x00000000

0801eef8 <nan>:
 801eef8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801ef00 <nan+0x8>
 801eefc:	4770      	bx	lr
 801eefe:	bf00      	nop
 801ef00:	00000000 	.word	0x00000000
 801ef04:	7ff80000 	.word	0x7ff80000

0801ef08 <__assert_func>:
 801ef08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ef0a:	4614      	mov	r4, r2
 801ef0c:	461a      	mov	r2, r3
 801ef0e:	4b09      	ldr	r3, [pc, #36]	; (801ef34 <__assert_func+0x2c>)
 801ef10:	681b      	ldr	r3, [r3, #0]
 801ef12:	4605      	mov	r5, r0
 801ef14:	68d8      	ldr	r0, [r3, #12]
 801ef16:	b14c      	cbz	r4, 801ef2c <__assert_func+0x24>
 801ef18:	4b07      	ldr	r3, [pc, #28]	; (801ef38 <__assert_func+0x30>)
 801ef1a:	9100      	str	r1, [sp, #0]
 801ef1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ef20:	4906      	ldr	r1, [pc, #24]	; (801ef3c <__assert_func+0x34>)
 801ef22:	462b      	mov	r3, r5
 801ef24:	f000 fc3e 	bl	801f7a4 <fiprintf>
 801ef28:	f000 fc4e 	bl	801f7c8 <abort>
 801ef2c:	4b04      	ldr	r3, [pc, #16]	; (801ef40 <__assert_func+0x38>)
 801ef2e:	461c      	mov	r4, r3
 801ef30:	e7f3      	b.n	801ef1a <__assert_func+0x12>
 801ef32:	bf00      	nop
 801ef34:	24000158 	.word	0x24000158
 801ef38:	0802087d 	.word	0x0802087d
 801ef3c:	0802088a 	.word	0x0802088a
 801ef40:	080208b8 	.word	0x080208b8

0801ef44 <_calloc_r>:
 801ef44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ef46:	fba1 2402 	umull	r2, r4, r1, r2
 801ef4a:	b94c      	cbnz	r4, 801ef60 <_calloc_r+0x1c>
 801ef4c:	4611      	mov	r1, r2
 801ef4e:	9201      	str	r2, [sp, #4]
 801ef50:	f7fd fe6e 	bl	801cc30 <_malloc_r>
 801ef54:	9a01      	ldr	r2, [sp, #4]
 801ef56:	4605      	mov	r5, r0
 801ef58:	b930      	cbnz	r0, 801ef68 <_calloc_r+0x24>
 801ef5a:	4628      	mov	r0, r5
 801ef5c:	b003      	add	sp, #12
 801ef5e:	bd30      	pop	{r4, r5, pc}
 801ef60:	220c      	movs	r2, #12
 801ef62:	6002      	str	r2, [r0, #0]
 801ef64:	2500      	movs	r5, #0
 801ef66:	e7f8      	b.n	801ef5a <_calloc_r+0x16>
 801ef68:	4621      	mov	r1, r4
 801ef6a:	f7fc ff5a 	bl	801be22 <memset>
 801ef6e:	e7f4      	b.n	801ef5a <_calloc_r+0x16>

0801ef70 <rshift>:
 801ef70:	6903      	ldr	r3, [r0, #16]
 801ef72:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801ef76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ef7a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801ef7e:	f100 0414 	add.w	r4, r0, #20
 801ef82:	dd45      	ble.n	801f010 <rshift+0xa0>
 801ef84:	f011 011f 	ands.w	r1, r1, #31
 801ef88:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801ef8c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801ef90:	d10c      	bne.n	801efac <rshift+0x3c>
 801ef92:	f100 0710 	add.w	r7, r0, #16
 801ef96:	4629      	mov	r1, r5
 801ef98:	42b1      	cmp	r1, r6
 801ef9a:	d334      	bcc.n	801f006 <rshift+0x96>
 801ef9c:	1a9b      	subs	r3, r3, r2
 801ef9e:	009b      	lsls	r3, r3, #2
 801efa0:	1eea      	subs	r2, r5, #3
 801efa2:	4296      	cmp	r6, r2
 801efa4:	bf38      	it	cc
 801efa6:	2300      	movcc	r3, #0
 801efa8:	4423      	add	r3, r4
 801efaa:	e015      	b.n	801efd8 <rshift+0x68>
 801efac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801efb0:	f1c1 0820 	rsb	r8, r1, #32
 801efb4:	40cf      	lsrs	r7, r1
 801efb6:	f105 0e04 	add.w	lr, r5, #4
 801efba:	46a1      	mov	r9, r4
 801efbc:	4576      	cmp	r6, lr
 801efbe:	46f4      	mov	ip, lr
 801efc0:	d815      	bhi.n	801efee <rshift+0x7e>
 801efc2:	1a9a      	subs	r2, r3, r2
 801efc4:	0092      	lsls	r2, r2, #2
 801efc6:	3a04      	subs	r2, #4
 801efc8:	3501      	adds	r5, #1
 801efca:	42ae      	cmp	r6, r5
 801efcc:	bf38      	it	cc
 801efce:	2200      	movcc	r2, #0
 801efd0:	18a3      	adds	r3, r4, r2
 801efd2:	50a7      	str	r7, [r4, r2]
 801efd4:	b107      	cbz	r7, 801efd8 <rshift+0x68>
 801efd6:	3304      	adds	r3, #4
 801efd8:	1b1a      	subs	r2, r3, r4
 801efda:	42a3      	cmp	r3, r4
 801efdc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801efe0:	bf08      	it	eq
 801efe2:	2300      	moveq	r3, #0
 801efe4:	6102      	str	r2, [r0, #16]
 801efe6:	bf08      	it	eq
 801efe8:	6143      	streq	r3, [r0, #20]
 801efea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801efee:	f8dc c000 	ldr.w	ip, [ip]
 801eff2:	fa0c fc08 	lsl.w	ip, ip, r8
 801eff6:	ea4c 0707 	orr.w	r7, ip, r7
 801effa:	f849 7b04 	str.w	r7, [r9], #4
 801effe:	f85e 7b04 	ldr.w	r7, [lr], #4
 801f002:	40cf      	lsrs	r7, r1
 801f004:	e7da      	b.n	801efbc <rshift+0x4c>
 801f006:	f851 cb04 	ldr.w	ip, [r1], #4
 801f00a:	f847 cf04 	str.w	ip, [r7, #4]!
 801f00e:	e7c3      	b.n	801ef98 <rshift+0x28>
 801f010:	4623      	mov	r3, r4
 801f012:	e7e1      	b.n	801efd8 <rshift+0x68>

0801f014 <__hexdig_fun>:
 801f014:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801f018:	2b09      	cmp	r3, #9
 801f01a:	d802      	bhi.n	801f022 <__hexdig_fun+0xe>
 801f01c:	3820      	subs	r0, #32
 801f01e:	b2c0      	uxtb	r0, r0
 801f020:	4770      	bx	lr
 801f022:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801f026:	2b05      	cmp	r3, #5
 801f028:	d801      	bhi.n	801f02e <__hexdig_fun+0x1a>
 801f02a:	3847      	subs	r0, #71	; 0x47
 801f02c:	e7f7      	b.n	801f01e <__hexdig_fun+0xa>
 801f02e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801f032:	2b05      	cmp	r3, #5
 801f034:	d801      	bhi.n	801f03a <__hexdig_fun+0x26>
 801f036:	3827      	subs	r0, #39	; 0x27
 801f038:	e7f1      	b.n	801f01e <__hexdig_fun+0xa>
 801f03a:	2000      	movs	r0, #0
 801f03c:	4770      	bx	lr
	...

0801f040 <__gethex>:
 801f040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f044:	4617      	mov	r7, r2
 801f046:	680a      	ldr	r2, [r1, #0]
 801f048:	b085      	sub	sp, #20
 801f04a:	f102 0b02 	add.w	fp, r2, #2
 801f04e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801f052:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801f056:	4681      	mov	r9, r0
 801f058:	468a      	mov	sl, r1
 801f05a:	9302      	str	r3, [sp, #8]
 801f05c:	32fe      	adds	r2, #254	; 0xfe
 801f05e:	eb02 030b 	add.w	r3, r2, fp
 801f062:	46d8      	mov	r8, fp
 801f064:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801f068:	9301      	str	r3, [sp, #4]
 801f06a:	2830      	cmp	r0, #48	; 0x30
 801f06c:	d0f7      	beq.n	801f05e <__gethex+0x1e>
 801f06e:	f7ff ffd1 	bl	801f014 <__hexdig_fun>
 801f072:	4604      	mov	r4, r0
 801f074:	2800      	cmp	r0, #0
 801f076:	d138      	bne.n	801f0ea <__gethex+0xaa>
 801f078:	49a7      	ldr	r1, [pc, #668]	; (801f318 <__gethex+0x2d8>)
 801f07a:	2201      	movs	r2, #1
 801f07c:	4640      	mov	r0, r8
 801f07e:	f7ff ff16 	bl	801eeae <strncmp>
 801f082:	4606      	mov	r6, r0
 801f084:	2800      	cmp	r0, #0
 801f086:	d169      	bne.n	801f15c <__gethex+0x11c>
 801f088:	f898 0001 	ldrb.w	r0, [r8, #1]
 801f08c:	465d      	mov	r5, fp
 801f08e:	f7ff ffc1 	bl	801f014 <__hexdig_fun>
 801f092:	2800      	cmp	r0, #0
 801f094:	d064      	beq.n	801f160 <__gethex+0x120>
 801f096:	465a      	mov	r2, fp
 801f098:	7810      	ldrb	r0, [r2, #0]
 801f09a:	2830      	cmp	r0, #48	; 0x30
 801f09c:	4690      	mov	r8, r2
 801f09e:	f102 0201 	add.w	r2, r2, #1
 801f0a2:	d0f9      	beq.n	801f098 <__gethex+0x58>
 801f0a4:	f7ff ffb6 	bl	801f014 <__hexdig_fun>
 801f0a8:	2301      	movs	r3, #1
 801f0aa:	fab0 f480 	clz	r4, r0
 801f0ae:	0964      	lsrs	r4, r4, #5
 801f0b0:	465e      	mov	r6, fp
 801f0b2:	9301      	str	r3, [sp, #4]
 801f0b4:	4642      	mov	r2, r8
 801f0b6:	4615      	mov	r5, r2
 801f0b8:	3201      	adds	r2, #1
 801f0ba:	7828      	ldrb	r0, [r5, #0]
 801f0bc:	f7ff ffaa 	bl	801f014 <__hexdig_fun>
 801f0c0:	2800      	cmp	r0, #0
 801f0c2:	d1f8      	bne.n	801f0b6 <__gethex+0x76>
 801f0c4:	4994      	ldr	r1, [pc, #592]	; (801f318 <__gethex+0x2d8>)
 801f0c6:	2201      	movs	r2, #1
 801f0c8:	4628      	mov	r0, r5
 801f0ca:	f7ff fef0 	bl	801eeae <strncmp>
 801f0ce:	b978      	cbnz	r0, 801f0f0 <__gethex+0xb0>
 801f0d0:	b946      	cbnz	r6, 801f0e4 <__gethex+0xa4>
 801f0d2:	1c6e      	adds	r6, r5, #1
 801f0d4:	4632      	mov	r2, r6
 801f0d6:	4615      	mov	r5, r2
 801f0d8:	3201      	adds	r2, #1
 801f0da:	7828      	ldrb	r0, [r5, #0]
 801f0dc:	f7ff ff9a 	bl	801f014 <__hexdig_fun>
 801f0e0:	2800      	cmp	r0, #0
 801f0e2:	d1f8      	bne.n	801f0d6 <__gethex+0x96>
 801f0e4:	1b73      	subs	r3, r6, r5
 801f0e6:	009e      	lsls	r6, r3, #2
 801f0e8:	e004      	b.n	801f0f4 <__gethex+0xb4>
 801f0ea:	2400      	movs	r4, #0
 801f0ec:	4626      	mov	r6, r4
 801f0ee:	e7e1      	b.n	801f0b4 <__gethex+0x74>
 801f0f0:	2e00      	cmp	r6, #0
 801f0f2:	d1f7      	bne.n	801f0e4 <__gethex+0xa4>
 801f0f4:	782b      	ldrb	r3, [r5, #0]
 801f0f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801f0fa:	2b50      	cmp	r3, #80	; 0x50
 801f0fc:	d13d      	bne.n	801f17a <__gethex+0x13a>
 801f0fe:	786b      	ldrb	r3, [r5, #1]
 801f100:	2b2b      	cmp	r3, #43	; 0x2b
 801f102:	d02f      	beq.n	801f164 <__gethex+0x124>
 801f104:	2b2d      	cmp	r3, #45	; 0x2d
 801f106:	d031      	beq.n	801f16c <__gethex+0x12c>
 801f108:	1c69      	adds	r1, r5, #1
 801f10a:	f04f 0b00 	mov.w	fp, #0
 801f10e:	7808      	ldrb	r0, [r1, #0]
 801f110:	f7ff ff80 	bl	801f014 <__hexdig_fun>
 801f114:	1e42      	subs	r2, r0, #1
 801f116:	b2d2      	uxtb	r2, r2
 801f118:	2a18      	cmp	r2, #24
 801f11a:	d82e      	bhi.n	801f17a <__gethex+0x13a>
 801f11c:	f1a0 0210 	sub.w	r2, r0, #16
 801f120:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801f124:	f7ff ff76 	bl	801f014 <__hexdig_fun>
 801f128:	f100 3cff 	add.w	ip, r0, #4294967295
 801f12c:	fa5f fc8c 	uxtb.w	ip, ip
 801f130:	f1bc 0f18 	cmp.w	ip, #24
 801f134:	d91d      	bls.n	801f172 <__gethex+0x132>
 801f136:	f1bb 0f00 	cmp.w	fp, #0
 801f13a:	d000      	beq.n	801f13e <__gethex+0xfe>
 801f13c:	4252      	negs	r2, r2
 801f13e:	4416      	add	r6, r2
 801f140:	f8ca 1000 	str.w	r1, [sl]
 801f144:	b1dc      	cbz	r4, 801f17e <__gethex+0x13e>
 801f146:	9b01      	ldr	r3, [sp, #4]
 801f148:	2b00      	cmp	r3, #0
 801f14a:	bf14      	ite	ne
 801f14c:	f04f 0800 	movne.w	r8, #0
 801f150:	f04f 0806 	moveq.w	r8, #6
 801f154:	4640      	mov	r0, r8
 801f156:	b005      	add	sp, #20
 801f158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f15c:	4645      	mov	r5, r8
 801f15e:	4626      	mov	r6, r4
 801f160:	2401      	movs	r4, #1
 801f162:	e7c7      	b.n	801f0f4 <__gethex+0xb4>
 801f164:	f04f 0b00 	mov.w	fp, #0
 801f168:	1ca9      	adds	r1, r5, #2
 801f16a:	e7d0      	b.n	801f10e <__gethex+0xce>
 801f16c:	f04f 0b01 	mov.w	fp, #1
 801f170:	e7fa      	b.n	801f168 <__gethex+0x128>
 801f172:	230a      	movs	r3, #10
 801f174:	fb03 0002 	mla	r0, r3, r2, r0
 801f178:	e7d0      	b.n	801f11c <__gethex+0xdc>
 801f17a:	4629      	mov	r1, r5
 801f17c:	e7e0      	b.n	801f140 <__gethex+0x100>
 801f17e:	eba5 0308 	sub.w	r3, r5, r8
 801f182:	3b01      	subs	r3, #1
 801f184:	4621      	mov	r1, r4
 801f186:	2b07      	cmp	r3, #7
 801f188:	dc0a      	bgt.n	801f1a0 <__gethex+0x160>
 801f18a:	4648      	mov	r0, r9
 801f18c:	f7fd fddc 	bl	801cd48 <_Balloc>
 801f190:	4604      	mov	r4, r0
 801f192:	b940      	cbnz	r0, 801f1a6 <__gethex+0x166>
 801f194:	4b61      	ldr	r3, [pc, #388]	; (801f31c <__gethex+0x2dc>)
 801f196:	4602      	mov	r2, r0
 801f198:	21e4      	movs	r1, #228	; 0xe4
 801f19a:	4861      	ldr	r0, [pc, #388]	; (801f320 <__gethex+0x2e0>)
 801f19c:	f7ff feb4 	bl	801ef08 <__assert_func>
 801f1a0:	3101      	adds	r1, #1
 801f1a2:	105b      	asrs	r3, r3, #1
 801f1a4:	e7ef      	b.n	801f186 <__gethex+0x146>
 801f1a6:	f100 0a14 	add.w	sl, r0, #20
 801f1aa:	2300      	movs	r3, #0
 801f1ac:	495a      	ldr	r1, [pc, #360]	; (801f318 <__gethex+0x2d8>)
 801f1ae:	f8cd a004 	str.w	sl, [sp, #4]
 801f1b2:	469b      	mov	fp, r3
 801f1b4:	45a8      	cmp	r8, r5
 801f1b6:	d342      	bcc.n	801f23e <__gethex+0x1fe>
 801f1b8:	9801      	ldr	r0, [sp, #4]
 801f1ba:	f840 bb04 	str.w	fp, [r0], #4
 801f1be:	eba0 000a 	sub.w	r0, r0, sl
 801f1c2:	1080      	asrs	r0, r0, #2
 801f1c4:	6120      	str	r0, [r4, #16]
 801f1c6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801f1ca:	4658      	mov	r0, fp
 801f1cc:	f7fd feae 	bl	801cf2c <__hi0bits>
 801f1d0:	683d      	ldr	r5, [r7, #0]
 801f1d2:	eba8 0000 	sub.w	r0, r8, r0
 801f1d6:	42a8      	cmp	r0, r5
 801f1d8:	dd59      	ble.n	801f28e <__gethex+0x24e>
 801f1da:	eba0 0805 	sub.w	r8, r0, r5
 801f1de:	4641      	mov	r1, r8
 801f1e0:	4620      	mov	r0, r4
 801f1e2:	f7fe fa3a 	bl	801d65a <__any_on>
 801f1e6:	4683      	mov	fp, r0
 801f1e8:	b1b8      	cbz	r0, 801f21a <__gethex+0x1da>
 801f1ea:	f108 33ff 	add.w	r3, r8, #4294967295
 801f1ee:	1159      	asrs	r1, r3, #5
 801f1f0:	f003 021f 	and.w	r2, r3, #31
 801f1f4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801f1f8:	f04f 0b01 	mov.w	fp, #1
 801f1fc:	fa0b f202 	lsl.w	r2, fp, r2
 801f200:	420a      	tst	r2, r1
 801f202:	d00a      	beq.n	801f21a <__gethex+0x1da>
 801f204:	455b      	cmp	r3, fp
 801f206:	dd06      	ble.n	801f216 <__gethex+0x1d6>
 801f208:	f1a8 0102 	sub.w	r1, r8, #2
 801f20c:	4620      	mov	r0, r4
 801f20e:	f7fe fa24 	bl	801d65a <__any_on>
 801f212:	2800      	cmp	r0, #0
 801f214:	d138      	bne.n	801f288 <__gethex+0x248>
 801f216:	f04f 0b02 	mov.w	fp, #2
 801f21a:	4641      	mov	r1, r8
 801f21c:	4620      	mov	r0, r4
 801f21e:	f7ff fea7 	bl	801ef70 <rshift>
 801f222:	4446      	add	r6, r8
 801f224:	68bb      	ldr	r3, [r7, #8]
 801f226:	42b3      	cmp	r3, r6
 801f228:	da41      	bge.n	801f2ae <__gethex+0x26e>
 801f22a:	4621      	mov	r1, r4
 801f22c:	4648      	mov	r0, r9
 801f22e:	f7fd fdcb 	bl	801cdc8 <_Bfree>
 801f232:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f234:	2300      	movs	r3, #0
 801f236:	6013      	str	r3, [r2, #0]
 801f238:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801f23c:	e78a      	b.n	801f154 <__gethex+0x114>
 801f23e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801f242:	2a2e      	cmp	r2, #46	; 0x2e
 801f244:	d014      	beq.n	801f270 <__gethex+0x230>
 801f246:	2b20      	cmp	r3, #32
 801f248:	d106      	bne.n	801f258 <__gethex+0x218>
 801f24a:	9b01      	ldr	r3, [sp, #4]
 801f24c:	f843 bb04 	str.w	fp, [r3], #4
 801f250:	f04f 0b00 	mov.w	fp, #0
 801f254:	9301      	str	r3, [sp, #4]
 801f256:	465b      	mov	r3, fp
 801f258:	7828      	ldrb	r0, [r5, #0]
 801f25a:	9303      	str	r3, [sp, #12]
 801f25c:	f7ff feda 	bl	801f014 <__hexdig_fun>
 801f260:	9b03      	ldr	r3, [sp, #12]
 801f262:	f000 000f 	and.w	r0, r0, #15
 801f266:	4098      	lsls	r0, r3
 801f268:	ea4b 0b00 	orr.w	fp, fp, r0
 801f26c:	3304      	adds	r3, #4
 801f26e:	e7a1      	b.n	801f1b4 <__gethex+0x174>
 801f270:	45a8      	cmp	r8, r5
 801f272:	d8e8      	bhi.n	801f246 <__gethex+0x206>
 801f274:	2201      	movs	r2, #1
 801f276:	4628      	mov	r0, r5
 801f278:	9303      	str	r3, [sp, #12]
 801f27a:	f7ff fe18 	bl	801eeae <strncmp>
 801f27e:	4926      	ldr	r1, [pc, #152]	; (801f318 <__gethex+0x2d8>)
 801f280:	9b03      	ldr	r3, [sp, #12]
 801f282:	2800      	cmp	r0, #0
 801f284:	d1df      	bne.n	801f246 <__gethex+0x206>
 801f286:	e795      	b.n	801f1b4 <__gethex+0x174>
 801f288:	f04f 0b03 	mov.w	fp, #3
 801f28c:	e7c5      	b.n	801f21a <__gethex+0x1da>
 801f28e:	da0b      	bge.n	801f2a8 <__gethex+0x268>
 801f290:	eba5 0800 	sub.w	r8, r5, r0
 801f294:	4621      	mov	r1, r4
 801f296:	4642      	mov	r2, r8
 801f298:	4648      	mov	r0, r9
 801f29a:	f7fd ffaf 	bl	801d1fc <__lshift>
 801f29e:	eba6 0608 	sub.w	r6, r6, r8
 801f2a2:	4604      	mov	r4, r0
 801f2a4:	f100 0a14 	add.w	sl, r0, #20
 801f2a8:	f04f 0b00 	mov.w	fp, #0
 801f2ac:	e7ba      	b.n	801f224 <__gethex+0x1e4>
 801f2ae:	687b      	ldr	r3, [r7, #4]
 801f2b0:	42b3      	cmp	r3, r6
 801f2b2:	dd73      	ble.n	801f39c <__gethex+0x35c>
 801f2b4:	1b9e      	subs	r6, r3, r6
 801f2b6:	42b5      	cmp	r5, r6
 801f2b8:	dc34      	bgt.n	801f324 <__gethex+0x2e4>
 801f2ba:	68fb      	ldr	r3, [r7, #12]
 801f2bc:	2b02      	cmp	r3, #2
 801f2be:	d023      	beq.n	801f308 <__gethex+0x2c8>
 801f2c0:	2b03      	cmp	r3, #3
 801f2c2:	d025      	beq.n	801f310 <__gethex+0x2d0>
 801f2c4:	2b01      	cmp	r3, #1
 801f2c6:	d115      	bne.n	801f2f4 <__gethex+0x2b4>
 801f2c8:	42b5      	cmp	r5, r6
 801f2ca:	d113      	bne.n	801f2f4 <__gethex+0x2b4>
 801f2cc:	2d01      	cmp	r5, #1
 801f2ce:	d10b      	bne.n	801f2e8 <__gethex+0x2a8>
 801f2d0:	9a02      	ldr	r2, [sp, #8]
 801f2d2:	687b      	ldr	r3, [r7, #4]
 801f2d4:	6013      	str	r3, [r2, #0]
 801f2d6:	2301      	movs	r3, #1
 801f2d8:	6123      	str	r3, [r4, #16]
 801f2da:	f8ca 3000 	str.w	r3, [sl]
 801f2de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f2e0:	f04f 0862 	mov.w	r8, #98	; 0x62
 801f2e4:	601c      	str	r4, [r3, #0]
 801f2e6:	e735      	b.n	801f154 <__gethex+0x114>
 801f2e8:	1e69      	subs	r1, r5, #1
 801f2ea:	4620      	mov	r0, r4
 801f2ec:	f7fe f9b5 	bl	801d65a <__any_on>
 801f2f0:	2800      	cmp	r0, #0
 801f2f2:	d1ed      	bne.n	801f2d0 <__gethex+0x290>
 801f2f4:	4621      	mov	r1, r4
 801f2f6:	4648      	mov	r0, r9
 801f2f8:	f7fd fd66 	bl	801cdc8 <_Bfree>
 801f2fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f2fe:	2300      	movs	r3, #0
 801f300:	6013      	str	r3, [r2, #0]
 801f302:	f04f 0850 	mov.w	r8, #80	; 0x50
 801f306:	e725      	b.n	801f154 <__gethex+0x114>
 801f308:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f30a:	2b00      	cmp	r3, #0
 801f30c:	d1f2      	bne.n	801f2f4 <__gethex+0x2b4>
 801f30e:	e7df      	b.n	801f2d0 <__gethex+0x290>
 801f310:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f312:	2b00      	cmp	r3, #0
 801f314:	d1dc      	bne.n	801f2d0 <__gethex+0x290>
 801f316:	e7ed      	b.n	801f2f4 <__gethex+0x2b4>
 801f318:	080206f4 	.word	0x080206f4
 801f31c:	08020587 	.word	0x08020587
 801f320:	080208b9 	.word	0x080208b9
 801f324:	f106 38ff 	add.w	r8, r6, #4294967295
 801f328:	f1bb 0f00 	cmp.w	fp, #0
 801f32c:	d133      	bne.n	801f396 <__gethex+0x356>
 801f32e:	f1b8 0f00 	cmp.w	r8, #0
 801f332:	d004      	beq.n	801f33e <__gethex+0x2fe>
 801f334:	4641      	mov	r1, r8
 801f336:	4620      	mov	r0, r4
 801f338:	f7fe f98f 	bl	801d65a <__any_on>
 801f33c:	4683      	mov	fp, r0
 801f33e:	ea4f 1268 	mov.w	r2, r8, asr #5
 801f342:	2301      	movs	r3, #1
 801f344:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801f348:	f008 081f 	and.w	r8, r8, #31
 801f34c:	fa03 f308 	lsl.w	r3, r3, r8
 801f350:	4213      	tst	r3, r2
 801f352:	4631      	mov	r1, r6
 801f354:	4620      	mov	r0, r4
 801f356:	bf18      	it	ne
 801f358:	f04b 0b02 	orrne.w	fp, fp, #2
 801f35c:	1bad      	subs	r5, r5, r6
 801f35e:	f7ff fe07 	bl	801ef70 <rshift>
 801f362:	687e      	ldr	r6, [r7, #4]
 801f364:	f04f 0802 	mov.w	r8, #2
 801f368:	f1bb 0f00 	cmp.w	fp, #0
 801f36c:	d04a      	beq.n	801f404 <__gethex+0x3c4>
 801f36e:	68fb      	ldr	r3, [r7, #12]
 801f370:	2b02      	cmp	r3, #2
 801f372:	d016      	beq.n	801f3a2 <__gethex+0x362>
 801f374:	2b03      	cmp	r3, #3
 801f376:	d018      	beq.n	801f3aa <__gethex+0x36a>
 801f378:	2b01      	cmp	r3, #1
 801f37a:	d109      	bne.n	801f390 <__gethex+0x350>
 801f37c:	f01b 0f02 	tst.w	fp, #2
 801f380:	d006      	beq.n	801f390 <__gethex+0x350>
 801f382:	f8da 3000 	ldr.w	r3, [sl]
 801f386:	ea4b 0b03 	orr.w	fp, fp, r3
 801f38a:	f01b 0f01 	tst.w	fp, #1
 801f38e:	d10f      	bne.n	801f3b0 <__gethex+0x370>
 801f390:	f048 0810 	orr.w	r8, r8, #16
 801f394:	e036      	b.n	801f404 <__gethex+0x3c4>
 801f396:	f04f 0b01 	mov.w	fp, #1
 801f39a:	e7d0      	b.n	801f33e <__gethex+0x2fe>
 801f39c:	f04f 0801 	mov.w	r8, #1
 801f3a0:	e7e2      	b.n	801f368 <__gethex+0x328>
 801f3a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f3a4:	f1c3 0301 	rsb	r3, r3, #1
 801f3a8:	930f      	str	r3, [sp, #60]	; 0x3c
 801f3aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f3ac:	2b00      	cmp	r3, #0
 801f3ae:	d0ef      	beq.n	801f390 <__gethex+0x350>
 801f3b0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801f3b4:	f104 0214 	add.w	r2, r4, #20
 801f3b8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801f3bc:	9301      	str	r3, [sp, #4]
 801f3be:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801f3c2:	2300      	movs	r3, #0
 801f3c4:	4694      	mov	ip, r2
 801f3c6:	f852 1b04 	ldr.w	r1, [r2], #4
 801f3ca:	f1b1 3fff 	cmp.w	r1, #4294967295
 801f3ce:	d01e      	beq.n	801f40e <__gethex+0x3ce>
 801f3d0:	3101      	adds	r1, #1
 801f3d2:	f8cc 1000 	str.w	r1, [ip]
 801f3d6:	f1b8 0f02 	cmp.w	r8, #2
 801f3da:	f104 0214 	add.w	r2, r4, #20
 801f3de:	d13d      	bne.n	801f45c <__gethex+0x41c>
 801f3e0:	683b      	ldr	r3, [r7, #0]
 801f3e2:	3b01      	subs	r3, #1
 801f3e4:	42ab      	cmp	r3, r5
 801f3e6:	d10b      	bne.n	801f400 <__gethex+0x3c0>
 801f3e8:	1169      	asrs	r1, r5, #5
 801f3ea:	2301      	movs	r3, #1
 801f3ec:	f005 051f 	and.w	r5, r5, #31
 801f3f0:	fa03 f505 	lsl.w	r5, r3, r5
 801f3f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f3f8:	421d      	tst	r5, r3
 801f3fa:	bf18      	it	ne
 801f3fc:	f04f 0801 	movne.w	r8, #1
 801f400:	f048 0820 	orr.w	r8, r8, #32
 801f404:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f406:	601c      	str	r4, [r3, #0]
 801f408:	9b02      	ldr	r3, [sp, #8]
 801f40a:	601e      	str	r6, [r3, #0]
 801f40c:	e6a2      	b.n	801f154 <__gethex+0x114>
 801f40e:	4290      	cmp	r0, r2
 801f410:	f842 3c04 	str.w	r3, [r2, #-4]
 801f414:	d8d6      	bhi.n	801f3c4 <__gethex+0x384>
 801f416:	68a2      	ldr	r2, [r4, #8]
 801f418:	4593      	cmp	fp, r2
 801f41a:	db17      	blt.n	801f44c <__gethex+0x40c>
 801f41c:	6861      	ldr	r1, [r4, #4]
 801f41e:	4648      	mov	r0, r9
 801f420:	3101      	adds	r1, #1
 801f422:	f7fd fc91 	bl	801cd48 <_Balloc>
 801f426:	4682      	mov	sl, r0
 801f428:	b918      	cbnz	r0, 801f432 <__gethex+0x3f2>
 801f42a:	4b1b      	ldr	r3, [pc, #108]	; (801f498 <__gethex+0x458>)
 801f42c:	4602      	mov	r2, r0
 801f42e:	2184      	movs	r1, #132	; 0x84
 801f430:	e6b3      	b.n	801f19a <__gethex+0x15a>
 801f432:	6922      	ldr	r2, [r4, #16]
 801f434:	3202      	adds	r2, #2
 801f436:	f104 010c 	add.w	r1, r4, #12
 801f43a:	0092      	lsls	r2, r2, #2
 801f43c:	300c      	adds	r0, #12
 801f43e:	f7fc fd78 	bl	801bf32 <memcpy>
 801f442:	4621      	mov	r1, r4
 801f444:	4648      	mov	r0, r9
 801f446:	f7fd fcbf 	bl	801cdc8 <_Bfree>
 801f44a:	4654      	mov	r4, sl
 801f44c:	6922      	ldr	r2, [r4, #16]
 801f44e:	1c51      	adds	r1, r2, #1
 801f450:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801f454:	6121      	str	r1, [r4, #16]
 801f456:	2101      	movs	r1, #1
 801f458:	6151      	str	r1, [r2, #20]
 801f45a:	e7bc      	b.n	801f3d6 <__gethex+0x396>
 801f45c:	6921      	ldr	r1, [r4, #16]
 801f45e:	4559      	cmp	r1, fp
 801f460:	dd0b      	ble.n	801f47a <__gethex+0x43a>
 801f462:	2101      	movs	r1, #1
 801f464:	4620      	mov	r0, r4
 801f466:	f7ff fd83 	bl	801ef70 <rshift>
 801f46a:	68bb      	ldr	r3, [r7, #8]
 801f46c:	3601      	adds	r6, #1
 801f46e:	42b3      	cmp	r3, r6
 801f470:	f6ff aedb 	blt.w	801f22a <__gethex+0x1ea>
 801f474:	f04f 0801 	mov.w	r8, #1
 801f478:	e7c2      	b.n	801f400 <__gethex+0x3c0>
 801f47a:	f015 051f 	ands.w	r5, r5, #31
 801f47e:	d0f9      	beq.n	801f474 <__gethex+0x434>
 801f480:	9b01      	ldr	r3, [sp, #4]
 801f482:	441a      	add	r2, r3
 801f484:	f1c5 0520 	rsb	r5, r5, #32
 801f488:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801f48c:	f7fd fd4e 	bl	801cf2c <__hi0bits>
 801f490:	42a8      	cmp	r0, r5
 801f492:	dbe6      	blt.n	801f462 <__gethex+0x422>
 801f494:	e7ee      	b.n	801f474 <__gethex+0x434>
 801f496:	bf00      	nop
 801f498:	08020587 	.word	0x08020587

0801f49c <L_shift>:
 801f49c:	f1c2 0208 	rsb	r2, r2, #8
 801f4a0:	0092      	lsls	r2, r2, #2
 801f4a2:	b570      	push	{r4, r5, r6, lr}
 801f4a4:	f1c2 0620 	rsb	r6, r2, #32
 801f4a8:	6843      	ldr	r3, [r0, #4]
 801f4aa:	6804      	ldr	r4, [r0, #0]
 801f4ac:	fa03 f506 	lsl.w	r5, r3, r6
 801f4b0:	432c      	orrs	r4, r5
 801f4b2:	40d3      	lsrs	r3, r2
 801f4b4:	6004      	str	r4, [r0, #0]
 801f4b6:	f840 3f04 	str.w	r3, [r0, #4]!
 801f4ba:	4288      	cmp	r0, r1
 801f4bc:	d3f4      	bcc.n	801f4a8 <L_shift+0xc>
 801f4be:	bd70      	pop	{r4, r5, r6, pc}

0801f4c0 <__match>:
 801f4c0:	b530      	push	{r4, r5, lr}
 801f4c2:	6803      	ldr	r3, [r0, #0]
 801f4c4:	3301      	adds	r3, #1
 801f4c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f4ca:	b914      	cbnz	r4, 801f4d2 <__match+0x12>
 801f4cc:	6003      	str	r3, [r0, #0]
 801f4ce:	2001      	movs	r0, #1
 801f4d0:	bd30      	pop	{r4, r5, pc}
 801f4d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f4d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801f4da:	2d19      	cmp	r5, #25
 801f4dc:	bf98      	it	ls
 801f4de:	3220      	addls	r2, #32
 801f4e0:	42a2      	cmp	r2, r4
 801f4e2:	d0f0      	beq.n	801f4c6 <__match+0x6>
 801f4e4:	2000      	movs	r0, #0
 801f4e6:	e7f3      	b.n	801f4d0 <__match+0x10>

0801f4e8 <__hexnan>:
 801f4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4ec:	680b      	ldr	r3, [r1, #0]
 801f4ee:	6801      	ldr	r1, [r0, #0]
 801f4f0:	115e      	asrs	r6, r3, #5
 801f4f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801f4f6:	f013 031f 	ands.w	r3, r3, #31
 801f4fa:	b087      	sub	sp, #28
 801f4fc:	bf18      	it	ne
 801f4fe:	3604      	addne	r6, #4
 801f500:	2500      	movs	r5, #0
 801f502:	1f37      	subs	r7, r6, #4
 801f504:	4682      	mov	sl, r0
 801f506:	4690      	mov	r8, r2
 801f508:	9301      	str	r3, [sp, #4]
 801f50a:	f846 5c04 	str.w	r5, [r6, #-4]
 801f50e:	46b9      	mov	r9, r7
 801f510:	463c      	mov	r4, r7
 801f512:	9502      	str	r5, [sp, #8]
 801f514:	46ab      	mov	fp, r5
 801f516:	784a      	ldrb	r2, [r1, #1]
 801f518:	1c4b      	adds	r3, r1, #1
 801f51a:	9303      	str	r3, [sp, #12]
 801f51c:	b342      	cbz	r2, 801f570 <__hexnan+0x88>
 801f51e:	4610      	mov	r0, r2
 801f520:	9105      	str	r1, [sp, #20]
 801f522:	9204      	str	r2, [sp, #16]
 801f524:	f7ff fd76 	bl	801f014 <__hexdig_fun>
 801f528:	2800      	cmp	r0, #0
 801f52a:	d14f      	bne.n	801f5cc <__hexnan+0xe4>
 801f52c:	9a04      	ldr	r2, [sp, #16]
 801f52e:	9905      	ldr	r1, [sp, #20]
 801f530:	2a20      	cmp	r2, #32
 801f532:	d818      	bhi.n	801f566 <__hexnan+0x7e>
 801f534:	9b02      	ldr	r3, [sp, #8]
 801f536:	459b      	cmp	fp, r3
 801f538:	dd13      	ble.n	801f562 <__hexnan+0x7a>
 801f53a:	454c      	cmp	r4, r9
 801f53c:	d206      	bcs.n	801f54c <__hexnan+0x64>
 801f53e:	2d07      	cmp	r5, #7
 801f540:	dc04      	bgt.n	801f54c <__hexnan+0x64>
 801f542:	462a      	mov	r2, r5
 801f544:	4649      	mov	r1, r9
 801f546:	4620      	mov	r0, r4
 801f548:	f7ff ffa8 	bl	801f49c <L_shift>
 801f54c:	4544      	cmp	r4, r8
 801f54e:	d950      	bls.n	801f5f2 <__hexnan+0x10a>
 801f550:	2300      	movs	r3, #0
 801f552:	f1a4 0904 	sub.w	r9, r4, #4
 801f556:	f844 3c04 	str.w	r3, [r4, #-4]
 801f55a:	f8cd b008 	str.w	fp, [sp, #8]
 801f55e:	464c      	mov	r4, r9
 801f560:	461d      	mov	r5, r3
 801f562:	9903      	ldr	r1, [sp, #12]
 801f564:	e7d7      	b.n	801f516 <__hexnan+0x2e>
 801f566:	2a29      	cmp	r2, #41	; 0x29
 801f568:	d155      	bne.n	801f616 <__hexnan+0x12e>
 801f56a:	3102      	adds	r1, #2
 801f56c:	f8ca 1000 	str.w	r1, [sl]
 801f570:	f1bb 0f00 	cmp.w	fp, #0
 801f574:	d04f      	beq.n	801f616 <__hexnan+0x12e>
 801f576:	454c      	cmp	r4, r9
 801f578:	d206      	bcs.n	801f588 <__hexnan+0xa0>
 801f57a:	2d07      	cmp	r5, #7
 801f57c:	dc04      	bgt.n	801f588 <__hexnan+0xa0>
 801f57e:	462a      	mov	r2, r5
 801f580:	4649      	mov	r1, r9
 801f582:	4620      	mov	r0, r4
 801f584:	f7ff ff8a 	bl	801f49c <L_shift>
 801f588:	4544      	cmp	r4, r8
 801f58a:	d934      	bls.n	801f5f6 <__hexnan+0x10e>
 801f58c:	f1a8 0204 	sub.w	r2, r8, #4
 801f590:	4623      	mov	r3, r4
 801f592:	f853 1b04 	ldr.w	r1, [r3], #4
 801f596:	f842 1f04 	str.w	r1, [r2, #4]!
 801f59a:	429f      	cmp	r7, r3
 801f59c:	d2f9      	bcs.n	801f592 <__hexnan+0xaa>
 801f59e:	1b3b      	subs	r3, r7, r4
 801f5a0:	f023 0303 	bic.w	r3, r3, #3
 801f5a4:	3304      	adds	r3, #4
 801f5a6:	3e03      	subs	r6, #3
 801f5a8:	3401      	adds	r4, #1
 801f5aa:	42a6      	cmp	r6, r4
 801f5ac:	bf38      	it	cc
 801f5ae:	2304      	movcc	r3, #4
 801f5b0:	4443      	add	r3, r8
 801f5b2:	2200      	movs	r2, #0
 801f5b4:	f843 2b04 	str.w	r2, [r3], #4
 801f5b8:	429f      	cmp	r7, r3
 801f5ba:	d2fb      	bcs.n	801f5b4 <__hexnan+0xcc>
 801f5bc:	683b      	ldr	r3, [r7, #0]
 801f5be:	b91b      	cbnz	r3, 801f5c8 <__hexnan+0xe0>
 801f5c0:	4547      	cmp	r7, r8
 801f5c2:	d126      	bne.n	801f612 <__hexnan+0x12a>
 801f5c4:	2301      	movs	r3, #1
 801f5c6:	603b      	str	r3, [r7, #0]
 801f5c8:	2005      	movs	r0, #5
 801f5ca:	e025      	b.n	801f618 <__hexnan+0x130>
 801f5cc:	3501      	adds	r5, #1
 801f5ce:	2d08      	cmp	r5, #8
 801f5d0:	f10b 0b01 	add.w	fp, fp, #1
 801f5d4:	dd06      	ble.n	801f5e4 <__hexnan+0xfc>
 801f5d6:	4544      	cmp	r4, r8
 801f5d8:	d9c3      	bls.n	801f562 <__hexnan+0x7a>
 801f5da:	2300      	movs	r3, #0
 801f5dc:	f844 3c04 	str.w	r3, [r4, #-4]
 801f5e0:	2501      	movs	r5, #1
 801f5e2:	3c04      	subs	r4, #4
 801f5e4:	6822      	ldr	r2, [r4, #0]
 801f5e6:	f000 000f 	and.w	r0, r0, #15
 801f5ea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801f5ee:	6020      	str	r0, [r4, #0]
 801f5f0:	e7b7      	b.n	801f562 <__hexnan+0x7a>
 801f5f2:	2508      	movs	r5, #8
 801f5f4:	e7b5      	b.n	801f562 <__hexnan+0x7a>
 801f5f6:	9b01      	ldr	r3, [sp, #4]
 801f5f8:	2b00      	cmp	r3, #0
 801f5fa:	d0df      	beq.n	801f5bc <__hexnan+0xd4>
 801f5fc:	f1c3 0320 	rsb	r3, r3, #32
 801f600:	f04f 32ff 	mov.w	r2, #4294967295
 801f604:	40da      	lsrs	r2, r3
 801f606:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801f60a:	4013      	ands	r3, r2
 801f60c:	f846 3c04 	str.w	r3, [r6, #-4]
 801f610:	e7d4      	b.n	801f5bc <__hexnan+0xd4>
 801f612:	3f04      	subs	r7, #4
 801f614:	e7d2      	b.n	801f5bc <__hexnan+0xd4>
 801f616:	2004      	movs	r0, #4
 801f618:	b007      	add	sp, #28
 801f61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f61e <__ascii_mbtowc>:
 801f61e:	b082      	sub	sp, #8
 801f620:	b901      	cbnz	r1, 801f624 <__ascii_mbtowc+0x6>
 801f622:	a901      	add	r1, sp, #4
 801f624:	b142      	cbz	r2, 801f638 <__ascii_mbtowc+0x1a>
 801f626:	b14b      	cbz	r3, 801f63c <__ascii_mbtowc+0x1e>
 801f628:	7813      	ldrb	r3, [r2, #0]
 801f62a:	600b      	str	r3, [r1, #0]
 801f62c:	7812      	ldrb	r2, [r2, #0]
 801f62e:	1e10      	subs	r0, r2, #0
 801f630:	bf18      	it	ne
 801f632:	2001      	movne	r0, #1
 801f634:	b002      	add	sp, #8
 801f636:	4770      	bx	lr
 801f638:	4610      	mov	r0, r2
 801f63a:	e7fb      	b.n	801f634 <__ascii_mbtowc+0x16>
 801f63c:	f06f 0001 	mvn.w	r0, #1
 801f640:	e7f8      	b.n	801f634 <__ascii_mbtowc+0x16>

0801f642 <_realloc_r>:
 801f642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f646:	4680      	mov	r8, r0
 801f648:	4614      	mov	r4, r2
 801f64a:	460e      	mov	r6, r1
 801f64c:	b921      	cbnz	r1, 801f658 <_realloc_r+0x16>
 801f64e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f652:	4611      	mov	r1, r2
 801f654:	f7fd baec 	b.w	801cc30 <_malloc_r>
 801f658:	b92a      	cbnz	r2, 801f666 <_realloc_r+0x24>
 801f65a:	f7fd fa75 	bl	801cb48 <_free_r>
 801f65e:	4625      	mov	r5, r4
 801f660:	4628      	mov	r0, r5
 801f662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f666:	f000 f8b6 	bl	801f7d6 <_malloc_usable_size_r>
 801f66a:	4284      	cmp	r4, r0
 801f66c:	4607      	mov	r7, r0
 801f66e:	d802      	bhi.n	801f676 <_realloc_r+0x34>
 801f670:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801f674:	d812      	bhi.n	801f69c <_realloc_r+0x5a>
 801f676:	4621      	mov	r1, r4
 801f678:	4640      	mov	r0, r8
 801f67a:	f7fd fad9 	bl	801cc30 <_malloc_r>
 801f67e:	4605      	mov	r5, r0
 801f680:	2800      	cmp	r0, #0
 801f682:	d0ed      	beq.n	801f660 <_realloc_r+0x1e>
 801f684:	42bc      	cmp	r4, r7
 801f686:	4622      	mov	r2, r4
 801f688:	4631      	mov	r1, r6
 801f68a:	bf28      	it	cs
 801f68c:	463a      	movcs	r2, r7
 801f68e:	f7fc fc50 	bl	801bf32 <memcpy>
 801f692:	4631      	mov	r1, r6
 801f694:	4640      	mov	r0, r8
 801f696:	f7fd fa57 	bl	801cb48 <_free_r>
 801f69a:	e7e1      	b.n	801f660 <_realloc_r+0x1e>
 801f69c:	4635      	mov	r5, r6
 801f69e:	e7df      	b.n	801f660 <_realloc_r+0x1e>

0801f6a0 <_strtoul_l.constprop.0>:
 801f6a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f6a4:	4f36      	ldr	r7, [pc, #216]	; (801f780 <_strtoul_l.constprop.0+0xe0>)
 801f6a6:	4686      	mov	lr, r0
 801f6a8:	460d      	mov	r5, r1
 801f6aa:	4628      	mov	r0, r5
 801f6ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f6b0:	5d3e      	ldrb	r6, [r7, r4]
 801f6b2:	f016 0608 	ands.w	r6, r6, #8
 801f6b6:	d1f8      	bne.n	801f6aa <_strtoul_l.constprop.0+0xa>
 801f6b8:	2c2d      	cmp	r4, #45	; 0x2d
 801f6ba:	d130      	bne.n	801f71e <_strtoul_l.constprop.0+0x7e>
 801f6bc:	782c      	ldrb	r4, [r5, #0]
 801f6be:	2601      	movs	r6, #1
 801f6c0:	1c85      	adds	r5, r0, #2
 801f6c2:	2b00      	cmp	r3, #0
 801f6c4:	d057      	beq.n	801f776 <_strtoul_l.constprop.0+0xd6>
 801f6c6:	2b10      	cmp	r3, #16
 801f6c8:	d109      	bne.n	801f6de <_strtoul_l.constprop.0+0x3e>
 801f6ca:	2c30      	cmp	r4, #48	; 0x30
 801f6cc:	d107      	bne.n	801f6de <_strtoul_l.constprop.0+0x3e>
 801f6ce:	7828      	ldrb	r0, [r5, #0]
 801f6d0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801f6d4:	2858      	cmp	r0, #88	; 0x58
 801f6d6:	d149      	bne.n	801f76c <_strtoul_l.constprop.0+0xcc>
 801f6d8:	786c      	ldrb	r4, [r5, #1]
 801f6da:	2310      	movs	r3, #16
 801f6dc:	3502      	adds	r5, #2
 801f6de:	f04f 38ff 	mov.w	r8, #4294967295
 801f6e2:	2700      	movs	r7, #0
 801f6e4:	fbb8 f8f3 	udiv	r8, r8, r3
 801f6e8:	fb03 f908 	mul.w	r9, r3, r8
 801f6ec:	ea6f 0909 	mvn.w	r9, r9
 801f6f0:	4638      	mov	r0, r7
 801f6f2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801f6f6:	f1bc 0f09 	cmp.w	ip, #9
 801f6fa:	d815      	bhi.n	801f728 <_strtoul_l.constprop.0+0x88>
 801f6fc:	4664      	mov	r4, ip
 801f6fe:	42a3      	cmp	r3, r4
 801f700:	dd23      	ble.n	801f74a <_strtoul_l.constprop.0+0xaa>
 801f702:	f1b7 3fff 	cmp.w	r7, #4294967295
 801f706:	d007      	beq.n	801f718 <_strtoul_l.constprop.0+0x78>
 801f708:	4580      	cmp	r8, r0
 801f70a:	d31b      	bcc.n	801f744 <_strtoul_l.constprop.0+0xa4>
 801f70c:	d101      	bne.n	801f712 <_strtoul_l.constprop.0+0x72>
 801f70e:	45a1      	cmp	r9, r4
 801f710:	db18      	blt.n	801f744 <_strtoul_l.constprop.0+0xa4>
 801f712:	fb00 4003 	mla	r0, r0, r3, r4
 801f716:	2701      	movs	r7, #1
 801f718:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f71c:	e7e9      	b.n	801f6f2 <_strtoul_l.constprop.0+0x52>
 801f71e:	2c2b      	cmp	r4, #43	; 0x2b
 801f720:	bf04      	itt	eq
 801f722:	782c      	ldrbeq	r4, [r5, #0]
 801f724:	1c85      	addeq	r5, r0, #2
 801f726:	e7cc      	b.n	801f6c2 <_strtoul_l.constprop.0+0x22>
 801f728:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801f72c:	f1bc 0f19 	cmp.w	ip, #25
 801f730:	d801      	bhi.n	801f736 <_strtoul_l.constprop.0+0x96>
 801f732:	3c37      	subs	r4, #55	; 0x37
 801f734:	e7e3      	b.n	801f6fe <_strtoul_l.constprop.0+0x5e>
 801f736:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801f73a:	f1bc 0f19 	cmp.w	ip, #25
 801f73e:	d804      	bhi.n	801f74a <_strtoul_l.constprop.0+0xaa>
 801f740:	3c57      	subs	r4, #87	; 0x57
 801f742:	e7dc      	b.n	801f6fe <_strtoul_l.constprop.0+0x5e>
 801f744:	f04f 37ff 	mov.w	r7, #4294967295
 801f748:	e7e6      	b.n	801f718 <_strtoul_l.constprop.0+0x78>
 801f74a:	1c7b      	adds	r3, r7, #1
 801f74c:	d106      	bne.n	801f75c <_strtoul_l.constprop.0+0xbc>
 801f74e:	2322      	movs	r3, #34	; 0x22
 801f750:	f8ce 3000 	str.w	r3, [lr]
 801f754:	4638      	mov	r0, r7
 801f756:	b932      	cbnz	r2, 801f766 <_strtoul_l.constprop.0+0xc6>
 801f758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f75c:	b106      	cbz	r6, 801f760 <_strtoul_l.constprop.0+0xc0>
 801f75e:	4240      	negs	r0, r0
 801f760:	2a00      	cmp	r2, #0
 801f762:	d0f9      	beq.n	801f758 <_strtoul_l.constprop.0+0xb8>
 801f764:	b107      	cbz	r7, 801f768 <_strtoul_l.constprop.0+0xc8>
 801f766:	1e69      	subs	r1, r5, #1
 801f768:	6011      	str	r1, [r2, #0]
 801f76a:	e7f5      	b.n	801f758 <_strtoul_l.constprop.0+0xb8>
 801f76c:	2430      	movs	r4, #48	; 0x30
 801f76e:	2b00      	cmp	r3, #0
 801f770:	d1b5      	bne.n	801f6de <_strtoul_l.constprop.0+0x3e>
 801f772:	2308      	movs	r3, #8
 801f774:	e7b3      	b.n	801f6de <_strtoul_l.constprop.0+0x3e>
 801f776:	2c30      	cmp	r4, #48	; 0x30
 801f778:	d0a9      	beq.n	801f6ce <_strtoul_l.constprop.0+0x2e>
 801f77a:	230a      	movs	r3, #10
 801f77c:	e7af      	b.n	801f6de <_strtoul_l.constprop.0+0x3e>
 801f77e:	bf00      	nop
 801f780:	08020749 	.word	0x08020749

0801f784 <_strtoul_r>:
 801f784:	f7ff bf8c 	b.w	801f6a0 <_strtoul_l.constprop.0>

0801f788 <__ascii_wctomb>:
 801f788:	b149      	cbz	r1, 801f79e <__ascii_wctomb+0x16>
 801f78a:	2aff      	cmp	r2, #255	; 0xff
 801f78c:	bf85      	ittet	hi
 801f78e:	238a      	movhi	r3, #138	; 0x8a
 801f790:	6003      	strhi	r3, [r0, #0]
 801f792:	700a      	strbls	r2, [r1, #0]
 801f794:	f04f 30ff 	movhi.w	r0, #4294967295
 801f798:	bf98      	it	ls
 801f79a:	2001      	movls	r0, #1
 801f79c:	4770      	bx	lr
 801f79e:	4608      	mov	r0, r1
 801f7a0:	4770      	bx	lr
	...

0801f7a4 <fiprintf>:
 801f7a4:	b40e      	push	{r1, r2, r3}
 801f7a6:	b503      	push	{r0, r1, lr}
 801f7a8:	4601      	mov	r1, r0
 801f7aa:	ab03      	add	r3, sp, #12
 801f7ac:	4805      	ldr	r0, [pc, #20]	; (801f7c4 <fiprintf+0x20>)
 801f7ae:	f853 2b04 	ldr.w	r2, [r3], #4
 801f7b2:	6800      	ldr	r0, [r0, #0]
 801f7b4:	9301      	str	r3, [sp, #4]
 801f7b6:	f000 f83f 	bl	801f838 <_vfiprintf_r>
 801f7ba:	b002      	add	sp, #8
 801f7bc:	f85d eb04 	ldr.w	lr, [sp], #4
 801f7c0:	b003      	add	sp, #12
 801f7c2:	4770      	bx	lr
 801f7c4:	24000158 	.word	0x24000158

0801f7c8 <abort>:
 801f7c8:	b508      	push	{r3, lr}
 801f7ca:	2006      	movs	r0, #6
 801f7cc:	f000 fa0c 	bl	801fbe8 <raise>
 801f7d0:	2001      	movs	r0, #1
 801f7d2:	f7e4 fb0f 	bl	8003df4 <_exit>

0801f7d6 <_malloc_usable_size_r>:
 801f7d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f7da:	1f18      	subs	r0, r3, #4
 801f7dc:	2b00      	cmp	r3, #0
 801f7de:	bfbc      	itt	lt
 801f7e0:	580b      	ldrlt	r3, [r1, r0]
 801f7e2:	18c0      	addlt	r0, r0, r3
 801f7e4:	4770      	bx	lr

0801f7e6 <__sfputc_r>:
 801f7e6:	6893      	ldr	r3, [r2, #8]
 801f7e8:	3b01      	subs	r3, #1
 801f7ea:	2b00      	cmp	r3, #0
 801f7ec:	b410      	push	{r4}
 801f7ee:	6093      	str	r3, [r2, #8]
 801f7f0:	da08      	bge.n	801f804 <__sfputc_r+0x1e>
 801f7f2:	6994      	ldr	r4, [r2, #24]
 801f7f4:	42a3      	cmp	r3, r4
 801f7f6:	db01      	blt.n	801f7fc <__sfputc_r+0x16>
 801f7f8:	290a      	cmp	r1, #10
 801f7fa:	d103      	bne.n	801f804 <__sfputc_r+0x1e>
 801f7fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f800:	f000 b934 	b.w	801fa6c <__swbuf_r>
 801f804:	6813      	ldr	r3, [r2, #0]
 801f806:	1c58      	adds	r0, r3, #1
 801f808:	6010      	str	r0, [r2, #0]
 801f80a:	7019      	strb	r1, [r3, #0]
 801f80c:	4608      	mov	r0, r1
 801f80e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f812:	4770      	bx	lr

0801f814 <__sfputs_r>:
 801f814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f816:	4606      	mov	r6, r0
 801f818:	460f      	mov	r7, r1
 801f81a:	4614      	mov	r4, r2
 801f81c:	18d5      	adds	r5, r2, r3
 801f81e:	42ac      	cmp	r4, r5
 801f820:	d101      	bne.n	801f826 <__sfputs_r+0x12>
 801f822:	2000      	movs	r0, #0
 801f824:	e007      	b.n	801f836 <__sfputs_r+0x22>
 801f826:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f82a:	463a      	mov	r2, r7
 801f82c:	4630      	mov	r0, r6
 801f82e:	f7ff ffda 	bl	801f7e6 <__sfputc_r>
 801f832:	1c43      	adds	r3, r0, #1
 801f834:	d1f3      	bne.n	801f81e <__sfputs_r+0xa>
 801f836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801f838 <_vfiprintf_r>:
 801f838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f83c:	460d      	mov	r5, r1
 801f83e:	b09d      	sub	sp, #116	; 0x74
 801f840:	4614      	mov	r4, r2
 801f842:	4698      	mov	r8, r3
 801f844:	4606      	mov	r6, r0
 801f846:	b118      	cbz	r0, 801f850 <_vfiprintf_r+0x18>
 801f848:	6a03      	ldr	r3, [r0, #32]
 801f84a:	b90b      	cbnz	r3, 801f850 <_vfiprintf_r+0x18>
 801f84c:	f7fc fa22 	bl	801bc94 <__sinit>
 801f850:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f852:	07d9      	lsls	r1, r3, #31
 801f854:	d405      	bmi.n	801f862 <_vfiprintf_r+0x2a>
 801f856:	89ab      	ldrh	r3, [r5, #12]
 801f858:	059a      	lsls	r2, r3, #22
 801f85a:	d402      	bmi.n	801f862 <_vfiprintf_r+0x2a>
 801f85c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f85e:	f7fc fb5e 	bl	801bf1e <__retarget_lock_acquire_recursive>
 801f862:	89ab      	ldrh	r3, [r5, #12]
 801f864:	071b      	lsls	r3, r3, #28
 801f866:	d501      	bpl.n	801f86c <_vfiprintf_r+0x34>
 801f868:	692b      	ldr	r3, [r5, #16]
 801f86a:	b99b      	cbnz	r3, 801f894 <_vfiprintf_r+0x5c>
 801f86c:	4629      	mov	r1, r5
 801f86e:	4630      	mov	r0, r6
 801f870:	f000 f93a 	bl	801fae8 <__swsetup_r>
 801f874:	b170      	cbz	r0, 801f894 <_vfiprintf_r+0x5c>
 801f876:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f878:	07dc      	lsls	r4, r3, #31
 801f87a:	d504      	bpl.n	801f886 <_vfiprintf_r+0x4e>
 801f87c:	f04f 30ff 	mov.w	r0, #4294967295
 801f880:	b01d      	add	sp, #116	; 0x74
 801f882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f886:	89ab      	ldrh	r3, [r5, #12]
 801f888:	0598      	lsls	r0, r3, #22
 801f88a:	d4f7      	bmi.n	801f87c <_vfiprintf_r+0x44>
 801f88c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f88e:	f7fc fb47 	bl	801bf20 <__retarget_lock_release_recursive>
 801f892:	e7f3      	b.n	801f87c <_vfiprintf_r+0x44>
 801f894:	2300      	movs	r3, #0
 801f896:	9309      	str	r3, [sp, #36]	; 0x24
 801f898:	2320      	movs	r3, #32
 801f89a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f89e:	f8cd 800c 	str.w	r8, [sp, #12]
 801f8a2:	2330      	movs	r3, #48	; 0x30
 801f8a4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801fa58 <_vfiprintf_r+0x220>
 801f8a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f8ac:	f04f 0901 	mov.w	r9, #1
 801f8b0:	4623      	mov	r3, r4
 801f8b2:	469a      	mov	sl, r3
 801f8b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f8b8:	b10a      	cbz	r2, 801f8be <_vfiprintf_r+0x86>
 801f8ba:	2a25      	cmp	r2, #37	; 0x25
 801f8bc:	d1f9      	bne.n	801f8b2 <_vfiprintf_r+0x7a>
 801f8be:	ebba 0b04 	subs.w	fp, sl, r4
 801f8c2:	d00b      	beq.n	801f8dc <_vfiprintf_r+0xa4>
 801f8c4:	465b      	mov	r3, fp
 801f8c6:	4622      	mov	r2, r4
 801f8c8:	4629      	mov	r1, r5
 801f8ca:	4630      	mov	r0, r6
 801f8cc:	f7ff ffa2 	bl	801f814 <__sfputs_r>
 801f8d0:	3001      	adds	r0, #1
 801f8d2:	f000 80a9 	beq.w	801fa28 <_vfiprintf_r+0x1f0>
 801f8d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f8d8:	445a      	add	r2, fp
 801f8da:	9209      	str	r2, [sp, #36]	; 0x24
 801f8dc:	f89a 3000 	ldrb.w	r3, [sl]
 801f8e0:	2b00      	cmp	r3, #0
 801f8e2:	f000 80a1 	beq.w	801fa28 <_vfiprintf_r+0x1f0>
 801f8e6:	2300      	movs	r3, #0
 801f8e8:	f04f 32ff 	mov.w	r2, #4294967295
 801f8ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f8f0:	f10a 0a01 	add.w	sl, sl, #1
 801f8f4:	9304      	str	r3, [sp, #16]
 801f8f6:	9307      	str	r3, [sp, #28]
 801f8f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f8fc:	931a      	str	r3, [sp, #104]	; 0x68
 801f8fe:	4654      	mov	r4, sl
 801f900:	2205      	movs	r2, #5
 801f902:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f906:	4854      	ldr	r0, [pc, #336]	; (801fa58 <_vfiprintf_r+0x220>)
 801f908:	f7e0 fd12 	bl	8000330 <memchr>
 801f90c:	9a04      	ldr	r2, [sp, #16]
 801f90e:	b9d8      	cbnz	r0, 801f948 <_vfiprintf_r+0x110>
 801f910:	06d1      	lsls	r1, r2, #27
 801f912:	bf44      	itt	mi
 801f914:	2320      	movmi	r3, #32
 801f916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f91a:	0713      	lsls	r3, r2, #28
 801f91c:	bf44      	itt	mi
 801f91e:	232b      	movmi	r3, #43	; 0x2b
 801f920:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f924:	f89a 3000 	ldrb.w	r3, [sl]
 801f928:	2b2a      	cmp	r3, #42	; 0x2a
 801f92a:	d015      	beq.n	801f958 <_vfiprintf_r+0x120>
 801f92c:	9a07      	ldr	r2, [sp, #28]
 801f92e:	4654      	mov	r4, sl
 801f930:	2000      	movs	r0, #0
 801f932:	f04f 0c0a 	mov.w	ip, #10
 801f936:	4621      	mov	r1, r4
 801f938:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f93c:	3b30      	subs	r3, #48	; 0x30
 801f93e:	2b09      	cmp	r3, #9
 801f940:	d94d      	bls.n	801f9de <_vfiprintf_r+0x1a6>
 801f942:	b1b0      	cbz	r0, 801f972 <_vfiprintf_r+0x13a>
 801f944:	9207      	str	r2, [sp, #28]
 801f946:	e014      	b.n	801f972 <_vfiprintf_r+0x13a>
 801f948:	eba0 0308 	sub.w	r3, r0, r8
 801f94c:	fa09 f303 	lsl.w	r3, r9, r3
 801f950:	4313      	orrs	r3, r2
 801f952:	9304      	str	r3, [sp, #16]
 801f954:	46a2      	mov	sl, r4
 801f956:	e7d2      	b.n	801f8fe <_vfiprintf_r+0xc6>
 801f958:	9b03      	ldr	r3, [sp, #12]
 801f95a:	1d19      	adds	r1, r3, #4
 801f95c:	681b      	ldr	r3, [r3, #0]
 801f95e:	9103      	str	r1, [sp, #12]
 801f960:	2b00      	cmp	r3, #0
 801f962:	bfbb      	ittet	lt
 801f964:	425b      	neglt	r3, r3
 801f966:	f042 0202 	orrlt.w	r2, r2, #2
 801f96a:	9307      	strge	r3, [sp, #28]
 801f96c:	9307      	strlt	r3, [sp, #28]
 801f96e:	bfb8      	it	lt
 801f970:	9204      	strlt	r2, [sp, #16]
 801f972:	7823      	ldrb	r3, [r4, #0]
 801f974:	2b2e      	cmp	r3, #46	; 0x2e
 801f976:	d10c      	bne.n	801f992 <_vfiprintf_r+0x15a>
 801f978:	7863      	ldrb	r3, [r4, #1]
 801f97a:	2b2a      	cmp	r3, #42	; 0x2a
 801f97c:	d134      	bne.n	801f9e8 <_vfiprintf_r+0x1b0>
 801f97e:	9b03      	ldr	r3, [sp, #12]
 801f980:	1d1a      	adds	r2, r3, #4
 801f982:	681b      	ldr	r3, [r3, #0]
 801f984:	9203      	str	r2, [sp, #12]
 801f986:	2b00      	cmp	r3, #0
 801f988:	bfb8      	it	lt
 801f98a:	f04f 33ff 	movlt.w	r3, #4294967295
 801f98e:	3402      	adds	r4, #2
 801f990:	9305      	str	r3, [sp, #20]
 801f992:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801fa68 <_vfiprintf_r+0x230>
 801f996:	7821      	ldrb	r1, [r4, #0]
 801f998:	2203      	movs	r2, #3
 801f99a:	4650      	mov	r0, sl
 801f99c:	f7e0 fcc8 	bl	8000330 <memchr>
 801f9a0:	b138      	cbz	r0, 801f9b2 <_vfiprintf_r+0x17a>
 801f9a2:	9b04      	ldr	r3, [sp, #16]
 801f9a4:	eba0 000a 	sub.w	r0, r0, sl
 801f9a8:	2240      	movs	r2, #64	; 0x40
 801f9aa:	4082      	lsls	r2, r0
 801f9ac:	4313      	orrs	r3, r2
 801f9ae:	3401      	adds	r4, #1
 801f9b0:	9304      	str	r3, [sp, #16]
 801f9b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f9b6:	4829      	ldr	r0, [pc, #164]	; (801fa5c <_vfiprintf_r+0x224>)
 801f9b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f9bc:	2206      	movs	r2, #6
 801f9be:	f7e0 fcb7 	bl	8000330 <memchr>
 801f9c2:	2800      	cmp	r0, #0
 801f9c4:	d03f      	beq.n	801fa46 <_vfiprintf_r+0x20e>
 801f9c6:	4b26      	ldr	r3, [pc, #152]	; (801fa60 <_vfiprintf_r+0x228>)
 801f9c8:	bb1b      	cbnz	r3, 801fa12 <_vfiprintf_r+0x1da>
 801f9ca:	9b03      	ldr	r3, [sp, #12]
 801f9cc:	3307      	adds	r3, #7
 801f9ce:	f023 0307 	bic.w	r3, r3, #7
 801f9d2:	3308      	adds	r3, #8
 801f9d4:	9303      	str	r3, [sp, #12]
 801f9d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f9d8:	443b      	add	r3, r7
 801f9da:	9309      	str	r3, [sp, #36]	; 0x24
 801f9dc:	e768      	b.n	801f8b0 <_vfiprintf_r+0x78>
 801f9de:	fb0c 3202 	mla	r2, ip, r2, r3
 801f9e2:	460c      	mov	r4, r1
 801f9e4:	2001      	movs	r0, #1
 801f9e6:	e7a6      	b.n	801f936 <_vfiprintf_r+0xfe>
 801f9e8:	2300      	movs	r3, #0
 801f9ea:	3401      	adds	r4, #1
 801f9ec:	9305      	str	r3, [sp, #20]
 801f9ee:	4619      	mov	r1, r3
 801f9f0:	f04f 0c0a 	mov.w	ip, #10
 801f9f4:	4620      	mov	r0, r4
 801f9f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f9fa:	3a30      	subs	r2, #48	; 0x30
 801f9fc:	2a09      	cmp	r2, #9
 801f9fe:	d903      	bls.n	801fa08 <_vfiprintf_r+0x1d0>
 801fa00:	2b00      	cmp	r3, #0
 801fa02:	d0c6      	beq.n	801f992 <_vfiprintf_r+0x15a>
 801fa04:	9105      	str	r1, [sp, #20]
 801fa06:	e7c4      	b.n	801f992 <_vfiprintf_r+0x15a>
 801fa08:	fb0c 2101 	mla	r1, ip, r1, r2
 801fa0c:	4604      	mov	r4, r0
 801fa0e:	2301      	movs	r3, #1
 801fa10:	e7f0      	b.n	801f9f4 <_vfiprintf_r+0x1bc>
 801fa12:	ab03      	add	r3, sp, #12
 801fa14:	9300      	str	r3, [sp, #0]
 801fa16:	462a      	mov	r2, r5
 801fa18:	4b12      	ldr	r3, [pc, #72]	; (801fa64 <_vfiprintf_r+0x22c>)
 801fa1a:	a904      	add	r1, sp, #16
 801fa1c:	4630      	mov	r0, r6
 801fa1e:	f7fb faff 	bl	801b020 <_printf_float>
 801fa22:	4607      	mov	r7, r0
 801fa24:	1c78      	adds	r0, r7, #1
 801fa26:	d1d6      	bne.n	801f9d6 <_vfiprintf_r+0x19e>
 801fa28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fa2a:	07d9      	lsls	r1, r3, #31
 801fa2c:	d405      	bmi.n	801fa3a <_vfiprintf_r+0x202>
 801fa2e:	89ab      	ldrh	r3, [r5, #12]
 801fa30:	059a      	lsls	r2, r3, #22
 801fa32:	d402      	bmi.n	801fa3a <_vfiprintf_r+0x202>
 801fa34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fa36:	f7fc fa73 	bl	801bf20 <__retarget_lock_release_recursive>
 801fa3a:	89ab      	ldrh	r3, [r5, #12]
 801fa3c:	065b      	lsls	r3, r3, #25
 801fa3e:	f53f af1d 	bmi.w	801f87c <_vfiprintf_r+0x44>
 801fa42:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fa44:	e71c      	b.n	801f880 <_vfiprintf_r+0x48>
 801fa46:	ab03      	add	r3, sp, #12
 801fa48:	9300      	str	r3, [sp, #0]
 801fa4a:	462a      	mov	r2, r5
 801fa4c:	4b05      	ldr	r3, [pc, #20]	; (801fa64 <_vfiprintf_r+0x22c>)
 801fa4e:	a904      	add	r1, sp, #16
 801fa50:	4630      	mov	r0, r6
 801fa52:	f7fb fd6d 	bl	801b530 <_printf_i>
 801fa56:	e7e4      	b.n	801fa22 <_vfiprintf_r+0x1ea>
 801fa58:	08020849 	.word	0x08020849
 801fa5c:	08020853 	.word	0x08020853
 801fa60:	0801b021 	.word	0x0801b021
 801fa64:	0801f815 	.word	0x0801f815
 801fa68:	0802084f 	.word	0x0802084f

0801fa6c <__swbuf_r>:
 801fa6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa6e:	460e      	mov	r6, r1
 801fa70:	4614      	mov	r4, r2
 801fa72:	4605      	mov	r5, r0
 801fa74:	b118      	cbz	r0, 801fa7e <__swbuf_r+0x12>
 801fa76:	6a03      	ldr	r3, [r0, #32]
 801fa78:	b90b      	cbnz	r3, 801fa7e <__swbuf_r+0x12>
 801fa7a:	f7fc f90b 	bl	801bc94 <__sinit>
 801fa7e:	69a3      	ldr	r3, [r4, #24]
 801fa80:	60a3      	str	r3, [r4, #8]
 801fa82:	89a3      	ldrh	r3, [r4, #12]
 801fa84:	071a      	lsls	r2, r3, #28
 801fa86:	d525      	bpl.n	801fad4 <__swbuf_r+0x68>
 801fa88:	6923      	ldr	r3, [r4, #16]
 801fa8a:	b31b      	cbz	r3, 801fad4 <__swbuf_r+0x68>
 801fa8c:	6823      	ldr	r3, [r4, #0]
 801fa8e:	6922      	ldr	r2, [r4, #16]
 801fa90:	1a98      	subs	r0, r3, r2
 801fa92:	6963      	ldr	r3, [r4, #20]
 801fa94:	b2f6      	uxtb	r6, r6
 801fa96:	4283      	cmp	r3, r0
 801fa98:	4637      	mov	r7, r6
 801fa9a:	dc04      	bgt.n	801faa6 <__swbuf_r+0x3a>
 801fa9c:	4621      	mov	r1, r4
 801fa9e:	4628      	mov	r0, r5
 801faa0:	f7ff f950 	bl	801ed44 <_fflush_r>
 801faa4:	b9e0      	cbnz	r0, 801fae0 <__swbuf_r+0x74>
 801faa6:	68a3      	ldr	r3, [r4, #8]
 801faa8:	3b01      	subs	r3, #1
 801faaa:	60a3      	str	r3, [r4, #8]
 801faac:	6823      	ldr	r3, [r4, #0]
 801faae:	1c5a      	adds	r2, r3, #1
 801fab0:	6022      	str	r2, [r4, #0]
 801fab2:	701e      	strb	r6, [r3, #0]
 801fab4:	6962      	ldr	r2, [r4, #20]
 801fab6:	1c43      	adds	r3, r0, #1
 801fab8:	429a      	cmp	r2, r3
 801faba:	d004      	beq.n	801fac6 <__swbuf_r+0x5a>
 801fabc:	89a3      	ldrh	r3, [r4, #12]
 801fabe:	07db      	lsls	r3, r3, #31
 801fac0:	d506      	bpl.n	801fad0 <__swbuf_r+0x64>
 801fac2:	2e0a      	cmp	r6, #10
 801fac4:	d104      	bne.n	801fad0 <__swbuf_r+0x64>
 801fac6:	4621      	mov	r1, r4
 801fac8:	4628      	mov	r0, r5
 801faca:	f7ff f93b 	bl	801ed44 <_fflush_r>
 801face:	b938      	cbnz	r0, 801fae0 <__swbuf_r+0x74>
 801fad0:	4638      	mov	r0, r7
 801fad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fad4:	4621      	mov	r1, r4
 801fad6:	4628      	mov	r0, r5
 801fad8:	f000 f806 	bl	801fae8 <__swsetup_r>
 801fadc:	2800      	cmp	r0, #0
 801fade:	d0d5      	beq.n	801fa8c <__swbuf_r+0x20>
 801fae0:	f04f 37ff 	mov.w	r7, #4294967295
 801fae4:	e7f4      	b.n	801fad0 <__swbuf_r+0x64>
	...

0801fae8 <__swsetup_r>:
 801fae8:	b538      	push	{r3, r4, r5, lr}
 801faea:	4b2a      	ldr	r3, [pc, #168]	; (801fb94 <__swsetup_r+0xac>)
 801faec:	4605      	mov	r5, r0
 801faee:	6818      	ldr	r0, [r3, #0]
 801faf0:	460c      	mov	r4, r1
 801faf2:	b118      	cbz	r0, 801fafc <__swsetup_r+0x14>
 801faf4:	6a03      	ldr	r3, [r0, #32]
 801faf6:	b90b      	cbnz	r3, 801fafc <__swsetup_r+0x14>
 801faf8:	f7fc f8cc 	bl	801bc94 <__sinit>
 801fafc:	89a3      	ldrh	r3, [r4, #12]
 801fafe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fb02:	0718      	lsls	r0, r3, #28
 801fb04:	d422      	bmi.n	801fb4c <__swsetup_r+0x64>
 801fb06:	06d9      	lsls	r1, r3, #27
 801fb08:	d407      	bmi.n	801fb1a <__swsetup_r+0x32>
 801fb0a:	2309      	movs	r3, #9
 801fb0c:	602b      	str	r3, [r5, #0]
 801fb0e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801fb12:	81a3      	strh	r3, [r4, #12]
 801fb14:	f04f 30ff 	mov.w	r0, #4294967295
 801fb18:	e034      	b.n	801fb84 <__swsetup_r+0x9c>
 801fb1a:	0758      	lsls	r0, r3, #29
 801fb1c:	d512      	bpl.n	801fb44 <__swsetup_r+0x5c>
 801fb1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fb20:	b141      	cbz	r1, 801fb34 <__swsetup_r+0x4c>
 801fb22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fb26:	4299      	cmp	r1, r3
 801fb28:	d002      	beq.n	801fb30 <__swsetup_r+0x48>
 801fb2a:	4628      	mov	r0, r5
 801fb2c:	f7fd f80c 	bl	801cb48 <_free_r>
 801fb30:	2300      	movs	r3, #0
 801fb32:	6363      	str	r3, [r4, #52]	; 0x34
 801fb34:	89a3      	ldrh	r3, [r4, #12]
 801fb36:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801fb3a:	81a3      	strh	r3, [r4, #12]
 801fb3c:	2300      	movs	r3, #0
 801fb3e:	6063      	str	r3, [r4, #4]
 801fb40:	6923      	ldr	r3, [r4, #16]
 801fb42:	6023      	str	r3, [r4, #0]
 801fb44:	89a3      	ldrh	r3, [r4, #12]
 801fb46:	f043 0308 	orr.w	r3, r3, #8
 801fb4a:	81a3      	strh	r3, [r4, #12]
 801fb4c:	6923      	ldr	r3, [r4, #16]
 801fb4e:	b94b      	cbnz	r3, 801fb64 <__swsetup_r+0x7c>
 801fb50:	89a3      	ldrh	r3, [r4, #12]
 801fb52:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801fb56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fb5a:	d003      	beq.n	801fb64 <__swsetup_r+0x7c>
 801fb5c:	4621      	mov	r1, r4
 801fb5e:	4628      	mov	r0, r5
 801fb60:	f000 f884 	bl	801fc6c <__smakebuf_r>
 801fb64:	89a0      	ldrh	r0, [r4, #12]
 801fb66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fb6a:	f010 0301 	ands.w	r3, r0, #1
 801fb6e:	d00a      	beq.n	801fb86 <__swsetup_r+0x9e>
 801fb70:	2300      	movs	r3, #0
 801fb72:	60a3      	str	r3, [r4, #8]
 801fb74:	6963      	ldr	r3, [r4, #20]
 801fb76:	425b      	negs	r3, r3
 801fb78:	61a3      	str	r3, [r4, #24]
 801fb7a:	6923      	ldr	r3, [r4, #16]
 801fb7c:	b943      	cbnz	r3, 801fb90 <__swsetup_r+0xa8>
 801fb7e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801fb82:	d1c4      	bne.n	801fb0e <__swsetup_r+0x26>
 801fb84:	bd38      	pop	{r3, r4, r5, pc}
 801fb86:	0781      	lsls	r1, r0, #30
 801fb88:	bf58      	it	pl
 801fb8a:	6963      	ldrpl	r3, [r4, #20]
 801fb8c:	60a3      	str	r3, [r4, #8]
 801fb8e:	e7f4      	b.n	801fb7a <__swsetup_r+0x92>
 801fb90:	2000      	movs	r0, #0
 801fb92:	e7f7      	b.n	801fb84 <__swsetup_r+0x9c>
 801fb94:	24000158 	.word	0x24000158

0801fb98 <_raise_r>:
 801fb98:	291f      	cmp	r1, #31
 801fb9a:	b538      	push	{r3, r4, r5, lr}
 801fb9c:	4604      	mov	r4, r0
 801fb9e:	460d      	mov	r5, r1
 801fba0:	d904      	bls.n	801fbac <_raise_r+0x14>
 801fba2:	2316      	movs	r3, #22
 801fba4:	6003      	str	r3, [r0, #0]
 801fba6:	f04f 30ff 	mov.w	r0, #4294967295
 801fbaa:	bd38      	pop	{r3, r4, r5, pc}
 801fbac:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801fbae:	b112      	cbz	r2, 801fbb6 <_raise_r+0x1e>
 801fbb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801fbb4:	b94b      	cbnz	r3, 801fbca <_raise_r+0x32>
 801fbb6:	4620      	mov	r0, r4
 801fbb8:	f000 f830 	bl	801fc1c <_getpid_r>
 801fbbc:	462a      	mov	r2, r5
 801fbbe:	4601      	mov	r1, r0
 801fbc0:	4620      	mov	r0, r4
 801fbc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fbc6:	f000 b817 	b.w	801fbf8 <_kill_r>
 801fbca:	2b01      	cmp	r3, #1
 801fbcc:	d00a      	beq.n	801fbe4 <_raise_r+0x4c>
 801fbce:	1c59      	adds	r1, r3, #1
 801fbd0:	d103      	bne.n	801fbda <_raise_r+0x42>
 801fbd2:	2316      	movs	r3, #22
 801fbd4:	6003      	str	r3, [r0, #0]
 801fbd6:	2001      	movs	r0, #1
 801fbd8:	e7e7      	b.n	801fbaa <_raise_r+0x12>
 801fbda:	2400      	movs	r4, #0
 801fbdc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801fbe0:	4628      	mov	r0, r5
 801fbe2:	4798      	blx	r3
 801fbe4:	2000      	movs	r0, #0
 801fbe6:	e7e0      	b.n	801fbaa <_raise_r+0x12>

0801fbe8 <raise>:
 801fbe8:	4b02      	ldr	r3, [pc, #8]	; (801fbf4 <raise+0xc>)
 801fbea:	4601      	mov	r1, r0
 801fbec:	6818      	ldr	r0, [r3, #0]
 801fbee:	f7ff bfd3 	b.w	801fb98 <_raise_r>
 801fbf2:	bf00      	nop
 801fbf4:	24000158 	.word	0x24000158

0801fbf8 <_kill_r>:
 801fbf8:	b538      	push	{r3, r4, r5, lr}
 801fbfa:	4d07      	ldr	r5, [pc, #28]	; (801fc18 <_kill_r+0x20>)
 801fbfc:	2300      	movs	r3, #0
 801fbfe:	4604      	mov	r4, r0
 801fc00:	4608      	mov	r0, r1
 801fc02:	4611      	mov	r1, r2
 801fc04:	602b      	str	r3, [r5, #0]
 801fc06:	f7e4 f8e5 	bl	8003dd4 <_kill>
 801fc0a:	1c43      	adds	r3, r0, #1
 801fc0c:	d102      	bne.n	801fc14 <_kill_r+0x1c>
 801fc0e:	682b      	ldr	r3, [r5, #0]
 801fc10:	b103      	cbz	r3, 801fc14 <_kill_r+0x1c>
 801fc12:	6023      	str	r3, [r4, #0]
 801fc14:	bd38      	pop	{r3, r4, r5, pc}
 801fc16:	bf00      	nop
 801fc18:	24003620 	.word	0x24003620

0801fc1c <_getpid_r>:
 801fc1c:	f7e4 b8d2 	b.w	8003dc4 <_getpid>

0801fc20 <__swhatbuf_r>:
 801fc20:	b570      	push	{r4, r5, r6, lr}
 801fc22:	460c      	mov	r4, r1
 801fc24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fc28:	2900      	cmp	r1, #0
 801fc2a:	b096      	sub	sp, #88	; 0x58
 801fc2c:	4615      	mov	r5, r2
 801fc2e:	461e      	mov	r6, r3
 801fc30:	da0d      	bge.n	801fc4e <__swhatbuf_r+0x2e>
 801fc32:	89a3      	ldrh	r3, [r4, #12]
 801fc34:	f013 0f80 	tst.w	r3, #128	; 0x80
 801fc38:	f04f 0100 	mov.w	r1, #0
 801fc3c:	bf0c      	ite	eq
 801fc3e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801fc42:	2340      	movne	r3, #64	; 0x40
 801fc44:	2000      	movs	r0, #0
 801fc46:	6031      	str	r1, [r6, #0]
 801fc48:	602b      	str	r3, [r5, #0]
 801fc4a:	b016      	add	sp, #88	; 0x58
 801fc4c:	bd70      	pop	{r4, r5, r6, pc}
 801fc4e:	466a      	mov	r2, sp
 801fc50:	f000 f848 	bl	801fce4 <_fstat_r>
 801fc54:	2800      	cmp	r0, #0
 801fc56:	dbec      	blt.n	801fc32 <__swhatbuf_r+0x12>
 801fc58:	9901      	ldr	r1, [sp, #4]
 801fc5a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801fc5e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801fc62:	4259      	negs	r1, r3
 801fc64:	4159      	adcs	r1, r3
 801fc66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801fc6a:	e7eb      	b.n	801fc44 <__swhatbuf_r+0x24>

0801fc6c <__smakebuf_r>:
 801fc6c:	898b      	ldrh	r3, [r1, #12]
 801fc6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801fc70:	079d      	lsls	r5, r3, #30
 801fc72:	4606      	mov	r6, r0
 801fc74:	460c      	mov	r4, r1
 801fc76:	d507      	bpl.n	801fc88 <__smakebuf_r+0x1c>
 801fc78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801fc7c:	6023      	str	r3, [r4, #0]
 801fc7e:	6123      	str	r3, [r4, #16]
 801fc80:	2301      	movs	r3, #1
 801fc82:	6163      	str	r3, [r4, #20]
 801fc84:	b002      	add	sp, #8
 801fc86:	bd70      	pop	{r4, r5, r6, pc}
 801fc88:	ab01      	add	r3, sp, #4
 801fc8a:	466a      	mov	r2, sp
 801fc8c:	f7ff ffc8 	bl	801fc20 <__swhatbuf_r>
 801fc90:	9900      	ldr	r1, [sp, #0]
 801fc92:	4605      	mov	r5, r0
 801fc94:	4630      	mov	r0, r6
 801fc96:	f7fc ffcb 	bl	801cc30 <_malloc_r>
 801fc9a:	b948      	cbnz	r0, 801fcb0 <__smakebuf_r+0x44>
 801fc9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fca0:	059a      	lsls	r2, r3, #22
 801fca2:	d4ef      	bmi.n	801fc84 <__smakebuf_r+0x18>
 801fca4:	f023 0303 	bic.w	r3, r3, #3
 801fca8:	f043 0302 	orr.w	r3, r3, #2
 801fcac:	81a3      	strh	r3, [r4, #12]
 801fcae:	e7e3      	b.n	801fc78 <__smakebuf_r+0xc>
 801fcb0:	89a3      	ldrh	r3, [r4, #12]
 801fcb2:	6020      	str	r0, [r4, #0]
 801fcb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fcb8:	81a3      	strh	r3, [r4, #12]
 801fcba:	9b00      	ldr	r3, [sp, #0]
 801fcbc:	6163      	str	r3, [r4, #20]
 801fcbe:	9b01      	ldr	r3, [sp, #4]
 801fcc0:	6120      	str	r0, [r4, #16]
 801fcc2:	b15b      	cbz	r3, 801fcdc <__smakebuf_r+0x70>
 801fcc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fcc8:	4630      	mov	r0, r6
 801fcca:	f000 f81d 	bl	801fd08 <_isatty_r>
 801fcce:	b128      	cbz	r0, 801fcdc <__smakebuf_r+0x70>
 801fcd0:	89a3      	ldrh	r3, [r4, #12]
 801fcd2:	f023 0303 	bic.w	r3, r3, #3
 801fcd6:	f043 0301 	orr.w	r3, r3, #1
 801fcda:	81a3      	strh	r3, [r4, #12]
 801fcdc:	89a3      	ldrh	r3, [r4, #12]
 801fcde:	431d      	orrs	r5, r3
 801fce0:	81a5      	strh	r5, [r4, #12]
 801fce2:	e7cf      	b.n	801fc84 <__smakebuf_r+0x18>

0801fce4 <_fstat_r>:
 801fce4:	b538      	push	{r3, r4, r5, lr}
 801fce6:	4d07      	ldr	r5, [pc, #28]	; (801fd04 <_fstat_r+0x20>)
 801fce8:	2300      	movs	r3, #0
 801fcea:	4604      	mov	r4, r0
 801fcec:	4608      	mov	r0, r1
 801fcee:	4611      	mov	r1, r2
 801fcf0:	602b      	str	r3, [r5, #0]
 801fcf2:	f7e4 f8ce 	bl	8003e92 <_fstat>
 801fcf6:	1c43      	adds	r3, r0, #1
 801fcf8:	d102      	bne.n	801fd00 <_fstat_r+0x1c>
 801fcfa:	682b      	ldr	r3, [r5, #0]
 801fcfc:	b103      	cbz	r3, 801fd00 <_fstat_r+0x1c>
 801fcfe:	6023      	str	r3, [r4, #0]
 801fd00:	bd38      	pop	{r3, r4, r5, pc}
 801fd02:	bf00      	nop
 801fd04:	24003620 	.word	0x24003620

0801fd08 <_isatty_r>:
 801fd08:	b538      	push	{r3, r4, r5, lr}
 801fd0a:	4d06      	ldr	r5, [pc, #24]	; (801fd24 <_isatty_r+0x1c>)
 801fd0c:	2300      	movs	r3, #0
 801fd0e:	4604      	mov	r4, r0
 801fd10:	4608      	mov	r0, r1
 801fd12:	602b      	str	r3, [r5, #0]
 801fd14:	f7e4 f8cd 	bl	8003eb2 <_isatty>
 801fd18:	1c43      	adds	r3, r0, #1
 801fd1a:	d102      	bne.n	801fd22 <_isatty_r+0x1a>
 801fd1c:	682b      	ldr	r3, [r5, #0]
 801fd1e:	b103      	cbz	r3, 801fd22 <_isatty_r+0x1a>
 801fd20:	6023      	str	r3, [r4, #0]
 801fd22:	bd38      	pop	{r3, r4, r5, pc}
 801fd24:	24003620 	.word	0x24003620

0801fd28 <_init>:
 801fd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd2a:	bf00      	nop
 801fd2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fd2e:	bc08      	pop	{r3}
 801fd30:	469e      	mov	lr, r3
 801fd32:	4770      	bx	lr

0801fd34 <_fini>:
 801fd34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd36:	bf00      	nop
 801fd38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fd3a:	bc08      	pop	{r3}
 801fd3c:	469e      	mov	lr, r3
 801fd3e:	4770      	bx	lr
